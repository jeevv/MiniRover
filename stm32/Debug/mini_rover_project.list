
mini_rover_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019bc4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001434  08019d68  08019d68  0001ad68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b19c  0801b19c  0001dac0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b19c  0801b19c  0001c19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b1a4  0801b1a4  0001dac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801b1a4  0801b1a4  0001c1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b1b4  0801b1b4  0001c1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ac0  20000000  0801b1b8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc3c  20000ac0  0801bc78  0001dac0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000e6fc  0801bc78  0001e6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001dac0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce6e  00000000  00000000  0001daf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e73  00000000  00000000  0003a95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0003e7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001362  00000000  00000000  000400a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008cd0  00000000  00000000  0004140a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de10  00000000  00000000  0004a0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7395  00000000  00000000  00067eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0010f27f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a24  00000000  00000000  0010f2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00116d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000ac0 	.word	0x20000ac0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08019d4c 	.word	0x08019d4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000ac4 	.word	0x20000ac4
 80001dc:	08019d4c 	.word	0x08019d4c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ldivmod>:
 8000bec:	b97b      	cbnz	r3, 8000c0e <__aeabi_ldivmod+0x22>
 8000bee:	b972      	cbnz	r2, 8000c0e <__aeabi_ldivmod+0x22>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bfbe      	ittt	lt
 8000bf4:	2000      	movlt	r0, #0
 8000bf6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bfa:	e006      	blt.n	8000c0a <__aeabi_ldivmod+0x1e>
 8000bfc:	bf08      	it	eq
 8000bfe:	2800      	cmpeq	r0, #0
 8000c00:	bf1c      	itt	ne
 8000c02:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c06:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0a:	f000 b9b5 	b.w	8000f78 <__aeabi_idiv0>
 8000c0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c16:	2900      	cmp	r1, #0
 8000c18:	db09      	blt.n	8000c2e <__aeabi_ldivmod+0x42>
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db1a      	blt.n	8000c54 <__aeabi_ldivmod+0x68>
 8000c1e:	f000 f84d 	bl	8000cbc <__udivmoddi4>
 8000c22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db1b      	blt.n	8000c70 <__aeabi_ldivmod+0x84>
 8000c38:	f000 f840 	bl	8000cbc <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4240      	negs	r0, r0
 8000c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	4770      	bx	lr
 8000c54:	4252      	negs	r2, r2
 8000c56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5a:	f000 f82f 	bl	8000cbc <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4240      	negs	r0, r0
 8000c6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f821 	bl	8000cbc <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	f000 b96a 	b.w	8000f78 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9d08      	ldr	r5, [sp, #32]
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14e      	bne.n	8000d66 <__udivmoddi4+0xaa>
 8000cc8:	4694      	mov	ip, r2
 8000cca:	458c      	cmp	ip, r1
 8000ccc:	4686      	mov	lr, r0
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	d962      	bls.n	8000d9a <__udivmoddi4+0xde>
 8000cd4:	b14a      	cbz	r2, 8000cea <__udivmoddi4+0x2e>
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	4319      	orrs	r1, r3
 8000ce6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f f68c 	uxth.w	r6, ip
 8000cf2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb04 f106 	mul.w	r1, r4, r6
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x64>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d12:	f080 8112 	bcs.w	8000f3a <__udivmoddi4+0x27e>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 810f 	bls.w	8000f3a <__udivmoddi4+0x27e>
 8000d1c:	3c02      	subs	r4, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a59      	subs	r1, r3, r1
 8000d22:	fa1f f38e 	uxth.w	r3, lr
 8000d26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb00 f606 	mul.w	r6, r0, r6
 8000d36:	429e      	cmp	r6, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x94>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d42:	f080 80fc 	bcs.w	8000f3e <__udivmoddi4+0x282>
 8000d46:	429e      	cmp	r6, r3
 8000d48:	f240 80f9 	bls.w	8000f3e <__udivmoddi4+0x282>
 8000d4c:	4463      	add	r3, ip
 8000d4e:	3802      	subs	r0, #2
 8000d50:	1b9b      	subs	r3, r3, r6
 8000d52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d56:	2100      	movs	r1, #0
 8000d58:	b11d      	cbz	r5, 8000d62 <__udivmoddi4+0xa6>
 8000d5a:	40d3      	lsrs	r3, r2
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d905      	bls.n	8000d76 <__udivmoddi4+0xba>
 8000d6a:	b10d      	cbz	r5, 8000d70 <__udivmoddi4+0xb4>
 8000d6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	4608      	mov	r0, r1
 8000d74:	e7f5      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d76:	fab3 f183 	clz	r1, r3
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d146      	bne.n	8000e0c <__udivmoddi4+0x150>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xcc>
 8000d82:	4290      	cmp	r0, r2
 8000d84:	f0c0 80f0 	bcc.w	8000f68 <__udivmoddi4+0x2ac>
 8000d88:	1a86      	subs	r6, r0, r2
 8000d8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d0e6      	beq.n	8000d62 <__udivmoddi4+0xa6>
 8000d94:	e9c5 6300 	strd	r6, r3, [r5]
 8000d98:	e7e3      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	f040 8090 	bne.w	8000ec0 <__udivmoddi4+0x204>
 8000da0:	eba1 040c 	sub.w	r4, r1, ip
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	2101      	movs	r1, #1
 8000dae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dbe:	fb07 f006 	mul.w	r0, r7, r6
 8000dc2:	4298      	cmp	r0, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x11c>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x11a>
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	f200 80cd 	bhi.w	8000f70 <__udivmoddi4+0x2b4>
 8000dd6:	4626      	mov	r6, r4
 8000dd8:	1a1c      	subs	r4, r3, r0
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000de2:	fb08 4410 	mls	r4, r8, r0, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb00 f707 	mul.w	r7, r0, r7
 8000dee:	429f      	cmp	r7, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x148>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x146>
 8000dfc:	429f      	cmp	r7, r3
 8000dfe:	f200 80b0 	bhi.w	8000f62 <__udivmoddi4+0x2a6>
 8000e02:	4620      	mov	r0, r4
 8000e04:	1bdb      	subs	r3, r3, r7
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0x9c>
 8000e0c:	f1c1 0620 	rsb	r6, r1, #32
 8000e10:	408b      	lsls	r3, r1
 8000e12:	fa22 f706 	lsr.w	r7, r2, r6
 8000e16:	431f      	orrs	r7, r3
 8000e18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e20:	ea43 030c 	orr.w	r3, r3, ip
 8000e24:	40f4      	lsrs	r4, r6
 8000e26:	fa00 f801 	lsl.w	r8, r0, r1
 8000e2a:	0c38      	lsrs	r0, r7, #16
 8000e2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e30:	fbb4 fef0 	udiv	lr, r4, r0
 8000e34:	fa1f fc87 	uxth.w	ip, r7
 8000e38:	fb00 441e 	mls	r4, r0, lr, r4
 8000e3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e40:	fb0e f90c 	mul.w	r9, lr, ip
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	d90a      	bls.n	8000e62 <__udivmoddi4+0x1a6>
 8000e4c:	193c      	adds	r4, r7, r4
 8000e4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e52:	f080 8084 	bcs.w	8000f5e <__udivmoddi4+0x2a2>
 8000e56:	45a1      	cmp	r9, r4
 8000e58:	f240 8081 	bls.w	8000f5e <__udivmoddi4+0x2a2>
 8000e5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e60:	443c      	add	r4, r7
 8000e62:	eba4 0409 	sub.w	r4, r4, r9
 8000e66:	fa1f f983 	uxth.w	r9, r3
 8000e6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e7a:	45a4      	cmp	ip, r4
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x1d2>
 8000e7e:	193c      	adds	r4, r7, r4
 8000e80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e84:	d267      	bcs.n	8000f56 <__udivmoddi4+0x29a>
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d965      	bls.n	8000f56 <__udivmoddi4+0x29a>
 8000e8a:	3b02      	subs	r3, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e92:	fba0 9302 	umull	r9, r3, r0, r2
 8000e96:	eba4 040c 	sub.w	r4, r4, ip
 8000e9a:	429c      	cmp	r4, r3
 8000e9c:	46ce      	mov	lr, r9
 8000e9e:	469c      	mov	ip, r3
 8000ea0:	d351      	bcc.n	8000f46 <__udivmoddi4+0x28a>
 8000ea2:	d04e      	beq.n	8000f42 <__udivmoddi4+0x286>
 8000ea4:	b155      	cbz	r5, 8000ebc <__udivmoddi4+0x200>
 8000ea6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000eae:	fa04 f606 	lsl.w	r6, r4, r6
 8000eb2:	40cb      	lsrs	r3, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	40cc      	lsrs	r4, r1
 8000eb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	e750      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000ec0:	f1c2 0320 	rsb	r3, r2, #32
 8000ec4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ed0:	4094      	lsls	r4, r2
 8000ed2:	430c      	orrs	r4, r1
 8000ed4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000edc:	fa1f f78c 	uxth.w	r7, ip
 8000ee0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee8:	0c23      	lsrs	r3, r4, #16
 8000eea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eee:	fb00 f107 	mul.w	r1, r0, r7
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x24c>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efe:	d22c      	bcs.n	8000f5a <__udivmoddi4+0x29e>
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d92a      	bls.n	8000f5a <__udivmoddi4+0x29e>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f10:	fb08 3311 	mls	r3, r8, r1, r3
 8000f14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f18:	fb01 f307 	mul.w	r3, r1, r7
 8000f1c:	42a3      	cmp	r3, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x276>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f28:	d213      	bcs.n	8000f52 <__udivmoddi4+0x296>
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	d911      	bls.n	8000f52 <__udivmoddi4+0x296>
 8000f2e:	3902      	subs	r1, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	1ae4      	subs	r4, r4, r3
 8000f34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f38:	e739      	b.n	8000dae <__udivmoddi4+0xf2>
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	e6f0      	b.n	8000d20 <__udivmoddi4+0x64>
 8000f3e:	4608      	mov	r0, r1
 8000f40:	e706      	b.n	8000d50 <__udivmoddi4+0x94>
 8000f42:	45c8      	cmp	r8, r9
 8000f44:	d2ae      	bcs.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4e:	3801      	subs	r0, #1
 8000f50:	e7a8      	b.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f52:	4631      	mov	r1, r6
 8000f54:	e7ed      	b.n	8000f32 <__udivmoddi4+0x276>
 8000f56:	4603      	mov	r3, r0
 8000f58:	e799      	b.n	8000e8e <__udivmoddi4+0x1d2>
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e7d4      	b.n	8000f08 <__udivmoddi4+0x24c>
 8000f5e:	46d6      	mov	lr, sl
 8000f60:	e77f      	b.n	8000e62 <__udivmoddi4+0x1a6>
 8000f62:	4463      	add	r3, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e74d      	b.n	8000e04 <__udivmoddi4+0x148>
 8000f68:	4606      	mov	r6, r0
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	e70f      	b.n	8000d90 <__udivmoddi4+0xd4>
 8000f70:	3e02      	subs	r6, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	e730      	b.n	8000dd8 <__udivmoddi4+0x11c>
 8000f76:	bf00      	nop

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f88:	f007 fcb0 	bl	80088ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f94:	f000 f986 	bl	80012a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f98:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f040 8090 	bne.w	80010c6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01e      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fac:	2208      	movs	r2, #8
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d015      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f023 0307 	bic.w	r3, r3, #7
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fd6:	f383 8811 	msr	BASEPRI, r3
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	e7fd      	b.n	8000fe6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d06a      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
 8000ff0:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d865      	bhi.n	80010c6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ffa:	4b42      	ldr	r3, [pc, #264]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8000ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000ffe:	4b41      	ldr	r3, [pc, #260]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001004:	e004      	b.n	8001010 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d903      	bls.n	8001022 <pvPortMallocMicroROS+0xa6>
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f1      	bne.n	8001006 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001028:	429a      	cmp	r2, r3
 800102a:	d04c      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2208      	movs	r2, #8
 8001032:	4413      	add	r3, r2
 8001034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1ad2      	subs	r2, r2, r3
 8001046:	2308      	movs	r3, #8
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	429a      	cmp	r2, r3
 800104c:	d920      	bls.n	8001090 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800104e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001064:	f383 8811 	msr	BASEPRI, r3
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	613b      	str	r3, [r7, #16]
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1ad2      	subs	r2, r2, r3
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800108a:	69b8      	ldr	r0, [r7, #24]
 800108c:	f000 f96c 	bl	8001368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 800109c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d203      	bcs.n	80010b2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010c6:	f007 fc1f 	bl	8008908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	60fb      	str	r3, [r7, #12]
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80010ec:	69fb      	ldr	r3, [r7, #28]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200046e4 	.word	0x200046e4
 80010fc:	200046f0 	.word	0x200046f0
 8001100:	200046e8 	.word	0x200046e8
 8001104:	200046dc 	.word	0x200046dc
 8001108:	200046ec 	.word	0x200046ec

0800110c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d04a      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800111e:	2308      	movs	r3, #8
 8001120:	425b      	negs	r3, r3
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <vPortFreeMicroROS+0x46>
	__asm volatile
 800113a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	60fb      	str	r3, [r7, #12]
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <vPortFreeMicroROS+0x66>
	__asm volatile
 800115a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115e:	f383 8811 	msr	BASEPRI, r3
 8001162:	f3bf 8f6f 	isb	sy
 8001166:	f3bf 8f4f 	dsb	sy
 800116a:	60bb      	str	r3, [r7, #8]
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	e7fd      	b.n	800116e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d019      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d115      	bne.n	80011b4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001198:	f007 fba8 	bl	80088ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011aa:	6938      	ldr	r0, [r7, #16]
 80011ac:	f000 f8dc 	bl	8001368 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011b0:	f007 fbaa 	bl	8008908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200046f0 	.word	0x200046f0
 80011c0:	200046e8 	.word	0x200046e8

080011c4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011d0:	2308      	movs	r3, #8
 80011d2:	425b      	negs	r3, r3
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4413      	add	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <getBlockSize+0x38>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

	return count;
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200046f0 	.word	0x200046f0

08001200 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800120a:	f007 fb6f 	bl	80088ec <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f7ff feb4 	bl	8000f7c <pvPortMallocMicroROS>
 8001214:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d017      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d014      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffce 	bl	80011c4 <getBlockSize>
 8001228:	4603      	mov	r3, r0
 800122a:	2208      	movs	r2, #8
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d201      	bcs.n	800123c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f017 ff42 	bl	80190ca <memcpy>

		vPortFreeMicroROS(pv);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff60 	bl	800110c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800124c:	f007 fb5c 	bl	8008908 <xTaskResumeAll>

	return newmem;
 8001250:	68bb      	ldr	r3, [r7, #8]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001264:	f007 fb42 	bl	80088ec <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff fe82 	bl	8000f7c <pvPortMallocMicroROS>
 8001278:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800127e:	e004      	b.n	800128a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	613a      	str	r2, [r7, #16]
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	1e5a      	subs	r2, r3, #1
 800128e:	617a      	str	r2, [r7, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f5      	bne.n	8001280 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001294:	f007 fb38 	bl	8008908 <xTaskResumeAll>
  	return mem;
 8001298:	68fb      	ldr	r3, [r7, #12]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b0:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <prvHeapInit+0xac>)
 80012b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00c      	beq.n	80012d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3307      	adds	r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 0307 	bic.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <prvHeapInit+0xac>)
 80012d4:	4413      	add	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <prvHeapInit+0xb0>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <prvHeapInit+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f0:	2208      	movs	r2, #8
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f023 0307 	bic.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a15      	ldr	r2, [pc, #84]	@ (8001358 <prvHeapInit+0xb4>)
 8001304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <prvHeapInit+0xb4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <prvHeapInit+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	1ad2      	subs	r2, r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <prvHeapInit+0xb4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <prvHeapInit+0xb8>)
 8001332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <prvHeapInit+0xbc>)
 800133a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <prvHeapInit+0xc0>)
 800133e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	20000adc 	.word	0x20000adc
 8001354:	200046dc 	.word	0x200046dc
 8001358:	200046e4 	.word	0x200046e4
 800135c:	200046ec 	.word	0x200046ec
 8001360:	200046e8 	.word	0x200046e8
 8001364:	200046f0 	.word	0x200046f0

08001368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <prvInsertBlockIntoFreeList+0xac>)
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e002      	b.n	800137c <prvInsertBlockIntoFreeList+0x14>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d8f7      	bhi.n	8001376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	4413      	add	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d108      	bne.n	80013aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	441a      	add	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	441a      	add	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d118      	bne.n	80013f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d00d      	beq.n	80013e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e008      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e003      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d002      	beq.n	8001406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	200046dc 	.word	0x200046dc
 8001418:	200046e4 	.word	0x200046e4
 800141c:	00000000 	.word	0x00000000

08001420 <subscription_cmd_vel_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void subscription_cmd_vel_callback(const void * msgin)
{
 8001420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001424:	b088      	sub	sp, #32
 8001426:	af00      	add	r7, sp, #0
 8001428:	6178      	str	r0, [r7, #20]
	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist *)msgin;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	61fb      	str	r3, [r7, #28]

	LeftWheelVelocity = msg->linear.x - msg->angular.z*Length;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800143a:	a3a7      	add	r3, pc, #668	@ (adr r3, 80016d8 <subscription_cmd_vel_callback+0x2b8>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f8f2 	bl	8000628 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe ff34 	bl	80002b8 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	49a8      	ldr	r1, [pc, #672]	@ (80016f8 <subscription_cmd_vel_callback+0x2d8>)
 8001456:	e9c1 2300 	strd	r2, r3, [r1]
	RightWheelVelocity = msg->linear.x + msg->angular.z*Length;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001466:	a39c      	add	r3, pc, #624	@ (adr r3, 80016d8 <subscription_cmd_vel_callback+0x2b8>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f8dc 	bl	8000628 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe ff20 	bl	80002bc <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	499e      	ldr	r1, [pc, #632]	@ (80016fc <subscription_cmd_vel_callback+0x2dc>)
 8001482:	e9c1 2300 	strd	r2, r3, [r1]

	//w of motor in rpm
	LeftMotorSpeed = (int)(LeftWheelVelocity/WheelRadius) * 60/6.2831;
 8001486:	4b9c      	ldr	r3, [pc, #624]	@ (80016f8 <subscription_cmd_vel_callback+0x2d8>)
 8001488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148c:	a394      	add	r3, pc, #592	@ (adr r3, 80016e0 <subscription_cmd_vel_callback+0x2c0>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f9f3 	bl	800087c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fb5d 	bl	8000b5c <__aeabi_d2iz>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f851 	bl	8000554 <__aeabi_i2d>
 80014b2:	a38d      	add	r3, pc, #564	@ (adr r3, 80016e8 <subscription_cmd_vel_callback+0x2c8>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f9e0 	bl	800087c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	498f      	ldr	r1, [pc, #572]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 80014c2:	e9c1 2300 	strd	r2, r3, [r1]
	RightMotorSpeed = (int)(RightWheelVelocity/WheelRadius) * 60/6.2831;
 80014c6:	4b8d      	ldr	r3, [pc, #564]	@ (80016fc <subscription_cmd_vel_callback+0x2dc>)
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	a384      	add	r3, pc, #528	@ (adr r3, 80016e0 <subscription_cmd_vel_callback+0x2c0>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f9d3 	bl	800087c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb3d 	bl	8000b5c <__aeabi_d2iz>
 80014e2:	4602      	mov	r2, r0
 80014e4:	4613      	mov	r3, r2
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f831 	bl	8000554 <__aeabi_i2d>
 80014f2:	a37d      	add	r3, pc, #500	@ (adr r3, 80016e8 <subscription_cmd_vel_callback+0x2c8>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f9c0 	bl	800087c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4980      	ldr	r1, [pc, #512]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 8001502:	e9c1 2300 	strd	r2, r3, [r1]
	//PWM2 Left motor PB1
	//PWM1 Left motor PB0

	// Fix the going beyond 1000 value in the ROS code

	if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)	//front
 8001506:	4b7e      	ldr	r3, [pc, #504]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 8001508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f7ff fb0e 	bl	8000b34 <__aeabi_dcmpge>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d03c      	beq.n	8001598 <subscription_cmd_vel_callback+0x178>
 800151e:	4b78      	ldr	r3, [pc, #480]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 8001520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b77      	ldr	r3, [pc, #476]	@ (8001708 <subscription_cmd_vel_callback+0x2e8>)
 800152a:	f7ff faf9 	bl	8000b20 <__aeabi_dcmple>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d031      	beq.n	8001598 <subscription_cmd_vel_callback+0x178>
 8001534:	4b73      	ldr	r3, [pc, #460]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 8001536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f7ff faf7 	bl	8000b34 <__aeabi_dcmpge>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d025      	beq.n	8001598 <subscription_cmd_vel_callback+0x178>
 800154c:	4b6d      	ldr	r3, [pc, #436]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 800154e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b6c      	ldr	r3, [pc, #432]	@ (8001708 <subscription_cmd_vel_callback+0x2e8>)
 8001558:	f7ff fae2 	bl	8000b20 <__aeabi_dcmple>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d01a      	beq.n	8001598 <subscription_cmd_vel_callback+0x178>
	{
 		TIM3->CCR1 = LeftMotorSpeed;
 8001562:	4b67      	ldr	r3, [pc, #412]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	4c68      	ldr	r4, [pc, #416]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb1d 	bl	8000bac <__aeabi_d2uiz>
 8001572:	4603      	mov	r3, r0
 8001574:	6363      	str	r3, [r4, #52]	@ 0x34
		TIM3->CCR2 = 0;
 8001576:	4b65      	ldr	r3, [pc, #404]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 8001578:	2200      	movs	r2, #0
 800157a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = RightMotorSpeed;
 800157c:	4b61      	ldr	r3, [pc, #388]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	4c62      	ldr	r4, [pc, #392]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fb10 	bl	8000bac <__aeabi_d2uiz>
 800158c:	4603      	mov	r3, r0
 800158e:	63e3      	str	r3, [r4, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 8001590:	4b5e      	ldr	r3, [pc, #376]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 8001592:	2200      	movs	r2, #0
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
 8001596:	e114      	b.n	80017c2 <subscription_cmd_vel_callback+0x3a2>
	}
	else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)	//back
 8001598:	4b59      	ldr	r3, [pc, #356]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 800159a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	f7ff fabb 	bl	8000b20 <__aeabi_dcmple>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d044      	beq.n	800163a <subscription_cmd_vel_callback+0x21a>
 80015b0:	4b53      	ldr	r3, [pc, #332]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 80015b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015b6:	a34e      	add	r3, pc, #312	@ (adr r3, 80016f0 <subscription_cmd_vel_callback+0x2d0>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7ff faba 	bl	8000b34 <__aeabi_dcmpge>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d039      	beq.n	800163a <subscription_cmd_vel_callback+0x21a>
 80015c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f7ff faa4 	bl	8000b20 <__aeabi_dcmple>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d02d      	beq.n	800163a <subscription_cmd_vel_callback+0x21a>
 80015de:	4b49      	ldr	r3, [pc, #292]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 80015e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e4:	a342      	add	r3, pc, #264	@ (adr r3, 80016f0 <subscription_cmd_vel_callback+0x2d0>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff faa3 	bl	8000b34 <__aeabi_dcmpge>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d022      	beq.n	800163a <subscription_cmd_vel_callback+0x21a>
	{
		TIM3->CCR1 = 0;
 80015f4:	4b45      	ldr	r3, [pc, #276]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = -LeftMotorSpeed;
 80015fa:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	4c40      	ldr	r4, [pc, #256]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 800160a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800160e:	f7ff facd 	bl	8000bac <__aeabi_d2uiz>
 8001612:	4603      	mov	r3, r0
 8001614:	63a3      	str	r3, [r4, #56]	@ 0x38
		TIM3->CCR3 = 0;
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 8001618:	2200      	movs	r2, #0
 800161a:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = -RightMotorSpeed;
 800161c:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	603a      	str	r2, [r7, #0]
 8001624:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4c38      	ldr	r4, [pc, #224]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 800162c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001630:	f7ff fabc 	bl	8000bac <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	6423      	str	r3, [r4, #64]	@ 0x40
 8001638:	e0c3      	b.n	80017c2 <subscription_cmd_vel_callback+0x3a2>
	}
	else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)		//left
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 800163c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	f7ff fa6a 	bl	8000b20 <__aeabi_dcmple>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d05e      	beq.n	8001710 <subscription_cmd_vel_callback+0x2f0>
 8001652:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 8001654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001658:	a325      	add	r3, pc, #148	@ (adr r3, 80016f0 <subscription_cmd_vel_callback+0x2d0>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff fa69 	bl	8000b34 <__aeabi_dcmpge>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d053      	beq.n	8001710 <subscription_cmd_vel_callback+0x2f0>
 8001668:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 800166a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	f7ff fa5d 	bl	8000b34 <__aeabi_dcmpge>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d047      	beq.n	8001710 <subscription_cmd_vel_callback+0x2f0>
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 8001682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <subscription_cmd_vel_callback+0x2e8>)
 800168c:	f7ff fa48 	bl	8000b20 <__aeabi_dcmple>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d03c      	beq.n	8001710 <subscription_cmd_vel_callback+0x2f0>
	{
		TIM3->CCR1 = -LeftMotorSpeed;
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	4692      	mov	sl, r2
 800169e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80016a2:	4c1a      	ldr	r4, [pc, #104]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 80016a4:	4650      	mov	r0, sl
 80016a6:	4659      	mov	r1, fp
 80016a8:	f7ff fa80 	bl	8000bac <__aeabi_d2uiz>
 80016ac:	4603      	mov	r3, r0
 80016ae:	6363      	str	r3, [r4, #52]	@ 0x34
		TIM3->CCR2 = 0;
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 0;
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = RightMotorSpeed;
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	4c12      	ldr	r4, [pc, #72]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff fa70 	bl	8000bac <__aeabi_d2uiz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	6423      	str	r3, [r4, #64]	@ 0x40
 80016d0:	e077      	b.n	80017c2 <subscription_cmd_vel_callback+0x3a2>
 80016d2:	bf00      	nop
 80016d4:	f3af 8000 	nop.w
 80016d8:	cccccccd 	.word	0xcccccccd
 80016dc:	3fcccccc 	.word	0x3fcccccc
 80016e0:	1eb851ec 	.word	0x1eb851ec
 80016e4:	3fb1eb85 	.word	0x3fb1eb85
 80016e8:	f765fd8b 	.word	0xf765fd8b
 80016ec:	401921e4 	.word	0x401921e4
 80016f0:	00000000 	.word	0x00000000
 80016f4:	c08f4000 	.word	0xc08f4000
 80016f8:	200048a8 	.word	0x200048a8
 80016fc:	200048b0 	.word	0x200048b0
 8001700:	200048b8 	.word	0x200048b8
 8001704:	200048c0 	.word	0x200048c0
 8001708:	408f4000 	.word	0x408f4000
 800170c:	40000400 	.word	0x40000400
	}
	else if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)		//right
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <subscription_cmd_vel_callback+0x3b8>)
 8001712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	f7ff fa09 	bl	8000b34 <__aeabi_dcmpge>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03f      	beq.n	80017a8 <subscription_cmd_vel_callback+0x388>
 8001728:	4b2b      	ldr	r3, [pc, #172]	@ (80017d8 <subscription_cmd_vel_callback+0x3b8>)
 800172a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <subscription_cmd_vel_callback+0x3bc>)
 8001734:	f7ff f9f4 	bl	8000b20 <__aeabi_dcmple>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d034      	beq.n	80017a8 <subscription_cmd_vel_callback+0x388>
 800173e:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <subscription_cmd_vel_callback+0x3c0>)
 8001740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	f7ff f9e8 	bl	8000b20 <__aeabi_dcmple>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d028      	beq.n	80017a8 <subscription_cmd_vel_callback+0x388>
 8001756:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <subscription_cmd_vel_callback+0x3c0>)
 8001758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800175c:	a31c      	add	r3, pc, #112	@ (adr r3, 80017d0 <subscription_cmd_vel_callback+0x3b0>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7ff f9e7 	bl	8000b34 <__aeabi_dcmpge>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01d      	beq.n	80017a8 <subscription_cmd_vel_callback+0x388>
	{
		TIM3->CCR1 = 0;
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = LeftMotorSpeed;
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <subscription_cmd_vel_callback+0x3b8>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	4c1a      	ldr	r4, [pc, #104]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa15 	bl	8000bac <__aeabi_d2uiz>
 8001782:	4603      	mov	r3, r0
 8001784:	63a3      	str	r3, [r4, #56]	@ 0x38
		TIM3->CCR3 = -RightMotorSpeed;
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <subscription_cmd_vel_callback+0x3c0>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	4690      	mov	r8, r2
 800178e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001792:	4c14      	ldr	r4, [pc, #80]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 8001794:	4640      	mov	r0, r8
 8001796:	4649      	mov	r1, r9
 8001798:	f7ff fa08 	bl	8000bac <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	63e3      	str	r3, [r4, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 80017a0:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017a6:	e00c      	b.n	80017c2 <subscription_cmd_vel_callback+0x3a2>
	}
	else
	{
		TIM3->CCR1 = 0;
 80017a8:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 0;
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 0;
 80017b4:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	641a      	str	r2, [r3, #64]	@ 0x40
	}

}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017cc:	f3af 8000 	nop.w
 80017d0:	00000000 	.word	0x00000000
 80017d4:	c08f4000 	.word	0xc08f4000
 80017d8:	200048b8 	.word	0x200048b8
 80017dc:	408f4000 	.word	0x408f4000
 80017e0:	200048c0 	.word	0x200048c0
 80017e4:	40000400 	.word	0x40000400

080017e8 <HAL_GPIO_EXTI_Callback>:

// Interrupts for the wheel encoders
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
	//PA0 LeftWheelEncoderChannelA  PE11 LeftWheelEncoderChannelB
	if (GPIO_Pin == GPIO_PIN_0)
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d11b      	bne.n	8001830 <HAL_GPIO_EXTI_Callback+0x48>
	{
//		LeftWheelEncoder++;
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 1) LeftWheelEncoder++;
 80017f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017fc:	481d      	ldr	r0, [pc, #116]	@ (8001874 <HAL_GPIO_EXTI_Callback+0x8c>)
 80017fe:	f002 f9ad 	bl	8003b5c <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_GPIO_EXTI_Callback+0x2c>
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x90>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	4a1a      	ldr	r2, [pc, #104]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x90>)
 8001810:	6013      	str	r3, [r2, #0]
	{
//		RightWheelEncoder++;
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0) RightWheelEncoder++;
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1) RightWheelEncoder--;
	}
}
 8001812:	e02b      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 0) LeftWheelEncoder--;
 8001814:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001818:	4816      	ldr	r0, [pc, #88]	@ (8001874 <HAL_GPIO_EXTI_Callback+0x8c>)
 800181a:	f002 f99f 	bl	8003b5c <HAL_GPIO_ReadPin>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d123      	bne.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x90>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	4a13      	ldr	r2, [pc, #76]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x90>)
 800182c:	6013      	str	r3, [r2, #0]
}
 800182e:	e01d      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
	else if (GPIO_Pin == GPIO_PIN_1)
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d11a      	bne.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0) RightWheelEncoder++;
 8001836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800183a:	480e      	ldr	r0, [pc, #56]	@ (8001874 <HAL_GPIO_EXTI_Callback+0x8c>)
 800183c:	f002 f98e 	bl	8003b5c <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <HAL_GPIO_EXTI_Callback+0x6a>
 8001846:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <HAL_GPIO_EXTI_Callback+0x94>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	4a0b      	ldr	r2, [pc, #44]	@ (800187c <HAL_GPIO_EXTI_Callback+0x94>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	e00c      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1) RightWheelEncoder--;
 8001852:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001856:	4807      	ldr	r0, [pc, #28]	@ (8001874 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001858:	f002 f980 	bl	8003b5c <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d104      	bne.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_GPIO_EXTI_Callback+0x94>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3b01      	subs	r3, #1
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <HAL_GPIO_EXTI_Callback+0x94>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	2000489c 	.word	0x2000489c
 800187c:	200048a0 	.word	0x200048a0

08001880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001884:	f001 fa60 	bl	8002d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001888:	f000 f830 	bl	80018ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188c:	f000 f9ae 	bl	8001bec <MX_GPIO_Init>
  MX_DMA_Init();
 8001890:	f000 f984 	bl	8001b9c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001894:	f000 f958 	bl	8001b48 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001898:	f000 f8be 	bl	8001a18 <MX_TIM3_Init>
  MX_I2C1_Init();
 800189c:	f000 f88e 	bl	80019bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80018a0:	2100      	movs	r1, #0
 80018a2:	480e      	ldr	r0, [pc, #56]	@ (80018dc <main+0x5c>)
 80018a4:	f003 feee 	bl	8005684 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80018a8:	2104      	movs	r1, #4
 80018aa:	480c      	ldr	r0, [pc, #48]	@ (80018dc <main+0x5c>)
 80018ac:	f003 feea 	bl	8005684 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80018b0:	2108      	movs	r1, #8
 80018b2:	480a      	ldr	r0, [pc, #40]	@ (80018dc <main+0x5c>)
 80018b4:	f003 fee6 	bl	8005684 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80018b8:	210c      	movs	r1, #12
 80018ba:	4808      	ldr	r0, [pc, #32]	@ (80018dc <main+0x5c>)
 80018bc:	f003 fee2 	bl	8005684 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018c0:	f005 fef6 	bl	80076b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018c4:	4a06      	ldr	r2, [pc, #24]	@ (80018e0 <main+0x60>)
 80018c6:	2100      	movs	r1, #0
 80018c8:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <main+0x64>)
 80018ca:	f005 ff3b 	bl	8007744 <osThreadNew>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <main+0x68>)
 80018d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018d4:	f005 ff10 	bl	80076f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <main+0x58>
 80018dc:	20004748 	.word	0x20004748
 80018e0:	08019e58 	.word	0x08019e58
 80018e4:	08001d31 	.word	0x08001d31
 80018e8:	20004898 	.word	0x20004898

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b094      	sub	sp, #80	@ 0x50
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2230      	movs	r2, #48	@ 0x30
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f017 fb1c 	bl	8018f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	4b27      	ldr	r3, [pc, #156]	@ (80019b4 <SystemClock_Config+0xc8>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	4a26      	ldr	r2, [pc, #152]	@ (80019b4 <SystemClock_Config+0xc8>)
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001920:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <SystemClock_Config+0xc8>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <SystemClock_Config+0xcc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a20      	ldr	r2, [pc, #128]	@ (80019b8 <SystemClock_Config+0xcc>)
 8001936:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <SystemClock_Config+0xcc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001948:	2301      	movs	r3, #1
 800194a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800194c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001952:	2302      	movs	r3, #2
 8001954:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001956:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800195a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800195c:	2304      	movs	r3, #4
 800195e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001960:	23c0      	movs	r3, #192	@ 0xc0
 8001962:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001964:	2304      	movs	r3, #4
 8001966:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001968:	2308      	movs	r3, #8
 800196a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4618      	mov	r0, r3
 8001972:	f003 f947 	bl	8004c04 <HAL_RCC_OscConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800197c:	f000 fcce 	bl	800231c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001980:	230f      	movs	r3, #15
 8001982:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001984:	2302      	movs	r3, #2
 8001986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800198c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	2103      	movs	r1, #3
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fba9 	bl	80050f4 <HAL_RCC_ClockConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019a8:	f000 fcb8 	bl	800231c <Error_Handler>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3750      	adds	r7, #80	@ 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000

080019bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019c2:	4a13      	ldr	r2, [pc, #76]	@ (8001a10 <MX_I2C1_Init+0x54>)
 80019c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019c8:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <MX_I2C1_Init+0x58>)
 80019ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ec:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f2:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f8:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019fa:	f002 f8df 	bl	8003bbc <HAL_I2C_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a04:	f000 fc8a 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200046f4 	.word	0x200046f4
 8001a10:	40005400 	.word	0x40005400
 8001a14:	000186a0 	.word	0x000186a0

08001a18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08e      	sub	sp, #56	@ 0x38
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	f107 0320 	add.w	r3, r7, #32
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
 8001a44:	615a      	str	r2, [r3, #20]
 8001a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a48:	4b3d      	ldr	r3, [pc, #244]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b44 <MX_TIM3_Init+0x12c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a50:	2209      	movs	r2, #9
 8001a52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a54:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a5a:	4b39      	ldr	r3, [pc, #228]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a62:	4b37      	ldr	r3, [pc, #220]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a68:	4b35      	ldr	r3, [pc, #212]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a6a:	2280      	movs	r2, #128	@ 0x80
 8001a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a6e:	4834      	ldr	r0, [pc, #208]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a70:	f003 fd60 	bl	8005534 <HAL_TIM_Base_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a7a:	f000 fc4f 	bl	800231c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	482d      	ldr	r0, [pc, #180]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a8c:	f003 ff6c 	bl	8005968 <HAL_TIM_ConfigClockSource>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a96:	f000 fc41 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a9a:	4829      	ldr	r0, [pc, #164]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a9c:	f003 fd99 	bl	80055d2 <HAL_TIM_PWM_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aa6:	f000 fc39 	bl	800231c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4821      	ldr	r0, [pc, #132]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001aba:	f004 faf5 	bl	80060a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ac4:	f000 fc2a 	bl	800231c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac8:	2360      	movs	r3, #96	@ 0x60
 8001aca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	4619      	mov	r1, r3
 8001ade:	4818      	ldr	r0, [pc, #96]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001ae0:	f003 fe80 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001aea:	f000 fc17 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2204      	movs	r2, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001af6:	f003 fe75 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b00:	f000 fc0c 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2208      	movs	r2, #8
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001b0c:	f003 fe6a 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001b16:	f000 fc01 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4807      	ldr	r0, [pc, #28]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001b22:	f003 fe5f 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001b2c:	f000 fbf6 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b30:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001b32:	f000 fdf3 	bl	800271c <HAL_TIM_MspPostInit>

}
 8001b36:	bf00      	nop
 8001b38:	3738      	adds	r7, #56	@ 0x38
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20004748 	.word	0x20004748
 8001b44:	40000400 	.word	0x40000400

08001b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b80:	f004 fb00 	bl	8006184 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b8a:	f000 fbc7 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20004790 	.word	0x20004790
 8001b98:	40004400 	.word	0x40004400

08001b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <MX_DMA_Init+0x4c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a0f      	ldr	r2, [pc, #60]	@ (8001be8 <MX_DMA_Init+0x4c>)
 8001bac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <MX_DMA_Init+0x4c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2105      	movs	r1, #5
 8001bc2:	2010      	movs	r0, #16
 8001bc4:	f001 fa0d 	bl	8002fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bc8:	2010      	movs	r0, #16
 8001bca:	f001 fa26 	bl	800301a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2105      	movs	r1, #5
 8001bd2:	2011      	movs	r0, #17
 8001bd4:	f001 fa05 	bl	8002fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001bd8:	2011      	movs	r0, #17
 8001bda:	f001 fa1e 	bl	800301a <HAL_NVIC_EnableIRQ>

}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	@ 0x30
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	4b46      	ldr	r3, [pc, #280]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a45      	ldr	r2, [pc, #276]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b43      	ldr	r3, [pc, #268]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	4b3f      	ldr	r3, [pc, #252]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a3e      	ldr	r2, [pc, #248]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a37      	ldr	r2, [pc, #220]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b35      	ldr	r3, [pc, #212]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b31      	ldr	r3, [pc, #196]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a30      	ldr	r2, [pc, #192]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b2e      	ldr	r3, [pc, #184]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b2a      	ldr	r3, [pc, #168]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a29      	ldr	r2, [pc, #164]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a22      	ldr	r2, [pc, #136]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001caa:	2303      	movs	r3, #3
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4819      	ldr	r0, [pc, #100]	@ (8001d24 <MX_GPIO_Init+0x138>)
 8001cc0:	f001 fdc8 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cc4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4813      	ldr	r0, [pc, #76]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001cda:	f001 fdbb 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cde:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480e      	ldr	r0, [pc, #56]	@ (8001d2c <MX_GPIO_Init+0x140>)
 8001cf4:	f001 fdae 	bl	8003854 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2105      	movs	r1, #5
 8001cfc:	2006      	movs	r0, #6
 8001cfe:	f001 f970 	bl	8002fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d02:	2006      	movs	r0, #6
 8001d04:	f001 f989 	bl	800301a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2105      	movs	r1, #5
 8001d0c:	2007      	movs	r0, #7
 8001d0e:	f001 f968 	bl	8002fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d12:	2007      	movs	r0, #7
 8001d14:	f001 f981 	bl	800301a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d18:	bf00      	nop
 8001d1a:	3730      	adds	r7, #48	@ 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40020c00 	.word	0x40020c00

08001d30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d34:	f5ad 6db5 	sub.w	sp, sp, #1448	@ 0x5a8
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001d3e:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
 8001d42:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	// Initialisation of MPU6050
	// Checking if sensor returns 0x68 to confirm correct functioning

	uint8_t check = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 355f 	strb.w	r3, [r7, #1375]	@ 0x55f
	uint8_t data = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 355e 	strb.w	r3, [r7, #1374]	@ 0x55e
	HAL_I2C_Mem_Read (&hi2c1, MPU_ADDRESS,MPU_REG_AVAILABLE,1, &check, 1, 1000);
 8001d50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d54:	9302      	str	r3, [sp, #8]
 8001d56:	2301      	movs	r3, #1
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	f207 535f 	addw	r3, r7, #1375	@ 0x55f
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2301      	movs	r3, #1
 8001d62:	2275      	movs	r2, #117	@ 0x75
 8001d64:	2168      	movs	r1, #104	@ 0x68
 8001d66:	48d0      	ldr	r0, [pc, #832]	@ (80020a8 <StartDefaultTask+0x378>)
 8001d68:	f002 f966 	bl	8004038 <HAL_I2C_Mem_Read>

	if (check!=0x68)
 8001d6c:	f897 355f 	ldrb.w	r3, [r7, #1375]	@ 0x55f
 8001d70:	2b68      	cmp	r3, #104	@ 0x68
 8001d72:	d002      	beq.n	8001d7a <StartDefaultTask+0x4a>
	{
		printf("MPU6050 connected incorrectly\n");
 8001d74:	48cd      	ldr	r0, [pc, #820]	@ (80020ac <StartDefaultTask+0x37c>)
 8001d76:	f016 ff69 	bl	8018c4c <puts>
	}

	// Writing zeros to the register to wake up the sensor and
	// set clock frequency to 8 MHz

	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, MPU_REG_PWR_MGMT_1, 1,&data, 1, 1000);
 8001d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	2301      	movs	r3, #1
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	f207 535e 	addw	r3, r7, #1374	@ 0x55e
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	226b      	movs	r2, #107	@ 0x6b
 8001d8e:	2168      	movs	r1, #104	@ 0x68
 8001d90:	48c5      	ldr	r0, [pc, #788]	@ (80020a8 <StartDefaultTask+0x378>)
 8001d92:	f002 f857 	bl	8003e44 <HAL_I2C_Mem_Write>

	// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
	data = 0x07;
 8001d96:	2307      	movs	r3, #7
 8001d98:	f887 355e 	strb.w	r3, [r7, #1374]	@ 0x55e
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, MPU_REG_SMPL_RT_DIV	, 1, &data, 1, 1000);
 8001d9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	2301      	movs	r3, #1
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	f207 535e 	addw	r3, r7, #1374	@ 0x55e
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2301      	movs	r3, #1
 8001dae:	2219      	movs	r2, #25
 8001db0:	2168      	movs	r1, #104	@ 0x68
 8001db2:	48bd      	ldr	r0, [pc, #756]	@ (80020a8 <StartDefaultTask+0x378>)
 8001db4:	f002 f846 	bl	8003e44 <HAL_I2C_Mem_Write>

	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 8001db8:	4bbd      	ldr	r3, [pc, #756]	@ (80020b0 <StartDefaultTask+0x380>)
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	4bbd      	ldr	r3, [pc, #756]	@ (80020b4 <StartDefaultTask+0x384>)
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	4bbd      	ldr	r3, [pc, #756]	@ (80020b8 <StartDefaultTask+0x388>)
 8001dc2:	4abe      	ldr	r2, [pc, #760]	@ (80020bc <StartDefaultTask+0x38c>)
 8001dc4:	49be      	ldr	r1, [pc, #760]	@ (80020c0 <StartDefaultTask+0x390>)
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f00b f8d6 	bl	800cf78 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	 rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001dcc:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00b f803 	bl	800cddc <rcutils_get_zero_initialized_allocator>
	 freeRTOS_allocator.allocate = microros_allocate;
 8001dd6:	4bbb      	ldr	r3, [pc, #748]	@ (80020c4 <StartDefaultTask+0x394>)
 8001dd8:	f8c7 3548 	str.w	r3, [r7, #1352]	@ 0x548
	 freeRTOS_allocator.deallocate = microros_deallocate;
 8001ddc:	4bba      	ldr	r3, [pc, #744]	@ (80020c8 <StartDefaultTask+0x398>)
 8001dde:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
	 freeRTOS_allocator.reallocate = microros_reallocate;
 8001de2:	4bba      	ldr	r3, [pc, #744]	@ (80020cc <StartDefaultTask+0x39c>)
 8001de4:	f8c7 3550 	str.w	r3, [r7, #1360]	@ 0x550
	 freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001de8:	4bb9      	ldr	r3, [pc, #740]	@ (80020d0 <StartDefaultTask+0x3a0>)
 8001dea:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554

	 if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001dee:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001df2:	4618      	mov	r0, r3
 8001df4:	f00b f800 	bl	800cdf8 <rcutils_set_default_allocator>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f083 0301 	eor.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d004      	beq.n	8001e0e <StartDefaultTask+0xde>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001e04:	f240 2152 	movw	r1, #594	@ 0x252
 8001e08:	48b2      	ldr	r0, [pc, #712]	@ (80020d4 <StartDefaultTask+0x3a4>)
 8001e0a:	f016 feb7 	bl	8018b7c <iprintf>
	  geometry_msgs__msg__Twist sub_cmd_vel_msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8001e0e:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001e12:	f5a3 649c 	sub.w	r4, r3, #1248	@ 0x4e0
 8001e16:	463b      	mov	r3, r7
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f00b f80b 	bl	800ce34 <rcutils_get_default_allocator>
 8001e1e:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001e22:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 8001e26:	461d      	mov	r5, r3
 8001e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2c:	682b      	ldr	r3, [r5, #0]
 8001e2e:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001e30:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001e34:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	f00a fed8 	bl	800cbf0 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "stm32_microros", "", &support);
 8001e40:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001e44:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8001e48:	4aa3      	ldr	r2, [pc, #652]	@ (80020d8 <StartDefaultTask+0x3a8>)
 8001e4a:	49a4      	ldr	r1, [pc, #656]	@ (80020dc <StartDefaultTask+0x3ac>)
 8001e4c:	f00a ff1a 	bl	800cc84 <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001e50:	f009 fea4 	bl	800bb9c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001e5a:	f207 5044 	addw	r0, r7, #1348	@ 0x544
 8001e5e:	4ba0      	ldr	r3, [pc, #640]	@ (80020e0 <StartDefaultTask+0x3b0>)
 8001e60:	f00a ff4c 	bl	800ccfc <rclc_publisher_init_default>
	    &encoder_publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
	    "rover/wheel_encoder_odom");

	  rclc_publisher_init_default(
 8001e64:	f00b fde2 	bl	800da2c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001e6e:	f507 60a8 	add.w	r0, r7, #1344	@ 0x540
 8001e72:	4b9c      	ldr	r3, [pc, #624]	@ (80020e4 <StartDefaultTask+0x3b4>)
 8001e74:	f00a ff42 	bl	800ccfc <rclc_publisher_init_default>
	  	ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
	  	"rover/imu");

	  // create subscriber

	  rclc_subscription_init_default(
 8001e78:	f008 f9c6 	bl	800a208 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001e82:	f207 503c 	addw	r0, r7, #1340	@ 0x53c
 8001e86:	4b98      	ldr	r3, [pc, #608]	@ (80020e8 <StartDefaultTask+0x3b8>)
 8001e88:	f00a ff6c 	bl	800cd64 <rclc_subscription_init_default>
	  	     &node,
	  	     ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  	     "cmd_vel");

	  // create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001e8c:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001e90:	f5a3 63ae 	sub.w	r3, r3, #1392	@ 0x570
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00a fbd7 	bl	800c648 <rclc_executor_get_zero_initialized_executor>
	  rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001e9a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001e9e:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8001ea2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f00a fbda 	bl	800c660 <rclc_executor_init>
	  rclc_executor_add_subscription(&executor, &subscriber_cmd_vel, &sub_cmd_vel_msg, &subscription_cmd_vel_callback, ON_NEW_DATA);
 8001eac:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8001eb0:	f207 513c 	addw	r1, r7, #1340	@ 0x53c
 8001eb4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4b8b      	ldr	r3, [pc, #556]	@ (80020ec <StartDefaultTask+0x3bc>)
 8001ebe:	f00a fc3f 	bl	800c740 <rclc_executor_add_subscription>

	  // Initialise variables used to get velocities of the wheels
	  int32_t prevLeftWheelEncoder = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
	  int32_t prevRightWheelEncoder = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590

	  double LeftWheelDistance = 0;
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	f507 61b0 	add.w	r1, r7, #1408	@ 0x580
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]
	  double RightWheelDistance = 0;
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	f507 61af 	add.w	r1, r7, #1400	@ 0x578
 8001eea:	e9c1 2300 	strd	r2, r3, [r1]

	  // Function is used to get time elapsed in milliseconds since SysTick timer was turned on
	  uint32_t prevTime = HAL_GetTick();
 8001eee:	f000 ff91 	bl	8002e14 <HAL_GetTick>
 8001ef2:	f8c7 058c 	str.w	r0, [r7, #1420]	@ 0x58c
	  uint32_t currentTime = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
		// Reading values using IMU

		// Reading 6 elements of 1 byte each
		// x, y, z values occupy 16 bits each, divided into two registers for
		// higher and lower bytes
		uint8_t rec_data[6] = {0,0,0,0,0,0};
 8001efc:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001f00:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8001f04:	4a7a      	ldr	r2, [pc, #488]	@ (80020f0 <StartDefaultTask+0x3c0>)
 8001f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f0a:	6018      	str	r0, [r3, #0]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	8019      	strh	r1, [r3, #0]
		HAL_I2C_Mem_Read (&hi2c1, MPU_ADDRESS, MPU_REG_ACC_X_H, 1, rec_data, 6, 1000);
 8001f10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	2306      	movs	r3, #6
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	223b      	movs	r2, #59	@ 0x3b
 8001f24:	2168      	movs	r1, #104	@ 0x68
 8001f26:	4860      	ldr	r0, [pc, #384]	@ (80020a8 <StartDefaultTask+0x378>)
 8001f28:	f002 f886 	bl	8004038 <HAL_I2C_Mem_Read>

		// Converting two separate 8-bit values into a single 16-bit value
		int16_t accel_x_raw = (int16_t)(rec_data[0] << 8 | rec_data [1]);
 8001f2c:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001f30:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001f3e:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8001f42:	785b      	ldrb	r3, [r3, #1]
 8001f44:	b21b      	sxth	r3, r3
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8a7 3572 	strh.w	r3, [r7, #1394]	@ 0x572
		int16_t accel_y_raw = (int16_t)(rec_data[2] << 8 | rec_data [3]);
 8001f4c:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001f50:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8001f54:	789b      	ldrb	r3, [r3, #2]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	b21a      	sxth	r2, r3
 8001f5a:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001f5e:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8001f62:	78db      	ldrb	r3, [r3, #3]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8a7 3570 	strh.w	r3, [r7, #1392]	@ 0x570
		int16_t accel_z_raw = (int16_t)(rec_data[4] << 8 | rec_data [5]);
 8001f6c:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001f70:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8001f74:	791b      	ldrb	r3, [r3, #4]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001f7e:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8001f82:	795b      	ldrb	r3, [r3, #5]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8a7 356e 	strh.w	r3, [r7, #1390]	@ 0x56e

		// Dividing by 16384 to obtain actual value and storing it in Imu message
		imu_data.linear_acceleration.x = (double) accel_x_raw/16384.0;
 8001f8c:	f9b7 3572 	ldrsh.w	r3, [r7, #1394]	@ 0x572
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fadf 	bl	8000554 <__aeabi_i2d>
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	4b56      	ldr	r3, [pc, #344]	@ (80020f4 <StartDefaultTask+0x3c4>)
 8001f9c:	f7fe fc6e 	bl	800087c <__aeabi_ddiv>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
 8001fa8:	f5a1 618d 	sub.w	r1, r1, #1128	@ 0x468
 8001fac:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
		imu_data.linear_acceleration.y = (double) accel_y_raw/16384.0;
 8001fb0:	f9b7 3570 	ldrsh.w	r3, [r7, #1392]	@ 0x570
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe facd 	bl	8000554 <__aeabi_i2d>
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80020f4 <StartDefaultTask+0x3c4>)
 8001fc0:	f7fe fc5c 	bl	800087c <__aeabi_ddiv>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
 8001fcc:	f5a1 618d 	sub.w	r1, r1, #1128	@ 0x468
 8001fd0:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
		imu_data.linear_acceleration.z = (double) accel_z_raw/16384.0;
 8001fd4:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fabb 	bl	8000554 <__aeabi_i2d>
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4b44      	ldr	r3, [pc, #272]	@ (80020f4 <StartDefaultTask+0x3c4>)
 8001fe4:	f7fe fc4a 	bl	800087c <__aeabi_ddiv>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
 8001ff0:	f5a1 618d 	sub.w	r1, r1, #1128	@ 0x468
 8001ff4:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

		// Doing the same for the gyroscope values
		HAL_I2C_Mem_Read (&hi2c1, MPU_ADDRESS, MPU_REG_GYRO_X_H, 1, rec_data, 6, 1000);
 8001ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffc:	9302      	str	r3, [sp, #8]
 8001ffe:	2306      	movs	r3, #6
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	f107 0320 	add.w	r3, r7, #32
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2301      	movs	r3, #1
 800200a:	2243      	movs	r2, #67	@ 0x43
 800200c:	2168      	movs	r1, #104	@ 0x68
 800200e:	4826      	ldr	r0, [pc, #152]	@ (80020a8 <StartDefaultTask+0x378>)
 8002010:	f002 f812 	bl	8004038 <HAL_I2C_Mem_Read>

		int16_t gyro_x_raw = (int16_t)(rec_data[0] << 8 | rec_data [1]);
 8002014:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002018:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002026:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	b21b      	sxth	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	f8a7 356c 	strh.w	r3, [r7, #1388]	@ 0x56c
		int16_t gyro_y_raw  = (int16_t)(rec_data[2] << 8 | rec_data [3]);
 8002034:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002038:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 800203c:	789b      	ldrb	r3, [r3, #2]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	b21a      	sxth	r2, r3
 8002042:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002046:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 800204a:	78db      	ldrb	r3, [r3, #3]
 800204c:	b21b      	sxth	r3, r3
 800204e:	4313      	orrs	r3, r2
 8002050:	f8a7 356a 	strh.w	r3, [r7, #1386]	@ 0x56a
		int16_t gyro_z_raw  = (int16_t)(rec_data[4] << 8 | rec_data [5]);
 8002054:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002058:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 800205c:	791b      	ldrb	r3, [r3, #4]
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	b21a      	sxth	r2, r3
 8002062:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002066:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 800206a:	795b      	ldrb	r3, [r3, #5]
 800206c:	b21b      	sxth	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	f8a7 3568 	strh.w	r3, [r7, #1384]	@ 0x568

		// Dividing by 131.0 to obtain actual values and storing in Imu message
		imu_data.angular_velocity.x = (double) gyro_x_raw/131.0;
 8002074:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa6b 	bl	8000554 <__aeabi_i2d>
 800207e:	a308      	add	r3, pc, #32	@ (adr r3, 80020a0 <StartDefaultTask+0x370>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe fbfa 	bl	800087c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
 8002090:	f5a1 618d 	sub.w	r1, r1, #1128	@ 0x468
 8002094:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
		imu_data.angular_velocity.y = (double) gyro_y_raw/131.0;
 8002098:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800209c:	4618      	mov	r0, r3
 800209e:	e02b      	b.n	80020f8 <StartDefaultTask+0x3c8>
 80020a0:	00000000 	.word	0x00000000
 80020a4:	40606000 	.word	0x40606000
 80020a8:	200046f4 	.word	0x200046f4
 80020ac:	08019d74 	.word	0x08019d74
 80020b0:	08002c4d 	.word	0x08002c4d
 80020b4:	08002be5 	.word	0x08002be5
 80020b8:	08002bc5 	.word	0x08002bc5
 80020bc:	08002b99 	.word	0x08002b99
 80020c0:	20004790 	.word	0x20004790
 80020c4:	08002329 	.word	0x08002329
 80020c8:	0800236d 	.word	0x0800236d
 80020cc:	080023a5 	.word	0x080023a5
 80020d0:	08002411 	.word	0x08002411
 80020d4:	08019d94 	.word	0x08019d94
 80020d8:	08019dbc 	.word	0x08019dbc
 80020dc:	08019dc0 	.word	0x08019dc0
 80020e0:	08019dd0 	.word	0x08019dd0
 80020e4:	08019dec 	.word	0x08019dec
 80020e8:	08019df8 	.word	0x08019df8
 80020ec:	08001421 	.word	0x08001421
 80020f0:	08019e1c 	.word	0x08019e1c
 80020f4:	40d00000 	.word	0x40d00000
 80020f8:	f7fe fa2c 	bl	8000554 <__aeabi_i2d>
 80020fc:	a385      	add	r3, pc, #532	@ (adr r3, 8002314 <StartDefaultTask+0x5e4>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe fbbb 	bl	800087c <__aeabi_ddiv>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
 800210e:	f5a1 618d 	sub.w	r1, r1, #1128	@ 0x468
 8002112:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		imu_data.angular_velocity.z = (double) gyro_z_raw/131.0;
 8002116:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa1a 	bl	8000554 <__aeabi_i2d>
 8002120:	a37c      	add	r3, pc, #496	@ (adr r3, 8002314 <StartDefaultTask+0x5e4>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe fba9 	bl	800087c <__aeabi_ddiv>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
 8002132:	f5a1 618d 	sub.w	r1, r1, #1128	@ 0x468
 8002136:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

		// Code block to convert wheel velocities to linear x and angular z
		// Calculate distances covered by the wheels
		LeftWheelDistance = encoderDistance(LeftWheelEncoder - prevLeftWheelEncoder);
 800213a:	4b73      	ldr	r3, [pc, #460]	@ (8002308 <StartDefaultTask+0x5d8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	a36c      	add	r3, pc, #432	@ (adr r3, 80022f8 <StartDefaultTask+0x5c8>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe fa6d 	bl	8000628 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4614      	mov	r4, r2
 8002154:	461d      	mov	r5, r3
 8002156:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 800215a:	2b00      	cmp	r3, #0
 800215c:	da01      	bge.n	8002162 <StartDefaultTask+0x432>
 800215e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8002162:	125b      	asrs	r3, r3, #9
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f9f5 	bl	8000554 <__aeabi_i2d>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f7fe f8a1 	bl	80002b8 <__aeabi_dsub>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	f507 61b0 	add.w	r1, r7, #1408	@ 0x580
 800217e:	e9c1 2300 	strd	r2, r3, [r1]
		RightWheelDistance = encoderDistance(RightWheelEncoder - prevRightWheelEncoder);
 8002182:	4b62      	ldr	r3, [pc, #392]	@ (800230c <StartDefaultTask+0x5dc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9e4 	bl	8000554 <__aeabi_i2d>
 800218c:	a35a      	add	r3, pc, #360	@ (adr r3, 80022f8 <StartDefaultTask+0x5c8>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	f7fe fa49 	bl	8000628 <__aeabi_dmul>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4614      	mov	r4, r2
 800219c:	461d      	mov	r5, r3
 800219e:	f8d7 3590 	ldr.w	r3, [r7, #1424]	@ 0x590
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da01      	bge.n	80021aa <StartDefaultTask+0x47a>
 80021a6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80021aa:	125b      	asrs	r3, r3, #9
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe f87d 	bl	80002b8 <__aeabi_dsub>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	f507 61af 	add.w	r1, r7, #1400	@ 0x578
 80021c6:	e9c1 2300 	strd	r2, r3, [r1]
		currentTime = HAL_GetTick();
 80021ca:	f000 fe23 	bl	8002e14 <HAL_GetTick>
 80021ce:	f8c7 0574 	str.w	r0, [r7, #1396]	@ 0x574

		// Convert wheel velocities to bot velocities
		// Calculate distance covered and change in agngle
		// Divide by delta time to get velocities
		encoder_data.twist.twist.linear.x = (double) (RightWheelDistance + LeftWheelDistance)/(2*(currentTime-prevTime));
 80021d2:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	f507 61af 	add.w	r1, r7, #1400	@ 0x578
 80021de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021e2:	f7fe f86b 	bl	80002bc <__adddf3>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4614      	mov	r4, r2
 80021ec:	461d      	mov	r5, r3
 80021ee:	f8d7 2574 	ldr.w	r2, [r7, #1396]	@ 0x574
 80021f2:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f99a 	bl	8000534 <__aeabi_ui2d>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fe fb38 	bl	800087c <__aeabi_ddiv>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
 8002214:	f5a1 714a 	sub.w	r1, r1, #808	@ 0x328
 8002218:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178
		encoder_data.twist.twist.angular.z = (double) (RightWheelDistance - LeftWheelDistance)/(2*Length*(currentTime-prevTime));
 800221c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f507 61af 	add.w	r1, r7, #1400	@ 0x578
 8002228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800222c:	f7fe f844 	bl	80002b8 <__aeabi_dsub>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4614      	mov	r4, r2
 8002236:	461d      	mov	r5, r3
 8002238:	a131      	add	r1, pc, #196	@ (adr r1, 8002300 <StartDefaultTask+0x5d0>)
 800223a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	f7fe f83b 	bl	80002bc <__adddf3>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4690      	mov	r8, r2
 800224c:	4699      	mov	r9, r3
 800224e:	f8d7 2574 	ldr.w	r2, [r7, #1396]	@ 0x574
 8002252:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f96b 	bl	8000534 <__aeabi_ui2d>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4640      	mov	r0, r8
 8002264:	4649      	mov	r1, r9
 8002266:	f7fe f9df 	bl	8000628 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4620      	mov	r0, r4
 8002270:	4629      	mov	r1, r5
 8002272:	f7fe fb03 	bl	800087c <__aeabi_ddiv>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
 800227e:	f5a1 714a 	sub.w	r1, r1, #808	@ 0x328
 8002282:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0

		// Update previous values of encoders and time
		prevLeftWheelEncoder = LeftWheelEncoder;
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <StartDefaultTask+0x5d8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
		prevRightWheelEncoder = RightWheelEncoder;
 800228e:	4b1f      	ldr	r3, [pc, #124]	@ (800230c <StartDefaultTask+0x5dc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590
		prevTime = HAL_GetTick();
 8002296:	f000 fdbd 	bl	8002e14 <HAL_GetTick>
 800229a:	f8c7 058c 	str.w	r0, [r7, #1420]	@ 0x58c

		// Publish data
	    rcl_ret_t ret1 = rcl_publish(&encoder_publisher, &encoder_data, NULL);
 800229e:	f507 711c 	add.w	r1, r7, #624	@ 0x270
 80022a2:	f207 5344 	addw	r3, r7, #1348	@ 0x544
 80022a6:	2200      	movs	r2, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f009 fe3f 	bl	800bf2c <rcl_publish>
 80022ae:	f8c7 0564 	str.w	r0, [r7, #1380]	@ 0x564
	    rcl_ret_t ret2 = rcl_publish(&imu_publisher, &imu_data, NULL);
 80022b2:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 80022b6:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80022ba:	2200      	movs	r2, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f009 fe35 	bl	800bf2c <rcl_publish>
 80022c2:	f8c7 0560 	str.w	r0, [r7, #1376]	@ 0x560

	    // waits for 1000ns for ros data, theres no data it continues,
	    // if there is data then it executes subscription callback
	    rclc_executor_spin_some(&executor, 1000);
 80022c6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80022ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	4608      	mov	r0, r1
 80022d4:	f00a fc54 	bl	800cb80 <rclc_executor_spin_some>

	    if ((ret1 | ret2) != RCL_RET_OK)
 80022d8:	f8d7 2564 	ldr.w	r2, [r7, #1380]	@ 0x564
 80022dc:	f8d7 3560 	ldr.w	r3, [r7, #1376]	@ 0x560
 80022e0:	4313      	orrs	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <StartDefaultTask+0x5c0>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 80022e6:	f240 21ca 	movw	r1, #714	@ 0x2ca
 80022ea:	4809      	ldr	r0, [pc, #36]	@ (8002310 <StartDefaultTask+0x5e0>)
 80022ec:	f016 fc46 	bl	8018b7c <iprintf>
	    }
	    osDelay(10);
 80022f0:	200a      	movs	r0, #10
 80022f2:	f005 fab9 	bl	8007868 <osDelay>
	  {
 80022f6:	e601      	b.n	8001efc <StartDefaultTask+0x1cc>
 80022f8:	2e48e8a7 	.word	0x2e48e8a7
 80022fc:	401921ff 	.word	0x401921ff
 8002300:	cccccccd 	.word	0xcccccccd
 8002304:	3fcccccc 	.word	0x3fcccccc
 8002308:	2000489c 	.word	0x2000489c
 800230c:	200048a0 	.word	0x200048a0
 8002310:	08019e00 	.word	0x08019e00
 8002314:	00000000 	.word	0x00000000
 8002318:	40606000 	.word	0x40606000

0800231c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002320:	b672      	cpsid	i
}
 8002322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <Error_Handler+0x8>

08002328 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002332:	4b0c      	ldr	r3, [pc, #48]	@ (8002364 <microros_allocate+0x3c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <microros_allocate+0x3c>)
 8002340:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <microros_allocate+0x40>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <microros_allocate+0x40>)
 8002350:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe fe12 	bl	8000f7c <pvPortMallocMicroROS>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200048c8 	.word	0x200048c8
 8002368:	200048cc 	.word	0x200048cc

0800236c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00c      	beq.n	8002396 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7fe ff21 	bl	80011c4 <getBlockSize>
 8002382:	4603      	mov	r3, r0
 8002384:	4a06      	ldr	r2, [pc, #24]	@ (80023a0 <microros_deallocate+0x34>)
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	461a      	mov	r2, r3
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <microros_deallocate+0x34>)
 800238e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7fe febb 	bl	800110c <vPortFreeMicroROS>
  }
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200048cc 	.word	0x200048cc

080023a4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80023b0:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <microros_reallocate+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4413      	add	r3, r2
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b12      	ldr	r3, [pc, #72]	@ (8002408 <microros_reallocate+0x64>)
 80023be:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80023c0:	4b12      	ldr	r3, [pc, #72]	@ (800240c <microros_reallocate+0x68>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4413      	add	r3, r2
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b0f      	ldr	r3, [pc, #60]	@ (800240c <microros_reallocate+0x68>)
 80023ce:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80023d6:	68b8      	ldr	r0, [r7, #8]
 80023d8:	f7fe fdd0 	bl	8000f7c <pvPortMallocMicroROS>
 80023dc:	4603      	mov	r3, r0
 80023de:	e00e      	b.n	80023fe <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f7fe feef 	bl	80011c4 <getBlockSize>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a08      	ldr	r2, [pc, #32]	@ (800240c <microros_reallocate+0x68>)
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <microros_reallocate+0x68>)
 80023f2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f7fe ff02 	bl	8001200 <pvPortReallocMicroROS>
 80023fc:	4603      	mov	r3, r0
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200048c8 	.word	0x200048c8
 800240c:	200048cc 	.word	0x200048cc

08002410 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	fb02 f303 	mul.w	r3, r2, r3
 8002424:	4a0c      	ldr	r2, [pc, #48]	@ (8002458 <microros_zero_allocate+0x48>)
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	4413      	add	r3, r2
 800242a:	461a      	mov	r2, r3
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <microros_zero_allocate+0x48>)
 800242e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	4a08      	ldr	r2, [pc, #32]	@ (800245c <microros_zero_allocate+0x4c>)
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	4413      	add	r3, r2
 800243e:	461a      	mov	r2, r3
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <microros_zero_allocate+0x4c>)
 8002442:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7fe ff07 	bl	800125a <pvPortCallocMicroROS>
 800244c:	4603      	mov	r3, r0
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200048c8 	.word	0x200048c8
 800245c:	200048cc 	.word	0x200048cc

08002460 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002476:	a320      	add	r3, pc, #128	@ (adr r3, 80024f8 <UTILS_NanosecondsToTimespec+0x98>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe fbb6 	bl	8000bec <__aeabi_ldivmod>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800248a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800248e:	a31a      	add	r3, pc, #104	@ (adr r3, 80024f8 <UTILS_NanosecondsToTimespec+0x98>)
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	f7fe fbaa 	bl	8000bec <__aeabi_ldivmod>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da20      	bge.n	80024e6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a11      	ldr	r2, [pc, #68]	@ (80024f0 <UTILS_NanosecondsToTimespec+0x90>)
 80024aa:	fb82 1203 	smull	r1, r2, r2, r3
 80024ae:	1712      	asrs	r2, r2, #28
 80024b0:	17db      	asrs	r3, r3, #31
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	6979      	ldr	r1, [r7, #20]
 80024c0:	17c8      	asrs	r0, r1, #31
 80024c2:	460c      	mov	r4, r1
 80024c4:	4605      	mov	r5, r0
 80024c6:	ebb2 0804 	subs.w	r8, r2, r4
 80024ca:	eb63 0905 	sbc.w	r9, r3, r5
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4906      	ldr	r1, [pc, #24]	@ (80024f4 <UTILS_NanosecondsToTimespec+0x94>)
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	441a      	add	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	609a      	str	r2, [r3, #8]
    }
}
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024f0:	44b82fa1 	.word	0x44b82fa1
 80024f4:	3b9aca00 	.word	0x3b9aca00
 80024f8:	3b9aca00 	.word	0x3b9aca00
 80024fc:	00000000 	.word	0x00000000

08002500 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002504:	b08e      	sub	sp, #56	@ 0x38
 8002506:	af00      	add	r7, sp, #0
 8002508:	6278      	str	r0, [r7, #36]	@ 0x24
 800250a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800250c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002510:	2300      	movs	r3, #0
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002526:	4618      	mov	r0, r3
 8002528:	f006 fc6a 	bl	8008e00 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800252c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252e:	17da      	asrs	r2, r3, #31
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	61fa      	str	r2, [r7, #28]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	69b9      	ldr	r1, [r7, #24]
 800253e:	000b      	movs	r3, r1
 8002540:	2200      	movs	r2, #0
 8002542:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002548:	2200      	movs	r2, #0
 800254a:	461c      	mov	r4, r3
 800254c:	4615      	mov	r5, r2
 800254e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002552:	1911      	adds	r1, r2, r4
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	416b      	adcs	r3, r5
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800255e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002562:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	f04f 0400 	mov.w	r4, #0
 800256e:	f04f 0500 	mov.w	r5, #0
 8002572:	015d      	lsls	r5, r3, #5
 8002574:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002578:	0154      	lsls	r4, r2, #5
 800257a:	4622      	mov	r2, r4
 800257c:	462b      	mov	r3, r5
 800257e:	ebb2 0800 	subs.w	r8, r2, r0
 8002582:	eb63 0901 	sbc.w	r9, r3, r1
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002592:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002596:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800259a:	4690      	mov	r8, r2
 800259c:	4699      	mov	r9, r3
 800259e:	eb18 0a00 	adds.w	sl, r8, r0
 80025a2:	eb49 0b01 	adc.w	fp, r9, r1
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025b2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025b6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025ba:	ebb2 040a 	subs.w	r4, r2, sl
 80025be:	603c      	str	r4, [r7, #0]
 80025c0:	eb63 030b 	sbc.w	r3, r3, fp
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ca:	4623      	mov	r3, r4
 80025cc:	181b      	adds	r3, r3, r0
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	462b      	mov	r3, r5
 80025d2:	eb41 0303 	adc.w	r3, r1, r3
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025de:	f7ff ff3f 	bl	8002460 <UTILS_NanosecondsToTimespec>

    return 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	3738      	adds	r7, #56	@ 0x38
 80025e8:	46bd      	mov	sp, r7
 80025ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080025f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_MspInit+0x54>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	4a11      	ldr	r2, [pc, #68]	@ (8002644 <HAL_MspInit+0x54>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002604:	6453      	str	r3, [r2, #68]	@ 0x44
 8002606:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <HAL_MspInit+0x54>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <HAL_MspInit+0x54>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a0a      	ldr	r2, [pc, #40]	@ (8002644 <HAL_MspInit+0x54>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <HAL_MspInit+0x54>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	210f      	movs	r1, #15
 8002632:	f06f 0001 	mvn.w	r0, #1
 8002636:	f000 fcd4 	bl	8002fe2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	@ (80026cc <HAL_I2C_MspInit+0x84>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d12b      	bne.n	80026c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6313      	str	r3, [r2, #48]	@ 0x30
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002686:	23c0      	movs	r3, #192	@ 0xc0
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268a:	2312      	movs	r3, #18
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002692:	2303      	movs	r3, #3
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002696:	2304      	movs	r3, #4
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <HAL_I2C_MspInit+0x8c>)
 80026a2:	f001 f8d7 	bl	8003854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	4a08      	ldr	r2, [pc, #32]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 80026b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	@ 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40005400 	.word	0x40005400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020400 	.word	0x40020400

080026d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002714 <HAL_TIM_Base_MspInit+0x3c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10d      	bne.n	8002706 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_TIM_Base_MspInit+0x40>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	4a09      	ldr	r2, [pc, #36]	@ (8002718 <HAL_TIM_Base_MspInit+0x40>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026fa:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <HAL_TIM_Base_MspInit+0x40>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40000400 	.word	0x40000400
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	@ 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a21      	ldr	r2, [pc, #132]	@ (80027c0 <HAL_TIM_MspPostInit+0xa4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d13b      	bne.n	80027b6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	4b20      	ldr	r3, [pc, #128]	@ (80027c4 <HAL_TIM_MspPostInit+0xa8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a1f      	ldr	r2, [pc, #124]	@ (80027c4 <HAL_TIM_MspPostInit+0xa8>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <HAL_TIM_MspPostInit+0xa8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <HAL_TIM_MspPostInit+0xa8>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	4a18      	ldr	r2, [pc, #96]	@ (80027c4 <HAL_TIM_MspPostInit+0xa8>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	@ 0x30
 800276a:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <HAL_TIM_MspPostInit+0xa8>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002776:	23c0      	movs	r3, #192	@ 0xc0
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002786:	2302      	movs	r3, #2
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	480d      	ldr	r0, [pc, #52]	@ (80027c8 <HAL_TIM_MspPostInit+0xac>)
 8002792:	f001 f85f 	bl	8003854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002796:	2303      	movs	r3, #3
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027a6:	2302      	movs	r3, #2
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	4806      	ldr	r0, [pc, #24]	@ (80027cc <HAL_TIM_MspPostInit+0xb0>)
 80027b2:	f001 f84f 	bl	8003854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3728      	adds	r7, #40	@ 0x28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400

080027d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002924 <HAL_UART_MspInit+0x154>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f040 8093 	bne.w	800291a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002928 <HAL_UART_MspInit+0x158>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002928 <HAL_UART_MspInit+0x158>)
 80027fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002802:	6413      	str	r3, [r2, #64]	@ 0x40
 8002804:	4b48      	ldr	r3, [pc, #288]	@ (8002928 <HAL_UART_MspInit+0x158>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	4b44      	ldr	r3, [pc, #272]	@ (8002928 <HAL_UART_MspInit+0x158>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	4a43      	ldr	r2, [pc, #268]	@ (8002928 <HAL_UART_MspInit+0x158>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002820:	4b41      	ldr	r3, [pc, #260]	@ (8002928 <HAL_UART_MspInit+0x158>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800282c:	230c      	movs	r3, #12
 800282e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002838:	2303      	movs	r3, #3
 800283a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800283c:	2307      	movs	r3, #7
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	4839      	ldr	r0, [pc, #228]	@ (800292c <HAL_UART_MspInit+0x15c>)
 8002848:	f001 f804 	bl	8003854 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800284c:	4b38      	ldr	r3, [pc, #224]	@ (8002930 <HAL_UART_MspInit+0x160>)
 800284e:	4a39      	ldr	r2, [pc, #228]	@ (8002934 <HAL_UART_MspInit+0x164>)
 8002850:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002852:	4b37      	ldr	r3, [pc, #220]	@ (8002930 <HAL_UART_MspInit+0x160>)
 8002854:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002858:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800285a:	4b35      	ldr	r3, [pc, #212]	@ (8002930 <HAL_UART_MspInit+0x160>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002860:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <HAL_UART_MspInit+0x160>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002866:	4b32      	ldr	r3, [pc, #200]	@ (8002930 <HAL_UART_MspInit+0x160>)
 8002868:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800286c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800286e:	4b30      	ldr	r3, [pc, #192]	@ (8002930 <HAL_UART_MspInit+0x160>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002874:	4b2e      	ldr	r3, [pc, #184]	@ (8002930 <HAL_UART_MspInit+0x160>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800287a:	4b2d      	ldr	r3, [pc, #180]	@ (8002930 <HAL_UART_MspInit+0x160>)
 800287c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002880:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002882:	4b2b      	ldr	r3, [pc, #172]	@ (8002930 <HAL_UART_MspInit+0x160>)
 8002884:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002888:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800288a:	4b29      	ldr	r3, [pc, #164]	@ (8002930 <HAL_UART_MspInit+0x160>)
 800288c:	2200      	movs	r2, #0
 800288e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002890:	4827      	ldr	r0, [pc, #156]	@ (8002930 <HAL_UART_MspInit+0x160>)
 8002892:	f000 fbdd 	bl	8003050 <HAL_DMA_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800289c:	f7ff fd3e 	bl	800231c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a23      	ldr	r2, [pc, #140]	@ (8002930 <HAL_UART_MspInit+0x160>)
 80028a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028a6:	4a22      	ldr	r2, [pc, #136]	@ (8002930 <HAL_UART_MspInit+0x160>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80028ac:	4b22      	ldr	r3, [pc, #136]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028ae:	4a23      	ldr	r2, [pc, #140]	@ (800293c <HAL_UART_MspInit+0x16c>)
 80028b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80028b2:	4b21      	ldr	r3, [pc, #132]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028bc:	2240      	movs	r2, #64	@ 0x40
 80028be:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d4:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028da:	4b17      	ldr	r3, [pc, #92]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028dc:	2200      	movs	r2, #0
 80028de:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028e0:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80028e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e8:	4b13      	ldr	r3, [pc, #76]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028ee:	4812      	ldr	r0, [pc, #72]	@ (8002938 <HAL_UART_MspInit+0x168>)
 80028f0:	f000 fbae 	bl	8003050 <HAL_DMA_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80028fa:	f7ff fd0f 	bl	800231c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a0d      	ldr	r2, [pc, #52]	@ (8002938 <HAL_UART_MspInit+0x168>)
 8002902:	639a      	str	r2, [r3, #56]	@ 0x38
 8002904:	4a0c      	ldr	r2, [pc, #48]	@ (8002938 <HAL_UART_MspInit+0x168>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2105      	movs	r1, #5
 800290e:	2026      	movs	r0, #38	@ 0x26
 8002910:	f000 fb67 	bl	8002fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002914:	2026      	movs	r0, #38	@ 0x26
 8002916:	f000 fb80 	bl	800301a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800291a:	bf00      	nop
 800291c:	3728      	adds	r7, #40	@ 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40004400 	.word	0x40004400
 8002928:	40023800 	.word	0x40023800
 800292c:	40020000 	.word	0x40020000
 8002930:	200047d8 	.word	0x200047d8
 8002934:	40026088 	.word	0x40026088
 8002938:	20004838 	.word	0x20004838
 800293c:	400260a0 	.word	0x400260a0

08002940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <NMI_Handler+0x4>

08002948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <HardFault_Handler+0x4>

08002950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <MemManage_Handler+0x4>

08002958 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295c:	bf00      	nop
 800295e:	e7fd      	b.n	800295c <BusFault_Handler+0x4>

08002960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002964:	bf00      	nop
 8002966:	e7fd      	b.n	8002964 <UsageFault_Handler+0x4>

08002968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800297a:	f000 fa37 	bl	8002dec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800297e:	f006 fbc3 	bl	8009108 <xTaskGetSchedulerState>
 8002982:	4603      	mov	r3, r0
 8002984:	2b01      	cmp	r3, #1
 8002986:	d001      	beq.n	800298c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002988:	f007 f9be 	bl	8009d08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002994:	2001      	movs	r0, #1
 8002996:	f001 f8f9 	bl	8003b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}

0800299e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80029a2:	2002      	movs	r0, #2
 80029a4:	f001 f8f2 	bl	8003b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}

080029ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80029b0:	4802      	ldr	r0, [pc, #8]	@ (80029bc <DMA1_Stream5_IRQHandler+0x10>)
 80029b2:	f000 fce5 	bl	8003380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200047d8 	.word	0x200047d8

080029c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80029c4:	4802      	ldr	r0, [pc, #8]	@ (80029d0 <DMA1_Stream6_IRQHandler+0x10>)
 80029c6:	f000 fcdb 	bl	8003380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20004838 	.word	0x20004838

080029d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029d8:	4802      	ldr	r0, [pc, #8]	@ (80029e4 <USART2_IRQHandler+0x10>)
 80029da:	f003 fd37 	bl	800644c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20004790 	.word	0x20004790

080029e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return 1;
 80029ec:	2301      	movs	r3, #1
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_kill>:

int _kill(int pid, int sig)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a02:	f016 fb2d 	bl	8019060 <__errno>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2216      	movs	r2, #22
 8002a0a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_exit>:

void _exit (int status)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ffe7 	bl	80029f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a2a:	bf00      	nop
 8002a2c:	e7fd      	b.n	8002a2a <_exit+0x12>

08002a2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e00a      	b.n	8002a56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a40:	f3af 8000 	nop.w
 8002a44:	4601      	mov	r1, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	60ba      	str	r2, [r7, #8]
 8002a4c:	b2ca      	uxtb	r2, r1
 8002a4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	dbf0      	blt.n	8002a40 <_read+0x12>
  }

  return len;
 8002a5e:	687b      	ldr	r3, [r7, #4]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	e009      	b.n	8002a8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	60ba      	str	r2, [r7, #8]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	dbf1      	blt.n	8002a7a <_write+0x12>
  }
  return len;
 8002a96:	687b      	ldr	r3, [r7, #4]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_close>:

int _close(int file)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_isatty>:

int _isatty(int file)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ae0:	2301      	movs	r3, #1
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b085      	sub	sp, #20
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b10:	4a14      	ldr	r2, [pc, #80]	@ (8002b64 <_sbrk+0x5c>)
 8002b12:	4b15      	ldr	r3, [pc, #84]	@ (8002b68 <_sbrk+0x60>)
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b1c:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <_sbrk+0x64>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <_sbrk+0x64>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	@ (8002b70 <_sbrk+0x68>)
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <_sbrk+0x64>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d207      	bcs.n	8002b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b38:	f016 fa92 	bl	8019060 <__errno>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	220c      	movs	r2, #12
 8002b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b46:	e009      	b.n	8002b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b48:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b4e:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <_sbrk+0x64>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	4a05      	ldr	r2, [pc, #20]	@ (8002b6c <_sbrk+0x64>)
 8002b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20020000 	.word	0x20020000
 8002b68:	00000400 	.word	0x00000400
 8002b6c:	200048d4 	.word	0x200048d4
 8002b70:	2000e700 	.word	0x2000e700

08002b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <SystemInit+0x20>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7e:	4a05      	ldr	r2, [pc, #20]	@ (8002b94 <SystemInit+0x20>)
 8002b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ba6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002ba8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bac:	4904      	ldr	r1, [pc, #16]	@ (8002bc0 <cubemx_transport_open+0x28>)
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f003 fba8 	bl	8006304 <HAL_UART_Receive_DMA>
    return true;
 8002bb4:	2301      	movs	r3, #1
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200048d8 	.word	0x200048d8

08002bc4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002bd2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f003 fbba 	bl	800634e <HAL_UART_DMAStop>
    return true;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002bf8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d11c      	bne.n	8002c40 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f003 fb08 	bl	8006224 <HAL_UART_Transmit_DMA>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002c18:	e002      	b.n	8002c20 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f004 fe24 	bl	8007868 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <cubemx_transport_write+0x4e>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d1f3      	bne.n	8002c1a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <cubemx_transport_write+0x58>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	e002      	b.n	8002c42 <cubemx_transport_write+0x5e>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002c40:	2300      	movs	r3, #0
    }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002c60:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c66:	b672      	cpsid	i
}
 8002c68:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002c76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ce8 <cubemx_transport_read+0x9c>)
 8002c78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c7a:	b662      	cpsie	i
}
 8002c7c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002c84:	2001      	movs	r0, #1
 8002c86:	f004 fdef 	bl	8007868 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002c8a:	4b18      	ldr	r3, [pc, #96]	@ (8002cec <cubemx_transport_read+0xa0>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4b16      	ldr	r3, [pc, #88]	@ (8002ce8 <cubemx_transport_read+0x9c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d103      	bne.n	8002c9e <cubemx_transport_read+0x52>
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	dbe3      	blt.n	8002c66 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002ca2:	e011      	b.n	8002cc8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002ca4:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <cubemx_transport_read+0xa0>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	440b      	add	r3, r1
 8002cae:	4910      	ldr	r1, [pc, #64]	@ (8002cf0 <cubemx_transport_read+0xa4>)
 8002cb0:	5c8a      	ldrb	r2, [r1, r2]
 8002cb2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <cubemx_transport_read+0xa0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8002cec <cubemx_transport_read+0xa0>)
 8002cc0:	6013      	str	r3, [r2, #0]
        wrote++;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002cc8:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <cubemx_transport_read+0xa0>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <cubemx_transport_read+0x9c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d003      	beq.n	8002cdc <cubemx_transport_read+0x90>
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d3e3      	bcc.n	8002ca4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200050dc 	.word	0x200050dc
 8002cec:	200050d8 	.word	0x200050d8
 8002cf0:	200048d8 	.word	0x200048d8

08002cf4 <Reset_Handler>:
 8002cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d2c <LoopFillZerobss+0xe>
 8002cf8:	f7ff ff3c 	bl	8002b74 <SystemInit>
 8002cfc:	480c      	ldr	r0, [pc, #48]	@ (8002d30 <LoopFillZerobss+0x12>)
 8002cfe:	490d      	ldr	r1, [pc, #52]	@ (8002d34 <LoopFillZerobss+0x16>)
 8002d00:	4a0d      	ldr	r2, [pc, #52]	@ (8002d38 <LoopFillZerobss+0x1a>)
 8002d02:	2300      	movs	r3, #0
 8002d04:	e002      	b.n	8002d0c <LoopCopyDataInit>

08002d06 <CopyDataInit>:
 8002d06:	58d4      	ldr	r4, [r2, r3]
 8002d08:	50c4      	str	r4, [r0, r3]
 8002d0a:	3304      	adds	r3, #4

08002d0c <LoopCopyDataInit>:
 8002d0c:	18c4      	adds	r4, r0, r3
 8002d0e:	428c      	cmp	r4, r1
 8002d10:	d3f9      	bcc.n	8002d06 <CopyDataInit>
 8002d12:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <LoopFillZerobss+0x1e>)
 8002d14:	4c0a      	ldr	r4, [pc, #40]	@ (8002d40 <LoopFillZerobss+0x22>)
 8002d16:	2300      	movs	r3, #0
 8002d18:	e001      	b.n	8002d1e <LoopFillZerobss>

08002d1a <FillZerobss>:
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	3204      	adds	r2, #4

08002d1e <LoopFillZerobss>:
 8002d1e:	42a2      	cmp	r2, r4
 8002d20:	d3fb      	bcc.n	8002d1a <FillZerobss>
 8002d22:	f016 f9a3 	bl	801906c <__libc_init_array>
 8002d26:	f7fe fdab 	bl	8001880 <main>
 8002d2a:	4770      	bx	lr
 8002d2c:	20020000 	.word	0x20020000
 8002d30:	20000000 	.word	0x20000000
 8002d34:	20000ac0 	.word	0x20000ac0
 8002d38:	0801b1b8 	.word	0x0801b1b8
 8002d3c:	20000ac0 	.word	0x20000ac0
 8002d40:	2000e6fc 	.word	0x2000e6fc

08002d44 <ADC_IRQHandler>:
 8002d44:	e7fe      	b.n	8002d44 <ADC_IRQHandler>
	...

08002d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <HAL_Init+0x40>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0d      	ldr	r2, [pc, #52]	@ (8002d88 <HAL_Init+0x40>)
 8002d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d58:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <HAL_Init+0x40>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <HAL_Init+0x40>)
 8002d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d64:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <HAL_Init+0x40>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a07      	ldr	r2, [pc, #28]	@ (8002d88 <HAL_Init+0x40>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d70:	2003      	movs	r0, #3
 8002d72:	f000 f92b 	bl	8002fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f000 f808 	bl	8002d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d7c:	f7ff fc38 	bl	80025f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00

08002d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d94:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <HAL_InitTick+0x54>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b12      	ldr	r3, [pc, #72]	@ (8002de4 <HAL_InitTick+0x58>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f943 	bl	8003036 <HAL_SYSTICK_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00e      	b.n	8002dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d80a      	bhi.n	8002dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dc8:	f000 f90b 	bl	8002fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dcc:	4a06      	ldr	r2, [pc, #24]	@ (8002de8 <HAL_InitTick+0x5c>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000004 	.word	0x20000004
 8002de4:	2000000c 	.word	0x2000000c
 8002de8:	20000008 	.word	0x20000008

08002dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <HAL_IncTick+0x20>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <HAL_IncTick+0x24>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a04      	ldr	r2, [pc, #16]	@ (8002e10 <HAL_IncTick+0x24>)
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	2000000c 	.word	0x2000000c
 8002e10:	200050e0 	.word	0x200050e0

08002e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return uwTick;
 8002e18:	4b03      	ldr	r3, [pc, #12]	@ (8002e28 <HAL_GetTick+0x14>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	200050e0 	.word	0x200050e0

08002e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e70 <__NVIC_SetPriorityGrouping+0x44>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5e:	4a04      	ldr	r2, [pc, #16]	@ (8002e70 <__NVIC_SetPriorityGrouping+0x44>)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	60d3      	str	r3, [r2, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e78:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <__NVIC_GetPriorityGrouping+0x18>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	f003 0307 	and.w	r3, r3, #7
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	db0b      	blt.n	8002eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	f003 021f 	and.w	r2, r3, #31
 8002ea8:	4907      	ldr	r1, [pc, #28]	@ (8002ec8 <__NVIC_EnableIRQ+0x38>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000e100 	.word	0xe000e100

08002ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	6039      	str	r1, [r7, #0]
 8002ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	db0a      	blt.n	8002ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	490c      	ldr	r1, [pc, #48]	@ (8002f18 <__NVIC_SetPriority+0x4c>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	0112      	lsls	r2, r2, #4
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef4:	e00a      	b.n	8002f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4908      	ldr	r1, [pc, #32]	@ (8002f1c <__NVIC_SetPriority+0x50>)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	3b04      	subs	r3, #4
 8002f04:	0112      	lsls	r2, r2, #4
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	440b      	add	r3, r1
 8002f0a:	761a      	strb	r2, [r3, #24]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000e100 	.word	0xe000e100
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	@ 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f1c3 0307 	rsb	r3, r3, #7
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	bf28      	it	cs
 8002f3e:	2304      	movcs	r3, #4
 8002f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d902      	bls.n	8002f50 <NVIC_EncodePriority+0x30>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3b03      	subs	r3, #3
 8002f4e:	e000      	b.n	8002f52 <NVIC_EncodePriority+0x32>
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	401a      	ands	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43d9      	mvns	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	4313      	orrs	r3, r2
         );
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	@ 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f98:	d301      	bcc.n	8002f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00f      	b.n	8002fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <SysTick_Config+0x40>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fac:	f7ff ff8e 	bl	8002ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <SysTick_Config+0x40>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb6:	4b04      	ldr	r3, [pc, #16]	@ (8002fc8 <SysTick_Config+0x40>)
 8002fb8:	2207      	movs	r2, #7
 8002fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	e000e010 	.word	0xe000e010

08002fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff29 	bl	8002e2c <__NVIC_SetPriorityGrouping>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff4:	f7ff ff3e 	bl	8002e74 <__NVIC_GetPriorityGrouping>
 8002ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	6978      	ldr	r0, [r7, #20]
 8003000:	f7ff ff8e 	bl	8002f20 <NVIC_EncodePriority>
 8003004:	4602      	mov	r2, r0
 8003006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff5d 	bl	8002ecc <__NVIC_SetPriority>
}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff31 	bl	8002e90 <__NVIC_EnableIRQ>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ffa2 	bl	8002f88 <SysTick_Config>
 8003044:	4603      	mov	r3, r0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff feda 	bl	8002e14 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e099      	b.n	80031a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308c:	e00f      	b.n	80030ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800308e:	f7ff fec1 	bl	8002e14 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b05      	cmp	r3, #5
 800309a:	d908      	bls.n	80030ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2203      	movs	r2, #3
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e078      	b.n	80031a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e8      	bne.n	800308e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4b38      	ldr	r3, [pc, #224]	@ (80031a8 <HAL_DMA_Init+0x158>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	2b04      	cmp	r3, #4
 8003106:	d107      	bne.n	8003118 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003110:	4313      	orrs	r3, r2
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 0307 	bic.w	r3, r3, #7
 800312e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	2b04      	cmp	r3, #4
 8003140:	d117      	bne.n	8003172 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00e      	beq.n	8003172 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb01 	bl	800375c <DMA_CheckFifoParam>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2240      	movs	r2, #64	@ 0x40
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800316e:	2301      	movs	r3, #1
 8003170:	e016      	b.n	80031a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fab8 	bl	80036f0 <DMA_CalcBaseAndBitshift>
 8003180:	4603      	mov	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	223f      	movs	r2, #63	@ 0x3f
 800318a:	409a      	lsls	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	f010803f 	.word	0xf010803f

080031ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_DMA_Start_IT+0x26>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e040      	b.n	8003254 <HAL_DMA_Start_IT+0xa8>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d12f      	bne.n	8003246 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fa4a 	bl	8003694 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003204:	223f      	movs	r2, #63	@ 0x3f
 8003206:	409a      	lsls	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0216 	orr.w	r2, r2, #22
 800321a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0208 	orr.w	r2, r2, #8
 8003232:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e005      	b.n	8003252 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003252:	7dfb      	ldrb	r3, [r7, #23]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800326a:	f7ff fdd3 	bl	8002e14 <HAL_GetTick>
 800326e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d008      	beq.n	800328e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2280      	movs	r2, #128	@ 0x80
 8003280:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e052      	b.n	8003334 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0216 	bic.w	r2, r2, #22
 800329c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_DMA_Abort+0x62>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0208 	bic.w	r2, r2, #8
 80032cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032de:	e013      	b.n	8003308 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032e0:	f7ff fd98 	bl	8002e14 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	d90c      	bls.n	8003308 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2203      	movs	r2, #3
 80032f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e015      	b.n	8003334 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e4      	bne.n	80032e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331a:	223f      	movs	r2, #63	@ 0x3f
 800331c:	409a      	lsls	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d004      	beq.n	800335a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2280      	movs	r2, #128	@ 0x80
 8003354:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e00c      	b.n	8003374 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2205      	movs	r2, #5
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800338c:	4b8e      	ldr	r3, [pc, #568]	@ (80035c8 <HAL_DMA_IRQHandler+0x248>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a8e      	ldr	r2, [pc, #568]	@ (80035cc <HAL_DMA_IRQHandler+0x24c>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0a9b      	lsrs	r3, r3, #10
 8003398:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033aa:	2208      	movs	r2, #8
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01a      	beq.n	80033ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0204 	bic.w	r2, r2, #4
 80033d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d8:	2208      	movs	r2, #8
 80033da:	409a      	lsls	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e4:	f043 0201 	orr.w	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f0:	2201      	movs	r2, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d012      	beq.n	8003422 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	2201      	movs	r2, #1
 8003410:	409a      	lsls	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341a:	f043 0202 	orr.w	r2, r3, #2
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	2204      	movs	r2, #4
 8003428:	409a      	lsls	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d012      	beq.n	8003458 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003444:	2204      	movs	r2, #4
 8003446:	409a      	lsls	r2, r3
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003450:	f043 0204 	orr.w	r2, r3, #4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345c:	2210      	movs	r2, #16
 800345e:	409a      	lsls	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d043      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d03c      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347a:	2210      	movs	r2, #16
 800347c:	409a      	lsls	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d108      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d024      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
 80034ae:	e01f      	b.n	80034f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01b      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
 80034c0:	e016      	b.n	80034f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0208 	bic.w	r2, r2, #8
 80034de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f4:	2220      	movs	r2, #32
 80034f6:	409a      	lsls	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 808f 	beq.w	8003620 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8087 	beq.w	8003620 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003516:	2220      	movs	r2, #32
 8003518:	409a      	lsls	r2, r3
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b05      	cmp	r3, #5
 8003528:	d136      	bne.n	8003598 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0216 	bic.w	r2, r2, #22
 8003538:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003548:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <HAL_DMA_IRQHandler+0x1da>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0208 	bic.w	r2, r2, #8
 8003568:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356e:	223f      	movs	r2, #63	@ 0x3f
 8003570:	409a      	lsls	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800358a:	2b00      	cmp	r3, #0
 800358c:	d07e      	beq.n	800368c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
        }
        return;
 8003596:	e079      	b.n	800368c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01d      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10d      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d031      	beq.n	8003620 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
 80035c4:	e02c      	b.n	8003620 <HAL_DMA_IRQHandler+0x2a0>
 80035c6:	bf00      	nop
 80035c8:	20000004 	.word	0x20000004
 80035cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d023      	beq.n	8003620 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
 80035e0:	e01e      	b.n	8003620 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10f      	bne.n	8003610 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0210 	bic.w	r2, r2, #16
 80035fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003624:	2b00      	cmp	r3, #0
 8003626:	d032      	beq.n	800368e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d022      	beq.n	800367a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2205      	movs	r2, #5
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	3301      	adds	r3, #1
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	429a      	cmp	r2, r3
 8003656:	d307      	bcc.n	8003668 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f2      	bne.n	800364c <HAL_DMA_IRQHandler+0x2cc>
 8003666:	e000      	b.n	800366a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003668:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	4798      	blx	r3
 800368a:	e000      	b.n	800368e <HAL_DMA_IRQHandler+0x30e>
        return;
 800368c:	bf00      	nop
    }
  }
}
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b40      	cmp	r3, #64	@ 0x40
 80036c0:	d108      	bne.n	80036d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036d2:	e007      	b.n	80036e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	60da      	str	r2, [r3, #12]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	3b10      	subs	r3, #16
 8003700:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <DMA_CalcBaseAndBitshift+0x64>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800370a:	4a13      	ldr	r2, [pc, #76]	@ (8003758 <DMA_CalcBaseAndBitshift+0x68>)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b03      	cmp	r3, #3
 800371c:	d909      	bls.n	8003732 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	1d1a      	adds	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003730:	e007      	b.n	8003742 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	aaaaaaab 	.word	0xaaaaaaab
 8003758:	08019e94 	.word	0x08019e94

0800375c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11f      	bne.n	80037b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d856      	bhi.n	800382a <DMA_CheckFifoParam+0xce>
 800377c:	a201      	add	r2, pc, #4	@ (adr r2, 8003784 <DMA_CheckFifoParam+0x28>)
 800377e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003782:	bf00      	nop
 8003784:	08003795 	.word	0x08003795
 8003788:	080037a7 	.word	0x080037a7
 800378c:	08003795 	.word	0x08003795
 8003790:	0800382b 	.word	0x0800382b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d046      	beq.n	800382e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a4:	e043      	b.n	800382e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037ae:	d140      	bne.n	8003832 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b4:	e03d      	b.n	8003832 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037be:	d121      	bne.n	8003804 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d837      	bhi.n	8003836 <DMA_CheckFifoParam+0xda>
 80037c6:	a201      	add	r2, pc, #4	@ (adr r2, 80037cc <DMA_CheckFifoParam+0x70>)
 80037c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037cc:	080037dd 	.word	0x080037dd
 80037d0:	080037e3 	.word	0x080037e3
 80037d4:	080037dd 	.word	0x080037dd
 80037d8:	080037f5 	.word	0x080037f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      break;
 80037e0:	e030      	b.n	8003844 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d025      	beq.n	800383a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f2:	e022      	b.n	800383a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037fc:	d11f      	bne.n	800383e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003802:	e01c      	b.n	800383e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d903      	bls.n	8003812 <DMA_CheckFifoParam+0xb6>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d003      	beq.n	8003818 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003810:	e018      	b.n	8003844 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      break;
 8003816:	e015      	b.n	8003844 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00e      	beq.n	8003842 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      break;
 8003828:	e00b      	b.n	8003842 <DMA_CheckFifoParam+0xe6>
      break;
 800382a:	bf00      	nop
 800382c:	e00a      	b.n	8003844 <DMA_CheckFifoParam+0xe8>
      break;
 800382e:	bf00      	nop
 8003830:	e008      	b.n	8003844 <DMA_CheckFifoParam+0xe8>
      break;
 8003832:	bf00      	nop
 8003834:	e006      	b.n	8003844 <DMA_CheckFifoParam+0xe8>
      break;
 8003836:	bf00      	nop
 8003838:	e004      	b.n	8003844 <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <DMA_CheckFifoParam+0xe8>
      break;   
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <DMA_CheckFifoParam+0xe8>
      break;
 8003842:	bf00      	nop
    }
  } 
  
  return status; 
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop

08003854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	@ 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	e159      	b.n	8003b24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003870:	2201      	movs	r2, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	429a      	cmp	r2, r3
 800388a:	f040 8148 	bne.w	8003b1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d005      	beq.n	80038a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d130      	bne.n	8003908 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	2203      	movs	r2, #3
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038dc:	2201      	movs	r2, #1
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 0201 	and.w	r2, r3, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b03      	cmp	r3, #3
 8003912:	d017      	beq.n	8003944 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d123      	bne.n	8003998 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	08da      	lsrs	r2, r3, #3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3208      	adds	r2, #8
 8003958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	220f      	movs	r2, #15
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	08da      	lsrs	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3208      	adds	r2, #8
 8003992:	69b9      	ldr	r1, [r7, #24]
 8003994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2203      	movs	r2, #3
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0203 	and.w	r2, r3, #3
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80a2 	beq.w	8003b1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	4b57      	ldr	r3, [pc, #348]	@ (8003b3c <HAL_GPIO_Init+0x2e8>)
 80039e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e2:	4a56      	ldr	r2, [pc, #344]	@ (8003b3c <HAL_GPIO_Init+0x2e8>)
 80039e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ea:	4b54      	ldr	r3, [pc, #336]	@ (8003b3c <HAL_GPIO_Init+0x2e8>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039f6:	4a52      	ldr	r2, [pc, #328]	@ (8003b40 <HAL_GPIO_Init+0x2ec>)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	3302      	adds	r3, #2
 80039fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	220f      	movs	r2, #15
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a49      	ldr	r2, [pc, #292]	@ (8003b44 <HAL_GPIO_Init+0x2f0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d019      	beq.n	8003a56 <HAL_GPIO_Init+0x202>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a48      	ldr	r2, [pc, #288]	@ (8003b48 <HAL_GPIO_Init+0x2f4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_GPIO_Init+0x1fe>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a47      	ldr	r2, [pc, #284]	@ (8003b4c <HAL_GPIO_Init+0x2f8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00d      	beq.n	8003a4e <HAL_GPIO_Init+0x1fa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a46      	ldr	r2, [pc, #280]	@ (8003b50 <HAL_GPIO_Init+0x2fc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <HAL_GPIO_Init+0x1f6>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a45      	ldr	r2, [pc, #276]	@ (8003b54 <HAL_GPIO_Init+0x300>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_GPIO_Init+0x1f2>
 8003a42:	2304      	movs	r3, #4
 8003a44:	e008      	b.n	8003a58 <HAL_GPIO_Init+0x204>
 8003a46:	2307      	movs	r3, #7
 8003a48:	e006      	b.n	8003a58 <HAL_GPIO_Init+0x204>
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e004      	b.n	8003a58 <HAL_GPIO_Init+0x204>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e002      	b.n	8003a58 <HAL_GPIO_Init+0x204>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_GPIO_Init+0x204>
 8003a56:	2300      	movs	r3, #0
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	f002 0203 	and.w	r2, r2, #3
 8003a5e:	0092      	lsls	r2, r2, #2
 8003a60:	4093      	lsls	r3, r2
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a68:	4935      	ldr	r1, [pc, #212]	@ (8003b40 <HAL_GPIO_Init+0x2ec>)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	3302      	adds	r3, #2
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a76:	4b38      	ldr	r3, [pc, #224]	@ (8003b58 <HAL_GPIO_Init+0x304>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003b58 <HAL_GPIO_Init+0x304>)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b58 <HAL_GPIO_Init+0x304>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ac4:	4a24      	ldr	r2, [pc, #144]	@ (8003b58 <HAL_GPIO_Init+0x304>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aca:	4b23      	ldr	r3, [pc, #140]	@ (8003b58 <HAL_GPIO_Init+0x304>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aee:	4a1a      	ldr	r2, [pc, #104]	@ (8003b58 <HAL_GPIO_Init+0x304>)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af4:	4b18      	ldr	r3, [pc, #96]	@ (8003b58 <HAL_GPIO_Init+0x304>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b18:	4a0f      	ldr	r2, [pc, #60]	@ (8003b58 <HAL_GPIO_Init+0x304>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	f67f aea2 	bls.w	8003870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3724      	adds	r7, #36	@ 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	40020800 	.word	0x40020800
 8003b50:	40020c00 	.word	0x40020c00
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40013c00 	.word	0x40013c00

08003b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	e001      	b.n	8003b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b96:	4b08      	ldr	r3, [pc, #32]	@ (8003bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d006      	beq.n	8003bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ba2:	4a05      	ldr	r2, [pc, #20]	@ (8003bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd fe1c 	bl	80017e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40013c00 	.word	0x40013c00

08003bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e12b      	b.n	8003e26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fe fd30 	bl	8002648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2224      	movs	r2, #36	@ 0x24
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c20:	f001 fc60 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 8003c24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4a81      	ldr	r2, [pc, #516]	@ (8003e30 <HAL_I2C_Init+0x274>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d807      	bhi.n	8003c40 <HAL_I2C_Init+0x84>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a80      	ldr	r2, [pc, #512]	@ (8003e34 <HAL_I2C_Init+0x278>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	bf94      	ite	ls
 8003c38:	2301      	movls	r3, #1
 8003c3a:	2300      	movhi	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e006      	b.n	8003c4e <HAL_I2C_Init+0x92>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a7d      	ldr	r2, [pc, #500]	@ (8003e38 <HAL_I2C_Init+0x27c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	bf94      	ite	ls
 8003c48:	2301      	movls	r3, #1
 8003c4a:	2300      	movhi	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0e7      	b.n	8003e26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a78      	ldr	r2, [pc, #480]	@ (8003e3c <HAL_I2C_Init+0x280>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	0c9b      	lsrs	r3, r3, #18
 8003c60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4a6a      	ldr	r2, [pc, #424]	@ (8003e30 <HAL_I2C_Init+0x274>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d802      	bhi.n	8003c90 <HAL_I2C_Init+0xd4>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	e009      	b.n	8003ca4 <HAL_I2C_Init+0xe8>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	4a69      	ldr	r2, [pc, #420]	@ (8003e40 <HAL_I2C_Init+0x284>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	495c      	ldr	r1, [pc, #368]	@ (8003e30 <HAL_I2C_Init+0x274>)
 8003cc0:	428b      	cmp	r3, r1
 8003cc2:	d819      	bhi.n	8003cf8 <HAL_I2C_Init+0x13c>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1e59      	subs	r1, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd2:	1c59      	adds	r1, r3, #1
 8003cd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cd8:	400b      	ands	r3, r1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_I2C_Init+0x138>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1e59      	subs	r1, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf2:	e051      	b.n	8003d98 <HAL_I2C_Init+0x1dc>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	e04f      	b.n	8003d98 <HAL_I2C_Init+0x1dc>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d111      	bne.n	8003d24 <HAL_I2C_Init+0x168>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1e58      	subs	r0, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e012      	b.n	8003d4a <HAL_I2C_Init+0x18e>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e58      	subs	r0, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	0099      	lsls	r1, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Init+0x196>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e022      	b.n	8003d98 <HAL_I2C_Init+0x1dc>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10e      	bne.n	8003d78 <HAL_I2C_Init+0x1bc>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1e58      	subs	r0, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6859      	ldr	r1, [r3, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	440b      	add	r3, r1
 8003d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d76:	e00f      	b.n	8003d98 <HAL_I2C_Init+0x1dc>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1e58      	subs	r0, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	0099      	lsls	r1, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	6809      	ldr	r1, [r1, #0]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6911      	ldr	r1, [r2, #16]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68d2      	ldr	r2, [r2, #12]
 8003dd2:	4311      	orrs	r1, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	000186a0 	.word	0x000186a0
 8003e34:	001e847f 	.word	0x001e847f
 8003e38:	003d08ff 	.word	0x003d08ff
 8003e3c:	431bde83 	.word	0x431bde83
 8003e40:	10624dd3 	.word	0x10624dd3

08003e44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	817b      	strh	r3, [r7, #10]
 8003e56:	460b      	mov	r3, r1
 8003e58:	813b      	strh	r3, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e5e:	f7fe ffd9 	bl	8002e14 <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	f040 80d9 	bne.w	8004024 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2319      	movs	r3, #25
 8003e78:	2201      	movs	r2, #1
 8003e7a:	496d      	ldr	r1, [pc, #436]	@ (8004030 <HAL_I2C_Mem_Write+0x1ec>)
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fc8b 	bl	8004798 <I2C_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e0cc      	b.n	8004026 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Mem_Write+0x56>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e0c5      	b.n	8004026 <HAL_I2C_Mem_Write+0x1e2>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d007      	beq.n	8003ec0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2221      	movs	r2, #33	@ 0x21
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2240      	movs	r2, #64	@ 0x40
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a4d      	ldr	r2, [pc, #308]	@ (8004034 <HAL_I2C_Mem_Write+0x1f0>)
 8003f00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f02:	88f8      	ldrh	r0, [r7, #6]
 8003f04:	893a      	ldrh	r2, [r7, #8]
 8003f06:	8979      	ldrh	r1, [r7, #10]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	4603      	mov	r3, r0
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fac2 	bl	800449c <I2C_RequestMemoryWrite>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d052      	beq.n	8003fc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e081      	b.n	8004026 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fd50 	bl	80049cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d107      	bne.n	8003f4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e06b      	b.n	8004026 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_I2C_Mem_Write+0x180>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d017      	beq.n	8003fc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1aa      	bne.n	8003f22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fd43 	bl	8004a5c <I2C_WaitOnBTFFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d107      	bne.n	8003ff4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e016      	b.n	8004026 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e000      	b.n	8004026 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	00100002 	.word	0x00100002
 8004034:	ffff0000 	.word	0xffff0000

08004038 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08c      	sub	sp, #48	@ 0x30
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	4608      	mov	r0, r1
 8004042:	4611      	mov	r1, r2
 8004044:	461a      	mov	r2, r3
 8004046:	4603      	mov	r3, r0
 8004048:	817b      	strh	r3, [r7, #10]
 800404a:	460b      	mov	r3, r1
 800404c:	813b      	strh	r3, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004052:	f7fe fedf 	bl	8002e14 <HAL_GetTick>
 8004056:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b20      	cmp	r3, #32
 8004062:	f040 8214 	bne.w	800448e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	2319      	movs	r3, #25
 800406c:	2201      	movs	r2, #1
 800406e:	497b      	ldr	r1, [pc, #492]	@ (800425c <HAL_I2C_Mem_Read+0x224>)
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fb91 	bl	8004798 <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
 800407e:	e207      	b.n	8004490 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_I2C_Mem_Read+0x56>
 800408a:	2302      	movs	r3, #2
 800408c:	e200      	b.n	8004490 <HAL_I2C_Mem_Read+0x458>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d007      	beq.n	80040b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2222      	movs	r2, #34	@ 0x22
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2240      	movs	r2, #64	@ 0x40
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004260 <HAL_I2C_Mem_Read+0x228>)
 80040f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040f6:	88f8      	ldrh	r0, [r7, #6]
 80040f8:	893a      	ldrh	r2, [r7, #8]
 80040fa:	8979      	ldrh	r1, [r7, #10]
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	4603      	mov	r3, r0
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fa5e 	bl	80045c8 <I2C_RequestMemoryRead>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e1bc      	b.n	8004490 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	d113      	bne.n	8004146 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411e:	2300      	movs	r3, #0
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	623b      	str	r3, [r7, #32]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e190      	b.n	8004468 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	2b01      	cmp	r3, #1
 800414c:	d11b      	bne.n	8004186 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e170      	b.n	8004468 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418a:	2b02      	cmp	r3, #2
 800418c:	d11b      	bne.n	80041c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	e150      	b.n	8004468 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041dc:	e144      	b.n	8004468 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	f200 80f1 	bhi.w	80043ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d123      	bne.n	8004238 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fc79 	bl	8004aec <I2C_WaitOnRXNEFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e145      	b.n	8004490 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004236:	e117      	b.n	8004468 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	2b02      	cmp	r3, #2
 800423e:	d14e      	bne.n	80042de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004246:	2200      	movs	r2, #0
 8004248:	4906      	ldr	r1, [pc, #24]	@ (8004264 <HAL_I2C_Mem_Read+0x22c>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 faa4 	bl	8004798 <I2C_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e11a      	b.n	8004490 <HAL_I2C_Mem_Read+0x458>
 800425a:	bf00      	nop
 800425c:	00100002 	.word	0x00100002
 8004260:	ffff0000 	.word	0xffff0000
 8004264:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042dc:	e0c4      	b.n	8004468 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e4:	2200      	movs	r2, #0
 80042e6:	496c      	ldr	r1, [pc, #432]	@ (8004498 <HAL_I2C_Mem_Read+0x460>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fa55 	bl	8004798 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0cb      	b.n	8004490 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004340:	2200      	movs	r2, #0
 8004342:	4955      	ldr	r1, [pc, #340]	@ (8004498 <HAL_I2C_Mem_Read+0x460>)
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fa27 	bl	8004798 <I2C_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e09d      	b.n	8004490 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043c8:	e04e      	b.n	8004468 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fb8c 	bl	8004aec <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e058      	b.n	8004490 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b04      	cmp	r3, #4
 800441c:	d124      	bne.n	8004468 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	2b03      	cmp	r3, #3
 8004424:	d107      	bne.n	8004436 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004434:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	f47f aeb6 	bne.w	80041de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	e000      	b.n	8004490 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800448e:	2302      	movs	r3, #2
  }
}
 8004490:	4618      	mov	r0, r3
 8004492:	3728      	adds	r7, #40	@ 0x28
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	00010004 	.word	0x00010004

0800449c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	4608      	mov	r0, r1
 80044a6:	4611      	mov	r1, r2
 80044a8:	461a      	mov	r2, r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	817b      	strh	r3, [r7, #10]
 80044ae:	460b      	mov	r3, r1
 80044b0:	813b      	strh	r3, [r7, #8]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f960 	bl	8004798 <I2C_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ec:	d103      	bne.n	80044f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e05f      	b.n	80045ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044fa:	897b      	ldrh	r3, [r7, #10]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004508:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	6a3a      	ldr	r2, [r7, #32]
 800450e:	492d      	ldr	r1, [pc, #180]	@ (80045c4 <I2C_RequestMemoryWrite+0x128>)
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f9bb 	bl	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e04c      	b.n	80045ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004538:	6a39      	ldr	r1, [r7, #32]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fa46 	bl	80049cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00d      	beq.n	8004562 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	2b04      	cmp	r3, #4
 800454c:	d107      	bne.n	800455e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800455c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e02b      	b.n	80045ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004568:	893b      	ldrh	r3, [r7, #8]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	611a      	str	r2, [r3, #16]
 8004572:	e021      	b.n	80045b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004574:	893b      	ldrh	r3, [r7, #8]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	b29b      	uxth	r3, r3
 800457a:	b2da      	uxtb	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	6a39      	ldr	r1, [r7, #32]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fa20 	bl	80049cc <I2C_WaitOnTXEFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00d      	beq.n	80045ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	2b04      	cmp	r3, #4
 8004598:	d107      	bne.n	80045aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e005      	b.n	80045ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ae:	893b      	ldrh	r3, [r7, #8]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	00010002 	.word	0x00010002

080045c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	4608      	mov	r0, r1
 80045d2:	4611      	mov	r1, r2
 80045d4:	461a      	mov	r2, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	817b      	strh	r3, [r7, #10]
 80045da:	460b      	mov	r3, r1
 80045dc:	813b      	strh	r3, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004600:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	2200      	movs	r2, #0
 800460a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f8c2 	bl	8004798 <I2C_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004628:	d103      	bne.n	8004632 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004630:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0aa      	b.n	800478c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004636:	897b      	ldrh	r3, [r7, #10]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004644:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	6a3a      	ldr	r2, [r7, #32]
 800464a:	4952      	ldr	r1, [pc, #328]	@ (8004794 <I2C_RequestMemoryRead+0x1cc>)
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f91d 	bl	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e097      	b.n	800478c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004674:	6a39      	ldr	r1, [r7, #32]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f9a8 	bl	80049cc <I2C_WaitOnTXEFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00d      	beq.n	800469e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	2b04      	cmp	r3, #4
 8004688:	d107      	bne.n	800469a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004698:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e076      	b.n	800478c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d105      	bne.n	80046b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046a4:	893b      	ldrh	r3, [r7, #8]
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	611a      	str	r2, [r3, #16]
 80046ae:	e021      	b.n	80046f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046b0:	893b      	ldrh	r3, [r7, #8]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c0:	6a39      	ldr	r1, [r7, #32]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f982 	bl	80049cc <I2C_WaitOnTXEFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00d      	beq.n	80046ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d107      	bne.n	80046e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e050      	b.n	800478c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ea:	893b      	ldrh	r3, [r7, #8]
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f6:	6a39      	ldr	r1, [r7, #32]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f967 	bl	80049cc <I2C_WaitOnTXEFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00d      	beq.n	8004720 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	2b04      	cmp	r3, #4
 800470a:	d107      	bne.n	800471c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800471a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e035      	b.n	800478c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800472e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	2200      	movs	r2, #0
 8004738:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f82b 	bl	8004798 <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004756:	d103      	bne.n	8004760 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800475e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e013      	b.n	800478c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004764:	897b      	ldrh	r3, [r7, #10]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	b2da      	uxtb	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	6a3a      	ldr	r2, [r7, #32]
 8004778:	4906      	ldr	r1, [pc, #24]	@ (8004794 <I2C_RequestMemoryRead+0x1cc>)
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f886 	bl	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	00010002 	.word	0x00010002

08004798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047a8:	e048      	b.n	800483c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047b0:	d044      	beq.n	800483c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7fe fb2f 	bl	8002e14 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d302      	bcc.n	80047c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d139      	bne.n	800483c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	0c1b      	lsrs	r3, r3, #16
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d10d      	bne.n	80047ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	43da      	mvns	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4013      	ands	r3, r2
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	e00c      	b.n	8004808 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	43da      	mvns	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4013      	ands	r3, r2
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	429a      	cmp	r2, r3
 800480c:	d116      	bne.n	800483c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e023      	b.n	8004884 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	0c1b      	lsrs	r3, r3, #16
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d10d      	bne.n	8004862 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	43da      	mvns	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4013      	ands	r3, r2
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	e00c      	b.n	800487c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	43da      	mvns	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4013      	ands	r3, r2
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	429a      	cmp	r2, r3
 8004880:	d093      	beq.n	80047aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800489a:	e071      	b.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048aa:	d123      	bne.n	80048f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	f043 0204 	orr.w	r2, r3, #4
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e067      	b.n	80049c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048fa:	d041      	beq.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fc:	f7fe fa8a 	bl	8002e14 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	429a      	cmp	r2, r3
 800490a:	d302      	bcc.n	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d136      	bne.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d10c      	bne.n	8004936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	43da      	mvns	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf14      	ite	ne
 800492e:	2301      	movne	r3, #1
 8004930:	2300      	moveq	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	e00b      	b.n	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	43da      	mvns	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4013      	ands	r3, r2
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e021      	b.n	80049c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	0c1b      	lsrs	r3, r3, #16
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b01      	cmp	r3, #1
 8004988:	d10c      	bne.n	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	43da      	mvns	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4013      	ands	r3, r2
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e00b      	b.n	80049bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	43da      	mvns	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f47f af6d 	bne.w	800489c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d8:	e034      	b.n	8004a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f8e3 	bl	8004ba6 <I2C_IsAcknowledgeFailed>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e034      	b.n	8004a54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049f0:	d028      	beq.n	8004a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f2:	f7fe fa0f 	bl	8002e14 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d302      	bcc.n	8004a08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d11d      	bne.n	8004a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a12:	2b80      	cmp	r3, #128	@ 0x80
 8004a14:	d016      	beq.n	8004a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e007      	b.n	8004a54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4e:	2b80      	cmp	r3, #128	@ 0x80
 8004a50:	d1c3      	bne.n	80049da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a68:	e034      	b.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f89b 	bl	8004ba6 <I2C_IsAcknowledgeFailed>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e034      	b.n	8004ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a80:	d028      	beq.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a82:	f7fe f9c7 	bl	8002e14 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d302      	bcc.n	8004a98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11d      	bne.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d016      	beq.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e007      	b.n	8004ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d1c3      	bne.n	8004a6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004af8:	e049      	b.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d119      	bne.n	8004b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0210 	mvn.w	r2, #16
 8004b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e030      	b.n	8004b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3c:	f7fe f96a 	bl	8002e14 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d302      	bcc.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d11d      	bne.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5c:	2b40      	cmp	r3, #64	@ 0x40
 8004b5e:	d016      	beq.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e007      	b.n	8004b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b98:	2b40      	cmp	r3, #64	@ 0x40
 8004b9a:	d1ae      	bne.n	8004afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bbc:	d11b      	bne.n	8004bf6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bc6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f043 0204 	orr.w	r2, r3, #4
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e267      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d075      	beq.n	8004d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c22:	4b88      	ldr	r3, [pc, #544]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d00c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2e:	4b85      	ldr	r3, [pc, #532]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d112      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3a:	4b82      	ldr	r3, [pc, #520]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	4b7e      	ldr	r3, [pc, #504]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d05b      	beq.n	8004d0c <HAL_RCC_OscConfig+0x108>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d157      	bne.n	8004d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e242      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c68:	d106      	bne.n	8004c78 <HAL_RCC_OscConfig+0x74>
 8004c6a:	4b76      	ldr	r3, [pc, #472]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a75      	ldr	r2, [pc, #468]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e01d      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x98>
 8004c82:	4b70      	ldr	r3, [pc, #448]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6f      	ldr	r2, [pc, #444]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a6c      	ldr	r2, [pc, #432]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	4b69      	ldr	r3, [pc, #420]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a68      	ldr	r2, [pc, #416]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a65      	ldr	r2, [pc, #404]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d013      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fe f8aa 	bl	8002e14 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fe f8a6 	bl	8002e14 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	@ 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e207      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xc0>
 8004ce2:	e014      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe f896 	bl	8002e14 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fe f892 	bl	8002e14 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	@ 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e1f3      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfe:	4b51      	ldr	r3, [pc, #324]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0xe8>
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d063      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b47      	ldr	r3, [pc, #284]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d11c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d32:	4b44      	ldr	r3, [pc, #272]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	4b41      	ldr	r3, [pc, #260]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d001      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e1c7      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4b3b      	ldr	r3, [pc, #236]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4937      	ldr	r1, [pc, #220]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6a:	e03a      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d74:	4b34      	ldr	r3, [pc, #208]	@ (8004e48 <HAL_RCC_OscConfig+0x244>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fe f84b 	bl	8002e14 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d82:	f7fe f847 	bl	8002e14 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e1a8      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d94:	4b2b      	ldr	r3, [pc, #172]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4925      	ldr	r1, [pc, #148]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db6:	4b24      	ldr	r3, [pc, #144]	@ (8004e48 <HAL_RCC_OscConfig+0x244>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fe f82a 	bl	8002e14 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc4:	f7fe f826 	bl	8002e14 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e187      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d036      	beq.n	8004e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df6:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <HAL_RCC_OscConfig+0x248>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fe f80a 	bl	8002e14 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fe f806 	bl	8002e14 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e167      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x200>
 8004e22:	e01b      	b.n	8004e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e24:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <HAL_RCC_OscConfig+0x248>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2a:	f7fd fff3 	bl	8002e14 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e30:	e00e      	b.n	8004e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e32:	f7fd ffef 	bl	8002e14 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d907      	bls.n	8004e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e150      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
 8004e44:	40023800 	.word	0x40023800
 8004e48:	42470000 	.word	0x42470000
 8004e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e50:	4b88      	ldr	r3, [pc, #544]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ea      	bne.n	8004e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8097 	beq.w	8004f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6e:	4b81      	ldr	r3, [pc, #516]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10f      	bne.n	8004e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	4a7c      	ldr	r2, [pc, #496]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9a:	4b77      	ldr	r3, [pc, #476]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d118      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea6:	4b74      	ldr	r3, [pc, #464]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a73      	ldr	r2, [pc, #460]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb2:	f7fd ffaf 	bl	8002e14 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eba:	f7fd ffab 	bl	8002e14 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e10c      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x2ea>
 8004ee0:	4b64      	ldr	r3, [pc, #400]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee4:	4a63      	ldr	r2, [pc, #396]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eec:	e01c      	b.n	8004f28 <HAL_RCC_OscConfig+0x324>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x30c>
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efa:	4a5e      	ldr	r2, [pc, #376]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f02:	4b5c      	ldr	r3, [pc, #368]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f06:	4a5b      	ldr	r2, [pc, #364]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f0e:	e00b      	b.n	8004f28 <HAL_RCC_OscConfig+0x324>
 8004f10:	4b58      	ldr	r3, [pc, #352]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f14:	4a57      	ldr	r2, [pc, #348]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f1c:	4b55      	ldr	r3, [pc, #340]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f20:	4a54      	ldr	r2, [pc, #336]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f22:	f023 0304 	bic.w	r3, r3, #4
 8004f26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fd ff70 	bl	8002e14 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fd ff6c 	bl	8002e14 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e0cb      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4e:	4b49      	ldr	r3, [pc, #292]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ee      	beq.n	8004f38 <HAL_RCC_OscConfig+0x334>
 8004f5a:	e014      	b.n	8004f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5c:	f7fd ff5a 	bl	8002e14 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f62:	e00a      	b.n	8004f7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fd ff56 	bl	8002e14 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0b5      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ee      	bne.n	8004f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8c:	4b39      	ldr	r3, [pc, #228]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f90:	4a38      	ldr	r2, [pc, #224]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a1 	beq.w	80050e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa2:	4b34      	ldr	r3, [pc, #208]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d05c      	beq.n	8005068 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d141      	bne.n	800503a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb6:	4b31      	ldr	r3, [pc, #196]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbc:	f7fd ff2a 	bl	8002e14 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fd ff26 	bl	8002e14 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e087      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	4b27      	ldr	r3, [pc, #156]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	019b      	lsls	r3, r3, #6
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	491b      	ldr	r1, [pc, #108]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8005008:	4313      	orrs	r3, r2
 800500a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800500c:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fd feff 	bl	8002e14 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501a:	f7fd fefb 	bl	8002e14 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e05c      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800502c:	4b11      	ldr	r3, [pc, #68]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x416>
 8005038:	e054      	b.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503a:	4b10      	ldr	r3, [pc, #64]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fd fee8 	bl	8002e14 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005048:	f7fd fee4 	bl	8002e14 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e045      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x444>
 8005066:	e03d      	b.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d107      	bne.n	8005080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e038      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
 8005074:	40023800 	.word	0x40023800
 8005078:	40007000 	.word	0x40007000
 800507c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005080:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <HAL_RCC_OscConfig+0x4ec>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d028      	beq.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d121      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d11a      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d111      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	3b01      	subs	r3, #1
 80050ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800

080050f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0cc      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005108:	4b68      	ldr	r3, [pc, #416]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d90c      	bls.n	8005130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b65      	ldr	r3, [pc, #404]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b63      	ldr	r3, [pc, #396]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0b8      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005148:	4b59      	ldr	r3, [pc, #356]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a58      	ldr	r2, [pc, #352]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005160:	4b53      	ldr	r3, [pc, #332]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a52      	ldr	r2, [pc, #328]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800516a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516c:	4b50      	ldr	r3, [pc, #320]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	494d      	ldr	r1, [pc, #308]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d044      	beq.n	8005214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005192:	4b47      	ldr	r3, [pc, #284]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d119      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e07f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b2:	4b3f      	ldr	r3, [pc, #252]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e06f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c2:	4b3b      	ldr	r3, [pc, #236]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e067      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d2:	4b37      	ldr	r3, [pc, #220]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f023 0203 	bic.w	r2, r3, #3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4934      	ldr	r1, [pc, #208]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e4:	f7fd fe16 	bl	8002e14 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ec:	f7fd fe12 	bl	8002e14 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e04f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	4b2b      	ldr	r3, [pc, #172]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 020c 	and.w	r2, r3, #12
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	429a      	cmp	r2, r3
 8005212:	d1eb      	bne.n	80051ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005214:	4b25      	ldr	r3, [pc, #148]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d20c      	bcs.n	800523c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b22      	ldr	r3, [pc, #136]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b20      	ldr	r3, [pc, #128]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e032      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b19      	ldr	r3, [pc, #100]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4916      	ldr	r1, [pc, #88]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005266:	4b12      	ldr	r3, [pc, #72]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	490e      	ldr	r1, [pc, #56]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800527a:	f000 f821 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	490a      	ldr	r1, [pc, #40]	@ (80052b4 <HAL_RCC_ClockConfig+0x1c0>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	4a09      	ldr	r2, [pc, #36]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005296:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fd fd76 	bl	8002d8c <HAL_InitTick>

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40023c00 	.word	0x40023c00
 80052b0:	40023800 	.word	0x40023800
 80052b4:	08019e7c 	.word	0x08019e7c
 80052b8:	20000004 	.word	0x20000004
 80052bc:	20000008 	.word	0x20000008

080052c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c4:	b094      	sub	sp, #80	@ 0x50
 80052c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80052cc:	2300      	movs	r3, #0
 80052ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d0:	2300      	movs	r3, #0
 80052d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d8:	4b79      	ldr	r3, [pc, #484]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d00d      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x40>
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	f200 80e1 	bhi.w	80054ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0x34>
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d003      	beq.n	80052fa <HAL_RCC_GetSysClockFreq+0x3a>
 80052f2:	e0db      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052f4:	4b73      	ldr	r3, [pc, #460]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80052f6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80052f8:	e0db      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052fa:	4b73      	ldr	r3, [pc, #460]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80052fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052fe:	e0d8      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005300:	4b6f      	ldr	r3, [pc, #444]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005308:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800530a:	4b6d      	ldr	r3, [pc, #436]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d063      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005316:	4b6a      	ldr	r3, [pc, #424]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	099b      	lsrs	r3, r3, #6
 800531c:	2200      	movs	r2, #0
 800531e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005320:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005328:	633b      	str	r3, [r7, #48]	@ 0x30
 800532a:	2300      	movs	r3, #0
 800532c:	637b      	str	r3, [r7, #52]	@ 0x34
 800532e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005332:	4622      	mov	r2, r4
 8005334:	462b      	mov	r3, r5
 8005336:	f04f 0000 	mov.w	r0, #0
 800533a:	f04f 0100 	mov.w	r1, #0
 800533e:	0159      	lsls	r1, r3, #5
 8005340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005344:	0150      	lsls	r0, r2, #5
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4621      	mov	r1, r4
 800534c:	1a51      	subs	r1, r2, r1
 800534e:	6139      	str	r1, [r7, #16]
 8005350:	4629      	mov	r1, r5
 8005352:	eb63 0301 	sbc.w	r3, r3, r1
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005364:	4659      	mov	r1, fp
 8005366:	018b      	lsls	r3, r1, #6
 8005368:	4651      	mov	r1, sl
 800536a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800536e:	4651      	mov	r1, sl
 8005370:	018a      	lsls	r2, r1, #6
 8005372:	4651      	mov	r1, sl
 8005374:	ebb2 0801 	subs.w	r8, r2, r1
 8005378:	4659      	mov	r1, fp
 800537a:	eb63 0901 	sbc.w	r9, r3, r1
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800538a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800538e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005392:	4690      	mov	r8, r2
 8005394:	4699      	mov	r9, r3
 8005396:	4623      	mov	r3, r4
 8005398:	eb18 0303 	adds.w	r3, r8, r3
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	462b      	mov	r3, r5
 80053a0:	eb49 0303 	adc.w	r3, r9, r3
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053b2:	4629      	mov	r1, r5
 80053b4:	024b      	lsls	r3, r1, #9
 80053b6:	4621      	mov	r1, r4
 80053b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053bc:	4621      	mov	r1, r4
 80053be:	024a      	lsls	r2, r1, #9
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c6:	2200      	movs	r2, #0
 80053c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053d0:	f7fb fc5c 	bl	8000c8c <__aeabi_uldivmod>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4613      	mov	r3, r2
 80053da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053dc:	e058      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053de:	4b38      	ldr	r3, [pc, #224]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	099b      	lsrs	r3, r3, #6
 80053e4:	2200      	movs	r2, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	4611      	mov	r1, r2
 80053ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	2300      	movs	r3, #0
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	f04f 0000 	mov.w	r0, #0
 8005400:	f04f 0100 	mov.w	r1, #0
 8005404:	0159      	lsls	r1, r3, #5
 8005406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800540a:	0150      	lsls	r0, r2, #5
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4641      	mov	r1, r8
 8005412:	ebb2 0a01 	subs.w	sl, r2, r1
 8005416:	4649      	mov	r1, r9
 8005418:	eb63 0b01 	sbc.w	fp, r3, r1
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800542c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005430:	ebb2 040a 	subs.w	r4, r2, sl
 8005434:	eb63 050b 	sbc.w	r5, r3, fp
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	00eb      	lsls	r3, r5, #3
 8005442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005446:	00e2      	lsls	r2, r4, #3
 8005448:	4614      	mov	r4, r2
 800544a:	461d      	mov	r5, r3
 800544c:	4643      	mov	r3, r8
 800544e:	18e3      	adds	r3, r4, r3
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	464b      	mov	r3, r9
 8005454:	eb45 0303 	adc.w	r3, r5, r3
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005466:	4629      	mov	r1, r5
 8005468:	028b      	lsls	r3, r1, #10
 800546a:	4621      	mov	r1, r4
 800546c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005470:	4621      	mov	r1, r4
 8005472:	028a      	lsls	r2, r1, #10
 8005474:	4610      	mov	r0, r2
 8005476:	4619      	mov	r1, r3
 8005478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800547a:	2200      	movs	r2, #0
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	61fa      	str	r2, [r7, #28]
 8005480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005484:	f7fb fc02 	bl	8000c8c <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4613      	mov	r3, r2
 800548e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005490:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	3301      	adds	r3, #1
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80054a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054aa:	e002      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3750      	adds	r7, #80	@ 0x50
 80054b8:	46bd      	mov	sp, r7
 80054ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800
 80054c4:	00f42400 	.word	0x00f42400
 80054c8:	007a1200 	.word	0x007a1200

080054cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d0:	4b03      	ldr	r3, [pc, #12]	@ (80054e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054d2:	681b      	ldr	r3, [r3, #0]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000004 	.word	0x20000004

080054e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054e8:	f7ff fff0 	bl	80054cc <HAL_RCC_GetHCLKFreq>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	0a9b      	lsrs	r3, r3, #10
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	4903      	ldr	r1, [pc, #12]	@ (8005508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054fa:	5ccb      	ldrb	r3, [r1, r3]
 80054fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005500:	4618      	mov	r0, r3
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40023800 	.word	0x40023800
 8005508:	08019e8c 	.word	0x08019e8c

0800550c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005510:	f7ff ffdc 	bl	80054cc <HAL_RCC_GetHCLKFreq>
 8005514:	4602      	mov	r2, r0
 8005516:	4b05      	ldr	r3, [pc, #20]	@ (800552c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	0b5b      	lsrs	r3, r3, #13
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	4903      	ldr	r1, [pc, #12]	@ (8005530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005522:	5ccb      	ldrb	r3, [r1, r3]
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005528:	4618      	mov	r0, r3
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40023800 	.word	0x40023800
 8005530:	08019e8c 	.word	0x08019e8c

08005534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e041      	b.n	80055ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fd f8bc 	bl	80026d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	4610      	mov	r0, r2
 8005574:	f000 fac0 	bl	8005af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e041      	b.n	8005668 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d106      	bne.n	80055fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f839 	bl	8005670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2202      	movs	r2, #2
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3304      	adds	r3, #4
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f000 fa71 	bl	8005af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d109      	bne.n	80056a8 <HAL_TIM_PWM_Start+0x24>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	e022      	b.n	80056ee <HAL_TIM_PWM_Start+0x6a>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d109      	bne.n	80056c2 <HAL_TIM_PWM_Start+0x3e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	bf14      	ite	ne
 80056ba:	2301      	movne	r3, #1
 80056bc:	2300      	moveq	r3, #0
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	e015      	b.n	80056ee <HAL_TIM_PWM_Start+0x6a>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d109      	bne.n	80056dc <HAL_TIM_PWM_Start+0x58>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e008      	b.n	80056ee <HAL_TIM_PWM_Start+0x6a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	bf14      	ite	ne
 80056e8:	2301      	movne	r3, #1
 80056ea:	2300      	moveq	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e068      	b.n	80057c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_PWM_Start+0x82>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005704:	e013      	b.n	800572e <HAL_TIM_PWM_Start+0xaa>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b04      	cmp	r3, #4
 800570a:	d104      	bne.n	8005716 <HAL_TIM_PWM_Start+0x92>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005714:	e00b      	b.n	800572e <HAL_TIM_PWM_Start+0xaa>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b08      	cmp	r3, #8
 800571a:	d104      	bne.n	8005726 <HAL_TIM_PWM_Start+0xa2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005724:	e003      	b.n	800572e <HAL_TIM_PWM_Start+0xaa>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2201      	movs	r2, #1
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fc90 	bl	800605c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a23      	ldr	r2, [pc, #140]	@ (80057d0 <HAL_TIM_PWM_Start+0x14c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d107      	bne.n	8005756 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1d      	ldr	r2, [pc, #116]	@ (80057d0 <HAL_TIM_PWM_Start+0x14c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d018      	beq.n	8005792 <HAL_TIM_PWM_Start+0x10e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005768:	d013      	beq.n	8005792 <HAL_TIM_PWM_Start+0x10e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a19      	ldr	r2, [pc, #100]	@ (80057d4 <HAL_TIM_PWM_Start+0x150>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <HAL_TIM_PWM_Start+0x10e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a17      	ldr	r2, [pc, #92]	@ (80057d8 <HAL_TIM_PWM_Start+0x154>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_TIM_PWM_Start+0x10e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a16      	ldr	r2, [pc, #88]	@ (80057dc <HAL_TIM_PWM_Start+0x158>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_TIM_PWM_Start+0x10e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a14      	ldr	r2, [pc, #80]	@ (80057e0 <HAL_TIM_PWM_Start+0x15c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d111      	bne.n	80057b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b06      	cmp	r3, #6
 80057a2:	d010      	beq.n	80057c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b4:	e007      	b.n	80057c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0201 	orr.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40010000 	.word	0x40010000
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40014000 	.word	0x40014000

080057e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0ae      	b.n	8005960 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b0c      	cmp	r3, #12
 800580e:	f200 809f 	bhi.w	8005950 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005812:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	0800584d 	.word	0x0800584d
 800581c:	08005951 	.word	0x08005951
 8005820:	08005951 	.word	0x08005951
 8005824:	08005951 	.word	0x08005951
 8005828:	0800588d 	.word	0x0800588d
 800582c:	08005951 	.word	0x08005951
 8005830:	08005951 	.word	0x08005951
 8005834:	08005951 	.word	0x08005951
 8005838:	080058cf 	.word	0x080058cf
 800583c:	08005951 	.word	0x08005951
 8005840:	08005951 	.word	0x08005951
 8005844:	08005951 	.word	0x08005951
 8005848:	0800590f 	.word	0x0800590f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f9dc 	bl	8005c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0208 	orr.w	r2, r2, #8
 8005866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0204 	bic.w	r2, r2, #4
 8005876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6999      	ldr	r1, [r3, #24]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	619a      	str	r2, [r3, #24]
      break;
 800588a:	e064      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fa22 	bl	8005cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6999      	ldr	r1, [r3, #24]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	021a      	lsls	r2, r3, #8
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	619a      	str	r2, [r3, #24]
      break;
 80058cc:	e043      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fa6d 	bl	8005db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0208 	orr.w	r2, r2, #8
 80058e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0204 	bic.w	r2, r2, #4
 80058f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69d9      	ldr	r1, [r3, #28]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	61da      	str	r2, [r3, #28]
      break;
 800590c:	e023      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fab7 	bl	8005e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69d9      	ldr	r1, [r3, #28]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	021a      	lsls	r2, r3, #8
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	61da      	str	r2, [r3, #28]
      break;
 800594e:	e002      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	75fb      	strb	r3, [r7, #23]
      break;
 8005954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800595e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIM_ConfigClockSource+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e0b4      	b.n	8005aee <HAL_TIM_ConfigClockSource+0x186>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059bc:	d03e      	beq.n	8005a3c <HAL_TIM_ConfigClockSource+0xd4>
 80059be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059c2:	f200 8087 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ca:	f000 8086 	beq.w	8005ada <HAL_TIM_ConfigClockSource+0x172>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d87f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b70      	cmp	r3, #112	@ 0x70
 80059d6:	d01a      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0xa6>
 80059d8:	2b70      	cmp	r3, #112	@ 0x70
 80059da:	d87b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b60      	cmp	r3, #96	@ 0x60
 80059de:	d050      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x11a>
 80059e0:	2b60      	cmp	r3, #96	@ 0x60
 80059e2:	d877      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b50      	cmp	r3, #80	@ 0x50
 80059e6:	d03c      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0xfa>
 80059e8:	2b50      	cmp	r3, #80	@ 0x50
 80059ea:	d873      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	d058      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d86f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b30      	cmp	r3, #48	@ 0x30
 80059f6:	d064      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80059f8:	2b30      	cmp	r3, #48	@ 0x30
 80059fa:	d86b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d060      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d867      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d05c      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d05a      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a0c:	e062      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a1e:	f000 fafd 	bl	800601c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	609a      	str	r2, [r3, #8]
      break;
 8005a3a:	e04f      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a4c:	f000 fae6 	bl	800601c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a5e:	609a      	str	r2, [r3, #8]
      break;
 8005a60:	e03c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f000 fa5a 	bl	8005f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2150      	movs	r1, #80	@ 0x50
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fab3 	bl	8005fe6 <TIM_ITRx_SetConfig>
      break;
 8005a80:	e02c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f000 fa79 	bl	8005f86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2160      	movs	r1, #96	@ 0x60
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 faa3 	bl	8005fe6 <TIM_ITRx_SetConfig>
      break;
 8005aa0:	e01c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f000 fa3a 	bl	8005f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2140      	movs	r1, #64	@ 0x40
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fa93 	bl	8005fe6 <TIM_ITRx_SetConfig>
      break;
 8005ac0:	e00c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f000 fa8a 	bl	8005fe6 <TIM_ITRx_SetConfig>
      break;
 8005ad2:	e003      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad8:	e000      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a3a      	ldr	r2, [pc, #232]	@ (8005bf4 <TIM_Base_SetConfig+0xfc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00f      	beq.n	8005b30 <TIM_Base_SetConfig+0x38>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b16:	d00b      	beq.n	8005b30 <TIM_Base_SetConfig+0x38>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a37      	ldr	r2, [pc, #220]	@ (8005bf8 <TIM_Base_SetConfig+0x100>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_Base_SetConfig+0x38>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a36      	ldr	r2, [pc, #216]	@ (8005bfc <TIM_Base_SetConfig+0x104>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_Base_SetConfig+0x38>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a35      	ldr	r2, [pc, #212]	@ (8005c00 <TIM_Base_SetConfig+0x108>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d108      	bne.n	8005b42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2b      	ldr	r2, [pc, #172]	@ (8005bf4 <TIM_Base_SetConfig+0xfc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01b      	beq.n	8005b82 <TIM_Base_SetConfig+0x8a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b50:	d017      	beq.n	8005b82 <TIM_Base_SetConfig+0x8a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a28      	ldr	r2, [pc, #160]	@ (8005bf8 <TIM_Base_SetConfig+0x100>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <TIM_Base_SetConfig+0x8a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a27      	ldr	r2, [pc, #156]	@ (8005bfc <TIM_Base_SetConfig+0x104>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00f      	beq.n	8005b82 <TIM_Base_SetConfig+0x8a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a26      	ldr	r2, [pc, #152]	@ (8005c00 <TIM_Base_SetConfig+0x108>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00b      	beq.n	8005b82 <TIM_Base_SetConfig+0x8a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a25      	ldr	r2, [pc, #148]	@ (8005c04 <TIM_Base_SetConfig+0x10c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <TIM_Base_SetConfig+0x8a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a24      	ldr	r2, [pc, #144]	@ (8005c08 <TIM_Base_SetConfig+0x110>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_Base_SetConfig+0x8a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a23      	ldr	r2, [pc, #140]	@ (8005c0c <TIM_Base_SetConfig+0x114>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d108      	bne.n	8005b94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a0e      	ldr	r2, [pc, #56]	@ (8005bf4 <TIM_Base_SetConfig+0xfc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d103      	bne.n	8005bc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d105      	bne.n	8005be6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f023 0201 	bic.w	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	611a      	str	r2, [r3, #16]
  }
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	40014800 	.word	0x40014800

08005c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	f023 0201 	bic.w	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f023 0302 	bic.w	r3, r3, #2
 8005c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd8 <TIM_OC1_SetConfig+0xc8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10c      	bne.n	8005c86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 0308 	bic.w	r3, r3, #8
 8005c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 0304 	bic.w	r3, r3, #4
 8005c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a13      	ldr	r2, [pc, #76]	@ (8005cd8 <TIM_OC1_SetConfig+0xc8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d111      	bne.n	8005cb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	621a      	str	r2, [r3, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40010000 	.word	0x40010000

08005cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	f023 0210 	bic.w	r2, r3, #16
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0320 	bic.w	r3, r3, #32
 8005d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a1e      	ldr	r2, [pc, #120]	@ (8005db0 <TIM_OC2_SetConfig+0xd4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d10d      	bne.n	8005d58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a15      	ldr	r2, [pc, #84]	@ (8005db0 <TIM_OC2_SetConfig+0xd4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d113      	bne.n	8005d88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40010000 	.word	0x40010000

08005db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e84 <TIM_OC3_SetConfig+0xd0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10d      	bne.n	8005e2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a14      	ldr	r2, [pc, #80]	@ (8005e84 <TIM_OC3_SetConfig+0xd0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d113      	bne.n	8005e5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	40010000 	.word	0x40010000

08005e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	031b      	lsls	r3, r3, #12
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a10      	ldr	r2, [pc, #64]	@ (8005f24 <TIM_OC4_SetConfig+0x9c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d109      	bne.n	8005efc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	019b      	lsls	r3, r3, #6
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40010000 	.word	0x40010000

08005f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0201 	bic.w	r2, r3, #1
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 030a 	bic.w	r3, r3, #10
 8005f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b087      	sub	sp, #28
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f023 0210 	bic.w	r2, r3, #16
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fc2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	f043 0307 	orr.w	r3, r3, #7
 8006008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	609a      	str	r2, [r3, #8]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	021a      	lsls	r2, r3, #8
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	431a      	orrs	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4313      	orrs	r3, r2
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	609a      	str	r2, [r3, #8]
}
 8006050:	bf00      	nop
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	2201      	movs	r2, #1
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1a      	ldr	r2, [r3, #32]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	43db      	mvns	r3, r3
 800607e:	401a      	ands	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a1a      	ldr	r2, [r3, #32]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	fa01 f303 	lsl.w	r3, r1, r3
 8006094:	431a      	orrs	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
	...

080060a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060bc:	2302      	movs	r3, #2
 80060be:	e050      	b.n	8006162 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d018      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800610c:	d013      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a18      	ldr	r2, [pc, #96]	@ (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00e      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a16      	ldr	r2, [pc, #88]	@ (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a15      	ldr	r2, [pc, #84]	@ (800617c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d004      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a13      	ldr	r2, [pc, #76]	@ (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d10c      	bne.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800613c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	4313      	orrs	r3, r2
 8006146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40010000 	.word	0x40010000
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40014000 	.word	0x40014000

08006184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e042      	b.n	800621c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc fb10 	bl	80027d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2224      	movs	r2, #36	@ 0x24
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 ffc9 	bl	8007160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08c      	sub	sp, #48	@ 0x30
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b20      	cmp	r3, #32
 800623c:	d156      	bne.n	80062ec <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_UART_Transmit_DMA+0x26>
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e04f      	b.n	80062ee <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	88fa      	ldrh	r2, [r7, #6]
 800625e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2221      	movs	r2, #33	@ 0x21
 800626a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006272:	4a21      	ldr	r2, [pc, #132]	@ (80062f8 <HAL_UART_Transmit_DMA+0xd4>)
 8006274:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627a:	4a20      	ldr	r2, [pc, #128]	@ (80062fc <HAL_UART_Transmit_DMA+0xd8>)
 800627c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006282:	4a1f      	ldr	r2, [pc, #124]	@ (8006300 <HAL_UART_Transmit_DMA+0xdc>)
 8006284:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628a:	2200      	movs	r2, #0
 800628c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629a:	6819      	ldr	r1, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3304      	adds	r3, #4
 80062a2:	461a      	mov	r2, r3
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	f7fc ff81 	bl	80031ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3314      	adds	r3, #20
 80062ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	617b      	str	r3, [r7, #20]
   return(result);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3314      	adds	r3, #20
 80062d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80062d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6a39      	ldr	r1, [r7, #32]
 80062da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e5      	bne.n	80062b4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80062ec:	2302      	movs	r3, #2
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3730      	adds	r7, #48	@ 0x30
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	080069ed 	.word	0x080069ed
 80062fc:	08006a87 	.word	0x08006a87
 8006300:	08006c0b 	.word	0x08006c0b

08006304 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b20      	cmp	r3, #32
 800631c:	d112      	bne.n	8006344 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <HAL_UART_Receive_DMA+0x26>
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e00b      	b.n	8006346 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	461a      	mov	r2, r3
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 fcb0 	bl	8006ca0 <UART_Start_Receive_DMA>
 8006340:	4603      	mov	r3, r0
 8006342:	e000      	b.n	8006346 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006344:	2302      	movs	r3, #2
  }
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b090      	sub	sp, #64	@ 0x40
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006356:	2300      	movs	r3, #0
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006364:	2b80      	cmp	r3, #128	@ 0x80
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b21      	cmp	r3, #33	@ 0x21
 800637a:	d128      	bne.n	80063ce <HAL_UART_DMAStop+0x80>
 800637c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d025      	beq.n	80063ce <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3314      	adds	r3, #20
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	623b      	str	r3, [r7, #32]
   return(result);
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006398:	63bb      	str	r3, [r7, #56]	@ 0x38
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3314      	adds	r3, #20
 80063a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80063a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e5      	bne.n	8006382 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fc ff4a 	bl	800325c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fd03 	bl	8006dd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d8:	2b40      	cmp	r3, #64	@ 0x40
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b22      	cmp	r3, #34	@ 0x22
 80063ee:	d128      	bne.n	8006442 <HAL_UART_DMAStop+0xf4>
 80063f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d025      	beq.n	8006442 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3314      	adds	r3, #20
 80063fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	60fb      	str	r3, [r7, #12]
   return(result);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800640c:	637b      	str	r3, [r7, #52]	@ 0x34
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006416:	61fa      	str	r2, [r7, #28]
 8006418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	69b9      	ldr	r1, [r7, #24]
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	617b      	str	r3, [r7, #20]
   return(result);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d004      	beq.n	800643c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006436:	4618      	mov	r0, r3
 8006438:	f7fc ff10 	bl	800325c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fcf1 	bl	8006e24 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3740      	adds	r7, #64	@ 0x40
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b0ba      	sub	sp, #232	@ 0xe8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006472:	2300      	movs	r3, #0
 8006474:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006478:	2300      	movs	r3, #0
 800647a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800647e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800648a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <HAL_UART_IRQHandler+0x66>
 800649e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fd99 	bl	8006fe2 <UART_Receive_IT>
      return;
 80064b0:	e25b      	b.n	800696a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 80de 	beq.w	8006678 <HAL_UART_IRQHandler+0x22c>
 80064bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80d1 	beq.w	8006678 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00b      	beq.n	80064fa <HAL_UART_IRQHandler+0xae>
 80064e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f2:	f043 0201 	orr.w	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00b      	beq.n	800651e <HAL_UART_IRQHandler+0xd2>
 8006506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006516:	f043 0202 	orr.w	r2, r3, #2
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <HAL_UART_IRQHandler+0xf6>
 800652a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653a:	f043 0204 	orr.w	r2, r3, #4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d011      	beq.n	8006572 <HAL_UART_IRQHandler+0x126>
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d105      	bne.n	8006566 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800655a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656a:	f043 0208 	orr.w	r2, r3, #8
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 81f2 	beq.w	8006960 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_UART_IRQHandler+0x14e>
 8006588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fd24 	bl	8006fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a4:	2b40      	cmp	r3, #64	@ 0x40
 80065a6:	bf0c      	ite	eq
 80065a8:	2301      	moveq	r3, #1
 80065aa:	2300      	movne	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d103      	bne.n	80065c6 <HAL_UART_IRQHandler+0x17a>
 80065be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d04f      	beq.n	8006666 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fc2c 	bl	8006e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d6:	2b40      	cmp	r3, #64	@ 0x40
 80065d8:	d141      	bne.n	800665e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3314      	adds	r3, #20
 8006602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006606:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800660a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800661e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1d9      	bne.n	80065da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d013      	beq.n	8006656 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006632:	4a7e      	ldr	r2, [pc, #504]	@ (800682c <HAL_UART_IRQHandler+0x3e0>)
 8006634:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663a:	4618      	mov	r0, r3
 800663c:	f7fc fe7e 	bl	800333c <HAL_DMA_Abort_IT>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	e00e      	b.n	8006674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f9b2 	bl	80069c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665c:	e00a      	b.n	8006674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f9ae 	bl	80069c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	e006      	b.n	8006674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9aa 	bl	80069c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006672:	e175      	b.n	8006960 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	bf00      	nop
    return;
 8006676:	e173      	b.n	8006960 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667c:	2b01      	cmp	r3, #1
 800667e:	f040 814f 	bne.w	8006920 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006686:	f003 0310 	and.w	r3, r3, #16
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 8148 	beq.w	8006920 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8141 	beq.w	8006920 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800669e:	2300      	movs	r3, #0
 80066a0:	60bb      	str	r3, [r7, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066be:	2b40      	cmp	r3, #64	@ 0x40
 80066c0:	f040 80b6 	bne.w	8006830 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8145 	beq.w	8006964 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066e2:	429a      	cmp	r2, r3
 80066e4:	f080 813e 	bcs.w	8006964 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066fa:	f000 8088 	beq.w	800680e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006714:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800671c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800672a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800672e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006736:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1d9      	bne.n	80066fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3314      	adds	r3, #20
 8006750:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800675a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800675c:	f023 0301 	bic.w	r3, r3, #1
 8006760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3314      	adds	r3, #20
 800676a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800676e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006772:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006776:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e1      	bne.n	800674a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3314      	adds	r3, #20
 800678c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800679c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3314      	adds	r3, #20
 80067a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e3      	bne.n	8006786 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	330c      	adds	r3, #12
 80067d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067de:	f023 0310 	bic.w	r3, r3, #16
 80067e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80067f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80067f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e3      	bne.n	80067cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006808:	4618      	mov	r0, r3
 800680a:	f7fc fd27 	bl	800325c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800681c:	b29b      	uxth	r3, r3
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	b29b      	uxth	r3, r3
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f8d5 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800682a:	e09b      	b.n	8006964 <HAL_UART_IRQHandler+0x518>
 800682c:	08006eeb 	.word	0x08006eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006838:	b29b      	uxth	r3, r3
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 808e 	beq.w	8006968 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800684c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8089 	beq.w	8006968 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800686c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800687a:	647a      	str	r2, [r7, #68]	@ 0x44
 800687c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e3      	bne.n	8006856 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3314      	adds	r3, #20
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	623b      	str	r3, [r7, #32]
   return(result);
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	f023 0301 	bic.w	r3, r3, #1
 80068a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3314      	adds	r3, #20
 80068ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80068b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e3      	bne.n	800688e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	330c      	adds	r3, #12
 80068da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0310 	bic.w	r3, r3, #16
 80068ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80068f8:	61fa      	str	r2, [r7, #28]
 80068fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	69b9      	ldr	r1, [r7, #24]
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	617b      	str	r3, [r7, #20]
   return(result);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e3      	bne.n	80068d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f85b 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800691e:	e023      	b.n	8006968 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006928:	2b00      	cmp	r3, #0
 800692a:	d009      	beq.n	8006940 <HAL_UART_IRQHandler+0x4f4>
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 faea 	bl	8006f12 <UART_Transmit_IT>
    return;
 800693e:	e014      	b.n	800696a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00e      	beq.n	800696a <HAL_UART_IRQHandler+0x51e>
 800694c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fb2a 	bl	8006fb2 <UART_EndTransmit_IT>
    return;
 800695e:	e004      	b.n	800696a <HAL_UART_IRQHandler+0x51e>
    return;
 8006960:	bf00      	nop
 8006962:	e002      	b.n	800696a <HAL_UART_IRQHandler+0x51e>
      return;
 8006964:	bf00      	nop
 8006966:	e000      	b.n	800696a <HAL_UART_IRQHandler+0x51e>
      return;
 8006968:	bf00      	nop
  }
}
 800696a:	37e8      	adds	r7, #232	@ 0xe8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b090      	sub	sp, #64	@ 0x40
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d137      	bne.n	8006a78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3314      	adds	r3, #20
 8006a14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a62:	61fa      	str	r2, [r7, #28]
 8006a64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	69b9      	ldr	r1, [r7, #24]
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e5      	bne.n	8006a42 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a76:	e002      	b.n	8006a7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006a78:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006a7a:	f7ff ff79 	bl	8006970 <HAL_UART_TxCpltCallback>
}
 8006a7e:	bf00      	nop
 8006a80:	3740      	adds	r7, #64	@ 0x40
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff ff75 	bl	8006984 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b09c      	sub	sp, #112	@ 0x70
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d172      	bne.n	8006ba4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ad6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ada:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006ae4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ae6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006aea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e5      	bne.n	8006ac4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3314      	adds	r3, #20
 8006b16:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b18:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b1a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e5      	bne.n	8006af8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3314      	adds	r3, #20
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b42:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3314      	adds	r3, #20
 8006b4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e5      	bne.n	8006b2c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d119      	bne.n	8006ba4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0310 	bic.w	r3, r3, #16
 8006b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	330c      	adds	r3, #12
 8006b8e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b90:	61fa      	str	r2, [r7, #28]
 8006b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	69b9      	ldr	r1, [r7, #24]
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e5      	bne.n	8006b70 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d106      	bne.n	8006bc0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006bba:	f7ff ff0b 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bbe:	e002      	b.n	8006bc6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006bc0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006bc2:	f7ff fee9 	bl	8006998 <HAL_UART_RxCpltCallback>
}
 8006bc6:	bf00      	nop
 8006bc8:	3770      	adds	r7, #112	@ 0x70
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d108      	bne.n	8006bfc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff feed 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bfa:	e002      	b.n	8006c02 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff fed5 	bl	80069ac <HAL_UART_RxHalfCpltCallback>
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c26:	2b80      	cmp	r3, #128	@ 0x80
 8006c28:	bf0c      	ite	eq
 8006c2a:	2301      	moveq	r3, #1
 8006c2c:	2300      	movne	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b21      	cmp	r3, #33	@ 0x21
 8006c3c:	d108      	bne.n	8006c50 <UART_DMAError+0x46>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2200      	movs	r2, #0
 8006c48:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006c4a:	68b8      	ldr	r0, [r7, #8]
 8006c4c:	f000 f8c2 	bl	8006dd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c5a:	2b40      	cmp	r3, #64	@ 0x40
 8006c5c:	bf0c      	ite	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	2300      	movne	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b22      	cmp	r3, #34	@ 0x22
 8006c70:	d108      	bne.n	8006c84 <UART_DMAError+0x7a>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006c7e:	68b8      	ldr	r0, [r7, #8]
 8006c80:	f000 f8d0 	bl	8006e24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c88:	f043 0210 	orr.w	r2, r3, #16
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c90:	68b8      	ldr	r0, [r7, #8]
 8006c92:	f7ff fe95 	bl	80069c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b098      	sub	sp, #96	@ 0x60
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2222      	movs	r2, #34	@ 0x22
 8006cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ccc:	4a3e      	ldr	r2, [pc, #248]	@ (8006dc8 <UART_Start_Receive_DMA+0x128>)
 8006cce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd4:	4a3d      	ldr	r2, [pc, #244]	@ (8006dcc <UART_Start_Receive_DMA+0x12c>)
 8006cd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cdc:	4a3c      	ldr	r2, [pc, #240]	@ (8006dd0 <UART_Start_Receive_DMA+0x130>)
 8006cde:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ce8:	f107 0308 	add.w	r3, r7, #8
 8006cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	f7fc fa54 	bl	80031ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	613b      	str	r3, [r7, #16]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d019      	beq.n	8006d56 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d42:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3314      	adds	r3, #20
 8006d74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d76:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006d78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e5      	bne.n	8006d56 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3314      	adds	r3, #20
 8006d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	617b      	str	r3, [r7, #20]
   return(result);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006da0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3314      	adds	r3, #20
 8006da8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006daa:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6a39      	ldr	r1, [r7, #32]
 8006db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e5      	bne.n	8006d8a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3760      	adds	r7, #96	@ 0x60
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	08006aa3 	.word	0x08006aa3
 8006dcc:	08006bcf 	.word	0x08006bcf
 8006dd0:	08006c0b 	.word	0x08006c0b

08006dd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b089      	sub	sp, #36	@ 0x24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	330c      	adds	r3, #12
 8006de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	330c      	adds	r3, #12
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	61ba      	str	r2, [r7, #24]
 8006dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	6979      	ldr	r1, [r7, #20]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e5      	bne.n	8006ddc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006e18:	bf00      	nop
 8006e1a:	3724      	adds	r7, #36	@ 0x24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b095      	sub	sp, #84	@ 0x54
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e5      	bne.n	8006e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3314      	adds	r3, #20
 8006e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d119      	bne.n	8006ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ebc:	61ba      	str	r2, [r7, #24]
 8006ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6979      	ldr	r1, [r7, #20]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ede:	bf00      	nop
 8006ee0:	3754      	adds	r7, #84	@ 0x54
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff fd5b 	bl	80069c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b21      	cmp	r3, #33	@ 0x21
 8006f24:	d13e      	bne.n	8006fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f2e:	d114      	bne.n	8006f5a <UART_Transmit_IT+0x48>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d110      	bne.n	8006f5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	1c9a      	adds	r2, r3, #2
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	621a      	str	r2, [r3, #32]
 8006f58:	e008      	b.n	8006f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	1c59      	adds	r1, r3, #1
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6211      	str	r1, [r2, #32]
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10f      	bne.n	8006fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e000      	b.n	8006fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fa4:	2302      	movs	r3, #2
  }
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fccc 	bl	8006970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b08c      	sub	sp, #48	@ 0x30
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b22      	cmp	r3, #34	@ 0x22
 8006ff4:	f040 80ae 	bne.w	8007154 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007000:	d117      	bne.n	8007032 <UART_Receive_IT+0x50>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d113      	bne.n	8007032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007020:	b29a      	uxth	r2, r3
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702a:	1c9a      	adds	r2, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007030:	e026      	b.n	8007080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007036:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007038:	2300      	movs	r3, #0
 800703a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007044:	d007      	beq.n	8007056 <UART_Receive_IT+0x74>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <UART_Receive_IT+0x82>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e008      	b.n	8007076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4619      	mov	r1, r3
 800708e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007090:	2b00      	cmp	r3, #0
 8007092:	d15d      	bne.n	8007150 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0220 	bic.w	r2, r2, #32
 80070a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695a      	ldr	r2, [r3, #20]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d135      	bne.n	8007146 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	613b      	str	r3, [r7, #16]
   return(result);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f023 0310 	bic.w	r3, r3, #16
 80070f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	330c      	adds	r3, #12
 80070fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007100:	623a      	str	r2, [r7, #32]
 8007102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	69f9      	ldr	r1, [r7, #28]
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	61bb      	str	r3, [r7, #24]
   return(result);
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e5      	bne.n	80070e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b10      	cmp	r3, #16
 8007120:	d10a      	bne.n	8007138 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fc48 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
 8007144:	e002      	b.n	800714c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fc26 	bl	8006998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	e002      	b.n	8007156 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	3730      	adds	r7, #48	@ 0x30
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007164:	b0c0      	sub	sp, #256	@ 0x100
 8007166:	af00      	add	r7, sp, #0
 8007168:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717c:	68d9      	ldr	r1, [r3, #12]
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	ea40 0301 	orr.w	r3, r0, r1
 8007188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800718a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	431a      	orrs	r2, r3
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	431a      	orrs	r2, r3
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071b8:	f021 010c 	bic.w	r1, r1, #12
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071c6:	430b      	orrs	r3, r1
 80071c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071da:	6999      	ldr	r1, [r3, #24]
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	ea40 0301 	orr.w	r3, r0, r1
 80071e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b8f      	ldr	r3, [pc, #572]	@ (800742c <UART_SetConfig+0x2cc>)
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d005      	beq.n	8007200 <UART_SetConfig+0xa0>
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b8d      	ldr	r3, [pc, #564]	@ (8007430 <UART_SetConfig+0x2d0>)
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d104      	bne.n	800720a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007200:	f7fe f984 	bl	800550c <HAL_RCC_GetPCLK2Freq>
 8007204:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007208:	e003      	b.n	8007212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800720a:	f7fe f96b 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 800720e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800721c:	f040 810c 	bne.w	8007438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007224:	2200      	movs	r2, #0
 8007226:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800722a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800722e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007232:	4622      	mov	r2, r4
 8007234:	462b      	mov	r3, r5
 8007236:	1891      	adds	r1, r2, r2
 8007238:	65b9      	str	r1, [r7, #88]	@ 0x58
 800723a:	415b      	adcs	r3, r3
 800723c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800723e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007242:	4621      	mov	r1, r4
 8007244:	eb12 0801 	adds.w	r8, r2, r1
 8007248:	4629      	mov	r1, r5
 800724a:	eb43 0901 	adc.w	r9, r3, r1
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800725a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800725e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007262:	4690      	mov	r8, r2
 8007264:	4699      	mov	r9, r3
 8007266:	4623      	mov	r3, r4
 8007268:	eb18 0303 	adds.w	r3, r8, r3
 800726c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007270:	462b      	mov	r3, r5
 8007272:	eb49 0303 	adc.w	r3, r9, r3
 8007276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007286:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800728a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800728e:	460b      	mov	r3, r1
 8007290:	18db      	adds	r3, r3, r3
 8007292:	653b      	str	r3, [r7, #80]	@ 0x50
 8007294:	4613      	mov	r3, r2
 8007296:	eb42 0303 	adc.w	r3, r2, r3
 800729a:	657b      	str	r3, [r7, #84]	@ 0x54
 800729c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072a4:	f7f9 fcf2 	bl	8000c8c <__aeabi_uldivmod>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4b61      	ldr	r3, [pc, #388]	@ (8007434 <UART_SetConfig+0x2d4>)
 80072ae:	fba3 2302 	umull	r2, r3, r3, r2
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	011c      	lsls	r4, r3, #4
 80072b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072c8:	4642      	mov	r2, r8
 80072ca:	464b      	mov	r3, r9
 80072cc:	1891      	adds	r1, r2, r2
 80072ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072d0:	415b      	adcs	r3, r3
 80072d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072d8:	4641      	mov	r1, r8
 80072da:	eb12 0a01 	adds.w	sl, r2, r1
 80072de:	4649      	mov	r1, r9
 80072e0:	eb43 0b01 	adc.w	fp, r3, r1
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072f8:	4692      	mov	sl, r2
 80072fa:	469b      	mov	fp, r3
 80072fc:	4643      	mov	r3, r8
 80072fe:	eb1a 0303 	adds.w	r3, sl, r3
 8007302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007306:	464b      	mov	r3, r9
 8007308:	eb4b 0303 	adc.w	r3, fp, r3
 800730c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800731c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007324:	460b      	mov	r3, r1
 8007326:	18db      	adds	r3, r3, r3
 8007328:	643b      	str	r3, [r7, #64]	@ 0x40
 800732a:	4613      	mov	r3, r2
 800732c:	eb42 0303 	adc.w	r3, r2, r3
 8007330:	647b      	str	r3, [r7, #68]	@ 0x44
 8007332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800733a:	f7f9 fca7 	bl	8000c8c <__aeabi_uldivmod>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	4611      	mov	r1, r2
 8007344:	4b3b      	ldr	r3, [pc, #236]	@ (8007434 <UART_SetConfig+0x2d4>)
 8007346:	fba3 2301 	umull	r2, r3, r3, r1
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	2264      	movs	r2, #100	@ 0x64
 800734e:	fb02 f303 	mul.w	r3, r2, r3
 8007352:	1acb      	subs	r3, r1, r3
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800735a:	4b36      	ldr	r3, [pc, #216]	@ (8007434 <UART_SetConfig+0x2d4>)
 800735c:	fba3 2302 	umull	r2, r3, r3, r2
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007368:	441c      	add	r4, r3
 800736a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800736e:	2200      	movs	r2, #0
 8007370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007374:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	1891      	adds	r1, r2, r2
 8007382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007384:	415b      	adcs	r3, r3
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800738c:	4641      	mov	r1, r8
 800738e:	1851      	adds	r1, r2, r1
 8007390:	6339      	str	r1, [r7, #48]	@ 0x30
 8007392:	4649      	mov	r1, r9
 8007394:	414b      	adcs	r3, r1
 8007396:	637b      	str	r3, [r7, #52]	@ 0x34
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073a4:	4659      	mov	r1, fp
 80073a6:	00cb      	lsls	r3, r1, #3
 80073a8:	4651      	mov	r1, sl
 80073aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ae:	4651      	mov	r1, sl
 80073b0:	00ca      	lsls	r2, r1, #3
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	4642      	mov	r2, r8
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073c0:	464b      	mov	r3, r9
 80073c2:	460a      	mov	r2, r1
 80073c4:	eb42 0303 	adc.w	r3, r2, r3
 80073c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073e0:	460b      	mov	r3, r1
 80073e2:	18db      	adds	r3, r3, r3
 80073e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073e6:	4613      	mov	r3, r2
 80073e8:	eb42 0303 	adc.w	r3, r2, r3
 80073ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073f6:	f7f9 fc49 	bl	8000c8c <__aeabi_uldivmod>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007434 <UART_SetConfig+0x2d4>)
 8007400:	fba3 1302 	umull	r1, r3, r3, r2
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	2164      	movs	r1, #100	@ 0x64
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	3332      	adds	r3, #50	@ 0x32
 8007412:	4a08      	ldr	r2, [pc, #32]	@ (8007434 <UART_SetConfig+0x2d4>)
 8007414:	fba2 2303 	umull	r2, r3, r2, r3
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	f003 0207 	and.w	r2, r3, #7
 800741e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4422      	add	r2, r4
 8007426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007428:	e106      	b.n	8007638 <UART_SetConfig+0x4d8>
 800742a:	bf00      	nop
 800742c:	40011000 	.word	0x40011000
 8007430:	40011400 	.word	0x40011400
 8007434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800743c:	2200      	movs	r2, #0
 800743e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007442:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800744a:	4642      	mov	r2, r8
 800744c:	464b      	mov	r3, r9
 800744e:	1891      	adds	r1, r2, r2
 8007450:	6239      	str	r1, [r7, #32]
 8007452:	415b      	adcs	r3, r3
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
 8007456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800745a:	4641      	mov	r1, r8
 800745c:	1854      	adds	r4, r2, r1
 800745e:	4649      	mov	r1, r9
 8007460:	eb43 0501 	adc.w	r5, r3, r1
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	00eb      	lsls	r3, r5, #3
 800746e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007472:	00e2      	lsls	r2, r4, #3
 8007474:	4614      	mov	r4, r2
 8007476:	461d      	mov	r5, r3
 8007478:	4643      	mov	r3, r8
 800747a:	18e3      	adds	r3, r4, r3
 800747c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007480:	464b      	mov	r3, r9
 8007482:	eb45 0303 	adc.w	r3, r5, r3
 8007486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007496:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074a6:	4629      	mov	r1, r5
 80074a8:	008b      	lsls	r3, r1, #2
 80074aa:	4621      	mov	r1, r4
 80074ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074b0:	4621      	mov	r1, r4
 80074b2:	008a      	lsls	r2, r1, #2
 80074b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074b8:	f7f9 fbe8 	bl	8000c8c <__aeabi_uldivmod>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4b60      	ldr	r3, [pc, #384]	@ (8007644 <UART_SetConfig+0x4e4>)
 80074c2:	fba3 2302 	umull	r2, r3, r3, r2
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	011c      	lsls	r4, r3, #4
 80074ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	1891      	adds	r1, r2, r2
 80074e2:	61b9      	str	r1, [r7, #24]
 80074e4:	415b      	adcs	r3, r3
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ec:	4641      	mov	r1, r8
 80074ee:	1851      	adds	r1, r2, r1
 80074f0:	6139      	str	r1, [r7, #16]
 80074f2:	4649      	mov	r1, r9
 80074f4:	414b      	adcs	r3, r1
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007504:	4659      	mov	r1, fp
 8007506:	00cb      	lsls	r3, r1, #3
 8007508:	4651      	mov	r1, sl
 800750a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800750e:	4651      	mov	r1, sl
 8007510:	00ca      	lsls	r2, r1, #3
 8007512:	4610      	mov	r0, r2
 8007514:	4619      	mov	r1, r3
 8007516:	4603      	mov	r3, r0
 8007518:	4642      	mov	r2, r8
 800751a:	189b      	adds	r3, r3, r2
 800751c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007520:	464b      	mov	r3, r9
 8007522:	460a      	mov	r2, r1
 8007524:	eb42 0303 	adc.w	r3, r2, r3
 8007528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007536:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007544:	4649      	mov	r1, r9
 8007546:	008b      	lsls	r3, r1, #2
 8007548:	4641      	mov	r1, r8
 800754a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800754e:	4641      	mov	r1, r8
 8007550:	008a      	lsls	r2, r1, #2
 8007552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007556:	f7f9 fb99 	bl	8000c8c <__aeabi_uldivmod>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4611      	mov	r1, r2
 8007560:	4b38      	ldr	r3, [pc, #224]	@ (8007644 <UART_SetConfig+0x4e4>)
 8007562:	fba3 2301 	umull	r2, r3, r3, r1
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	2264      	movs	r2, #100	@ 0x64
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	1acb      	subs	r3, r1, r3
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	3332      	adds	r3, #50	@ 0x32
 8007574:	4a33      	ldr	r2, [pc, #204]	@ (8007644 <UART_SetConfig+0x4e4>)
 8007576:	fba2 2303 	umull	r2, r3, r2, r3
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007580:	441c      	add	r4, r3
 8007582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007586:	2200      	movs	r2, #0
 8007588:	673b      	str	r3, [r7, #112]	@ 0x70
 800758a:	677a      	str	r2, [r7, #116]	@ 0x74
 800758c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007590:	4642      	mov	r2, r8
 8007592:	464b      	mov	r3, r9
 8007594:	1891      	adds	r1, r2, r2
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	415b      	adcs	r3, r3
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075a0:	4641      	mov	r1, r8
 80075a2:	1851      	adds	r1, r2, r1
 80075a4:	6039      	str	r1, [r7, #0]
 80075a6:	4649      	mov	r1, r9
 80075a8:	414b      	adcs	r3, r1
 80075aa:	607b      	str	r3, [r7, #4]
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075b8:	4659      	mov	r1, fp
 80075ba:	00cb      	lsls	r3, r1, #3
 80075bc:	4651      	mov	r1, sl
 80075be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c2:	4651      	mov	r1, sl
 80075c4:	00ca      	lsls	r2, r1, #3
 80075c6:	4610      	mov	r0, r2
 80075c8:	4619      	mov	r1, r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	4642      	mov	r2, r8
 80075ce:	189b      	adds	r3, r3, r2
 80075d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075d2:	464b      	mov	r3, r9
 80075d4:	460a      	mov	r2, r1
 80075d6:	eb42 0303 	adc.w	r3, r2, r3
 80075da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80075e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075f4:	4649      	mov	r1, r9
 80075f6:	008b      	lsls	r3, r1, #2
 80075f8:	4641      	mov	r1, r8
 80075fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075fe:	4641      	mov	r1, r8
 8007600:	008a      	lsls	r2, r1, #2
 8007602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007606:	f7f9 fb41 	bl	8000c8c <__aeabi_uldivmod>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <UART_SetConfig+0x4e4>)
 8007610:	fba3 1302 	umull	r1, r3, r3, r2
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	2164      	movs	r1, #100	@ 0x64
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	3332      	adds	r3, #50	@ 0x32
 8007622:	4a08      	ldr	r2, [pc, #32]	@ (8007644 <UART_SetConfig+0x4e4>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	f003 020f 	and.w	r2, r3, #15
 800762e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4422      	add	r2, r4
 8007636:	609a      	str	r2, [r3, #8]
}
 8007638:	bf00      	nop
 800763a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800763e:	46bd      	mov	sp, r7
 8007640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007644:	51eb851f 	.word	0x51eb851f

08007648 <__NVIC_SetPriority>:
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007658:	2b00      	cmp	r3, #0
 800765a:	db0a      	blt.n	8007672 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	b2da      	uxtb	r2, r3
 8007660:	490c      	ldr	r1, [pc, #48]	@ (8007694 <__NVIC_SetPriority+0x4c>)
 8007662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007666:	0112      	lsls	r2, r2, #4
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	440b      	add	r3, r1
 800766c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007670:	e00a      	b.n	8007688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	4908      	ldr	r1, [pc, #32]	@ (8007698 <__NVIC_SetPriority+0x50>)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	3b04      	subs	r3, #4
 8007680:	0112      	lsls	r2, r2, #4
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	440b      	add	r3, r1
 8007686:	761a      	strb	r2, [r3, #24]
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	e000e100 	.word	0xe000e100
 8007698:	e000ed00 	.word	0xe000ed00

0800769c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80076a0:	2100      	movs	r1, #0
 80076a2:	f06f 0004 	mvn.w	r0, #4
 80076a6:	f7ff ffcf 	bl	8007648 <__NVIC_SetPriority>
#endif
}
 80076aa:	bf00      	nop
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b6:	f3ef 8305 	mrs	r3, IPSR
 80076ba:	603b      	str	r3, [r7, #0]
  return(result);
 80076bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076c2:	f06f 0305 	mvn.w	r3, #5
 80076c6:	607b      	str	r3, [r7, #4]
 80076c8:	e00c      	b.n	80076e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076ca:	4b0a      	ldr	r3, [pc, #40]	@ (80076f4 <osKernelInitialize+0x44>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d105      	bne.n	80076de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076d2:	4b08      	ldr	r3, [pc, #32]	@ (80076f4 <osKernelInitialize+0x44>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076d8:	2300      	movs	r3, #0
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	e002      	b.n	80076e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076e4:	687b      	ldr	r3, [r7, #4]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	200050e4 	.word	0x200050e4

080076f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076fe:	f3ef 8305 	mrs	r3, IPSR
 8007702:	603b      	str	r3, [r7, #0]
  return(result);
 8007704:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <osKernelStart+0x1a>
    stat = osErrorISR;
 800770a:	f06f 0305 	mvn.w	r3, #5
 800770e:	607b      	str	r3, [r7, #4]
 8007710:	e010      	b.n	8007734 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007712:	4b0b      	ldr	r3, [pc, #44]	@ (8007740 <osKernelStart+0x48>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d109      	bne.n	800772e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800771a:	f7ff ffbf 	bl	800769c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800771e:	4b08      	ldr	r3, [pc, #32]	@ (8007740 <osKernelStart+0x48>)
 8007720:	2202      	movs	r2, #2
 8007722:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007724:	f001 f87a 	bl	800881c <vTaskStartScheduler>
      stat = osOK;
 8007728:	2300      	movs	r3, #0
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	e002      	b.n	8007734 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800772e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007732:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007734:	687b      	ldr	r3, [r7, #4]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	200050e4 	.word	0x200050e4

08007744 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007744:	b580      	push	{r7, lr}
 8007746:	b08e      	sub	sp, #56	@ 0x38
 8007748:	af04      	add	r7, sp, #16
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007750:	2300      	movs	r3, #0
 8007752:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007754:	f3ef 8305 	mrs	r3, IPSR
 8007758:	617b      	str	r3, [r7, #20]
  return(result);
 800775a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800775c:	2b00      	cmp	r3, #0
 800775e:	d17e      	bne.n	800785e <osThreadNew+0x11a>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d07b      	beq.n	800785e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007766:	2380      	movs	r3, #128	@ 0x80
 8007768:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800776a:	2318      	movs	r3, #24
 800776c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007772:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007776:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d045      	beq.n	800780a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <osThreadNew+0x48>
        name = attr->name;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <osThreadNew+0x6e>
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	2b38      	cmp	r3, #56	@ 0x38
 80077a4:	d805      	bhi.n	80077b2 <osThreadNew+0x6e>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <osThreadNew+0x72>
        return (NULL);
 80077b2:	2300      	movs	r3, #0
 80077b4:	e054      	b.n	8007860 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	089b      	lsrs	r3, r3, #2
 80077c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00e      	beq.n	80077ec <osThreadNew+0xa8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80077d4:	d90a      	bls.n	80077ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d006      	beq.n	80077ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <osThreadNew+0xa8>
        mem = 1;
 80077e6:	2301      	movs	r3, #1
 80077e8:	61bb      	str	r3, [r7, #24]
 80077ea:	e010      	b.n	800780e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10c      	bne.n	800780e <osThreadNew+0xca>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d108      	bne.n	800780e <osThreadNew+0xca>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d104      	bne.n	800780e <osThreadNew+0xca>
          mem = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	e001      	b.n	800780e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d110      	bne.n	8007836 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800781c:	9202      	str	r2, [sp, #8]
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	6a3a      	ldr	r2, [r7, #32]
 8007828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fe1a 	bl	8008464 <xTaskCreateStatic>
 8007830:	4603      	mov	r3, r0
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	e013      	b.n	800785e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d110      	bne.n	800785e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	b29a      	uxth	r2, r3
 8007840:	f107 0310 	add.w	r3, r7, #16
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fe68 	bl	8008524 <xTaskCreate>
 8007854:	4603      	mov	r3, r0
 8007856:	2b01      	cmp	r3, #1
 8007858:	d001      	beq.n	800785e <osThreadNew+0x11a>
            hTask = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800785e:	693b      	ldr	r3, [r7, #16]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3728      	adds	r7, #40	@ 0x28
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007870:	f3ef 8305 	mrs	r3, IPSR
 8007874:	60bb      	str	r3, [r7, #8]
  return(result);
 8007876:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <osDelay+0x1c>
    stat = osErrorISR;
 800787c:	f06f 0305 	mvn.w	r3, #5
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e007      	b.n	8007894 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <osDelay+0x2c>
      vTaskDelay(ticks);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 ff8e 	bl	80087b0 <vTaskDelay>
    }
  }

  return (stat);
 8007894:	68fb      	ldr	r3, [r7, #12]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4a07      	ldr	r2, [pc, #28]	@ (80078cc <vApplicationGetIdleTaskMemory+0x2c>)
 80078b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	4a06      	ldr	r2, [pc, #24]	@ (80078d0 <vApplicationGetIdleTaskMemory+0x30>)
 80078b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2280      	movs	r2, #128	@ 0x80
 80078bc:	601a      	str	r2, [r3, #0]
}
 80078be:	bf00      	nop
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	200050e8 	.word	0x200050e8
 80078d0:	20005144 	.word	0x20005144

080078d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4a07      	ldr	r2, [pc, #28]	@ (8007900 <vApplicationGetTimerTaskMemory+0x2c>)
 80078e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	4a06      	ldr	r2, [pc, #24]	@ (8007904 <vApplicationGetTimerTaskMemory+0x30>)
 80078ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078f2:	601a      	str	r2, [r3, #0]
}
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20005344 	.word	0x20005344
 8007904:	200053a0 	.word	0x200053a0

08007908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f103 0208 	add.w	r2, r3, #8
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f103 0208 	add.w	r2, r3, #8
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f103 0208 	add.w	r2, r3, #8
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079c0:	d103      	bne.n	80079ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	e00c      	b.n	80079e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3308      	adds	r3, #8
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e002      	b.n	80079d8 <vListInsert+0x2e>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d2f6      	bcs.n	80079d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]
}
 8007a10:	bf00      	nop
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6892      	ldr	r2, [r2, #8]
 8007a32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6852      	ldr	r2, [r2, #4]
 8007a3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d103      	bne.n	8007a50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	1e5a      	subs	r2, r3, #1
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10b      	bne.n	8007a9c <xQueueGenericReset+0x2c>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	60bb      	str	r3, [r7, #8]
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	e7fd      	b.n	8007a98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a9c:	f002 f8a4 	bl	8009be8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aa8:	68f9      	ldr	r1, [r7, #12]
 8007aaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007acc:	3b01      	subs	r3, #1
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	441a      	add	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	22ff      	movs	r2, #255	@ 0xff
 8007ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	22ff      	movs	r2, #255	@ 0xff
 8007ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d114      	bne.n	8007b1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01a      	beq.n	8007b30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3310      	adds	r3, #16
 8007afe:	4618      	mov	r0, r3
 8007b00:	f001 f91a 	bl	8008d38 <xTaskRemoveFromEventList>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d012      	beq.n	8007b30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b40 <xQueueGenericReset+0xd0>)
 8007b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	e009      	b.n	8007b30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3310      	adds	r3, #16
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff fef1 	bl	8007908 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3324      	adds	r3, #36	@ 0x24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff feec 	bl	8007908 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b30:	f002 f88c 	bl	8009c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b34:	2301      	movs	r3, #1
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	e000ed04 	.word	0xe000ed04

08007b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08e      	sub	sp, #56	@ 0x38
 8007b48:	af02      	add	r7, sp, #8
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10b      	bne.n	8007b70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b6a:	bf00      	nop
 8007b6c:	bf00      	nop
 8007b6e:	e7fd      	b.n	8007b6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <xQueueGenericCreateStatic+0x56>
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <xQueueGenericCreateStatic+0x5a>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <xQueueGenericCreateStatic+0x5c>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10b      	bne.n	8007bbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	623b      	str	r3, [r7, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	e7fd      	b.n	8007bb8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <xQueueGenericCreateStatic+0x84>
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <xQueueGenericCreateStatic+0x88>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <xQueueGenericCreateStatic+0x8a>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10b      	bne.n	8007bea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	61fb      	str	r3, [r7, #28]
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	e7fd      	b.n	8007be6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bea:	2350      	movs	r3, #80	@ 0x50
 8007bec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b50      	cmp	r3, #80	@ 0x50
 8007bf2:	d00b      	beq.n	8007c0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	61bb      	str	r3, [r7, #24]
}
 8007c06:	bf00      	nop
 8007c08:	bf00      	nop
 8007c0a:	e7fd      	b.n	8007c08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00d      	beq.n	8007c34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 f805 	bl	8007c3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3730      	adds	r7, #48	@ 0x30
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d103      	bne.n	8007c5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	e002      	b.n	8007c60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	69b8      	ldr	r0, [r7, #24]
 8007c70:	f7ff fefe 	bl	8007a70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	78fa      	ldrb	r2, [r7, #3]
 8007c78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08e      	sub	sp, #56	@ 0x38
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c92:	2300      	movs	r3, #0
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10b      	bne.n	8007cb8 <xQueueGenericSend+0x34>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007cb2:	bf00      	nop
 8007cb4:	bf00      	nop
 8007cb6:	e7fd      	b.n	8007cb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <xQueueGenericSend+0x42>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <xQueueGenericSend+0x46>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <xQueueGenericSend+0x48>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10b      	bne.n	8007ce8 <xQueueGenericSend+0x64>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d103      	bne.n	8007cf6 <xQueueGenericSend+0x72>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <xQueueGenericSend+0x76>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e000      	b.n	8007cfc <xQueueGenericSend+0x78>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10b      	bne.n	8007d18 <xQueueGenericSend+0x94>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	623b      	str	r3, [r7, #32]
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d18:	f001 f9f6 	bl	8009108 <xTaskGetSchedulerState>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d102      	bne.n	8007d28 <xQueueGenericSend+0xa4>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <xQueueGenericSend+0xa8>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <xQueueGenericSend+0xaa>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <xQueueGenericSend+0xc6>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	61fb      	str	r3, [r7, #28]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d4a:	f001 ff4d 	bl	8009be8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d302      	bcc.n	8007d60 <xQueueGenericSend+0xdc>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d129      	bne.n	8007db4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d66:	f000 fa0f 	bl	8008188 <prvCopyDataToQueue>
 8007d6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d010      	beq.n	8007d96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d76:	3324      	adds	r3, #36	@ 0x24
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 ffdd 	bl	8008d38 <xTaskRemoveFromEventList>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d013      	beq.n	8007dac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d84:	4b3f      	ldr	r3, [pc, #252]	@ (8007e84 <xQueueGenericSend+0x200>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	e00a      	b.n	8007dac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d9c:	4b39      	ldr	r3, [pc, #228]	@ (8007e84 <xQueueGenericSend+0x200>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007dac:	f001 ff4e 	bl	8009c4c <vPortExitCritical>
				return pdPASS;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e063      	b.n	8007e7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d103      	bne.n	8007dc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dba:	f001 ff47 	bl	8009c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e05c      	b.n	8007e7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d106      	bne.n	8007dd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dc8:	f107 0314 	add.w	r3, r7, #20
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 f83f 	bl	8008e50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dd6:	f001 ff39 	bl	8009c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dda:	f000 fd87 	bl	80088ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dde:	f001 ff03 	bl	8009be8 <vPortEnterCritical>
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007de8:	b25b      	sxtb	r3, r3
 8007dea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dee:	d103      	bne.n	8007df8 <xQueueGenericSend+0x174>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dfe:	b25b      	sxtb	r3, r3
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e04:	d103      	bne.n	8007e0e <xQueueGenericSend+0x18a>
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e0e:	f001 ff1d 	bl	8009c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e12:	1d3a      	adds	r2, r7, #4
 8007e14:	f107 0314 	add.w	r3, r7, #20
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 f82e 	bl	8008e7c <xTaskCheckForTimeOut>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d124      	bne.n	8007e70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e28:	f000 faa6 	bl	8008378 <prvIsQueueFull>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d018      	beq.n	8007e64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	3310      	adds	r3, #16
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 ff2a 	bl	8008c94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e42:	f000 fa31 	bl	80082a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e46:	f000 fd5f 	bl	8008908 <xTaskResumeAll>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f47f af7c 	bne.w	8007d4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e52:	4b0c      	ldr	r3, [pc, #48]	@ (8007e84 <xQueueGenericSend+0x200>)
 8007e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	e772      	b.n	8007d4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e66:	f000 fa1f 	bl	80082a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e6a:	f000 fd4d 	bl	8008908 <xTaskResumeAll>
 8007e6e:	e76c      	b.n	8007d4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e72:	f000 fa19 	bl	80082a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e76:	f000 fd47 	bl	8008908 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3738      	adds	r7, #56	@ 0x38
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b090      	sub	sp, #64	@ 0x40
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10b      	bne.n	8007eb8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007eb2:	bf00      	nop
 8007eb4:	bf00      	nop
 8007eb6:	e7fd      	b.n	8007eb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d103      	bne.n	8007ec6 <xQueueGenericSendFromISR+0x3e>
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <xQueueGenericSendFromISR+0x42>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <xQueueGenericSendFromISR+0x44>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10b      	bne.n	8007ee8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ee2:	bf00      	nop
 8007ee4:	bf00      	nop
 8007ee6:	e7fd      	b.n	8007ee4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d103      	bne.n	8007ef6 <xQueueGenericSendFromISR+0x6e>
 8007eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d101      	bne.n	8007efa <xQueueGenericSendFromISR+0x72>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <xQueueGenericSendFromISR+0x74>
 8007efa:	2300      	movs	r3, #0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	623b      	str	r3, [r7, #32]
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	e7fd      	b.n	8007f14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f18:	f001 ff46 	bl	8009da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f1c:	f3ef 8211 	mrs	r2, BASEPRI
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	61fa      	str	r2, [r7, #28]
 8007f32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d302      	bcc.n	8007f4a <xQueueGenericSendFromISR+0xc2>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d12f      	bne.n	8007faa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f60:	f000 f912 	bl	8008188 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f6c:	d112      	bne.n	8007f94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d016      	beq.n	8007fa4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f78:	3324      	adds	r3, #36	@ 0x24
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fedc 	bl	8008d38 <xTaskRemoveFromEventList>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00e      	beq.n	8007fa4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00b      	beq.n	8007fa4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	e007      	b.n	8007fa4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f98:	3301      	adds	r3, #1
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	b25a      	sxtb	r2, r3
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007fa8:	e001      	b.n	8007fae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3740      	adds	r7, #64	@ 0x40
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08c      	sub	sp, #48	@ 0x30
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10b      	bne.n	8007ff6 <xQueueReceive+0x32>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	623b      	str	r3, [r7, #32]
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	e7fd      	b.n	8007ff2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d103      	bne.n	8008004 <xQueueReceive+0x40>
 8007ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <xQueueReceive+0x44>
 8008004:	2301      	movs	r3, #1
 8008006:	e000      	b.n	800800a <xQueueReceive+0x46>
 8008008:	2300      	movs	r3, #0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10b      	bne.n	8008026 <xQueueReceive+0x62>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	61fb      	str	r3, [r7, #28]
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	e7fd      	b.n	8008022 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008026:	f001 f86f 	bl	8009108 <xTaskGetSchedulerState>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <xQueueReceive+0x72>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <xQueueReceive+0x76>
 8008036:	2301      	movs	r3, #1
 8008038:	e000      	b.n	800803c <xQueueReceive+0x78>
 800803a:	2300      	movs	r3, #0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10b      	bne.n	8008058 <xQueueReceive+0x94>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	61bb      	str	r3, [r7, #24]
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008058:	f001 fdc6 	bl	8009be8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800805c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008060:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01f      	beq.n	80080a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800806c:	f000 f8f6 	bl	800825c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	1e5a      	subs	r2, r3, #1
 8008074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008076:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00f      	beq.n	80080a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008082:	3310      	adds	r3, #16
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fe57 	bl	8008d38 <xTaskRemoveFromEventList>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008090:	4b3c      	ldr	r3, [pc, #240]	@ (8008184 <xQueueReceive+0x1c0>)
 8008092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080a0:	f001 fdd4 	bl	8009c4c <vPortExitCritical>
				return pdPASS;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e069      	b.n	800817c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080ae:	f001 fdcd 	bl	8009c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080b2:	2300      	movs	r3, #0
 80080b4:	e062      	b.n	800817c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d106      	bne.n	80080ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080bc:	f107 0310 	add.w	r3, r7, #16
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fec5 	bl	8008e50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080c6:	2301      	movs	r3, #1
 80080c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080ca:	f001 fdbf 	bl	8009c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080ce:	f000 fc0d 	bl	80088ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080d2:	f001 fd89 	bl	8009be8 <vPortEnterCritical>
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080dc:	b25b      	sxtb	r3, r3
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080e2:	d103      	bne.n	80080ec <xQueueReceive+0x128>
 80080e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080f2:	b25b      	sxtb	r3, r3
 80080f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080f8:	d103      	bne.n	8008102 <xQueueReceive+0x13e>
 80080fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008102:	f001 fda3 	bl	8009c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008106:	1d3a      	adds	r2, r7, #4
 8008108:	f107 0310 	add.w	r3, r7, #16
 800810c:	4611      	mov	r1, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f000 feb4 	bl	8008e7c <xTaskCheckForTimeOut>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d123      	bne.n	8008162 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800811a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800811c:	f000 f916 	bl	800834c <prvIsQueueEmpty>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d017      	beq.n	8008156 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008128:	3324      	adds	r3, #36	@ 0x24
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fdb0 	bl	8008c94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008134:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008136:	f000 f8b7 	bl	80082a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800813a:	f000 fbe5 	bl	8008908 <xTaskResumeAll>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d189      	bne.n	8008058 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008144:	4b0f      	ldr	r3, [pc, #60]	@ (8008184 <xQueueReceive+0x1c0>)
 8008146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	e780      	b.n	8008058 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008158:	f000 f8a6 	bl	80082a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800815c:	f000 fbd4 	bl	8008908 <xTaskResumeAll>
 8008160:	e77a      	b.n	8008058 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008164:	f000 f8a0 	bl	80082a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008168:	f000 fbce 	bl	8008908 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800816c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800816e:	f000 f8ed 	bl	800834c <prvIsQueueEmpty>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	f43f af6f 	beq.w	8008058 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800817a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800817c:	4618      	mov	r0, r3
 800817e:	3730      	adds	r7, #48	@ 0x30
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	e000ed04 	.word	0xe000ed04

08008188 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008194:	2300      	movs	r3, #0
 8008196:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10d      	bne.n	80081c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d14d      	bne.n	800824a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 ffc6 	bl	8009144 <xTaskPriorityDisinherit>
 80081b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	609a      	str	r2, [r3, #8]
 80081c0:	e043      	b.n	800824a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d119      	bne.n	80081fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6858      	ldr	r0, [r3, #4]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d0:	461a      	mov	r2, r3
 80081d2:	68b9      	ldr	r1, [r7, #8]
 80081d4:	f010 ff79 	bl	80190ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e0:	441a      	add	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d32b      	bcc.n	800824a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	605a      	str	r2, [r3, #4]
 80081fa:	e026      	b.n	800824a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68d8      	ldr	r0, [r3, #12]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008204:	461a      	mov	r2, r3
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	f010 ff5f 	bl	80190ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008214:	425b      	negs	r3, r3
 8008216:	441a      	add	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d207      	bcs.n	8008238 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008230:	425b      	negs	r3, r3
 8008232:	441a      	add	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d105      	bne.n	800824a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	3b01      	subs	r3, #1
 8008248:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008252:	697b      	ldr	r3, [r7, #20]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d018      	beq.n	80082a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008276:	441a      	add	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	429a      	cmp	r2, r3
 8008286:	d303      	bcc.n	8008290 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68d9      	ldr	r1, [r3, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008298:	461a      	mov	r2, r3
 800829a:	6838      	ldr	r0, [r7, #0]
 800829c:	f010 ff15 	bl	80190ca <memcpy>
	}
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082b0:	f001 fc9a 	bl	8009be8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082bc:	e011      	b.n	80082e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d012      	beq.n	80082ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3324      	adds	r3, #36	@ 0x24
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fd34 	bl	8008d38 <xTaskRemoveFromEventList>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082d6:	f000 fe35 	bl	8008f44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	3b01      	subs	r3, #1
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dce9      	bgt.n	80082be <prvUnlockQueue+0x16>
 80082ea:	e000      	b.n	80082ee <prvUnlockQueue+0x46>
					break;
 80082ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	22ff      	movs	r2, #255	@ 0xff
 80082f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80082f6:	f001 fca9 	bl	8009c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082fa:	f001 fc75 	bl	8009be8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008304:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008306:	e011      	b.n	800832c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d012      	beq.n	8008336 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3310      	adds	r3, #16
 8008314:	4618      	mov	r0, r3
 8008316:	f000 fd0f 	bl	8008d38 <xTaskRemoveFromEventList>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008320:	f000 fe10 	bl	8008f44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	3b01      	subs	r3, #1
 8008328:	b2db      	uxtb	r3, r3
 800832a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800832c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008330:	2b00      	cmp	r3, #0
 8008332:	dce9      	bgt.n	8008308 <prvUnlockQueue+0x60>
 8008334:	e000      	b.n	8008338 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008336:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	22ff      	movs	r2, #255	@ 0xff
 800833c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008340:	f001 fc84 	bl	8009c4c <vPortExitCritical>
}
 8008344:	bf00      	nop
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008354:	f001 fc48 	bl	8009be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	d102      	bne.n	8008366 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008360:	2301      	movs	r3, #1
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e001      	b.n	800836a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800836a:	f001 fc6f 	bl	8009c4c <vPortExitCritical>

	return xReturn;
 800836e:	68fb      	ldr	r3, [r7, #12]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008380:	f001 fc32 	bl	8009be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838c:	429a      	cmp	r2, r3
 800838e:	d102      	bne.n	8008396 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008390:	2301      	movs	r3, #1
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	e001      	b.n	800839a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800839a:	f001 fc57 	bl	8009c4c <vPortExitCritical>

	return xReturn;
 800839e:	68fb      	ldr	r3, [r7, #12]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	e014      	b.n	80083e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083b8:	4a0f      	ldr	r2, [pc, #60]	@ (80083f8 <vQueueAddToRegistry+0x50>)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10b      	bne.n	80083dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083c4:	490c      	ldr	r1, [pc, #48]	@ (80083f8 <vQueueAddToRegistry+0x50>)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083ce:	4a0a      	ldr	r2, [pc, #40]	@ (80083f8 <vQueueAddToRegistry+0x50>)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	4413      	add	r3, r2
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083da:	e006      	b.n	80083ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3301      	adds	r3, #1
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b07      	cmp	r3, #7
 80083e6:	d9e7      	bls.n	80083b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	200057a0 	.word	0x200057a0

080083fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800840c:	f001 fbec 	bl	8009be8 <vPortEnterCritical>
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008416:	b25b      	sxtb	r3, r3
 8008418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800841c:	d103      	bne.n	8008426 <vQueueWaitForMessageRestricted+0x2a>
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800842c:	b25b      	sxtb	r3, r3
 800842e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008432:	d103      	bne.n	800843c <vQueueWaitForMessageRestricted+0x40>
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800843c:	f001 fc06 	bl	8009c4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	3324      	adds	r3, #36	@ 0x24
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	4618      	mov	r0, r3
 8008452:	f000 fc45 	bl	8008ce0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008456:	6978      	ldr	r0, [r7, #20]
 8008458:	f7ff ff26 	bl	80082a8 <prvUnlockQueue>
	}
 800845c:	bf00      	nop
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08e      	sub	sp, #56	@ 0x38
 8008468:	af04      	add	r7, sp, #16
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10b      	bne.n	8008490 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	623b      	str	r3, [r7, #32]
}
 800848a:	bf00      	nop
 800848c:	bf00      	nop
 800848e:	e7fd      	b.n	800848c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10b      	bne.n	80084ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	61fb      	str	r3, [r7, #28]
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	e7fd      	b.n	80084aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084ae:	235c      	movs	r3, #92	@ 0x5c
 80084b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80084b6:	d00b      	beq.n	80084d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	61bb      	str	r3, [r7, #24]
}
 80084ca:	bf00      	nop
 80084cc:	bf00      	nop
 80084ce:	e7fd      	b.n	80084cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01e      	beq.n	8008516 <xTaskCreateStatic+0xb2>
 80084d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d01b      	beq.n	8008516 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084f0:	2300      	movs	r3, #0
 80084f2:	9303      	str	r3, [sp, #12]
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	9302      	str	r3, [sp, #8]
 80084f8:	f107 0314 	add.w	r3, r7, #20
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	68b9      	ldr	r1, [r7, #8]
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 f850 	bl	80085ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800850e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008510:	f000 f8de 	bl	80086d0 <prvAddNewTaskToReadyList>
 8008514:	e001      	b.n	800851a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800851a:	697b      	ldr	r3, [r7, #20]
	}
 800851c:	4618      	mov	r0, r3
 800851e:	3728      	adds	r7, #40	@ 0x28
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08c      	sub	sp, #48	@ 0x30
 8008528:	af04      	add	r7, sp, #16
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	4613      	mov	r3, r2
 8008532:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4618      	mov	r0, r3
 800853a:	f001 fc77 	bl	8009e2c <pvPortMalloc>
 800853e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00e      	beq.n	8008564 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008546:	205c      	movs	r0, #92	@ 0x5c
 8008548:	f001 fc70 	bl	8009e2c <pvPortMalloc>
 800854c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	631a      	str	r2, [r3, #48]	@ 0x30
 800855a:	e005      	b.n	8008568 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800855c:	6978      	ldr	r0, [r7, #20]
 800855e:	f001 fd33 	bl	8009fc8 <vPortFree>
 8008562:	e001      	b.n	8008568 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d017      	beq.n	800859e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008576:	88fa      	ldrh	r2, [r7, #6]
 8008578:	2300      	movs	r3, #0
 800857a:	9303      	str	r3, [sp, #12]
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	9302      	str	r3, [sp, #8]
 8008580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008582:	9301      	str	r3, [sp, #4]
 8008584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	68b9      	ldr	r1, [r7, #8]
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f80e 	bl	80085ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008592:	69f8      	ldr	r0, [r7, #28]
 8008594:	f000 f89c 	bl	80086d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008598:	2301      	movs	r3, #1
 800859a:	61bb      	str	r3, [r7, #24]
 800859c:	e002      	b.n	80085a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800859e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085a4:	69bb      	ldr	r3, [r7, #24]
	}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3720      	adds	r7, #32
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b088      	sub	sp, #32
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	461a      	mov	r2, r3
 80085c6:	21a5      	movs	r1, #165	@ 0xa5
 80085c8:	f010 fcb6 	bl	8018f38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80085d6:	3b01      	subs	r3, #1
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	f023 0307 	bic.w	r3, r3, #7
 80085e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	f003 0307 	and.w	r3, r3, #7
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	617b      	str	r3, [r7, #20]
}
 8008602:	bf00      	nop
 8008604:	bf00      	nop
 8008606:	e7fd      	b.n	8008604 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01f      	beq.n	800864e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800860e:	2300      	movs	r3, #0
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	e012      	b.n	800863a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	7819      	ldrb	r1, [r3, #0]
 800861c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	4413      	add	r3, r2
 8008622:	3334      	adds	r3, #52	@ 0x34
 8008624:	460a      	mov	r2, r1
 8008626:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d006      	beq.n	8008642 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	3301      	adds	r3, #1
 8008638:	61fb      	str	r3, [r7, #28]
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	2b0f      	cmp	r3, #15
 800863e:	d9e9      	bls.n	8008614 <prvInitialiseNewTask+0x66>
 8008640:	e000      	b.n	8008644 <prvInitialiseNewTask+0x96>
			{
				break;
 8008642:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800864c:	e003      	b.n	8008656 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008658:	2b37      	cmp	r3, #55	@ 0x37
 800865a:	d901      	bls.n	8008660 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800865c:	2337      	movs	r3, #55	@ 0x37
 800865e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008664:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800866a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866e:	2200      	movs	r2, #0
 8008670:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	3304      	adds	r3, #4
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff f966 	bl	8007948 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867e:	3318      	adds	r3, #24
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff f961 	bl	8007948 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800869a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	2200      	movs	r2, #0
 80086a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	68f9      	ldr	r1, [r7, #12]
 80086ae:	69b8      	ldr	r0, [r7, #24]
 80086b0:	f001 f966 	bl	8009980 <pxPortInitialiseStack>
 80086b4:	4602      	mov	r2, r0
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086c6:	bf00      	nop
 80086c8:	3720      	adds	r7, #32
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086d8:	f001 fa86 	bl	8009be8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086dc:	4b2d      	ldr	r3, [pc, #180]	@ (8008794 <prvAddNewTaskToReadyList+0xc4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3301      	adds	r3, #1
 80086e2:	4a2c      	ldr	r2, [pc, #176]	@ (8008794 <prvAddNewTaskToReadyList+0xc4>)
 80086e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086e6:	4b2c      	ldr	r3, [pc, #176]	@ (8008798 <prvAddNewTaskToReadyList+0xc8>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d109      	bne.n	8008702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008798 <prvAddNewTaskToReadyList+0xc8>)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086f4:	4b27      	ldr	r3, [pc, #156]	@ (8008794 <prvAddNewTaskToReadyList+0xc4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d110      	bne.n	800871e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086fc:	f000 fc46 	bl	8008f8c <prvInitialiseTaskLists>
 8008700:	e00d      	b.n	800871e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008702:	4b26      	ldr	r3, [pc, #152]	@ (800879c <prvAddNewTaskToReadyList+0xcc>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800870a:	4b23      	ldr	r3, [pc, #140]	@ (8008798 <prvAddNewTaskToReadyList+0xc8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008714:	429a      	cmp	r2, r3
 8008716:	d802      	bhi.n	800871e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008718:	4a1f      	ldr	r2, [pc, #124]	@ (8008798 <prvAddNewTaskToReadyList+0xc8>)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800871e:	4b20      	ldr	r3, [pc, #128]	@ (80087a0 <prvAddNewTaskToReadyList+0xd0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3301      	adds	r3, #1
 8008724:	4a1e      	ldr	r2, [pc, #120]	@ (80087a0 <prvAddNewTaskToReadyList+0xd0>)
 8008726:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008728:	4b1d      	ldr	r3, [pc, #116]	@ (80087a0 <prvAddNewTaskToReadyList+0xd0>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008734:	4b1b      	ldr	r3, [pc, #108]	@ (80087a4 <prvAddNewTaskToReadyList+0xd4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d903      	bls.n	8008744 <prvAddNewTaskToReadyList+0x74>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008740:	4a18      	ldr	r2, [pc, #96]	@ (80087a4 <prvAddNewTaskToReadyList+0xd4>)
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4a15      	ldr	r2, [pc, #84]	@ (80087a8 <prvAddNewTaskToReadyList+0xd8>)
 8008752:	441a      	add	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3304      	adds	r3, #4
 8008758:	4619      	mov	r1, r3
 800875a:	4610      	mov	r0, r2
 800875c:	f7ff f901 	bl	8007962 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008760:	f001 fa74 	bl	8009c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008764:	4b0d      	ldr	r3, [pc, #52]	@ (800879c <prvAddNewTaskToReadyList+0xcc>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00e      	beq.n	800878a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800876c:	4b0a      	ldr	r3, [pc, #40]	@ (8008798 <prvAddNewTaskToReadyList+0xc8>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008776:	429a      	cmp	r2, r3
 8008778:	d207      	bcs.n	800878a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800877a:	4b0c      	ldr	r3, [pc, #48]	@ (80087ac <prvAddNewTaskToReadyList+0xdc>)
 800877c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20005cb4 	.word	0x20005cb4
 8008798:	200057e0 	.word	0x200057e0
 800879c:	20005cc0 	.word	0x20005cc0
 80087a0:	20005cd0 	.word	0x20005cd0
 80087a4:	20005cbc 	.word	0x20005cbc
 80087a8:	200057e4 	.word	0x200057e4
 80087ac:	e000ed04 	.word	0xe000ed04

080087b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087b8:	2300      	movs	r3, #0
 80087ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d018      	beq.n	80087f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087c2:	4b14      	ldr	r3, [pc, #80]	@ (8008814 <vTaskDelay+0x64>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00b      	beq.n	80087e2 <vTaskDelay+0x32>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	60bb      	str	r3, [r7, #8]
}
 80087dc:	bf00      	nop
 80087de:	bf00      	nop
 80087e0:	e7fd      	b.n	80087de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087e2:	f000 f883 	bl	80088ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087e6:	2100      	movs	r1, #0
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fd1b 	bl	8009224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087ee:	f000 f88b 	bl	8008908 <xTaskResumeAll>
 80087f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d107      	bne.n	800880a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80087fa:	4b07      	ldr	r3, [pc, #28]	@ (8008818 <vTaskDelay+0x68>)
 80087fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20005cdc 	.word	0x20005cdc
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	@ 0x28
 8008820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800882a:	463a      	mov	r2, r7
 800882c:	1d39      	adds	r1, r7, #4
 800882e:	f107 0308 	add.w	r3, r7, #8
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff f834 	bl	80078a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	9202      	str	r2, [sp, #8]
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	2300      	movs	r3, #0
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	2300      	movs	r3, #0
 8008848:	460a      	mov	r2, r1
 800884a:	4922      	ldr	r1, [pc, #136]	@ (80088d4 <vTaskStartScheduler+0xb8>)
 800884c:	4822      	ldr	r0, [pc, #136]	@ (80088d8 <vTaskStartScheduler+0xbc>)
 800884e:	f7ff fe09 	bl	8008464 <xTaskCreateStatic>
 8008852:	4603      	mov	r3, r0
 8008854:	4a21      	ldr	r2, [pc, #132]	@ (80088dc <vTaskStartScheduler+0xc0>)
 8008856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008858:	4b20      	ldr	r3, [pc, #128]	@ (80088dc <vTaskStartScheduler+0xc0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008860:	2301      	movs	r3, #1
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	e001      	b.n	800886a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008866:	2300      	movs	r3, #0
 8008868:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d102      	bne.n	8008876 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008870:	f000 fd2c 	bl	80092cc <xTimerCreateTimerTask>
 8008874:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d116      	bne.n	80088aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	613b      	str	r3, [r7, #16]
}
 800888e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008890:	4b13      	ldr	r3, [pc, #76]	@ (80088e0 <vTaskStartScheduler+0xc4>)
 8008892:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008896:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008898:	4b12      	ldr	r3, [pc, #72]	@ (80088e4 <vTaskStartScheduler+0xc8>)
 800889a:	2201      	movs	r2, #1
 800889c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800889e:	4b12      	ldr	r3, [pc, #72]	@ (80088e8 <vTaskStartScheduler+0xcc>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088a4:	f001 f8fc 	bl	8009aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088a8:	e00f      	b.n	80088ca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088b0:	d10b      	bne.n	80088ca <vTaskStartScheduler+0xae>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60fb      	str	r3, [r7, #12]
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop
 80088c8:	e7fd      	b.n	80088c6 <vTaskStartScheduler+0xaa>
}
 80088ca:	bf00      	nop
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	08019e24 	.word	0x08019e24
 80088d8:	08008f5d 	.word	0x08008f5d
 80088dc:	20005cd8 	.word	0x20005cd8
 80088e0:	20005cd4 	.word	0x20005cd4
 80088e4:	20005cc0 	.word	0x20005cc0
 80088e8:	20005cb8 	.word	0x20005cb8

080088ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088f0:	4b04      	ldr	r3, [pc, #16]	@ (8008904 <vTaskSuspendAll+0x18>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	4a03      	ldr	r2, [pc, #12]	@ (8008904 <vTaskSuspendAll+0x18>)
 80088f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088fa:	bf00      	nop
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	20005cdc 	.word	0x20005cdc

08008908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008912:	2300      	movs	r3, #0
 8008914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008916:	4b42      	ldr	r3, [pc, #264]	@ (8008a20 <xTaskResumeAll+0x118>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10b      	bne.n	8008936 <xTaskResumeAll+0x2e>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	603b      	str	r3, [r7, #0]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008936:	f001 f957 	bl	8009be8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800893a:	4b39      	ldr	r3, [pc, #228]	@ (8008a20 <xTaskResumeAll+0x118>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3b01      	subs	r3, #1
 8008940:	4a37      	ldr	r2, [pc, #220]	@ (8008a20 <xTaskResumeAll+0x118>)
 8008942:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008944:	4b36      	ldr	r3, [pc, #216]	@ (8008a20 <xTaskResumeAll+0x118>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d162      	bne.n	8008a12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800894c:	4b35      	ldr	r3, [pc, #212]	@ (8008a24 <xTaskResumeAll+0x11c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d05e      	beq.n	8008a12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008954:	e02f      	b.n	80089b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008956:	4b34      	ldr	r3, [pc, #208]	@ (8008a28 <xTaskResumeAll+0x120>)
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3318      	adds	r3, #24
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff f85a 	bl	8007a1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3304      	adds	r3, #4
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff f855 	bl	8007a1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008976:	4b2d      	ldr	r3, [pc, #180]	@ (8008a2c <xTaskResumeAll+0x124>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d903      	bls.n	8008986 <xTaskResumeAll+0x7e>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008982:	4a2a      	ldr	r2, [pc, #168]	@ (8008a2c <xTaskResumeAll+0x124>)
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4a27      	ldr	r2, [pc, #156]	@ (8008a30 <xTaskResumeAll+0x128>)
 8008994:	441a      	add	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3304      	adds	r3, #4
 800899a:	4619      	mov	r1, r3
 800899c:	4610      	mov	r0, r2
 800899e:	f7fe ffe0 	bl	8007962 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089a6:	4b23      	ldr	r3, [pc, #140]	@ (8008a34 <xTaskResumeAll+0x12c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d302      	bcc.n	80089b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80089b0:	4b21      	ldr	r3, [pc, #132]	@ (8008a38 <xTaskResumeAll+0x130>)
 80089b2:	2201      	movs	r2, #1
 80089b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a28 <xTaskResumeAll+0x120>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1cb      	bne.n	8008956 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089c4:	f000 fb80 	bl	80090c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089c8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a3c <xTaskResumeAll+0x134>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d010      	beq.n	80089f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089d4:	f000 f846 	bl	8008a64 <xTaskIncrementTick>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80089de:	4b16      	ldr	r3, [pc, #88]	@ (8008a38 <xTaskResumeAll+0x130>)
 80089e0:	2201      	movs	r2, #1
 80089e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1f1      	bne.n	80089d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80089f0:	4b12      	ldr	r3, [pc, #72]	@ (8008a3c <xTaskResumeAll+0x134>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089f6:	4b10      	ldr	r3, [pc, #64]	@ (8008a38 <xTaskResumeAll+0x130>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d009      	beq.n	8008a12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089fe:	2301      	movs	r3, #1
 8008a00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a02:	4b0f      	ldr	r3, [pc, #60]	@ (8008a40 <xTaskResumeAll+0x138>)
 8008a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a12:	f001 f91b 	bl	8009c4c <vPortExitCritical>

	return xAlreadyYielded;
 8008a16:	68bb      	ldr	r3, [r7, #8]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20005cdc 	.word	0x20005cdc
 8008a24:	20005cb4 	.word	0x20005cb4
 8008a28:	20005c74 	.word	0x20005c74
 8008a2c:	20005cbc 	.word	0x20005cbc
 8008a30:	200057e4 	.word	0x200057e4
 8008a34:	200057e0 	.word	0x200057e0
 8008a38:	20005cc8 	.word	0x20005cc8
 8008a3c:	20005cc4 	.word	0x20005cc4
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a4a:	4b05      	ldr	r3, [pc, #20]	@ (8008a60 <xTaskGetTickCount+0x1c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a50:	687b      	ldr	r3, [r7, #4]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	20005cb8 	.word	0x20005cb8

08008a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8008bac <xTaskIncrementTick+0x148>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 8090 	bne.w	8008b98 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a78:	4b4d      	ldr	r3, [pc, #308]	@ (8008bb0 <xTaskIncrementTick+0x14c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a80:	4a4b      	ldr	r2, [pc, #300]	@ (8008bb0 <xTaskIncrementTick+0x14c>)
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d121      	bne.n	8008ad0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a8c:	4b49      	ldr	r3, [pc, #292]	@ (8008bb4 <xTaskIncrementTick+0x150>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00b      	beq.n	8008aae <xTaskIncrementTick+0x4a>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	603b      	str	r3, [r7, #0]
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	e7fd      	b.n	8008aaa <xTaskIncrementTick+0x46>
 8008aae:	4b41      	ldr	r3, [pc, #260]	@ (8008bb4 <xTaskIncrementTick+0x150>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	4b40      	ldr	r3, [pc, #256]	@ (8008bb8 <xTaskIncrementTick+0x154>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a3e      	ldr	r2, [pc, #248]	@ (8008bb4 <xTaskIncrementTick+0x150>)
 8008aba:	6013      	str	r3, [r2, #0]
 8008abc:	4a3e      	ldr	r2, [pc, #248]	@ (8008bb8 <xTaskIncrementTick+0x154>)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6013      	str	r3, [r2, #0]
 8008ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8008bbc <xTaskIncrementTick+0x158>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8008bbc <xTaskIncrementTick+0x158>)
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	f000 fafc 	bl	80090c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8008bc0 <xTaskIncrementTick+0x15c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d349      	bcc.n	8008b6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ada:	4b36      	ldr	r3, [pc, #216]	@ (8008bb4 <xTaskIncrementTick+0x150>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d104      	bne.n	8008aee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae4:	4b36      	ldr	r3, [pc, #216]	@ (8008bc0 <xTaskIncrementTick+0x15c>)
 8008ae6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008aea:	601a      	str	r2, [r3, #0]
					break;
 8008aec:	e03f      	b.n	8008b6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aee:	4b31      	ldr	r3, [pc, #196]	@ (8008bb4 <xTaskIncrementTick+0x150>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d203      	bcs.n	8008b0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b06:	4a2e      	ldr	r2, [pc, #184]	@ (8008bc0 <xTaskIncrementTick+0x15c>)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b0c:	e02f      	b.n	8008b6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	3304      	adds	r3, #4
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe ff82 	bl	8007a1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d004      	beq.n	8008b2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	3318      	adds	r3, #24
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe ff79 	bl	8007a1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2e:	4b25      	ldr	r3, [pc, #148]	@ (8008bc4 <xTaskIncrementTick+0x160>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d903      	bls.n	8008b3e <xTaskIncrementTick+0xda>
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3a:	4a22      	ldr	r2, [pc, #136]	@ (8008bc4 <xTaskIncrementTick+0x160>)
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8008bc8 <xTaskIncrementTick+0x164>)
 8008b4c:	441a      	add	r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	3304      	adds	r3, #4
 8008b52:	4619      	mov	r1, r3
 8008b54:	4610      	mov	r0, r2
 8008b56:	f7fe ff04 	bl	8007962 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008bcc <xTaskIncrementTick+0x168>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d3b8      	bcc.n	8008ada <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b6c:	e7b5      	b.n	8008ada <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b6e:	4b17      	ldr	r3, [pc, #92]	@ (8008bcc <xTaskIncrementTick+0x168>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b74:	4914      	ldr	r1, [pc, #80]	@ (8008bc8 <xTaskIncrementTick+0x164>)
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d901      	bls.n	8008b8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008b86:	2301      	movs	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b8a:	4b11      	ldr	r3, [pc, #68]	@ (8008bd0 <xTaskIncrementTick+0x16c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d007      	beq.n	8008ba2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008b92:	2301      	movs	r3, #1
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e004      	b.n	8008ba2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b98:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd4 <xTaskIncrementTick+0x170>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8008bd4 <xTaskIncrementTick+0x170>)
 8008ba0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ba2:	697b      	ldr	r3, [r7, #20]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20005cdc 	.word	0x20005cdc
 8008bb0:	20005cb8 	.word	0x20005cb8
 8008bb4:	20005c6c 	.word	0x20005c6c
 8008bb8:	20005c70 	.word	0x20005c70
 8008bbc:	20005ccc 	.word	0x20005ccc
 8008bc0:	20005cd4 	.word	0x20005cd4
 8008bc4:	20005cbc 	.word	0x20005cbc
 8008bc8:	200057e4 	.word	0x200057e4
 8008bcc:	200057e0 	.word	0x200057e0
 8008bd0:	20005cc8 	.word	0x20005cc8
 8008bd4:	20005cc4 	.word	0x20005cc4

08008bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bde:	4b28      	ldr	r3, [pc, #160]	@ (8008c80 <vTaskSwitchContext+0xa8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008be6:	4b27      	ldr	r3, [pc, #156]	@ (8008c84 <vTaskSwitchContext+0xac>)
 8008be8:	2201      	movs	r2, #1
 8008bea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bec:	e042      	b.n	8008c74 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008bee:	4b25      	ldr	r3, [pc, #148]	@ (8008c84 <vTaskSwitchContext+0xac>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf4:	4b24      	ldr	r3, [pc, #144]	@ (8008c88 <vTaskSwitchContext+0xb0>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	e011      	b.n	8008c20 <vTaskSwitchContext+0x48>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10b      	bne.n	8008c1a <vTaskSwitchContext+0x42>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	607b      	str	r3, [r7, #4]
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	e7fd      	b.n	8008c16 <vTaskSwitchContext+0x3e>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	491a      	ldr	r1, [pc, #104]	@ (8008c8c <vTaskSwitchContext+0xb4>)
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4613      	mov	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	440b      	add	r3, r1
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0e3      	beq.n	8008bfc <vTaskSwitchContext+0x24>
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4a13      	ldr	r2, [pc, #76]	@ (8008c8c <vTaskSwitchContext+0xb4>)
 8008c40:	4413      	add	r3, r2
 8008c42:	60bb      	str	r3, [r7, #8]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	605a      	str	r2, [r3, #4]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	3308      	adds	r3, #8
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d104      	bne.n	8008c64 <vTaskSwitchContext+0x8c>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	605a      	str	r2, [r3, #4]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	4a09      	ldr	r2, [pc, #36]	@ (8008c90 <vTaskSwitchContext+0xb8>)
 8008c6c:	6013      	str	r3, [r2, #0]
 8008c6e:	4a06      	ldr	r2, [pc, #24]	@ (8008c88 <vTaskSwitchContext+0xb0>)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6013      	str	r3, [r2, #0]
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	20005cdc 	.word	0x20005cdc
 8008c84:	20005cc8 	.word	0x20005cc8
 8008c88:	20005cbc 	.word	0x20005cbc
 8008c8c:	200057e4 	.word	0x200057e4
 8008c90:	200057e0 	.word	0x200057e0

08008c94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10b      	bne.n	8008cbc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	60fb      	str	r3, [r7, #12]
}
 8008cb6:	bf00      	nop
 8008cb8:	bf00      	nop
 8008cba:	e7fd      	b.n	8008cb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cbc:	4b07      	ldr	r3, [pc, #28]	@ (8008cdc <vTaskPlaceOnEventList+0x48>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3318      	adds	r3, #24
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7fe fe70 	bl	80079aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cca:	2101      	movs	r1, #1
 8008ccc:	6838      	ldr	r0, [r7, #0]
 8008cce:	f000 faa9 	bl	8009224 <prvAddCurrentTaskToDelayedList>
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	200057e0 	.word	0x200057e0

08008ce0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10b      	bne.n	8008d0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	617b      	str	r3, [r7, #20]
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	e7fd      	b.n	8008d06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d34 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3318      	adds	r3, #24
 8008d10:	4619      	mov	r1, r3
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f7fe fe25 	bl	8007962 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008d1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	68b8      	ldr	r0, [r7, #8]
 8008d28:	f000 fa7c 	bl	8009224 <prvAddCurrentTaskToDelayedList>
	}
 8008d2c:	bf00      	nop
 8008d2e:	3718      	adds	r7, #24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	200057e0 	.word	0x200057e0

08008d38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10b      	bne.n	8008d66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	60fb      	str	r3, [r7, #12]
}
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	e7fd      	b.n	8008d62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	3318      	adds	r3, #24
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe fe56 	bl	8007a1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d70:	4b1d      	ldr	r3, [pc, #116]	@ (8008de8 <xTaskRemoveFromEventList+0xb0>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d11d      	bne.n	8008db4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe fe4d 	bl	8007a1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d86:	4b19      	ldr	r3, [pc, #100]	@ (8008dec <xTaskRemoveFromEventList+0xb4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d903      	bls.n	8008d96 <xTaskRemoveFromEventList+0x5e>
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d92:	4a16      	ldr	r2, [pc, #88]	@ (8008dec <xTaskRemoveFromEventList+0xb4>)
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4a13      	ldr	r2, [pc, #76]	@ (8008df0 <xTaskRemoveFromEventList+0xb8>)
 8008da4:	441a      	add	r2, r3
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	3304      	adds	r3, #4
 8008daa:	4619      	mov	r1, r3
 8008dac:	4610      	mov	r0, r2
 8008dae:	f7fe fdd8 	bl	8007962 <vListInsertEnd>
 8008db2:	e005      	b.n	8008dc0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	3318      	adds	r3, #24
 8008db8:	4619      	mov	r1, r3
 8008dba:	480e      	ldr	r0, [pc, #56]	@ (8008df4 <xTaskRemoveFromEventList+0xbc>)
 8008dbc:	f7fe fdd1 	bl	8007962 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008df8 <xTaskRemoveFromEventList+0xc0>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d905      	bls.n	8008dda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dfc <xTaskRemoveFromEventList+0xc4>)
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	e001      	b.n	8008dde <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008dde:	697b      	ldr	r3, [r7, #20]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20005cdc 	.word	0x20005cdc
 8008dec:	20005cbc 	.word	0x20005cbc
 8008df0:	200057e4 	.word	0x200057e4
 8008df4:	20005c74 	.word	0x20005c74
 8008df8:	200057e0 	.word	0x200057e0
 8008dfc:	20005cc8 	.word	0x20005cc8

08008e00 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10b      	bne.n	8008e26 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	60fb      	str	r3, [r7, #12]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008e26:	f000 fedf 	bl	8009be8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e2a:	4b07      	ldr	r3, [pc, #28]	@ (8008e48 <vTaskSetTimeOutState+0x48>)
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008e32:	4b06      	ldr	r3, [pc, #24]	@ (8008e4c <vTaskSetTimeOutState+0x4c>)
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008e3a:	f000 ff07 	bl	8009c4c <vPortExitCritical>
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20005ccc 	.word	0x20005ccc
 8008e4c:	20005cb8 	.word	0x20005cb8

08008e50 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e58:	4b06      	ldr	r3, [pc, #24]	@ (8008e74 <vTaskInternalSetTimeOutState+0x24>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e60:	4b05      	ldr	r3, [pc, #20]	@ (8008e78 <vTaskInternalSetTimeOutState+0x28>)
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	605a      	str	r2, [r3, #4]
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20005ccc 	.word	0x20005ccc
 8008e78:	20005cb8 	.word	0x20005cb8

08008e7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10b      	bne.n	8008ea4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	613b      	str	r3, [r7, #16]
}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	e7fd      	b.n	8008ea0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10b      	bne.n	8008ec2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	60fb      	str	r3, [r7, #12]
}
 8008ebc:	bf00      	nop
 8008ebe:	bf00      	nop
 8008ec0:	e7fd      	b.n	8008ebe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ec2:	f000 fe91 	bl	8009be8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8008f3c <xTaskCheckForTimeOut+0xc0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ede:	d102      	bne.n	8008ee6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	61fb      	str	r3, [r7, #28]
 8008ee4:	e023      	b.n	8008f2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4b15      	ldr	r3, [pc, #84]	@ (8008f40 <xTaskCheckForTimeOut+0xc4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d007      	beq.n	8008f02 <xTaskCheckForTimeOut+0x86>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d302      	bcc.n	8008f02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008efc:	2301      	movs	r3, #1
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	e015      	b.n	8008f2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d20b      	bcs.n	8008f24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	1ad2      	subs	r2, r2, r3
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7ff ff99 	bl	8008e50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61fb      	str	r3, [r7, #28]
 8008f22:	e004      	b.n	8008f2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f2e:	f000 fe8d 	bl	8009c4c <vPortExitCritical>

	return xReturn;
 8008f32:	69fb      	ldr	r3, [r7, #28]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3720      	adds	r7, #32
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20005cb8 	.word	0x20005cb8
 8008f40:	20005ccc 	.word	0x20005ccc

08008f44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f48:	4b03      	ldr	r3, [pc, #12]	@ (8008f58 <vTaskMissedYield+0x14>)
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	601a      	str	r2, [r3, #0]
}
 8008f4e:	bf00      	nop
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	20005cc8 	.word	0x20005cc8

08008f5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f64:	f000 f852 	bl	800900c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f68:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <prvIdleTask+0x28>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d9f9      	bls.n	8008f64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f70:	4b05      	ldr	r3, [pc, #20]	@ (8008f88 <prvIdleTask+0x2c>)
 8008f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f80:	e7f0      	b.n	8008f64 <prvIdleTask+0x8>
 8008f82:	bf00      	nop
 8008f84:	200057e4 	.word	0x200057e4
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f92:	2300      	movs	r3, #0
 8008f94:	607b      	str	r3, [r7, #4]
 8008f96:	e00c      	b.n	8008fb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4a12      	ldr	r2, [pc, #72]	@ (8008fec <prvInitialiseTaskLists+0x60>)
 8008fa4:	4413      	add	r3, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fe fcae 	bl	8007908 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	607b      	str	r3, [r7, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b37      	cmp	r3, #55	@ 0x37
 8008fb6:	d9ef      	bls.n	8008f98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fb8:	480d      	ldr	r0, [pc, #52]	@ (8008ff0 <prvInitialiseTaskLists+0x64>)
 8008fba:	f7fe fca5 	bl	8007908 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fbe:	480d      	ldr	r0, [pc, #52]	@ (8008ff4 <prvInitialiseTaskLists+0x68>)
 8008fc0:	f7fe fca2 	bl	8007908 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fc4:	480c      	ldr	r0, [pc, #48]	@ (8008ff8 <prvInitialiseTaskLists+0x6c>)
 8008fc6:	f7fe fc9f 	bl	8007908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fca:	480c      	ldr	r0, [pc, #48]	@ (8008ffc <prvInitialiseTaskLists+0x70>)
 8008fcc:	f7fe fc9c 	bl	8007908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fd0:	480b      	ldr	r0, [pc, #44]	@ (8009000 <prvInitialiseTaskLists+0x74>)
 8008fd2:	f7fe fc99 	bl	8007908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8009004 <prvInitialiseTaskLists+0x78>)
 8008fd8:	4a05      	ldr	r2, [pc, #20]	@ (8008ff0 <prvInitialiseTaskLists+0x64>)
 8008fda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009008 <prvInitialiseTaskLists+0x7c>)
 8008fde:	4a05      	ldr	r2, [pc, #20]	@ (8008ff4 <prvInitialiseTaskLists+0x68>)
 8008fe0:	601a      	str	r2, [r3, #0]
}
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	200057e4 	.word	0x200057e4
 8008ff0:	20005c44 	.word	0x20005c44
 8008ff4:	20005c58 	.word	0x20005c58
 8008ff8:	20005c74 	.word	0x20005c74
 8008ffc:	20005c88 	.word	0x20005c88
 8009000:	20005ca0 	.word	0x20005ca0
 8009004:	20005c6c 	.word	0x20005c6c
 8009008:	20005c70 	.word	0x20005c70

0800900c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009012:	e019      	b.n	8009048 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009014:	f000 fde8 	bl	8009be8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009018:	4b10      	ldr	r3, [pc, #64]	@ (800905c <prvCheckTasksWaitingTermination+0x50>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3304      	adds	r3, #4
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe fcf9 	bl	8007a1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800902a:	4b0d      	ldr	r3, [pc, #52]	@ (8009060 <prvCheckTasksWaitingTermination+0x54>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3b01      	subs	r3, #1
 8009030:	4a0b      	ldr	r2, [pc, #44]	@ (8009060 <prvCheckTasksWaitingTermination+0x54>)
 8009032:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009034:	4b0b      	ldr	r3, [pc, #44]	@ (8009064 <prvCheckTasksWaitingTermination+0x58>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3b01      	subs	r3, #1
 800903a:	4a0a      	ldr	r2, [pc, #40]	@ (8009064 <prvCheckTasksWaitingTermination+0x58>)
 800903c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800903e:	f000 fe05 	bl	8009c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f810 	bl	8009068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009048:	4b06      	ldr	r3, [pc, #24]	@ (8009064 <prvCheckTasksWaitingTermination+0x58>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e1      	bne.n	8009014 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009050:	bf00      	nop
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20005c88 	.word	0x20005c88
 8009060:	20005cb4 	.word	0x20005cb4
 8009064:	20005c9c 	.word	0x20005c9c

08009068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009076:	2b00      	cmp	r3, #0
 8009078:	d108      	bne.n	800908c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907e:	4618      	mov	r0, r3
 8009080:	f000 ffa2 	bl	8009fc8 <vPortFree>
				vPortFree( pxTCB );
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 ff9f 	bl	8009fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800908a:	e019      	b.n	80090c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009092:	2b01      	cmp	r3, #1
 8009094:	d103      	bne.n	800909e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 ff96 	bl	8009fc8 <vPortFree>
	}
 800909c:	e010      	b.n	80090c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d00b      	beq.n	80090c0 <prvDeleteTCB+0x58>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	60fb      	str	r3, [r7, #12]
}
 80090ba:	bf00      	nop
 80090bc:	bf00      	nop
 80090be:	e7fd      	b.n	80090bc <prvDeleteTCB+0x54>
	}
 80090c0:	bf00      	nop
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009100 <prvResetNextTaskUnblockTime+0x38>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d104      	bne.n	80090e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009104 <prvResetNextTaskUnblockTime+0x3c>)
 80090da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090e0:	e008      	b.n	80090f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e2:	4b07      	ldr	r3, [pc, #28]	@ (8009100 <prvResetNextTaskUnblockTime+0x38>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4a04      	ldr	r2, [pc, #16]	@ (8009104 <prvResetNextTaskUnblockTime+0x3c>)
 80090f2:	6013      	str	r3, [r2, #0]
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	20005c6c 	.word	0x20005c6c
 8009104:	20005cd4 	.word	0x20005cd4

08009108 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800910e:	4b0b      	ldr	r3, [pc, #44]	@ (800913c <xTaskGetSchedulerState+0x34>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d102      	bne.n	800911c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009116:	2301      	movs	r3, #1
 8009118:	607b      	str	r3, [r7, #4]
 800911a:	e008      	b.n	800912e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800911c:	4b08      	ldr	r3, [pc, #32]	@ (8009140 <xTaskGetSchedulerState+0x38>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009124:	2302      	movs	r3, #2
 8009126:	607b      	str	r3, [r7, #4]
 8009128:	e001      	b.n	800912e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800912a:	2300      	movs	r3, #0
 800912c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800912e:	687b      	ldr	r3, [r7, #4]
	}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	20005cc0 	.word	0x20005cc0
 8009140:	20005cdc 	.word	0x20005cdc

08009144 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009150:	2300      	movs	r3, #0
 8009152:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d058      	beq.n	800920c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800915a:	4b2f      	ldr	r3, [pc, #188]	@ (8009218 <xTaskPriorityDisinherit+0xd4>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	429a      	cmp	r2, r3
 8009162:	d00b      	beq.n	800917c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	60fb      	str	r3, [r7, #12]
}
 8009176:	bf00      	nop
 8009178:	bf00      	nop
 800917a:	e7fd      	b.n	8009178 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10b      	bne.n	800919c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	60bb      	str	r3, [r7, #8]
}
 8009196:	bf00      	nop
 8009198:	bf00      	nop
 800919a:	e7fd      	b.n	8009198 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091a0:	1e5a      	subs	r2, r3, #1
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d02c      	beq.n	800920c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d128      	bne.n	800920c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3304      	adds	r3, #4
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe fc2c 	bl	8007a1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091dc:	4b0f      	ldr	r3, [pc, #60]	@ (800921c <xTaskPriorityDisinherit+0xd8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d903      	bls.n	80091ec <xTaskPriorityDisinherit+0xa8>
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e8:	4a0c      	ldr	r2, [pc, #48]	@ (800921c <xTaskPriorityDisinherit+0xd8>)
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4a09      	ldr	r2, [pc, #36]	@ (8009220 <xTaskPriorityDisinherit+0xdc>)
 80091fa:	441a      	add	r2, r3
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	3304      	adds	r3, #4
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f7fe fbad 	bl	8007962 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009208:	2301      	movs	r3, #1
 800920a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800920c:	697b      	ldr	r3, [r7, #20]
	}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	200057e0 	.word	0x200057e0
 800921c:	20005cbc 	.word	0x20005cbc
 8009220:	200057e4 	.word	0x200057e4

08009224 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800922e:	4b21      	ldr	r3, [pc, #132]	@ (80092b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009234:	4b20      	ldr	r3, [pc, #128]	@ (80092b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3304      	adds	r3, #4
 800923a:	4618      	mov	r0, r3
 800923c:	f7fe fbee 	bl	8007a1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009246:	d10a      	bne.n	800925e <prvAddCurrentTaskToDelayedList+0x3a>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d007      	beq.n	800925e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800924e:	4b1a      	ldr	r3, [pc, #104]	@ (80092b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3304      	adds	r3, #4
 8009254:	4619      	mov	r1, r3
 8009256:	4819      	ldr	r0, [pc, #100]	@ (80092bc <prvAddCurrentTaskToDelayedList+0x98>)
 8009258:	f7fe fb83 	bl	8007962 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800925c:	e026      	b.n	80092ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4413      	add	r3, r2
 8009264:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009266:	4b14      	ldr	r3, [pc, #80]	@ (80092b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	429a      	cmp	r2, r3
 8009274:	d209      	bcs.n	800928a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009276:	4b12      	ldr	r3, [pc, #72]	@ (80092c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	4b0f      	ldr	r3, [pc, #60]	@ (80092b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f7fe fb91 	bl	80079aa <vListInsert>
}
 8009288:	e010      	b.n	80092ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800928a:	4b0e      	ldr	r3, [pc, #56]	@ (80092c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	4b0a      	ldr	r3, [pc, #40]	@ (80092b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3304      	adds	r3, #4
 8009294:	4619      	mov	r1, r3
 8009296:	4610      	mov	r0, r2
 8009298:	f7fe fb87 	bl	80079aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800929c:	4b0a      	ldr	r3, [pc, #40]	@ (80092c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d202      	bcs.n	80092ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80092a6:	4a08      	ldr	r2, [pc, #32]	@ (80092c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	6013      	str	r3, [r2, #0]
}
 80092ac:	bf00      	nop
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20005cb8 	.word	0x20005cb8
 80092b8:	200057e0 	.word	0x200057e0
 80092bc:	20005ca0 	.word	0x20005ca0
 80092c0:	20005c70 	.word	0x20005c70
 80092c4:	20005c6c 	.word	0x20005c6c
 80092c8:	20005cd4 	.word	0x20005cd4

080092cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08a      	sub	sp, #40	@ 0x28
 80092d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092d6:	f000 fb13 	bl	8009900 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092da:	4b1d      	ldr	r3, [pc, #116]	@ (8009350 <xTimerCreateTimerTask+0x84>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d021      	beq.n	8009326 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092ea:	1d3a      	adds	r2, r7, #4
 80092ec:	f107 0108 	add.w	r1, r7, #8
 80092f0:	f107 030c 	add.w	r3, r7, #12
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fe faed 	bl	80078d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	9202      	str	r2, [sp, #8]
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	2302      	movs	r3, #2
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	2300      	movs	r3, #0
 800930a:	460a      	mov	r2, r1
 800930c:	4911      	ldr	r1, [pc, #68]	@ (8009354 <xTimerCreateTimerTask+0x88>)
 800930e:	4812      	ldr	r0, [pc, #72]	@ (8009358 <xTimerCreateTimerTask+0x8c>)
 8009310:	f7ff f8a8 	bl	8008464 <xTaskCreateStatic>
 8009314:	4603      	mov	r3, r0
 8009316:	4a11      	ldr	r2, [pc, #68]	@ (800935c <xTimerCreateTimerTask+0x90>)
 8009318:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800931a:	4b10      	ldr	r3, [pc, #64]	@ (800935c <xTimerCreateTimerTask+0x90>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009322:	2301      	movs	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10b      	bne.n	8009344 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	613b      	str	r3, [r7, #16]
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	e7fd      	b.n	8009340 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009344:	697b      	ldr	r3, [r7, #20]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20005d10 	.word	0x20005d10
 8009354:	08019e2c 	.word	0x08019e2c
 8009358:	08009499 	.word	0x08009499
 800935c:	20005d14 	.word	0x20005d14

08009360 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08a      	sub	sp, #40	@ 0x28
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800936e:	2300      	movs	r3, #0
 8009370:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10b      	bne.n	8009390 <xTimerGenericCommand+0x30>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	623b      	str	r3, [r7, #32]
}
 800938a:	bf00      	nop
 800938c:	bf00      	nop
 800938e:	e7fd      	b.n	800938c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009390:	4b19      	ldr	r3, [pc, #100]	@ (80093f8 <xTimerGenericCommand+0x98>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d02a      	beq.n	80093ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	dc18      	bgt.n	80093dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093aa:	f7ff fead 	bl	8009108 <xTaskGetSchedulerState>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d109      	bne.n	80093c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093b4:	4b10      	ldr	r3, [pc, #64]	@ (80093f8 <xTimerGenericCommand+0x98>)
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	f107 0110 	add.w	r1, r7, #16
 80093bc:	2300      	movs	r3, #0
 80093be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c0:	f7fe fc60 	bl	8007c84 <xQueueGenericSend>
 80093c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80093c6:	e012      	b.n	80093ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093c8:	4b0b      	ldr	r3, [pc, #44]	@ (80093f8 <xTimerGenericCommand+0x98>)
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	f107 0110 	add.w	r1, r7, #16
 80093d0:	2300      	movs	r3, #0
 80093d2:	2200      	movs	r2, #0
 80093d4:	f7fe fc56 	bl	8007c84 <xQueueGenericSend>
 80093d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80093da:	e008      	b.n	80093ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093dc:	4b06      	ldr	r3, [pc, #24]	@ (80093f8 <xTimerGenericCommand+0x98>)
 80093de:	6818      	ldr	r0, [r3, #0]
 80093e0:	f107 0110 	add.w	r1, r7, #16
 80093e4:	2300      	movs	r3, #0
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	f7fe fd4e 	bl	8007e88 <xQueueGenericSendFromISR>
 80093ec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3728      	adds	r7, #40	@ 0x28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20005d10 	.word	0x20005d10

080093fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b088      	sub	sp, #32
 8009400:	af02      	add	r7, sp, #8
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009406:	4b23      	ldr	r3, [pc, #140]	@ (8009494 <prvProcessExpiredTimer+0x98>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	3304      	adds	r3, #4
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe fb01 	bl	8007a1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b00      	cmp	r3, #0
 8009426:	d023      	beq.n	8009470 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	699a      	ldr	r2, [r3, #24]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	18d1      	adds	r1, r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	6978      	ldr	r0, [r7, #20]
 8009436:	f000 f8d5 	bl	80095e4 <prvInsertTimerInActiveList>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d020      	beq.n	8009482 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009440:	2300      	movs	r3, #0
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	2300      	movs	r3, #0
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	2100      	movs	r1, #0
 800944a:	6978      	ldr	r0, [r7, #20]
 800944c:	f7ff ff88 	bl	8009360 <xTimerGenericCommand>
 8009450:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d114      	bne.n	8009482 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	60fb      	str	r3, [r7, #12]
}
 800946a:	bf00      	nop
 800946c:	bf00      	nop
 800946e:	e7fd      	b.n	800946c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009476:	f023 0301 	bic.w	r3, r3, #1
 800947a:	b2da      	uxtb	r2, r3
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	6978      	ldr	r0, [r7, #20]
 8009488:	4798      	blx	r3
}
 800948a:	bf00      	nop
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20005d08 	.word	0x20005d08

08009498 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094a0:	f107 0308 	add.w	r3, r7, #8
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 f859 	bl	800955c <prvGetNextExpireTime>
 80094aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	4619      	mov	r1, r3
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 f805 	bl	80094c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80094b6:	f000 f8d7 	bl	8009668 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094ba:	bf00      	nop
 80094bc:	e7f0      	b.n	80094a0 <prvTimerTask+0x8>
	...

080094c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094ca:	f7ff fa0f 	bl	80088ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094ce:	f107 0308 	add.w	r3, r7, #8
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 f866 	bl	80095a4 <prvSampleTimeNow>
 80094d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d130      	bne.n	8009542 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10a      	bne.n	80094fc <prvProcessTimerOrBlockTask+0x3c>
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d806      	bhi.n	80094fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094ee:	f7ff fa0b 	bl	8008908 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094f2:	68f9      	ldr	r1, [r7, #12]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff ff81 	bl	80093fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094fa:	e024      	b.n	8009546 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d008      	beq.n	8009514 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009502:	4b13      	ldr	r3, [pc, #76]	@ (8009550 <prvProcessTimerOrBlockTask+0x90>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <prvProcessTimerOrBlockTask+0x50>
 800950c:	2301      	movs	r3, #1
 800950e:	e000      	b.n	8009512 <prvProcessTimerOrBlockTask+0x52>
 8009510:	2300      	movs	r3, #0
 8009512:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009514:	4b0f      	ldr	r3, [pc, #60]	@ (8009554 <prvProcessTimerOrBlockTask+0x94>)
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	4619      	mov	r1, r3
 8009522:	f7fe ff6b 	bl	80083fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009526:	f7ff f9ef 	bl	8008908 <xTaskResumeAll>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009530:	4b09      	ldr	r3, [pc, #36]	@ (8009558 <prvProcessTimerOrBlockTask+0x98>)
 8009532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	f3bf 8f6f 	isb	sy
}
 8009540:	e001      	b.n	8009546 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009542:	f7ff f9e1 	bl	8008908 <xTaskResumeAll>
}
 8009546:	bf00      	nop
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20005d0c 	.word	0x20005d0c
 8009554:	20005d10 	.word	0x20005d10
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009564:	4b0e      	ldr	r3, [pc, #56]	@ (80095a0 <prvGetNextExpireTime+0x44>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <prvGetNextExpireTime+0x16>
 800956e:	2201      	movs	r2, #1
 8009570:	e000      	b.n	8009574 <prvGetNextExpireTime+0x18>
 8009572:	2200      	movs	r2, #0
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d105      	bne.n	800958c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009580:	4b07      	ldr	r3, [pc, #28]	@ (80095a0 <prvGetNextExpireTime+0x44>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60fb      	str	r3, [r7, #12]
 800958a:	e001      	b.n	8009590 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009590:	68fb      	ldr	r3, [r7, #12]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	20005d08 	.word	0x20005d08

080095a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80095ac:	f7ff fa4a 	bl	8008a44 <xTaskGetTickCount>
 80095b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80095b2:	4b0b      	ldr	r3, [pc, #44]	@ (80095e0 <prvSampleTimeNow+0x3c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d205      	bcs.n	80095c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095bc:	f000 f93a 	bl	8009834 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	e002      	b.n	80095ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095ce:	4a04      	ldr	r2, [pc, #16]	@ (80095e0 <prvSampleTimeNow+0x3c>)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095d4:	68fb      	ldr	r3, [r7, #12]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20005d18 	.word	0x20005d18

080095e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
 80095f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095f2:	2300      	movs	r3, #0
 80095f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	429a      	cmp	r2, r3
 8009608:	d812      	bhi.n	8009630 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	429a      	cmp	r2, r3
 8009616:	d302      	bcc.n	800961e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009618:	2301      	movs	r3, #1
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	e01b      	b.n	8009656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800961e:	4b10      	ldr	r3, [pc, #64]	@ (8009660 <prvInsertTimerInActiveList+0x7c>)
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f7fe f9be 	bl	80079aa <vListInsert>
 800962e:	e012      	b.n	8009656 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d206      	bcs.n	8009646 <prvInsertTimerInActiveList+0x62>
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d302      	bcc.n	8009646 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009640:	2301      	movs	r3, #1
 8009642:	617b      	str	r3, [r7, #20]
 8009644:	e007      	b.n	8009656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009646:	4b07      	ldr	r3, [pc, #28]	@ (8009664 <prvInsertTimerInActiveList+0x80>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3304      	adds	r3, #4
 800964e:	4619      	mov	r1, r3
 8009650:	4610      	mov	r0, r2
 8009652:	f7fe f9aa 	bl	80079aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009656:	697b      	ldr	r3, [r7, #20]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20005d0c 	.word	0x20005d0c
 8009664:	20005d08 	.word	0x20005d08

08009668 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08e      	sub	sp, #56	@ 0x38
 800966c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800966e:	e0ce      	b.n	800980e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	da19      	bge.n	80096aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009676:	1d3b      	adds	r3, r7, #4
 8009678:	3304      	adds	r3, #4
 800967a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800967c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10b      	bne.n	800969a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	61fb      	str	r3, [r7, #28]
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop
 8009698:	e7fd      	b.n	8009696 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096a0:	6850      	ldr	r0, [r2, #4]
 80096a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096a4:	6892      	ldr	r2, [r2, #8]
 80096a6:	4611      	mov	r1, r2
 80096a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f2c0 80ae 	blt.w	800980e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d004      	beq.n	80096c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c0:	3304      	adds	r3, #4
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fe f9aa 	bl	8007a1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096c8:	463b      	mov	r3, r7
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff ff6a 	bl	80095a4 <prvSampleTimeNow>
 80096d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	f200 8097 	bhi.w	8009808 <prvProcessReceivedCommands+0x1a0>
 80096da:	a201      	add	r2, pc, #4	@ (adr r2, 80096e0 <prvProcessReceivedCommands+0x78>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	08009709 	.word	0x08009709
 80096e4:	08009709 	.word	0x08009709
 80096e8:	08009709 	.word	0x08009709
 80096ec:	0800977f 	.word	0x0800977f
 80096f0:	08009793 	.word	0x08009793
 80096f4:	080097df 	.word	0x080097df
 80096f8:	08009709 	.word	0x08009709
 80096fc:	08009709 	.word	0x08009709
 8009700:	0800977f 	.word	0x0800977f
 8009704:	08009793 	.word	0x08009793
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800970e:	f043 0301 	orr.w	r3, r3, #1
 8009712:	b2da      	uxtb	r2, r3
 8009714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009716:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	18d1      	adds	r1, r2, r3
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009728:	f7ff ff5c 	bl	80095e4 <prvInsertTimerInActiveList>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d06c      	beq.n	800980c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009738:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800973a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009740:	f003 0304 	and.w	r3, r3, #4
 8009744:	2b00      	cmp	r3, #0
 8009746:	d061      	beq.n	800980c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	441a      	add	r2, r3
 8009750:	2300      	movs	r3, #0
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	2300      	movs	r3, #0
 8009756:	2100      	movs	r1, #0
 8009758:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800975a:	f7ff fe01 	bl	8009360 <xTimerGenericCommand>
 800975e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d152      	bne.n	800980c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	61bb      	str	r3, [r7, #24]
}
 8009778:	bf00      	nop
 800977a:	bf00      	nop
 800977c:	e7fd      	b.n	800977a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800977e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009784:	f023 0301 	bic.w	r3, r3, #1
 8009788:	b2da      	uxtb	r2, r3
 800978a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009790:	e03d      	b.n	800980e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009798:	f043 0301 	orr.w	r3, r3, #1
 800979c:	b2da      	uxtb	r2, r3
 800979e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10b      	bne.n	80097ca <prvProcessReceivedCommands+0x162>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	617b      	str	r3, [r7, #20]
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop
 80097c8:	e7fd      	b.n	80097c6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097cc:	699a      	ldr	r2, [r3, #24]
 80097ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d0:	18d1      	adds	r1, r2, r3
 80097d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097d8:	f7ff ff04 	bl	80095e4 <prvInsertTimerInActiveList>
					break;
 80097dc:	e017      	b.n	800980e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80097ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097ee:	f000 fbeb 	bl	8009fc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097f2:	e00c      	b.n	800980e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097fa:	f023 0301 	bic.w	r3, r3, #1
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009802:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009806:	e002      	b.n	800980e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009808:	bf00      	nop
 800980a:	e000      	b.n	800980e <prvProcessReceivedCommands+0x1a6>
					break;
 800980c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800980e:	4b08      	ldr	r3, [pc, #32]	@ (8009830 <prvProcessReceivedCommands+0x1c8>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	1d39      	adds	r1, r7, #4
 8009814:	2200      	movs	r2, #0
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe fbd4 	bl	8007fc4 <xQueueReceive>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	f47f af26 	bne.w	8009670 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop
 8009828:	3730      	adds	r7, #48	@ 0x30
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20005d10 	.word	0x20005d10

08009834 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800983a:	e049      	b.n	80098d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800983c:	4b2e      	ldr	r3, [pc, #184]	@ (80098f8 <prvSwitchTimerLists+0xc4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009846:	4b2c      	ldr	r3, [pc, #176]	@ (80098f8 <prvSwitchTimerLists+0xc4>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3304      	adds	r3, #4
 8009854:	4618      	mov	r0, r3
 8009856:	f7fe f8e1 	bl	8007a1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009868:	f003 0304 	and.w	r3, r3, #4
 800986c:	2b00      	cmp	r3, #0
 800986e:	d02f      	beq.n	80098d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	4413      	add	r3, r2
 8009878:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	429a      	cmp	r2, r3
 8009880:	d90e      	bls.n	80098a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800988e:	4b1a      	ldr	r3, [pc, #104]	@ (80098f8 <prvSwitchTimerLists+0xc4>)
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3304      	adds	r3, #4
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f7fe f886 	bl	80079aa <vListInsert>
 800989e:	e017      	b.n	80098d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098a0:	2300      	movs	r3, #0
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	2300      	movs	r3, #0
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	2100      	movs	r1, #0
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f7ff fd58 	bl	8009360 <xTimerGenericCommand>
 80098b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10b      	bne.n	80098d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80098b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	603b      	str	r3, [r7, #0]
}
 80098ca:	bf00      	nop
 80098cc:	bf00      	nop
 80098ce:	e7fd      	b.n	80098cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098d0:	4b09      	ldr	r3, [pc, #36]	@ (80098f8 <prvSwitchTimerLists+0xc4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1b0      	bne.n	800983c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098da:	4b07      	ldr	r3, [pc, #28]	@ (80098f8 <prvSwitchTimerLists+0xc4>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098e0:	4b06      	ldr	r3, [pc, #24]	@ (80098fc <prvSwitchTimerLists+0xc8>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a04      	ldr	r2, [pc, #16]	@ (80098f8 <prvSwitchTimerLists+0xc4>)
 80098e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098e8:	4a04      	ldr	r2, [pc, #16]	@ (80098fc <prvSwitchTimerLists+0xc8>)
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	6013      	str	r3, [r2, #0]
}
 80098ee:	bf00      	nop
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20005d08 	.word	0x20005d08
 80098fc:	20005d0c 	.word	0x20005d0c

08009900 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009906:	f000 f96f 	bl	8009be8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800990a:	4b15      	ldr	r3, [pc, #84]	@ (8009960 <prvCheckForValidListAndQueue+0x60>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d120      	bne.n	8009954 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009912:	4814      	ldr	r0, [pc, #80]	@ (8009964 <prvCheckForValidListAndQueue+0x64>)
 8009914:	f7fd fff8 	bl	8007908 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009918:	4813      	ldr	r0, [pc, #76]	@ (8009968 <prvCheckForValidListAndQueue+0x68>)
 800991a:	f7fd fff5 	bl	8007908 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800991e:	4b13      	ldr	r3, [pc, #76]	@ (800996c <prvCheckForValidListAndQueue+0x6c>)
 8009920:	4a10      	ldr	r2, [pc, #64]	@ (8009964 <prvCheckForValidListAndQueue+0x64>)
 8009922:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009924:	4b12      	ldr	r3, [pc, #72]	@ (8009970 <prvCheckForValidListAndQueue+0x70>)
 8009926:	4a10      	ldr	r2, [pc, #64]	@ (8009968 <prvCheckForValidListAndQueue+0x68>)
 8009928:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800992a:	2300      	movs	r3, #0
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	4b11      	ldr	r3, [pc, #68]	@ (8009974 <prvCheckForValidListAndQueue+0x74>)
 8009930:	4a11      	ldr	r2, [pc, #68]	@ (8009978 <prvCheckForValidListAndQueue+0x78>)
 8009932:	2110      	movs	r1, #16
 8009934:	200a      	movs	r0, #10
 8009936:	f7fe f905 	bl	8007b44 <xQueueGenericCreateStatic>
 800993a:	4603      	mov	r3, r0
 800993c:	4a08      	ldr	r2, [pc, #32]	@ (8009960 <prvCheckForValidListAndQueue+0x60>)
 800993e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009940:	4b07      	ldr	r3, [pc, #28]	@ (8009960 <prvCheckForValidListAndQueue+0x60>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d005      	beq.n	8009954 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009948:	4b05      	ldr	r3, [pc, #20]	@ (8009960 <prvCheckForValidListAndQueue+0x60>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	490b      	ldr	r1, [pc, #44]	@ (800997c <prvCheckForValidListAndQueue+0x7c>)
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe fd2a 	bl	80083a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009954:	f000 f97a 	bl	8009c4c <vPortExitCritical>
}
 8009958:	bf00      	nop
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20005d10 	.word	0x20005d10
 8009964:	20005ce0 	.word	0x20005ce0
 8009968:	20005cf4 	.word	0x20005cf4
 800996c:	20005d08 	.word	0x20005d08
 8009970:	20005d0c 	.word	0x20005d0c
 8009974:	20005dbc 	.word	0x20005dbc
 8009978:	20005d1c 	.word	0x20005d1c
 800997c:	08019e34 	.word	0x08019e34

08009980 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3b04      	subs	r3, #4
 8009990:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3b04      	subs	r3, #4
 800999e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f023 0201 	bic.w	r2, r3, #1
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3b04      	subs	r3, #4
 80099ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80099b0:	4a0c      	ldr	r2, [pc, #48]	@ (80099e4 <pxPortInitialiseStack+0x64>)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	3b14      	subs	r3, #20
 80099ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	3b04      	subs	r3, #4
 80099c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f06f 0202 	mvn.w	r2, #2
 80099ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3b20      	subs	r3, #32
 80099d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099d6:	68fb      	ldr	r3, [r7, #12]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	080099e9 	.word	0x080099e9

080099e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099f2:	4b13      	ldr	r3, [pc, #76]	@ (8009a40 <prvTaskExitError+0x58>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099fa:	d00b      	beq.n	8009a14 <prvTaskExitError+0x2c>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	60fb      	str	r3, [r7, #12]
}
 8009a0e:	bf00      	nop
 8009a10:	bf00      	nop
 8009a12:	e7fd      	b.n	8009a10 <prvTaskExitError+0x28>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	60bb      	str	r3, [r7, #8]
}
 8009a26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a28:	bf00      	nop
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0fc      	beq.n	8009a2a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20000010 	.word	0x20000010
	...

08009a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a50:	4b07      	ldr	r3, [pc, #28]	@ (8009a70 <pxCurrentTCBConst2>)
 8009a52:	6819      	ldr	r1, [r3, #0]
 8009a54:	6808      	ldr	r0, [r1, #0]
 8009a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5a:	f380 8809 	msr	PSP, r0
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f04f 0000 	mov.w	r0, #0
 8009a66:	f380 8811 	msr	BASEPRI, r0
 8009a6a:	4770      	bx	lr
 8009a6c:	f3af 8000 	nop.w

08009a70 <pxCurrentTCBConst2>:
 8009a70:	200057e0 	.word	0x200057e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop

08009a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a78:	4808      	ldr	r0, [pc, #32]	@ (8009a9c <prvPortStartFirstTask+0x24>)
 8009a7a:	6800      	ldr	r0, [r0, #0]
 8009a7c:	6800      	ldr	r0, [r0, #0]
 8009a7e:	f380 8808 	msr	MSP, r0
 8009a82:	f04f 0000 	mov.w	r0, #0
 8009a86:	f380 8814 	msr	CONTROL, r0
 8009a8a:	b662      	cpsie	i
 8009a8c:	b661      	cpsie	f
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	df00      	svc	0
 8009a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a9a:	bf00      	nop
 8009a9c:	e000ed08 	.word	0xe000ed08

08009aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009aa6:	4b47      	ldr	r3, [pc, #284]	@ (8009bc4 <xPortStartScheduler+0x124>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a47      	ldr	r2, [pc, #284]	@ (8009bc8 <xPortStartScheduler+0x128>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d10b      	bne.n	8009ac8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	613b      	str	r3, [r7, #16]
}
 8009ac2:	bf00      	nop
 8009ac4:	bf00      	nop
 8009ac6:	e7fd      	b.n	8009ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8009bc4 <xPortStartScheduler+0x124>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a3f      	ldr	r2, [pc, #252]	@ (8009bcc <xPortStartScheduler+0x12c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d10b      	bne.n	8009aea <xPortStartScheduler+0x4a>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	60fb      	str	r3, [r7, #12]
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	e7fd      	b.n	8009ae6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009aea:	4b39      	ldr	r3, [pc, #228]	@ (8009bd0 <xPortStartScheduler+0x130>)
 8009aec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	22ff      	movs	r2, #255	@ 0xff
 8009afa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	4b31      	ldr	r3, [pc, #196]	@ (8009bd4 <xPortStartScheduler+0x134>)
 8009b10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b12:	4b31      	ldr	r3, [pc, #196]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b14:	2207      	movs	r2, #7
 8009b16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b18:	e009      	b.n	8009b2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	4a2d      	ldr	r2, [pc, #180]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b2e:	78fb      	ldrb	r3, [r7, #3]
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b36:	2b80      	cmp	r3, #128	@ 0x80
 8009b38:	d0ef      	beq.n	8009b1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b3a:	4b27      	ldr	r3, [pc, #156]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f1c3 0307 	rsb	r3, r3, #7
 8009b42:	2b04      	cmp	r3, #4
 8009b44:	d00b      	beq.n	8009b5e <xPortStartScheduler+0xbe>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	60bb      	str	r3, [r7, #8]
}
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	e7fd      	b.n	8009b5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	4a1c      	ldr	r2, [pc, #112]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b68:	4b1b      	ldr	r3, [pc, #108]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b70:	4a19      	ldr	r2, [pc, #100]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b7c:	4b17      	ldr	r3, [pc, #92]	@ (8009bdc <xPortStartScheduler+0x13c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a16      	ldr	r2, [pc, #88]	@ (8009bdc <xPortStartScheduler+0x13c>)
 8009b82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b88:	4b14      	ldr	r3, [pc, #80]	@ (8009bdc <xPortStartScheduler+0x13c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a13      	ldr	r2, [pc, #76]	@ (8009bdc <xPortStartScheduler+0x13c>)
 8009b8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009b92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b94:	f000 f8da 	bl	8009d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b98:	4b11      	ldr	r3, [pc, #68]	@ (8009be0 <xPortStartScheduler+0x140>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b9e:	f000 f8f9 	bl	8009d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ba2:	4b10      	ldr	r3, [pc, #64]	@ (8009be4 <xPortStartScheduler+0x144>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8009be4 <xPortStartScheduler+0x144>)
 8009ba8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009bac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bae:	f7ff ff63 	bl	8009a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bb2:	f7ff f811 	bl	8008bd8 <vTaskSwitchContext>
	prvTaskExitError();
 8009bb6:	f7ff ff17 	bl	80099e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	e000ed00 	.word	0xe000ed00
 8009bc8:	410fc271 	.word	0x410fc271
 8009bcc:	410fc270 	.word	0x410fc270
 8009bd0:	e000e400 	.word	0xe000e400
 8009bd4:	20005e0c 	.word	0x20005e0c
 8009bd8:	20005e10 	.word	0x20005e10
 8009bdc:	e000ed20 	.word	0xe000ed20
 8009be0:	20000010 	.word	0x20000010
 8009be4:	e000ef34 	.word	0xe000ef34

08009be8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	607b      	str	r3, [r7, #4]
}
 8009c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c02:	4b10      	ldr	r3, [pc, #64]	@ (8009c44 <vPortEnterCritical+0x5c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3301      	adds	r3, #1
 8009c08:	4a0e      	ldr	r2, [pc, #56]	@ (8009c44 <vPortEnterCritical+0x5c>)
 8009c0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c44 <vPortEnterCritical+0x5c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d110      	bne.n	8009c36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c14:	4b0c      	ldr	r3, [pc, #48]	@ (8009c48 <vPortEnterCritical+0x60>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00b      	beq.n	8009c36 <vPortEnterCritical+0x4e>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	603b      	str	r3, [r7, #0]
}
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	e7fd      	b.n	8009c32 <vPortEnterCritical+0x4a>
	}
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000010 	.word	0x20000010
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c52:	4b12      	ldr	r3, [pc, #72]	@ (8009c9c <vPortExitCritical+0x50>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10b      	bne.n	8009c72 <vPortExitCritical+0x26>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	607b      	str	r3, [r7, #4]
}
 8009c6c:	bf00      	nop
 8009c6e:	bf00      	nop
 8009c70:	e7fd      	b.n	8009c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c72:	4b0a      	ldr	r3, [pc, #40]	@ (8009c9c <vPortExitCritical+0x50>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	4a08      	ldr	r2, [pc, #32]	@ (8009c9c <vPortExitCritical+0x50>)
 8009c7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c7c:	4b07      	ldr	r3, [pc, #28]	@ (8009c9c <vPortExitCritical+0x50>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d105      	bne.n	8009c90 <vPortExitCritical+0x44>
 8009c84:	2300      	movs	r3, #0
 8009c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	f383 8811 	msr	BASEPRI, r3
}
 8009c8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	20000010 	.word	0x20000010

08009ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ca0:	f3ef 8009 	mrs	r0, PSP
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	4b15      	ldr	r3, [pc, #84]	@ (8009d00 <pxCurrentTCBConst>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	f01e 0f10 	tst.w	lr, #16
 8009cb0:	bf08      	it	eq
 8009cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	6010      	str	r0, [r2, #0]
 8009cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009cc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009cc4:	f380 8811 	msr	BASEPRI, r0
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f7fe ff82 	bl	8008bd8 <vTaskSwitchContext>
 8009cd4:	f04f 0000 	mov.w	r0, #0
 8009cd8:	f380 8811 	msr	BASEPRI, r0
 8009cdc:	bc09      	pop	{r0, r3}
 8009cde:	6819      	ldr	r1, [r3, #0]
 8009ce0:	6808      	ldr	r0, [r1, #0]
 8009ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce6:	f01e 0f10 	tst.w	lr, #16
 8009cea:	bf08      	it	eq
 8009cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cf0:	f380 8809 	msr	PSP, r0
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	f3af 8000 	nop.w

08009d00 <pxCurrentTCBConst>:
 8009d00:	200057e0 	.word	0x200057e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop

08009d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	607b      	str	r3, [r7, #4]
}
 8009d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d22:	f7fe fe9f 	bl	8008a64 <xTaskIncrementTick>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d2c:	4b06      	ldr	r3, [pc, #24]	@ (8009d48 <xPortSysTickHandler+0x40>)
 8009d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	2300      	movs	r3, #0
 8009d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	f383 8811 	msr	BASEPRI, r3
}
 8009d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d50:	4b0b      	ldr	r3, [pc, #44]	@ (8009d80 <vPortSetupTimerInterrupt+0x34>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d56:	4b0b      	ldr	r3, [pc, #44]	@ (8009d84 <vPortSetupTimerInterrupt+0x38>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d88 <vPortSetupTimerInterrupt+0x3c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a0a      	ldr	r2, [pc, #40]	@ (8009d8c <vPortSetupTimerInterrupt+0x40>)
 8009d62:	fba2 2303 	umull	r2, r3, r2, r3
 8009d66:	099b      	lsrs	r3, r3, #6
 8009d68:	4a09      	ldr	r2, [pc, #36]	@ (8009d90 <vPortSetupTimerInterrupt+0x44>)
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d6e:	4b04      	ldr	r3, [pc, #16]	@ (8009d80 <vPortSetupTimerInterrupt+0x34>)
 8009d70:	2207      	movs	r2, #7
 8009d72:	601a      	str	r2, [r3, #0]
}
 8009d74:	bf00      	nop
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	e000e010 	.word	0xe000e010
 8009d84:	e000e018 	.word	0xe000e018
 8009d88:	20000004 	.word	0x20000004
 8009d8c:	10624dd3 	.word	0x10624dd3
 8009d90:	e000e014 	.word	0xe000e014

08009d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009da4 <vPortEnableVFP+0x10>
 8009d98:	6801      	ldr	r1, [r0, #0]
 8009d9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d9e:	6001      	str	r1, [r0, #0]
 8009da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009da2:	bf00      	nop
 8009da4:	e000ed88 	.word	0xe000ed88

08009da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009dae:	f3ef 8305 	mrs	r3, IPSR
 8009db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b0f      	cmp	r3, #15
 8009db8:	d915      	bls.n	8009de6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009dba:	4a18      	ldr	r2, [pc, #96]	@ (8009e1c <vPortValidateInterruptPriority+0x74>)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009dc4:	4b16      	ldr	r3, [pc, #88]	@ (8009e20 <vPortValidateInterruptPriority+0x78>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	7afa      	ldrb	r2, [r7, #11]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d20b      	bcs.n	8009de6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	607b      	str	r3, [r7, #4]
}
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
 8009de4:	e7fd      	b.n	8009de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009de6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e24 <vPortValidateInterruptPriority+0x7c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009dee:	4b0e      	ldr	r3, [pc, #56]	@ (8009e28 <vPortValidateInterruptPriority+0x80>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d90b      	bls.n	8009e0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	603b      	str	r3, [r7, #0]
}
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
 8009e0c:	e7fd      	b.n	8009e0a <vPortValidateInterruptPriority+0x62>
	}
 8009e0e:	bf00      	nop
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	e000e3f0 	.word	0xe000e3f0
 8009e20:	20005e0c 	.word	0x20005e0c
 8009e24:	e000ed0c 	.word	0xe000ed0c
 8009e28:	20005e10 	.word	0x20005e10

08009e2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08a      	sub	sp, #40	@ 0x28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e34:	2300      	movs	r3, #0
 8009e36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e38:	f7fe fd58 	bl	80088ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8009fb0 <pvPortMalloc+0x184>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e44:	f000 f924 	bl	800a090 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e48:	4b5a      	ldr	r3, [pc, #360]	@ (8009fb4 <pvPortMalloc+0x188>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4013      	ands	r3, r2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f040 8095 	bne.w	8009f80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d01e      	beq.n	8009e9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009e5c:	2208      	movs	r2, #8
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d015      	beq.n	8009e9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f023 0307 	bic.w	r3, r3, #7
 8009e74:	3308      	adds	r3, #8
 8009e76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00b      	beq.n	8009e9a <pvPortMalloc+0x6e>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	617b      	str	r3, [r7, #20]
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	e7fd      	b.n	8009e96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d06f      	beq.n	8009f80 <pvPortMalloc+0x154>
 8009ea0:	4b45      	ldr	r3, [pc, #276]	@ (8009fb8 <pvPortMalloc+0x18c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d86a      	bhi.n	8009f80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009eaa:	4b44      	ldr	r3, [pc, #272]	@ (8009fbc <pvPortMalloc+0x190>)
 8009eac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009eae:	4b43      	ldr	r3, [pc, #268]	@ (8009fbc <pvPortMalloc+0x190>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009eb4:	e004      	b.n	8009ec0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d903      	bls.n	8009ed2 <pvPortMalloc+0xa6>
 8009eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f1      	bne.n	8009eb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ed2:	4b37      	ldr	r3, [pc, #220]	@ (8009fb0 <pvPortMalloc+0x184>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d051      	beq.n	8009f80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2208      	movs	r2, #8
 8009ee2:	4413      	add	r3, r2
 8009ee4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	1ad2      	subs	r2, r2, r3
 8009ef6:	2308      	movs	r3, #8
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d920      	bls.n	8009f40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4413      	add	r3, r2
 8009f04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	f003 0307 	and.w	r3, r3, #7
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <pvPortMalloc+0xfc>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	613b      	str	r3, [r7, #16]
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	e7fd      	b.n	8009f24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	1ad2      	subs	r2, r2, r3
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f3a:	69b8      	ldr	r0, [r7, #24]
 8009f3c:	f000 f90a 	bl	800a154 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f40:	4b1d      	ldr	r3, [pc, #116]	@ (8009fb8 <pvPortMalloc+0x18c>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009fb8 <pvPortMalloc+0x18c>)
 8009f4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009fb8 <pvPortMalloc+0x18c>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	4b1b      	ldr	r3, [pc, #108]	@ (8009fc0 <pvPortMalloc+0x194>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d203      	bcs.n	8009f62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f5a:	4b17      	ldr	r3, [pc, #92]	@ (8009fb8 <pvPortMalloc+0x18c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a18      	ldr	r2, [pc, #96]	@ (8009fc0 <pvPortMalloc+0x194>)
 8009f60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	4b13      	ldr	r3, [pc, #76]	@ (8009fb4 <pvPortMalloc+0x188>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	431a      	orrs	r2, r3
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f76:	4b13      	ldr	r3, [pc, #76]	@ (8009fc4 <pvPortMalloc+0x198>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	4a11      	ldr	r2, [pc, #68]	@ (8009fc4 <pvPortMalloc+0x198>)
 8009f7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f80:	f7fe fcc2 	bl	8008908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00b      	beq.n	8009fa6 <pvPortMalloc+0x17a>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	60fb      	str	r3, [r7, #12]
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	e7fd      	b.n	8009fa2 <pvPortMalloc+0x176>
	return pvReturn;
 8009fa6:	69fb      	ldr	r3, [r7, #28]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3728      	adds	r7, #40	@ 0x28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20009a1c 	.word	0x20009a1c
 8009fb4:	20009a30 	.word	0x20009a30
 8009fb8:	20009a20 	.word	0x20009a20
 8009fbc:	20009a14 	.word	0x20009a14
 8009fc0:	20009a24 	.word	0x20009a24
 8009fc4:	20009a28 	.word	0x20009a28

08009fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d04f      	beq.n	800a07a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fda:	2308      	movs	r3, #8
 8009fdc:	425b      	negs	r3, r3
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	4b25      	ldr	r3, [pc, #148]	@ (800a084 <vPortFree+0xbc>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10b      	bne.n	800a00e <vPortFree+0x46>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	60fb      	str	r3, [r7, #12]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00b      	beq.n	800a02e <vPortFree+0x66>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	60bb      	str	r3, [r7, #8]
}
 800a028:	bf00      	nop
 800a02a:	bf00      	nop
 800a02c:	e7fd      	b.n	800a02a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	4b14      	ldr	r3, [pc, #80]	@ (800a084 <vPortFree+0xbc>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4013      	ands	r3, r2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d01e      	beq.n	800a07a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d11a      	bne.n	800a07a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	4b0e      	ldr	r3, [pc, #56]	@ (800a084 <vPortFree+0xbc>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	43db      	mvns	r3, r3
 800a04e:	401a      	ands	r2, r3
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a054:	f7fe fc4a 	bl	80088ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	4b0a      	ldr	r3, [pc, #40]	@ (800a088 <vPortFree+0xc0>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4413      	add	r3, r2
 800a062:	4a09      	ldr	r2, [pc, #36]	@ (800a088 <vPortFree+0xc0>)
 800a064:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a066:	6938      	ldr	r0, [r7, #16]
 800a068:	f000 f874 	bl	800a154 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a06c:	4b07      	ldr	r3, [pc, #28]	@ (800a08c <vPortFree+0xc4>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3301      	adds	r3, #1
 800a072:	4a06      	ldr	r2, [pc, #24]	@ (800a08c <vPortFree+0xc4>)
 800a074:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a076:	f7fe fc47 	bl	8008908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a07a:	bf00      	nop
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20009a30 	.word	0x20009a30
 800a088:	20009a20 	.word	0x20009a20
 800a08c:	20009a2c 	.word	0x20009a2c

0800a090 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a096:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a09a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a09c:	4b27      	ldr	r3, [pc, #156]	@ (800a13c <prvHeapInit+0xac>)
 800a09e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f003 0307 	and.w	r3, r3, #7
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00c      	beq.n	800a0c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	3307      	adds	r3, #7
 800a0ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 0307 	bic.w	r3, r3, #7
 800a0b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	4a1f      	ldr	r2, [pc, #124]	@ (800a13c <prvHeapInit+0xac>)
 800a0c0:	4413      	add	r3, r2
 800a0c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a140 <prvHeapInit+0xb0>)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a140 <prvHeapInit+0xb0>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	4413      	add	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0dc:	2208      	movs	r2, #8
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	1a9b      	subs	r3, r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f023 0307 	bic.w	r3, r3, #7
 800a0ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	4a15      	ldr	r2, [pc, #84]	@ (800a144 <prvHeapInit+0xb4>)
 800a0f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0f2:	4b14      	ldr	r3, [pc, #80]	@ (800a144 <prvHeapInit+0xb4>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0fa:	4b12      	ldr	r3, [pc, #72]	@ (800a144 <prvHeapInit+0xb4>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	1ad2      	subs	r2, r2, r3
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a110:	4b0c      	ldr	r3, [pc, #48]	@ (800a144 <prvHeapInit+0xb4>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	4a0a      	ldr	r2, [pc, #40]	@ (800a148 <prvHeapInit+0xb8>)
 800a11e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	4a09      	ldr	r2, [pc, #36]	@ (800a14c <prvHeapInit+0xbc>)
 800a126:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a128:	4b09      	ldr	r3, [pc, #36]	@ (800a150 <prvHeapInit+0xc0>)
 800a12a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a12e:	601a      	str	r2, [r3, #0]
}
 800a130:	bf00      	nop
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	20005e14 	.word	0x20005e14
 800a140:	20009a14 	.word	0x20009a14
 800a144:	20009a1c 	.word	0x20009a1c
 800a148:	20009a24 	.word	0x20009a24
 800a14c:	20009a20 	.word	0x20009a20
 800a150:	20009a30 	.word	0x20009a30

0800a154 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a15c:	4b28      	ldr	r3, [pc, #160]	@ (800a200 <prvInsertBlockIntoFreeList+0xac>)
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	e002      	b.n	800a168 <prvInsertBlockIntoFreeList+0x14>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d8f7      	bhi.n	800a162 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	4413      	add	r3, r2
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d108      	bne.n	800a196 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	441a      	add	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	441a      	add	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d118      	bne.n	800a1dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4b15      	ldr	r3, [pc, #84]	@ (800a204 <prvInsertBlockIntoFreeList+0xb0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d00d      	beq.n	800a1d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	441a      	add	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	e008      	b.n	800a1e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a204 <prvInsertBlockIntoFreeList+0xb0>)
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	e003      	b.n	800a1e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d002      	beq.n	800a1f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1f2:	bf00      	nop
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	20009a14 	.word	0x20009a14
 800a204:	20009a1c 	.word	0x20009a1c

0800a208 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a208:	4b04      	ldr	r3, [pc, #16]	@ (800a21c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	b10a      	cbz	r2, 800a212 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a20e:	4803      	ldr	r0, [pc, #12]	@ (800a21c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a210:	4770      	bx	lr
 800a212:	4a03      	ldr	r2, [pc, #12]	@ (800a220 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a214:	4801      	ldr	r0, [pc, #4]	@ (800a21c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a216:	6812      	ldr	r2, [r2, #0]
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	4770      	bx	lr
 800a21c:	2000001c 	.word	0x2000001c
 800a220:	20000308 	.word	0x20000308

0800a224 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a224:	4a02      	ldr	r2, [pc, #8]	@ (800a230 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a226:	4b03      	ldr	r3, [pc, #12]	@ (800a234 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a228:	6812      	ldr	r2, [r2, #0]
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	20000308 	.word	0x20000308
 800a234:	2000001c 	.word	0x2000001c

0800a238 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a238:	f003 be98 	b.w	800df6c <geometry_msgs__msg__Twist__init>

0800a23c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a23c:	f003 beba 	b.w	800dfb4 <geometry_msgs__msg__Twist__fini>

0800a240 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a240:	b510      	push	{r4, lr}
 800a242:	f000 f819 	bl	800a278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a246:	4c07      	ldr	r4, [pc, #28]	@ (800a264 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a248:	60e0      	str	r0, [r4, #12]
 800a24a:	f000 f815 	bl	800a278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a24e:	4b06      	ldr	r3, [pc, #24]	@ (800a268 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a250:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	b10a      	cbz	r2, 800a25a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a256:	4804      	ldr	r0, [pc, #16]	@ (800a268 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a258:	bd10      	pop	{r4, pc}
 800a25a:	4a04      	ldr	r2, [pc, #16]	@ (800a26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a25c:	4802      	ldr	r0, [pc, #8]	@ (800a268 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a25e:	6812      	ldr	r2, [r2, #0]
 800a260:	601a      	str	r2, [r3, #0]
 800a262:	bd10      	pop	{r4, pc}
 800a264:	20000028 	.word	0x20000028
 800a268:	200000a0 	.word	0x200000a0
 800a26c:	2000030c 	.word	0x2000030c

0800a270 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a270:	f003 beac 	b.w	800dfcc <geometry_msgs__msg__Vector3__init>

0800a274 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a274:	f003 beae 	b.w	800dfd4 <geometry_msgs__msg__Vector3__fini>

0800a278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a278:	4b04      	ldr	r3, [pc, #16]	@ (800a28c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	b10a      	cbz	r2, 800a282 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a27e:	4803      	ldr	r0, [pc, #12]	@ (800a28c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a280:	4770      	bx	lr
 800a282:	4a03      	ldr	r2, [pc, #12]	@ (800a290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a284:	4801      	ldr	r0, [pc, #4]	@ (800a28c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a286:	6812      	ldr	r2, [r2, #0]
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	4770      	bx	lr
 800a28c:	20000160 	.word	0x20000160
 800a290:	2000030c 	.word	0x2000030c

0800a294 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	4604      	mov	r4, r0
 800a298:	b148      	cbz	r0, 800a2ae <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a29a:	460d      	mov	r5, r1
 800a29c:	f000 f86e 	bl	800a37c <get_serialized_size_geometry_msgs__msg__Vector3>
 800a2a0:	4606      	mov	r6, r0
 800a2a2:	1829      	adds	r1, r5, r0
 800a2a4:	f104 0018 	add.w	r0, r4, #24
 800a2a8:	f000 f868 	bl	800a37c <get_serialized_size_geometry_msgs__msg__Vector3>
 800a2ac:	4430      	add	r0, r6
 800a2ae:	bd70      	pop	{r4, r5, r6, pc}

0800a2b0 <_Twist__cdr_deserialize>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	b189      	cbz	r1, 800a2da <_Twist__cdr_deserialize+0x2a>
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	f000 f8ec 	bl	800a494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a2bc:	6843      	ldr	r3, [r0, #4]
 800a2be:	4621      	mov	r1, r4
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	4798      	blx	r3
 800a2c6:	f000 f8e5 	bl	800a494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a2ca:	6843      	ldr	r3, [r0, #4]
 800a2cc:	f104 0118 	add.w	r1, r4, #24
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2d8:	4718      	bx	r3
 800a2da:	4608      	mov	r0, r1
 800a2dc:	bd70      	pop	{r4, r5, r6, pc}
 800a2de:	bf00      	nop

0800a2e0 <_Twist__cdr_serialize>:
 800a2e0:	b510      	push	{r4, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	9101      	str	r1, [sp, #4]
 800a2e6:	b190      	cbz	r0, 800a30e <_Twist__cdr_serialize+0x2e>
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	f000 f8d3 	bl	800a494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a2ee:	6843      	ldr	r3, [r0, #4]
 800a2f0:	9901      	ldr	r1, [sp, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4798      	blx	r3
 800a2f8:	f000 f8cc 	bl	800a494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a2fc:	6843      	ldr	r3, [r0, #4]
 800a2fe:	9901      	ldr	r1, [sp, #4]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f104 0018 	add.w	r0, r4, #24
 800a306:	b002      	add	sp, #8
 800a308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a30c:	4718      	bx	r3
 800a30e:	b002      	add	sp, #8
 800a310:	bd10      	pop	{r4, pc}
 800a312:	bf00      	nop

0800a314 <_Twist__get_serialized_size>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4604      	mov	r4, r0
 800a318:	b148      	cbz	r0, 800a32e <_Twist__get_serialized_size+0x1a>
 800a31a:	2100      	movs	r1, #0
 800a31c:	f000 f82e 	bl	800a37c <get_serialized_size_geometry_msgs__msg__Vector3>
 800a320:	4605      	mov	r5, r0
 800a322:	4601      	mov	r1, r0
 800a324:	f104 0018 	add.w	r0, r4, #24
 800a328:	f000 f828 	bl	800a37c <get_serialized_size_geometry_msgs__msg__Vector3>
 800a32c:	4428      	add	r0, r5
 800a32e:	bd38      	pop	{r3, r4, r5, pc}

0800a330 <_Twist__max_serialized_size>:
 800a330:	b510      	push	{r4, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	2301      	movs	r3, #1
 800a336:	2100      	movs	r1, #0
 800a338:	f10d 0007 	add.w	r0, sp, #7
 800a33c:	f88d 3007 	strb.w	r3, [sp, #7]
 800a340:	f000 f88c 	bl	800a45c <max_serialized_size_geometry_msgs__msg__Vector3>
 800a344:	4604      	mov	r4, r0
 800a346:	4601      	mov	r1, r0
 800a348:	f10d 0007 	add.w	r0, sp, #7
 800a34c:	f000 f886 	bl	800a45c <max_serialized_size_geometry_msgs__msg__Vector3>
 800a350:	4420      	add	r0, r4
 800a352:	b002      	add	sp, #8
 800a354:	bd10      	pop	{r4, pc}
 800a356:	bf00      	nop

0800a358 <max_serialized_size_geometry_msgs__msg__Twist>:
 800a358:	2301      	movs	r3, #1
 800a35a:	b570      	push	{r4, r5, r6, lr}
 800a35c:	7003      	strb	r3, [r0, #0]
 800a35e:	4605      	mov	r5, r0
 800a360:	460e      	mov	r6, r1
 800a362:	f000 f87b 	bl	800a45c <max_serialized_size_geometry_msgs__msg__Vector3>
 800a366:	4604      	mov	r4, r0
 800a368:	1831      	adds	r1, r6, r0
 800a36a:	4628      	mov	r0, r5
 800a36c:	f000 f876 	bl	800a45c <max_serialized_size_geometry_msgs__msg__Vector3>
 800a370:	4420      	add	r0, r4
 800a372:	bd70      	pop	{r4, r5, r6, pc}

0800a374 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a374:	4800      	ldr	r0, [pc, #0]	@ (800a378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a376:	4770      	bx	lr
 800a378:	2000016c 	.word	0x2000016c

0800a37c <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a37c:	b1b8      	cbz	r0, 800a3ae <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a37e:	b538      	push	{r3, r4, r5, lr}
 800a380:	460d      	mov	r5, r1
 800a382:	4628      	mov	r0, r5
 800a384:	2108      	movs	r1, #8
 800a386:	f001 fb9d 	bl	800bac4 <ucdr_alignment>
 800a38a:	f105 0308 	add.w	r3, r5, #8
 800a38e:	181c      	adds	r4, r3, r0
 800a390:	2108      	movs	r1, #8
 800a392:	4620      	mov	r0, r4
 800a394:	f001 fb96 	bl	800bac4 <ucdr_alignment>
 800a398:	3008      	adds	r0, #8
 800a39a:	4404      	add	r4, r0
 800a39c:	2108      	movs	r1, #8
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f001 fb90 	bl	800bac4 <ucdr_alignment>
 800a3a4:	f1c5 0508 	rsb	r5, r5, #8
 800a3a8:	4428      	add	r0, r5
 800a3aa:	4420      	add	r0, r4
 800a3ac:	bd38      	pop	{r3, r4, r5, pc}
 800a3ae:	4770      	bx	lr

0800a3b0 <_Vector3__cdr_deserialize>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	b171      	cbz	r1, 800a3d4 <_Vector3__cdr_deserialize+0x24>
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	f001 f998 	bl	800b6ec <ucdr_deserialize_double>
 800a3bc:	f104 0108 	add.w	r1, r4, #8
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	f001 f993 	bl	800b6ec <ucdr_deserialize_double>
 800a3c6:	f104 0110 	add.w	r1, r4, #16
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3d0:	f001 b98c 	b.w	800b6ec <ucdr_deserialize_double>
 800a3d4:	4608      	mov	r0, r1
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}

0800a3d8 <_Vector3__cdr_serialize>:
 800a3d8:	b198      	cbz	r0, 800a402 <_Vector3__cdr_serialize+0x2a>
 800a3da:	b538      	push	{r3, r4, r5, lr}
 800a3dc:	ed90 0b00 	vldr	d0, [r0]
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	f000 ffdf 	bl	800b3a8 <ucdr_serialize_double>
 800a3ea:	ed94 0b02 	vldr	d0, [r4, #8]
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f000 ffda 	bl	800b3a8 <ucdr_serialize_double>
 800a3f4:	ed94 0b04 	vldr	d0, [r4, #16]
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3fe:	f000 bfd3 	b.w	800b3a8 <ucdr_serialize_double>
 800a402:	4770      	bx	lr

0800a404 <_Vector3__get_serialized_size>:
 800a404:	b198      	cbz	r0, 800a42e <_Vector3__get_serialized_size+0x2a>
 800a406:	b510      	push	{r4, lr}
 800a408:	2108      	movs	r1, #8
 800a40a:	2000      	movs	r0, #0
 800a40c:	f001 fb5a 	bl	800bac4 <ucdr_alignment>
 800a410:	f100 0408 	add.w	r4, r0, #8
 800a414:	2108      	movs	r1, #8
 800a416:	4620      	mov	r0, r4
 800a418:	f001 fb54 	bl	800bac4 <ucdr_alignment>
 800a41c:	3008      	adds	r0, #8
 800a41e:	4404      	add	r4, r0
 800a420:	2108      	movs	r1, #8
 800a422:	4620      	mov	r0, r4
 800a424:	f001 fb4e 	bl	800bac4 <ucdr_alignment>
 800a428:	3008      	adds	r0, #8
 800a42a:	4420      	add	r0, r4
 800a42c:	bd10      	pop	{r4, pc}
 800a42e:	4770      	bx	lr

0800a430 <_Vector3__max_serialized_size>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	2108      	movs	r1, #8
 800a434:	2000      	movs	r0, #0
 800a436:	f001 fb45 	bl	800bac4 <ucdr_alignment>
 800a43a:	f100 0508 	add.w	r5, r0, #8
 800a43e:	2108      	movs	r1, #8
 800a440:	4628      	mov	r0, r5
 800a442:	f001 fb3f 	bl	800bac4 <ucdr_alignment>
 800a446:	f100 0408 	add.w	r4, r0, #8
 800a44a:	442c      	add	r4, r5
 800a44c:	2108      	movs	r1, #8
 800a44e:	4620      	mov	r0, r4
 800a450:	f001 fb38 	bl	800bac4 <ucdr_alignment>
 800a454:	3008      	adds	r0, #8
 800a456:	4420      	add	r0, r4
 800a458:	bd38      	pop	{r3, r4, r5, pc}
 800a45a:	bf00      	nop

0800a45c <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	2301      	movs	r3, #1
 800a460:	460c      	mov	r4, r1
 800a462:	7003      	strb	r3, [r0, #0]
 800a464:	2108      	movs	r1, #8
 800a466:	4620      	mov	r0, r4
 800a468:	f001 fb2c 	bl	800bac4 <ucdr_alignment>
 800a46c:	f104 0508 	add.w	r5, r4, #8
 800a470:	1946      	adds	r6, r0, r5
 800a472:	2108      	movs	r1, #8
 800a474:	4630      	mov	r0, r6
 800a476:	f001 fb25 	bl	800bac4 <ucdr_alignment>
 800a47a:	f100 0508 	add.w	r5, r0, #8
 800a47e:	4435      	add	r5, r6
 800a480:	2108      	movs	r1, #8
 800a482:	4628      	mov	r0, r5
 800a484:	f001 fb1e 	bl	800bac4 <ucdr_alignment>
 800a488:	f1c4 0408 	rsb	r4, r4, #8
 800a48c:	4420      	add	r0, r4
 800a48e:	4428      	add	r0, r5
 800a490:	bd70      	pop	{r4, r5, r6, pc}
 800a492:	bf00      	nop

0800a494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a494:	4800      	ldr	r0, [pc, #0]	@ (800a498 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a496:	4770      	bx	lr
 800a498:	20000194 	.word	0x20000194

0800a49c <ucdr_serialize_bool>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	460d      	mov	r5, r1
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	f001 fac2 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a4a8:	b148      	cbz	r0, 800a4be <ucdr_serialize_bool+0x22>
 800a4aa:	68a3      	ldr	r3, [r4, #8]
 800a4ac:	701d      	strb	r5, [r3, #0]
 800a4ae:	68a2      	ldr	r2, [r4, #8]
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	440a      	add	r2, r1
 800a4b6:	440b      	add	r3, r1
 800a4b8:	60a2      	str	r2, [r4, #8]
 800a4ba:	6123      	str	r3, [r4, #16]
 800a4bc:	7561      	strb	r1, [r4, #21]
 800a4be:	7da0      	ldrb	r0, [r4, #22]
 800a4c0:	f080 0001 	eor.w	r0, r0, #1
 800a4c4:	bd38      	pop	{r3, r4, r5, pc}
 800a4c6:	bf00      	nop

0800a4c8 <ucdr_deserialize_bool>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	f001 faac 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a4d4:	b160      	cbz	r0, 800a4f0 <ucdr_deserialize_bool+0x28>
 800a4d6:	68a2      	ldr	r2, [r4, #8]
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a4de:	3900      	subs	r1, #0
 800a4e0:	bf18      	it	ne
 800a4e2:	2101      	movne	r1, #1
 800a4e4:	7029      	strb	r1, [r5, #0]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	60a2      	str	r2, [r4, #8]
 800a4ec:	6123      	str	r3, [r4, #16]
 800a4ee:	7561      	strb	r1, [r4, #21]
 800a4f0:	7da0      	ldrb	r0, [r4, #22]
 800a4f2:	f080 0001 	eor.w	r0, r0, #1
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}

0800a4f8 <ucdr_serialize_uint8_t>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	460d      	mov	r5, r1
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	4604      	mov	r4, r0
 800a500:	f001 fa94 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a504:	b148      	cbz	r0, 800a51a <ucdr_serialize_uint8_t+0x22>
 800a506:	68a3      	ldr	r3, [r4, #8]
 800a508:	701d      	strb	r5, [r3, #0]
 800a50a:	68a2      	ldr	r2, [r4, #8]
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	2101      	movs	r1, #1
 800a510:	440a      	add	r2, r1
 800a512:	440b      	add	r3, r1
 800a514:	60a2      	str	r2, [r4, #8]
 800a516:	6123      	str	r3, [r4, #16]
 800a518:	7561      	strb	r1, [r4, #21]
 800a51a:	7da0      	ldrb	r0, [r4, #22]
 800a51c:	f080 0001 	eor.w	r0, r0, #1
 800a520:	bd38      	pop	{r3, r4, r5, pc}
 800a522:	bf00      	nop

0800a524 <ucdr_deserialize_uint8_t>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	460d      	mov	r5, r1
 800a528:	2101      	movs	r1, #1
 800a52a:	4604      	mov	r4, r0
 800a52c:	f001 fa7e 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a530:	b150      	cbz	r0, 800a548 <ucdr_deserialize_uint8_t+0x24>
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	702b      	strb	r3, [r5, #0]
 800a538:	68a2      	ldr	r2, [r4, #8]
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	2101      	movs	r1, #1
 800a53e:	440a      	add	r2, r1
 800a540:	440b      	add	r3, r1
 800a542:	60a2      	str	r2, [r4, #8]
 800a544:	6123      	str	r3, [r4, #16]
 800a546:	7561      	strb	r1, [r4, #21]
 800a548:	7da0      	ldrb	r0, [r4, #22]
 800a54a:	f080 0001 	eor.w	r0, r0, #1
 800a54e:	bd38      	pop	{r3, r4, r5, pc}

0800a550 <ucdr_serialize_uint16_t>:
 800a550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	460b      	mov	r3, r1
 800a558:	2102      	movs	r1, #2
 800a55a:	4604      	mov	r4, r0
 800a55c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a560:	f001 fab8 	bl	800bad4 <ucdr_buffer_alignment>
 800a564:	4601      	mov	r1, r0
 800a566:	4620      	mov	r0, r4
 800a568:	7d67      	ldrb	r7, [r4, #21]
 800a56a:	f001 faf7 	bl	800bb5c <ucdr_advance_buffer>
 800a56e:	2102      	movs	r1, #2
 800a570:	4620      	mov	r0, r4
 800a572:	f001 fa4f 	bl	800ba14 <ucdr_check_buffer_available_for>
 800a576:	bb78      	cbnz	r0, 800a5d8 <ucdr_serialize_uint16_t+0x88>
 800a578:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a57c:	42ab      	cmp	r3, r5
 800a57e:	d926      	bls.n	800a5ce <ucdr_serialize_uint16_t+0x7e>
 800a580:	1b5e      	subs	r6, r3, r5
 800a582:	60a3      	str	r3, [r4, #8]
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	f1c6 0802 	rsb	r8, r6, #2
 800a58a:	4433      	add	r3, r6
 800a58c:	6123      	str	r3, [r4, #16]
 800a58e:	4641      	mov	r1, r8
 800a590:	4620      	mov	r0, r4
 800a592:	f001 fa4b 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a596:	2800      	cmp	r0, #0
 800a598:	d03b      	beq.n	800a612 <ucdr_serialize_uint16_t+0xc2>
 800a59a:	7d23      	ldrb	r3, [r4, #20]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d04a      	beq.n	800a636 <ucdr_serialize_uint16_t+0xe6>
 800a5a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a5a4:	702b      	strb	r3, [r5, #0]
 800a5a6:	2e00      	cmp	r6, #0
 800a5a8:	d040      	beq.n	800a62c <ucdr_serialize_uint16_t+0xdc>
 800a5aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a5ae:	706b      	strb	r3, [r5, #1]
 800a5b0:	6923      	ldr	r3, [r4, #16]
 800a5b2:	68a2      	ldr	r2, [r4, #8]
 800a5b4:	7da0      	ldrb	r0, [r4, #22]
 800a5b6:	3302      	adds	r3, #2
 800a5b8:	1b9e      	subs	r6, r3, r6
 800a5ba:	4442      	add	r2, r8
 800a5bc:	2302      	movs	r3, #2
 800a5be:	f080 0001 	eor.w	r0, r0, #1
 800a5c2:	60a2      	str	r2, [r4, #8]
 800a5c4:	6126      	str	r6, [r4, #16]
 800a5c6:	7563      	strb	r3, [r4, #21]
 800a5c8:	b002      	add	sp, #8
 800a5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ce:	2102      	movs	r1, #2
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f001 fa2b 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a5d6:	b190      	cbz	r0, 800a5fe <ucdr_serialize_uint16_t+0xae>
 800a5d8:	7d23      	ldrb	r3, [r4, #20]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	68a3      	ldr	r3, [r4, #8]
 800a5de:	d014      	beq.n	800a60a <ucdr_serialize_uint16_t+0xba>
 800a5e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a5e4:	701a      	strb	r2, [r3, #0]
 800a5e6:	68a3      	ldr	r3, [r4, #8]
 800a5e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a5ec:	705a      	strb	r2, [r3, #1]
 800a5ee:	68a2      	ldr	r2, [r4, #8]
 800a5f0:	6923      	ldr	r3, [r4, #16]
 800a5f2:	3202      	adds	r2, #2
 800a5f4:	3302      	adds	r3, #2
 800a5f6:	2102      	movs	r1, #2
 800a5f8:	60a2      	str	r2, [r4, #8]
 800a5fa:	6123      	str	r3, [r4, #16]
 800a5fc:	7561      	strb	r1, [r4, #21]
 800a5fe:	7da0      	ldrb	r0, [r4, #22]
 800a600:	f080 0001 	eor.w	r0, r0, #1
 800a604:	b002      	add	sp, #8
 800a606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a60a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a60e:	801a      	strh	r2, [r3, #0]
 800a610:	e7ed      	b.n	800a5ee <ucdr_serialize_uint16_t+0x9e>
 800a612:	68a2      	ldr	r2, [r4, #8]
 800a614:	6923      	ldr	r3, [r4, #16]
 800a616:	7da0      	ldrb	r0, [r4, #22]
 800a618:	7567      	strb	r7, [r4, #21]
 800a61a:	1b92      	subs	r2, r2, r6
 800a61c:	1b9b      	subs	r3, r3, r6
 800a61e:	f080 0001 	eor.w	r0, r0, #1
 800a622:	60a2      	str	r2, [r4, #8]
 800a624:	6123      	str	r3, [r4, #16]
 800a626:	b002      	add	sp, #8
 800a628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a62c:	68a3      	ldr	r3, [r4, #8]
 800a62e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a632:	701a      	strb	r2, [r3, #0]
 800a634:	e7bc      	b.n	800a5b0 <ucdr_serialize_uint16_t+0x60>
 800a636:	4628      	mov	r0, r5
 800a638:	f10d 0506 	add.w	r5, sp, #6
 800a63c:	4629      	mov	r1, r5
 800a63e:	4632      	mov	r2, r6
 800a640:	f00e fd43 	bl	80190ca <memcpy>
 800a644:	68a0      	ldr	r0, [r4, #8]
 800a646:	4642      	mov	r2, r8
 800a648:	19a9      	adds	r1, r5, r6
 800a64a:	f00e fd3e 	bl	80190ca <memcpy>
 800a64e:	e7af      	b.n	800a5b0 <ucdr_serialize_uint16_t+0x60>

0800a650 <ucdr_serialize_endian_uint16_t>:
 800a650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a654:	b083      	sub	sp, #12
 800a656:	460d      	mov	r5, r1
 800a658:	2102      	movs	r1, #2
 800a65a:	4604      	mov	r4, r0
 800a65c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a660:	f001 fa38 	bl	800bad4 <ucdr_buffer_alignment>
 800a664:	4601      	mov	r1, r0
 800a666:	4620      	mov	r0, r4
 800a668:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a66c:	f001 fa76 	bl	800bb5c <ucdr_advance_buffer>
 800a670:	2102      	movs	r1, #2
 800a672:	4620      	mov	r0, r4
 800a674:	f001 f9ce 	bl	800ba14 <ucdr_check_buffer_available_for>
 800a678:	bb70      	cbnz	r0, 800a6d8 <ucdr_serialize_endian_uint16_t+0x88>
 800a67a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a67e:	42be      	cmp	r6, r7
 800a680:	d925      	bls.n	800a6ce <ucdr_serialize_endian_uint16_t+0x7e>
 800a682:	6923      	ldr	r3, [r4, #16]
 800a684:	60a6      	str	r6, [r4, #8]
 800a686:	1bf6      	subs	r6, r6, r7
 800a688:	4433      	add	r3, r6
 800a68a:	f1c6 0902 	rsb	r9, r6, #2
 800a68e:	6123      	str	r3, [r4, #16]
 800a690:	4649      	mov	r1, r9
 800a692:	4620      	mov	r0, r4
 800a694:	f001 f9ca 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d039      	beq.n	800a710 <ucdr_serialize_endian_uint16_t+0xc0>
 800a69c:	2d01      	cmp	r5, #1
 800a69e:	d04a      	beq.n	800a736 <ucdr_serialize_endian_uint16_t+0xe6>
 800a6a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a6a4:	703b      	strb	r3, [r7, #0]
 800a6a6:	2e00      	cmp	r6, #0
 800a6a8:	d040      	beq.n	800a72c <ucdr_serialize_endian_uint16_t+0xdc>
 800a6aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a6ae:	707b      	strb	r3, [r7, #1]
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	68a2      	ldr	r2, [r4, #8]
 800a6b4:	7da0      	ldrb	r0, [r4, #22]
 800a6b6:	3302      	adds	r3, #2
 800a6b8:	444a      	add	r2, r9
 800a6ba:	1b9b      	subs	r3, r3, r6
 800a6bc:	2102      	movs	r1, #2
 800a6be:	f080 0001 	eor.w	r0, r0, #1
 800a6c2:	60a2      	str	r2, [r4, #8]
 800a6c4:	6123      	str	r3, [r4, #16]
 800a6c6:	7561      	strb	r1, [r4, #21]
 800a6c8:	b003      	add	sp, #12
 800a6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ce:	2102      	movs	r1, #2
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f001 f9ab 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a6d6:	b188      	cbz	r0, 800a6fc <ucdr_serialize_endian_uint16_t+0xac>
 800a6d8:	2d01      	cmp	r5, #1
 800a6da:	68a3      	ldr	r3, [r4, #8]
 800a6dc:	d014      	beq.n	800a708 <ucdr_serialize_endian_uint16_t+0xb8>
 800a6de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a6e2:	701a      	strb	r2, [r3, #0]
 800a6e4:	68a3      	ldr	r3, [r4, #8]
 800a6e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a6ea:	705a      	strb	r2, [r3, #1]
 800a6ec:	68a2      	ldr	r2, [r4, #8]
 800a6ee:	6923      	ldr	r3, [r4, #16]
 800a6f0:	3202      	adds	r2, #2
 800a6f2:	3302      	adds	r3, #2
 800a6f4:	2102      	movs	r1, #2
 800a6f6:	60a2      	str	r2, [r4, #8]
 800a6f8:	6123      	str	r3, [r4, #16]
 800a6fa:	7561      	strb	r1, [r4, #21]
 800a6fc:	7da0      	ldrb	r0, [r4, #22]
 800a6fe:	f080 0001 	eor.w	r0, r0, #1
 800a702:	b003      	add	sp, #12
 800a704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a708:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a70c:	801a      	strh	r2, [r3, #0]
 800a70e:	e7ed      	b.n	800a6ec <ucdr_serialize_endian_uint16_t+0x9c>
 800a710:	68a2      	ldr	r2, [r4, #8]
 800a712:	6923      	ldr	r3, [r4, #16]
 800a714:	7da0      	ldrb	r0, [r4, #22]
 800a716:	f884 8015 	strb.w	r8, [r4, #21]
 800a71a:	1b92      	subs	r2, r2, r6
 800a71c:	1b9b      	subs	r3, r3, r6
 800a71e:	f080 0001 	eor.w	r0, r0, #1
 800a722:	60a2      	str	r2, [r4, #8]
 800a724:	6123      	str	r3, [r4, #16]
 800a726:	b003      	add	sp, #12
 800a728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a72c:	68a3      	ldr	r3, [r4, #8]
 800a72e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a732:	701a      	strb	r2, [r3, #0]
 800a734:	e7bc      	b.n	800a6b0 <ucdr_serialize_endian_uint16_t+0x60>
 800a736:	f10d 0506 	add.w	r5, sp, #6
 800a73a:	4629      	mov	r1, r5
 800a73c:	4632      	mov	r2, r6
 800a73e:	4638      	mov	r0, r7
 800a740:	f00e fcc3 	bl	80190ca <memcpy>
 800a744:	68a0      	ldr	r0, [r4, #8]
 800a746:	464a      	mov	r2, r9
 800a748:	19a9      	adds	r1, r5, r6
 800a74a:	f00e fcbe 	bl	80190ca <memcpy>
 800a74e:	e7af      	b.n	800a6b0 <ucdr_serialize_endian_uint16_t+0x60>

0800a750 <ucdr_deserialize_uint16_t>:
 800a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a754:	460d      	mov	r5, r1
 800a756:	2102      	movs	r1, #2
 800a758:	4604      	mov	r4, r0
 800a75a:	f001 f9bb 	bl	800bad4 <ucdr_buffer_alignment>
 800a75e:	4601      	mov	r1, r0
 800a760:	4620      	mov	r0, r4
 800a762:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a766:	f001 f9f9 	bl	800bb5c <ucdr_advance_buffer>
 800a76a:	2102      	movs	r1, #2
 800a76c:	4620      	mov	r0, r4
 800a76e:	f001 f951 	bl	800ba14 <ucdr_check_buffer_available_for>
 800a772:	bb60      	cbnz	r0, 800a7ce <ucdr_deserialize_uint16_t+0x7e>
 800a774:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a778:	42be      	cmp	r6, r7
 800a77a:	d923      	bls.n	800a7c4 <ucdr_deserialize_uint16_t+0x74>
 800a77c:	6923      	ldr	r3, [r4, #16]
 800a77e:	60a6      	str	r6, [r4, #8]
 800a780:	1bf6      	subs	r6, r6, r7
 800a782:	4433      	add	r3, r6
 800a784:	f1c6 0902 	rsb	r9, r6, #2
 800a788:	6123      	str	r3, [r4, #16]
 800a78a:	4649      	mov	r1, r9
 800a78c:	4620      	mov	r0, r4
 800a78e:	f001 f94d 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a792:	2800      	cmp	r0, #0
 800a794:	d034      	beq.n	800a800 <ucdr_deserialize_uint16_t+0xb0>
 800a796:	7d23      	ldrb	r3, [r4, #20]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d042      	beq.n	800a822 <ucdr_deserialize_uint16_t+0xd2>
 800a79c:	787b      	ldrb	r3, [r7, #1]
 800a79e:	702b      	strb	r3, [r5, #0]
 800a7a0:	2e00      	cmp	r6, #0
 800a7a2:	d03a      	beq.n	800a81a <ucdr_deserialize_uint16_t+0xca>
 800a7a4:	783b      	ldrb	r3, [r7, #0]
 800a7a6:	706b      	strb	r3, [r5, #1]
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	68a2      	ldr	r2, [r4, #8]
 800a7ac:	7da0      	ldrb	r0, [r4, #22]
 800a7ae:	2102      	movs	r1, #2
 800a7b0:	3302      	adds	r3, #2
 800a7b2:	444a      	add	r2, r9
 800a7b4:	1b9b      	subs	r3, r3, r6
 800a7b6:	7561      	strb	r1, [r4, #21]
 800a7b8:	60a2      	str	r2, [r4, #8]
 800a7ba:	6123      	str	r3, [r4, #16]
 800a7bc:	f080 0001 	eor.w	r0, r0, #1
 800a7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c4:	2102      	movs	r1, #2
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f001 f930 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a7cc:	b180      	cbz	r0, 800a7f0 <ucdr_deserialize_uint16_t+0xa0>
 800a7ce:	7d23      	ldrb	r3, [r4, #20]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	d011      	beq.n	800a7fa <ucdr_deserialize_uint16_t+0xaa>
 800a7d6:	785b      	ldrb	r3, [r3, #1]
 800a7d8:	702b      	strb	r3, [r5, #0]
 800a7da:	68a3      	ldr	r3, [r4, #8]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	706b      	strb	r3, [r5, #1]
 800a7e0:	68a2      	ldr	r2, [r4, #8]
 800a7e2:	6923      	ldr	r3, [r4, #16]
 800a7e4:	3202      	adds	r2, #2
 800a7e6:	3302      	adds	r3, #2
 800a7e8:	2102      	movs	r1, #2
 800a7ea:	60a2      	str	r2, [r4, #8]
 800a7ec:	6123      	str	r3, [r4, #16]
 800a7ee:	7561      	strb	r1, [r4, #21]
 800a7f0:	7da0      	ldrb	r0, [r4, #22]
 800a7f2:	f080 0001 	eor.w	r0, r0, #1
 800a7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	802b      	strh	r3, [r5, #0]
 800a7fe:	e7ef      	b.n	800a7e0 <ucdr_deserialize_uint16_t+0x90>
 800a800:	68a2      	ldr	r2, [r4, #8]
 800a802:	6923      	ldr	r3, [r4, #16]
 800a804:	7da0      	ldrb	r0, [r4, #22]
 800a806:	f884 8015 	strb.w	r8, [r4, #21]
 800a80a:	1b92      	subs	r2, r2, r6
 800a80c:	1b9b      	subs	r3, r3, r6
 800a80e:	60a2      	str	r2, [r4, #8]
 800a810:	6123      	str	r3, [r4, #16]
 800a812:	f080 0001 	eor.w	r0, r0, #1
 800a816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81a:	68a3      	ldr	r3, [r4, #8]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	706b      	strb	r3, [r5, #1]
 800a820:	e7c2      	b.n	800a7a8 <ucdr_deserialize_uint16_t+0x58>
 800a822:	4639      	mov	r1, r7
 800a824:	4632      	mov	r2, r6
 800a826:	4628      	mov	r0, r5
 800a828:	f00e fc4f 	bl	80190ca <memcpy>
 800a82c:	68a1      	ldr	r1, [r4, #8]
 800a82e:	464a      	mov	r2, r9
 800a830:	19a8      	adds	r0, r5, r6
 800a832:	f00e fc4a 	bl	80190ca <memcpy>
 800a836:	e7b7      	b.n	800a7a8 <ucdr_deserialize_uint16_t+0x58>

0800a838 <ucdr_deserialize_endian_uint16_t>:
 800a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a83c:	460e      	mov	r6, r1
 800a83e:	2102      	movs	r1, #2
 800a840:	4604      	mov	r4, r0
 800a842:	4615      	mov	r5, r2
 800a844:	f001 f946 	bl	800bad4 <ucdr_buffer_alignment>
 800a848:	4601      	mov	r1, r0
 800a84a:	4620      	mov	r0, r4
 800a84c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a850:	f001 f984 	bl	800bb5c <ucdr_advance_buffer>
 800a854:	2102      	movs	r1, #2
 800a856:	4620      	mov	r0, r4
 800a858:	f001 f8dc 	bl	800ba14 <ucdr_check_buffer_available_for>
 800a85c:	bb70      	cbnz	r0, 800a8bc <ucdr_deserialize_endian_uint16_t+0x84>
 800a85e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a862:	4547      	cmp	r7, r8
 800a864:	d925      	bls.n	800a8b2 <ucdr_deserialize_endian_uint16_t+0x7a>
 800a866:	6923      	ldr	r3, [r4, #16]
 800a868:	60a7      	str	r7, [r4, #8]
 800a86a:	eba7 0708 	sub.w	r7, r7, r8
 800a86e:	443b      	add	r3, r7
 800a870:	f1c7 0a02 	rsb	sl, r7, #2
 800a874:	6123      	str	r3, [r4, #16]
 800a876:	4651      	mov	r1, sl
 800a878:	4620      	mov	r0, r4
 800a87a:	f001 f8d7 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d034      	beq.n	800a8ec <ucdr_deserialize_endian_uint16_t+0xb4>
 800a882:	2e01      	cmp	r6, #1
 800a884:	d043      	beq.n	800a90e <ucdr_deserialize_endian_uint16_t+0xd6>
 800a886:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a88a:	702b      	strb	r3, [r5, #0]
 800a88c:	2f00      	cmp	r7, #0
 800a88e:	d03a      	beq.n	800a906 <ucdr_deserialize_endian_uint16_t+0xce>
 800a890:	f898 3000 	ldrb.w	r3, [r8]
 800a894:	706b      	strb	r3, [r5, #1]
 800a896:	6923      	ldr	r3, [r4, #16]
 800a898:	68a2      	ldr	r2, [r4, #8]
 800a89a:	7da0      	ldrb	r0, [r4, #22]
 800a89c:	2102      	movs	r1, #2
 800a89e:	3302      	adds	r3, #2
 800a8a0:	4452      	add	r2, sl
 800a8a2:	1bdb      	subs	r3, r3, r7
 800a8a4:	7561      	strb	r1, [r4, #21]
 800a8a6:	60a2      	str	r2, [r4, #8]
 800a8a8:	6123      	str	r3, [r4, #16]
 800a8aa:	f080 0001 	eor.w	r0, r0, #1
 800a8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b2:	2102      	movs	r1, #2
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f001 f8b9 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a8ba:	b178      	cbz	r0, 800a8dc <ucdr_deserialize_endian_uint16_t+0xa4>
 800a8bc:	2e01      	cmp	r6, #1
 800a8be:	68a3      	ldr	r3, [r4, #8]
 800a8c0:	d011      	beq.n	800a8e6 <ucdr_deserialize_endian_uint16_t+0xae>
 800a8c2:	785b      	ldrb	r3, [r3, #1]
 800a8c4:	702b      	strb	r3, [r5, #0]
 800a8c6:	68a3      	ldr	r3, [r4, #8]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	706b      	strb	r3, [r5, #1]
 800a8cc:	68a2      	ldr	r2, [r4, #8]
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	3202      	adds	r2, #2
 800a8d2:	3302      	adds	r3, #2
 800a8d4:	2102      	movs	r1, #2
 800a8d6:	60a2      	str	r2, [r4, #8]
 800a8d8:	6123      	str	r3, [r4, #16]
 800a8da:	7561      	strb	r1, [r4, #21]
 800a8dc:	7da0      	ldrb	r0, [r4, #22]
 800a8de:	f080 0001 	eor.w	r0, r0, #1
 800a8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e6:	881b      	ldrh	r3, [r3, #0]
 800a8e8:	802b      	strh	r3, [r5, #0]
 800a8ea:	e7ef      	b.n	800a8cc <ucdr_deserialize_endian_uint16_t+0x94>
 800a8ec:	68a2      	ldr	r2, [r4, #8]
 800a8ee:	6923      	ldr	r3, [r4, #16]
 800a8f0:	7da0      	ldrb	r0, [r4, #22]
 800a8f2:	f884 9015 	strb.w	r9, [r4, #21]
 800a8f6:	1bd2      	subs	r2, r2, r7
 800a8f8:	1bdb      	subs	r3, r3, r7
 800a8fa:	60a2      	str	r2, [r4, #8]
 800a8fc:	6123      	str	r3, [r4, #16]
 800a8fe:	f080 0001 	eor.w	r0, r0, #1
 800a902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a906:	68a3      	ldr	r3, [r4, #8]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	706b      	strb	r3, [r5, #1]
 800a90c:	e7c3      	b.n	800a896 <ucdr_deserialize_endian_uint16_t+0x5e>
 800a90e:	4641      	mov	r1, r8
 800a910:	463a      	mov	r2, r7
 800a912:	4628      	mov	r0, r5
 800a914:	f00e fbd9 	bl	80190ca <memcpy>
 800a918:	68a1      	ldr	r1, [r4, #8]
 800a91a:	4652      	mov	r2, sl
 800a91c:	19e8      	adds	r0, r5, r7
 800a91e:	f00e fbd4 	bl	80190ca <memcpy>
 800a922:	e7b8      	b.n	800a896 <ucdr_deserialize_endian_uint16_t+0x5e>

0800a924 <ucdr_serialize_uint32_t>:
 800a924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	4604      	mov	r4, r0
 800a92c:	9101      	str	r1, [sp, #4]
 800a92e:	2104      	movs	r1, #4
 800a930:	f001 f8d0 	bl	800bad4 <ucdr_buffer_alignment>
 800a934:	4601      	mov	r1, r0
 800a936:	4620      	mov	r0, r4
 800a938:	7d67      	ldrb	r7, [r4, #21]
 800a93a:	f001 f90f 	bl	800bb5c <ucdr_advance_buffer>
 800a93e:	2104      	movs	r1, #4
 800a940:	4620      	mov	r0, r4
 800a942:	f001 f867 	bl	800ba14 <ucdr_check_buffer_available_for>
 800a946:	2800      	cmp	r0, #0
 800a948:	d139      	bne.n	800a9be <ucdr_serialize_uint32_t+0x9a>
 800a94a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a94e:	42ab      	cmp	r3, r5
 800a950:	d930      	bls.n	800a9b4 <ucdr_serialize_uint32_t+0x90>
 800a952:	1b5e      	subs	r6, r3, r5
 800a954:	60a3      	str	r3, [r4, #8]
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	f1c6 0804 	rsb	r8, r6, #4
 800a95c:	4433      	add	r3, r6
 800a95e:	6123      	str	r3, [r4, #16]
 800a960:	4641      	mov	r1, r8
 800a962:	4620      	mov	r0, r4
 800a964:	f001 f862 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d04c      	beq.n	800aa06 <ucdr_serialize_uint32_t+0xe2>
 800a96c:	7d23      	ldrb	r3, [r4, #20]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d063      	beq.n	800aa3a <ucdr_serialize_uint32_t+0x116>
 800a972:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a976:	702b      	strb	r3, [r5, #0]
 800a978:	2e00      	cmp	r6, #0
 800a97a:	d051      	beq.n	800aa20 <ucdr_serialize_uint32_t+0xfc>
 800a97c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a980:	706b      	strb	r3, [r5, #1]
 800a982:	2e01      	cmp	r6, #1
 800a984:	d050      	beq.n	800aa28 <ucdr_serialize_uint32_t+0x104>
 800a986:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a98a:	70ab      	strb	r3, [r5, #2]
 800a98c:	2e02      	cmp	r6, #2
 800a98e:	d04f      	beq.n	800aa30 <ucdr_serialize_uint32_t+0x10c>
 800a990:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a994:	70eb      	strb	r3, [r5, #3]
 800a996:	6923      	ldr	r3, [r4, #16]
 800a998:	68a2      	ldr	r2, [r4, #8]
 800a99a:	7da0      	ldrb	r0, [r4, #22]
 800a99c:	3304      	adds	r3, #4
 800a99e:	1b9e      	subs	r6, r3, r6
 800a9a0:	4442      	add	r2, r8
 800a9a2:	2304      	movs	r3, #4
 800a9a4:	f080 0001 	eor.w	r0, r0, #1
 800a9a8:	60a2      	str	r2, [r4, #8]
 800a9aa:	6126      	str	r6, [r4, #16]
 800a9ac:	7563      	strb	r3, [r4, #21]
 800a9ae:	b002      	add	sp, #8
 800a9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b4:	2104      	movs	r1, #4
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f001 f838 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800a9bc:	b1d0      	cbz	r0, 800a9f4 <ucdr_serialize_uint32_t+0xd0>
 800a9be:	7d23      	ldrb	r3, [r4, #20]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	68a3      	ldr	r3, [r4, #8]
 800a9c4:	d01c      	beq.n	800aa00 <ucdr_serialize_uint32_t+0xdc>
 800a9c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a9ca:	701a      	strb	r2, [r3, #0]
 800a9cc:	68a3      	ldr	r3, [r4, #8]
 800a9ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9d2:	705a      	strb	r2, [r3, #1]
 800a9d4:	68a3      	ldr	r3, [r4, #8]
 800a9d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a9da:	709a      	strb	r2, [r3, #2]
 800a9dc:	68a3      	ldr	r3, [r4, #8]
 800a9de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a9e2:	70da      	strb	r2, [r3, #3]
 800a9e4:	68a2      	ldr	r2, [r4, #8]
 800a9e6:	6923      	ldr	r3, [r4, #16]
 800a9e8:	3204      	adds	r2, #4
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	2104      	movs	r1, #4
 800a9ee:	60a2      	str	r2, [r4, #8]
 800a9f0:	6123      	str	r3, [r4, #16]
 800a9f2:	7561      	strb	r1, [r4, #21]
 800a9f4:	7da0      	ldrb	r0, [r4, #22]
 800a9f6:	f080 0001 	eor.w	r0, r0, #1
 800a9fa:	b002      	add	sp, #8
 800a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa00:	9a01      	ldr	r2, [sp, #4]
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	e7ee      	b.n	800a9e4 <ucdr_serialize_uint32_t+0xc0>
 800aa06:	68a2      	ldr	r2, [r4, #8]
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	7da0      	ldrb	r0, [r4, #22]
 800aa0c:	7567      	strb	r7, [r4, #21]
 800aa0e:	1b92      	subs	r2, r2, r6
 800aa10:	1b9b      	subs	r3, r3, r6
 800aa12:	f080 0001 	eor.w	r0, r0, #1
 800aa16:	60a2      	str	r2, [r4, #8]
 800aa18:	6123      	str	r3, [r4, #16]
 800aa1a:	b002      	add	sp, #8
 800aa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa20:	68a3      	ldr	r3, [r4, #8]
 800aa22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	68a3      	ldr	r3, [r4, #8]
 800aa2a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aa2e:	701a      	strb	r2, [r3, #0]
 800aa30:	68a3      	ldr	r3, [r4, #8]
 800aa32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa36:	701a      	strb	r2, [r3, #0]
 800aa38:	e7ad      	b.n	800a996 <ucdr_serialize_uint32_t+0x72>
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	ad01      	add	r5, sp, #4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	4632      	mov	r2, r6
 800aa42:	f00e fb42 	bl	80190ca <memcpy>
 800aa46:	68a0      	ldr	r0, [r4, #8]
 800aa48:	4642      	mov	r2, r8
 800aa4a:	19a9      	adds	r1, r5, r6
 800aa4c:	f00e fb3d 	bl	80190ca <memcpy>
 800aa50:	e7a1      	b.n	800a996 <ucdr_serialize_uint32_t+0x72>
 800aa52:	bf00      	nop

0800aa54 <ucdr_serialize_endian_uint32_t>:
 800aa54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	2104      	movs	r1, #4
 800aa5e:	4604      	mov	r4, r0
 800aa60:	9201      	str	r2, [sp, #4]
 800aa62:	f001 f837 	bl	800bad4 <ucdr_buffer_alignment>
 800aa66:	4601      	mov	r1, r0
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa6e:	f001 f875 	bl	800bb5c <ucdr_advance_buffer>
 800aa72:	2104      	movs	r1, #4
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 ffcd 	bl	800ba14 <ucdr_check_buffer_available_for>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d138      	bne.n	800aaf0 <ucdr_serialize_endian_uint32_t+0x9c>
 800aa7e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800aa82:	42b7      	cmp	r7, r6
 800aa84:	d92f      	bls.n	800aae6 <ucdr_serialize_endian_uint32_t+0x92>
 800aa86:	6923      	ldr	r3, [r4, #16]
 800aa88:	60a7      	str	r7, [r4, #8]
 800aa8a:	1bbf      	subs	r7, r7, r6
 800aa8c:	443b      	add	r3, r7
 800aa8e:	f1c7 0904 	rsb	r9, r7, #4
 800aa92:	6123      	str	r3, [r4, #16]
 800aa94:	4649      	mov	r1, r9
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 ffc8 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d04a      	beq.n	800ab36 <ucdr_serialize_endian_uint32_t+0xe2>
 800aaa0:	2d01      	cmp	r5, #1
 800aaa2:	d063      	beq.n	800ab6c <ucdr_serialize_endian_uint32_t+0x118>
 800aaa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aaa8:	7033      	strb	r3, [r6, #0]
 800aaaa:	2f00      	cmp	r7, #0
 800aaac:	d051      	beq.n	800ab52 <ucdr_serialize_endian_uint32_t+0xfe>
 800aaae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aab2:	7073      	strb	r3, [r6, #1]
 800aab4:	2f01      	cmp	r7, #1
 800aab6:	d050      	beq.n	800ab5a <ucdr_serialize_endian_uint32_t+0x106>
 800aab8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aabc:	70b3      	strb	r3, [r6, #2]
 800aabe:	2f02      	cmp	r7, #2
 800aac0:	d04f      	beq.n	800ab62 <ucdr_serialize_endian_uint32_t+0x10e>
 800aac2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aac6:	70f3      	strb	r3, [r6, #3]
 800aac8:	6923      	ldr	r3, [r4, #16]
 800aaca:	68a2      	ldr	r2, [r4, #8]
 800aacc:	7da0      	ldrb	r0, [r4, #22]
 800aace:	3304      	adds	r3, #4
 800aad0:	444a      	add	r2, r9
 800aad2:	1bdb      	subs	r3, r3, r7
 800aad4:	2104      	movs	r1, #4
 800aad6:	f080 0001 	eor.w	r0, r0, #1
 800aada:	60a2      	str	r2, [r4, #8]
 800aadc:	6123      	str	r3, [r4, #16]
 800aade:	7561      	strb	r1, [r4, #21]
 800aae0:	b003      	add	sp, #12
 800aae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aae6:	2104      	movs	r1, #4
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 ff9f 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800aaee:	b1c8      	cbz	r0, 800ab24 <ucdr_serialize_endian_uint32_t+0xd0>
 800aaf0:	2d01      	cmp	r5, #1
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	d01c      	beq.n	800ab30 <ucdr_serialize_endian_uint32_t+0xdc>
 800aaf6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aafa:	701a      	strb	r2, [r3, #0]
 800aafc:	68a3      	ldr	r3, [r4, #8]
 800aafe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab02:	705a      	strb	r2, [r3, #1]
 800ab04:	68a3      	ldr	r3, [r4, #8]
 800ab06:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ab0a:	709a      	strb	r2, [r3, #2]
 800ab0c:	68a3      	ldr	r3, [r4, #8]
 800ab0e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ab12:	70da      	strb	r2, [r3, #3]
 800ab14:	68a2      	ldr	r2, [r4, #8]
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	3204      	adds	r2, #4
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	2104      	movs	r1, #4
 800ab1e:	60a2      	str	r2, [r4, #8]
 800ab20:	6123      	str	r3, [r4, #16]
 800ab22:	7561      	strb	r1, [r4, #21]
 800ab24:	7da0      	ldrb	r0, [r4, #22]
 800ab26:	f080 0001 	eor.w	r0, r0, #1
 800ab2a:	b003      	add	sp, #12
 800ab2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab30:	9a01      	ldr	r2, [sp, #4]
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	e7ee      	b.n	800ab14 <ucdr_serialize_endian_uint32_t+0xc0>
 800ab36:	68a2      	ldr	r2, [r4, #8]
 800ab38:	6923      	ldr	r3, [r4, #16]
 800ab3a:	7da0      	ldrb	r0, [r4, #22]
 800ab3c:	f884 8015 	strb.w	r8, [r4, #21]
 800ab40:	1bd2      	subs	r2, r2, r7
 800ab42:	1bdb      	subs	r3, r3, r7
 800ab44:	f080 0001 	eor.w	r0, r0, #1
 800ab48:	60a2      	str	r2, [r4, #8]
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	b003      	add	sp, #12
 800ab4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab52:	68a3      	ldr	r3, [r4, #8]
 800ab54:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab58:	701a      	strb	r2, [r3, #0]
 800ab5a:	68a3      	ldr	r3, [r4, #8]
 800ab5c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ab60:	701a      	strb	r2, [r3, #0]
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ab68:	701a      	strb	r2, [r3, #0]
 800ab6a:	e7ad      	b.n	800aac8 <ucdr_serialize_endian_uint32_t+0x74>
 800ab6c:	ad01      	add	r5, sp, #4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	463a      	mov	r2, r7
 800ab72:	4630      	mov	r0, r6
 800ab74:	f00e faa9 	bl	80190ca <memcpy>
 800ab78:	68a0      	ldr	r0, [r4, #8]
 800ab7a:	464a      	mov	r2, r9
 800ab7c:	19e9      	adds	r1, r5, r7
 800ab7e:	f00e faa4 	bl	80190ca <memcpy>
 800ab82:	e7a1      	b.n	800aac8 <ucdr_serialize_endian_uint32_t+0x74>

0800ab84 <ucdr_deserialize_uint32_t>:
 800ab84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab88:	460d      	mov	r5, r1
 800ab8a:	2104      	movs	r1, #4
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	f000 ffa1 	bl	800bad4 <ucdr_buffer_alignment>
 800ab92:	4601      	mov	r1, r0
 800ab94:	4620      	mov	r0, r4
 800ab96:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ab9a:	f000 ffdf 	bl	800bb5c <ucdr_advance_buffer>
 800ab9e:	2104      	movs	r1, #4
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 ff37 	bl	800ba14 <ucdr_check_buffer_available_for>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d138      	bne.n	800ac1c <ucdr_deserialize_uint32_t+0x98>
 800abaa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800abae:	42b7      	cmp	r7, r6
 800abb0:	d92f      	bls.n	800ac12 <ucdr_deserialize_uint32_t+0x8e>
 800abb2:	6923      	ldr	r3, [r4, #16]
 800abb4:	60a7      	str	r7, [r4, #8]
 800abb6:	1bbf      	subs	r7, r7, r6
 800abb8:	443b      	add	r3, r7
 800abba:	f1c7 0904 	rsb	r9, r7, #4
 800abbe:	6123      	str	r3, [r4, #16]
 800abc0:	4649      	mov	r1, r9
 800abc2:	4620      	mov	r0, r4
 800abc4:	f000 ff32 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800abc8:	2800      	cmp	r0, #0
 800abca:	d046      	beq.n	800ac5a <ucdr_deserialize_uint32_t+0xd6>
 800abcc:	7d23      	ldrb	r3, [r4, #20]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d05c      	beq.n	800ac8c <ucdr_deserialize_uint32_t+0x108>
 800abd2:	78f3      	ldrb	r3, [r6, #3]
 800abd4:	702b      	strb	r3, [r5, #0]
 800abd6:	2f00      	cmp	r7, #0
 800abd8:	d04c      	beq.n	800ac74 <ucdr_deserialize_uint32_t+0xf0>
 800abda:	78b3      	ldrb	r3, [r6, #2]
 800abdc:	706b      	strb	r3, [r5, #1]
 800abde:	2f01      	cmp	r7, #1
 800abe0:	f105 0302 	add.w	r3, r5, #2
 800abe4:	d04a      	beq.n	800ac7c <ucdr_deserialize_uint32_t+0xf8>
 800abe6:	7873      	ldrb	r3, [r6, #1]
 800abe8:	70ab      	strb	r3, [r5, #2]
 800abea:	2f02      	cmp	r7, #2
 800abec:	f105 0303 	add.w	r3, r5, #3
 800abf0:	d048      	beq.n	800ac84 <ucdr_deserialize_uint32_t+0x100>
 800abf2:	7833      	ldrb	r3, [r6, #0]
 800abf4:	70eb      	strb	r3, [r5, #3]
 800abf6:	6923      	ldr	r3, [r4, #16]
 800abf8:	68a2      	ldr	r2, [r4, #8]
 800abfa:	7da0      	ldrb	r0, [r4, #22]
 800abfc:	2104      	movs	r1, #4
 800abfe:	3304      	adds	r3, #4
 800ac00:	444a      	add	r2, r9
 800ac02:	1bdb      	subs	r3, r3, r7
 800ac04:	7561      	strb	r1, [r4, #21]
 800ac06:	60a2      	str	r2, [r4, #8]
 800ac08:	6123      	str	r3, [r4, #16]
 800ac0a:	f080 0001 	eor.w	r0, r0, #1
 800ac0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac12:	2104      	movs	r1, #4
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 ff09 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800ac1a:	b1b0      	cbz	r0, 800ac4a <ucdr_deserialize_uint32_t+0xc6>
 800ac1c:	7d23      	ldrb	r3, [r4, #20]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	68a3      	ldr	r3, [r4, #8]
 800ac22:	d017      	beq.n	800ac54 <ucdr_deserialize_uint32_t+0xd0>
 800ac24:	78db      	ldrb	r3, [r3, #3]
 800ac26:	702b      	strb	r3, [r5, #0]
 800ac28:	68a3      	ldr	r3, [r4, #8]
 800ac2a:	789b      	ldrb	r3, [r3, #2]
 800ac2c:	706b      	strb	r3, [r5, #1]
 800ac2e:	68a3      	ldr	r3, [r4, #8]
 800ac30:	785b      	ldrb	r3, [r3, #1]
 800ac32:	70ab      	strb	r3, [r5, #2]
 800ac34:	68a3      	ldr	r3, [r4, #8]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	70eb      	strb	r3, [r5, #3]
 800ac3a:	68a2      	ldr	r2, [r4, #8]
 800ac3c:	6923      	ldr	r3, [r4, #16]
 800ac3e:	3204      	adds	r2, #4
 800ac40:	3304      	adds	r3, #4
 800ac42:	2104      	movs	r1, #4
 800ac44:	60a2      	str	r2, [r4, #8]
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	7561      	strb	r1, [r4, #21]
 800ac4a:	7da0      	ldrb	r0, [r4, #22]
 800ac4c:	f080 0001 	eor.w	r0, r0, #1
 800ac50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	e7ef      	b.n	800ac3a <ucdr_deserialize_uint32_t+0xb6>
 800ac5a:	68a2      	ldr	r2, [r4, #8]
 800ac5c:	6923      	ldr	r3, [r4, #16]
 800ac5e:	7da0      	ldrb	r0, [r4, #22]
 800ac60:	f884 8015 	strb.w	r8, [r4, #21]
 800ac64:	1bd2      	subs	r2, r2, r7
 800ac66:	1bdb      	subs	r3, r3, r7
 800ac68:	60a2      	str	r2, [r4, #8]
 800ac6a:	6123      	str	r3, [r4, #16]
 800ac6c:	f080 0001 	eor.w	r0, r0, #1
 800ac70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac74:	68a3      	ldr	r3, [r4, #8]
 800ac76:	789b      	ldrb	r3, [r3, #2]
 800ac78:	706b      	strb	r3, [r5, #1]
 800ac7a:	1cab      	adds	r3, r5, #2
 800ac7c:	68a2      	ldr	r2, [r4, #8]
 800ac7e:	7852      	ldrb	r2, [r2, #1]
 800ac80:	f803 2b01 	strb.w	r2, [r3], #1
 800ac84:	68a2      	ldr	r2, [r4, #8]
 800ac86:	7812      	ldrb	r2, [r2, #0]
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	e7b4      	b.n	800abf6 <ucdr_deserialize_uint32_t+0x72>
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	463a      	mov	r2, r7
 800ac90:	4628      	mov	r0, r5
 800ac92:	f00e fa1a 	bl	80190ca <memcpy>
 800ac96:	68a1      	ldr	r1, [r4, #8]
 800ac98:	464a      	mov	r2, r9
 800ac9a:	19e8      	adds	r0, r5, r7
 800ac9c:	f00e fa15 	bl	80190ca <memcpy>
 800aca0:	e7a9      	b.n	800abf6 <ucdr_deserialize_uint32_t+0x72>
 800aca2:	bf00      	nop

0800aca4 <ucdr_deserialize_endian_uint32_t>:
 800aca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca8:	460e      	mov	r6, r1
 800acaa:	2104      	movs	r1, #4
 800acac:	4604      	mov	r4, r0
 800acae:	4615      	mov	r5, r2
 800acb0:	f000 ff10 	bl	800bad4 <ucdr_buffer_alignment>
 800acb4:	4601      	mov	r1, r0
 800acb6:	4620      	mov	r0, r4
 800acb8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800acbc:	f000 ff4e 	bl	800bb5c <ucdr_advance_buffer>
 800acc0:	2104      	movs	r1, #4
 800acc2:	4620      	mov	r0, r4
 800acc4:	f000 fea6 	bl	800ba14 <ucdr_check_buffer_available_for>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d13c      	bne.n	800ad46 <ucdr_deserialize_endian_uint32_t+0xa2>
 800accc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800acd0:	42bb      	cmp	r3, r7
 800acd2:	d933      	bls.n	800ad3c <ucdr_deserialize_endian_uint32_t+0x98>
 800acd4:	eba3 0807 	sub.w	r8, r3, r7
 800acd8:	60a3      	str	r3, [r4, #8]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	f1c8 0a04 	rsb	sl, r8, #4
 800ace0:	4443      	add	r3, r8
 800ace2:	6123      	str	r3, [r4, #16]
 800ace4:	4651      	mov	r1, sl
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fea0 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800acec:	2800      	cmp	r0, #0
 800acee:	d048      	beq.n	800ad82 <ucdr_deserialize_endian_uint32_t+0xde>
 800acf0:	2e01      	cmp	r6, #1
 800acf2:	d061      	beq.n	800adb8 <ucdr_deserialize_endian_uint32_t+0x114>
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	702b      	strb	r3, [r5, #0]
 800acf8:	f1b8 0f00 	cmp.w	r8, #0
 800acfc:	d050      	beq.n	800ada0 <ucdr_deserialize_endian_uint32_t+0xfc>
 800acfe:	78bb      	ldrb	r3, [r7, #2]
 800ad00:	706b      	strb	r3, [r5, #1]
 800ad02:	f1b8 0f01 	cmp.w	r8, #1
 800ad06:	f105 0302 	add.w	r3, r5, #2
 800ad0a:	d04d      	beq.n	800ada8 <ucdr_deserialize_endian_uint32_t+0x104>
 800ad0c:	787b      	ldrb	r3, [r7, #1]
 800ad0e:	70ab      	strb	r3, [r5, #2]
 800ad10:	f1b8 0f02 	cmp.w	r8, #2
 800ad14:	f105 0303 	add.w	r3, r5, #3
 800ad18:	d04a      	beq.n	800adb0 <ucdr_deserialize_endian_uint32_t+0x10c>
 800ad1a:	783b      	ldrb	r3, [r7, #0]
 800ad1c:	70eb      	strb	r3, [r5, #3]
 800ad1e:	6923      	ldr	r3, [r4, #16]
 800ad20:	68a2      	ldr	r2, [r4, #8]
 800ad22:	7da0      	ldrb	r0, [r4, #22]
 800ad24:	2104      	movs	r1, #4
 800ad26:	3304      	adds	r3, #4
 800ad28:	4452      	add	r2, sl
 800ad2a:	eba3 0308 	sub.w	r3, r3, r8
 800ad2e:	7561      	strb	r1, [r4, #21]
 800ad30:	60a2      	str	r2, [r4, #8]
 800ad32:	6123      	str	r3, [r4, #16]
 800ad34:	f080 0001 	eor.w	r0, r0, #1
 800ad38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3c:	2104      	movs	r1, #4
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fe74 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800ad44:	b1a8      	cbz	r0, 800ad72 <ucdr_deserialize_endian_uint32_t+0xce>
 800ad46:	2e01      	cmp	r6, #1
 800ad48:	68a3      	ldr	r3, [r4, #8]
 800ad4a:	d017      	beq.n	800ad7c <ucdr_deserialize_endian_uint32_t+0xd8>
 800ad4c:	78db      	ldrb	r3, [r3, #3]
 800ad4e:	702b      	strb	r3, [r5, #0]
 800ad50:	68a3      	ldr	r3, [r4, #8]
 800ad52:	789b      	ldrb	r3, [r3, #2]
 800ad54:	706b      	strb	r3, [r5, #1]
 800ad56:	68a3      	ldr	r3, [r4, #8]
 800ad58:	785b      	ldrb	r3, [r3, #1]
 800ad5a:	70ab      	strb	r3, [r5, #2]
 800ad5c:	68a3      	ldr	r3, [r4, #8]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	70eb      	strb	r3, [r5, #3]
 800ad62:	68a2      	ldr	r2, [r4, #8]
 800ad64:	6923      	ldr	r3, [r4, #16]
 800ad66:	3204      	adds	r2, #4
 800ad68:	3304      	adds	r3, #4
 800ad6a:	2104      	movs	r1, #4
 800ad6c:	60a2      	str	r2, [r4, #8]
 800ad6e:	6123      	str	r3, [r4, #16]
 800ad70:	7561      	strb	r1, [r4, #21]
 800ad72:	7da0      	ldrb	r0, [r4, #22]
 800ad74:	f080 0001 	eor.w	r0, r0, #1
 800ad78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	e7ef      	b.n	800ad62 <ucdr_deserialize_endian_uint32_t+0xbe>
 800ad82:	68a2      	ldr	r2, [r4, #8]
 800ad84:	6923      	ldr	r3, [r4, #16]
 800ad86:	7da0      	ldrb	r0, [r4, #22]
 800ad88:	f884 9015 	strb.w	r9, [r4, #21]
 800ad8c:	eba2 0208 	sub.w	r2, r2, r8
 800ad90:	eba3 0308 	sub.w	r3, r3, r8
 800ad94:	60a2      	str	r2, [r4, #8]
 800ad96:	6123      	str	r3, [r4, #16]
 800ad98:	f080 0001 	eor.w	r0, r0, #1
 800ad9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada0:	68a3      	ldr	r3, [r4, #8]
 800ada2:	789b      	ldrb	r3, [r3, #2]
 800ada4:	706b      	strb	r3, [r5, #1]
 800ada6:	1cab      	adds	r3, r5, #2
 800ada8:	68a2      	ldr	r2, [r4, #8]
 800adaa:	7852      	ldrb	r2, [r2, #1]
 800adac:	f803 2b01 	strb.w	r2, [r3], #1
 800adb0:	68a2      	ldr	r2, [r4, #8]
 800adb2:	7812      	ldrb	r2, [r2, #0]
 800adb4:	701a      	strb	r2, [r3, #0]
 800adb6:	e7b2      	b.n	800ad1e <ucdr_deserialize_endian_uint32_t+0x7a>
 800adb8:	4639      	mov	r1, r7
 800adba:	4642      	mov	r2, r8
 800adbc:	4628      	mov	r0, r5
 800adbe:	f00e f984 	bl	80190ca <memcpy>
 800adc2:	68a1      	ldr	r1, [r4, #8]
 800adc4:	4652      	mov	r2, sl
 800adc6:	eb05 0008 	add.w	r0, r5, r8
 800adca:	f00e f97e 	bl	80190ca <memcpy>
 800adce:	e7a6      	b.n	800ad1e <ucdr_deserialize_endian_uint32_t+0x7a>

0800add0 <ucdr_serialize_uint64_t>:
 800add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add4:	2108      	movs	r1, #8
 800add6:	b082      	sub	sp, #8
 800add8:	4604      	mov	r4, r0
 800adda:	e9cd 2300 	strd	r2, r3, [sp]
 800adde:	f000 fe79 	bl	800bad4 <ucdr_buffer_alignment>
 800ade2:	4601      	mov	r1, r0
 800ade4:	4620      	mov	r0, r4
 800ade6:	7d67      	ldrb	r7, [r4, #21]
 800ade8:	f000 feb8 	bl	800bb5c <ucdr_advance_buffer>
 800adec:	2108      	movs	r1, #8
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 fe10 	bl	800ba14 <ucdr_check_buffer_available_for>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d14e      	bne.n	800ae96 <ucdr_serialize_uint64_t+0xc6>
 800adf8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800adfc:	42ab      	cmp	r3, r5
 800adfe:	d945      	bls.n	800ae8c <ucdr_serialize_uint64_t+0xbc>
 800ae00:	1b5e      	subs	r6, r3, r5
 800ae02:	60a3      	str	r3, [r4, #8]
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	f1c6 0808 	rsb	r8, r6, #8
 800ae0a:	4433      	add	r3, r6
 800ae0c:	6123      	str	r3, [r4, #16]
 800ae0e:	4641      	mov	r1, r8
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 fe0b 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d074      	beq.n	800af04 <ucdr_serialize_uint64_t+0x134>
 800ae1a:	7d23      	ldrb	r3, [r4, #20]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	f000 809b 	beq.w	800af58 <ucdr_serialize_uint64_t+0x188>
 800ae22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae26:	702b      	strb	r3, [r5, #0]
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	d078      	beq.n	800af1e <ucdr_serialize_uint64_t+0x14e>
 800ae2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae30:	706b      	strb	r3, [r5, #1]
 800ae32:	2e01      	cmp	r6, #1
 800ae34:	d077      	beq.n	800af26 <ucdr_serialize_uint64_t+0x156>
 800ae36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ae3a:	70ab      	strb	r3, [r5, #2]
 800ae3c:	2e02      	cmp	r6, #2
 800ae3e:	d076      	beq.n	800af2e <ucdr_serialize_uint64_t+0x15e>
 800ae40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ae44:	70eb      	strb	r3, [r5, #3]
 800ae46:	2e03      	cmp	r6, #3
 800ae48:	d075      	beq.n	800af36 <ucdr_serialize_uint64_t+0x166>
 800ae4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ae4e:	712b      	strb	r3, [r5, #4]
 800ae50:	2e04      	cmp	r6, #4
 800ae52:	d074      	beq.n	800af3e <ucdr_serialize_uint64_t+0x16e>
 800ae54:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ae58:	716b      	strb	r3, [r5, #5]
 800ae5a:	2e05      	cmp	r6, #5
 800ae5c:	d073      	beq.n	800af46 <ucdr_serialize_uint64_t+0x176>
 800ae5e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ae62:	71ab      	strb	r3, [r5, #6]
 800ae64:	2e06      	cmp	r6, #6
 800ae66:	d072      	beq.n	800af4e <ucdr_serialize_uint64_t+0x17e>
 800ae68:	f89d 3000 	ldrb.w	r3, [sp]
 800ae6c:	71eb      	strb	r3, [r5, #7]
 800ae6e:	6923      	ldr	r3, [r4, #16]
 800ae70:	68a2      	ldr	r2, [r4, #8]
 800ae72:	7da0      	ldrb	r0, [r4, #22]
 800ae74:	3308      	adds	r3, #8
 800ae76:	1b9e      	subs	r6, r3, r6
 800ae78:	4442      	add	r2, r8
 800ae7a:	2308      	movs	r3, #8
 800ae7c:	f080 0001 	eor.w	r0, r0, #1
 800ae80:	60a2      	str	r2, [r4, #8]
 800ae82:	6126      	str	r6, [r4, #16]
 800ae84:	7563      	strb	r3, [r4, #21]
 800ae86:	b002      	add	sp, #8
 800ae88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae8c:	2108      	movs	r1, #8
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f000 fdcc 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800ae94:	b350      	cbz	r0, 800aeec <ucdr_serialize_uint64_t+0x11c>
 800ae96:	7d23      	ldrb	r3, [r4, #20]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d02d      	beq.n	800aef8 <ucdr_serialize_uint64_t+0x128>
 800ae9c:	68a3      	ldr	r3, [r4, #8]
 800ae9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aea2:	701a      	strb	r2, [r3, #0]
 800aea4:	68a3      	ldr	r3, [r4, #8]
 800aea6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aeaa:	705a      	strb	r2, [r3, #1]
 800aeac:	68a3      	ldr	r3, [r4, #8]
 800aeae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aeb2:	709a      	strb	r2, [r3, #2]
 800aeb4:	68a3      	ldr	r3, [r4, #8]
 800aeb6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aeba:	70da      	strb	r2, [r3, #3]
 800aebc:	68a3      	ldr	r3, [r4, #8]
 800aebe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800aec2:	711a      	strb	r2, [r3, #4]
 800aec4:	68a3      	ldr	r3, [r4, #8]
 800aec6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800aeca:	715a      	strb	r2, [r3, #5]
 800aecc:	68a3      	ldr	r3, [r4, #8]
 800aece:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800aed2:	719a      	strb	r2, [r3, #6]
 800aed4:	68a3      	ldr	r3, [r4, #8]
 800aed6:	f89d 2000 	ldrb.w	r2, [sp]
 800aeda:	71da      	strb	r2, [r3, #7]
 800aedc:	68a2      	ldr	r2, [r4, #8]
 800aede:	6923      	ldr	r3, [r4, #16]
 800aee0:	3208      	adds	r2, #8
 800aee2:	3308      	adds	r3, #8
 800aee4:	2108      	movs	r1, #8
 800aee6:	60a2      	str	r2, [r4, #8]
 800aee8:	6123      	str	r3, [r4, #16]
 800aeea:	7561      	strb	r1, [r4, #21]
 800aeec:	7da0      	ldrb	r0, [r4, #22]
 800aeee:	f080 0001 	eor.w	r0, r0, #1
 800aef2:	b002      	add	sp, #8
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef8:	466b      	mov	r3, sp
 800aefa:	cb03      	ldmia	r3!, {r0, r1}
 800aefc:	68a3      	ldr	r3, [r4, #8]
 800aefe:	6018      	str	r0, [r3, #0]
 800af00:	6059      	str	r1, [r3, #4]
 800af02:	e7eb      	b.n	800aedc <ucdr_serialize_uint64_t+0x10c>
 800af04:	68a2      	ldr	r2, [r4, #8]
 800af06:	6923      	ldr	r3, [r4, #16]
 800af08:	7da0      	ldrb	r0, [r4, #22]
 800af0a:	7567      	strb	r7, [r4, #21]
 800af0c:	1b92      	subs	r2, r2, r6
 800af0e:	1b9b      	subs	r3, r3, r6
 800af10:	f080 0001 	eor.w	r0, r0, #1
 800af14:	60a2      	str	r2, [r4, #8]
 800af16:	6123      	str	r3, [r4, #16]
 800af18:	b002      	add	sp, #8
 800af1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af1e:	68a3      	ldr	r3, [r4, #8]
 800af20:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af24:	701a      	strb	r2, [r3, #0]
 800af26:	68a3      	ldr	r3, [r4, #8]
 800af28:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af2c:	701a      	strb	r2, [r3, #0]
 800af2e:	68a3      	ldr	r3, [r4, #8]
 800af30:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af34:	701a      	strb	r2, [r3, #0]
 800af36:	68a3      	ldr	r3, [r4, #8]
 800af38:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	68a3      	ldr	r3, [r4, #8]
 800af40:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800af44:	701a      	strb	r2, [r3, #0]
 800af46:	68a3      	ldr	r3, [r4, #8]
 800af48:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	f89d 2000 	ldrb.w	r2, [sp]
 800af54:	701a      	strb	r2, [r3, #0]
 800af56:	e78a      	b.n	800ae6e <ucdr_serialize_uint64_t+0x9e>
 800af58:	4628      	mov	r0, r5
 800af5a:	466d      	mov	r5, sp
 800af5c:	4629      	mov	r1, r5
 800af5e:	4632      	mov	r2, r6
 800af60:	f00e f8b3 	bl	80190ca <memcpy>
 800af64:	68a0      	ldr	r0, [r4, #8]
 800af66:	4642      	mov	r2, r8
 800af68:	19a9      	adds	r1, r5, r6
 800af6a:	f00e f8ae 	bl	80190ca <memcpy>
 800af6e:	e77e      	b.n	800ae6e <ucdr_serialize_uint64_t+0x9e>

0800af70 <ucdr_serialize_int16_t>:
 800af70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	460b      	mov	r3, r1
 800af78:	2102      	movs	r1, #2
 800af7a:	4604      	mov	r4, r0
 800af7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800af80:	f000 fda8 	bl	800bad4 <ucdr_buffer_alignment>
 800af84:	4601      	mov	r1, r0
 800af86:	4620      	mov	r0, r4
 800af88:	7d67      	ldrb	r7, [r4, #21]
 800af8a:	f000 fde7 	bl	800bb5c <ucdr_advance_buffer>
 800af8e:	2102      	movs	r1, #2
 800af90:	4620      	mov	r0, r4
 800af92:	f000 fd3f 	bl	800ba14 <ucdr_check_buffer_available_for>
 800af96:	bb78      	cbnz	r0, 800aff8 <ucdr_serialize_int16_t+0x88>
 800af98:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800af9c:	42ab      	cmp	r3, r5
 800af9e:	d926      	bls.n	800afee <ucdr_serialize_int16_t+0x7e>
 800afa0:	1b5e      	subs	r6, r3, r5
 800afa2:	60a3      	str	r3, [r4, #8]
 800afa4:	6923      	ldr	r3, [r4, #16]
 800afa6:	f1c6 0802 	rsb	r8, r6, #2
 800afaa:	4433      	add	r3, r6
 800afac:	6123      	str	r3, [r4, #16]
 800afae:	4641      	mov	r1, r8
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 fd3b 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d03b      	beq.n	800b032 <ucdr_serialize_int16_t+0xc2>
 800afba:	7d23      	ldrb	r3, [r4, #20]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d04a      	beq.n	800b056 <ucdr_serialize_int16_t+0xe6>
 800afc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800afc4:	702b      	strb	r3, [r5, #0]
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	d040      	beq.n	800b04c <ucdr_serialize_int16_t+0xdc>
 800afca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800afce:	706b      	strb	r3, [r5, #1]
 800afd0:	6923      	ldr	r3, [r4, #16]
 800afd2:	68a2      	ldr	r2, [r4, #8]
 800afd4:	7da0      	ldrb	r0, [r4, #22]
 800afd6:	3302      	adds	r3, #2
 800afd8:	1b9e      	subs	r6, r3, r6
 800afda:	4442      	add	r2, r8
 800afdc:	2302      	movs	r3, #2
 800afde:	f080 0001 	eor.w	r0, r0, #1
 800afe2:	60a2      	str	r2, [r4, #8]
 800afe4:	6126      	str	r6, [r4, #16]
 800afe6:	7563      	strb	r3, [r4, #21]
 800afe8:	b002      	add	sp, #8
 800afea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afee:	2102      	movs	r1, #2
 800aff0:	4620      	mov	r0, r4
 800aff2:	f000 fd1b 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800aff6:	b190      	cbz	r0, 800b01e <ucdr_serialize_int16_t+0xae>
 800aff8:	7d23      	ldrb	r3, [r4, #20]
 800affa:	2b01      	cmp	r3, #1
 800affc:	68a3      	ldr	r3, [r4, #8]
 800affe:	d014      	beq.n	800b02a <ucdr_serialize_int16_t+0xba>
 800b000:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b004:	701a      	strb	r2, [r3, #0]
 800b006:	68a3      	ldr	r3, [r4, #8]
 800b008:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b00c:	705a      	strb	r2, [r3, #1]
 800b00e:	68a2      	ldr	r2, [r4, #8]
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	3202      	adds	r2, #2
 800b014:	3302      	adds	r3, #2
 800b016:	2102      	movs	r1, #2
 800b018:	60a2      	str	r2, [r4, #8]
 800b01a:	6123      	str	r3, [r4, #16]
 800b01c:	7561      	strb	r1, [r4, #21]
 800b01e:	7da0      	ldrb	r0, [r4, #22]
 800b020:	f080 0001 	eor.w	r0, r0, #1
 800b024:	b002      	add	sp, #8
 800b026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b02a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b02e:	801a      	strh	r2, [r3, #0]
 800b030:	e7ed      	b.n	800b00e <ucdr_serialize_int16_t+0x9e>
 800b032:	68a2      	ldr	r2, [r4, #8]
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	7da0      	ldrb	r0, [r4, #22]
 800b038:	7567      	strb	r7, [r4, #21]
 800b03a:	1b92      	subs	r2, r2, r6
 800b03c:	1b9b      	subs	r3, r3, r6
 800b03e:	f080 0001 	eor.w	r0, r0, #1
 800b042:	60a2      	str	r2, [r4, #8]
 800b044:	6123      	str	r3, [r4, #16]
 800b046:	b002      	add	sp, #8
 800b048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b04c:	68a3      	ldr	r3, [r4, #8]
 800b04e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b052:	701a      	strb	r2, [r3, #0]
 800b054:	e7bc      	b.n	800afd0 <ucdr_serialize_int16_t+0x60>
 800b056:	4628      	mov	r0, r5
 800b058:	f10d 0506 	add.w	r5, sp, #6
 800b05c:	4629      	mov	r1, r5
 800b05e:	4632      	mov	r2, r6
 800b060:	f00e f833 	bl	80190ca <memcpy>
 800b064:	68a0      	ldr	r0, [r4, #8]
 800b066:	4642      	mov	r2, r8
 800b068:	19a9      	adds	r1, r5, r6
 800b06a:	f00e f82e 	bl	80190ca <memcpy>
 800b06e:	e7af      	b.n	800afd0 <ucdr_serialize_int16_t+0x60>

0800b070 <ucdr_deserialize_int16_t>:
 800b070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b074:	460d      	mov	r5, r1
 800b076:	2102      	movs	r1, #2
 800b078:	4604      	mov	r4, r0
 800b07a:	f000 fd2b 	bl	800bad4 <ucdr_buffer_alignment>
 800b07e:	4601      	mov	r1, r0
 800b080:	4620      	mov	r0, r4
 800b082:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b086:	f000 fd69 	bl	800bb5c <ucdr_advance_buffer>
 800b08a:	2102      	movs	r1, #2
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 fcc1 	bl	800ba14 <ucdr_check_buffer_available_for>
 800b092:	bb60      	cbnz	r0, 800b0ee <ucdr_deserialize_int16_t+0x7e>
 800b094:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b098:	42be      	cmp	r6, r7
 800b09a:	d923      	bls.n	800b0e4 <ucdr_deserialize_int16_t+0x74>
 800b09c:	6923      	ldr	r3, [r4, #16]
 800b09e:	60a6      	str	r6, [r4, #8]
 800b0a0:	1bf6      	subs	r6, r6, r7
 800b0a2:	4433      	add	r3, r6
 800b0a4:	f1c6 0902 	rsb	r9, r6, #2
 800b0a8:	6123      	str	r3, [r4, #16]
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 fcbd 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d034      	beq.n	800b120 <ucdr_deserialize_int16_t+0xb0>
 800b0b6:	7d23      	ldrb	r3, [r4, #20]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d042      	beq.n	800b142 <ucdr_deserialize_int16_t+0xd2>
 800b0bc:	787b      	ldrb	r3, [r7, #1]
 800b0be:	702b      	strb	r3, [r5, #0]
 800b0c0:	2e00      	cmp	r6, #0
 800b0c2:	d03a      	beq.n	800b13a <ucdr_deserialize_int16_t+0xca>
 800b0c4:	783b      	ldrb	r3, [r7, #0]
 800b0c6:	706b      	strb	r3, [r5, #1]
 800b0c8:	6923      	ldr	r3, [r4, #16]
 800b0ca:	68a2      	ldr	r2, [r4, #8]
 800b0cc:	7da0      	ldrb	r0, [r4, #22]
 800b0ce:	2102      	movs	r1, #2
 800b0d0:	3302      	adds	r3, #2
 800b0d2:	444a      	add	r2, r9
 800b0d4:	1b9b      	subs	r3, r3, r6
 800b0d6:	7561      	strb	r1, [r4, #21]
 800b0d8:	60a2      	str	r2, [r4, #8]
 800b0da:	6123      	str	r3, [r4, #16]
 800b0dc:	f080 0001 	eor.w	r0, r0, #1
 800b0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e4:	2102      	movs	r1, #2
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f000 fca0 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b0ec:	b180      	cbz	r0, 800b110 <ucdr_deserialize_int16_t+0xa0>
 800b0ee:	7d23      	ldrb	r3, [r4, #20]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	68a3      	ldr	r3, [r4, #8]
 800b0f4:	d011      	beq.n	800b11a <ucdr_deserialize_int16_t+0xaa>
 800b0f6:	785b      	ldrb	r3, [r3, #1]
 800b0f8:	702b      	strb	r3, [r5, #0]
 800b0fa:	68a3      	ldr	r3, [r4, #8]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	706b      	strb	r3, [r5, #1]
 800b100:	68a2      	ldr	r2, [r4, #8]
 800b102:	6923      	ldr	r3, [r4, #16]
 800b104:	3202      	adds	r2, #2
 800b106:	3302      	adds	r3, #2
 800b108:	2102      	movs	r1, #2
 800b10a:	60a2      	str	r2, [r4, #8]
 800b10c:	6123      	str	r3, [r4, #16]
 800b10e:	7561      	strb	r1, [r4, #21]
 800b110:	7da0      	ldrb	r0, [r4, #22]
 800b112:	f080 0001 	eor.w	r0, r0, #1
 800b116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	802b      	strh	r3, [r5, #0]
 800b11e:	e7ef      	b.n	800b100 <ucdr_deserialize_int16_t+0x90>
 800b120:	68a2      	ldr	r2, [r4, #8]
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	7da0      	ldrb	r0, [r4, #22]
 800b126:	f884 8015 	strb.w	r8, [r4, #21]
 800b12a:	1b92      	subs	r2, r2, r6
 800b12c:	1b9b      	subs	r3, r3, r6
 800b12e:	60a2      	str	r2, [r4, #8]
 800b130:	6123      	str	r3, [r4, #16]
 800b132:	f080 0001 	eor.w	r0, r0, #1
 800b136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13a:	68a3      	ldr	r3, [r4, #8]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	706b      	strb	r3, [r5, #1]
 800b140:	e7c2      	b.n	800b0c8 <ucdr_deserialize_int16_t+0x58>
 800b142:	4639      	mov	r1, r7
 800b144:	4632      	mov	r2, r6
 800b146:	4628      	mov	r0, r5
 800b148:	f00d ffbf 	bl	80190ca <memcpy>
 800b14c:	68a1      	ldr	r1, [r4, #8]
 800b14e:	464a      	mov	r2, r9
 800b150:	19a8      	adds	r0, r5, r6
 800b152:	f00d ffba 	bl	80190ca <memcpy>
 800b156:	e7b7      	b.n	800b0c8 <ucdr_deserialize_int16_t+0x58>

0800b158 <ucdr_serialize_int32_t>:
 800b158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	4604      	mov	r4, r0
 800b160:	9101      	str	r1, [sp, #4]
 800b162:	2104      	movs	r1, #4
 800b164:	f000 fcb6 	bl	800bad4 <ucdr_buffer_alignment>
 800b168:	4601      	mov	r1, r0
 800b16a:	4620      	mov	r0, r4
 800b16c:	7d67      	ldrb	r7, [r4, #21]
 800b16e:	f000 fcf5 	bl	800bb5c <ucdr_advance_buffer>
 800b172:	2104      	movs	r1, #4
 800b174:	4620      	mov	r0, r4
 800b176:	f000 fc4d 	bl	800ba14 <ucdr_check_buffer_available_for>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d139      	bne.n	800b1f2 <ucdr_serialize_int32_t+0x9a>
 800b17e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b182:	42ab      	cmp	r3, r5
 800b184:	d930      	bls.n	800b1e8 <ucdr_serialize_int32_t+0x90>
 800b186:	1b5e      	subs	r6, r3, r5
 800b188:	60a3      	str	r3, [r4, #8]
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	f1c6 0804 	rsb	r8, r6, #4
 800b190:	4433      	add	r3, r6
 800b192:	6123      	str	r3, [r4, #16]
 800b194:	4641      	mov	r1, r8
 800b196:	4620      	mov	r0, r4
 800b198:	f000 fc48 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d04c      	beq.n	800b23a <ucdr_serialize_int32_t+0xe2>
 800b1a0:	7d23      	ldrb	r3, [r4, #20]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d063      	beq.n	800b26e <ucdr_serialize_int32_t+0x116>
 800b1a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b1aa:	702b      	strb	r3, [r5, #0]
 800b1ac:	2e00      	cmp	r6, #0
 800b1ae:	d051      	beq.n	800b254 <ucdr_serialize_int32_t+0xfc>
 800b1b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1b4:	706b      	strb	r3, [r5, #1]
 800b1b6:	2e01      	cmp	r6, #1
 800b1b8:	d050      	beq.n	800b25c <ucdr_serialize_int32_t+0x104>
 800b1ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b1be:	70ab      	strb	r3, [r5, #2]
 800b1c0:	2e02      	cmp	r6, #2
 800b1c2:	d04f      	beq.n	800b264 <ucdr_serialize_int32_t+0x10c>
 800b1c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b1c8:	70eb      	strb	r3, [r5, #3]
 800b1ca:	6923      	ldr	r3, [r4, #16]
 800b1cc:	68a2      	ldr	r2, [r4, #8]
 800b1ce:	7da0      	ldrb	r0, [r4, #22]
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	1b9e      	subs	r6, r3, r6
 800b1d4:	4442      	add	r2, r8
 800b1d6:	2304      	movs	r3, #4
 800b1d8:	f080 0001 	eor.w	r0, r0, #1
 800b1dc:	60a2      	str	r2, [r4, #8]
 800b1de:	6126      	str	r6, [r4, #16]
 800b1e0:	7563      	strb	r3, [r4, #21]
 800b1e2:	b002      	add	sp, #8
 800b1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e8:	2104      	movs	r1, #4
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f000 fc1e 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b1f0:	b1d0      	cbz	r0, 800b228 <ucdr_serialize_int32_t+0xd0>
 800b1f2:	7d23      	ldrb	r3, [r4, #20]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	68a3      	ldr	r3, [r4, #8]
 800b1f8:	d01c      	beq.n	800b234 <ucdr_serialize_int32_t+0xdc>
 800b1fa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1fe:	701a      	strb	r2, [r3, #0]
 800b200:	68a3      	ldr	r3, [r4, #8]
 800b202:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b206:	705a      	strb	r2, [r3, #1]
 800b208:	68a3      	ldr	r3, [r4, #8]
 800b20a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b20e:	709a      	strb	r2, [r3, #2]
 800b210:	68a3      	ldr	r3, [r4, #8]
 800b212:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b216:	70da      	strb	r2, [r3, #3]
 800b218:	68a2      	ldr	r2, [r4, #8]
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	3204      	adds	r2, #4
 800b21e:	3304      	adds	r3, #4
 800b220:	2104      	movs	r1, #4
 800b222:	60a2      	str	r2, [r4, #8]
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	7561      	strb	r1, [r4, #21]
 800b228:	7da0      	ldrb	r0, [r4, #22]
 800b22a:	f080 0001 	eor.w	r0, r0, #1
 800b22e:	b002      	add	sp, #8
 800b230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b234:	9a01      	ldr	r2, [sp, #4]
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	e7ee      	b.n	800b218 <ucdr_serialize_int32_t+0xc0>
 800b23a:	68a2      	ldr	r2, [r4, #8]
 800b23c:	6923      	ldr	r3, [r4, #16]
 800b23e:	7da0      	ldrb	r0, [r4, #22]
 800b240:	7567      	strb	r7, [r4, #21]
 800b242:	1b92      	subs	r2, r2, r6
 800b244:	1b9b      	subs	r3, r3, r6
 800b246:	f080 0001 	eor.w	r0, r0, #1
 800b24a:	60a2      	str	r2, [r4, #8]
 800b24c:	6123      	str	r3, [r4, #16]
 800b24e:	b002      	add	sp, #8
 800b250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b254:	68a3      	ldr	r3, [r4, #8]
 800b256:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b25a:	701a      	strb	r2, [r3, #0]
 800b25c:	68a3      	ldr	r3, [r4, #8]
 800b25e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	68a3      	ldr	r3, [r4, #8]
 800b266:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b26a:	701a      	strb	r2, [r3, #0]
 800b26c:	e7ad      	b.n	800b1ca <ucdr_serialize_int32_t+0x72>
 800b26e:	4628      	mov	r0, r5
 800b270:	ad01      	add	r5, sp, #4
 800b272:	4629      	mov	r1, r5
 800b274:	4632      	mov	r2, r6
 800b276:	f00d ff28 	bl	80190ca <memcpy>
 800b27a:	68a0      	ldr	r0, [r4, #8]
 800b27c:	4642      	mov	r2, r8
 800b27e:	19a9      	adds	r1, r5, r6
 800b280:	f00d ff23 	bl	80190ca <memcpy>
 800b284:	e7a1      	b.n	800b1ca <ucdr_serialize_int32_t+0x72>
 800b286:	bf00      	nop

0800b288 <ucdr_deserialize_int32_t>:
 800b288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b28c:	460d      	mov	r5, r1
 800b28e:	2104      	movs	r1, #4
 800b290:	4604      	mov	r4, r0
 800b292:	f000 fc1f 	bl	800bad4 <ucdr_buffer_alignment>
 800b296:	4601      	mov	r1, r0
 800b298:	4620      	mov	r0, r4
 800b29a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b29e:	f000 fc5d 	bl	800bb5c <ucdr_advance_buffer>
 800b2a2:	2104      	movs	r1, #4
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 fbb5 	bl	800ba14 <ucdr_check_buffer_available_for>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d138      	bne.n	800b320 <ucdr_deserialize_int32_t+0x98>
 800b2ae:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b2b2:	42b7      	cmp	r7, r6
 800b2b4:	d92f      	bls.n	800b316 <ucdr_deserialize_int32_t+0x8e>
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	60a7      	str	r7, [r4, #8]
 800b2ba:	1bbf      	subs	r7, r7, r6
 800b2bc:	443b      	add	r3, r7
 800b2be:	f1c7 0904 	rsb	r9, r7, #4
 800b2c2:	6123      	str	r3, [r4, #16]
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f000 fbb0 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d046      	beq.n	800b35e <ucdr_deserialize_int32_t+0xd6>
 800b2d0:	7d23      	ldrb	r3, [r4, #20]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d05c      	beq.n	800b390 <ucdr_deserialize_int32_t+0x108>
 800b2d6:	78f3      	ldrb	r3, [r6, #3]
 800b2d8:	702b      	strb	r3, [r5, #0]
 800b2da:	2f00      	cmp	r7, #0
 800b2dc:	d04c      	beq.n	800b378 <ucdr_deserialize_int32_t+0xf0>
 800b2de:	78b3      	ldrb	r3, [r6, #2]
 800b2e0:	706b      	strb	r3, [r5, #1]
 800b2e2:	2f01      	cmp	r7, #1
 800b2e4:	f105 0302 	add.w	r3, r5, #2
 800b2e8:	d04a      	beq.n	800b380 <ucdr_deserialize_int32_t+0xf8>
 800b2ea:	7873      	ldrb	r3, [r6, #1]
 800b2ec:	70ab      	strb	r3, [r5, #2]
 800b2ee:	2f02      	cmp	r7, #2
 800b2f0:	f105 0303 	add.w	r3, r5, #3
 800b2f4:	d048      	beq.n	800b388 <ucdr_deserialize_int32_t+0x100>
 800b2f6:	7833      	ldrb	r3, [r6, #0]
 800b2f8:	70eb      	strb	r3, [r5, #3]
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	68a2      	ldr	r2, [r4, #8]
 800b2fe:	7da0      	ldrb	r0, [r4, #22]
 800b300:	2104      	movs	r1, #4
 800b302:	3304      	adds	r3, #4
 800b304:	444a      	add	r2, r9
 800b306:	1bdb      	subs	r3, r3, r7
 800b308:	7561      	strb	r1, [r4, #21]
 800b30a:	60a2      	str	r2, [r4, #8]
 800b30c:	6123      	str	r3, [r4, #16]
 800b30e:	f080 0001 	eor.w	r0, r0, #1
 800b312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b316:	2104      	movs	r1, #4
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 fb87 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b31e:	b1b0      	cbz	r0, 800b34e <ucdr_deserialize_int32_t+0xc6>
 800b320:	7d23      	ldrb	r3, [r4, #20]
 800b322:	2b01      	cmp	r3, #1
 800b324:	68a3      	ldr	r3, [r4, #8]
 800b326:	d017      	beq.n	800b358 <ucdr_deserialize_int32_t+0xd0>
 800b328:	78db      	ldrb	r3, [r3, #3]
 800b32a:	702b      	strb	r3, [r5, #0]
 800b32c:	68a3      	ldr	r3, [r4, #8]
 800b32e:	789b      	ldrb	r3, [r3, #2]
 800b330:	706b      	strb	r3, [r5, #1]
 800b332:	68a3      	ldr	r3, [r4, #8]
 800b334:	785b      	ldrb	r3, [r3, #1]
 800b336:	70ab      	strb	r3, [r5, #2]
 800b338:	68a3      	ldr	r3, [r4, #8]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	70eb      	strb	r3, [r5, #3]
 800b33e:	68a2      	ldr	r2, [r4, #8]
 800b340:	6923      	ldr	r3, [r4, #16]
 800b342:	3204      	adds	r2, #4
 800b344:	3304      	adds	r3, #4
 800b346:	2104      	movs	r1, #4
 800b348:	60a2      	str	r2, [r4, #8]
 800b34a:	6123      	str	r3, [r4, #16]
 800b34c:	7561      	strb	r1, [r4, #21]
 800b34e:	7da0      	ldrb	r0, [r4, #22]
 800b350:	f080 0001 	eor.w	r0, r0, #1
 800b354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	602b      	str	r3, [r5, #0]
 800b35c:	e7ef      	b.n	800b33e <ucdr_deserialize_int32_t+0xb6>
 800b35e:	68a2      	ldr	r2, [r4, #8]
 800b360:	6923      	ldr	r3, [r4, #16]
 800b362:	7da0      	ldrb	r0, [r4, #22]
 800b364:	f884 8015 	strb.w	r8, [r4, #21]
 800b368:	1bd2      	subs	r2, r2, r7
 800b36a:	1bdb      	subs	r3, r3, r7
 800b36c:	60a2      	str	r2, [r4, #8]
 800b36e:	6123      	str	r3, [r4, #16]
 800b370:	f080 0001 	eor.w	r0, r0, #1
 800b374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b378:	68a3      	ldr	r3, [r4, #8]
 800b37a:	789b      	ldrb	r3, [r3, #2]
 800b37c:	706b      	strb	r3, [r5, #1]
 800b37e:	1cab      	adds	r3, r5, #2
 800b380:	68a2      	ldr	r2, [r4, #8]
 800b382:	7852      	ldrb	r2, [r2, #1]
 800b384:	f803 2b01 	strb.w	r2, [r3], #1
 800b388:	68a2      	ldr	r2, [r4, #8]
 800b38a:	7812      	ldrb	r2, [r2, #0]
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	e7b4      	b.n	800b2fa <ucdr_deserialize_int32_t+0x72>
 800b390:	4631      	mov	r1, r6
 800b392:	463a      	mov	r2, r7
 800b394:	4628      	mov	r0, r5
 800b396:	f00d fe98 	bl	80190ca <memcpy>
 800b39a:	68a1      	ldr	r1, [r4, #8]
 800b39c:	464a      	mov	r2, r9
 800b39e:	19e8      	adds	r0, r5, r7
 800b3a0:	f00d fe93 	bl	80190ca <memcpy>
 800b3a4:	e7a9      	b.n	800b2fa <ucdr_deserialize_int32_t+0x72>
 800b3a6:	bf00      	nop

0800b3a8 <ucdr_serialize_double>:
 800b3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ac:	2108      	movs	r1, #8
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	ed8d 0b00 	vstr	d0, [sp]
 800b3b6:	f000 fb8d 	bl	800bad4 <ucdr_buffer_alignment>
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	4620      	mov	r0, r4
 800b3be:	7d67      	ldrb	r7, [r4, #21]
 800b3c0:	f000 fbcc 	bl	800bb5c <ucdr_advance_buffer>
 800b3c4:	2108      	movs	r1, #8
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 fb24 	bl	800ba14 <ucdr_check_buffer_available_for>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d14e      	bne.n	800b46e <ucdr_serialize_double+0xc6>
 800b3d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b3d4:	42ab      	cmp	r3, r5
 800b3d6:	d945      	bls.n	800b464 <ucdr_serialize_double+0xbc>
 800b3d8:	1b5e      	subs	r6, r3, r5
 800b3da:	60a3      	str	r3, [r4, #8]
 800b3dc:	6923      	ldr	r3, [r4, #16]
 800b3de:	f1c6 0808 	rsb	r8, r6, #8
 800b3e2:	4433      	add	r3, r6
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	4641      	mov	r1, r8
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f000 fb1f 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d074      	beq.n	800b4dc <ucdr_serialize_double+0x134>
 800b3f2:	7d23      	ldrb	r3, [r4, #20]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	f000 809b 	beq.w	800b530 <ucdr_serialize_double+0x188>
 800b3fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3fe:	702b      	strb	r3, [r5, #0]
 800b400:	2e00      	cmp	r6, #0
 800b402:	d078      	beq.n	800b4f6 <ucdr_serialize_double+0x14e>
 800b404:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b408:	706b      	strb	r3, [r5, #1]
 800b40a:	2e01      	cmp	r6, #1
 800b40c:	d077      	beq.n	800b4fe <ucdr_serialize_double+0x156>
 800b40e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b412:	70ab      	strb	r3, [r5, #2]
 800b414:	2e02      	cmp	r6, #2
 800b416:	d076      	beq.n	800b506 <ucdr_serialize_double+0x15e>
 800b418:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b41c:	70eb      	strb	r3, [r5, #3]
 800b41e:	2e03      	cmp	r6, #3
 800b420:	d075      	beq.n	800b50e <ucdr_serialize_double+0x166>
 800b422:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b426:	712b      	strb	r3, [r5, #4]
 800b428:	2e04      	cmp	r6, #4
 800b42a:	d074      	beq.n	800b516 <ucdr_serialize_double+0x16e>
 800b42c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b430:	716b      	strb	r3, [r5, #5]
 800b432:	2e05      	cmp	r6, #5
 800b434:	d073      	beq.n	800b51e <ucdr_serialize_double+0x176>
 800b436:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b43a:	71ab      	strb	r3, [r5, #6]
 800b43c:	2e06      	cmp	r6, #6
 800b43e:	d072      	beq.n	800b526 <ucdr_serialize_double+0x17e>
 800b440:	f89d 3000 	ldrb.w	r3, [sp]
 800b444:	71eb      	strb	r3, [r5, #7]
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	68a2      	ldr	r2, [r4, #8]
 800b44a:	7da0      	ldrb	r0, [r4, #22]
 800b44c:	3308      	adds	r3, #8
 800b44e:	1b9e      	subs	r6, r3, r6
 800b450:	4442      	add	r2, r8
 800b452:	2308      	movs	r3, #8
 800b454:	f080 0001 	eor.w	r0, r0, #1
 800b458:	60a2      	str	r2, [r4, #8]
 800b45a:	6126      	str	r6, [r4, #16]
 800b45c:	7563      	strb	r3, [r4, #21]
 800b45e:	b002      	add	sp, #8
 800b460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b464:	2108      	movs	r1, #8
 800b466:	4620      	mov	r0, r4
 800b468:	f000 fae0 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b46c:	b350      	cbz	r0, 800b4c4 <ucdr_serialize_double+0x11c>
 800b46e:	7d23      	ldrb	r3, [r4, #20]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d02d      	beq.n	800b4d0 <ucdr_serialize_double+0x128>
 800b474:	68a3      	ldr	r3, [r4, #8]
 800b476:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b47a:	701a      	strb	r2, [r3, #0]
 800b47c:	68a3      	ldr	r3, [r4, #8]
 800b47e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b482:	705a      	strb	r2, [r3, #1]
 800b484:	68a3      	ldr	r3, [r4, #8]
 800b486:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b48a:	709a      	strb	r2, [r3, #2]
 800b48c:	68a3      	ldr	r3, [r4, #8]
 800b48e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b492:	70da      	strb	r2, [r3, #3]
 800b494:	68a3      	ldr	r3, [r4, #8]
 800b496:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b49a:	711a      	strb	r2, [r3, #4]
 800b49c:	68a3      	ldr	r3, [r4, #8]
 800b49e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b4a2:	715a      	strb	r2, [r3, #5]
 800b4a4:	68a3      	ldr	r3, [r4, #8]
 800b4a6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b4aa:	719a      	strb	r2, [r3, #6]
 800b4ac:	68a3      	ldr	r3, [r4, #8]
 800b4ae:	f89d 2000 	ldrb.w	r2, [sp]
 800b4b2:	71da      	strb	r2, [r3, #7]
 800b4b4:	68a2      	ldr	r2, [r4, #8]
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	3208      	adds	r2, #8
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	2108      	movs	r1, #8
 800b4be:	60a2      	str	r2, [r4, #8]
 800b4c0:	6123      	str	r3, [r4, #16]
 800b4c2:	7561      	strb	r1, [r4, #21]
 800b4c4:	7da0      	ldrb	r0, [r4, #22]
 800b4c6:	f080 0001 	eor.w	r0, r0, #1
 800b4ca:	b002      	add	sp, #8
 800b4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d0:	466b      	mov	r3, sp
 800b4d2:	cb03      	ldmia	r3!, {r0, r1}
 800b4d4:	68a3      	ldr	r3, [r4, #8]
 800b4d6:	6018      	str	r0, [r3, #0]
 800b4d8:	6059      	str	r1, [r3, #4]
 800b4da:	e7eb      	b.n	800b4b4 <ucdr_serialize_double+0x10c>
 800b4dc:	68a2      	ldr	r2, [r4, #8]
 800b4de:	6923      	ldr	r3, [r4, #16]
 800b4e0:	7da0      	ldrb	r0, [r4, #22]
 800b4e2:	7567      	strb	r7, [r4, #21]
 800b4e4:	1b92      	subs	r2, r2, r6
 800b4e6:	1b9b      	subs	r3, r3, r6
 800b4e8:	f080 0001 	eor.w	r0, r0, #1
 800b4ec:	60a2      	str	r2, [r4, #8]
 800b4ee:	6123      	str	r3, [r4, #16]
 800b4f0:	b002      	add	sp, #8
 800b4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f6:	68a3      	ldr	r3, [r4, #8]
 800b4f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	68a3      	ldr	r3, [r4, #8]
 800b500:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b50c:	701a      	strb	r2, [r3, #0]
 800b50e:	68a3      	ldr	r3, [r4, #8]
 800b510:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b514:	701a      	strb	r2, [r3, #0]
 800b516:	68a3      	ldr	r3, [r4, #8]
 800b518:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	68a3      	ldr	r3, [r4, #8]
 800b520:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	68a3      	ldr	r3, [r4, #8]
 800b528:	f89d 2000 	ldrb.w	r2, [sp]
 800b52c:	701a      	strb	r2, [r3, #0]
 800b52e:	e78a      	b.n	800b446 <ucdr_serialize_double+0x9e>
 800b530:	4628      	mov	r0, r5
 800b532:	466d      	mov	r5, sp
 800b534:	4629      	mov	r1, r5
 800b536:	4632      	mov	r2, r6
 800b538:	f00d fdc7 	bl	80190ca <memcpy>
 800b53c:	68a0      	ldr	r0, [r4, #8]
 800b53e:	4642      	mov	r2, r8
 800b540:	19a9      	adds	r1, r5, r6
 800b542:	f00d fdc2 	bl	80190ca <memcpy>
 800b546:	e77e      	b.n	800b446 <ucdr_serialize_double+0x9e>

0800b548 <ucdr_serialize_endian_double>:
 800b548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b54c:	460e      	mov	r6, r1
 800b54e:	b083      	sub	sp, #12
 800b550:	2108      	movs	r1, #8
 800b552:	4604      	mov	r4, r0
 800b554:	ed8d 0b00 	vstr	d0, [sp]
 800b558:	f000 fabc 	bl	800bad4 <ucdr_buffer_alignment>
 800b55c:	4601      	mov	r1, r0
 800b55e:	4620      	mov	r0, r4
 800b560:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b564:	f000 fafa 	bl	800bb5c <ucdr_advance_buffer>
 800b568:	2108      	movs	r1, #8
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 fa52 	bl	800ba14 <ucdr_check_buffer_available_for>
 800b570:	2800      	cmp	r0, #0
 800b572:	d14d      	bne.n	800b610 <ucdr_serialize_endian_double+0xc8>
 800b574:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800b578:	42bd      	cmp	r5, r7
 800b57a:	d944      	bls.n	800b606 <ucdr_serialize_endian_double+0xbe>
 800b57c:	6923      	ldr	r3, [r4, #16]
 800b57e:	60a5      	str	r5, [r4, #8]
 800b580:	1bed      	subs	r5, r5, r7
 800b582:	442b      	add	r3, r5
 800b584:	f1c5 0908 	rsb	r9, r5, #8
 800b588:	6123      	str	r3, [r4, #16]
 800b58a:	4649      	mov	r1, r9
 800b58c:	4620      	mov	r0, r4
 800b58e:	f000 fa4d 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b592:	2800      	cmp	r0, #0
 800b594:	d072      	beq.n	800b67c <ucdr_serialize_endian_double+0x134>
 800b596:	2e01      	cmp	r6, #1
 800b598:	f000 809b 	beq.w	800b6d2 <ucdr_serialize_endian_double+0x18a>
 800b59c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b5a0:	703b      	strb	r3, [r7, #0]
 800b5a2:	2d00      	cmp	r5, #0
 800b5a4:	d078      	beq.n	800b698 <ucdr_serialize_endian_double+0x150>
 800b5a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b5aa:	707b      	strb	r3, [r7, #1]
 800b5ac:	2d01      	cmp	r5, #1
 800b5ae:	d077      	beq.n	800b6a0 <ucdr_serialize_endian_double+0x158>
 800b5b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b5b4:	70bb      	strb	r3, [r7, #2]
 800b5b6:	2d02      	cmp	r5, #2
 800b5b8:	d076      	beq.n	800b6a8 <ucdr_serialize_endian_double+0x160>
 800b5ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b5be:	70fb      	strb	r3, [r7, #3]
 800b5c0:	2d03      	cmp	r5, #3
 800b5c2:	d075      	beq.n	800b6b0 <ucdr_serialize_endian_double+0x168>
 800b5c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b5c8:	713b      	strb	r3, [r7, #4]
 800b5ca:	2d04      	cmp	r5, #4
 800b5cc:	d074      	beq.n	800b6b8 <ucdr_serialize_endian_double+0x170>
 800b5ce:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b5d2:	717b      	strb	r3, [r7, #5]
 800b5d4:	2d05      	cmp	r5, #5
 800b5d6:	d073      	beq.n	800b6c0 <ucdr_serialize_endian_double+0x178>
 800b5d8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b5dc:	71bb      	strb	r3, [r7, #6]
 800b5de:	2d06      	cmp	r5, #6
 800b5e0:	d072      	beq.n	800b6c8 <ucdr_serialize_endian_double+0x180>
 800b5e2:	f89d 3000 	ldrb.w	r3, [sp]
 800b5e6:	71fb      	strb	r3, [r7, #7]
 800b5e8:	6923      	ldr	r3, [r4, #16]
 800b5ea:	68a2      	ldr	r2, [r4, #8]
 800b5ec:	7da0      	ldrb	r0, [r4, #22]
 800b5ee:	3308      	adds	r3, #8
 800b5f0:	1b5d      	subs	r5, r3, r5
 800b5f2:	444a      	add	r2, r9
 800b5f4:	2308      	movs	r3, #8
 800b5f6:	f080 0001 	eor.w	r0, r0, #1
 800b5fa:	60a2      	str	r2, [r4, #8]
 800b5fc:	6125      	str	r5, [r4, #16]
 800b5fe:	7563      	strb	r3, [r4, #21]
 800b600:	b003      	add	sp, #12
 800b602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b606:	2108      	movs	r1, #8
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 fa0f 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b60e:	b348      	cbz	r0, 800b664 <ucdr_serialize_endian_double+0x11c>
 800b610:	2e01      	cmp	r6, #1
 800b612:	d02d      	beq.n	800b670 <ucdr_serialize_endian_double+0x128>
 800b614:	68a3      	ldr	r3, [r4, #8]
 800b616:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b61a:	701a      	strb	r2, [r3, #0]
 800b61c:	68a3      	ldr	r3, [r4, #8]
 800b61e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b622:	705a      	strb	r2, [r3, #1]
 800b624:	68a3      	ldr	r3, [r4, #8]
 800b626:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b62a:	709a      	strb	r2, [r3, #2]
 800b62c:	68a3      	ldr	r3, [r4, #8]
 800b62e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b632:	70da      	strb	r2, [r3, #3]
 800b634:	68a3      	ldr	r3, [r4, #8]
 800b636:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b63a:	711a      	strb	r2, [r3, #4]
 800b63c:	68a3      	ldr	r3, [r4, #8]
 800b63e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b642:	715a      	strb	r2, [r3, #5]
 800b644:	68a3      	ldr	r3, [r4, #8]
 800b646:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b64a:	719a      	strb	r2, [r3, #6]
 800b64c:	68a3      	ldr	r3, [r4, #8]
 800b64e:	f89d 2000 	ldrb.w	r2, [sp]
 800b652:	71da      	strb	r2, [r3, #7]
 800b654:	68a2      	ldr	r2, [r4, #8]
 800b656:	6923      	ldr	r3, [r4, #16]
 800b658:	3208      	adds	r2, #8
 800b65a:	3308      	adds	r3, #8
 800b65c:	2108      	movs	r1, #8
 800b65e:	60a2      	str	r2, [r4, #8]
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	7561      	strb	r1, [r4, #21]
 800b664:	7da0      	ldrb	r0, [r4, #22]
 800b666:	f080 0001 	eor.w	r0, r0, #1
 800b66a:	b003      	add	sp, #12
 800b66c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b670:	466b      	mov	r3, sp
 800b672:	cb03      	ldmia	r3!, {r0, r1}
 800b674:	68a3      	ldr	r3, [r4, #8]
 800b676:	6018      	str	r0, [r3, #0]
 800b678:	6059      	str	r1, [r3, #4]
 800b67a:	e7eb      	b.n	800b654 <ucdr_serialize_endian_double+0x10c>
 800b67c:	68a2      	ldr	r2, [r4, #8]
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	7da0      	ldrb	r0, [r4, #22]
 800b682:	f884 8015 	strb.w	r8, [r4, #21]
 800b686:	1b52      	subs	r2, r2, r5
 800b688:	1b5b      	subs	r3, r3, r5
 800b68a:	f080 0001 	eor.w	r0, r0, #1
 800b68e:	60a2      	str	r2, [r4, #8]
 800b690:	6123      	str	r3, [r4, #16]
 800b692:	b003      	add	sp, #12
 800b694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b698:	68a3      	ldr	r3, [r4, #8]
 800b69a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b6a6:	701a      	strb	r2, [r3, #0]
 800b6a8:	68a3      	ldr	r3, [r4, #8]
 800b6aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b6ae:	701a      	strb	r2, [r3, #0]
 800b6b0:	68a3      	ldr	r3, [r4, #8]
 800b6b2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b6b6:	701a      	strb	r2, [r3, #0]
 800b6b8:	68a3      	ldr	r3, [r4, #8]
 800b6ba:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b6be:	701a      	strb	r2, [r3, #0]
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b6c6:	701a      	strb	r2, [r3, #0]
 800b6c8:	68a3      	ldr	r3, [r4, #8]
 800b6ca:	f89d 2000 	ldrb.w	r2, [sp]
 800b6ce:	701a      	strb	r2, [r3, #0]
 800b6d0:	e78a      	b.n	800b5e8 <ucdr_serialize_endian_double+0xa0>
 800b6d2:	466e      	mov	r6, sp
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f00d fcf6 	bl	80190ca <memcpy>
 800b6de:	68a0      	ldr	r0, [r4, #8]
 800b6e0:	464a      	mov	r2, r9
 800b6e2:	1971      	adds	r1, r6, r5
 800b6e4:	f00d fcf1 	bl	80190ca <memcpy>
 800b6e8:	e77e      	b.n	800b5e8 <ucdr_serialize_endian_double+0xa0>
 800b6ea:	bf00      	nop

0800b6ec <ucdr_deserialize_double>:
 800b6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f0:	460d      	mov	r5, r1
 800b6f2:	2108      	movs	r1, #8
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	f000 f9ed 	bl	800bad4 <ucdr_buffer_alignment>
 800b6fa:	4601      	mov	r1, r0
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b702:	f000 fa2b 	bl	800bb5c <ucdr_advance_buffer>
 800b706:	2108      	movs	r1, #8
 800b708:	4620      	mov	r0, r4
 800b70a:	f000 f983 	bl	800ba14 <ucdr_check_buffer_available_for>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d151      	bne.n	800b7b6 <ucdr_deserialize_double+0xca>
 800b712:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b716:	42be      	cmp	r6, r7
 800b718:	d948      	bls.n	800b7ac <ucdr_deserialize_double+0xc0>
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	60a6      	str	r6, [r4, #8]
 800b71e:	1bf6      	subs	r6, r6, r7
 800b720:	4433      	add	r3, r6
 800b722:	f1c6 0808 	rsb	r8, r6, #8
 800b726:	6123      	str	r3, [r4, #16]
 800b728:	4641      	mov	r1, r8
 800b72a:	4620      	mov	r0, r4
 800b72c:	f000 f97e 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b730:	2800      	cmp	r0, #0
 800b732:	d06d      	beq.n	800b810 <ucdr_deserialize_double+0x124>
 800b734:	7d23      	ldrb	r3, [r4, #20]
 800b736:	2b01      	cmp	r3, #1
 800b738:	f000 8093 	beq.w	800b862 <ucdr_deserialize_double+0x176>
 800b73c:	79fb      	ldrb	r3, [r7, #7]
 800b73e:	702b      	strb	r3, [r5, #0]
 800b740:	2e00      	cmp	r6, #0
 800b742:	d072      	beq.n	800b82a <ucdr_deserialize_double+0x13e>
 800b744:	79bb      	ldrb	r3, [r7, #6]
 800b746:	706b      	strb	r3, [r5, #1]
 800b748:	2e01      	cmp	r6, #1
 800b74a:	f105 0302 	add.w	r3, r5, #2
 800b74e:	d070      	beq.n	800b832 <ucdr_deserialize_double+0x146>
 800b750:	797b      	ldrb	r3, [r7, #5]
 800b752:	70ab      	strb	r3, [r5, #2]
 800b754:	2e02      	cmp	r6, #2
 800b756:	f105 0303 	add.w	r3, r5, #3
 800b75a:	d06e      	beq.n	800b83a <ucdr_deserialize_double+0x14e>
 800b75c:	793b      	ldrb	r3, [r7, #4]
 800b75e:	70eb      	strb	r3, [r5, #3]
 800b760:	2e03      	cmp	r6, #3
 800b762:	f105 0304 	add.w	r3, r5, #4
 800b766:	d06c      	beq.n	800b842 <ucdr_deserialize_double+0x156>
 800b768:	78fb      	ldrb	r3, [r7, #3]
 800b76a:	712b      	strb	r3, [r5, #4]
 800b76c:	2e04      	cmp	r6, #4
 800b76e:	f105 0305 	add.w	r3, r5, #5
 800b772:	d06a      	beq.n	800b84a <ucdr_deserialize_double+0x15e>
 800b774:	78bb      	ldrb	r3, [r7, #2]
 800b776:	716b      	strb	r3, [r5, #5]
 800b778:	2e05      	cmp	r6, #5
 800b77a:	f105 0306 	add.w	r3, r5, #6
 800b77e:	d068      	beq.n	800b852 <ucdr_deserialize_double+0x166>
 800b780:	787b      	ldrb	r3, [r7, #1]
 800b782:	71ab      	strb	r3, [r5, #6]
 800b784:	2e06      	cmp	r6, #6
 800b786:	f105 0307 	add.w	r3, r5, #7
 800b78a:	d066      	beq.n	800b85a <ucdr_deserialize_double+0x16e>
 800b78c:	783b      	ldrb	r3, [r7, #0]
 800b78e:	71eb      	strb	r3, [r5, #7]
 800b790:	6923      	ldr	r3, [r4, #16]
 800b792:	68a2      	ldr	r2, [r4, #8]
 800b794:	7da0      	ldrb	r0, [r4, #22]
 800b796:	3308      	adds	r3, #8
 800b798:	1b9e      	subs	r6, r3, r6
 800b79a:	2308      	movs	r3, #8
 800b79c:	4442      	add	r2, r8
 800b79e:	7563      	strb	r3, [r4, #21]
 800b7a0:	60a2      	str	r2, [r4, #8]
 800b7a2:	6126      	str	r6, [r4, #16]
 800b7a4:	f080 0001 	eor.w	r0, r0, #1
 800b7a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ac:	2108      	movs	r1, #8
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f000 f93c 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b7b4:	b310      	cbz	r0, 800b7fc <ucdr_deserialize_double+0x110>
 800b7b6:	7d23      	ldrb	r3, [r4, #20]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	68a3      	ldr	r3, [r4, #8]
 800b7bc:	d023      	beq.n	800b806 <ucdr_deserialize_double+0x11a>
 800b7be:	79db      	ldrb	r3, [r3, #7]
 800b7c0:	702b      	strb	r3, [r5, #0]
 800b7c2:	68a3      	ldr	r3, [r4, #8]
 800b7c4:	799b      	ldrb	r3, [r3, #6]
 800b7c6:	706b      	strb	r3, [r5, #1]
 800b7c8:	68a3      	ldr	r3, [r4, #8]
 800b7ca:	795b      	ldrb	r3, [r3, #5]
 800b7cc:	70ab      	strb	r3, [r5, #2]
 800b7ce:	68a3      	ldr	r3, [r4, #8]
 800b7d0:	791b      	ldrb	r3, [r3, #4]
 800b7d2:	70eb      	strb	r3, [r5, #3]
 800b7d4:	68a3      	ldr	r3, [r4, #8]
 800b7d6:	78db      	ldrb	r3, [r3, #3]
 800b7d8:	712b      	strb	r3, [r5, #4]
 800b7da:	68a3      	ldr	r3, [r4, #8]
 800b7dc:	789b      	ldrb	r3, [r3, #2]
 800b7de:	716b      	strb	r3, [r5, #5]
 800b7e0:	68a3      	ldr	r3, [r4, #8]
 800b7e2:	785b      	ldrb	r3, [r3, #1]
 800b7e4:	71ab      	strb	r3, [r5, #6]
 800b7e6:	68a3      	ldr	r3, [r4, #8]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	71eb      	strb	r3, [r5, #7]
 800b7ec:	68a2      	ldr	r2, [r4, #8]
 800b7ee:	6923      	ldr	r3, [r4, #16]
 800b7f0:	3208      	adds	r2, #8
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	2108      	movs	r1, #8
 800b7f6:	60a2      	str	r2, [r4, #8]
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	7561      	strb	r1, [r4, #21]
 800b7fc:	7da0      	ldrb	r0, [r4, #22]
 800b7fe:	f080 0001 	eor.w	r0, r0, #1
 800b802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	606b      	str	r3, [r5, #4]
 800b80c:	602a      	str	r2, [r5, #0]
 800b80e:	e7ed      	b.n	800b7ec <ucdr_deserialize_double+0x100>
 800b810:	68a2      	ldr	r2, [r4, #8]
 800b812:	6923      	ldr	r3, [r4, #16]
 800b814:	7da0      	ldrb	r0, [r4, #22]
 800b816:	f884 9015 	strb.w	r9, [r4, #21]
 800b81a:	1b92      	subs	r2, r2, r6
 800b81c:	1b9b      	subs	r3, r3, r6
 800b81e:	60a2      	str	r2, [r4, #8]
 800b820:	6123      	str	r3, [r4, #16]
 800b822:	f080 0001 	eor.w	r0, r0, #1
 800b826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b82a:	68a3      	ldr	r3, [r4, #8]
 800b82c:	799b      	ldrb	r3, [r3, #6]
 800b82e:	706b      	strb	r3, [r5, #1]
 800b830:	1cab      	adds	r3, r5, #2
 800b832:	68a2      	ldr	r2, [r4, #8]
 800b834:	7952      	ldrb	r2, [r2, #5]
 800b836:	f803 2b01 	strb.w	r2, [r3], #1
 800b83a:	68a2      	ldr	r2, [r4, #8]
 800b83c:	7912      	ldrb	r2, [r2, #4]
 800b83e:	f803 2b01 	strb.w	r2, [r3], #1
 800b842:	68a2      	ldr	r2, [r4, #8]
 800b844:	78d2      	ldrb	r2, [r2, #3]
 800b846:	f803 2b01 	strb.w	r2, [r3], #1
 800b84a:	68a2      	ldr	r2, [r4, #8]
 800b84c:	7892      	ldrb	r2, [r2, #2]
 800b84e:	f803 2b01 	strb.w	r2, [r3], #1
 800b852:	68a2      	ldr	r2, [r4, #8]
 800b854:	7852      	ldrb	r2, [r2, #1]
 800b856:	f803 2b01 	strb.w	r2, [r3], #1
 800b85a:	68a2      	ldr	r2, [r4, #8]
 800b85c:	7812      	ldrb	r2, [r2, #0]
 800b85e:	701a      	strb	r2, [r3, #0]
 800b860:	e796      	b.n	800b790 <ucdr_deserialize_double+0xa4>
 800b862:	4639      	mov	r1, r7
 800b864:	4632      	mov	r2, r6
 800b866:	4628      	mov	r0, r5
 800b868:	f00d fc2f 	bl	80190ca <memcpy>
 800b86c:	68a1      	ldr	r1, [r4, #8]
 800b86e:	4642      	mov	r2, r8
 800b870:	19a8      	adds	r0, r5, r6
 800b872:	f00d fc2a 	bl	80190ca <memcpy>
 800b876:	e78b      	b.n	800b790 <ucdr_deserialize_double+0xa4>

0800b878 <ucdr_deserialize_endian_double>:
 800b878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b87c:	460f      	mov	r7, r1
 800b87e:	2108      	movs	r1, #8
 800b880:	4604      	mov	r4, r0
 800b882:	4615      	mov	r5, r2
 800b884:	f000 f926 	bl	800bad4 <ucdr_buffer_alignment>
 800b888:	4601      	mov	r1, r0
 800b88a:	4620      	mov	r0, r4
 800b88c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b890:	f000 f964 	bl	800bb5c <ucdr_advance_buffer>
 800b894:	2108      	movs	r1, #8
 800b896:	4620      	mov	r0, r4
 800b898:	f000 f8bc 	bl	800ba14 <ucdr_check_buffer_available_for>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d159      	bne.n	800b954 <ucdr_deserialize_endian_double+0xdc>
 800b8a0:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800b8a4:	4546      	cmp	r6, r8
 800b8a6:	d950      	bls.n	800b94a <ucdr_deserialize_endian_double+0xd2>
 800b8a8:	6923      	ldr	r3, [r4, #16]
 800b8aa:	60a6      	str	r6, [r4, #8]
 800b8ac:	eba6 0608 	sub.w	r6, r6, r8
 800b8b0:	4433      	add	r3, r6
 800b8b2:	f1c6 0a08 	rsb	sl, r6, #8
 800b8b6:	6123      	str	r3, [r4, #16]
 800b8b8:	4651      	mov	r1, sl
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f000 f8b6 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d073      	beq.n	800b9ac <ucdr_deserialize_endian_double+0x134>
 800b8c4:	2f01      	cmp	r7, #1
 800b8c6:	f000 809a 	beq.w	800b9fe <ucdr_deserialize_endian_double+0x186>
 800b8ca:	f898 3007 	ldrb.w	r3, [r8, #7]
 800b8ce:	702b      	strb	r3, [r5, #0]
 800b8d0:	2e00      	cmp	r6, #0
 800b8d2:	d078      	beq.n	800b9c6 <ucdr_deserialize_endian_double+0x14e>
 800b8d4:	f898 3006 	ldrb.w	r3, [r8, #6]
 800b8d8:	706b      	strb	r3, [r5, #1]
 800b8da:	2e01      	cmp	r6, #1
 800b8dc:	f105 0302 	add.w	r3, r5, #2
 800b8e0:	d075      	beq.n	800b9ce <ucdr_deserialize_endian_double+0x156>
 800b8e2:	f898 3005 	ldrb.w	r3, [r8, #5]
 800b8e6:	70ab      	strb	r3, [r5, #2]
 800b8e8:	2e02      	cmp	r6, #2
 800b8ea:	f105 0303 	add.w	r3, r5, #3
 800b8ee:	d072      	beq.n	800b9d6 <ucdr_deserialize_endian_double+0x15e>
 800b8f0:	f898 3004 	ldrb.w	r3, [r8, #4]
 800b8f4:	70eb      	strb	r3, [r5, #3]
 800b8f6:	2e03      	cmp	r6, #3
 800b8f8:	f105 0304 	add.w	r3, r5, #4
 800b8fc:	d06f      	beq.n	800b9de <ucdr_deserialize_endian_double+0x166>
 800b8fe:	f898 3003 	ldrb.w	r3, [r8, #3]
 800b902:	712b      	strb	r3, [r5, #4]
 800b904:	2e04      	cmp	r6, #4
 800b906:	f105 0305 	add.w	r3, r5, #5
 800b90a:	d06c      	beq.n	800b9e6 <ucdr_deserialize_endian_double+0x16e>
 800b90c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b910:	716b      	strb	r3, [r5, #5]
 800b912:	2e05      	cmp	r6, #5
 800b914:	f105 0306 	add.w	r3, r5, #6
 800b918:	d069      	beq.n	800b9ee <ucdr_deserialize_endian_double+0x176>
 800b91a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b91e:	71ab      	strb	r3, [r5, #6]
 800b920:	2e06      	cmp	r6, #6
 800b922:	f105 0307 	add.w	r3, r5, #7
 800b926:	d066      	beq.n	800b9f6 <ucdr_deserialize_endian_double+0x17e>
 800b928:	f898 3000 	ldrb.w	r3, [r8]
 800b92c:	71eb      	strb	r3, [r5, #7]
 800b92e:	6923      	ldr	r3, [r4, #16]
 800b930:	68a2      	ldr	r2, [r4, #8]
 800b932:	7da0      	ldrb	r0, [r4, #22]
 800b934:	3308      	adds	r3, #8
 800b936:	1b9e      	subs	r6, r3, r6
 800b938:	2308      	movs	r3, #8
 800b93a:	4452      	add	r2, sl
 800b93c:	7563      	strb	r3, [r4, #21]
 800b93e:	60a2      	str	r2, [r4, #8]
 800b940:	6126      	str	r6, [r4, #16]
 800b942:	f080 0001 	eor.w	r0, r0, #1
 800b946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94a:	2108      	movs	r1, #8
 800b94c:	4620      	mov	r0, r4
 800b94e:	f000 f86d 	bl	800ba2c <ucdr_check_final_buffer_behavior>
 800b952:	b308      	cbz	r0, 800b998 <ucdr_deserialize_endian_double+0x120>
 800b954:	2f01      	cmp	r7, #1
 800b956:	68a3      	ldr	r3, [r4, #8]
 800b958:	d023      	beq.n	800b9a2 <ucdr_deserialize_endian_double+0x12a>
 800b95a:	79db      	ldrb	r3, [r3, #7]
 800b95c:	702b      	strb	r3, [r5, #0]
 800b95e:	68a3      	ldr	r3, [r4, #8]
 800b960:	799b      	ldrb	r3, [r3, #6]
 800b962:	706b      	strb	r3, [r5, #1]
 800b964:	68a3      	ldr	r3, [r4, #8]
 800b966:	795b      	ldrb	r3, [r3, #5]
 800b968:	70ab      	strb	r3, [r5, #2]
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	791b      	ldrb	r3, [r3, #4]
 800b96e:	70eb      	strb	r3, [r5, #3]
 800b970:	68a3      	ldr	r3, [r4, #8]
 800b972:	78db      	ldrb	r3, [r3, #3]
 800b974:	712b      	strb	r3, [r5, #4]
 800b976:	68a3      	ldr	r3, [r4, #8]
 800b978:	789b      	ldrb	r3, [r3, #2]
 800b97a:	716b      	strb	r3, [r5, #5]
 800b97c:	68a3      	ldr	r3, [r4, #8]
 800b97e:	785b      	ldrb	r3, [r3, #1]
 800b980:	71ab      	strb	r3, [r5, #6]
 800b982:	68a3      	ldr	r3, [r4, #8]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	71eb      	strb	r3, [r5, #7]
 800b988:	68a2      	ldr	r2, [r4, #8]
 800b98a:	6923      	ldr	r3, [r4, #16]
 800b98c:	3208      	adds	r2, #8
 800b98e:	3308      	adds	r3, #8
 800b990:	2108      	movs	r1, #8
 800b992:	60a2      	str	r2, [r4, #8]
 800b994:	6123      	str	r3, [r4, #16]
 800b996:	7561      	strb	r1, [r4, #21]
 800b998:	7da0      	ldrb	r0, [r4, #22]
 800b99a:	f080 0001 	eor.w	r0, r0, #1
 800b99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	606b      	str	r3, [r5, #4]
 800b9a8:	602a      	str	r2, [r5, #0]
 800b9aa:	e7ed      	b.n	800b988 <ucdr_deserialize_endian_double+0x110>
 800b9ac:	68a2      	ldr	r2, [r4, #8]
 800b9ae:	6923      	ldr	r3, [r4, #16]
 800b9b0:	7da0      	ldrb	r0, [r4, #22]
 800b9b2:	f884 9015 	strb.w	r9, [r4, #21]
 800b9b6:	1b92      	subs	r2, r2, r6
 800b9b8:	1b9b      	subs	r3, r3, r6
 800b9ba:	60a2      	str	r2, [r4, #8]
 800b9bc:	6123      	str	r3, [r4, #16]
 800b9be:	f080 0001 	eor.w	r0, r0, #1
 800b9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c6:	68a3      	ldr	r3, [r4, #8]
 800b9c8:	799b      	ldrb	r3, [r3, #6]
 800b9ca:	706b      	strb	r3, [r5, #1]
 800b9cc:	1cab      	adds	r3, r5, #2
 800b9ce:	68a2      	ldr	r2, [r4, #8]
 800b9d0:	7952      	ldrb	r2, [r2, #5]
 800b9d2:	f803 2b01 	strb.w	r2, [r3], #1
 800b9d6:	68a2      	ldr	r2, [r4, #8]
 800b9d8:	7912      	ldrb	r2, [r2, #4]
 800b9da:	f803 2b01 	strb.w	r2, [r3], #1
 800b9de:	68a2      	ldr	r2, [r4, #8]
 800b9e0:	78d2      	ldrb	r2, [r2, #3]
 800b9e2:	f803 2b01 	strb.w	r2, [r3], #1
 800b9e6:	68a2      	ldr	r2, [r4, #8]
 800b9e8:	7892      	ldrb	r2, [r2, #2]
 800b9ea:	f803 2b01 	strb.w	r2, [r3], #1
 800b9ee:	68a2      	ldr	r2, [r4, #8]
 800b9f0:	7852      	ldrb	r2, [r2, #1]
 800b9f2:	f803 2b01 	strb.w	r2, [r3], #1
 800b9f6:	68a2      	ldr	r2, [r4, #8]
 800b9f8:	7812      	ldrb	r2, [r2, #0]
 800b9fa:	701a      	strb	r2, [r3, #0]
 800b9fc:	e797      	b.n	800b92e <ucdr_deserialize_endian_double+0xb6>
 800b9fe:	4641      	mov	r1, r8
 800ba00:	4632      	mov	r2, r6
 800ba02:	4628      	mov	r0, r5
 800ba04:	f00d fb61 	bl	80190ca <memcpy>
 800ba08:	68a1      	ldr	r1, [r4, #8]
 800ba0a:	4652      	mov	r2, sl
 800ba0c:	19a8      	adds	r0, r5, r6
 800ba0e:	f00d fb5c 	bl	80190ca <memcpy>
 800ba12:	e78c      	b.n	800b92e <ucdr_deserialize_endian_double+0xb6>

0800ba14 <ucdr_check_buffer_available_for>:
 800ba14:	7d83      	ldrb	r3, [r0, #22]
 800ba16:	b93b      	cbnz	r3, 800ba28 <ucdr_check_buffer_available_for+0x14>
 800ba18:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ba1c:	4419      	add	r1, r3
 800ba1e:	4288      	cmp	r0, r1
 800ba20:	bf34      	ite	cc
 800ba22:	2000      	movcc	r0, #0
 800ba24:	2001      	movcs	r0, #1
 800ba26:	4770      	bx	lr
 800ba28:	2000      	movs	r0, #0
 800ba2a:	4770      	bx	lr

0800ba2c <ucdr_check_final_buffer_behavior>:
 800ba2c:	7d83      	ldrb	r3, [r0, #22]
 800ba2e:	b943      	cbnz	r3, 800ba42 <ucdr_check_final_buffer_behavior+0x16>
 800ba30:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ba34:	4291      	cmp	r1, r2
 800ba36:	b510      	push	{r4, lr}
 800ba38:	4604      	mov	r4, r0
 800ba3a:	d205      	bcs.n	800ba48 <ucdr_check_final_buffer_behavior+0x1c>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	4618      	mov	r0, r3
 800ba40:	bd10      	pop	{r4, pc}
 800ba42:	2300      	movs	r3, #0
 800ba44:	4618      	mov	r0, r3
 800ba46:	4770      	bx	lr
 800ba48:	6982      	ldr	r2, [r0, #24]
 800ba4a:	b13a      	cbz	r2, 800ba5c <ucdr_check_final_buffer_behavior+0x30>
 800ba4c:	69c1      	ldr	r1, [r0, #28]
 800ba4e:	4790      	blx	r2
 800ba50:	f080 0301 	eor.w	r3, r0, #1
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	75a0      	strb	r0, [r4, #22]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	bd10      	pop	{r4, pc}
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	75a0      	strb	r0, [r4, #22]
 800ba60:	e7fa      	b.n	800ba58 <ucdr_check_final_buffer_behavior+0x2c>
 800ba62:	bf00      	nop

0800ba64 <ucdr_set_on_full_buffer_callback>:
 800ba64:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop

0800ba6c <ucdr_init_buffer_origin_offset_endian>:
 800ba6c:	b410      	push	{r4}
 800ba6e:	9c01      	ldr	r4, [sp, #4]
 800ba70:	6001      	str	r1, [r0, #0]
 800ba72:	440a      	add	r2, r1
 800ba74:	6042      	str	r2, [r0, #4]
 800ba76:	190a      	adds	r2, r1, r4
 800ba78:	441c      	add	r4, r3
 800ba7a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ba7e:	6082      	str	r2, [r0, #8]
 800ba80:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ba84:	7503      	strb	r3, [r0, #20]
 800ba86:	2200      	movs	r2, #0
 800ba88:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ba8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba90:	7542      	strb	r2, [r0, #21]
 800ba92:	7582      	strb	r2, [r0, #22]
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop

0800ba98 <ucdr_init_buffer_origin_offset>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	9c04      	ldr	r4, [sp, #16]
 800ba9e:	9400      	str	r4, [sp, #0]
 800baa0:	2401      	movs	r4, #1
 800baa2:	9401      	str	r4, [sp, #4]
 800baa4:	f7ff ffe2 	bl	800ba6c <ucdr_init_buffer_origin_offset_endian>
 800baa8:	b002      	add	sp, #8
 800baaa:	bd10      	pop	{r4, pc}

0800baac <ucdr_init_buffer_origin>:
 800baac:	b510      	push	{r4, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	2400      	movs	r4, #0
 800bab2:	9400      	str	r4, [sp, #0]
 800bab4:	f7ff fff0 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 800bab8:	b002      	add	sp, #8
 800baba:	bd10      	pop	{r4, pc}

0800babc <ucdr_init_buffer>:
 800babc:	2300      	movs	r3, #0
 800babe:	f7ff bff5 	b.w	800baac <ucdr_init_buffer_origin>
 800bac2:	bf00      	nop

0800bac4 <ucdr_alignment>:
 800bac4:	fbb0 f3f1 	udiv	r3, r0, r1
 800bac8:	fb03 0011 	mls	r0, r3, r1, r0
 800bacc:	1a08      	subs	r0, r1, r0
 800bace:	3901      	subs	r1, #1
 800bad0:	4008      	ands	r0, r1
 800bad2:	4770      	bx	lr

0800bad4 <ucdr_buffer_alignment>:
 800bad4:	7d43      	ldrb	r3, [r0, #21]
 800bad6:	428b      	cmp	r3, r1
 800bad8:	d208      	bcs.n	800baec <ucdr_buffer_alignment+0x18>
 800bada:	6900      	ldr	r0, [r0, #16]
 800badc:	fbb0 f3f1 	udiv	r3, r0, r1
 800bae0:	fb01 0013 	mls	r0, r1, r3, r0
 800bae4:	1a08      	subs	r0, r1, r0
 800bae6:	3901      	subs	r1, #1
 800bae8:	4008      	ands	r0, r1
 800baea:	4770      	bx	lr
 800baec:	2000      	movs	r0, #0
 800baee:	4770      	bx	lr

0800baf0 <ucdr_align_to>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4604      	mov	r4, r0
 800baf4:	460d      	mov	r5, r1
 800baf6:	f7ff ffed 	bl	800bad4 <ucdr_buffer_alignment>
 800bafa:	68a3      	ldr	r3, [r4, #8]
 800bafc:	6921      	ldr	r1, [r4, #16]
 800bafe:	7565      	strb	r5, [r4, #21]
 800bb00:	181a      	adds	r2, r3, r0
 800bb02:	6863      	ldr	r3, [r4, #4]
 800bb04:	4293      	cmp	r3, r2
 800bb06:	4408      	add	r0, r1
 800bb08:	bf28      	it	cs
 800bb0a:	4613      	movcs	r3, r2
 800bb0c:	6120      	str	r0, [r4, #16]
 800bb0e:	60a3      	str	r3, [r4, #8]
 800bb10:	bd38      	pop	{r3, r4, r5, pc}
 800bb12:	bf00      	nop

0800bb14 <ucdr_buffer_length>:
 800bb14:	6882      	ldr	r2, [r0, #8]
 800bb16:	6800      	ldr	r0, [r0, #0]
 800bb18:	1a10      	subs	r0, r2, r0
 800bb1a:	4770      	bx	lr

0800bb1c <ucdr_buffer_remaining>:
 800bb1c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800bb20:	1a10      	subs	r0, r2, r0
 800bb22:	4770      	bx	lr

0800bb24 <ucdr_check_final_buffer_behavior_array>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	7d83      	ldrb	r3, [r0, #22]
 800bb28:	b963      	cbnz	r3, 800bb44 <ucdr_check_final_buffer_behavior_array+0x20>
 800bb2a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	4604      	mov	r4, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	d308      	bcc.n	800bb48 <ucdr_check_final_buffer_behavior_array+0x24>
 800bb36:	b139      	cbz	r1, 800bb48 <ucdr_check_final_buffer_behavior_array+0x24>
 800bb38:	6983      	ldr	r3, [r0, #24]
 800bb3a:	b163      	cbz	r3, 800bb56 <ucdr_check_final_buffer_behavior_array+0x32>
 800bb3c:	69c1      	ldr	r1, [r0, #28]
 800bb3e:	4798      	blx	r3
 800bb40:	75a0      	strb	r0, [r4, #22]
 800bb42:	b108      	cbz	r0, 800bb48 <ucdr_check_final_buffer_behavior_array+0x24>
 800bb44:	2000      	movs	r0, #0
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f7ff ffe7 	bl	800bb1c <ucdr_buffer_remaining>
 800bb4e:	42a8      	cmp	r0, r5
 800bb50:	bf28      	it	cs
 800bb52:	4628      	movcs	r0, r5
 800bb54:	bd38      	pop	{r3, r4, r5, pc}
 800bb56:	2301      	movs	r3, #1
 800bb58:	7583      	strb	r3, [r0, #22]
 800bb5a:	e7f3      	b.n	800bb44 <ucdr_check_final_buffer_behavior_array+0x20>

0800bb5c <ucdr_advance_buffer>:
 800bb5c:	b538      	push	{r3, r4, r5, lr}
 800bb5e:	4604      	mov	r4, r0
 800bb60:	460d      	mov	r5, r1
 800bb62:	f7ff ff57 	bl	800ba14 <ucdr_check_buffer_available_for>
 800bb66:	b178      	cbz	r0, 800bb88 <ucdr_advance_buffer+0x2c>
 800bb68:	6923      	ldr	r3, [r4, #16]
 800bb6a:	68a2      	ldr	r2, [r4, #8]
 800bb6c:	442b      	add	r3, r5
 800bb6e:	6123      	str	r3, [r4, #16]
 800bb70:	2301      	movs	r3, #1
 800bb72:	442a      	add	r2, r5
 800bb74:	7563      	strb	r3, [r4, #21]
 800bb76:	60a2      	str	r2, [r4, #8]
 800bb78:	bd38      	pop	{r3, r4, r5, pc}
 800bb7a:	68a2      	ldr	r2, [r4, #8]
 800bb7c:	6923      	ldr	r3, [r4, #16]
 800bb7e:	4402      	add	r2, r0
 800bb80:	4403      	add	r3, r0
 800bb82:	1a2d      	subs	r5, r5, r0
 800bb84:	60a2      	str	r2, [r4, #8]
 800bb86:	6123      	str	r3, [r4, #16]
 800bb88:	4629      	mov	r1, r5
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f7ff ffc9 	bl	800bb24 <ucdr_check_final_buffer_behavior_array>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d1f1      	bne.n	800bb7a <ucdr_advance_buffer+0x1e>
 800bb96:	2301      	movs	r3, #1
 800bb98:	7563      	strb	r3, [r4, #21]
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}

0800bb9c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800bb9c:	4b04      	ldr	r3, [pc, #16]	@ (800bbb0 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	b10a      	cbz	r2, 800bba6 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800bba2:	4803      	ldr	r0, [pc, #12]	@ (800bbb0 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800bba4:	4770      	bx	lr
 800bba6:	4a03      	ldr	r2, [pc, #12]	@ (800bbb4 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800bba8:	4801      	ldr	r0, [pc, #4]	@ (800bbb0 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800bbaa:	6812      	ldr	r2, [r2, #0]
 800bbac:	601a      	str	r2, [r3, #0]
 800bbae:	4770      	bx	lr
 800bbb0:	200001c4 	.word	0x200001c4
 800bbb4:	20000308 	.word	0x20000308

0800bbb8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800bbb8:	4a02      	ldr	r2, [pc, #8]	@ (800bbc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800bbba:	4b03      	ldr	r3, [pc, #12]	@ (800bbc8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 800bbbc:	6812      	ldr	r2, [r2, #0]
 800bbbe:	601a      	str	r2, [r3, #0]
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	20000308 	.word	0x20000308
 800bbc8:	200001c4 	.word	0x200001c4

0800bbcc <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 800bbcc:	f005 bcc8 	b.w	8011560 <nav_msgs__msg__Odometry__init>

0800bbd0 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800bbd0:	f005 bd1c 	b.w	801160c <nav_msgs__msg__Odometry__fini>

0800bbd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800bbd4:	b510      	push	{r4, lr}
 800bbd6:	f002 f8a5 	bl	800dd24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800bbda:	4c0a      	ldr	r4, [pc, #40]	@ (800bc04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 800bbdc:	60e0      	str	r0, [r4, #12]
 800bbde:	f002 fa19 	bl	800e014 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800bbe2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800bbe6:	f002 fa5b 	bl	800e0a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800bbea:	4b07      	ldr	r3, [pc, #28]	@ (800bc08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800bbec:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	b10a      	cbz	r2, 800bbf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 800bbf4:	4804      	ldr	r0, [pc, #16]	@ (800bc08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800bbf6:	bd10      	pop	{r4, pc}
 800bbf8:	4a04      	ldr	r2, [pc, #16]	@ (800bc0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 800bbfa:	4803      	ldr	r0, [pc, #12]	@ (800bc08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800bbfc:	6812      	ldr	r2, [r2, #0]
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	bd10      	pop	{r4, pc}
 800bc02:	bf00      	nop
 800bc04:	200001d0 	.word	0x200001d0
 800bc08:	200002c0 	.word	0x200002c0
 800bc0c:	2000030c 	.word	0x2000030c

0800bc10 <get_serialized_size_nav_msgs__msg__Odometry>:
 800bc10:	b5d0      	push	{r4, r6, r7, lr}
 800bc12:	4604      	mov	r4, r0
 800bc14:	b1c0      	cbz	r0, 800bc48 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 800bc16:	460f      	mov	r7, r1
 800bc18:	f002 f8a8 	bl	800dd6c <get_serialized_size_std_msgs__msg__Header>
 800bc1c:	183e      	adds	r6, r7, r0
 800bc1e:	2104      	movs	r1, #4
 800bc20:	4630      	mov	r0, r6
 800bc22:	f7ff ff4f 	bl	800bac4 <ucdr_alignment>
 800bc26:	69a3      	ldr	r3, [r4, #24]
 800bc28:	3305      	adds	r3, #5
 800bc2a:	4403      	add	r3, r0
 800bc2c:	441e      	add	r6, r3
 800bc2e:	4631      	mov	r1, r6
 800bc30:	f104 0020 	add.w	r0, r4, #32
 800bc34:	f002 fa4a 	bl	800e0cc <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800bc38:	4406      	add	r6, r0
 800bc3a:	4631      	mov	r1, r6
 800bc3c:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800bc40:	f002 fb6c 	bl	800e31c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800bc44:	1bc0      	subs	r0, r0, r7
 800bc46:	4430      	add	r0, r6
 800bc48:	bdd0      	pop	{r4, r6, r7, pc}
 800bc4a:	bf00      	nop

0800bc4c <_Odometry__cdr_deserialize>:
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	460c      	mov	r4, r1
 800bc50:	b082      	sub	sp, #8
 800bc52:	b351      	cbz	r1, 800bcaa <_Odometry__cdr_deserialize+0x5e>
 800bc54:	4605      	mov	r5, r0
 800bc56:	f002 f90b 	bl	800de70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800bc5a:	6843      	ldr	r3, [r0, #4]
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	4628      	mov	r0, r5
 800bc62:	4798      	blx	r3
 800bc64:	69e6      	ldr	r6, [r4, #28]
 800bc66:	6961      	ldr	r1, [r4, #20]
 800bc68:	ab01      	add	r3, sp, #4
 800bc6a:	4632      	mov	r2, r6
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	f002 fdad 	bl	800e7cc <ucdr_deserialize_sequence_char>
 800bc72:	b9a8      	cbnz	r0, 800bca0 <_Odometry__cdr_deserialize+0x54>
 800bc74:	9a01      	ldr	r2, [sp, #4]
 800bc76:	4296      	cmp	r6, r2
 800bc78:	d31a      	bcc.n	800bcb0 <_Odometry__cdr_deserialize+0x64>
 800bc7a:	f002 fa93 	bl	800e1a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800bc7e:	6843      	ldr	r3, [r0, #4]
 800bc80:	f104 0120 	add.w	r1, r4, #32
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	4628      	mov	r0, r5
 800bc88:	4798      	blx	r3
 800bc8a:	f002 fbb3 	bl	800e3f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800bc8e:	6843      	ldr	r3, [r0, #4]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800bc96:	4628      	mov	r0, r5
 800bc98:	b002      	add	sp, #8
 800bc9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc9e:	4718      	bx	r3
 800bca0:	9b01      	ldr	r3, [sp, #4]
 800bca2:	b103      	cbz	r3, 800bca6 <_Odometry__cdr_deserialize+0x5a>
 800bca4:	3b01      	subs	r3, #1
 800bca6:	61a3      	str	r3, [r4, #24]
 800bca8:	e7e7      	b.n	800bc7a <_Odometry__cdr_deserialize+0x2e>
 800bcaa:	4608      	mov	r0, r1
 800bcac:	b002      	add	sp, #8
 800bcae:	bd70      	pop	{r4, r5, r6, pc}
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	75a8      	strb	r0, [r5, #22]
 800bcb4:	7569      	strb	r1, [r5, #21]
 800bcb6:	61a0      	str	r0, [r4, #24]
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f7ff ff19 	bl	800baf0 <ucdr_align_to>
 800bcbe:	9901      	ldr	r1, [sp, #4]
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	f7ff ff4b 	bl	800bb5c <ucdr_advance_buffer>
 800bcc6:	e7d8      	b.n	800bc7a <_Odometry__cdr_deserialize+0x2e>

0800bcc8 <_Odometry__cdr_serialize>:
 800bcc8:	b348      	cbz	r0, 800bd1e <_Odometry__cdr_serialize+0x56>
 800bcca:	b570      	push	{r4, r5, r6, lr}
 800bccc:	4604      	mov	r4, r0
 800bcce:	460e      	mov	r6, r1
 800bcd0:	f002 f8ce 	bl	800de70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800bcd4:	6843      	ldr	r3, [r0, #4]
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	4620      	mov	r0, r4
 800bcdc:	4798      	blx	r3
 800bcde:	6965      	ldr	r5, [r4, #20]
 800bce0:	b1d5      	cbz	r5, 800bd18 <_Odometry__cdr_serialize+0x50>
 800bce2:	4628      	mov	r0, r5
 800bce4:	f7f4 fa86 	bl	80001f4 <strlen>
 800bce8:	1c42      	adds	r2, r0, #1
 800bcea:	4629      	mov	r1, r5
 800bcec:	61a0      	str	r0, [r4, #24]
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f002 fd5a 	bl	800e7a8 <ucdr_serialize_sequence_char>
 800bcf4:	f002 fa56 	bl	800e1a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800bcf8:	6843      	ldr	r3, [r0, #4]
 800bcfa:	4631      	mov	r1, r6
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f104 0020 	add.w	r0, r4, #32
 800bd02:	4798      	blx	r3
 800bd04:	f002 fb76 	bl	800e3f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800bd08:	6843      	ldr	r3, [r0, #4]
 800bd0a:	4631      	mov	r1, r6
 800bd0c:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd16:	4718      	bx	r3
 800bd18:	462a      	mov	r2, r5
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	e7e5      	b.n	800bcea <_Odometry__cdr_serialize+0x22>
 800bd1e:	4770      	bx	lr

0800bd20 <_Odometry__max_serialized_size>:
 800bd20:	b510      	push	{r4, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	2301      	movs	r3, #1
 800bd26:	2100      	movs	r1, #0
 800bd28:	f10d 0007 	add.w	r0, sp, #7
 800bd2c:	f88d 3007 	strb.w	r3, [sp, #7]
 800bd30:	f002 f894 	bl	800de5c <max_serialized_size_std_msgs__msg__Header>
 800bd34:	2300      	movs	r3, #0
 800bd36:	4601      	mov	r1, r0
 800bd38:	4604      	mov	r4, r0
 800bd3a:	f10d 0007 	add.w	r0, sp, #7
 800bd3e:	f88d 3007 	strb.w	r3, [sp, #7]
 800bd42:	f002 fa1f 	bl	800e184 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800bd46:	4404      	add	r4, r0
 800bd48:	4621      	mov	r1, r4
 800bd4a:	f10d 0007 	add.w	r0, sp, #7
 800bd4e:	f002 fb41 	bl	800e3d4 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800bd52:	4420      	add	r0, r4
 800bd54:	b002      	add	sp, #8
 800bd56:	bd10      	pop	{r4, pc}

0800bd58 <_Odometry__get_serialized_size>:
 800bd58:	b5d0      	push	{r4, r6, r7, lr}
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	b1b8      	cbz	r0, 800bd8e <_Odometry__get_serialized_size+0x36>
 800bd5e:	2100      	movs	r1, #0
 800bd60:	f002 f804 	bl	800dd6c <get_serialized_size_std_msgs__msg__Header>
 800bd64:	2104      	movs	r1, #4
 800bd66:	4607      	mov	r7, r0
 800bd68:	f7ff feac 	bl	800bac4 <ucdr_alignment>
 800bd6c:	69a3      	ldr	r3, [r4, #24]
 800bd6e:	1d5a      	adds	r2, r3, #5
 800bd70:	19d3      	adds	r3, r2, r7
 800bd72:	4606      	mov	r6, r0
 800bd74:	441e      	add	r6, r3
 800bd76:	4631      	mov	r1, r6
 800bd78:	f104 0020 	add.w	r0, r4, #32
 800bd7c:	f002 f9a6 	bl	800e0cc <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800bd80:	4406      	add	r6, r0
 800bd82:	4631      	mov	r1, r6
 800bd84:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800bd88:	f002 fac8 	bl	800e31c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800bd8c:	4430      	add	r0, r6
 800bd8e:	bdd0      	pop	{r4, r6, r7, pc}

0800bd90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800bd90:	4800      	ldr	r0, [pc, #0]	@ (800bd94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800bd92:	4770      	bx	lr
 800bd94:	200002cc 	.word	0x200002cc

0800bd98 <rcl_get_zero_initialized_publisher>:
 800bd98:	4b01      	ldr	r3, [pc, #4]	@ (800bda0 <rcl_get_zero_initialized_publisher+0x8>)
 800bd9a:	6818      	ldr	r0, [r3, #0]
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	0801a1ac 	.word	0x0801a1ac

0800bda4 <rcl_publisher_init>:
 800bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda8:	b088      	sub	sp, #32
 800bdaa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bdac:	2d00      	cmp	r5, #0
 800bdae:	d069      	beq.n	800be84 <rcl_publisher_init+0xe0>
 800bdb0:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	4648      	mov	r0, r9
 800bdb8:	460e      	mov	r6, r1
 800bdba:	4690      	mov	r8, r2
 800bdbc:	461f      	mov	r7, r3
 800bdbe:	f001 f847 	bl	800ce50 <rcutils_allocator_is_valid>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d05e      	beq.n	800be84 <rcl_publisher_init+0xe0>
 800bdc6:	2c00      	cmp	r4, #0
 800bdc8:	d05c      	beq.n	800be84 <rcl_publisher_init+0xe0>
 800bdca:	f8d4 a000 	ldr.w	sl, [r4]
 800bdce:	f1ba 0f00 	cmp.w	sl, #0
 800bdd2:	d004      	beq.n	800bdde <rcl_publisher_init+0x3a>
 800bdd4:	2764      	movs	r7, #100	@ 0x64
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	b008      	add	sp, #32
 800bdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdde:	4630      	mov	r0, r6
 800bde0:	f006 f8b0 	bl	8011f44 <rcl_node_is_valid>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d052      	beq.n	800be8e <rcl_publisher_init+0xea>
 800bde8:	f1b8 0f00 	cmp.w	r8, #0
 800bdec:	d04a      	beq.n	800be84 <rcl_publisher_init+0xe0>
 800bdee:	2f00      	cmp	r7, #0
 800bdf0:	d048      	beq.n	800be84 <rcl_publisher_init+0xe0>
 800bdf2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800bdf6:	aa07      	add	r2, sp, #28
 800bdf8:	9205      	str	r2, [sp, #20]
 800bdfa:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800bdfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be02:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800be06:	f8cd a01c 	str.w	sl, [sp, #28]
 800be0a:	4639      	mov	r1, r7
 800be0c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800be10:	4630      	mov	r0, r6
 800be12:	f006 f8eb 	bl	8011fec <rcl_node_resolve_name>
 800be16:	4607      	mov	r7, r0
 800be18:	2800      	cmp	r0, #0
 800be1a:	d14f      	bne.n	800bebc <rcl_publisher_init+0x118>
 800be1c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800be1e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800be20:	20c8      	movs	r0, #200	@ 0xc8
 800be22:	4798      	blx	r3
 800be24:	6020      	str	r0, [r4, #0]
 800be26:	2800      	cmp	r0, #0
 800be28:	d04e      	beq.n	800bec8 <rcl_publisher_init+0x124>
 800be2a:	4630      	mov	r0, r6
 800be2c:	f006 f8ac 	bl	8011f88 <rcl_node_get_rmw_handle>
 800be30:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	9a07      	ldr	r2, [sp, #28]
 800be38:	6827      	ldr	r7, [r4, #0]
 800be3a:	462b      	mov	r3, r5
 800be3c:	4641      	mov	r1, r8
 800be3e:	f001 f915 	bl	800d06c <rmw_create_publisher>
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800be48:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800be4c:	b370      	cbz	r0, 800beac <rcl_publisher_init+0x108>
 800be4e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800be52:	f001 f9e9 	bl	800d228 <rmw_publisher_get_actual_qos>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	4607      	mov	r7, r0
 800be5a:	b9d0      	cbnz	r0, 800be92 <rcl_publisher_init+0xee>
 800be5c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800be60:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800be64:	4629      	mov	r1, r5
 800be66:	2270      	movs	r2, #112	@ 0x70
 800be68:	4618      	mov	r0, r3
 800be6a:	f00d f92e 	bl	80190ca <memcpy>
 800be6e:	6832      	ldr	r2, [r6, #0]
 800be70:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800be74:	9807      	ldr	r0, [sp, #28]
 800be76:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800be78:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800be7a:	4798      	blx	r3
 800be7c:	4638      	mov	r0, r7
 800be7e:	b008      	add	sp, #32
 800be80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be84:	270b      	movs	r7, #11
 800be86:	4638      	mov	r0, r7
 800be88:	b008      	add	sp, #32
 800be8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8e:	27c8      	movs	r7, #200	@ 0xc8
 800be90:	e7a1      	b.n	800bdd6 <rcl_publisher_init+0x32>
 800be92:	b18b      	cbz	r3, 800beb8 <rcl_publisher_init+0x114>
 800be94:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800be98:	b142      	cbz	r2, 800beac <rcl_publisher_init+0x108>
 800be9a:	4630      	mov	r0, r6
 800be9c:	f006 f874 	bl	8011f88 <rcl_node_get_rmw_handle>
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800bea6:	f001 f9cf 	bl	800d248 <rmw_destroy_publisher>
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800beae:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800beb0:	4618      	mov	r0, r3
 800beb2:	4790      	blx	r2
 800beb4:	2300      	movs	r3, #0
 800beb6:	6023      	str	r3, [r4, #0]
 800beb8:	2701      	movs	r7, #1
 800beba:	e7db      	b.n	800be74 <rcl_publisher_init+0xd0>
 800bebc:	2867      	cmp	r0, #103	@ 0x67
 800bebe:	d0d9      	beq.n	800be74 <rcl_publisher_init+0xd0>
 800bec0:	2869      	cmp	r0, #105	@ 0x69
 800bec2:	d003      	beq.n	800becc <rcl_publisher_init+0x128>
 800bec4:	280a      	cmp	r0, #10
 800bec6:	d1f7      	bne.n	800beb8 <rcl_publisher_init+0x114>
 800bec8:	270a      	movs	r7, #10
 800beca:	e7d3      	b.n	800be74 <rcl_publisher_init+0xd0>
 800becc:	2767      	movs	r7, #103	@ 0x67
 800bece:	e7d1      	b.n	800be74 <rcl_publisher_init+0xd0>

0800bed0 <rcl_publisher_get_default_options>:
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	4d14      	ldr	r5, [pc, #80]	@ (800bf24 <rcl_publisher_get_default_options+0x54>)
 800bed4:	4914      	ldr	r1, [pc, #80]	@ (800bf28 <rcl_publisher_get_default_options+0x58>)
 800bed6:	b088      	sub	sp, #32
 800bed8:	4604      	mov	r4, r0
 800beda:	2250      	movs	r2, #80	@ 0x50
 800bedc:	4628      	mov	r0, r5
 800bede:	f00d f8f4 	bl	80190ca <memcpy>
 800bee2:	a802      	add	r0, sp, #8
 800bee4:	f000 ffa6 	bl	800ce34 <rcutils_get_default_allocator>
 800bee8:	f10d 0c08 	add.w	ip, sp, #8
 800beec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bef0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800bef4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bef8:	466e      	mov	r6, sp
 800befa:	f8dc 3000 	ldr.w	r3, [ip]
 800befe:	f8ce 3000 	str.w	r3, [lr]
 800bf02:	4630      	mov	r0, r6
 800bf04:	f001 f834 	bl	800cf70 <rmw_get_default_publisher_options>
 800bf08:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bf0c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bf10:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf14:	2270      	movs	r2, #112	@ 0x70
 800bf16:	4629      	mov	r1, r5
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f00d f8d6 	bl	80190ca <memcpy>
 800bf1e:	4620      	mov	r0, r4
 800bf20:	b008      	add	sp, #32
 800bf22:	bd70      	pop	{r4, r5, r6, pc}
 800bf24:	20009a38 	.word	0x20009a38
 800bf28:	0801a1b0 	.word	0x0801a1b0

0800bf2c <rcl_publish>:
 800bf2c:	b1f8      	cbz	r0, 800bf6e <rcl_publish+0x42>
 800bf2e:	6803      	ldr	r3, [r0, #0]
 800bf30:	b570      	push	{r4, r5, r6, lr}
 800bf32:	4604      	mov	r4, r0
 800bf34:	b1b3      	cbz	r3, 800bf64 <rcl_publish+0x38>
 800bf36:	4616      	mov	r6, r2
 800bf38:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bf3c:	b192      	cbz	r2, 800bf64 <rcl_publish+0x38>
 800bf3e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bf42:	460d      	mov	r5, r1
 800bf44:	f005 fc24 	bl	8011790 <rcl_context_is_valid>
 800bf48:	b160      	cbz	r0, 800bf64 <rcl_publish+0x38>
 800bf4a:	6823      	ldr	r3, [r4, #0]
 800bf4c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bf50:	b140      	cbz	r0, 800bf64 <rcl_publish+0x38>
 800bf52:	b155      	cbz	r5, 800bf6a <rcl_publish+0x3e>
 800bf54:	4632      	mov	r2, r6
 800bf56:	4629      	mov	r1, r5
 800bf58:	f001 f828 	bl	800cfac <rmw_publish>
 800bf5c:	3800      	subs	r0, #0
 800bf5e:	bf18      	it	ne
 800bf60:	2001      	movne	r0, #1
 800bf62:	bd70      	pop	{r4, r5, r6, pc}
 800bf64:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bf68:	bd70      	pop	{r4, r5, r6, pc}
 800bf6a:	200b      	movs	r0, #11
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
 800bf6e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bf72:	4770      	bx	lr

0800bf74 <rcl_publisher_is_valid>:
 800bf74:	b1a0      	cbz	r0, 800bfa0 <rcl_publisher_is_valid+0x2c>
 800bf76:	6803      	ldr	r3, [r0, #0]
 800bf78:	b510      	push	{r4, lr}
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	b173      	cbz	r3, 800bf9c <rcl_publisher_is_valid+0x28>
 800bf7e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bf82:	b15a      	cbz	r2, 800bf9c <rcl_publisher_is_valid+0x28>
 800bf84:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bf88:	f005 fc02 	bl	8011790 <rcl_context_is_valid>
 800bf8c:	b130      	cbz	r0, 800bf9c <rcl_publisher_is_valid+0x28>
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bf94:	3800      	subs	r0, #0
 800bf96:	bf18      	it	ne
 800bf98:	2001      	movne	r0, #1
 800bf9a:	bd10      	pop	{r4, pc}
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	bd10      	pop	{r4, pc}
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	4770      	bx	lr

0800bfa4 <rcl_publisher_is_valid_except_context>:
 800bfa4:	b130      	cbz	r0, 800bfb4 <rcl_publisher_is_valid_except_context+0x10>
 800bfa6:	6800      	ldr	r0, [r0, #0]
 800bfa8:	b120      	cbz	r0, 800bfb4 <rcl_publisher_is_valid_except_context+0x10>
 800bfaa:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800bfae:	3800      	subs	r0, #0
 800bfb0:	bf18      	it	ne
 800bfb2:	2001      	movne	r0, #1
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop

0800bfb8 <_rclc_check_for_new_data>:
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d046      	beq.n	800c04a <_rclc_check_for_new_data+0x92>
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	7802      	ldrb	r2, [r0, #0]
 800bfc0:	b084      	sub	sp, #16
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2a0a      	cmp	r2, #10
 800bfc6:	d842      	bhi.n	800c04e <_rclc_check_for_new_data+0x96>
 800bfc8:	e8df f002 	tbb	[pc, r2]
 800bfcc:	14181212 	.word	0x14181212
 800bfd0:	06060614 	.word	0x06060614
 800bfd4:	2e1a      	.short	0x2e1a
 800bfd6:	16          	.byte	0x16
 800bfd7:	00          	.byte	0x00
 800bfd8:	6a0a      	ldr	r2, [r1, #32]
 800bfda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bfdc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	1a12      	subs	r2, r2, r0
 800bfe4:	bf18      	it	ne
 800bfe6:	2201      	movne	r2, #1
 800bfe8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800bfec:	b004      	add	sp, #16
 800bfee:	bd10      	pop	{r4, pc}
 800bff0:	680a      	ldr	r2, [r1, #0]
 800bff2:	e7f2      	b.n	800bfda <_rclc_check_for_new_data+0x22>
 800bff4:	698a      	ldr	r2, [r1, #24]
 800bff6:	e7f0      	b.n	800bfda <_rclc_check_for_new_data+0x22>
 800bff8:	688a      	ldr	r2, [r1, #8]
 800bffa:	e7ee      	b.n	800bfda <_rclc_check_for_new_data+0x22>
 800bffc:	690a      	ldr	r2, [r1, #16]
 800bffe:	e7ec      	b.n	800bfda <_rclc_check_for_new_data+0x22>
 800c000:	685c      	ldr	r4, [r3, #4]
 800c002:	4608      	mov	r0, r1
 800c004:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c008:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c00c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c010:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c01a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c01e:	f104 0110 	add.w	r1, r4, #16
 800c022:	f007 fcb1 	bl	8013988 <rcl_action_client_wait_set_get_entities_ready>
 800c026:	e7e1      	b.n	800bfec <_rclc_check_for_new_data+0x34>
 800c028:	685c      	ldr	r4, [r3, #4]
 800c02a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c02e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c032:	e9cd 3200 	strd	r3, r2, [sp]
 800c036:	4608      	mov	r0, r1
 800c038:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c03c:	f104 0220 	add.w	r2, r4, #32
 800c040:	f104 0110 	add.w	r1, r4, #16
 800c044:	f007 feb8 	bl	8013db8 <rcl_action_server_wait_set_get_entities_ready>
 800c048:	e7d0      	b.n	800bfec <_rclc_check_for_new_data+0x34>
 800c04a:	200b      	movs	r0, #11
 800c04c:	4770      	bx	lr
 800c04e:	2001      	movs	r0, #1
 800c050:	e7cc      	b.n	800bfec <_rclc_check_for_new_data+0x34>
 800c052:	bf00      	nop

0800c054 <_rclc_take_new_data>:
 800c054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c056:	b09b      	sub	sp, #108	@ 0x6c
 800c058:	2800      	cmp	r0, #0
 800c05a:	f000 8088 	beq.w	800c16e <_rclc_take_new_data+0x11a>
 800c05e:	7803      	ldrb	r3, [r0, #0]
 800c060:	4604      	mov	r4, r0
 800c062:	2b0a      	cmp	r3, #10
 800c064:	f200 8167 	bhi.w	800c336 <_rclc_take_new_data+0x2e2>
 800c068:	e8df f003 	tbb	[pc, r3]
 800c06c:	44152d2d 	.word	0x44152d2d
 800c070:	19191944 	.word	0x19191944
 800c074:	065a      	.short	0x065a
 800c076:	15          	.byte	0x15
 800c077:	00          	.byte	0x00
 800c078:	6840      	ldr	r0, [r0, #4]
 800c07a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f040 80b2 	bne.w	800c1e8 <_rclc_take_new_data+0x194>
 800c084:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f040 80e4 	bne.w	800c256 <_rclc_take_new_data+0x202>
 800c08e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c092:	2b00      	cmp	r3, #0
 800c094:	d16f      	bne.n	800c176 <_rclc_take_new_data+0x122>
 800c096:	2500      	movs	r5, #0
 800c098:	4628      	mov	r0, r5
 800c09a:	b01b      	add	sp, #108	@ 0x6c
 800c09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c09e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c0a0:	6a0b      	ldr	r3, [r1, #32]
 800c0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d0f5      	beq.n	800c096 <_rclc_take_new_data+0x42>
 800c0aa:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c0ae:	f104 0110 	add.w	r1, r4, #16
 800c0b2:	f006 f945 	bl	8012340 <rcl_take_request>
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d0ec      	beq.n	800c096 <_rclc_take_new_data+0x42>
 800c0bc:	f240 2359 	movw	r3, #601	@ 0x259
 800c0c0:	4298      	cmp	r0, r3
 800c0c2:	d013      	beq.n	800c0ec <_rclc_take_new_data+0x98>
 800c0c4:	e029      	b.n	800c11a <_rclc_take_new_data+0xc6>
 800c0c6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c0c8:	680b      	ldr	r3, [r1, #0]
 800c0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d0e1      	beq.n	800c096 <_rclc_take_new_data+0x42>
 800c0d2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	aa0a      	add	r2, sp, #40	@ 0x28
 800c0da:	f006 fa6f 	bl	80125bc <rcl_take>
 800c0de:	4605      	mov	r5, r0
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d0d9      	beq.n	800c098 <_rclc_take_new_data+0x44>
 800c0e4:	f240 1391 	movw	r3, #401	@ 0x191
 800c0e8:	4298      	cmp	r0, r3
 800c0ea:	d116      	bne.n	800c11a <_rclc_take_new_data+0xc6>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c0f2:	e7d1      	b.n	800c098 <_rclc_take_new_data+0x44>
 800c0f4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c0f6:	698b      	ldr	r3, [r1, #24]
 800c0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d0ca      	beq.n	800c096 <_rclc_take_new_data+0x42>
 800c100:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c104:	f104 0110 	add.w	r1, r4, #16
 800c108:	f005 fad2 	bl	80116b0 <rcl_take_response>
 800c10c:	4605      	mov	r5, r0
 800c10e:	2800      	cmp	r0, #0
 800c110:	d0c1      	beq.n	800c096 <_rclc_take_new_data+0x42>
 800c112:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c116:	4298      	cmp	r0, r3
 800c118:	d0be      	beq.n	800c098 <_rclc_take_new_data+0x44>
 800c11a:	f000 febd 	bl	800ce98 <rcutils_reset_error>
 800c11e:	e7bb      	b.n	800c098 <_rclc_take_new_data+0x44>
 800c120:	6840      	ldr	r0, [r0, #4]
 800c122:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c126:	2b00      	cmp	r3, #0
 800c128:	d17d      	bne.n	800c226 <_rclc_take_new_data+0x1d2>
 800c12a:	69c3      	ldr	r3, [r0, #28]
 800c12c:	b11b      	cbz	r3, 800c136 <_rclc_take_new_data+0xe2>
 800c12e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c132:	2b00      	cmp	r3, #0
 800c134:	d144      	bne.n	800c1c0 <_rclc_take_new_data+0x16c>
 800c136:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f040 80ac 	bne.w	800c298 <_rclc_take_new_data+0x244>
 800c140:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c144:	2b00      	cmp	r3, #0
 800c146:	d0a6      	beq.n	800c096 <_rclc_take_new_data+0x42>
 800c148:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c14a:	a90a      	add	r1, sp, #40	@ 0x28
 800c14c:	3010      	adds	r0, #16
 800c14e:	f007 faf3 	bl	8013738 <rcl_action_take_result_response>
 800c152:	4605      	mov	r5, r0
 800c154:	2800      	cmp	r0, #0
 800c156:	d1e0      	bne.n	800c11a <_rclc_take_new_data+0xc6>
 800c158:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c15c:	6860      	ldr	r0, [r4, #4]
 800c15e:	f007 ff4f 	bl	8014000 <rclc_action_find_handle_by_result_request_sequence_number>
 800c162:	2800      	cmp	r0, #0
 800c164:	d098      	beq.n	800c098 <_rclc_take_new_data+0x44>
 800c166:	2301      	movs	r3, #1
 800c168:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c16c:	e794      	b.n	800c098 <_rclc_take_new_data+0x44>
 800c16e:	250b      	movs	r5, #11
 800c170:	4628      	mov	r0, r5
 800c172:	b01b      	add	sp, #108	@ 0x6c
 800c174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c176:	ae04      	add	r6, sp, #16
 800c178:	aa0a      	add	r2, sp, #40	@ 0x28
 800c17a:	3010      	adds	r0, #16
 800c17c:	4631      	mov	r1, r6
 800c17e:	f007 fd4f 	bl	8013c20 <rcl_action_take_cancel_request>
 800c182:	4605      	mov	r5, r0
 800c184:	2800      	cmp	r0, #0
 800c186:	d1c8      	bne.n	800c11a <_rclc_take_new_data+0xc6>
 800c188:	6860      	ldr	r0, [r4, #4]
 800c18a:	a90a      	add	r1, sp, #40	@ 0x28
 800c18c:	f007 fef6 	bl	8013f7c <rclc_action_find_goal_handle_by_uuid>
 800c190:	4607      	mov	r7, r0
 800c192:	2800      	cmp	r0, #0
 800c194:	f000 80bb 	beq.w	800c30e <_rclc_take_new_data+0x2ba>
 800c198:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c19c:	2101      	movs	r1, #1
 800c19e:	f007 fe77 	bl	8013e90 <rcl_action_transition_goal_state>
 800c1a2:	2803      	cmp	r0, #3
 800c1a4:	4684      	mov	ip, r0
 800c1a6:	f040 80a7 	bne.w	800c2f8 <_rclc_take_new_data+0x2a4>
 800c1aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c1ac:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c1b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c1b6:	e884 0003 	stmia.w	r4, {r0, r1}
 800c1ba:	f887 c008 	strb.w	ip, [r7, #8]
 800c1be:	e76b      	b.n	800c098 <_rclc_take_new_data+0x44>
 800c1c0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c1c2:	3010      	adds	r0, #16
 800c1c4:	f007 fb38 	bl	8013838 <rcl_action_take_feedback>
 800c1c8:	4605      	mov	r5, r0
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d1a5      	bne.n	800c11a <_rclc_take_new_data+0xc6>
 800c1ce:	6860      	ldr	r0, [r4, #4]
 800c1d0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c1d2:	f007 fed3 	bl	8013f7c <rclc_action_find_goal_handle_by_uuid>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	f000 80a3 	beq.w	800c324 <_rclc_take_new_data+0x2d0>
 800c1de:	2201      	movs	r2, #1
 800c1e0:	6860      	ldr	r0, [r4, #4]
 800c1e2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c1e6:	e7a6      	b.n	800c136 <_rclc_take_new_data+0xe2>
 800c1e8:	f007 fea2 	bl	8013f30 <rclc_action_take_goal_handle>
 800c1ec:	4606      	mov	r6, r0
 800c1ee:	6860      	ldr	r0, [r4, #4]
 800c1f0:	2e00      	cmp	r6, #0
 800c1f2:	f43f af47 	beq.w	800c084 <_rclc_take_new_data+0x30>
 800c1f6:	6070      	str	r0, [r6, #4]
 800c1f8:	69f2      	ldr	r2, [r6, #28]
 800c1fa:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c1fe:	3010      	adds	r0, #16
 800c200:	f007 fc56 	bl	8013ab0 <rcl_action_take_goal_request>
 800c204:	4605      	mov	r5, r0
 800c206:	2800      	cmp	r0, #0
 800c208:	f040 808e 	bne.w	800c328 <_rclc_take_new_data+0x2d4>
 800c20c:	69f7      	ldr	r7, [r6, #28]
 800c20e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c210:	7235      	strb	r5, [r6, #8]
 800c212:	f8c6 0009 	str.w	r0, [r6, #9]
 800c216:	f8c6 100d 	str.w	r1, [r6, #13]
 800c21a:	6860      	ldr	r0, [r4, #4]
 800c21c:	f8c6 2011 	str.w	r2, [r6, #17]
 800c220:	f8c6 3015 	str.w	r3, [r6, #21]
 800c224:	e72e      	b.n	800c084 <_rclc_take_new_data+0x30>
 800c226:	aa04      	add	r2, sp, #16
 800c228:	a90a      	add	r1, sp, #40	@ 0x28
 800c22a:	3010      	adds	r0, #16
 800c22c:	f007 fa0c 	bl	8013648 <rcl_action_take_goal_response>
 800c230:	4605      	mov	r5, r0
 800c232:	2800      	cmp	r0, #0
 800c234:	f47f af71 	bne.w	800c11a <_rclc_take_new_data+0xc6>
 800c238:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c23c:	6860      	ldr	r0, [r4, #4]
 800c23e:	f007 fecd 	bl	8013fdc <rclc_action_find_handle_by_goal_request_sequence_number>
 800c242:	b130      	cbz	r0, 800c252 <_rclc_take_new_data+0x1fe>
 800c244:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c248:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c24c:	2201      	movs	r2, #1
 800c24e:	f880 2020 	strb.w	r2, [r0, #32]
 800c252:	6860      	ldr	r0, [r4, #4]
 800c254:	e769      	b.n	800c12a <_rclc_take_new_data+0xd6>
 800c256:	aa04      	add	r2, sp, #16
 800c258:	3010      	adds	r0, #16
 800c25a:	a90a      	add	r1, sp, #40	@ 0x28
 800c25c:	f007 fca0 	bl	8013ba0 <rcl_action_take_result_request>
 800c260:	4605      	mov	r5, r0
 800c262:	2800      	cmp	r0, #0
 800c264:	f47f af59 	bne.w	800c11a <_rclc_take_new_data+0xc6>
 800c268:	6860      	ldr	r0, [r4, #4]
 800c26a:	a904      	add	r1, sp, #16
 800c26c:	f007 fe86 	bl	8013f7c <rclc_action_find_goal_handle_by_uuid>
 800c270:	4607      	mov	r7, r0
 800c272:	b160      	cbz	r0, 800c28e <_rclc_take_new_data+0x23a>
 800c274:	ad0a      	add	r5, sp, #40	@ 0x28
 800c276:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c27a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c27c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c27e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c282:	f04f 0c02 	mov.w	ip, #2
 800c286:	e886 0003 	stmia.w	r6, {r0, r1}
 800c28a:	f887 c008 	strb.w	ip, [r7, #8]
 800c28e:	6860      	ldr	r0, [r4, #4]
 800c290:	2300      	movs	r3, #0
 800c292:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c296:	e6fa      	b.n	800c08e <_rclc_take_new_data+0x3a>
 800c298:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c29c:	a90a      	add	r1, sp, #40	@ 0x28
 800c29e:	3010      	adds	r0, #16
 800c2a0:	f007 fa8a 	bl	80137b8 <rcl_action_take_cancel_response>
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f47f af37 	bne.w	800c11a <_rclc_take_new_data+0xc6>
 800c2ac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c2b0:	6860      	ldr	r0, [r4, #4]
 800c2b2:	f007 feb7 	bl	8014024 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	6860      	ldr	r0, [r4, #4]
 800c2ba:	2e00      	cmp	r6, #0
 800c2bc:	f43f af40 	beq.w	800c140 <_rclc_take_new_data+0xec>
 800c2c0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c2c2:	2701      	movs	r7, #1
 800c2c4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f43f af3a 	beq.w	800c140 <_rclc_take_new_data+0xec>
 800c2cc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c2ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c2d2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c2d6:	f007 fe51 	bl	8013f7c <rclc_action_find_goal_handle_by_uuid>
 800c2da:	b138      	cbz	r0, 800c2ec <_rclc_take_new_data+0x298>
 800c2dc:	6860      	ldr	r0, [r4, #4]
 800c2de:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c2e0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	42ab      	cmp	r3, r5
 800c2e8:	d8f0      	bhi.n	800c2cc <_rclc_take_new_data+0x278>
 800c2ea:	e729      	b.n	800c140 <_rclc_take_new_data+0xec>
 800c2ec:	6860      	ldr	r0, [r4, #4]
 800c2ee:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c2f0:	3501      	adds	r5, #1
 800c2f2:	42ab      	cmp	r3, r5
 800c2f4:	d8ea      	bhi.n	800c2cc <_rclc_take_new_data+0x278>
 800c2f6:	e723      	b.n	800c140 <_rclc_take_new_data+0xec>
 800c2f8:	ab06      	add	r3, sp, #24
 800c2fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c2fc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c300:	2103      	movs	r1, #3
 800c302:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c306:	6860      	ldr	r0, [r4, #4]
 800c308:	f007 ff02 	bl	8014110 <rclc_action_server_goal_cancel_reject>
 800c30c:	e6c4      	b.n	800c098 <_rclc_take_new_data+0x44>
 800c30e:	ab06      	add	r3, sp, #24
 800c310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c312:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c316:	2102      	movs	r1, #2
 800c318:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c31c:	6860      	ldr	r0, [r4, #4]
 800c31e:	f007 fef7 	bl	8014110 <rclc_action_server_goal_cancel_reject>
 800c322:	e6b9      	b.n	800c098 <_rclc_take_new_data+0x44>
 800c324:	6860      	ldr	r0, [r4, #4]
 800c326:	e706      	b.n	800c136 <_rclc_take_new_data+0xe2>
 800c328:	6860      	ldr	r0, [r4, #4]
 800c32a:	4631      	mov	r1, r6
 800c32c:	f007 fe10 	bl	8013f50 <rclc_action_remove_used_goal_handle>
 800c330:	f000 fdb2 	bl	800ce98 <rcutils_reset_error>
 800c334:	e6b0      	b.n	800c098 <_rclc_take_new_data+0x44>
 800c336:	2501      	movs	r5, #1
 800c338:	e6ae      	b.n	800c098 <_rclc_take_new_data+0x44>
 800c33a:	bf00      	nop

0800c33c <_rclc_execute.part.0>:
 800c33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c33e:	7803      	ldrb	r3, [r0, #0]
 800c340:	b087      	sub	sp, #28
 800c342:	4604      	mov	r4, r0
 800c344:	2b0a      	cmp	r3, #10
 800c346:	f200 8136 	bhi.w	800c5b6 <_rclc_execute.part.0+0x27a>
 800c34a:	e8df f003 	tbb	[pc, r3]
 800c34e:	435e      	.short	0x435e
 800c350:	06a1664f 	.word	0x06a1664f
 800c354:	6c1e0606 	.word	0x6c1e0606
 800c358:	59          	.byte	0x59
 800c359:	00          	.byte	0x00
 800c35a:	2b06      	cmp	r3, #6
 800c35c:	f000 8122 	beq.w	800c5a4 <_rclc_execute.part.0+0x268>
 800c360:	2b07      	cmp	r3, #7
 800c362:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c364:	f040 8118 	bne.w	800c598 <_rclc_execute.part.0+0x25c>
 800c368:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c36c:	6880      	ldr	r0, [r0, #8]
 800c36e:	4798      	blx	r3
 800c370:	f104 0110 	add.w	r1, r4, #16
 800c374:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c376:	6860      	ldr	r0, [r4, #4]
 800c378:	f006 f822 	bl	80123c0 <rcl_send_response>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d033      	beq.n	800c3e8 <_rclc_execute.part.0+0xac>
 800c380:	9005      	str	r0, [sp, #20]
 800c382:	f000 fd89 	bl	800ce98 <rcutils_reset_error>
 800c386:	9805      	ldr	r0, [sp, #20]
 800c388:	e02e      	b.n	800c3e8 <_rclc_execute.part.0+0xac>
 800c38a:	6840      	ldr	r0, [r0, #4]
 800c38c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 8086 	beq.w	800c4a2 <_rclc_execute.part.0+0x166>
 800c396:	2600      	movs	r6, #0
 800c398:	2701      	movs	r7, #1
 800c39a:	e004      	b.n	800c3a6 <_rclc_execute.part.0+0x6a>
 800c39c:	f007 fda2 	bl	8013ee4 <rclc_action_send_result_request>
 800c3a0:	b998      	cbnz	r0, 800c3ca <_rclc_execute.part.0+0x8e>
 800c3a2:	722f      	strb	r7, [r5, #8]
 800c3a4:	6860      	ldr	r0, [r4, #4]
 800c3a6:	f007 fe4f 	bl	8014048 <rclc_action_find_first_handle_with_goal_response>
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d077      	beq.n	800c4a0 <_rclc_execute.part.0+0x164>
 800c3b0:	6863      	ldr	r3, [r4, #4]
 800c3b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c3ba:	f885 6020 	strb.w	r6, [r5, #32]
 800c3be:	4798      	blx	r3
 800c3c0:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1e8      	bne.n	800c39c <_rclc_execute.part.0+0x60>
 800c3ca:	6860      	ldr	r0, [r4, #4]
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f007 fdbf 	bl	8013f50 <rclc_action_remove_used_goal_handle>
 800c3d2:	e7e7      	b.n	800c3a4 <_rclc_execute.part.0+0x68>
 800c3d4:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c3d8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c3dc:	2d00      	cmp	r5, #0
 800c3de:	f000 80c9 	beq.w	800c574 <_rclc_execute.part.0+0x238>
 800c3e2:	6880      	ldr	r0, [r0, #8]
 800c3e4:	4798      	blx	r3
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	b007      	add	sp, #28
 800c3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ec:	6840      	ldr	r0, [r0, #4]
 800c3ee:	f006 f9e9 	bl	80127c4 <rcl_timer_call>
 800c3f2:	f240 3321 	movw	r3, #801	@ 0x321
 800c3f6:	4298      	cmp	r0, r3
 800c3f8:	d004      	beq.n	800c404 <_rclc_execute.part.0+0xc8>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d0f4      	beq.n	800c3e8 <_rclc_execute.part.0+0xac>
 800c3fe:	e7bf      	b.n	800c380 <_rclc_execute.part.0+0x44>
 800c400:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c402:	4798      	blx	r3
 800c404:	2000      	movs	r0, #0
 800c406:	b007      	add	sp, #28
 800c408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c40a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c40e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c410:	b925      	cbnz	r5, 800c41c <_rclc_execute.part.0+0xe0>
 800c412:	4628      	mov	r0, r5
 800c414:	4798      	blx	r3
 800c416:	4628      	mov	r0, r5
 800c418:	e7e6      	b.n	800c3e8 <_rclc_execute.part.0+0xac>
 800c41a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c41c:	68a0      	ldr	r0, [r4, #8]
 800c41e:	4798      	blx	r3
 800c420:	2000      	movs	r0, #0
 800c422:	b007      	add	sp, #28
 800c424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c426:	6840      	ldr	r0, [r0, #4]
 800c428:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c42c:	bb3b      	cbnz	r3, 800c47e <_rclc_execute.part.0+0x142>
 800c42e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d07b      	beq.n	800c52e <_rclc_execute.part.0+0x1f2>
 800c436:	f640 0634 	movw	r6, #2100	@ 0x834
 800c43a:	2701      	movs	r7, #1
 800c43c:	e007      	b.n	800c44e <_rclc_execute.part.0+0x112>
 800c43e:	4628      	mov	r0, r5
 800c440:	f007 fe1a 	bl	8014078 <rclc_action_server_response_goal_request>
 800c444:	6860      	ldr	r0, [r4, #4]
 800c446:	4629      	mov	r1, r5
 800c448:	f007 fd82 	bl	8013f50 <rclc_action_remove_used_goal_handle>
 800c44c:	6860      	ldr	r0, [r4, #4]
 800c44e:	2100      	movs	r1, #0
 800c450:	f007 fdac 	bl	8013fac <rclc_action_find_first_handle_by_status>
 800c454:	4605      	mov	r5, r0
 800c456:	2800      	cmp	r0, #0
 800c458:	d066      	beq.n	800c528 <_rclc_execute.part.0+0x1ec>
 800c45a:	6863      	ldr	r3, [r4, #4]
 800c45c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	4798      	blx	r3
 800c462:	42b0      	cmp	r0, r6
 800c464:	f04f 0100 	mov.w	r1, #0
 800c468:	d1e9      	bne.n	800c43e <_rclc_execute.part.0+0x102>
 800c46a:	2101      	movs	r1, #1
 800c46c:	4628      	mov	r0, r5
 800c46e:	f007 fe03 	bl	8014078 <rclc_action_server_response_goal_request>
 800c472:	722f      	strb	r7, [r5, #8]
 800c474:	e7ea      	b.n	800c44c <_rclc_execute.part.0+0x110>
 800c476:	6848      	ldr	r0, [r1, #4]
 800c478:	f007 fd6a 	bl	8013f50 <rclc_action_remove_used_goal_handle>
 800c47c:	6860      	ldr	r0, [r4, #4]
 800c47e:	f007 fda1 	bl	8013fc4 <rclc_action_find_first_terminated_handle>
 800c482:	4601      	mov	r1, r0
 800c484:	2800      	cmp	r0, #0
 800c486:	d1f6      	bne.n	800c476 <_rclc_execute.part.0+0x13a>
 800c488:	6860      	ldr	r0, [r4, #4]
 800c48a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c48e:	e7ce      	b.n	800c42e <_rclc_execute.part.0+0xf2>
 800c490:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c492:	6880      	ldr	r0, [r0, #8]
 800c494:	f104 0110 	add.w	r1, r4, #16
 800c498:	4798      	blx	r3
 800c49a:	2000      	movs	r0, #0
 800c49c:	b007      	add	sp, #28
 800c49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a0:	6860      	ldr	r0, [r4, #4]
 800c4a2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c4a6:	b18b      	cbz	r3, 800c4cc <_rclc_execute.part.0+0x190>
 800c4a8:	68c5      	ldr	r5, [r0, #12]
 800c4aa:	b32d      	cbz	r5, 800c4f8 <_rclc_execute.part.0+0x1bc>
 800c4ac:	2600      	movs	r6, #0
 800c4ae:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c4b2:	b143      	cbz	r3, 800c4c6 <_rclc_execute.part.0+0x18a>
 800c4b4:	69c3      	ldr	r3, [r0, #28]
 800c4b6:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c4ba:	b123      	cbz	r3, 800c4c6 <_rclc_execute.part.0+0x18a>
 800c4bc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c4be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	4798      	blx	r3
 800c4c4:	6860      	ldr	r0, [r4, #4]
 800c4c6:	682d      	ldr	r5, [r5, #0]
 800c4c8:	2d00      	cmp	r5, #0
 800c4ca:	d1f0      	bne.n	800c4ae <_rclc_execute.part.0+0x172>
 800c4cc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c4d0:	b193      	cbz	r3, 800c4f8 <_rclc_execute.part.0+0x1bc>
 800c4d2:	68c5      	ldr	r5, [r0, #12]
 800c4d4:	b185      	cbz	r5, 800c4f8 <_rclc_execute.part.0+0x1bc>
 800c4d6:	2600      	movs	r6, #0
 800c4d8:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c4dc:	b14b      	cbz	r3, 800c4f2 <_rclc_execute.part.0+0x1b6>
 800c4de:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c4e0:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c4e4:	b12b      	cbz	r3, 800c4f2 <_rclc_execute.part.0+0x1b6>
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c4ec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c4ee:	4798      	blx	r3
 800c4f0:	6860      	ldr	r0, [r4, #4]
 800c4f2:	682d      	ldr	r5, [r5, #0]
 800c4f4:	2d00      	cmp	r5, #0
 800c4f6:	d1ef      	bne.n	800c4d8 <_rclc_execute.part.0+0x19c>
 800c4f8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d081      	beq.n	800c404 <_rclc_execute.part.0+0xc8>
 800c500:	2700      	movs	r7, #0
 800c502:	e00b      	b.n	800c51c <_rclc_execute.part.0+0x1e0>
 800c504:	6863      	ldr	r3, [r4, #4]
 800c506:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c508:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c50a:	6a1e      	ldr	r6, [r3, #32]
 800c50c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c510:	47b0      	blx	r6
 800c512:	6860      	ldr	r0, [r4, #4]
 800c514:	4629      	mov	r1, r5
 800c516:	f007 fd1b 	bl	8013f50 <rclc_action_remove_used_goal_handle>
 800c51a:	6860      	ldr	r0, [r4, #4]
 800c51c:	f007 fda0 	bl	8014060 <rclc_action_find_first_handle_with_result_response>
 800c520:	4605      	mov	r5, r0
 800c522:	2800      	cmp	r0, #0
 800c524:	d1ee      	bne.n	800c504 <_rclc_execute.part.0+0x1c8>
 800c526:	e76d      	b.n	800c404 <_rclc_execute.part.0+0xc8>
 800c528:	6860      	ldr	r0, [r4, #4]
 800c52a:	f880 5020 	strb.w	r5, [r0, #32]
 800c52e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c532:	2b00      	cmp	r3, #0
 800c534:	f43f af66 	beq.w	800c404 <_rclc_execute.part.0+0xc8>
 800c538:	68c5      	ldr	r5, [r0, #12]
 800c53a:	b1b5      	cbz	r5, 800c56a <_rclc_execute.part.0+0x22e>
 800c53c:	2602      	movs	r6, #2
 800c53e:	e001      	b.n	800c544 <_rclc_execute.part.0+0x208>
 800c540:	682d      	ldr	r5, [r5, #0]
 800c542:	b195      	cbz	r5, 800c56a <_rclc_execute.part.0+0x22e>
 800c544:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c548:	2b03      	cmp	r3, #3
 800c54a:	d1f9      	bne.n	800c540 <_rclc_execute.part.0+0x204>
 800c54c:	69c3      	ldr	r3, [r0, #28]
 800c54e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c550:	4628      	mov	r0, r5
 800c552:	4798      	blx	r3
 800c554:	4603      	mov	r3, r0
 800c556:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c55a:	4628      	mov	r0, r5
 800c55c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c560:	b163      	cbz	r3, 800c57c <_rclc_execute.part.0+0x240>
 800c562:	f007 fda9 	bl	80140b8 <rclc_action_server_goal_cancel_accept>
 800c566:	6860      	ldr	r0, [r4, #4]
 800c568:	e7ea      	b.n	800c540 <_rclc_execute.part.0+0x204>
 800c56a:	2300      	movs	r3, #0
 800c56c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c570:	4618      	mov	r0, r3
 800c572:	e739      	b.n	800c3e8 <_rclc_execute.part.0+0xac>
 800c574:	4628      	mov	r0, r5
 800c576:	4798      	blx	r3
 800c578:	4628      	mov	r0, r5
 800c57a:	e735      	b.n	800c3e8 <_rclc_execute.part.0+0xac>
 800c57c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c57e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c582:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c58a:	6860      	ldr	r0, [r4, #4]
 800c58c:	2101      	movs	r1, #1
 800c58e:	f007 fdbf 	bl	8014110 <rclc_action_server_goal_cancel_reject>
 800c592:	722e      	strb	r6, [r5, #8]
 800c594:	6860      	ldr	r0, [r4, #4]
 800c596:	e7d3      	b.n	800c540 <_rclc_execute.part.0+0x204>
 800c598:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c59a:	6880      	ldr	r0, [r0, #8]
 800c59c:	4798      	blx	r3
 800c59e:	f104 0110 	add.w	r1, r4, #16
 800c5a2:	e6e7      	b.n	800c374 <_rclc_execute.part.0+0x38>
 800c5a4:	f100 0110 	add.w	r1, r0, #16
 800c5a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c5aa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c5ac:	6880      	ldr	r0, [r0, #8]
 800c5ae:	9105      	str	r1, [sp, #20]
 800c5b0:	4798      	blx	r3
 800c5b2:	9905      	ldr	r1, [sp, #20]
 800c5b4:	e6de      	b.n	800c374 <_rclc_execute.part.0+0x38>
 800c5b6:	2001      	movs	r0, #1
 800c5b8:	e716      	b.n	800c3e8 <_rclc_execute.part.0+0xac>
 800c5ba:	bf00      	nop

0800c5bc <rclc_executor_trigger_any>:
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d03f      	beq.n	800c640 <rclc_executor_trigger_any+0x84>
 800c5c0:	2900      	cmp	r1, #0
 800c5c2:	d03e      	beq.n	800c642 <rclc_executor_trigger_any+0x86>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d037      	beq.n	800c640 <rclc_executor_trigger_any+0x84>
 800c5d0:	b430      	push	{r4, r5}
 800c5d2:	f893 c000 	ldrb.w	ip, [r3]
 800c5d6:	f1bc 0f08 	cmp.w	ip, #8
 800c5da:	d11e      	bne.n	800c61a <rclc_executor_trigger_any+0x5e>
 800c5dc:	685c      	ldr	r4, [r3, #4]
 800c5de:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c5e0:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c5e4:	d105      	bne.n	800c5f2 <rclc_executor_trigger_any+0x36>
 800c5e6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c5ea:	b910      	cbnz	r0, 800c5f2 <rclc_executor_trigger_any+0x36>
 800c5ec:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c5f0:	b128      	cbz	r0, 800c5fe <rclc_executor_trigger_any+0x42>
 800c5f2:	bc30      	pop	{r4, r5}
 800c5f4:	4770      	bx	lr
 800c5f6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d1f9      	bne.n	800c5f2 <rclc_executor_trigger_any+0x36>
 800c5fe:	3201      	adds	r2, #1
 800c600:	4291      	cmp	r1, r2
 800c602:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c606:	d018      	beq.n	800c63a <rclc_executor_trigger_any+0x7e>
 800c608:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d0f0      	beq.n	800c5f2 <rclc_executor_trigger_any+0x36>
 800c610:	f893 c000 	ldrb.w	ip, [r3]
 800c614:	f1bc 0f08 	cmp.w	ip, #8
 800c618:	d0e0      	beq.n	800c5dc <rclc_executor_trigger_any+0x20>
 800c61a:	f1bc 0f09 	cmp.w	ip, #9
 800c61e:	d1ea      	bne.n	800c5f6 <rclc_executor_trigger_any+0x3a>
 800c620:	685c      	ldr	r4, [r3, #4]
 800c622:	6a25      	ldr	r5, [r4, #32]
 800c624:	2d00      	cmp	r5, #0
 800c626:	d1e4      	bne.n	800c5f2 <rclc_executor_trigger_any+0x36>
 800c628:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d1e0      	bne.n	800c5f2 <rclc_executor_trigger_any+0x36>
 800c630:	3201      	adds	r2, #1
 800c632:	4291      	cmp	r1, r2
 800c634:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c638:	d1e6      	bne.n	800c608 <rclc_executor_trigger_any+0x4c>
 800c63a:	2000      	movs	r0, #0
 800c63c:	bc30      	pop	{r4, r5}
 800c63e:	4770      	bx	lr
 800c640:	4770      	bx	lr
 800c642:	4608      	mov	r0, r1
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop

0800c648 <rclc_executor_get_zero_initialized_executor>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	4903      	ldr	r1, [pc, #12]	@ (800c658 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c64c:	4604      	mov	r4, r0
 800c64e:	2288      	movs	r2, #136	@ 0x88
 800c650:	f00c fd3b 	bl	80190ca <memcpy>
 800c654:	4620      	mov	r0, r4
 800c656:	bd10      	pop	{r4, pc}
 800c658:	0801a200 	.word	0x0801a200
 800c65c:	00000000 	.word	0x00000000

0800c660 <rclc_executor_init>:
 800c660:	2800      	cmp	r0, #0
 800c662:	d05f      	beq.n	800c724 <rclc_executor_init+0xc4>
 800c664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c668:	460c      	mov	r4, r1
 800c66a:	b0b0      	sub	sp, #192	@ 0xc0
 800c66c:	2900      	cmp	r1, #0
 800c66e:	d051      	beq.n	800c714 <rclc_executor_init+0xb4>
 800c670:	4605      	mov	r5, r0
 800c672:	4618      	mov	r0, r3
 800c674:	4616      	mov	r6, r2
 800c676:	461f      	mov	r7, r3
 800c678:	f000 fbea 	bl	800ce50 <rcutils_allocator_is_valid>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d049      	beq.n	800c714 <rclc_executor_init+0xb4>
 800c680:	2e00      	cmp	r6, #0
 800c682:	d047      	beq.n	800c714 <rclc_executor_init+0xb4>
 800c684:	492c      	ldr	r1, [pc, #176]	@ (800c738 <rclc_executor_init+0xd8>)
 800c686:	2288      	movs	r2, #136	@ 0x88
 800c688:	a80e      	add	r0, sp, #56	@ 0x38
 800c68a:	f00c fd1e 	bl	80190ca <memcpy>
 800c68e:	a90e      	add	r1, sp, #56	@ 0x38
 800c690:	2288      	movs	r2, #136	@ 0x88
 800c692:	4628      	mov	r0, r5
 800c694:	f00c fd19 	bl	80190ca <memcpy>
 800c698:	602c      	str	r4, [r5, #0]
 800c69a:	4668      	mov	r0, sp
 800c69c:	60ae      	str	r6, [r5, #8]
 800c69e:	466c      	mov	r4, sp
 800c6a0:	f006 fa02 	bl	8012aa8 <rcl_get_zero_initialized_wait_set>
 800c6a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6a6:	f105 0c14 	add.w	ip, r5, #20
 800c6aa:	f8d7 8000 	ldr.w	r8, [r7]
 800c6ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6be:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c730 <rclc_executor_init+0xd0>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	f8cc 3000 	str.w	r3, [ip]
 800c6c8:	6939      	ldr	r1, [r7, #16]
 800c6ca:	612f      	str	r7, [r5, #16]
 800c6cc:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c6d0:	01b0      	lsls	r0, r6, #6
 800c6d2:	47c0      	blx	r8
 800c6d4:	6068      	str	r0, [r5, #4]
 800c6d6:	b338      	cbz	r0, 800c728 <rclc_executor_init+0xc8>
 800c6d8:	2400      	movs	r4, #0
 800c6da:	e000      	b.n	800c6de <rclc_executor_init+0x7e>
 800c6dc:	6868      	ldr	r0, [r5, #4]
 800c6de:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c6e2:	4631      	mov	r1, r6
 800c6e4:	3401      	adds	r4, #1
 800c6e6:	f000 fa6b 	bl	800cbc0 <rclc_executor_handle_init>
 800c6ea:	42a6      	cmp	r6, r4
 800c6ec:	d1f6      	bne.n	800c6dc <rclc_executor_init+0x7c>
 800c6ee:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c6f2:	f000 fa5b 	bl	800cbac <rclc_executor_handle_counters_zero_init>
 800c6f6:	4a11      	ldr	r2, [pc, #68]	@ (800c73c <rclc_executor_init+0xdc>)
 800c6f8:	686b      	ldr	r3, [r5, #4]
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c700:	b163      	cbz	r3, 800c71c <rclc_executor_init+0xbc>
 800c702:	692b      	ldr	r3, [r5, #16]
 800c704:	b153      	cbz	r3, 800c71c <rclc_executor_init+0xbc>
 800c706:	68ab      	ldr	r3, [r5, #8]
 800c708:	b143      	cbz	r3, 800c71c <rclc_executor_init+0xbc>
 800c70a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c70e:	b030      	add	sp, #192	@ 0xc0
 800c710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c714:	200b      	movs	r0, #11
 800c716:	b030      	add	sp, #192	@ 0xc0
 800c718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c71c:	4618      	mov	r0, r3
 800c71e:	b030      	add	sp, #192	@ 0xc0
 800c720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c724:	200b      	movs	r0, #11
 800c726:	4770      	bx	lr
 800c728:	200a      	movs	r0, #10
 800c72a:	e7f4      	b.n	800c716 <rclc_executor_init+0xb6>
 800c72c:	f3af 8000 	nop.w
 800c730:	3b9aca00 	.word	0x3b9aca00
 800c734:	00000000 	.word	0x00000000
 800c738:	0801a200 	.word	0x0801a200
 800c73c:	0800c5bd 	.word	0x0800c5bd

0800c740 <rclc_executor_add_subscription>:
 800c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c742:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c746:	b338      	cbz	r0, 800c798 <rclc_executor_add_subscription+0x58>
 800c748:	b331      	cbz	r1, 800c798 <rclc_executor_add_subscription+0x58>
 800c74a:	b32a      	cbz	r2, 800c798 <rclc_executor_add_subscription+0x58>
 800c74c:	b323      	cbz	r3, 800c798 <rclc_executor_add_subscription+0x58>
 800c74e:	4604      	mov	r4, r0
 800c750:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c754:	42a8      	cmp	r0, r5
 800c756:	d301      	bcc.n	800c75c <rclc_executor_add_subscription+0x1c>
 800c758:	2001      	movs	r0, #1
 800c75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c75c:	6866      	ldr	r6, [r4, #4]
 800c75e:	0187      	lsls	r7, r0, #6
 800c760:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c764:	2500      	movs	r5, #0
 800c766:	55f5      	strb	r5, [r6, r7]
 800c768:	3001      	adds	r0, #1
 800c76a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c76e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c772:	2301      	movs	r3, #1
 800c774:	f104 0514 	add.w	r5, r4, #20
 800c778:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c77c:	f88c e001 	strb.w	lr, [ip, #1]
 800c780:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c784:	60e0      	str	r0, [r4, #12]
 800c786:	4628      	mov	r0, r5
 800c788:	f006 f9a2 	bl	8012ad0 <rcl_wait_set_is_valid>
 800c78c:	b930      	cbnz	r0, 800c79c <rclc_executor_add_subscription+0x5c>
 800c78e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c790:	3301      	adds	r3, #1
 800c792:	2000      	movs	r0, #0
 800c794:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c798:	200b      	movs	r0, #11
 800c79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c79c:	4628      	mov	r0, r5
 800c79e:	f006 f99d 	bl	8012adc <rcl_wait_set_fini>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d0f3      	beq.n	800c78e <rclc_executor_add_subscription+0x4e>
 800c7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c7a8 <rclc_executor_prepare>:
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d044      	beq.n	800c836 <rclc_executor_prepare+0x8e>
 800c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ae:	f100 0514 	add.w	r5, r0, #20
 800c7b2:	b09b      	sub	sp, #108	@ 0x6c
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	f006 f98a 	bl	8012ad0 <rcl_wait_set_is_valid>
 800c7bc:	b110      	cbz	r0, 800c7c4 <rclc_executor_prepare+0x1c>
 800c7be:	2000      	movs	r0, #0
 800c7c0:	b01b      	add	sp, #108	@ 0x6c
 800c7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f006 f989 	bl	8012adc <rcl_wait_set_fini>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d130      	bne.n	800c830 <rclc_executor_prepare+0x88>
 800c7ce:	a80c      	add	r0, sp, #48	@ 0x30
 800c7d0:	f006 f96a 	bl	8012aa8 <rcl_get_zero_initialized_wait_set>
 800c7d4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c7d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c7dc:	46ae      	mov	lr, r5
 800c7de:	6927      	ldr	r7, [r4, #16]
 800c7e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c7e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c7e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c7ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c7f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c7f4:	f8dc 3000 	ldr.w	r3, [ip]
 800c7f8:	f8ce 3000 	str.w	r3, [lr]
 800c7fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c7fe:	ae04      	add	r6, sp, #16
 800c800:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	6822      	ldr	r2, [r4, #0]
 800c806:	6033      	str	r3, [r6, #0]
 800c808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c80a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c80c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c810:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c814:	e9cd 2100 	strd	r2, r1, [sp]
 800c818:	4628      	mov	r0, r5
 800c81a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c81c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c81e:	f006 fc5b 	bl	80130d8 <rcl_wait_set_init>
 800c822:	2800      	cmp	r0, #0
 800c824:	d0cc      	beq.n	800c7c0 <rclc_executor_prepare+0x18>
 800c826:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c828:	f000 fb36 	bl	800ce98 <rcutils_reset_error>
 800c82c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c82e:	e7c7      	b.n	800c7c0 <rclc_executor_prepare+0x18>
 800c830:	f000 fb32 	bl	800ce98 <rcutils_reset_error>
 800c834:	e7cb      	b.n	800c7ce <rclc_executor_prepare+0x26>
 800c836:	200b      	movs	r0, #11
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop

0800c83c <rclc_executor_spin_some.part.0>:
 800c83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c840:	f100 0614 	add.w	r6, r0, #20
 800c844:	b083      	sub	sp, #12
 800c846:	4691      	mov	r9, r2
 800c848:	4698      	mov	r8, r3
 800c84a:	4605      	mov	r5, r0
 800c84c:	f7ff ffac 	bl	800c7a8 <rclc_executor_prepare>
 800c850:	4630      	mov	r0, r6
 800c852:	f006 fa0f 	bl	8012c74 <rcl_wait_set_clear>
 800c856:	4607      	mov	r7, r0
 800c858:	2800      	cmp	r0, #0
 800c85a:	f040 80ed 	bne.w	800ca38 <rclc_executor_spin_some.part.0+0x1fc>
 800c85e:	68ab      	ldr	r3, [r5, #8]
 800c860:	4604      	mov	r4, r0
 800c862:	b303      	cbz	r3, 800c8a6 <rclc_executor_spin_some.part.0+0x6a>
 800c864:	6869      	ldr	r1, [r5, #4]
 800c866:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c86a:	01a2      	lsls	r2, r4, #6
 800c86c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c870:	b1cb      	cbz	r3, 800c8a6 <rclc_executor_spin_some.part.0+0x6a>
 800c872:	5c8b      	ldrb	r3, [r1, r2]
 800c874:	2b0a      	cmp	r3, #10
 800c876:	f200 80d8 	bhi.w	800ca2a <rclc_executor_spin_some.part.0+0x1ee>
 800c87a:	e8df f003 	tbb	[pc, r3]
 800c87e:	9c9c      	.short	0x9c9c
 800c880:	068c8ca7 	.word	0x068c8ca7
 800c884:	bdc90606 	.word	0xbdc90606
 800c888:	b2          	.byte	0xb2
 800c889:	00          	.byte	0x00
 800c88a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c88e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c892:	4630      	mov	r0, r6
 800c894:	f006 fd36 	bl	8013304 <rcl_wait_set_add_service>
 800c898:	2800      	cmp	r0, #0
 800c89a:	f040 8086 	bne.w	800c9aa <rclc_executor_spin_some.part.0+0x16e>
 800c89e:	68ab      	ldr	r3, [r5, #8]
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	429c      	cmp	r4, r3
 800c8a4:	d3de      	bcc.n	800c864 <rclc_executor_spin_some.part.0+0x28>
 800c8a6:	4643      	mov	r3, r8
 800c8a8:	464a      	mov	r2, r9
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f006 fd58 	bl	8013360 <rcl_wait>
 800c8b0:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 80c7 	beq.w	800ca48 <rclc_executor_spin_some.part.0+0x20c>
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	f040 80b5 	bne.w	800ca2a <rclc_executor_spin_some.part.0+0x1ee>
 800c8c0:	68ab      	ldr	r3, [r5, #8]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 8159 	beq.w	800cb7a <rclc_executor_spin_some.part.0+0x33e>
 800c8c8:	2400      	movs	r4, #0
 800c8ca:	46a0      	mov	r8, r4
 800c8cc:	f240 1991 	movw	r9, #401	@ 0x191
 800c8d0:	e00a      	b.n	800c8e8 <rclc_executor_spin_some.part.0+0xac>
 800c8d2:	f7ff fb71 	bl	800bfb8 <_rclc_check_for_new_data>
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	b110      	cbz	r0, 800c8e0 <rclc_executor_spin_some.part.0+0xa4>
 800c8da:	4548      	cmp	r0, r9
 800c8dc:	f040 80b2 	bne.w	800ca44 <rclc_executor_spin_some.part.0+0x208>
 800c8e0:	68ab      	ldr	r3, [r5, #8]
 800c8e2:	4598      	cmp	r8, r3
 800c8e4:	f080 8126 	bcs.w	800cb34 <rclc_executor_spin_some.part.0+0x2f8>
 800c8e8:	686a      	ldr	r2, [r5, #4]
 800c8ea:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c8ee:	4631      	mov	r1, r6
 800c8f0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c8f4:	f108 0801 	add.w	r8, r8, #1
 800c8f8:	f1bc 0f00 	cmp.w	ip, #0
 800c8fc:	d1e9      	bne.n	800c8d2 <rclc_executor_spin_some.part.0+0x96>
 800c8fe:	4619      	mov	r1, r3
 800c900:	4610      	mov	r0, r2
 800c902:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c906:	4798      	blx	r3
 800c908:	2800      	cmp	r0, #0
 800c90a:	f000 809b 	beq.w	800ca44 <rclc_executor_spin_some.part.0+0x208>
 800c90e:	68ab      	ldr	r3, [r5, #8]
 800c910:	2b00      	cmp	r3, #0
 800c912:	f000 8097 	beq.w	800ca44 <rclc_executor_spin_some.part.0+0x208>
 800c916:	f04f 0800 	mov.w	r8, #0
 800c91a:	f240 1991 	movw	r9, #401	@ 0x191
 800c91e:	e009      	b.n	800c934 <rclc_executor_spin_some.part.0+0xf8>
 800c920:	f7ff fb98 	bl	800c054 <_rclc_take_new_data>
 800c924:	4604      	mov	r4, r0
 800c926:	b110      	cbz	r0, 800c92e <rclc_executor_spin_some.part.0+0xf2>
 800c928:	4548      	cmp	r0, r9
 800c92a:	f040 808b 	bne.w	800ca44 <rclc_executor_spin_some.part.0+0x208>
 800c92e:	68ab      	ldr	r3, [r5, #8]
 800c930:	4598      	cmp	r8, r3
 800c932:	d209      	bcs.n	800c948 <rclc_executor_spin_some.part.0+0x10c>
 800c934:	6868      	ldr	r0, [r5, #4]
 800c936:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c93a:	4631      	mov	r1, r6
 800c93c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c940:	f108 0801 	add.w	r8, r8, #1
 800c944:	2a00      	cmp	r2, #0
 800c946:	d1eb      	bne.n	800c920 <rclc_executor_spin_some.part.0+0xe4>
 800c948:	2600      	movs	r6, #0
 800c94a:	b97b      	cbnz	r3, 800c96c <rclc_executor_spin_some.part.0+0x130>
 800c94c:	e07a      	b.n	800ca44 <rclc_executor_spin_some.part.0+0x208>
 800c94e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c952:	2a08      	cmp	r2, #8
 800c954:	f000 80fd 	beq.w	800cb52 <rclc_executor_spin_some.part.0+0x316>
 800c958:	2a09      	cmp	r2, #9
 800c95a:	f000 80ef 	beq.w	800cb3c <rclc_executor_spin_some.part.0+0x300>
 800c95e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c962:	b98a      	cbnz	r2, 800c988 <rclc_executor_spin_some.part.0+0x14c>
 800c964:	3601      	adds	r6, #1
 800c966:	429e      	cmp	r6, r3
 800c968:	d262      	bcs.n	800ca30 <rclc_executor_spin_some.part.0+0x1f4>
 800c96a:	2400      	movs	r4, #0
 800c96c:	686a      	ldr	r2, [r5, #4]
 800c96e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c972:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c976:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c97a:	2900      	cmp	r1, #0
 800c97c:	d062      	beq.n	800ca44 <rclc_executor_spin_some.part.0+0x208>
 800c97e:	7841      	ldrb	r1, [r0, #1]
 800c980:	2900      	cmp	r1, #0
 800c982:	d0e4      	beq.n	800c94e <rclc_executor_spin_some.part.0+0x112>
 800c984:	2901      	cmp	r1, #1
 800c986:	d1ed      	bne.n	800c964 <rclc_executor_spin_some.part.0+0x128>
 800c988:	f7ff fcd8 	bl	800c33c <_rclc_execute.part.0>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	f040 80b6 	bne.w	800cafe <rclc_executor_spin_some.part.0+0x2c2>
 800c992:	68ab      	ldr	r3, [r5, #8]
 800c994:	e7e6      	b.n	800c964 <rclc_executor_spin_some.part.0+0x128>
 800c996:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c99a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c99e:	4630      	mov	r0, r6
 800c9a0:	f006 fc84 	bl	80132ac <rcl_wait_set_add_client>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	f43f af7a 	beq.w	800c89e <rclc_executor_spin_some.part.0+0x62>
 800c9aa:	9001      	str	r0, [sp, #4]
 800c9ac:	f000 fa74 	bl	800ce98 <rcutils_reset_error>
 800c9b0:	9801      	ldr	r0, [sp, #4]
 800c9b2:	4607      	mov	r7, r0
 800c9b4:	e03c      	b.n	800ca30 <rclc_executor_spin_some.part.0+0x1f4>
 800c9b6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c9ba:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c9be:	4630      	mov	r0, r6
 800c9c0:	f006 f92c 	bl	8012c1c <rcl_wait_set_add_subscription>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	f43f af6a 	beq.w	800c89e <rclc_executor_spin_some.part.0+0x62>
 800c9ca:	e7ee      	b.n	800c9aa <rclc_executor_spin_some.part.0+0x16e>
 800c9cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c9d0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f006 fc39 	bl	801324c <rcl_wait_set_add_timer>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	f43f af5f 	beq.w	800c89e <rclc_executor_spin_some.part.0+0x62>
 800c9e0:	e7e3      	b.n	800c9aa <rclc_executor_spin_some.part.0+0x16e>
 800c9e2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c9e6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f006 fc02 	bl	80131f4 <rcl_wait_set_add_guard_condition>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	f43f af54 	beq.w	800c89e <rclc_executor_spin_some.part.0+0x62>
 800c9f6:	e7d8      	b.n	800c9aa <rclc_executor_spin_some.part.0+0x16e>
 800c9f8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c9fc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ca00:	3110      	adds	r1, #16
 800ca02:	4630      	mov	r0, r6
 800ca04:	f007 f984 	bl	8013d10 <rcl_action_wait_set_add_action_server>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	f43f af48 	beq.w	800c89e <rclc_executor_spin_some.part.0+0x62>
 800ca0e:	e7cc      	b.n	800c9aa <rclc_executor_spin_some.part.0+0x16e>
 800ca10:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ca14:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ca18:	3110      	adds	r1, #16
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	f006 ff4f 	bl	80138c0 <rcl_action_wait_set_add_action_client>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	f43f af3b 	beq.w	800c89e <rclc_executor_spin_some.part.0+0x62>
 800ca28:	e7bf      	b.n	800c9aa <rclc_executor_spin_some.part.0+0x16e>
 800ca2a:	f000 fa35 	bl	800ce98 <rcutils_reset_error>
 800ca2e:	2701      	movs	r7, #1
 800ca30:	4638      	mov	r0, r7
 800ca32:	b003      	add	sp, #12
 800ca34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca38:	f000 fa2e 	bl	800ce98 <rcutils_reset_error>
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	b003      	add	sp, #12
 800ca40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca44:	4627      	mov	r7, r4
 800ca46:	e7f3      	b.n	800ca30 <rclc_executor_spin_some.part.0+0x1f4>
 800ca48:	68ab      	ldr	r3, [r5, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 8092 	beq.w	800cb74 <rclc_executor_spin_some.part.0+0x338>
 800ca50:	2400      	movs	r4, #0
 800ca52:	46a0      	mov	r8, r4
 800ca54:	f240 1991 	movw	r9, #401	@ 0x191
 800ca58:	e008      	b.n	800ca6c <rclc_executor_spin_some.part.0+0x230>
 800ca5a:	f7ff faad 	bl	800bfb8 <_rclc_check_for_new_data>
 800ca5e:	4604      	mov	r4, r0
 800ca60:	b108      	cbz	r0, 800ca66 <rclc_executor_spin_some.part.0+0x22a>
 800ca62:	4548      	cmp	r0, r9
 800ca64:	d1ee      	bne.n	800ca44 <rclc_executor_spin_some.part.0+0x208>
 800ca66:	68ab      	ldr	r3, [r5, #8]
 800ca68:	4598      	cmp	r8, r3
 800ca6a:	d265      	bcs.n	800cb38 <rclc_executor_spin_some.part.0+0x2fc>
 800ca6c:	686a      	ldr	r2, [r5, #4]
 800ca6e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ca72:	4631      	mov	r1, r6
 800ca74:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ca78:	f108 0801 	add.w	r8, r8, #1
 800ca7c:	f1bc 0f00 	cmp.w	ip, #0
 800ca80:	d1eb      	bne.n	800ca5a <rclc_executor_spin_some.part.0+0x21e>
 800ca82:	4619      	mov	r1, r3
 800ca84:	4610      	mov	r0, r2
 800ca86:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ca8a:	4798      	blx	r3
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d0d9      	beq.n	800ca44 <rclc_executor_spin_some.part.0+0x208>
 800ca90:	68ab      	ldr	r3, [r5, #8]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0d6      	beq.n	800ca44 <rclc_executor_spin_some.part.0+0x208>
 800ca96:	f04f 0800 	mov.w	r8, #0
 800ca9a:	f240 1991 	movw	r9, #401	@ 0x191
 800ca9e:	f240 2a59 	movw	sl, #601	@ 0x259
 800caa2:	e00e      	b.n	800cac2 <rclc_executor_spin_some.part.0+0x286>
 800caa4:	f813 300b 	ldrb.w	r3, [r3, fp]
 800caa8:	2b08      	cmp	r3, #8
 800caaa:	d033      	beq.n	800cb14 <rclc_executor_spin_some.part.0+0x2d8>
 800caac:	2b09      	cmp	r3, #9
 800caae:	d028      	beq.n	800cb02 <rclc_executor_spin_some.part.0+0x2c6>
 800cab0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800cab4:	b9fb      	cbnz	r3, 800caf6 <rclc_executor_spin_some.part.0+0x2ba>
 800cab6:	68ab      	ldr	r3, [r5, #8]
 800cab8:	f108 0801 	add.w	r8, r8, #1
 800cabc:	4598      	cmp	r8, r3
 800cabe:	d2b7      	bcs.n	800ca30 <rclc_executor_spin_some.part.0+0x1f4>
 800cac0:	2400      	movs	r4, #0
 800cac2:	6868      	ldr	r0, [r5, #4]
 800cac4:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cac8:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800cacc:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d0b7      	beq.n	800ca44 <rclc_executor_spin_some.part.0+0x208>
 800cad4:	4631      	mov	r1, r6
 800cad6:	f7ff fabd 	bl	800c054 <_rclc_take_new_data>
 800cada:	b118      	cbz	r0, 800cae4 <rclc_executor_spin_some.part.0+0x2a8>
 800cadc:	4548      	cmp	r0, r9
 800cade:	d001      	beq.n	800cae4 <rclc_executor_spin_some.part.0+0x2a8>
 800cae0:	4550      	cmp	r0, sl
 800cae2:	d10c      	bne.n	800cafe <rclc_executor_spin_some.part.0+0x2c2>
 800cae4:	686b      	ldr	r3, [r5, #4]
 800cae6:	eb13 000b 	adds.w	r0, r3, fp
 800caea:	d021      	beq.n	800cb30 <rclc_executor_spin_some.part.0+0x2f4>
 800caec:	7842      	ldrb	r2, [r0, #1]
 800caee:	2a00      	cmp	r2, #0
 800caf0:	d0d8      	beq.n	800caa4 <rclc_executor_spin_some.part.0+0x268>
 800caf2:	2a01      	cmp	r2, #1
 800caf4:	d1df      	bne.n	800cab6 <rclc_executor_spin_some.part.0+0x27a>
 800caf6:	f7ff fc21 	bl	800c33c <_rclc_execute.part.0>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d0db      	beq.n	800cab6 <rclc_executor_spin_some.part.0+0x27a>
 800cafe:	4607      	mov	r7, r0
 800cb00:	e796      	b.n	800ca30 <rclc_executor_spin_some.part.0+0x1f4>
 800cb02:	6843      	ldr	r3, [r0, #4]
 800cb04:	6a1a      	ldr	r2, [r3, #32]
 800cb06:	2a00      	cmp	r2, #0
 800cb08:	d1f5      	bne.n	800caf6 <rclc_executor_spin_some.part.0+0x2ba>
 800cb0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d0d1      	beq.n	800cab6 <rclc_executor_spin_some.part.0+0x27a>
 800cb12:	e7f0      	b.n	800caf6 <rclc_executor_spin_some.part.0+0x2ba>
 800cb14:	6843      	ldr	r3, [r0, #4]
 800cb16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb18:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800cb1c:	d1eb      	bne.n	800caf6 <rclc_executor_spin_some.part.0+0x2ba>
 800cb1e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cb22:	2a00      	cmp	r2, #0
 800cb24:	d1e7      	bne.n	800caf6 <rclc_executor_spin_some.part.0+0x2ba>
 800cb26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d0c3      	beq.n	800cab6 <rclc_executor_spin_some.part.0+0x27a>
 800cb2e:	e7e2      	b.n	800caf6 <rclc_executor_spin_some.part.0+0x2ba>
 800cb30:	270b      	movs	r7, #11
 800cb32:	e77d      	b.n	800ca30 <rclc_executor_spin_some.part.0+0x1f4>
 800cb34:	686a      	ldr	r2, [r5, #4]
 800cb36:	e6e2      	b.n	800c8fe <rclc_executor_spin_some.part.0+0xc2>
 800cb38:	686a      	ldr	r2, [r5, #4]
 800cb3a:	e7a2      	b.n	800ca82 <rclc_executor_spin_some.part.0+0x246>
 800cb3c:	6842      	ldr	r2, [r0, #4]
 800cb3e:	6a11      	ldr	r1, [r2, #32]
 800cb40:	2900      	cmp	r1, #0
 800cb42:	f47f af21 	bne.w	800c988 <rclc_executor_spin_some.part.0+0x14c>
 800cb46:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800cb4a:	2a00      	cmp	r2, #0
 800cb4c:	f43f af0a 	beq.w	800c964 <rclc_executor_spin_some.part.0+0x128>
 800cb50:	e71a      	b.n	800c988 <rclc_executor_spin_some.part.0+0x14c>
 800cb52:	6842      	ldr	r2, [r0, #4]
 800cb54:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800cb56:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800cb5a:	f47f af15 	bne.w	800c988 <rclc_executor_spin_some.part.0+0x14c>
 800cb5e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800cb62:	2900      	cmp	r1, #0
 800cb64:	f47f af10 	bne.w	800c988 <rclc_executor_spin_some.part.0+0x14c>
 800cb68:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	f43f aef9 	beq.w	800c964 <rclc_executor_spin_some.part.0+0x128>
 800cb72:	e709      	b.n	800c988 <rclc_executor_spin_some.part.0+0x14c>
 800cb74:	686a      	ldr	r2, [r5, #4]
 800cb76:	461c      	mov	r4, r3
 800cb78:	e783      	b.n	800ca82 <rclc_executor_spin_some.part.0+0x246>
 800cb7a:	686a      	ldr	r2, [r5, #4]
 800cb7c:	461c      	mov	r4, r3
 800cb7e:	e6be      	b.n	800c8fe <rclc_executor_spin_some.part.0+0xc2>

0800cb80 <rclc_executor_spin_some>:
 800cb80:	b190      	cbz	r0, 800cba8 <rclc_executor_spin_some+0x28>
 800cb82:	b570      	push	{r4, r5, r6, lr}
 800cb84:	4604      	mov	r4, r0
 800cb86:	6800      	ldr	r0, [r0, #0]
 800cb88:	4616      	mov	r6, r2
 800cb8a:	461d      	mov	r5, r3
 800cb8c:	f004 fe00 	bl	8011790 <rcl_context_is_valid>
 800cb90:	b130      	cbz	r0, 800cba0 <rclc_executor_spin_some+0x20>
 800cb92:	4632      	mov	r2, r6
 800cb94:	462b      	mov	r3, r5
 800cb96:	4620      	mov	r0, r4
 800cb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb9c:	f7ff be4e 	b.w	800c83c <rclc_executor_spin_some.part.0>
 800cba0:	f000 f97a 	bl	800ce98 <rcutils_reset_error>
 800cba4:	2001      	movs	r0, #1
 800cba6:	bd70      	pop	{r4, r5, r6, pc}
 800cba8:	200b      	movs	r0, #11
 800cbaa:	4770      	bx	lr

0800cbac <rclc_executor_handle_counters_zero_init>:
 800cbac:	b130      	cbz	r0, 800cbbc <rclc_executor_handle_counters_zero_init+0x10>
 800cbae:	b508      	push	{r3, lr}
 800cbb0:	2220      	movs	r2, #32
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	f00c f9c0 	bl	8018f38 <memset>
 800cbb8:	2000      	movs	r0, #0
 800cbba:	bd08      	pop	{r3, pc}
 800cbbc:	200b      	movs	r0, #11
 800cbbe:	4770      	bx	lr

0800cbc0 <rclc_executor_handle_init>:
 800cbc0:	b168      	cbz	r0, 800cbde <rclc_executor_handle_init+0x1e>
 800cbc2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800cbe8 <rclc_executor_handle_init+0x28>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	220b      	movs	r2, #11
 800cbca:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800cbce:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800cbd2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800cbd6:	8002      	strh	r2, [r0, #0]
 800cbd8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800cbda:	4618      	mov	r0, r3
 800cbdc:	4770      	bx	lr
 800cbde:	200b      	movs	r0, #11
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	f3af 8000 	nop.w
	...

0800cbf0 <rclc_support_init>:
 800cbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf4:	b086      	sub	sp, #24
 800cbf6:	b3b8      	cbz	r0, 800cc68 <rclc_support_init+0x78>
 800cbf8:	461c      	mov	r4, r3
 800cbfa:	b3ab      	cbz	r3, 800cc68 <rclc_support_init+0x78>
 800cbfc:	460f      	mov	r7, r1
 800cbfe:	4690      	mov	r8, r2
 800cc00:	4606      	mov	r6, r0
 800cc02:	f004 ff2f 	bl	8011a64 <rcl_get_zero_initialized_init_options>
 800cc06:	f104 030c 	add.w	r3, r4, #12
 800cc0a:	9005      	str	r0, [sp, #20]
 800cc0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc10:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cc14:	a805      	add	r0, sp, #20
 800cc16:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cc1a:	f004 ff25 	bl	8011a68 <rcl_init_options_init>
 800cc1e:	4605      	mov	r5, r0
 800cc20:	b9e0      	cbnz	r0, 800cc5c <rclc_support_init+0x6c>
 800cc22:	ad02      	add	r5, sp, #8
 800cc24:	4628      	mov	r0, r5
 800cc26:	f004 fda9 	bl	801177c <rcl_get_zero_initialized_context>
 800cc2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cc2e:	4633      	mov	r3, r6
 800cc30:	e886 0003 	stmia.w	r6, {r0, r1}
 800cc34:	aa05      	add	r2, sp, #20
 800cc36:	4641      	mov	r1, r8
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f004 fe0f 	bl	801185c <rcl_init>
 800cc3e:	4605      	mov	r5, r0
 800cc40:	b9b8      	cbnz	r0, 800cc72 <rclc_support_init+0x82>
 800cc42:	60b4      	str	r4, [r6, #8]
 800cc44:	4622      	mov	r2, r4
 800cc46:	f106 010c 	add.w	r1, r6, #12
 800cc4a:	2003      	movs	r0, #3
 800cc4c:	f005 fd36 	bl	80126bc <rcl_clock_init>
 800cc50:	4605      	mov	r5, r0
 800cc52:	b970      	cbnz	r0, 800cc72 <rclc_support_init+0x82>
 800cc54:	a805      	add	r0, sp, #20
 800cc56:	f004 ff6d 	bl	8011b34 <rcl_init_options_fini>
 800cc5a:	b108      	cbz	r0, 800cc60 <rclc_support_init+0x70>
 800cc5c:	f000 f91c 	bl	800ce98 <rcutils_reset_error>
 800cc60:	4628      	mov	r0, r5
 800cc62:	b006      	add	sp, #24
 800cc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc68:	250b      	movs	r5, #11
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	b006      	add	sp, #24
 800cc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc72:	f000 f911 	bl	800ce98 <rcutils_reset_error>
 800cc76:	a805      	add	r0, sp, #20
 800cc78:	f004 ff5c 	bl	8011b34 <rcl_init_options_fini>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d0ef      	beq.n	800cc60 <rclc_support_init+0x70>
 800cc80:	e7ec      	b.n	800cc5c <rclc_support_init+0x6c>
 800cc82:	bf00      	nop

0800cc84 <rclc_node_init_default>:
 800cc84:	b3b8      	cbz	r0, 800ccf6 <rclc_node_init_default+0x72>
 800cc86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc8a:	460d      	mov	r5, r1
 800cc8c:	b0a1      	sub	sp, #132	@ 0x84
 800cc8e:	b329      	cbz	r1, 800ccdc <rclc_node_init_default+0x58>
 800cc90:	4616      	mov	r6, r2
 800cc92:	b31a      	cbz	r2, 800ccdc <rclc_node_init_default+0x58>
 800cc94:	461f      	mov	r7, r3
 800cc96:	b30b      	cbz	r3, 800ccdc <rclc_node_init_default+0x58>
 800cc98:	f10d 0810 	add.w	r8, sp, #16
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	4640      	mov	r0, r8
 800cca0:	f005 f800 	bl	8011ca4 <rcl_get_zero_initialized_node>
 800cca4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cca8:	f10d 0918 	add.w	r9, sp, #24
 800ccac:	e884 0003 	stmia.w	r4, {r0, r1}
 800ccb0:	4648      	mov	r0, r9
 800ccb2:	f005 f96f 	bl	8011f94 <rcl_node_get_default_options>
 800ccb6:	4640      	mov	r0, r8
 800ccb8:	f004 fff4 	bl	8011ca4 <rcl_get_zero_initialized_node>
 800ccbc:	f8cd 9000 	str.w	r9, [sp]
 800ccc0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ccc4:	463b      	mov	r3, r7
 800ccc6:	e884 0003 	stmia.w	r4, {r0, r1}
 800ccca:	4632      	mov	r2, r6
 800cccc:	4629      	mov	r1, r5
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f004 fff2 	bl	8011cb8 <rcl_node_init>
 800ccd4:	b930      	cbnz	r0, 800cce4 <rclc_node_init_default+0x60>
 800ccd6:	b021      	add	sp, #132	@ 0x84
 800ccd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccdc:	200b      	movs	r0, #11
 800ccde:	b021      	add	sp, #132	@ 0x84
 800cce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cce4:	9003      	str	r0, [sp, #12]
 800cce6:	f000 f8d7 	bl	800ce98 <rcutils_reset_error>
 800ccea:	f000 f8d5 	bl	800ce98 <rcutils_reset_error>
 800ccee:	9803      	ldr	r0, [sp, #12]
 800ccf0:	b021      	add	sp, #132	@ 0x84
 800ccf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccf6:	200b      	movs	r0, #11
 800ccf8:	4770      	bx	lr
 800ccfa:	bf00      	nop

0800ccfc <rclc_publisher_init_default>:
 800ccfc:	b368      	cbz	r0, 800cd5a <rclc_publisher_init_default+0x5e>
 800ccfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd02:	460d      	mov	r5, r1
 800cd04:	b0a0      	sub	sp, #128	@ 0x80
 800cd06:	b321      	cbz	r1, 800cd52 <rclc_publisher_init_default+0x56>
 800cd08:	4616      	mov	r6, r2
 800cd0a:	b312      	cbz	r2, 800cd52 <rclc_publisher_init_default+0x56>
 800cd0c:	461f      	mov	r7, r3
 800cd0e:	b303      	cbz	r3, 800cd52 <rclc_publisher_init_default+0x56>
 800cd10:	4604      	mov	r4, r0
 800cd12:	f7ff f841 	bl	800bd98 <rcl_get_zero_initialized_publisher>
 800cd16:	f10d 0810 	add.w	r8, sp, #16
 800cd1a:	6020      	str	r0, [r4, #0]
 800cd1c:	4640      	mov	r0, r8
 800cd1e:	f7ff f8d7 	bl	800bed0 <rcl_publisher_get_default_options>
 800cd22:	490f      	ldr	r1, [pc, #60]	@ (800cd60 <rclc_publisher_init_default+0x64>)
 800cd24:	2250      	movs	r2, #80	@ 0x50
 800cd26:	4640      	mov	r0, r8
 800cd28:	f00c f9cf 	bl	80190ca <memcpy>
 800cd2c:	f8cd 8000 	str.w	r8, [sp]
 800cd30:	463b      	mov	r3, r7
 800cd32:	4632      	mov	r2, r6
 800cd34:	4629      	mov	r1, r5
 800cd36:	4620      	mov	r0, r4
 800cd38:	f7ff f834 	bl	800bda4 <rcl_publisher_init>
 800cd3c:	b910      	cbnz	r0, 800cd44 <rclc_publisher_init_default+0x48>
 800cd3e:	b020      	add	sp, #128	@ 0x80
 800cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd44:	9003      	str	r0, [sp, #12]
 800cd46:	f000 f8a7 	bl	800ce98 <rcutils_reset_error>
 800cd4a:	9803      	ldr	r0, [sp, #12]
 800cd4c:	b020      	add	sp, #128	@ 0x80
 800cd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd52:	200b      	movs	r0, #11
 800cd54:	b020      	add	sp, #128	@ 0x80
 800cd56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd5a:	200b      	movs	r0, #11
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	0801a288 	.word	0x0801a288

0800cd64 <rclc_subscription_init_default>:
 800cd64:	b368      	cbz	r0, 800cdc2 <rclc_subscription_init_default+0x5e>
 800cd66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6a:	460d      	mov	r5, r1
 800cd6c:	b0a0      	sub	sp, #128	@ 0x80
 800cd6e:	b321      	cbz	r1, 800cdba <rclc_subscription_init_default+0x56>
 800cd70:	4616      	mov	r6, r2
 800cd72:	b312      	cbz	r2, 800cdba <rclc_subscription_init_default+0x56>
 800cd74:	461f      	mov	r7, r3
 800cd76:	b303      	cbz	r3, 800cdba <rclc_subscription_init_default+0x56>
 800cd78:	4604      	mov	r4, r0
 800cd7a:	f005 fb43 	bl	8012404 <rcl_get_zero_initialized_subscription>
 800cd7e:	f10d 0810 	add.w	r8, sp, #16
 800cd82:	6020      	str	r0, [r4, #0]
 800cd84:	4640      	mov	r0, r8
 800cd86:	f005 fbeb 	bl	8012560 <rcl_subscription_get_default_options>
 800cd8a:	490f      	ldr	r1, [pc, #60]	@ (800cdc8 <rclc_subscription_init_default+0x64>)
 800cd8c:	2250      	movs	r2, #80	@ 0x50
 800cd8e:	4640      	mov	r0, r8
 800cd90:	f00c f99b 	bl	80190ca <memcpy>
 800cd94:	f8cd 8000 	str.w	r8, [sp]
 800cd98:	463b      	mov	r3, r7
 800cd9a:	4632      	mov	r2, r6
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f005 fb36 	bl	8012410 <rcl_subscription_init>
 800cda4:	b910      	cbnz	r0, 800cdac <rclc_subscription_init_default+0x48>
 800cda6:	b020      	add	sp, #128	@ 0x80
 800cda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdac:	9003      	str	r0, [sp, #12]
 800cdae:	f000 f873 	bl	800ce98 <rcutils_reset_error>
 800cdb2:	9803      	ldr	r0, [sp, #12]
 800cdb4:	b020      	add	sp, #128	@ 0x80
 800cdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdba:	200b      	movs	r0, #11
 800cdbc:	b020      	add	sp, #128	@ 0x80
 800cdbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc2:	200b      	movs	r0, #11
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop
 800cdc8:	0801a2d8 	.word	0x0801a2d8

0800cdcc <__default_zero_allocate>:
 800cdcc:	f00b bb6c 	b.w	80184a8 <calloc>

0800cdd0 <__default_reallocate>:
 800cdd0:	f00b bd0a 	b.w	80187e8 <realloc>

0800cdd4 <__default_deallocate>:
 800cdd4:	f00b bbe6 	b.w	80185a4 <free>

0800cdd8 <__default_allocate>:
 800cdd8:	f00b bbdc 	b.w	8018594 <malloc>

0800cddc <rcutils_get_zero_initialized_allocator>:
 800cddc:	b510      	push	{r4, lr}
 800cdde:	4c05      	ldr	r4, [pc, #20]	@ (800cdf4 <rcutils_get_zero_initialized_allocator+0x18>)
 800cde0:	4686      	mov	lr, r0
 800cde2:	4684      	mov	ip, r0
 800cde4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cde6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdea:	6823      	ldr	r3, [r4, #0]
 800cdec:	f8cc 3000 	str.w	r3, [ip]
 800cdf0:	4670      	mov	r0, lr
 800cdf2:	bd10      	pop	{r4, pc}
 800cdf4:	0801a328 	.word	0x0801a328

0800cdf8 <rcutils_set_default_allocator>:
 800cdf8:	b1a8      	cbz	r0, 800ce26 <rcutils_set_default_allocator+0x2e>
 800cdfa:	6802      	ldr	r2, [r0, #0]
 800cdfc:	b1a2      	cbz	r2, 800ce28 <rcutils_set_default_allocator+0x30>
 800cdfe:	6841      	ldr	r1, [r0, #4]
 800ce00:	b1a1      	cbz	r1, 800ce2c <rcutils_set_default_allocator+0x34>
 800ce02:	b410      	push	{r4}
 800ce04:	68c4      	ldr	r4, [r0, #12]
 800ce06:	b164      	cbz	r4, 800ce22 <rcutils_set_default_allocator+0x2a>
 800ce08:	6880      	ldr	r0, [r0, #8]
 800ce0a:	b138      	cbz	r0, 800ce1c <rcutils_set_default_allocator+0x24>
 800ce0c:	4b08      	ldr	r3, [pc, #32]	@ (800ce30 <rcutils_set_default_allocator+0x38>)
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	2200      	movs	r2, #0
 800ce12:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ce16:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ce1a:	2001      	movs	r0, #1
 800ce1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce20:	4770      	bx	lr
 800ce22:	4620      	mov	r0, r4
 800ce24:	e7fa      	b.n	800ce1c <rcutils_set_default_allocator+0x24>
 800ce26:	4770      	bx	lr
 800ce28:	4610      	mov	r0, r2
 800ce2a:	4770      	bx	lr
 800ce2c:	4608      	mov	r0, r1
 800ce2e:	4770      	bx	lr
 800ce30:	200002f4 	.word	0x200002f4

0800ce34 <rcutils_get_default_allocator>:
 800ce34:	b510      	push	{r4, lr}
 800ce36:	4c05      	ldr	r4, [pc, #20]	@ (800ce4c <rcutils_get_default_allocator+0x18>)
 800ce38:	4686      	mov	lr, r0
 800ce3a:	4684      	mov	ip, r0
 800ce3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	f8cc 3000 	str.w	r3, [ip]
 800ce48:	4670      	mov	r0, lr
 800ce4a:	bd10      	pop	{r4, pc}
 800ce4c:	200002f4 	.word	0x200002f4

0800ce50 <rcutils_allocator_is_valid>:
 800ce50:	b158      	cbz	r0, 800ce6a <rcutils_allocator_is_valid+0x1a>
 800ce52:	6803      	ldr	r3, [r0, #0]
 800ce54:	b143      	cbz	r3, 800ce68 <rcutils_allocator_is_valid+0x18>
 800ce56:	6843      	ldr	r3, [r0, #4]
 800ce58:	b133      	cbz	r3, 800ce68 <rcutils_allocator_is_valid+0x18>
 800ce5a:	68c3      	ldr	r3, [r0, #12]
 800ce5c:	b123      	cbz	r3, 800ce68 <rcutils_allocator_is_valid+0x18>
 800ce5e:	6880      	ldr	r0, [r0, #8]
 800ce60:	3800      	subs	r0, #0
 800ce62:	bf18      	it	ne
 800ce64:	2001      	movne	r0, #1
 800ce66:	4770      	bx	lr
 800ce68:	4618      	mov	r0, r3
 800ce6a:	4770      	bx	lr

0800ce6c <rcutils_get_error_string>:
 800ce6c:	4b06      	ldr	r3, [pc, #24]	@ (800ce88 <rcutils_get_error_string+0x1c>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	b13b      	cbz	r3, 800ce82 <rcutils_get_error_string+0x16>
 800ce72:	4b06      	ldr	r3, [pc, #24]	@ (800ce8c <rcutils_get_error_string+0x20>)
 800ce74:	781a      	ldrb	r2, [r3, #0]
 800ce76:	b90a      	cbnz	r2, 800ce7c <rcutils_get_error_string+0x10>
 800ce78:	2201      	movs	r2, #1
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	4b04      	ldr	r3, [pc, #16]	@ (800ce90 <rcutils_get_error_string+0x24>)
 800ce7e:	7818      	ldrb	r0, [r3, #0]
 800ce80:	4770      	bx	lr
 800ce82:	4b04      	ldr	r3, [pc, #16]	@ (800ce94 <rcutils_get_error_string+0x28>)
 800ce84:	7818      	ldrb	r0, [r3, #0]
 800ce86:	4770      	bx	lr
 800ce88:	20009aa8 	.word	0x20009aa8
 800ce8c:	20009ac1 	.word	0x20009ac1
 800ce90:	20009ac0 	.word	0x20009ac0
 800ce94:	0801a33c 	.word	0x0801a33c

0800ce98 <rcutils_reset_error>:
 800ce98:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ceb8 <rcutils_reset_error+0x20>
 800ce9c:	4a08      	ldr	r2, [pc, #32]	@ (800cec0 <rcutils_reset_error+0x28>)
 800ce9e:	4809      	ldr	r0, [pc, #36]	@ (800cec4 <rcutils_reset_error+0x2c>)
 800cea0:	4909      	ldr	r1, [pc, #36]	@ (800cec8 <rcutils_reset_error+0x30>)
 800cea2:	2300      	movs	r3, #0
 800cea4:	8013      	strh	r3, [r2, #0]
 800cea6:	ed82 7b02 	vstr	d7, [r2, #8]
 800ceaa:	4a08      	ldr	r2, [pc, #32]	@ (800cecc <rcutils_reset_error+0x34>)
 800ceac:	7003      	strb	r3, [r0, #0]
 800ceae:	700b      	strb	r3, [r1, #0]
 800ceb0:	7013      	strb	r3, [r2, #0]
 800ceb2:	4770      	bx	lr
 800ceb4:	f3af 8000 	nop.w
	...
 800cec0:	20009ab0 	.word	0x20009ab0
 800cec4:	20009ac1 	.word	0x20009ac1
 800cec8:	20009ac0 	.word	0x20009ac0
 800cecc:	20009aa8 	.word	0x20009aa8

0800ced0 <rcutils_system_time_now>:
 800ced0:	b308      	cbz	r0, 800cf16 <rcutils_system_time_now+0x46>
 800ced2:	b570      	push	{r4, r5, r6, lr}
 800ced4:	b084      	sub	sp, #16
 800ced6:	4604      	mov	r4, r0
 800ced8:	4669      	mov	r1, sp
 800ceda:	2001      	movs	r0, #1
 800cedc:	f7f5 fb10 	bl	8002500 <clock_gettime>
 800cee0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cee4:	2d00      	cmp	r5, #0
 800cee6:	db13      	blt.n	800cf10 <rcutils_system_time_now+0x40>
 800cee8:	9902      	ldr	r1, [sp, #8]
 800ceea:	2900      	cmp	r1, #0
 800ceec:	db0d      	blt.n	800cf0a <rcutils_system_time_now+0x3a>
 800ceee:	4e0b      	ldr	r6, [pc, #44]	@ (800cf1c <rcutils_system_time_now+0x4c>)
 800cef0:	fba3 3206 	umull	r3, r2, r3, r6
 800cef4:	185b      	adds	r3, r3, r1
 800cef6:	fb06 2205 	mla	r2, r6, r5, r2
 800cefa:	f04f 0000 	mov.w	r0, #0
 800cefe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cf02:	e9c4 3200 	strd	r3, r2, [r4]
 800cf06:	b004      	add	sp, #16
 800cf08:	bd70      	pop	{r4, r5, r6, pc}
 800cf0a:	ea53 0205 	orrs.w	r2, r3, r5
 800cf0e:	d1ee      	bne.n	800ceee <rcutils_system_time_now+0x1e>
 800cf10:	2002      	movs	r0, #2
 800cf12:	b004      	add	sp, #16
 800cf14:	bd70      	pop	{r4, r5, r6, pc}
 800cf16:	200b      	movs	r0, #11
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	3b9aca00 	.word	0x3b9aca00

0800cf20 <rcutils_steady_time_now>:
 800cf20:	b308      	cbz	r0, 800cf66 <rcutils_steady_time_now+0x46>
 800cf22:	b570      	push	{r4, r5, r6, lr}
 800cf24:	b084      	sub	sp, #16
 800cf26:	4604      	mov	r4, r0
 800cf28:	4669      	mov	r1, sp
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	f7f5 fae8 	bl	8002500 <clock_gettime>
 800cf30:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cf34:	2d00      	cmp	r5, #0
 800cf36:	db13      	blt.n	800cf60 <rcutils_steady_time_now+0x40>
 800cf38:	9902      	ldr	r1, [sp, #8]
 800cf3a:	2900      	cmp	r1, #0
 800cf3c:	db0d      	blt.n	800cf5a <rcutils_steady_time_now+0x3a>
 800cf3e:	4e0b      	ldr	r6, [pc, #44]	@ (800cf6c <rcutils_steady_time_now+0x4c>)
 800cf40:	fba3 3206 	umull	r3, r2, r3, r6
 800cf44:	185b      	adds	r3, r3, r1
 800cf46:	fb06 2205 	mla	r2, r6, r5, r2
 800cf4a:	f04f 0000 	mov.w	r0, #0
 800cf4e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cf52:	e9c4 3200 	strd	r3, r2, [r4]
 800cf56:	b004      	add	sp, #16
 800cf58:	bd70      	pop	{r4, r5, r6, pc}
 800cf5a:	ea53 0205 	orrs.w	r2, r3, r5
 800cf5e:	d1ee      	bne.n	800cf3e <rcutils_steady_time_now+0x1e>
 800cf60:	2002      	movs	r0, #2
 800cf62:	b004      	add	sp, #16
 800cf64:	bd70      	pop	{r4, r5, r6, pc}
 800cf66:	200b      	movs	r0, #11
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	3b9aca00 	.word	0x3b9aca00

0800cf70 <rmw_get_default_publisher_options>:
 800cf70:	2200      	movs	r2, #0
 800cf72:	6002      	str	r2, [r0, #0]
 800cf74:	7102      	strb	r2, [r0, #4]
 800cf76:	4770      	bx	lr

0800cf78 <rmw_uros_set_custom_transport>:
 800cf78:	b470      	push	{r4, r5, r6}
 800cf7a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800cf7e:	b162      	cbz	r2, 800cf9a <rmw_uros_set_custom_transport+0x22>
 800cf80:	b15b      	cbz	r3, 800cf9a <rmw_uros_set_custom_transport+0x22>
 800cf82:	b155      	cbz	r5, 800cf9a <rmw_uros_set_custom_transport+0x22>
 800cf84:	b14e      	cbz	r6, 800cf9a <rmw_uros_set_custom_transport+0x22>
 800cf86:	4c06      	ldr	r4, [pc, #24]	@ (800cfa0 <rmw_uros_set_custom_transport+0x28>)
 800cf88:	7020      	strb	r0, [r4, #0]
 800cf8a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800cf8e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cf92:	6166      	str	r6, [r4, #20]
 800cf94:	2000      	movs	r0, #0
 800cf96:	bc70      	pop	{r4, r5, r6}
 800cf98:	4770      	bx	lr
 800cf9a:	200b      	movs	r0, #11
 800cf9c:	bc70      	pop	{r4, r5, r6}
 800cf9e:	4770      	bx	lr
 800cfa0:	20009ac4 	.word	0x20009ac4

0800cfa4 <flush_session>:
 800cfa4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800cfa6:	f002 bb67 	b.w	800f678 <uxr_run_session_until_confirm_delivery>
 800cfaa:	bf00      	nop

0800cfac <rmw_publish>:
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d053      	beq.n	800d058 <rmw_publish+0xac>
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	460d      	mov	r5, r1
 800cfb4:	b08e      	sub	sp, #56	@ 0x38
 800cfb6:	2900      	cmp	r1, #0
 800cfb8:	d04b      	beq.n	800d052 <rmw_publish+0xa6>
 800cfba:	4604      	mov	r4, r0
 800cfbc:	6800      	ldr	r0, [r0, #0]
 800cfbe:	f000 fced 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	d045      	beq.n	800d052 <rmw_publish+0xa6>
 800cfc6:	6866      	ldr	r6, [r4, #4]
 800cfc8:	2e00      	cmp	r6, #0
 800cfca:	d042      	beq.n	800d052 <rmw_publish+0xa6>
 800cfcc:	69b4      	ldr	r4, [r6, #24]
 800cfce:	4628      	mov	r0, r5
 800cfd0:	6923      	ldr	r3, [r4, #16]
 800cfd2:	4798      	blx	r3
 800cfd4:	69f3      	ldr	r3, [r6, #28]
 800cfd6:	9005      	str	r0, [sp, #20]
 800cfd8:	b113      	cbz	r3, 800cfe0 <rmw_publish+0x34>
 800cfda:	a805      	add	r0, sp, #20
 800cfdc:	4798      	blx	r3
 800cfde:	9805      	ldr	r0, [sp, #20]
 800cfe0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	9000      	str	r0, [sp, #0]
 800cfe8:	6972      	ldr	r2, [r6, #20]
 800cfea:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cfec:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cff0:	ab06      	add	r3, sp, #24
 800cff2:	f003 f92d 	bl	8010250 <uxr_prepare_output_stream>
 800cff6:	b1d8      	cbz	r0, 800d030 <rmw_publish+0x84>
 800cff8:	68a3      	ldr	r3, [r4, #8]
 800cffa:	a906      	add	r1, sp, #24
 800cffc:	4628      	mov	r0, r5
 800cffe:	4798      	blx	r3
 800d000:	6a33      	ldr	r3, [r6, #32]
 800d002:	4604      	mov	r4, r0
 800d004:	b10b      	cbz	r3, 800d00a <rmw_publish+0x5e>
 800d006:	a806      	add	r0, sp, #24
 800d008:	4798      	blx	r3
 800d00a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800d00e:	2b01      	cmp	r3, #1
 800d010:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d014:	d022      	beq.n	800d05c <rmw_publish+0xb0>
 800d016:	6918      	ldr	r0, [r3, #16]
 800d018:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800d01a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d01e:	f002 fb2b 	bl	800f678 <uxr_run_session_until_confirm_delivery>
 800d022:	4020      	ands	r0, r4
 800d024:	b2c4      	uxtb	r4, r0
 800d026:	f084 0001 	eor.w	r0, r4, #1
 800d02a:	b2c0      	uxtb	r0, r0
 800d02c:	b00e      	add	sp, #56	@ 0x38
 800d02e:	bd70      	pop	{r4, r5, r6, pc}
 800d030:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d034:	6918      	ldr	r0, [r3, #16]
 800d036:	9b05      	ldr	r3, [sp, #20]
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	4b0b      	ldr	r3, [pc, #44]	@ (800d068 <rmw_publish+0xbc>)
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	9602      	str	r6, [sp, #8]
 800d040:	6972      	ldr	r2, [r6, #20]
 800d042:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d044:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d048:	ab06      	add	r3, sp, #24
 800d04a:	f003 f931 	bl	80102b0 <uxr_prepare_output_stream_fragmented>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d1d2      	bne.n	800cff8 <rmw_publish+0x4c>
 800d052:	2001      	movs	r0, #1
 800d054:	b00e      	add	sp, #56	@ 0x38
 800d056:	bd70      	pop	{r4, r5, r6, pc}
 800d058:	2001      	movs	r0, #1
 800d05a:	4770      	bx	lr
 800d05c:	6918      	ldr	r0, [r3, #16]
 800d05e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d062:	f001 ff49 	bl	800eef8 <uxr_flash_output_streams>
 800d066:	e7de      	b.n	800d026 <rmw_publish+0x7a>
 800d068:	0800cfa5 	.word	0x0800cfa5

0800d06c <rmw_create_publisher>:
 800d06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d070:	b087      	sub	sp, #28
 800d072:	2800      	cmp	r0, #0
 800d074:	f000 80cc 	beq.w	800d210 <rmw_create_publisher+0x1a4>
 800d078:	460e      	mov	r6, r1
 800d07a:	2900      	cmp	r1, #0
 800d07c:	f000 80c8 	beq.w	800d210 <rmw_create_publisher+0x1a4>
 800d080:	4604      	mov	r4, r0
 800d082:	6800      	ldr	r0, [r0, #0]
 800d084:	4615      	mov	r5, r2
 800d086:	4698      	mov	r8, r3
 800d088:	f000 fc88 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	f000 80bf 	beq.w	800d210 <rmw_create_publisher+0x1a4>
 800d092:	2d00      	cmp	r5, #0
 800d094:	f000 80bc 	beq.w	800d210 <rmw_create_publisher+0x1a4>
 800d098:	782b      	ldrb	r3, [r5, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f000 80b8 	beq.w	800d210 <rmw_create_publisher+0x1a4>
 800d0a0:	f1b8 0f00 	cmp.w	r8, #0
 800d0a4:	f000 80b4 	beq.w	800d210 <rmw_create_publisher+0x1a4>
 800d0a8:	485c      	ldr	r0, [pc, #368]	@ (800d21c <rmw_create_publisher+0x1b0>)
 800d0aa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d0ae:	f007 fdaf 	bl	8014c10 <get_memory>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	f000 80ac 	beq.w	800d210 <rmw_create_publisher+0x1a4>
 800d0b8:	6884      	ldr	r4, [r0, #8]
 800d0ba:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800d0be:	f007 fe0f 	bl	8014ce0 <rmw_get_implementation_identifier>
 800d0c2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800d0c6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800d0ca:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	f7f3 f890 	bl	80001f4 <strlen>
 800d0d4:	3001      	adds	r0, #1
 800d0d6:	283c      	cmp	r0, #60	@ 0x3c
 800d0d8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800d0dc:	f200 8091 	bhi.w	800d202 <rmw_create_publisher+0x196>
 800d0e0:	4a4f      	ldr	r2, [pc, #316]	@ (800d220 <rmw_create_publisher+0x1b4>)
 800d0e2:	462b      	mov	r3, r5
 800d0e4:	213c      	movs	r1, #60	@ 0x3c
 800d0e6:	4650      	mov	r0, sl
 800d0e8:	f00b fdb8 	bl	8018c5c <sniprintf>
 800d0ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d0f0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800d0f2:	4641      	mov	r1, r8
 800d0f4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800d0f8:	2250      	movs	r2, #80	@ 0x50
 800d0fa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d0fe:	f00b ffe4 	bl	80190ca <memcpy>
 800d102:	f898 3008 	ldrb.w	r3, [r8, #8]
 800d106:	4947      	ldr	r1, [pc, #284]	@ (800d224 <rmw_create_publisher+0x1b8>)
 800d108:	2b02      	cmp	r3, #2
 800d10a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d10e:	bf0c      	ite	eq
 800d110:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800d114:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800d118:	67a3      	str	r3, [r4, #120]	@ 0x78
 800d11a:	2300      	movs	r3, #0
 800d11c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800d120:	4630      	mov	r0, r6
 800d122:	f000 fc49 	bl	800d9b8 <get_message_typesupport_handle>
 800d126:	2800      	cmp	r0, #0
 800d128:	d06b      	beq.n	800d202 <rmw_create_publisher+0x196>
 800d12a:	6842      	ldr	r2, [r0, #4]
 800d12c:	61a2      	str	r2, [r4, #24]
 800d12e:	2a00      	cmp	r2, #0
 800d130:	d067      	beq.n	800d202 <rmw_create_publisher+0x196>
 800d132:	4629      	mov	r1, r5
 800d134:	4643      	mov	r3, r8
 800d136:	4648      	mov	r0, r9
 800d138:	f008 f838 	bl	80151ac <create_topic>
 800d13c:	6260      	str	r0, [r4, #36]	@ 0x24
 800d13e:	2800      	cmp	r0, #0
 800d140:	d063      	beq.n	800d20a <rmw_create_publisher+0x19e>
 800d142:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d14a:	2103      	movs	r1, #3
 800d14c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800d150:	1c42      	adds	r2, r0, #1
 800d152:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800d156:	f001 fd81 	bl	800ec5c <uxr_object_id>
 800d15a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d15e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d162:	6120      	str	r0, [r4, #16]
 800d164:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800d168:	6910      	ldr	r0, [r2, #16]
 800d16a:	2506      	movs	r5, #6
 800d16c:	9500      	str	r5, [sp, #0]
 800d16e:	6819      	ldr	r1, [r3, #0]
 800d170:	6922      	ldr	r2, [r4, #16]
 800d172:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d176:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d17a:	f001 fc21 	bl	800e9c0 <uxr_buffer_create_publisher_bin>
 800d17e:	4602      	mov	r2, r0
 800d180:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d184:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d188:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d18c:	f000 fb86 	bl	800d89c <run_xrce_session>
 800d190:	b3b8      	cbz	r0, 800d202 <rmw_create_publisher+0x196>
 800d192:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d19a:	2105      	movs	r1, #5
 800d19c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800d1a0:	1c42      	adds	r2, r0, #1
 800d1a2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800d1a6:	f001 fd59 	bl	800ec5c <uxr_object_id>
 800d1aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d1ae:	6160      	str	r0, [r4, #20]
 800d1b0:	691e      	ldr	r6, [r3, #16]
 800d1b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d1b6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800d1ba:	f10d 0a10 	add.w	sl, sp, #16
 800d1be:	4641      	mov	r1, r8
 800d1c0:	4650      	mov	r0, sl
 800d1c2:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800d1c6:	f000 fb85 	bl	800d8d4 <convert_qos_profile>
 800d1ca:	9503      	str	r5, [sp, #12]
 800d1cc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800d1d0:	9001      	str	r0, [sp, #4]
 800d1d2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d1d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d1da:	9300      	str	r3, [sp, #0]
 800d1dc:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800d1e0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d1e4:	f8d8 1000 	ldr.w	r1, [r8]
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f001 fc49 	bl	800ea80 <uxr_buffer_create_datawriter_bin>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d1f4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d1f8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d1fc:	f000 fb4e 	bl	800d89c <run_xrce_session>
 800d200:	b938      	cbnz	r0, 800d212 <rmw_create_publisher+0x1a6>
 800d202:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d204:	b108      	cbz	r0, 800d20a <rmw_create_publisher+0x19e>
 800d206:	f000 fa47 	bl	800d698 <rmw_uxrce_fini_topic_memory>
 800d20a:	4638      	mov	r0, r7
 800d20c:	f000 f9ec 	bl	800d5e8 <rmw_uxrce_fini_publisher_memory>
 800d210:	2700      	movs	r7, #0
 800d212:	4638      	mov	r0, r7
 800d214:	b007      	add	sp, #28
 800d216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d21a:	bf00      	nop
 800d21c:	2000e3bc 	.word	0x2000e3bc
 800d220:	0801a350 	.word	0x0801a350
 800d224:	08019f90 	.word	0x08019f90

0800d228 <rmw_publisher_get_actual_qos>:
 800d228:	b150      	cbz	r0, 800d240 <rmw_publisher_get_actual_qos+0x18>
 800d22a:	b508      	push	{r3, lr}
 800d22c:	460b      	mov	r3, r1
 800d22e:	b149      	cbz	r1, 800d244 <rmw_publisher_get_actual_qos+0x1c>
 800d230:	6841      	ldr	r1, [r0, #4]
 800d232:	2250      	movs	r2, #80	@ 0x50
 800d234:	3128      	adds	r1, #40	@ 0x28
 800d236:	4618      	mov	r0, r3
 800d238:	f00b ff47 	bl	80190ca <memcpy>
 800d23c:	2000      	movs	r0, #0
 800d23e:	bd08      	pop	{r3, pc}
 800d240:	200b      	movs	r0, #11
 800d242:	4770      	bx	lr
 800d244:	200b      	movs	r0, #11
 800d246:	bd08      	pop	{r3, pc}

0800d248 <rmw_destroy_publisher>:
 800d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24a:	b128      	cbz	r0, 800d258 <rmw_destroy_publisher+0x10>
 800d24c:	4604      	mov	r4, r0
 800d24e:	6800      	ldr	r0, [r0, #0]
 800d250:	460d      	mov	r5, r1
 800d252:	f000 fba3 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 800d256:	b910      	cbnz	r0, 800d25e <rmw_destroy_publisher+0x16>
 800d258:	2401      	movs	r4, #1
 800d25a:	4620      	mov	r0, r4
 800d25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d25e:	6863      	ldr	r3, [r4, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d0f9      	beq.n	800d258 <rmw_destroy_publisher+0x10>
 800d264:	2d00      	cmp	r5, #0
 800d266:	d0f7      	beq.n	800d258 <rmw_destroy_publisher+0x10>
 800d268:	6828      	ldr	r0, [r5, #0]
 800d26a:	f000 fb97 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d0f2      	beq.n	800d258 <rmw_destroy_publisher+0x10>
 800d272:	686c      	ldr	r4, [r5, #4]
 800d274:	2c00      	cmp	r4, #0
 800d276:	d0ef      	beq.n	800d258 <rmw_destroy_publisher+0x10>
 800d278:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d27a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800d27e:	f007 ffe5 	bl	801524c <destroy_topic>
 800d282:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d286:	6962      	ldr	r2, [r4, #20]
 800d288:	6918      	ldr	r0, [r3, #16]
 800d28a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d28e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d292:	6819      	ldr	r1, [r3, #0]
 800d294:	f001 fae0 	bl	800e858 <uxr_buffer_delete_entity>
 800d298:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d29c:	6922      	ldr	r2, [r4, #16]
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800d2a4:	4604      	mov	r4, r0
 800d2a6:	6809      	ldr	r1, [r1, #0]
 800d2a8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d2ac:	f001 fad4 	bl	800e858 <uxr_buffer_delete_entity>
 800d2b0:	693e      	ldr	r6, [r7, #16]
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d2b8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d2bc:	4604      	mov	r4, r0
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f000 faec 	bl	800d89c <run_xrce_session>
 800d2c4:	693e      	ldr	r6, [r7, #16]
 800d2c6:	4622      	mov	r2, r4
 800d2c8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d2cc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	f000 fae2 	bl	800d89c <run_xrce_session>
 800d2d8:	b12c      	cbz	r4, 800d2e6 <rmw_destroy_publisher+0x9e>
 800d2da:	b120      	cbz	r0, 800d2e6 <rmw_destroy_publisher+0x9e>
 800d2dc:	2400      	movs	r4, #0
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f000 f982 	bl	800d5e8 <rmw_uxrce_fini_publisher_memory>
 800d2e4:	e7b9      	b.n	800d25a <rmw_destroy_publisher+0x12>
 800d2e6:	2402      	movs	r4, #2
 800d2e8:	e7f9      	b.n	800d2de <rmw_destroy_publisher+0x96>
 800d2ea:	bf00      	nop

0800d2ec <rmw_uxrce_init_service_memory>:
 800d2ec:	b1e2      	cbz	r2, 800d328 <rmw_uxrce_init_service_memory+0x3c>
 800d2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f2:	7b05      	ldrb	r5, [r0, #12]
 800d2f4:	4606      	mov	r6, r0
 800d2f6:	b9ad      	cbnz	r5, 800d324 <rmw_uxrce_init_service_memory+0x38>
 800d2f8:	23c8      	movs	r3, #200	@ 0xc8
 800d2fa:	e9c0 5500 	strd	r5, r5, [r0]
 800d2fe:	6083      	str	r3, [r0, #8]
 800d300:	f240 1301 	movw	r3, #257	@ 0x101
 800d304:	4617      	mov	r7, r2
 800d306:	8183      	strh	r3, [r0, #12]
 800d308:	460c      	mov	r4, r1
 800d30a:	46a8      	mov	r8, r5
 800d30c:	4621      	mov	r1, r4
 800d30e:	4630      	mov	r0, r6
 800d310:	3501      	adds	r5, #1
 800d312:	f007 fc8d 	bl	8014c30 <put_memory>
 800d316:	42af      	cmp	r7, r5
 800d318:	60a4      	str	r4, [r4, #8]
 800d31a:	f884 800c 	strb.w	r8, [r4, #12]
 800d31e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d322:	d1f3      	bne.n	800d30c <rmw_uxrce_init_service_memory+0x20>
 800d324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop

0800d32c <rmw_uxrce_init_client_memory>:
 800d32c:	b1e2      	cbz	r2, 800d368 <rmw_uxrce_init_client_memory+0x3c>
 800d32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d332:	7b05      	ldrb	r5, [r0, #12]
 800d334:	4606      	mov	r6, r0
 800d336:	b9ad      	cbnz	r5, 800d364 <rmw_uxrce_init_client_memory+0x38>
 800d338:	23c8      	movs	r3, #200	@ 0xc8
 800d33a:	e9c0 5500 	strd	r5, r5, [r0]
 800d33e:	6083      	str	r3, [r0, #8]
 800d340:	f240 1301 	movw	r3, #257	@ 0x101
 800d344:	4617      	mov	r7, r2
 800d346:	8183      	strh	r3, [r0, #12]
 800d348:	460c      	mov	r4, r1
 800d34a:	46a8      	mov	r8, r5
 800d34c:	4621      	mov	r1, r4
 800d34e:	4630      	mov	r0, r6
 800d350:	3501      	adds	r5, #1
 800d352:	f007 fc6d 	bl	8014c30 <put_memory>
 800d356:	42af      	cmp	r7, r5
 800d358:	60a4      	str	r4, [r4, #8]
 800d35a:	f884 800c 	strb.w	r8, [r4, #12]
 800d35e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d362:	d1f3      	bne.n	800d34c <rmw_uxrce_init_client_memory+0x20>
 800d364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop

0800d36c <rmw_uxrce_init_publisher_memory>:
 800d36c:	b1e2      	cbz	r2, 800d3a8 <rmw_uxrce_init_publisher_memory+0x3c>
 800d36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d372:	7b05      	ldrb	r5, [r0, #12]
 800d374:	4606      	mov	r6, r0
 800d376:	b9ad      	cbnz	r5, 800d3a4 <rmw_uxrce_init_publisher_memory+0x38>
 800d378:	23d8      	movs	r3, #216	@ 0xd8
 800d37a:	e9c0 5500 	strd	r5, r5, [r0]
 800d37e:	6083      	str	r3, [r0, #8]
 800d380:	f240 1301 	movw	r3, #257	@ 0x101
 800d384:	4617      	mov	r7, r2
 800d386:	8183      	strh	r3, [r0, #12]
 800d388:	460c      	mov	r4, r1
 800d38a:	46a8      	mov	r8, r5
 800d38c:	4621      	mov	r1, r4
 800d38e:	4630      	mov	r0, r6
 800d390:	3501      	adds	r5, #1
 800d392:	f007 fc4d 	bl	8014c30 <put_memory>
 800d396:	42af      	cmp	r7, r5
 800d398:	60a4      	str	r4, [r4, #8]
 800d39a:	f884 800c 	strb.w	r8, [r4, #12]
 800d39e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d3a2:	d1f3      	bne.n	800d38c <rmw_uxrce_init_publisher_memory+0x20>
 800d3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop

0800d3ac <rmw_uxrce_init_subscription_memory>:
 800d3ac:	b1e2      	cbz	r2, 800d3e8 <rmw_uxrce_init_subscription_memory+0x3c>
 800d3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b2:	7b05      	ldrb	r5, [r0, #12]
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	b9ad      	cbnz	r5, 800d3e4 <rmw_uxrce_init_subscription_memory+0x38>
 800d3b8:	23d8      	movs	r3, #216	@ 0xd8
 800d3ba:	e9c0 5500 	strd	r5, r5, [r0]
 800d3be:	6083      	str	r3, [r0, #8]
 800d3c0:	f240 1301 	movw	r3, #257	@ 0x101
 800d3c4:	4617      	mov	r7, r2
 800d3c6:	8183      	strh	r3, [r0, #12]
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	46a8      	mov	r8, r5
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	3501      	adds	r5, #1
 800d3d2:	f007 fc2d 	bl	8014c30 <put_memory>
 800d3d6:	42af      	cmp	r7, r5
 800d3d8:	60a4      	str	r4, [r4, #8]
 800d3da:	f884 800c 	strb.w	r8, [r4, #12]
 800d3de:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d3e2:	d1f3      	bne.n	800d3cc <rmw_uxrce_init_subscription_memory+0x20>
 800d3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop

0800d3ec <rmw_uxrce_init_node_memory>:
 800d3ec:	b1e2      	cbz	r2, 800d428 <rmw_uxrce_init_node_memory+0x3c>
 800d3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f2:	7b05      	ldrb	r5, [r0, #12]
 800d3f4:	4606      	mov	r6, r0
 800d3f6:	b9ad      	cbnz	r5, 800d424 <rmw_uxrce_init_node_memory+0x38>
 800d3f8:	23a4      	movs	r3, #164	@ 0xa4
 800d3fa:	e9c0 5500 	strd	r5, r5, [r0]
 800d3fe:	6083      	str	r3, [r0, #8]
 800d400:	f240 1301 	movw	r3, #257	@ 0x101
 800d404:	4617      	mov	r7, r2
 800d406:	8183      	strh	r3, [r0, #12]
 800d408:	460c      	mov	r4, r1
 800d40a:	46a8      	mov	r8, r5
 800d40c:	4621      	mov	r1, r4
 800d40e:	4630      	mov	r0, r6
 800d410:	3501      	adds	r5, #1
 800d412:	f007 fc0d 	bl	8014c30 <put_memory>
 800d416:	42af      	cmp	r7, r5
 800d418:	60a4      	str	r4, [r4, #8]
 800d41a:	f884 800c 	strb.w	r8, [r4, #12]
 800d41e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800d422:	d1f3      	bne.n	800d40c <rmw_uxrce_init_node_memory+0x20>
 800d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop

0800d42c <rmw_uxrce_init_session_memory>:
 800d42c:	b1ea      	cbz	r2, 800d46a <rmw_uxrce_init_session_memory+0x3e>
 800d42e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d432:	7b05      	ldrb	r5, [r0, #12]
 800d434:	4606      	mov	r6, r0
 800d436:	b9b5      	cbnz	r5, 800d466 <rmw_uxrce_init_session_memory+0x3a>
 800d438:	e9c0 5500 	strd	r5, r5, [r0]
 800d43c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d440:	f240 1301 	movw	r3, #257	@ 0x101
 800d444:	4617      	mov	r7, r2
 800d446:	f8c0 8008 	str.w	r8, [r0, #8]
 800d44a:	460c      	mov	r4, r1
 800d44c:	8183      	strh	r3, [r0, #12]
 800d44e:	46a9      	mov	r9, r5
 800d450:	4621      	mov	r1, r4
 800d452:	4630      	mov	r0, r6
 800d454:	3501      	adds	r5, #1
 800d456:	f007 fbeb 	bl	8014c30 <put_memory>
 800d45a:	42af      	cmp	r7, r5
 800d45c:	60a4      	str	r4, [r4, #8]
 800d45e:	f884 900c 	strb.w	r9, [r4, #12]
 800d462:	4444      	add	r4, r8
 800d464:	d1f4      	bne.n	800d450 <rmw_uxrce_init_session_memory+0x24>
 800d466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46a:	4770      	bx	lr

0800d46c <rmw_uxrce_init_topic_memory>:
 800d46c:	b1e2      	cbz	r2, 800d4a8 <rmw_uxrce_init_topic_memory+0x3c>
 800d46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d472:	7b05      	ldrb	r5, [r0, #12]
 800d474:	4606      	mov	r6, r0
 800d476:	b9ad      	cbnz	r5, 800d4a4 <rmw_uxrce_init_topic_memory+0x38>
 800d478:	231c      	movs	r3, #28
 800d47a:	e9c0 5500 	strd	r5, r5, [r0]
 800d47e:	6083      	str	r3, [r0, #8]
 800d480:	f240 1301 	movw	r3, #257	@ 0x101
 800d484:	4617      	mov	r7, r2
 800d486:	8183      	strh	r3, [r0, #12]
 800d488:	460c      	mov	r4, r1
 800d48a:	46a8      	mov	r8, r5
 800d48c:	4621      	mov	r1, r4
 800d48e:	4630      	mov	r0, r6
 800d490:	3501      	adds	r5, #1
 800d492:	f007 fbcd 	bl	8014c30 <put_memory>
 800d496:	42af      	cmp	r7, r5
 800d498:	60a4      	str	r4, [r4, #8]
 800d49a:	f884 800c 	strb.w	r8, [r4, #12]
 800d49e:	f104 041c 	add.w	r4, r4, #28
 800d4a2:	d1f3      	bne.n	800d48c <rmw_uxrce_init_topic_memory+0x20>
 800d4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop

0800d4ac <rmw_uxrce_init_static_input_buffer_memory>:
 800d4ac:	b1ea      	cbz	r2, 800d4ea <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b2:	7b05      	ldrb	r5, [r0, #12]
 800d4b4:	4606      	mov	r6, r0
 800d4b6:	b9b5      	cbnz	r5, 800d4e6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d4b8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d4bc:	e9c0 5500 	strd	r5, r5, [r0]
 800d4c0:	6083      	str	r3, [r0, #8]
 800d4c2:	f240 1301 	movw	r3, #257	@ 0x101
 800d4c6:	4617      	mov	r7, r2
 800d4c8:	8183      	strh	r3, [r0, #12]
 800d4ca:	460c      	mov	r4, r1
 800d4cc:	46a8      	mov	r8, r5
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	3501      	adds	r5, #1
 800d4d4:	f007 fbac 	bl	8014c30 <put_memory>
 800d4d8:	42af      	cmp	r7, r5
 800d4da:	60a4      	str	r4, [r4, #8]
 800d4dc:	f884 800c 	strb.w	r8, [r4, #12]
 800d4e0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d4e4:	d1f3      	bne.n	800d4ce <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ea:	4770      	bx	lr

0800d4ec <rmw_uxrce_init_init_options_impl_memory>:
 800d4ec:	b1e2      	cbz	r2, 800d528 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f2:	7b05      	ldrb	r5, [r0, #12]
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	b9ad      	cbnz	r5, 800d524 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d4f8:	232c      	movs	r3, #44	@ 0x2c
 800d4fa:	e9c0 5500 	strd	r5, r5, [r0]
 800d4fe:	6083      	str	r3, [r0, #8]
 800d500:	f240 1301 	movw	r3, #257	@ 0x101
 800d504:	4617      	mov	r7, r2
 800d506:	8183      	strh	r3, [r0, #12]
 800d508:	460c      	mov	r4, r1
 800d50a:	46a8      	mov	r8, r5
 800d50c:	4621      	mov	r1, r4
 800d50e:	4630      	mov	r0, r6
 800d510:	3501      	adds	r5, #1
 800d512:	f007 fb8d 	bl	8014c30 <put_memory>
 800d516:	42af      	cmp	r7, r5
 800d518:	60a4      	str	r4, [r4, #8]
 800d51a:	f884 800c 	strb.w	r8, [r4, #12]
 800d51e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d522:	d1f3      	bne.n	800d50c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop

0800d52c <rmw_uxrce_init_wait_set_memory>:
 800d52c:	b1e2      	cbz	r2, 800d568 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d532:	7b05      	ldrb	r5, [r0, #12]
 800d534:	4606      	mov	r6, r0
 800d536:	b9ad      	cbnz	r5, 800d564 <rmw_uxrce_init_wait_set_memory+0x38>
 800d538:	231c      	movs	r3, #28
 800d53a:	e9c0 5500 	strd	r5, r5, [r0]
 800d53e:	6083      	str	r3, [r0, #8]
 800d540:	f240 1301 	movw	r3, #257	@ 0x101
 800d544:	4617      	mov	r7, r2
 800d546:	8183      	strh	r3, [r0, #12]
 800d548:	460c      	mov	r4, r1
 800d54a:	46a8      	mov	r8, r5
 800d54c:	4621      	mov	r1, r4
 800d54e:	4630      	mov	r0, r6
 800d550:	3501      	adds	r5, #1
 800d552:	f007 fb6d 	bl	8014c30 <put_memory>
 800d556:	42af      	cmp	r7, r5
 800d558:	60a4      	str	r4, [r4, #8]
 800d55a:	f884 800c 	strb.w	r8, [r4, #12]
 800d55e:	f104 041c 	add.w	r4, r4, #28
 800d562:	d1f3      	bne.n	800d54c <rmw_uxrce_init_wait_set_memory+0x20>
 800d564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop

0800d56c <rmw_uxrce_init_guard_condition_memory>:
 800d56c:	b1e2      	cbz	r2, 800d5a8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d572:	7b05      	ldrb	r5, [r0, #12]
 800d574:	4606      	mov	r6, r0
 800d576:	b9ad      	cbnz	r5, 800d5a4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800d578:	2320      	movs	r3, #32
 800d57a:	e9c0 5500 	strd	r5, r5, [r0]
 800d57e:	6083      	str	r3, [r0, #8]
 800d580:	f240 1301 	movw	r3, #257	@ 0x101
 800d584:	4617      	mov	r7, r2
 800d586:	8183      	strh	r3, [r0, #12]
 800d588:	460c      	mov	r4, r1
 800d58a:	46a8      	mov	r8, r5
 800d58c:	4621      	mov	r1, r4
 800d58e:	4630      	mov	r0, r6
 800d590:	3501      	adds	r5, #1
 800d592:	f007 fb4d 	bl	8014c30 <put_memory>
 800d596:	42af      	cmp	r7, r5
 800d598:	60a4      	str	r4, [r4, #8]
 800d59a:	f884 800c 	strb.w	r8, [r4, #12]
 800d59e:	f104 0420 	add.w	r4, r4, #32
 800d5a2:	d1f3      	bne.n	800d58c <rmw_uxrce_init_guard_condition_memory+0x20>
 800d5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop

0800d5ac <rmw_uxrce_fini_session_memory>:
 800d5ac:	4601      	mov	r1, r0
 800d5ae:	4801      	ldr	r0, [pc, #4]	@ (800d5b4 <rmw_uxrce_fini_session_memory+0x8>)
 800d5b0:	f007 bb3e 	b.w	8014c30 <put_memory>
 800d5b4:	2000e3dc 	.word	0x2000e3dc

0800d5b8 <rmw_uxrce_fini_node_memory>:
 800d5b8:	b538      	push	{r3, r4, r5, lr}
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	6800      	ldr	r0, [r0, #0]
 800d5be:	b128      	cbz	r0, 800d5cc <rmw_uxrce_fini_node_memory+0x14>
 800d5c0:	4b07      	ldr	r3, [pc, #28]	@ (800d5e0 <rmw_uxrce_fini_node_memory+0x28>)
 800d5c2:	6819      	ldr	r1, [r3, #0]
 800d5c4:	f7f2 fe0c 	bl	80001e0 <strcmp>
 800d5c8:	b940      	cbnz	r0, 800d5dc <rmw_uxrce_fini_node_memory+0x24>
 800d5ca:	6020      	str	r0, [r4, #0]
 800d5cc:	6861      	ldr	r1, [r4, #4]
 800d5ce:	b129      	cbz	r1, 800d5dc <rmw_uxrce_fini_node_memory+0x24>
 800d5d0:	2500      	movs	r5, #0
 800d5d2:	4804      	ldr	r0, [pc, #16]	@ (800d5e4 <rmw_uxrce_fini_node_memory+0x2c>)
 800d5d4:	610d      	str	r5, [r1, #16]
 800d5d6:	f007 fb2b 	bl	8014c30 <put_memory>
 800d5da:	6065      	str	r5, [r4, #4]
 800d5dc:	bd38      	pop	{r3, r4, r5, pc}
 800d5de:	bf00      	nop
 800d5e0:	0801ac34 	.word	0x0801ac34
 800d5e4:	2000e3ac 	.word	0x2000e3ac

0800d5e8 <rmw_uxrce_fini_publisher_memory>:
 800d5e8:	b510      	push	{r4, lr}
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	6800      	ldr	r0, [r0, #0]
 800d5ee:	b128      	cbz	r0, 800d5fc <rmw_uxrce_fini_publisher_memory+0x14>
 800d5f0:	4b06      	ldr	r3, [pc, #24]	@ (800d60c <rmw_uxrce_fini_publisher_memory+0x24>)
 800d5f2:	6819      	ldr	r1, [r3, #0]
 800d5f4:	f7f2 fdf4 	bl	80001e0 <strcmp>
 800d5f8:	b938      	cbnz	r0, 800d60a <rmw_uxrce_fini_publisher_memory+0x22>
 800d5fa:	6020      	str	r0, [r4, #0]
 800d5fc:	6861      	ldr	r1, [r4, #4]
 800d5fe:	b121      	cbz	r1, 800d60a <rmw_uxrce_fini_publisher_memory+0x22>
 800d600:	4803      	ldr	r0, [pc, #12]	@ (800d610 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d602:	f007 fb15 	bl	8014c30 <put_memory>
 800d606:	2300      	movs	r3, #0
 800d608:	6063      	str	r3, [r4, #4]
 800d60a:	bd10      	pop	{r4, pc}
 800d60c:	0801ac34 	.word	0x0801ac34
 800d610:	2000e3bc 	.word	0x2000e3bc

0800d614 <rmw_uxrce_fini_subscription_memory>:
 800d614:	b510      	push	{r4, lr}
 800d616:	4604      	mov	r4, r0
 800d618:	6800      	ldr	r0, [r0, #0]
 800d61a:	b128      	cbz	r0, 800d628 <rmw_uxrce_fini_subscription_memory+0x14>
 800d61c:	4b06      	ldr	r3, [pc, #24]	@ (800d638 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d61e:	6819      	ldr	r1, [r3, #0]
 800d620:	f7f2 fdde 	bl	80001e0 <strcmp>
 800d624:	b938      	cbnz	r0, 800d636 <rmw_uxrce_fini_subscription_memory+0x22>
 800d626:	6020      	str	r0, [r4, #0]
 800d628:	6861      	ldr	r1, [r4, #4]
 800d62a:	b121      	cbz	r1, 800d636 <rmw_uxrce_fini_subscription_memory+0x22>
 800d62c:	4803      	ldr	r0, [pc, #12]	@ (800d63c <rmw_uxrce_fini_subscription_memory+0x28>)
 800d62e:	f007 faff 	bl	8014c30 <put_memory>
 800d632:	2300      	movs	r3, #0
 800d634:	6063      	str	r3, [r4, #4]
 800d636:	bd10      	pop	{r4, pc}
 800d638:	0801ac34 	.word	0x0801ac34
 800d63c:	2000e3fc 	.word	0x2000e3fc

0800d640 <rmw_uxrce_fini_service_memory>:
 800d640:	b510      	push	{r4, lr}
 800d642:	4604      	mov	r4, r0
 800d644:	6800      	ldr	r0, [r0, #0]
 800d646:	b128      	cbz	r0, 800d654 <rmw_uxrce_fini_service_memory+0x14>
 800d648:	4b06      	ldr	r3, [pc, #24]	@ (800d664 <rmw_uxrce_fini_service_memory+0x24>)
 800d64a:	6819      	ldr	r1, [r3, #0]
 800d64c:	f7f2 fdc8 	bl	80001e0 <strcmp>
 800d650:	b938      	cbnz	r0, 800d662 <rmw_uxrce_fini_service_memory+0x22>
 800d652:	6020      	str	r0, [r4, #0]
 800d654:	6861      	ldr	r1, [r4, #4]
 800d656:	b121      	cbz	r1, 800d662 <rmw_uxrce_fini_service_memory+0x22>
 800d658:	4803      	ldr	r0, [pc, #12]	@ (800d668 <rmw_uxrce_fini_service_memory+0x28>)
 800d65a:	f007 fae9 	bl	8014c30 <put_memory>
 800d65e:	2300      	movs	r3, #0
 800d660:	6063      	str	r3, [r4, #4]
 800d662:	bd10      	pop	{r4, pc}
 800d664:	0801ac34 	.word	0x0801ac34
 800d668:	2000e3cc 	.word	0x2000e3cc

0800d66c <rmw_uxrce_fini_client_memory>:
 800d66c:	b510      	push	{r4, lr}
 800d66e:	4604      	mov	r4, r0
 800d670:	6800      	ldr	r0, [r0, #0]
 800d672:	b128      	cbz	r0, 800d680 <rmw_uxrce_fini_client_memory+0x14>
 800d674:	4b06      	ldr	r3, [pc, #24]	@ (800d690 <rmw_uxrce_fini_client_memory+0x24>)
 800d676:	6819      	ldr	r1, [r3, #0]
 800d678:	f7f2 fdb2 	bl	80001e0 <strcmp>
 800d67c:	b938      	cbnz	r0, 800d68e <rmw_uxrce_fini_client_memory+0x22>
 800d67e:	6020      	str	r0, [r4, #0]
 800d680:	6861      	ldr	r1, [r4, #4]
 800d682:	b121      	cbz	r1, 800d68e <rmw_uxrce_fini_client_memory+0x22>
 800d684:	4803      	ldr	r0, [pc, #12]	@ (800d694 <rmw_uxrce_fini_client_memory+0x28>)
 800d686:	f007 fad3 	bl	8014c30 <put_memory>
 800d68a:	2300      	movs	r3, #0
 800d68c:	6063      	str	r3, [r4, #4]
 800d68e:	bd10      	pop	{r4, pc}
 800d690:	0801ac34 	.word	0x0801ac34
 800d694:	20009ae0 	.word	0x20009ae0

0800d698 <rmw_uxrce_fini_topic_memory>:
 800d698:	b510      	push	{r4, lr}
 800d69a:	4604      	mov	r4, r0
 800d69c:	4621      	mov	r1, r4
 800d69e:	4803      	ldr	r0, [pc, #12]	@ (800d6ac <rmw_uxrce_fini_topic_memory+0x14>)
 800d6a0:	f007 fac6 	bl	8014c30 <put_memory>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	61a3      	str	r3, [r4, #24]
 800d6a8:	bd10      	pop	{r4, pc}
 800d6aa:	bf00      	nop
 800d6ac:	2000e40c 	.word	0x2000e40c

0800d6b0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	b530      	push	{r4, r5, lr}
 800d6b4:	4925      	ldr	r1, [pc, #148]	@ (800d74c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d6b6:	680d      	ldr	r5, [r1, #0]
 800d6b8:	ac03      	add	r4, sp, #12
 800d6ba:	e884 000c 	stmia.w	r4, {r2, r3}
 800d6be:	461c      	mov	r4, r3
 800d6c0:	2d00      	cmp	r5, #0
 800d6c2:	d041      	beq.n	800d748 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800d6c4:	462b      	mov	r3, r5
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	689a      	ldr	r2, [r3, #8]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800d6d0:	4290      	cmp	r0, r2
 800d6d2:	bf08      	it	eq
 800d6d4:	3101      	addeq	r1, #1
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1f6      	bne.n	800d6c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d6da:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d029      	beq.n	800d736 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d6e2:	d907      	bls.n	800d6f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d6e4:	2b03      	cmp	r3, #3
 800d6e6:	d005      	beq.n	800d6f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6ee:	4608      	mov	r0, r1
 800d6f0:	b002      	add	sp, #8
 800d6f2:	4770      	bx	lr
 800d6f4:	b314      	cbz	r4, 800d73c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d6f6:	428c      	cmp	r4, r1
 800d6f8:	d820      	bhi.n	800d73c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d6fa:	2d00      	cmp	r5, #0
 800d6fc:	d0f4      	beq.n	800d6e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d6fe:	2100      	movs	r1, #0
 800d700:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800d704:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800d708:	e002      	b.n	800d710 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800d70a:	686d      	ldr	r5, [r5, #4]
 800d70c:	2d00      	cmp	r5, #0
 800d70e:	d0ec      	beq.n	800d6ea <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d710:	68ab      	ldr	r3, [r5, #8]
 800d712:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800d716:	4290      	cmp	r0, r2
 800d718:	d1f7      	bne.n	800d70a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d71a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800d71e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800d722:	4562      	cmp	r2, ip
 800d724:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d728:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d72c:	daed      	bge.n	800d70a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d72e:	4694      	mov	ip, r2
 800d730:	461c      	mov	r4, r3
 800d732:	4629      	mov	r1, r5
 800d734:	e7e9      	b.n	800d70a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d736:	b10c      	cbz	r4, 800d73c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d738:	428c      	cmp	r4, r1
 800d73a:	d9d5      	bls.n	800d6e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d740:	4802      	ldr	r0, [pc, #8]	@ (800d74c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d742:	b002      	add	sp, #8
 800d744:	f007 ba64 	b.w	8014c10 <get_memory>
 800d748:	4629      	mov	r1, r5
 800d74a:	e7c6      	b.n	800d6da <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d74c:	2000e3ec 	.word	0x2000e3ec

0800d750 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d750:	4b11      	ldr	r3, [pc, #68]	@ (800d798 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	b530      	push	{r4, r5, lr}
 800d756:	b1e3      	cbz	r3, 800d792 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800d758:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800d75c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800d760:	2400      	movs	r4, #0
 800d762:	e001      	b.n	800d768 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	b193      	cbz	r3, 800d78e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800d768:	689a      	ldr	r2, [r3, #8]
 800d76a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800d76e:	4288      	cmp	r0, r1
 800d770:	d1f8      	bne.n	800d764 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d772:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800d776:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800d77a:	4571      	cmp	r1, lr
 800d77c:	eb72 050c 	sbcs.w	r5, r2, ip
 800d780:	daf0      	bge.n	800d764 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d782:	461c      	mov	r4, r3
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	468e      	mov	lr, r1
 800d788:	4694      	mov	ip, r2
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1ec      	bne.n	800d768 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d78e:	4620      	mov	r0, r4
 800d790:	bd30      	pop	{r4, r5, pc}
 800d792:	461c      	mov	r4, r3
 800d794:	4620      	mov	r0, r4
 800d796:	bd30      	pop	{r4, r5, pc}
 800d798:	2000e3ec 	.word	0x2000e3ec
 800d79c:	00000000 	.word	0x00000000

0800d7a0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a4:	4b3c      	ldr	r3, [pc, #240]	@ (800d898 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d7a6:	ed2d 8b06 	vpush	{d8-d10}
 800d7aa:	681f      	ldr	r7, [r3, #0]
 800d7ac:	b08d      	sub	sp, #52	@ 0x34
 800d7ae:	f008 fb6d 	bl	8015e8c <rmw_uros_epoch_nanos>
 800d7b2:	2f00      	cmp	r7, #0
 800d7b4:	d05d      	beq.n	800d872 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d7b6:	46b8      	mov	r8, r7
 800d7b8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800d880 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800d7bc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d7c0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d7c4:	2b04      	cmp	r3, #4
 800d7c6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800d888 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800d7ca:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800d890 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800d7ce:	4681      	mov	r9, r0
 800d7d0:	468a      	mov	sl, r1
 800d7d2:	ac04      	add	r4, sp, #16
 800d7d4:	d03f      	beq.n	800d856 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d7d6:	2b05      	cmp	r3, #5
 800d7d8:	d044      	beq.n	800d864 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d7da:	2b03      	cmp	r3, #3
 800d7dc:	d03b      	beq.n	800d856 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d7de:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d7e2:	ed8d ab06 	vstr	d10, [sp, #24]
 800d7e6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800d7ea:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800d7ee:	ab08      	add	r3, sp, #32
 800d7f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d7f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d7f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d7fa:	f007 f83d 	bl	8014878 <rmw_time_equal>
 800d7fe:	b118      	cbz	r0, 800d808 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d800:	ed8d 9b04 	vstr	d9, [sp, #16]
 800d804:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d808:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d80c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800d810:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800d814:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d818:	f007 f882 	bl	8014920 <rmw_time_total_nsec>
 800d81c:	1830      	adds	r0, r6, r0
 800d81e:	eb47 0101 	adc.w	r1, r7, r1
 800d822:	4548      	cmp	r0, r9
 800d824:	eb71 030a 	sbcs.w	r3, r1, sl
 800d828:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800d82c:	db05      	blt.n	800d83a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800d82e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800d832:	4591      	cmp	r9, r2
 800d834:	eb7a 0303 	sbcs.w	r3, sl, r3
 800d838:	da03      	bge.n	800d842 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800d83a:	4817      	ldr	r0, [pc, #92]	@ (800d898 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d83c:	4641      	mov	r1, r8
 800d83e:	f007 f9f7 	bl	8014c30 <put_memory>
 800d842:	f1bb 0f00 	cmp.w	fp, #0
 800d846:	d014      	beq.n	800d872 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d848:	46d8      	mov	r8, fp
 800d84a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d84e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d852:	2b04      	cmp	r3, #4
 800d854:	d1bf      	bne.n	800d7d6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800d856:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d85a:	3340      	adds	r3, #64	@ 0x40
 800d85c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d85e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d862:	e7c0      	b.n	800d7e6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d864:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d868:	3348      	adds	r3, #72	@ 0x48
 800d86a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d86c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d870:	e7b9      	b.n	800d7e6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d872:	b00d      	add	sp, #52	@ 0x34
 800d874:	ecbd 8b06 	vpop	{d8-d10}
 800d878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87c:	f3af 8000 	nop.w
	...
 800d888:	00000001 	.word	0x00000001
 800d88c:	00000000 	.word	0x00000000
 800d890:	0000001e 	.word	0x0000001e
 800d894:	00000000 	.word	0x00000000
 800d898:	2000e3ec 	.word	0x2000e3ec

0800d89c <run_xrce_session>:
 800d89c:	b510      	push	{r4, lr}
 800d89e:	788c      	ldrb	r4, [r1, #2]
 800d8a0:	b086      	sub	sp, #24
 800d8a2:	2c01      	cmp	r4, #1
 800d8a4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d8a8:	d00c      	beq.n	800d8c4 <run_xrce_session+0x28>
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	f10d 020e 	add.w	r2, sp, #14
 800d8b4:	f10d 0317 	add.w	r3, sp, #23
 800d8b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d8bc:	f001 ff02 	bl	800f6c4 <uxr_run_session_until_all_status>
 800d8c0:	b006      	add	sp, #24
 800d8c2:	bd10      	pop	{r4, pc}
 800d8c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d8c8:	f001 fb16 	bl	800eef8 <uxr_flash_output_streams>
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	b006      	add	sp, #24
 800d8d0:	bd10      	pop	{r4, pc}
 800d8d2:	bf00      	nop

0800d8d4 <convert_qos_profile>:
 800d8d4:	7a4a      	ldrb	r2, [r1, #9]
 800d8d6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d8da:	2a02      	cmp	r2, #2
 800d8dc:	bf18      	it	ne
 800d8de:	2200      	movne	r2, #0
 800d8e0:	7002      	strb	r2, [r0, #0]
 800d8e2:	780a      	ldrb	r2, [r1, #0]
 800d8e4:	8889      	ldrh	r1, [r1, #4]
 800d8e6:	8081      	strh	r1, [r0, #4]
 800d8e8:	f1ac 0c02 	sub.w	ip, ip, #2
 800d8ec:	f1a2 0202 	sub.w	r2, r2, #2
 800d8f0:	fabc fc8c 	clz	ip, ip
 800d8f4:	fab2 f282 	clz	r2, r2
 800d8f8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d8fc:	0952      	lsrs	r2, r2, #5
 800d8fe:	f880 c001 	strb.w	ip, [r0, #1]
 800d902:	7082      	strb	r2, [r0, #2]
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop

0800d908 <generate_type_name>:
 800d908:	b530      	push	{r4, r5, lr}
 800d90a:	2300      	movs	r3, #0
 800d90c:	700b      	strb	r3, [r1, #0]
 800d90e:	6803      	ldr	r3, [r0, #0]
 800d910:	b087      	sub	sp, #28
 800d912:	4614      	mov	r4, r2
 800d914:	b1d3      	cbz	r3, 800d94c <generate_type_name+0x44>
 800d916:	4a0f      	ldr	r2, [pc, #60]	@ (800d954 <generate_type_name+0x4c>)
 800d918:	4615      	mov	r5, r2
 800d91a:	9203      	str	r2, [sp, #12]
 800d91c:	9500      	str	r5, [sp, #0]
 800d91e:	6842      	ldr	r2, [r0, #4]
 800d920:	480d      	ldr	r0, [pc, #52]	@ (800d958 <generate_type_name+0x50>)
 800d922:	9001      	str	r0, [sp, #4]
 800d924:	4608      	mov	r0, r1
 800d926:	490d      	ldr	r1, [pc, #52]	@ (800d95c <generate_type_name+0x54>)
 800d928:	9204      	str	r2, [sp, #16]
 800d92a:	9105      	str	r1, [sp, #20]
 800d92c:	9102      	str	r1, [sp, #8]
 800d92e:	4a0c      	ldr	r2, [pc, #48]	@ (800d960 <generate_type_name+0x58>)
 800d930:	4621      	mov	r1, r4
 800d932:	f00b f993 	bl	8018c5c <sniprintf>
 800d936:	2800      	cmp	r0, #0
 800d938:	db05      	blt.n	800d946 <generate_type_name+0x3e>
 800d93a:	4284      	cmp	r4, r0
 800d93c:	bfd4      	ite	le
 800d93e:	2000      	movle	r0, #0
 800d940:	2001      	movgt	r0, #1
 800d942:	b007      	add	sp, #28
 800d944:	bd30      	pop	{r4, r5, pc}
 800d946:	2000      	movs	r0, #0
 800d948:	b007      	add	sp, #28
 800d94a:	bd30      	pop	{r4, r5, pc}
 800d94c:	4b05      	ldr	r3, [pc, #20]	@ (800d964 <generate_type_name+0x5c>)
 800d94e:	4a01      	ldr	r2, [pc, #4]	@ (800d954 <generate_type_name+0x4c>)
 800d950:	461d      	mov	r5, r3
 800d952:	e7e2      	b.n	800d91a <generate_type_name+0x12>
 800d954:	0801a340 	.word	0x0801a340
 800d958:	0801a358 	.word	0x0801a358
 800d95c:	0801a354 	.word	0x0801a354
 800d960:	0801a344 	.word	0x0801a344
 800d964:	0801ac84 	.word	0x0801ac84

0800d968 <generate_topic_name>:
 800d968:	b510      	push	{r4, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	4614      	mov	r4, r2
 800d96e:	9000      	str	r0, [sp, #0]
 800d970:	4b08      	ldr	r3, [pc, #32]	@ (800d994 <generate_topic_name+0x2c>)
 800d972:	4a09      	ldr	r2, [pc, #36]	@ (800d998 <generate_topic_name+0x30>)
 800d974:	4608      	mov	r0, r1
 800d976:	4621      	mov	r1, r4
 800d978:	f00b f970 	bl	8018c5c <sniprintf>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	db05      	blt.n	800d98c <generate_topic_name+0x24>
 800d980:	4284      	cmp	r4, r0
 800d982:	bfd4      	ite	le
 800d984:	2000      	movle	r0, #0
 800d986:	2001      	movgt	r0, #1
 800d988:	b002      	add	sp, #8
 800d98a:	bd10      	pop	{r4, pc}
 800d98c:	2000      	movs	r0, #0
 800d98e:	b002      	add	sp, #8
 800d990:	bd10      	pop	{r4, pc}
 800d992:	bf00      	nop
 800d994:	0801a364 	.word	0x0801a364
 800d998:	0801a35c 	.word	0x0801a35c

0800d99c <is_uxrce_rmw_identifier_valid>:
 800d99c:	b510      	push	{r4, lr}
 800d99e:	4604      	mov	r4, r0
 800d9a0:	b140      	cbz	r0, 800d9b4 <is_uxrce_rmw_identifier_valid+0x18>
 800d9a2:	f007 f99d 	bl	8014ce0 <rmw_get_implementation_identifier>
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f7f2 fc19 	bl	80001e0 <strcmp>
 800d9ae:	fab0 f080 	clz	r0, r0
 800d9b2:	0940      	lsrs	r0, r0, #5
 800d9b4:	bd10      	pop	{r4, pc}
 800d9b6:	bf00      	nop

0800d9b8 <get_message_typesupport_handle>:
 800d9b8:	6883      	ldr	r3, [r0, #8]
 800d9ba:	4718      	bx	r3

0800d9bc <get_message_typesupport_handle_function>:
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	4604      	mov	r4, r0
 800d9c0:	6800      	ldr	r0, [r0, #0]
 800d9c2:	f7f2 fc0d 	bl	80001e0 <strcmp>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	bf0c      	ite	eq
 800d9ca:	4620      	moveq	r0, r4
 800d9cc:	2000      	movne	r0, #0
 800d9ce:	bd10      	pop	{r4, pc}

0800d9d0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800d9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d4:	6805      	ldr	r5, [r0, #0]
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	4628      	mov	r0, r5
 800d9da:	460e      	mov	r6, r1
 800d9dc:	f7f2 fc00 	bl	80001e0 <strcmp>
 800d9e0:	b1c8      	cbz	r0, 800da16 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800d9e2:	4b11      	ldr	r3, [pc, #68]	@ (800da28 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	429d      	cmp	r5, r3
 800d9e8:	d112      	bne.n	800da10 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d9ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800d9ee:	f8d8 4000 	ldr.w	r4, [r8]
 800d9f2:	b16c      	cbz	r4, 800da10 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d9f4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d9f8:	2700      	movs	r7, #0
 800d9fa:	3d04      	subs	r5, #4
 800d9fc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800da00:	4631      	mov	r1, r6
 800da02:	f7f2 fbed 	bl	80001e0 <strcmp>
 800da06:	00bb      	lsls	r3, r7, #2
 800da08:	b140      	cbz	r0, 800da1c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800da0a:	3701      	adds	r7, #1
 800da0c:	42bc      	cmp	r4, r7
 800da0e:	d1f5      	bne.n	800d9fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800da10:	2000      	movs	r0, #0
 800da12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da16:	4620      	mov	r0, r4
 800da18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da1c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800da20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da24:	58d3      	ldr	r3, [r2, r3]
 800da26:	4718      	bx	r3
 800da28:	20000308 	.word	0x20000308

0800da2c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800da2c:	4b04      	ldr	r3, [pc, #16]	@ (800da40 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	b10a      	cbz	r2, 800da36 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800da32:	4803      	ldr	r0, [pc, #12]	@ (800da40 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800da34:	4770      	bx	lr
 800da36:	4a03      	ldr	r2, [pc, #12]	@ (800da44 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800da38:	4801      	ldr	r0, [pc, #4]	@ (800da40 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800da3a:	6812      	ldr	r2, [r2, #0]
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	4770      	bx	lr
 800da40:	20000318 	.word	0x20000318
 800da44:	20000308 	.word	0x20000308

0800da48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800da48:	4a02      	ldr	r2, [pc, #8]	@ (800da54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800da4a:	4b03      	ldr	r3, [pc, #12]	@ (800da58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800da4c:	6812      	ldr	r2, [r2, #0]
 800da4e:	601a      	str	r2, [r3, #0]
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	20000308 	.word	0x20000308
 800da58:	20000318 	.word	0x20000318

0800da5c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800da5c:	2009      	movs	r0, #9
 800da5e:	4770      	bx	lr

0800da60 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800da60:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop

0800da68 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800da68:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800da6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da70:	e9c2 0100 	strd	r0, r1, [r2]
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop

0800da78 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800da78:	e9d2 2300 	ldrd	r2, r3, [r2]
 800da7c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800da80:	e9c1 2300 	strd	r2, r3, [r1]
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop

0800da88 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800da88:	f008 ba6c 	b.w	8015f64 <sensor_msgs__msg__Imu__init>

0800da8c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800da8c:	f008 bac0 	b.w	8016010 <sensor_msgs__msg__Imu__fini>

0800da90 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800da90:	2009      	movs	r0, #9
 800da92:	4770      	bx	lr

0800da94 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800da94:	2009      	movs	r0, #9
 800da96:	4770      	bx	lr

0800da98 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800da98:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop

0800daa0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800daa0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop

0800daa8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800daa8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop

0800dab0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800dab0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop

0800dab8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800dab8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop

0800dac0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800dac0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800dac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dac8:	e9c2 0100 	strd	r0, r1, [r2]
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop

0800dad0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800dad0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800dad4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800dad8:	e9c1 2300 	strd	r2, r3, [r1]
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop

0800dae0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800dae0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800dae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dae8:	e9c2 0100 	strd	r0, r1, [r2]
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop

0800daf0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800daf0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800daf4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800daf8:	e9c1 2300 	strd	r2, r3, [r1]
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop

0800db00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800db00:	b510      	push	{r4, lr}
 800db02:	f000 f90f 	bl	800dd24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800db06:	4c0b      	ldr	r4, [pc, #44]	@ (800db34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800db08:	60e0      	str	r0, [r4, #12]
 800db0a:	f000 fa9d 	bl	800e048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800db0e:	64a0      	str	r0, [r4, #72]	@ 0x48
 800db10:	f7fc fbb2 	bl	800a278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800db14:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800db18:	f7fc fbae 	bl	800a278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800db1c:	4b06      	ldr	r3, [pc, #24]	@ (800db38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800db1e:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	b10a      	cbz	r2, 800db2a <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800db26:	4804      	ldr	r0, [pc, #16]	@ (800db38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800db28:	bd10      	pop	{r4, pc}
 800db2a:	4a04      	ldr	r2, [pc, #16]	@ (800db3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800db2c:	4802      	ldr	r0, [pc, #8]	@ (800db38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800db2e:	6812      	ldr	r2, [r2, #0]
 800db30:	601a      	str	r2, [r3, #0]
 800db32:	bd10      	pop	{r4, pc}
 800db34:	20000324 	.word	0x20000324
 800db38:	200004c8 	.word	0x200004c8
 800db3c:	2000030c 	.word	0x2000030c

0800db40 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800db40:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800db44:	4680      	mov	r8, r0
 800db46:	460f      	mov	r7, r1
 800db48:	f000 f910 	bl	800dd6c <get_serialized_size_std_msgs__msg__Header>
 800db4c:	183c      	adds	r4, r7, r0
 800db4e:	4621      	mov	r1, r4
 800db50:	f108 0018 	add.w	r0, r8, #24
 800db54:	f000 fb2a 	bl	800e1ac <get_serialized_size_geometry_msgs__msg__Quaternion>
 800db58:	4404      	add	r4, r0
 800db5a:	2108      	movs	r1, #8
 800db5c:	4620      	mov	r0, r4
 800db5e:	f7fd ffb1 	bl	800bac4 <ucdr_alignment>
 800db62:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800db66:	4425      	add	r5, r4
 800db68:	4629      	mov	r1, r5
 800db6a:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800db6e:	f7fc fc05 	bl	800a37c <get_serialized_size_geometry_msgs__msg__Vector3>
 800db72:	4405      	add	r5, r0
 800db74:	2108      	movs	r1, #8
 800db76:	4628      	mov	r0, r5
 800db78:	f7fd ffa4 	bl	800bac4 <ucdr_alignment>
 800db7c:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800db80:	4425      	add	r5, r4
 800db82:	4629      	mov	r1, r5
 800db84:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800db88:	f7fc fbf8 	bl	800a37c <get_serialized_size_geometry_msgs__msg__Vector3>
 800db8c:	4405      	add	r5, r0
 800db8e:	2108      	movs	r1, #8
 800db90:	4628      	mov	r0, r5
 800db92:	f7fd ff97 	bl	800bac4 <ucdr_alignment>
 800db96:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800db9a:	4438      	add	r0, r7
 800db9c:	4428      	add	r0, r5
 800db9e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800dba2:	bf00      	nop

0800dba4 <get_serialized_size_sensor_msgs__msg__Imu>:
 800dba4:	b108      	cbz	r0, 800dbaa <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800dba6:	f7ff bfcb 	b.w	800db40 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800dbaa:	4770      	bx	lr

0800dbac <_Imu__get_serialized_size>:
 800dbac:	b110      	cbz	r0, 800dbb4 <_Imu__get_serialized_size+0x8>
 800dbae:	2100      	movs	r1, #0
 800dbb0:	f7ff bfc6 	b.w	800db40 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop

0800dbb8 <_Imu__cdr_deserialize>:
 800dbb8:	b538      	push	{r3, r4, r5, lr}
 800dbba:	460c      	mov	r4, r1
 800dbbc:	b399      	cbz	r1, 800dc26 <_Imu__cdr_deserialize+0x6e>
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	f000 f956 	bl	800de70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800dbc4:	6843      	ldr	r3, [r0, #4]
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	4628      	mov	r0, r5
 800dbcc:	4798      	blx	r3
 800dbce:	f000 fba1 	bl	800e314 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800dbd2:	6843      	ldr	r3, [r0, #4]
 800dbd4:	f104 0118 	add.w	r1, r4, #24
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	4628      	mov	r0, r5
 800dbdc:	4798      	blx	r3
 800dbde:	2209      	movs	r2, #9
 800dbe0:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f000 fd89 	bl	800e6fc <ucdr_deserialize_array_double>
 800dbea:	f7fc fc53 	bl	800a494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dbee:	6843      	ldr	r3, [r0, #4]
 800dbf0:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	4798      	blx	r3
 800dbfa:	2209      	movs	r2, #9
 800dbfc:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800dc00:	4628      	mov	r0, r5
 800dc02:	f000 fd7b 	bl	800e6fc <ucdr_deserialize_array_double>
 800dc06:	f7fc fc45 	bl	800a494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dc0a:	6843      	ldr	r3, [r0, #4]
 800dc0c:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	4628      	mov	r0, r5
 800dc14:	4798      	blx	r3
 800dc16:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	2209      	movs	r2, #9
 800dc1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc22:	f000 bd6b 	b.w	800e6fc <ucdr_deserialize_array_double>
 800dc26:	4608      	mov	r0, r1
 800dc28:	bd38      	pop	{r3, r4, r5, pc}
 800dc2a:	bf00      	nop

0800dc2c <_Imu__cdr_serialize>:
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d035      	beq.n	800dc9c <_Imu__cdr_serialize+0x70>
 800dc30:	b538      	push	{r3, r4, r5, lr}
 800dc32:	460d      	mov	r5, r1
 800dc34:	4604      	mov	r4, r0
 800dc36:	f000 f91b 	bl	800de70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800dc3a:	6843      	ldr	r3, [r0, #4]
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	4620      	mov	r0, r4
 800dc42:	4798      	blx	r3
 800dc44:	f000 fb66 	bl	800e314 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800dc48:	6843      	ldr	r3, [r0, #4]
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	f104 0018 	add.w	r0, r4, #24
 800dc52:	4798      	blx	r3
 800dc54:	2209      	movs	r2, #9
 800dc56:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f000 fcfa 	bl	800e654 <ucdr_serialize_array_double>
 800dc60:	f7fc fc18 	bl	800a494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dc64:	6843      	ldr	r3, [r0, #4]
 800dc66:	4629      	mov	r1, r5
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800dc6e:	4798      	blx	r3
 800dc70:	2209      	movs	r2, #9
 800dc72:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800dc76:	4628      	mov	r0, r5
 800dc78:	f000 fcec 	bl	800e654 <ucdr_serialize_array_double>
 800dc7c:	f7fc fc0a 	bl	800a494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dc80:	6843      	ldr	r3, [r0, #4]
 800dc82:	4629      	mov	r1, r5
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800dc8a:	4798      	blx	r3
 800dc8c:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800dc90:	4628      	mov	r0, r5
 800dc92:	2209      	movs	r2, #9
 800dc94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc98:	f000 bcdc 	b.w	800e654 <ucdr_serialize_array_double>
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop

0800dca0 <max_serialized_size_sensor_msgs__msg__Imu>:
 800dca0:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800dca4:	2301      	movs	r3, #1
 800dca6:	7003      	strb	r3, [r0, #0]
 800dca8:	4680      	mov	r8, r0
 800dcaa:	460f      	mov	r7, r1
 800dcac:	f000 f8d6 	bl	800de5c <max_serialized_size_std_msgs__msg__Header>
 800dcb0:	183c      	adds	r4, r7, r0
 800dcb2:	4621      	mov	r1, r4
 800dcb4:	4640      	mov	r0, r8
 800dcb6:	f000 fb0b 	bl	800e2d0 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800dcba:	4404      	add	r4, r0
 800dcbc:	2108      	movs	r1, #8
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f7fd ff00 	bl	800bac4 <ucdr_alignment>
 800dcc4:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800dcc8:	4425      	add	r5, r4
 800dcca:	4629      	mov	r1, r5
 800dccc:	4640      	mov	r0, r8
 800dcce:	f7fc fbc5 	bl	800a45c <max_serialized_size_geometry_msgs__msg__Vector3>
 800dcd2:	4405      	add	r5, r0
 800dcd4:	2108      	movs	r1, #8
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	f7fd fef4 	bl	800bac4 <ucdr_alignment>
 800dcdc:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800dce0:	4425      	add	r5, r4
 800dce2:	4629      	mov	r1, r5
 800dce4:	4640      	mov	r0, r8
 800dce6:	f7fc fbb9 	bl	800a45c <max_serialized_size_geometry_msgs__msg__Vector3>
 800dcea:	4405      	add	r5, r0
 800dcec:	2108      	movs	r1, #8
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f7fd fee8 	bl	800bac4 <ucdr_alignment>
 800dcf4:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800dcf8:	4438      	add	r0, r7
 800dcfa:	4428      	add	r0, r5
 800dcfc:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800dd00 <_Imu__max_serialized_size>:
 800dd00:	b500      	push	{lr}
 800dd02:	b083      	sub	sp, #12
 800dd04:	2100      	movs	r1, #0
 800dd06:	f10d 0007 	add.w	r0, sp, #7
 800dd0a:	f7ff ffc9 	bl	800dca0 <max_serialized_size_sensor_msgs__msg__Imu>
 800dd0e:	b003      	add	sp, #12
 800dd10:	f85d fb04 	ldr.w	pc, [sp], #4

0800dd14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800dd14:	4800      	ldr	r0, [pc, #0]	@ (800dd18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800dd16:	4770      	bx	lr
 800dd18:	200004d4 	.word	0x200004d4

0800dd1c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800dd1c:	f008 b98c 	b.w	8016038 <std_msgs__msg__Header__init>

0800dd20 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800dd20:	f008 b9ae 	b.w	8016080 <std_msgs__msg__Header__fini>

0800dd24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800dd24:	b508      	push	{r3, lr}
 800dd26:	f000 f8ab 	bl	800de80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dd2a:	4b06      	ldr	r3, [pc, #24]	@ (800dd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800dd2c:	4906      	ldr	r1, [pc, #24]	@ (800dd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	60c8      	str	r0, [r1, #12]
 800dd32:	b10a      	cbz	r2, 800dd38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800dd34:	4803      	ldr	r0, [pc, #12]	@ (800dd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800dd36:	bd08      	pop	{r3, pc}
 800dd38:	4a04      	ldr	r2, [pc, #16]	@ (800dd4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800dd3a:	4802      	ldr	r0, [pc, #8]	@ (800dd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800dd3c:	6812      	ldr	r2, [r2, #0]
 800dd3e:	601a      	str	r2, [r3, #0]
 800dd40:	bd08      	pop	{r3, pc}
 800dd42:	bf00      	nop
 800dd44:	20000574 	.word	0x20000574
 800dd48:	200004fc 	.word	0x200004fc
 800dd4c:	2000030c 	.word	0x2000030c

0800dd50 <_Header__max_serialized_size>:
 800dd50:	b500      	push	{lr}
 800dd52:	b083      	sub	sp, #12
 800dd54:	2301      	movs	r3, #1
 800dd56:	2100      	movs	r1, #0
 800dd58:	f10d 0007 	add.w	r0, sp, #7
 800dd5c:	f88d 3007 	strb.w	r3, [sp, #7]
 800dd60:	f000 f8ec 	bl	800df3c <max_serialized_size_builtin_interfaces__msg__Time>
 800dd64:	b003      	add	sp, #12
 800dd66:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd6a:	bf00      	nop

0800dd6c <get_serialized_size_std_msgs__msg__Header>:
 800dd6c:	b570      	push	{r4, r5, r6, lr}
 800dd6e:	4605      	mov	r5, r0
 800dd70:	b168      	cbz	r0, 800dd8e <get_serialized_size_std_msgs__msg__Header+0x22>
 800dd72:	460c      	mov	r4, r1
 800dd74:	f000 f892 	bl	800de9c <get_serialized_size_builtin_interfaces__msg__Time>
 800dd78:	1826      	adds	r6, r4, r0
 800dd7a:	2104      	movs	r1, #4
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	f7fd fea1 	bl	800bac4 <ucdr_alignment>
 800dd82:	68e9      	ldr	r1, [r5, #12]
 800dd84:	f1c4 0405 	rsb	r4, r4, #5
 800dd88:	440c      	add	r4, r1
 800dd8a:	4404      	add	r4, r0
 800dd8c:	19a0      	adds	r0, r4, r6
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}

0800dd90 <_Header__cdr_deserialize>:
 800dd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd92:	460c      	mov	r4, r1
 800dd94:	b083      	sub	sp, #12
 800dd96:	b1e1      	cbz	r1, 800ddd2 <_Header__cdr_deserialize+0x42>
 800dd98:	4606      	mov	r6, r0
 800dd9a:	f000 f8e3 	bl	800df64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dd9e:	6843      	ldr	r3, [r0, #4]
 800dda0:	4621      	mov	r1, r4
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	4630      	mov	r0, r6
 800dda6:	4798      	blx	r3
 800dda8:	6927      	ldr	r7, [r4, #16]
 800ddaa:	68a1      	ldr	r1, [r4, #8]
 800ddac:	ab01      	add	r3, sp, #4
 800ddae:	463a      	mov	r2, r7
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	f000 fd0b 	bl	800e7cc <ucdr_deserialize_sequence_char>
 800ddb6:	9b01      	ldr	r3, [sp, #4]
 800ddb8:	4605      	mov	r5, r0
 800ddba:	b920      	cbnz	r0, 800ddc6 <_Header__cdr_deserialize+0x36>
 800ddbc:	429f      	cmp	r7, r3
 800ddbe:	d30c      	bcc.n	800ddda <_Header__cdr_deserialize+0x4a>
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	b003      	add	sp, #12
 800ddc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddc6:	b103      	cbz	r3, 800ddca <_Header__cdr_deserialize+0x3a>
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	4628      	mov	r0, r5
 800ddcc:	60e3      	str	r3, [r4, #12]
 800ddce:	b003      	add	sp, #12
 800ddd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddd2:	460d      	mov	r5, r1
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	b003      	add	sp, #12
 800ddd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddda:	2101      	movs	r1, #1
 800dddc:	75b0      	strb	r0, [r6, #22]
 800ddde:	7571      	strb	r1, [r6, #21]
 800dde0:	4630      	mov	r0, r6
 800dde2:	60e5      	str	r5, [r4, #12]
 800dde4:	f7fd fe84 	bl	800baf0 <ucdr_align_to>
 800dde8:	4630      	mov	r0, r6
 800ddea:	9901      	ldr	r1, [sp, #4]
 800ddec:	f7fd feb6 	bl	800bb5c <ucdr_advance_buffer>
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	b003      	add	sp, #12
 800ddf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddf6:	bf00      	nop

0800ddf8 <_Header__cdr_serialize>:
 800ddf8:	b1f8      	cbz	r0, 800de3a <_Header__cdr_serialize+0x42>
 800ddfa:	b570      	push	{r4, r5, r6, lr}
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	460d      	mov	r5, r1
 800de00:	f000 f8b0 	bl	800df64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800de04:	6843      	ldr	r3, [r0, #4]
 800de06:	4629      	mov	r1, r5
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	4620      	mov	r0, r4
 800de0c:	4798      	blx	r3
 800de0e:	68a6      	ldr	r6, [r4, #8]
 800de10:	b156      	cbz	r6, 800de28 <_Header__cdr_serialize+0x30>
 800de12:	4630      	mov	r0, r6
 800de14:	f7f2 f9ee 	bl	80001f4 <strlen>
 800de18:	4631      	mov	r1, r6
 800de1a:	60e0      	str	r0, [r4, #12]
 800de1c:	1c42      	adds	r2, r0, #1
 800de1e:	4628      	mov	r0, r5
 800de20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de24:	f000 bcc0 	b.w	800e7a8 <ucdr_serialize_sequence_char>
 800de28:	4630      	mov	r0, r6
 800de2a:	60e0      	str	r0, [r4, #12]
 800de2c:	4632      	mov	r2, r6
 800de2e:	4631      	mov	r1, r6
 800de30:	4628      	mov	r0, r5
 800de32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de36:	f000 bcb7 	b.w	800e7a8 <ucdr_serialize_sequence_char>
 800de3a:	4770      	bx	lr

0800de3c <_Header__get_serialized_size>:
 800de3c:	b538      	push	{r3, r4, r5, lr}
 800de3e:	4604      	mov	r4, r0
 800de40:	b150      	cbz	r0, 800de58 <_Header__get_serialized_size+0x1c>
 800de42:	2100      	movs	r1, #0
 800de44:	f000 f82a 	bl	800de9c <get_serialized_size_builtin_interfaces__msg__Time>
 800de48:	2104      	movs	r1, #4
 800de4a:	4605      	mov	r5, r0
 800de4c:	f7fd fe3a 	bl	800bac4 <ucdr_alignment>
 800de50:	68e2      	ldr	r2, [r4, #12]
 800de52:	3205      	adds	r2, #5
 800de54:	1953      	adds	r3, r2, r5
 800de56:	4418      	add	r0, r3
 800de58:	bd38      	pop	{r3, r4, r5, pc}
 800de5a:	bf00      	nop

0800de5c <max_serialized_size_std_msgs__msg__Header>:
 800de5c:	b510      	push	{r4, lr}
 800de5e:	2301      	movs	r3, #1
 800de60:	4604      	mov	r4, r0
 800de62:	7003      	strb	r3, [r0, #0]
 800de64:	f000 f86a 	bl	800df3c <max_serialized_size_builtin_interfaces__msg__Time>
 800de68:	2300      	movs	r3, #0
 800de6a:	7023      	strb	r3, [r4, #0]
 800de6c:	bd10      	pop	{r4, pc}
 800de6e:	bf00      	nop

0800de70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800de70:	4800      	ldr	r0, [pc, #0]	@ (800de74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800de72:	4770      	bx	lr
 800de74:	20000580 	.word	0x20000580

0800de78 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800de78:	f008 b90e 	b.w	8016098 <builtin_interfaces__msg__Time__init>

0800de7c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800de7c:	f008 b910 	b.w	80160a0 <builtin_interfaces__msg__Time__fini>

0800de80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800de80:	4b04      	ldr	r3, [pc, #16]	@ (800de94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	b10a      	cbz	r2, 800de8a <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800de86:	4803      	ldr	r0, [pc, #12]	@ (800de94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800de88:	4770      	bx	lr
 800de8a:	4a03      	ldr	r2, [pc, #12]	@ (800de98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800de8c:	4801      	ldr	r0, [pc, #4]	@ (800de94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800de8e:	6812      	ldr	r2, [r2, #0]
 800de90:	601a      	str	r2, [r3, #0]
 800de92:	4770      	bx	lr
 800de94:	20000620 	.word	0x20000620
 800de98:	2000030c 	.word	0x2000030c

0800de9c <get_serialized_size_builtin_interfaces__msg__Time>:
 800de9c:	b180      	cbz	r0, 800dec0 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800de9e:	b538      	push	{r3, r4, r5, lr}
 800dea0:	460d      	mov	r5, r1
 800dea2:	4628      	mov	r0, r5
 800dea4:	2104      	movs	r1, #4
 800dea6:	f7fd fe0d 	bl	800bac4 <ucdr_alignment>
 800deaa:	1d2b      	adds	r3, r5, #4
 800deac:	181c      	adds	r4, r3, r0
 800deae:	2104      	movs	r1, #4
 800deb0:	4620      	mov	r0, r4
 800deb2:	f7fd fe07 	bl	800bac4 <ucdr_alignment>
 800deb6:	f1c5 0504 	rsb	r5, r5, #4
 800deba:	4428      	add	r0, r5
 800debc:	4420      	add	r0, r4
 800debe:	bd38      	pop	{r3, r4, r5, pc}
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop

0800dec4 <_Time__cdr_deserialize>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	460c      	mov	r4, r1
 800dec8:	b141      	cbz	r1, 800dedc <_Time__cdr_deserialize+0x18>
 800deca:	4605      	mov	r5, r0
 800decc:	f7fd f9dc 	bl	800b288 <ucdr_deserialize_int32_t>
 800ded0:	1d21      	adds	r1, r4, #4
 800ded2:	4628      	mov	r0, r5
 800ded4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ded8:	f7fc be54 	b.w	800ab84 <ucdr_deserialize_uint32_t>
 800dedc:	4608      	mov	r0, r1
 800dede:	bd38      	pop	{r3, r4, r5, pc}

0800dee0 <_Time__cdr_serialize>:
 800dee0:	b160      	cbz	r0, 800defc <_Time__cdr_serialize+0x1c>
 800dee2:	b538      	push	{r3, r4, r5, lr}
 800dee4:	460d      	mov	r5, r1
 800dee6:	4604      	mov	r4, r0
 800dee8:	6801      	ldr	r1, [r0, #0]
 800deea:	4628      	mov	r0, r5
 800deec:	f7fd f934 	bl	800b158 <ucdr_serialize_int32_t>
 800def0:	6861      	ldr	r1, [r4, #4]
 800def2:	4628      	mov	r0, r5
 800def4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800def8:	f7fc bd14 	b.w	800a924 <ucdr_serialize_uint32_t>
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop

0800df00 <_Time__get_serialized_size>:
 800df00:	b160      	cbz	r0, 800df1c <_Time__get_serialized_size+0x1c>
 800df02:	b510      	push	{r4, lr}
 800df04:	2104      	movs	r1, #4
 800df06:	2000      	movs	r0, #0
 800df08:	f7fd fddc 	bl	800bac4 <ucdr_alignment>
 800df0c:	1d04      	adds	r4, r0, #4
 800df0e:	2104      	movs	r1, #4
 800df10:	4620      	mov	r0, r4
 800df12:	f7fd fdd7 	bl	800bac4 <ucdr_alignment>
 800df16:	3004      	adds	r0, #4
 800df18:	4420      	add	r0, r4
 800df1a:	bd10      	pop	{r4, pc}
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop

0800df20 <_Time__max_serialized_size>:
 800df20:	b510      	push	{r4, lr}
 800df22:	2104      	movs	r1, #4
 800df24:	2000      	movs	r0, #0
 800df26:	f7fd fdcd 	bl	800bac4 <ucdr_alignment>
 800df2a:	1d04      	adds	r4, r0, #4
 800df2c:	2104      	movs	r1, #4
 800df2e:	4620      	mov	r0, r4
 800df30:	f7fd fdc8 	bl	800bac4 <ucdr_alignment>
 800df34:	3004      	adds	r0, #4
 800df36:	4420      	add	r0, r4
 800df38:	bd10      	pop	{r4, pc}
 800df3a:	bf00      	nop

0800df3c <max_serialized_size_builtin_interfaces__msg__Time>:
 800df3c:	b538      	push	{r3, r4, r5, lr}
 800df3e:	460c      	mov	r4, r1
 800df40:	2301      	movs	r3, #1
 800df42:	7003      	strb	r3, [r0, #0]
 800df44:	2104      	movs	r1, #4
 800df46:	4620      	mov	r0, r4
 800df48:	f7fd fdbc 	bl	800bac4 <ucdr_alignment>
 800df4c:	1d25      	adds	r5, r4, #4
 800df4e:	4405      	add	r5, r0
 800df50:	2104      	movs	r1, #4
 800df52:	4628      	mov	r0, r5
 800df54:	f7fd fdb6 	bl	800bac4 <ucdr_alignment>
 800df58:	f1c4 0404 	rsb	r4, r4, #4
 800df5c:	4420      	add	r0, r4
 800df5e:	4428      	add	r0, r5
 800df60:	bd38      	pop	{r3, r4, r5, pc}
 800df62:	bf00      	nop

0800df64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800df64:	4800      	ldr	r0, [pc, #0]	@ (800df68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800df66:	4770      	bx	lr
 800df68:	2000062c 	.word	0x2000062c

0800df6c <geometry_msgs__msg__Twist__init>:
 800df6c:	b570      	push	{r4, r5, r6, lr}
 800df6e:	4605      	mov	r5, r0
 800df70:	b1a8      	cbz	r0, 800df9e <geometry_msgs__msg__Twist__init+0x32>
 800df72:	f000 f82b 	bl	800dfcc <geometry_msgs__msg__Vector3__init>
 800df76:	4604      	mov	r4, r0
 800df78:	b140      	cbz	r0, 800df8c <geometry_msgs__msg__Twist__init+0x20>
 800df7a:	f105 0618 	add.w	r6, r5, #24
 800df7e:	4630      	mov	r0, r6
 800df80:	f000 f824 	bl	800dfcc <geometry_msgs__msg__Vector3__init>
 800df84:	4604      	mov	r4, r0
 800df86:	b168      	cbz	r0, 800dfa4 <geometry_msgs__msg__Twist__init+0x38>
 800df88:	4620      	mov	r0, r4
 800df8a:	bd70      	pop	{r4, r5, r6, pc}
 800df8c:	4628      	mov	r0, r5
 800df8e:	f000 f821 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 800df92:	f105 0018 	add.w	r0, r5, #24
 800df96:	f000 f81d 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 800df9a:	4620      	mov	r0, r4
 800df9c:	bd70      	pop	{r4, r5, r6, pc}
 800df9e:	4604      	mov	r4, r0
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	f000 f815 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f000 f812 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 800dfb0:	e7ea      	b.n	800df88 <geometry_msgs__msg__Twist__init+0x1c>
 800dfb2:	bf00      	nop

0800dfb4 <geometry_msgs__msg__Twist__fini>:
 800dfb4:	b148      	cbz	r0, 800dfca <geometry_msgs__msg__Twist__fini+0x16>
 800dfb6:	b510      	push	{r4, lr}
 800dfb8:	4604      	mov	r4, r0
 800dfba:	f000 f80b 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 800dfbe:	f104 0018 	add.w	r0, r4, #24
 800dfc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfc6:	f000 b805 	b.w	800dfd4 <geometry_msgs__msg__Vector3__fini>
 800dfca:	4770      	bx	lr

0800dfcc <geometry_msgs__msg__Vector3__init>:
 800dfcc:	3800      	subs	r0, #0
 800dfce:	bf18      	it	ne
 800dfd0:	2001      	movne	r0, #1
 800dfd2:	4770      	bx	lr

0800dfd4 <geometry_msgs__msg__Vector3__fini>:
 800dfd4:	4770      	bx	lr
 800dfd6:	bf00      	nop

0800dfd8 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 800dfd8:	2024      	movs	r0, #36	@ 0x24
 800dfda:	4770      	bx	lr

0800dfdc <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 800dfdc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop

0800dfe4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 800dfe4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800dfe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfec:	e9c2 0100 	strd	r0, r1, [r2]
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop

0800dff4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 800dff4:	e9d2 2300 	ldrd	r2, r3, [r2]
 800dff8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800dffc:	e9c1 2300 	strd	r2, r3, [r1]
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop

0800e004 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 800e004:	f008 b84e 	b.w	80160a4 <geometry_msgs__msg__PoseWithCovariance__init>

0800e008 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 800e008:	f008 b85e 	b.w	80160c8 <geometry_msgs__msg__PoseWithCovariance__fini>

0800e00c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 800e00c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e010:	4770      	bx	lr
 800e012:	bf00      	nop

0800e014 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800e014:	b508      	push	{r3, lr}
 800e016:	f008 f88b 	bl	8016130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800e01a:	4b06      	ldr	r3, [pc, #24]	@ (800e034 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800e01c:	4906      	ldr	r1, [pc, #24]	@ (800e038 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	60c8      	str	r0, [r1, #12]
 800e022:	b10a      	cbz	r2, 800e028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 800e024:	4803      	ldr	r0, [pc, #12]	@ (800e034 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800e026:	bd08      	pop	{r3, pc}
 800e028:	4a04      	ldr	r2, [pc, #16]	@ (800e03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 800e02a:	4802      	ldr	r0, [pc, #8]	@ (800e034 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800e02c:	6812      	ldr	r2, [r2, #0]
 800e02e:	601a      	str	r2, [r3, #0]
 800e030:	bd08      	pop	{r3, pc}
 800e032:	bf00      	nop
 800e034:	200006cc 	.word	0x200006cc
 800e038:	20000654 	.word	0x20000654
 800e03c:	2000030c 	.word	0x2000030c

0800e040 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800e040:	f008 b846 	b.w	80160d0 <geometry_msgs__msg__Quaternion__init>

0800e044 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800e044:	f008 b858 	b.w	80160f8 <geometry_msgs__msg__Quaternion__fini>

0800e048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800e048:	4b04      	ldr	r3, [pc, #16]	@ (800e05c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	b10a      	cbz	r2, 800e052 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800e04e:	4803      	ldr	r0, [pc, #12]	@ (800e05c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800e050:	4770      	bx	lr
 800e052:	4a03      	ldr	r2, [pc, #12]	@ (800e060 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800e054:	4801      	ldr	r0, [pc, #4]	@ (800e05c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800e056:	6812      	ldr	r2, [r2, #0]
 800e058:	601a      	str	r2, [r3, #0]
 800e05a:	4770      	bx	lr
 800e05c:	200007c8 	.word	0x200007c8
 800e060:	2000030c 	.word	0x2000030c

0800e064 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 800e064:	2024      	movs	r0, #36	@ 0x24
 800e066:	4770      	bx	lr

0800e068 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 800e068:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop

0800e070 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 800e070:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e074:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e078:	e9c2 0100 	strd	r0, r1, [r2]
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop

0800e080 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 800e080:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e084:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e088:	e9c1 2300 	strd	r2, r3, [r1]
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop

0800e090 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 800e090:	f008 b834 	b.w	80160fc <geometry_msgs__msg__TwistWithCovariance__init>

0800e094 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 800e094:	f008 b844 	b.w	8016120 <geometry_msgs__msg__TwistWithCovariance__fini>

0800e098 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 800e098:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e09c:	4770      	bx	lr
 800e09e:	bf00      	nop

0800e0a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800e0a0:	b508      	push	{r3, lr}
 800e0a2:	f7fc f8cd 	bl	800a240 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800e0a6:	4b06      	ldr	r3, [pc, #24]	@ (800e0c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800e0a8:	4906      	ldr	r1, [pc, #24]	@ (800e0c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	60c8      	str	r0, [r1, #12]
 800e0ae:	b10a      	cbz	r2, 800e0b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 800e0b0:	4803      	ldr	r0, [pc, #12]	@ (800e0c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800e0b2:	bd08      	pop	{r3, pc}
 800e0b4:	4a04      	ldr	r2, [pc, #16]	@ (800e0c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 800e0b6:	4802      	ldr	r0, [pc, #8]	@ (800e0c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800e0b8:	6812      	ldr	r2, [r2, #0]
 800e0ba:	601a      	str	r2, [r3, #0]
 800e0bc:	bd08      	pop	{r3, pc}
 800e0be:	bf00      	nop
 800e0c0:	2000084c 	.word	0x2000084c
 800e0c4:	200007d4 	.word	0x200007d4
 800e0c8:	2000030c 	.word	0x2000030c

0800e0cc <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800e0cc:	b538      	push	{r3, r4, r5, lr}
 800e0ce:	b158      	cbz	r0, 800e0e8 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 800e0d0:	460d      	mov	r5, r1
 800e0d2:	f008 f845 	bl	8016160 <get_serialized_size_geometry_msgs__msg__Pose>
 800e0d6:	182c      	adds	r4, r5, r0
 800e0d8:	2108      	movs	r1, #8
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f7fd fcf2 	bl	800bac4 <ucdr_alignment>
 800e0e0:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800e0e4:	4428      	add	r0, r5
 800e0e6:	4420      	add	r0, r4
 800e0e8:	bd38      	pop	{r3, r4, r5, pc}
 800e0ea:	bf00      	nop

0800e0ec <_PoseWithCovariance__cdr_deserialize>:
 800e0ec:	b538      	push	{r3, r4, r5, lr}
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	b179      	cbz	r1, 800e112 <_PoseWithCovariance__cdr_deserialize+0x26>
 800e0f2:	4605      	mov	r5, r0
 800e0f4:	f008 f8a4 	bl	8016240 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800e0f8:	6843      	ldr	r3, [r0, #4]
 800e0fa:	4621      	mov	r1, r4
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	4628      	mov	r0, r5
 800e100:	4798      	blx	r3
 800e102:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800e106:	4628      	mov	r0, r5
 800e108:	2224      	movs	r2, #36	@ 0x24
 800e10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e10e:	f000 baf5 	b.w	800e6fc <ucdr_deserialize_array_double>
 800e112:	4608      	mov	r0, r1
 800e114:	bd38      	pop	{r3, r4, r5, pc}
 800e116:	bf00      	nop

0800e118 <_PoseWithCovariance__cdr_serialize>:
 800e118:	b188      	cbz	r0, 800e13e <_PoseWithCovariance__cdr_serialize+0x26>
 800e11a:	b538      	push	{r3, r4, r5, lr}
 800e11c:	460d      	mov	r5, r1
 800e11e:	4604      	mov	r4, r0
 800e120:	f008 f88e 	bl	8016240 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800e124:	6843      	ldr	r3, [r0, #4]
 800e126:	4629      	mov	r1, r5
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	4620      	mov	r0, r4
 800e12c:	4798      	blx	r3
 800e12e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800e132:	4628      	mov	r0, r5
 800e134:	2224      	movs	r2, #36	@ 0x24
 800e136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e13a:	f000 ba8b 	b.w	800e654 <ucdr_serialize_array_double>
 800e13e:	4770      	bx	lr

0800e140 <_PoseWithCovariance__get_serialized_size>:
 800e140:	b158      	cbz	r0, 800e15a <_PoseWithCovariance__get_serialized_size+0x1a>
 800e142:	b510      	push	{r4, lr}
 800e144:	2100      	movs	r1, #0
 800e146:	f008 f80b 	bl	8016160 <get_serialized_size_geometry_msgs__msg__Pose>
 800e14a:	2108      	movs	r1, #8
 800e14c:	4604      	mov	r4, r0
 800e14e:	f7fd fcb9 	bl	800bac4 <ucdr_alignment>
 800e152:	4420      	add	r0, r4
 800e154:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800e158:	bd10      	pop	{r4, pc}
 800e15a:	4770      	bx	lr

0800e15c <_PoseWithCovariance__max_serialized_size>:
 800e15c:	b510      	push	{r4, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	2301      	movs	r3, #1
 800e162:	2100      	movs	r1, #0
 800e164:	f10d 0007 	add.w	r0, sp, #7
 800e168:	f88d 3007 	strb.w	r3, [sp, #7]
 800e16c:	f008 f85a 	bl	8016224 <max_serialized_size_geometry_msgs__msg__Pose>
 800e170:	2108      	movs	r1, #8
 800e172:	4604      	mov	r4, r0
 800e174:	f7fd fca6 	bl	800bac4 <ucdr_alignment>
 800e178:	4420      	add	r0, r4
 800e17a:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800e17e:	b002      	add	sp, #8
 800e180:	bd10      	pop	{r4, pc}
 800e182:	bf00      	nop

0800e184 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	2301      	movs	r3, #1
 800e188:	7003      	strb	r3, [r0, #0]
 800e18a:	460c      	mov	r4, r1
 800e18c:	f008 f84a 	bl	8016224 <max_serialized_size_geometry_msgs__msg__Pose>
 800e190:	1825      	adds	r5, r4, r0
 800e192:	2108      	movs	r1, #8
 800e194:	4628      	mov	r0, r5
 800e196:	f7fd fc95 	bl	800bac4 <ucdr_alignment>
 800e19a:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800e19e:	4420      	add	r0, r4
 800e1a0:	4428      	add	r0, r5
 800e1a2:	bd38      	pop	{r3, r4, r5, pc}

0800e1a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800e1a4:	4800      	ldr	r0, [pc, #0]	@ (800e1a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 800e1a6:	4770      	bx	lr
 800e1a8:	20000858 	.word	0x20000858

0800e1ac <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800e1ac:	b1f0      	cbz	r0, 800e1ec <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800e1ae:	b570      	push	{r4, r5, r6, lr}
 800e1b0:	460d      	mov	r5, r1
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	2108      	movs	r1, #8
 800e1b6:	f7fd fc85 	bl	800bac4 <ucdr_alignment>
 800e1ba:	f105 0308 	add.w	r3, r5, #8
 800e1be:	181e      	adds	r6, r3, r0
 800e1c0:	2108      	movs	r1, #8
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	f7fd fc7e 	bl	800bac4 <ucdr_alignment>
 800e1c8:	f100 0408 	add.w	r4, r0, #8
 800e1cc:	4434      	add	r4, r6
 800e1ce:	2108      	movs	r1, #8
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f7fd fc77 	bl	800bac4 <ucdr_alignment>
 800e1d6:	3008      	adds	r0, #8
 800e1d8:	4404      	add	r4, r0
 800e1da:	2108      	movs	r1, #8
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f7fd fc71 	bl	800bac4 <ucdr_alignment>
 800e1e2:	f1c5 0508 	rsb	r5, r5, #8
 800e1e6:	4428      	add	r0, r5
 800e1e8:	4420      	add	r0, r4
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}
 800e1ec:	4770      	bx	lr
 800e1ee:	bf00      	nop

0800e1f0 <_Quaternion__cdr_deserialize>:
 800e1f0:	b538      	push	{r3, r4, r5, lr}
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	b199      	cbz	r1, 800e21e <_Quaternion__cdr_deserialize+0x2e>
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	f7fd fa78 	bl	800b6ec <ucdr_deserialize_double>
 800e1fc:	f104 0108 	add.w	r1, r4, #8
 800e200:	4628      	mov	r0, r5
 800e202:	f7fd fa73 	bl	800b6ec <ucdr_deserialize_double>
 800e206:	f104 0110 	add.w	r1, r4, #16
 800e20a:	4628      	mov	r0, r5
 800e20c:	f7fd fa6e 	bl	800b6ec <ucdr_deserialize_double>
 800e210:	f104 0118 	add.w	r1, r4, #24
 800e214:	4628      	mov	r0, r5
 800e216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e21a:	f7fd ba67 	b.w	800b6ec <ucdr_deserialize_double>
 800e21e:	4608      	mov	r0, r1
 800e220:	bd38      	pop	{r3, r4, r5, pc}
 800e222:	bf00      	nop

0800e224 <_Quaternion__cdr_serialize>:
 800e224:	b1c0      	cbz	r0, 800e258 <_Quaternion__cdr_serialize+0x34>
 800e226:	b538      	push	{r3, r4, r5, lr}
 800e228:	ed90 0b00 	vldr	d0, [r0]
 800e22c:	460d      	mov	r5, r1
 800e22e:	4604      	mov	r4, r0
 800e230:	4608      	mov	r0, r1
 800e232:	f7fd f8b9 	bl	800b3a8 <ucdr_serialize_double>
 800e236:	ed94 0b02 	vldr	d0, [r4, #8]
 800e23a:	4628      	mov	r0, r5
 800e23c:	f7fd f8b4 	bl	800b3a8 <ucdr_serialize_double>
 800e240:	ed94 0b04 	vldr	d0, [r4, #16]
 800e244:	4628      	mov	r0, r5
 800e246:	f7fd f8af 	bl	800b3a8 <ucdr_serialize_double>
 800e24a:	ed94 0b06 	vldr	d0, [r4, #24]
 800e24e:	4628      	mov	r0, r5
 800e250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e254:	f7fd b8a8 	b.w	800b3a8 <ucdr_serialize_double>
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop

0800e25c <_Quaternion__get_serialized_size>:
 800e25c:	b1d0      	cbz	r0, 800e294 <_Quaternion__get_serialized_size+0x38>
 800e25e:	b538      	push	{r3, r4, r5, lr}
 800e260:	2108      	movs	r1, #8
 800e262:	2000      	movs	r0, #0
 800e264:	f7fd fc2e 	bl	800bac4 <ucdr_alignment>
 800e268:	f100 0508 	add.w	r5, r0, #8
 800e26c:	2108      	movs	r1, #8
 800e26e:	4628      	mov	r0, r5
 800e270:	f7fd fc28 	bl	800bac4 <ucdr_alignment>
 800e274:	f100 0408 	add.w	r4, r0, #8
 800e278:	442c      	add	r4, r5
 800e27a:	2108      	movs	r1, #8
 800e27c:	4620      	mov	r0, r4
 800e27e:	f7fd fc21 	bl	800bac4 <ucdr_alignment>
 800e282:	3008      	adds	r0, #8
 800e284:	4404      	add	r4, r0
 800e286:	2108      	movs	r1, #8
 800e288:	4620      	mov	r0, r4
 800e28a:	f7fd fc1b 	bl	800bac4 <ucdr_alignment>
 800e28e:	3008      	adds	r0, #8
 800e290:	4420      	add	r0, r4
 800e292:	bd38      	pop	{r3, r4, r5, pc}
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop

0800e298 <_Quaternion__max_serialized_size>:
 800e298:	b538      	push	{r3, r4, r5, lr}
 800e29a:	2108      	movs	r1, #8
 800e29c:	2000      	movs	r0, #0
 800e29e:	f7fd fc11 	bl	800bac4 <ucdr_alignment>
 800e2a2:	f100 0508 	add.w	r5, r0, #8
 800e2a6:	2108      	movs	r1, #8
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	f7fd fc0b 	bl	800bac4 <ucdr_alignment>
 800e2ae:	f100 0408 	add.w	r4, r0, #8
 800e2b2:	442c      	add	r4, r5
 800e2b4:	2108      	movs	r1, #8
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f7fd fc04 	bl	800bac4 <ucdr_alignment>
 800e2bc:	3008      	adds	r0, #8
 800e2be:	4404      	add	r4, r0
 800e2c0:	2108      	movs	r1, #8
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f7fd fbfe 	bl	800bac4 <ucdr_alignment>
 800e2c8:	3008      	adds	r0, #8
 800e2ca:	4420      	add	r0, r4
 800e2cc:	bd38      	pop	{r3, r4, r5, pc}
 800e2ce:	bf00      	nop

0800e2d0 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800e2d0:	b570      	push	{r4, r5, r6, lr}
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	460c      	mov	r4, r1
 800e2d6:	7003      	strb	r3, [r0, #0]
 800e2d8:	2108      	movs	r1, #8
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f7fd fbf2 	bl	800bac4 <ucdr_alignment>
 800e2e0:	f104 0508 	add.w	r5, r4, #8
 800e2e4:	1946      	adds	r6, r0, r5
 800e2e6:	2108      	movs	r1, #8
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	f7fd fbeb 	bl	800bac4 <ucdr_alignment>
 800e2ee:	f100 0508 	add.w	r5, r0, #8
 800e2f2:	4435      	add	r5, r6
 800e2f4:	2108      	movs	r1, #8
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	f7fd fbe4 	bl	800bac4 <ucdr_alignment>
 800e2fc:	3008      	adds	r0, #8
 800e2fe:	4405      	add	r5, r0
 800e300:	2108      	movs	r1, #8
 800e302:	4628      	mov	r0, r5
 800e304:	f7fd fbde 	bl	800bac4 <ucdr_alignment>
 800e308:	f1c4 0408 	rsb	r4, r4, #8
 800e30c:	4420      	add	r0, r4
 800e30e:	4428      	add	r0, r5
 800e310:	bd70      	pop	{r4, r5, r6, pc}
 800e312:	bf00      	nop

0800e314 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800e314:	4800      	ldr	r0, [pc, #0]	@ (800e318 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800e316:	4770      	bx	lr
 800e318:	20000880 	.word	0x20000880

0800e31c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800e31c:	b538      	push	{r3, r4, r5, lr}
 800e31e:	b158      	cbz	r0, 800e338 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 800e320:	460d      	mov	r5, r1
 800e322:	f7fb ffb7 	bl	800a294 <get_serialized_size_geometry_msgs__msg__Twist>
 800e326:	182c      	adds	r4, r5, r0
 800e328:	2108      	movs	r1, #8
 800e32a:	4620      	mov	r0, r4
 800e32c:	f7fd fbca 	bl	800bac4 <ucdr_alignment>
 800e330:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800e334:	4428      	add	r0, r5
 800e336:	4420      	add	r0, r4
 800e338:	bd38      	pop	{r3, r4, r5, pc}
 800e33a:	bf00      	nop

0800e33c <_TwistWithCovariance__cdr_deserialize>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	460c      	mov	r4, r1
 800e340:	b179      	cbz	r1, 800e362 <_TwistWithCovariance__cdr_deserialize+0x26>
 800e342:	4605      	mov	r5, r0
 800e344:	f7fc f816 	bl	800a374 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800e348:	6843      	ldr	r3, [r0, #4]
 800e34a:	4621      	mov	r1, r4
 800e34c:	68db      	ldr	r3, [r3, #12]
 800e34e:	4628      	mov	r0, r5
 800e350:	4798      	blx	r3
 800e352:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e356:	4628      	mov	r0, r5
 800e358:	2224      	movs	r2, #36	@ 0x24
 800e35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e35e:	f000 b9cd 	b.w	800e6fc <ucdr_deserialize_array_double>
 800e362:	4608      	mov	r0, r1
 800e364:	bd38      	pop	{r3, r4, r5, pc}
 800e366:	bf00      	nop

0800e368 <_TwistWithCovariance__cdr_serialize>:
 800e368:	b188      	cbz	r0, 800e38e <_TwistWithCovariance__cdr_serialize+0x26>
 800e36a:	b538      	push	{r3, r4, r5, lr}
 800e36c:	460d      	mov	r5, r1
 800e36e:	4604      	mov	r4, r0
 800e370:	f7fc f800 	bl	800a374 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800e374:	6843      	ldr	r3, [r0, #4]
 800e376:	4629      	mov	r1, r5
 800e378:	689b      	ldr	r3, [r3, #8]
 800e37a:	4620      	mov	r0, r4
 800e37c:	4798      	blx	r3
 800e37e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e382:	4628      	mov	r0, r5
 800e384:	2224      	movs	r2, #36	@ 0x24
 800e386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e38a:	f000 b963 	b.w	800e654 <ucdr_serialize_array_double>
 800e38e:	4770      	bx	lr

0800e390 <_TwistWithCovariance__get_serialized_size>:
 800e390:	b158      	cbz	r0, 800e3aa <_TwistWithCovariance__get_serialized_size+0x1a>
 800e392:	b510      	push	{r4, lr}
 800e394:	2100      	movs	r1, #0
 800e396:	f7fb ff7d 	bl	800a294 <get_serialized_size_geometry_msgs__msg__Twist>
 800e39a:	2108      	movs	r1, #8
 800e39c:	4604      	mov	r4, r0
 800e39e:	f7fd fb91 	bl	800bac4 <ucdr_alignment>
 800e3a2:	4420      	add	r0, r4
 800e3a4:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800e3a8:	bd10      	pop	{r4, pc}
 800e3aa:	4770      	bx	lr

0800e3ac <_TwistWithCovariance__max_serialized_size>:
 800e3ac:	b510      	push	{r4, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	f10d 0007 	add.w	r0, sp, #7
 800e3b8:	f88d 3007 	strb.w	r3, [sp, #7]
 800e3bc:	f7fb ffcc 	bl	800a358 <max_serialized_size_geometry_msgs__msg__Twist>
 800e3c0:	2108      	movs	r1, #8
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	f7fd fb7e 	bl	800bac4 <ucdr_alignment>
 800e3c8:	4420      	add	r0, r4
 800e3ca:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800e3ce:	b002      	add	sp, #8
 800e3d0:	bd10      	pop	{r4, pc}
 800e3d2:	bf00      	nop

0800e3d4 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	7003      	strb	r3, [r0, #0]
 800e3da:	460c      	mov	r4, r1
 800e3dc:	f7fb ffbc 	bl	800a358 <max_serialized_size_geometry_msgs__msg__Twist>
 800e3e0:	1825      	adds	r5, r4, r0
 800e3e2:	2108      	movs	r1, #8
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	f7fd fb6d 	bl	800bac4 <ucdr_alignment>
 800e3ea:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800e3ee:	4420      	add	r0, r4
 800e3f0:	4428      	add	r0, r5
 800e3f2:	bd38      	pop	{r3, r4, r5, pc}

0800e3f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800e3f4:	4800      	ldr	r0, [pc, #0]	@ (800e3f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 800e3f6:	4770      	bx	lr
 800e3f8:	200008a8 	.word	0x200008a8

0800e3fc <ucdr_serialize_endian_array_char>:
 800e3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e400:	4619      	mov	r1, r3
 800e402:	461f      	mov	r7, r3
 800e404:	4605      	mov	r5, r0
 800e406:	4690      	mov	r8, r2
 800e408:	f7fd fb04 	bl	800ba14 <ucdr_check_buffer_available_for>
 800e40c:	b9e0      	cbnz	r0, 800e448 <ucdr_serialize_endian_array_char+0x4c>
 800e40e:	463e      	mov	r6, r7
 800e410:	e009      	b.n	800e426 <ucdr_serialize_endian_array_char+0x2a>
 800e412:	68a8      	ldr	r0, [r5, #8]
 800e414:	f00a fe59 	bl	80190ca <memcpy>
 800e418:	68ab      	ldr	r3, [r5, #8]
 800e41a:	6928      	ldr	r0, [r5, #16]
 800e41c:	4423      	add	r3, r4
 800e41e:	4420      	add	r0, r4
 800e420:	1b36      	subs	r6, r6, r4
 800e422:	60ab      	str	r3, [r5, #8]
 800e424:	6128      	str	r0, [r5, #16]
 800e426:	4631      	mov	r1, r6
 800e428:	2201      	movs	r2, #1
 800e42a:	4628      	mov	r0, r5
 800e42c:	f7fd fb7a 	bl	800bb24 <ucdr_check_final_buffer_behavior_array>
 800e430:	1bb9      	subs	r1, r7, r6
 800e432:	4441      	add	r1, r8
 800e434:	4604      	mov	r4, r0
 800e436:	4602      	mov	r2, r0
 800e438:	2800      	cmp	r0, #0
 800e43a:	d1ea      	bne.n	800e412 <ucdr_serialize_endian_array_char+0x16>
 800e43c:	2301      	movs	r3, #1
 800e43e:	7da8      	ldrb	r0, [r5, #22]
 800e440:	756b      	strb	r3, [r5, #21]
 800e442:	4058      	eors	r0, r3
 800e444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e448:	463a      	mov	r2, r7
 800e44a:	68a8      	ldr	r0, [r5, #8]
 800e44c:	4641      	mov	r1, r8
 800e44e:	f00a fe3c 	bl	80190ca <memcpy>
 800e452:	68aa      	ldr	r2, [r5, #8]
 800e454:	692b      	ldr	r3, [r5, #16]
 800e456:	443a      	add	r2, r7
 800e458:	443b      	add	r3, r7
 800e45a:	60aa      	str	r2, [r5, #8]
 800e45c:	612b      	str	r3, [r5, #16]
 800e45e:	e7ed      	b.n	800e43c <ucdr_serialize_endian_array_char+0x40>

0800e460 <ucdr_deserialize_endian_array_char>:
 800e460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e464:	4619      	mov	r1, r3
 800e466:	461f      	mov	r7, r3
 800e468:	4605      	mov	r5, r0
 800e46a:	4690      	mov	r8, r2
 800e46c:	f7fd fad2 	bl	800ba14 <ucdr_check_buffer_available_for>
 800e470:	b9e0      	cbnz	r0, 800e4ac <ucdr_deserialize_endian_array_char+0x4c>
 800e472:	463e      	mov	r6, r7
 800e474:	e009      	b.n	800e48a <ucdr_deserialize_endian_array_char+0x2a>
 800e476:	68a9      	ldr	r1, [r5, #8]
 800e478:	f00a fe27 	bl	80190ca <memcpy>
 800e47c:	68ab      	ldr	r3, [r5, #8]
 800e47e:	6928      	ldr	r0, [r5, #16]
 800e480:	4423      	add	r3, r4
 800e482:	4420      	add	r0, r4
 800e484:	1b36      	subs	r6, r6, r4
 800e486:	60ab      	str	r3, [r5, #8]
 800e488:	6128      	str	r0, [r5, #16]
 800e48a:	2201      	movs	r2, #1
 800e48c:	4631      	mov	r1, r6
 800e48e:	4628      	mov	r0, r5
 800e490:	f7fd fb48 	bl	800bb24 <ucdr_check_final_buffer_behavior_array>
 800e494:	4604      	mov	r4, r0
 800e496:	1bb8      	subs	r0, r7, r6
 800e498:	4440      	add	r0, r8
 800e49a:	4622      	mov	r2, r4
 800e49c:	2c00      	cmp	r4, #0
 800e49e:	d1ea      	bne.n	800e476 <ucdr_deserialize_endian_array_char+0x16>
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	7da8      	ldrb	r0, [r5, #22]
 800e4a4:	756b      	strb	r3, [r5, #21]
 800e4a6:	4058      	eors	r0, r3
 800e4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ac:	463a      	mov	r2, r7
 800e4ae:	68a9      	ldr	r1, [r5, #8]
 800e4b0:	4640      	mov	r0, r8
 800e4b2:	f00a fe0a 	bl	80190ca <memcpy>
 800e4b6:	68aa      	ldr	r2, [r5, #8]
 800e4b8:	692b      	ldr	r3, [r5, #16]
 800e4ba:	443a      	add	r2, r7
 800e4bc:	443b      	add	r3, r7
 800e4be:	60aa      	str	r2, [r5, #8]
 800e4c0:	612b      	str	r3, [r5, #16]
 800e4c2:	e7ed      	b.n	800e4a0 <ucdr_deserialize_endian_array_char+0x40>

0800e4c4 <ucdr_serialize_array_uint8_t>:
 800e4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c8:	4688      	mov	r8, r1
 800e4ca:	4611      	mov	r1, r2
 800e4cc:	4617      	mov	r7, r2
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	f7fd faa0 	bl	800ba14 <ucdr_check_buffer_available_for>
 800e4d4:	b9e0      	cbnz	r0, 800e510 <ucdr_serialize_array_uint8_t+0x4c>
 800e4d6:	463e      	mov	r6, r7
 800e4d8:	e009      	b.n	800e4ee <ucdr_serialize_array_uint8_t+0x2a>
 800e4da:	68a8      	ldr	r0, [r5, #8]
 800e4dc:	f00a fdf5 	bl	80190ca <memcpy>
 800e4e0:	68aa      	ldr	r2, [r5, #8]
 800e4e2:	692b      	ldr	r3, [r5, #16]
 800e4e4:	4422      	add	r2, r4
 800e4e6:	4423      	add	r3, r4
 800e4e8:	1b36      	subs	r6, r6, r4
 800e4ea:	60aa      	str	r2, [r5, #8]
 800e4ec:	612b      	str	r3, [r5, #16]
 800e4ee:	4631      	mov	r1, r6
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f7fd fb16 	bl	800bb24 <ucdr_check_final_buffer_behavior_array>
 800e4f8:	1bb9      	subs	r1, r7, r6
 800e4fa:	4441      	add	r1, r8
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	4602      	mov	r2, r0
 800e500:	2800      	cmp	r0, #0
 800e502:	d1ea      	bne.n	800e4da <ucdr_serialize_array_uint8_t+0x16>
 800e504:	2301      	movs	r3, #1
 800e506:	7da8      	ldrb	r0, [r5, #22]
 800e508:	756b      	strb	r3, [r5, #21]
 800e50a:	4058      	eors	r0, r3
 800e50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e510:	463a      	mov	r2, r7
 800e512:	68a8      	ldr	r0, [r5, #8]
 800e514:	4641      	mov	r1, r8
 800e516:	f00a fdd8 	bl	80190ca <memcpy>
 800e51a:	68aa      	ldr	r2, [r5, #8]
 800e51c:	692b      	ldr	r3, [r5, #16]
 800e51e:	443a      	add	r2, r7
 800e520:	443b      	add	r3, r7
 800e522:	60aa      	str	r2, [r5, #8]
 800e524:	612b      	str	r3, [r5, #16]
 800e526:	e7ed      	b.n	800e504 <ucdr_serialize_array_uint8_t+0x40>

0800e528 <ucdr_serialize_endian_array_uint8_t>:
 800e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52c:	4619      	mov	r1, r3
 800e52e:	461f      	mov	r7, r3
 800e530:	4605      	mov	r5, r0
 800e532:	4690      	mov	r8, r2
 800e534:	f7fd fa6e 	bl	800ba14 <ucdr_check_buffer_available_for>
 800e538:	b9e0      	cbnz	r0, 800e574 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e53a:	463e      	mov	r6, r7
 800e53c:	e009      	b.n	800e552 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800e53e:	68a8      	ldr	r0, [r5, #8]
 800e540:	f00a fdc3 	bl	80190ca <memcpy>
 800e544:	68ab      	ldr	r3, [r5, #8]
 800e546:	6928      	ldr	r0, [r5, #16]
 800e548:	4423      	add	r3, r4
 800e54a:	4420      	add	r0, r4
 800e54c:	1b36      	subs	r6, r6, r4
 800e54e:	60ab      	str	r3, [r5, #8]
 800e550:	6128      	str	r0, [r5, #16]
 800e552:	4631      	mov	r1, r6
 800e554:	2201      	movs	r2, #1
 800e556:	4628      	mov	r0, r5
 800e558:	f7fd fae4 	bl	800bb24 <ucdr_check_final_buffer_behavior_array>
 800e55c:	1bb9      	subs	r1, r7, r6
 800e55e:	4441      	add	r1, r8
 800e560:	4604      	mov	r4, r0
 800e562:	4602      	mov	r2, r0
 800e564:	2800      	cmp	r0, #0
 800e566:	d1ea      	bne.n	800e53e <ucdr_serialize_endian_array_uint8_t+0x16>
 800e568:	2301      	movs	r3, #1
 800e56a:	7da8      	ldrb	r0, [r5, #22]
 800e56c:	756b      	strb	r3, [r5, #21]
 800e56e:	4058      	eors	r0, r3
 800e570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e574:	463a      	mov	r2, r7
 800e576:	68a8      	ldr	r0, [r5, #8]
 800e578:	4641      	mov	r1, r8
 800e57a:	f00a fda6 	bl	80190ca <memcpy>
 800e57e:	68aa      	ldr	r2, [r5, #8]
 800e580:	692b      	ldr	r3, [r5, #16]
 800e582:	443a      	add	r2, r7
 800e584:	443b      	add	r3, r7
 800e586:	60aa      	str	r2, [r5, #8]
 800e588:	612b      	str	r3, [r5, #16]
 800e58a:	e7ed      	b.n	800e568 <ucdr_serialize_endian_array_uint8_t+0x40>

0800e58c <ucdr_deserialize_array_uint8_t>:
 800e58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e590:	4688      	mov	r8, r1
 800e592:	4611      	mov	r1, r2
 800e594:	4617      	mov	r7, r2
 800e596:	4605      	mov	r5, r0
 800e598:	f7fd fa3c 	bl	800ba14 <ucdr_check_buffer_available_for>
 800e59c:	b9e0      	cbnz	r0, 800e5d8 <ucdr_deserialize_array_uint8_t+0x4c>
 800e59e:	463e      	mov	r6, r7
 800e5a0:	e009      	b.n	800e5b6 <ucdr_deserialize_array_uint8_t+0x2a>
 800e5a2:	68a9      	ldr	r1, [r5, #8]
 800e5a4:	f00a fd91 	bl	80190ca <memcpy>
 800e5a8:	68aa      	ldr	r2, [r5, #8]
 800e5aa:	692b      	ldr	r3, [r5, #16]
 800e5ac:	4422      	add	r2, r4
 800e5ae:	4423      	add	r3, r4
 800e5b0:	1b36      	subs	r6, r6, r4
 800e5b2:	60aa      	str	r2, [r5, #8]
 800e5b4:	612b      	str	r3, [r5, #16]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	4631      	mov	r1, r6
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	f7fd fab2 	bl	800bb24 <ucdr_check_final_buffer_behavior_array>
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	1bb8      	subs	r0, r7, r6
 800e5c4:	4440      	add	r0, r8
 800e5c6:	4622      	mov	r2, r4
 800e5c8:	2c00      	cmp	r4, #0
 800e5ca:	d1ea      	bne.n	800e5a2 <ucdr_deserialize_array_uint8_t+0x16>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	7da8      	ldrb	r0, [r5, #22]
 800e5d0:	756b      	strb	r3, [r5, #21]
 800e5d2:	4058      	eors	r0, r3
 800e5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d8:	463a      	mov	r2, r7
 800e5da:	68a9      	ldr	r1, [r5, #8]
 800e5dc:	4640      	mov	r0, r8
 800e5de:	f00a fd74 	bl	80190ca <memcpy>
 800e5e2:	68aa      	ldr	r2, [r5, #8]
 800e5e4:	692b      	ldr	r3, [r5, #16]
 800e5e6:	443a      	add	r2, r7
 800e5e8:	443b      	add	r3, r7
 800e5ea:	60aa      	str	r2, [r5, #8]
 800e5ec:	612b      	str	r3, [r5, #16]
 800e5ee:	e7ed      	b.n	800e5cc <ucdr_deserialize_array_uint8_t+0x40>

0800e5f0 <ucdr_deserialize_endian_array_uint8_t>:
 800e5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	461f      	mov	r7, r3
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	4690      	mov	r8, r2
 800e5fc:	f7fd fa0a 	bl	800ba14 <ucdr_check_buffer_available_for>
 800e600:	b9e0      	cbnz	r0, 800e63c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e602:	463e      	mov	r6, r7
 800e604:	e009      	b.n	800e61a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800e606:	68a9      	ldr	r1, [r5, #8]
 800e608:	f00a fd5f 	bl	80190ca <memcpy>
 800e60c:	68ab      	ldr	r3, [r5, #8]
 800e60e:	6928      	ldr	r0, [r5, #16]
 800e610:	4423      	add	r3, r4
 800e612:	4420      	add	r0, r4
 800e614:	1b36      	subs	r6, r6, r4
 800e616:	60ab      	str	r3, [r5, #8]
 800e618:	6128      	str	r0, [r5, #16]
 800e61a:	2201      	movs	r2, #1
 800e61c:	4631      	mov	r1, r6
 800e61e:	4628      	mov	r0, r5
 800e620:	f7fd fa80 	bl	800bb24 <ucdr_check_final_buffer_behavior_array>
 800e624:	4604      	mov	r4, r0
 800e626:	1bb8      	subs	r0, r7, r6
 800e628:	4440      	add	r0, r8
 800e62a:	4622      	mov	r2, r4
 800e62c:	2c00      	cmp	r4, #0
 800e62e:	d1ea      	bne.n	800e606 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e630:	2301      	movs	r3, #1
 800e632:	7da8      	ldrb	r0, [r5, #22]
 800e634:	756b      	strb	r3, [r5, #21]
 800e636:	4058      	eors	r0, r3
 800e638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e63c:	463a      	mov	r2, r7
 800e63e:	68a9      	ldr	r1, [r5, #8]
 800e640:	4640      	mov	r0, r8
 800e642:	f00a fd42 	bl	80190ca <memcpy>
 800e646:	68aa      	ldr	r2, [r5, #8]
 800e648:	692b      	ldr	r3, [r5, #16]
 800e64a:	443a      	add	r2, r7
 800e64c:	443b      	add	r3, r7
 800e64e:	60aa      	str	r2, [r5, #8]
 800e650:	612b      	str	r3, [r5, #16]
 800e652:	e7ed      	b.n	800e630 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800e654 <ucdr_serialize_array_double>:
 800e654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e658:	460e      	mov	r6, r1
 800e65a:	2108      	movs	r1, #8
 800e65c:	4604      	mov	r4, r0
 800e65e:	4617      	mov	r7, r2
 800e660:	f7fd fa38 	bl	800bad4 <ucdr_buffer_alignment>
 800e664:	4601      	mov	r1, r0
 800e666:	4620      	mov	r0, r4
 800e668:	7d65      	ldrb	r5, [r4, #21]
 800e66a:	f7fd fa77 	bl	800bb5c <ucdr_advance_buffer>
 800e66e:	7d21      	ldrb	r1, [r4, #20]
 800e670:	7565      	strb	r5, [r4, #21]
 800e672:	2901      	cmp	r1, #1
 800e674:	d010      	beq.n	800e698 <ucdr_serialize_array_double+0x44>
 800e676:	b157      	cbz	r7, 800e68e <ucdr_serialize_array_double+0x3a>
 800e678:	2500      	movs	r5, #0
 800e67a:	e000      	b.n	800e67e <ucdr_serialize_array_double+0x2a>
 800e67c:	7d21      	ldrb	r1, [r4, #20]
 800e67e:	ecb6 0b02 	vldmia	r6!, {d0}
 800e682:	4620      	mov	r0, r4
 800e684:	3501      	adds	r5, #1
 800e686:	f7fc ff5f 	bl	800b548 <ucdr_serialize_endian_double>
 800e68a:	42af      	cmp	r7, r5
 800e68c:	d1f6      	bne.n	800e67c <ucdr_serialize_array_double+0x28>
 800e68e:	7da0      	ldrb	r0, [r4, #22]
 800e690:	f080 0001 	eor.w	r0, r0, #1
 800e694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e698:	00ff      	lsls	r7, r7, #3
 800e69a:	4639      	mov	r1, r7
 800e69c:	4620      	mov	r0, r4
 800e69e:	f7fd f9b9 	bl	800ba14 <ucdr_check_buffer_available_for>
 800e6a2:	b9f8      	cbnz	r0, 800e6e4 <ucdr_serialize_array_double+0x90>
 800e6a4:	46b8      	mov	r8, r7
 800e6a6:	e00a      	b.n	800e6be <ucdr_serialize_array_double+0x6a>
 800e6a8:	68a0      	ldr	r0, [r4, #8]
 800e6aa:	f00a fd0e 	bl	80190ca <memcpy>
 800e6ae:	68a2      	ldr	r2, [r4, #8]
 800e6b0:	6923      	ldr	r3, [r4, #16]
 800e6b2:	442a      	add	r2, r5
 800e6b4:	442b      	add	r3, r5
 800e6b6:	eba8 0805 	sub.w	r8, r8, r5
 800e6ba:	60a2      	str	r2, [r4, #8]
 800e6bc:	6123      	str	r3, [r4, #16]
 800e6be:	4641      	mov	r1, r8
 800e6c0:	2208      	movs	r2, #8
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	f7fd fa2e 	bl	800bb24 <ucdr_check_final_buffer_behavior_array>
 800e6c8:	eba7 0108 	sub.w	r1, r7, r8
 800e6cc:	4431      	add	r1, r6
 800e6ce:	4605      	mov	r5, r0
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	d1e8      	bne.n	800e6a8 <ucdr_serialize_array_double+0x54>
 800e6d6:	7da0      	ldrb	r0, [r4, #22]
 800e6d8:	2308      	movs	r3, #8
 800e6da:	7563      	strb	r3, [r4, #21]
 800e6dc:	f080 0001 	eor.w	r0, r0, #1
 800e6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6e4:	463a      	mov	r2, r7
 800e6e6:	68a0      	ldr	r0, [r4, #8]
 800e6e8:	4631      	mov	r1, r6
 800e6ea:	f00a fcee 	bl	80190ca <memcpy>
 800e6ee:	68a2      	ldr	r2, [r4, #8]
 800e6f0:	6923      	ldr	r3, [r4, #16]
 800e6f2:	443a      	add	r2, r7
 800e6f4:	441f      	add	r7, r3
 800e6f6:	60a2      	str	r2, [r4, #8]
 800e6f8:	6127      	str	r7, [r4, #16]
 800e6fa:	e7ec      	b.n	800e6d6 <ucdr_serialize_array_double+0x82>

0800e6fc <ucdr_deserialize_array_double>:
 800e6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e700:	460e      	mov	r6, r1
 800e702:	2108      	movs	r1, #8
 800e704:	4604      	mov	r4, r0
 800e706:	4617      	mov	r7, r2
 800e708:	f7fd f9e4 	bl	800bad4 <ucdr_buffer_alignment>
 800e70c:	4601      	mov	r1, r0
 800e70e:	4620      	mov	r0, r4
 800e710:	7d65      	ldrb	r5, [r4, #21]
 800e712:	f7fd fa23 	bl	800bb5c <ucdr_advance_buffer>
 800e716:	7d21      	ldrb	r1, [r4, #20]
 800e718:	7565      	strb	r5, [r4, #21]
 800e71a:	2901      	cmp	r1, #1
 800e71c:	d011      	beq.n	800e742 <ucdr_deserialize_array_double+0x46>
 800e71e:	b15f      	cbz	r7, 800e738 <ucdr_deserialize_array_double+0x3c>
 800e720:	2500      	movs	r5, #0
 800e722:	e000      	b.n	800e726 <ucdr_deserialize_array_double+0x2a>
 800e724:	7d21      	ldrb	r1, [r4, #20]
 800e726:	4632      	mov	r2, r6
 800e728:	4620      	mov	r0, r4
 800e72a:	3501      	adds	r5, #1
 800e72c:	f7fd f8a4 	bl	800b878 <ucdr_deserialize_endian_double>
 800e730:	42af      	cmp	r7, r5
 800e732:	f106 0608 	add.w	r6, r6, #8
 800e736:	d1f5      	bne.n	800e724 <ucdr_deserialize_array_double+0x28>
 800e738:	7da0      	ldrb	r0, [r4, #22]
 800e73a:	f080 0001 	eor.w	r0, r0, #1
 800e73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e742:	00ff      	lsls	r7, r7, #3
 800e744:	4639      	mov	r1, r7
 800e746:	4620      	mov	r0, r4
 800e748:	f7fd f964 	bl	800ba14 <ucdr_check_buffer_available_for>
 800e74c:	b9f8      	cbnz	r0, 800e78e <ucdr_deserialize_array_double+0x92>
 800e74e:	46b8      	mov	r8, r7
 800e750:	e00a      	b.n	800e768 <ucdr_deserialize_array_double+0x6c>
 800e752:	68a1      	ldr	r1, [r4, #8]
 800e754:	f00a fcb9 	bl	80190ca <memcpy>
 800e758:	68a2      	ldr	r2, [r4, #8]
 800e75a:	6923      	ldr	r3, [r4, #16]
 800e75c:	442a      	add	r2, r5
 800e75e:	442b      	add	r3, r5
 800e760:	eba8 0805 	sub.w	r8, r8, r5
 800e764:	60a2      	str	r2, [r4, #8]
 800e766:	6123      	str	r3, [r4, #16]
 800e768:	2208      	movs	r2, #8
 800e76a:	4641      	mov	r1, r8
 800e76c:	4620      	mov	r0, r4
 800e76e:	f7fd f9d9 	bl	800bb24 <ucdr_check_final_buffer_behavior_array>
 800e772:	4605      	mov	r5, r0
 800e774:	eba7 0008 	sub.w	r0, r7, r8
 800e778:	4430      	add	r0, r6
 800e77a:	462a      	mov	r2, r5
 800e77c:	2d00      	cmp	r5, #0
 800e77e:	d1e8      	bne.n	800e752 <ucdr_deserialize_array_double+0x56>
 800e780:	7da0      	ldrb	r0, [r4, #22]
 800e782:	2308      	movs	r3, #8
 800e784:	7563      	strb	r3, [r4, #21]
 800e786:	f080 0001 	eor.w	r0, r0, #1
 800e78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e78e:	463a      	mov	r2, r7
 800e790:	68a1      	ldr	r1, [r4, #8]
 800e792:	4630      	mov	r0, r6
 800e794:	f00a fc99 	bl	80190ca <memcpy>
 800e798:	68a2      	ldr	r2, [r4, #8]
 800e79a:	6923      	ldr	r3, [r4, #16]
 800e79c:	443a      	add	r2, r7
 800e79e:	441f      	add	r7, r3
 800e7a0:	60a2      	str	r2, [r4, #8]
 800e7a2:	6127      	str	r7, [r4, #16]
 800e7a4:	e7ec      	b.n	800e780 <ucdr_deserialize_array_double+0x84>
 800e7a6:	bf00      	nop

0800e7a8 <ucdr_serialize_sequence_char>:
 800e7a8:	b570      	push	{r4, r5, r6, lr}
 800e7aa:	4615      	mov	r5, r2
 800e7ac:	460e      	mov	r6, r1
 800e7ae:	7d01      	ldrb	r1, [r0, #20]
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	f7fc f94f 	bl	800aa54 <ucdr_serialize_endian_uint32_t>
 800e7b6:	b90d      	cbnz	r5, 800e7bc <ucdr_serialize_sequence_char+0x14>
 800e7b8:	2001      	movs	r0, #1
 800e7ba:	bd70      	pop	{r4, r5, r6, pc}
 800e7bc:	7d21      	ldrb	r1, [r4, #20]
 800e7be:	462b      	mov	r3, r5
 800e7c0:	4632      	mov	r2, r6
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7c8:	f7ff be18 	b.w	800e3fc <ucdr_serialize_endian_array_char>

0800e7cc <ucdr_deserialize_sequence_char>:
 800e7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d0:	461d      	mov	r5, r3
 800e7d2:	4616      	mov	r6, r2
 800e7d4:	460f      	mov	r7, r1
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	7d01      	ldrb	r1, [r0, #20]
 800e7da:	4604      	mov	r4, r0
 800e7dc:	f7fc fa62 	bl	800aca4 <ucdr_deserialize_endian_uint32_t>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	429e      	cmp	r6, r3
 800e7e4:	bf3c      	itt	cc
 800e7e6:	2201      	movcc	r2, #1
 800e7e8:	75a2      	strbcc	r2, [r4, #22]
 800e7ea:	b913      	cbnz	r3, 800e7f2 <ucdr_deserialize_sequence_char+0x26>
 800e7ec:	2001      	movs	r0, #1
 800e7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f2:	7d21      	ldrb	r1, [r4, #20]
 800e7f4:	463a      	mov	r2, r7
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7fc:	f7ff be30 	b.w	800e460 <ucdr_deserialize_endian_array_char>

0800e800 <ucdr_serialize_sequence_uint8_t>:
 800e800:	b570      	push	{r4, r5, r6, lr}
 800e802:	4615      	mov	r5, r2
 800e804:	460e      	mov	r6, r1
 800e806:	7d01      	ldrb	r1, [r0, #20]
 800e808:	4604      	mov	r4, r0
 800e80a:	f7fc f923 	bl	800aa54 <ucdr_serialize_endian_uint32_t>
 800e80e:	b90d      	cbnz	r5, 800e814 <ucdr_serialize_sequence_uint8_t+0x14>
 800e810:	2001      	movs	r0, #1
 800e812:	bd70      	pop	{r4, r5, r6, pc}
 800e814:	7d21      	ldrb	r1, [r4, #20]
 800e816:	462b      	mov	r3, r5
 800e818:	4632      	mov	r2, r6
 800e81a:	4620      	mov	r0, r4
 800e81c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e820:	f7ff be82 	b.w	800e528 <ucdr_serialize_endian_array_uint8_t>

0800e824 <ucdr_deserialize_sequence_uint8_t>:
 800e824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e828:	461d      	mov	r5, r3
 800e82a:	4616      	mov	r6, r2
 800e82c:	460f      	mov	r7, r1
 800e82e:	461a      	mov	r2, r3
 800e830:	7d01      	ldrb	r1, [r0, #20]
 800e832:	4604      	mov	r4, r0
 800e834:	f7fc fa36 	bl	800aca4 <ucdr_deserialize_endian_uint32_t>
 800e838:	682b      	ldr	r3, [r5, #0]
 800e83a:	429e      	cmp	r6, r3
 800e83c:	bf3c      	itt	cc
 800e83e:	2201      	movcc	r2, #1
 800e840:	75a2      	strbcc	r2, [r4, #22]
 800e842:	b913      	cbnz	r3, 800e84a <ucdr_deserialize_sequence_uint8_t+0x26>
 800e844:	2001      	movs	r0, #1
 800e846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e84a:	7d21      	ldrb	r1, [r4, #20]
 800e84c:	463a      	mov	r2, r7
 800e84e:	4620      	mov	r0, r4
 800e850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e854:	f7ff becc 	b.w	800e5f0 <ucdr_deserialize_endian_array_uint8_t>

0800e858 <uxr_buffer_delete_entity>:
 800e858:	b510      	push	{r4, lr}
 800e85a:	2300      	movs	r3, #0
 800e85c:	b08e      	sub	sp, #56	@ 0x38
 800e85e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e862:	2303      	movs	r3, #3
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	2204      	movs	r2, #4
 800e868:	ab06      	add	r3, sp, #24
 800e86a:	4604      	mov	r4, r0
 800e86c:	9103      	str	r1, [sp, #12]
 800e86e:	f001 f951 	bl	800fb14 <uxr_prepare_stream_to_write_submessage>
 800e872:	b918      	cbnz	r0, 800e87c <uxr_buffer_delete_entity+0x24>
 800e874:	4604      	mov	r4, r0
 800e876:	4620      	mov	r0, r4
 800e878:	b00e      	add	sp, #56	@ 0x38
 800e87a:	bd10      	pop	{r4, pc}
 800e87c:	9902      	ldr	r1, [sp, #8]
 800e87e:	aa05      	add	r2, sp, #20
 800e880:	4620      	mov	r0, r4
 800e882:	f001 fa7d 	bl	800fd80 <uxr_init_base_object_request>
 800e886:	a905      	add	r1, sp, #20
 800e888:	4604      	mov	r4, r0
 800e88a:	a806      	add	r0, sp, #24
 800e88c:	f002 fcce 	bl	801122c <uxr_serialize_DELETE_Payload>
 800e890:	4620      	mov	r0, r4
 800e892:	b00e      	add	sp, #56	@ 0x38
 800e894:	bd10      	pop	{r4, pc}
 800e896:	bf00      	nop

0800e898 <uxr_common_create_entity>:
 800e898:	b510      	push	{r4, lr}
 800e89a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e89e:	b08c      	sub	sp, #48	@ 0x30
 800e8a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e8a4:	f1bc 0f01 	cmp.w	ip, #1
 800e8a8:	bf0c      	ite	eq
 800e8aa:	f003 0201 	andeq.w	r2, r3, #1
 800e8ae:	2200      	movne	r2, #0
 800e8b0:	330e      	adds	r3, #14
 800e8b2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e8b6:	9101      	str	r1, [sp, #4]
 800e8b8:	441a      	add	r2, r3
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	9903      	ldr	r1, [sp, #12]
 800e8c0:	ab04      	add	r3, sp, #16
 800e8c2:	b292      	uxth	r2, r2
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	f001 f925 	bl	800fb14 <uxr_prepare_stream_to_write_submessage>
 800e8ca:	b918      	cbnz	r0, 800e8d4 <uxr_common_create_entity+0x3c>
 800e8cc:	4604      	mov	r4, r0
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	b00c      	add	sp, #48	@ 0x30
 800e8d2:	bd10      	pop	{r4, pc}
 800e8d4:	9902      	ldr	r1, [sp, #8]
 800e8d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f001 fa51 	bl	800fd80 <uxr_init_base_object_request>
 800e8de:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	a804      	add	r0, sp, #16
 800e8e4:	f002 fbfe 	bl	80110e4 <uxr_serialize_CREATE_Payload>
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	b00c      	add	sp, #48	@ 0x30
 800e8ec:	bd10      	pop	{r4, pc}
 800e8ee:	bf00      	nop

0800e8f0 <uxr_buffer_create_participant_bin>:
 800e8f0:	b570      	push	{r4, r5, r6, lr}
 800e8f2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e8f6:	ac11      	add	r4, sp, #68	@ 0x44
 800e8f8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e8fc:	2303      	movs	r3, #3
 800e8fe:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e902:	7223      	strb	r3, [r4, #8]
 800e904:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e906:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e90a:	2201      	movs	r2, #1
 800e90c:	2100      	movs	r1, #0
 800e90e:	4605      	mov	r5, r0
 800e910:	7122      	strb	r2, [r4, #4]
 800e912:	f88d 1014 	strb.w	r1, [sp, #20]
 800e916:	b1cb      	cbz	r3, 800e94c <uxr_buffer_create_participant_bin+0x5c>
 800e918:	f88d 201c 	strb.w	r2, [sp, #28]
 800e91c:	9308      	str	r3, [sp, #32]
 800e91e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e922:	a915      	add	r1, sp, #84	@ 0x54
 800e924:	a809      	add	r0, sp, #36	@ 0x24
 800e926:	f7fd f8c9 	bl	800babc <ucdr_init_buffer>
 800e92a:	a905      	add	r1, sp, #20
 800e92c:	a809      	add	r0, sp, #36	@ 0x24
 800e92e:	f001 ffbb 	bl	80108a8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e934:	9600      	str	r6, [sp, #0]
 800e936:	9401      	str	r4, [sp, #4]
 800e938:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e93c:	60e3      	str	r3, [r4, #12]
 800e93e:	4628      	mov	r0, r5
 800e940:	b29b      	uxth	r3, r3
 800e942:	f7ff ffa9 	bl	800e898 <uxr_common_create_entity>
 800e946:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e94a:	bd70      	pop	{r4, r5, r6, pc}
 800e94c:	f88d 301c 	strb.w	r3, [sp, #28]
 800e950:	e7e5      	b.n	800e91e <uxr_buffer_create_participant_bin+0x2e>
 800e952:	bf00      	nop

0800e954 <uxr_buffer_create_topic_bin>:
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e95a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e95e:	9105      	str	r1, [sp, #20]
 800e960:	4605      	mov	r5, r0
 800e962:	a997      	add	r1, sp, #604	@ 0x25c
 800e964:	4618      	mov	r0, r3
 800e966:	2302      	movs	r3, #2
 800e968:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e96c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e970:	f000 f996 	bl	800eca0 <uxr_object_id_to_raw>
 800e974:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e976:	9306      	str	r3, [sp, #24]
 800e978:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e97a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e97c:	2303      	movs	r3, #3
 800e97e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e982:	2301      	movs	r3, #1
 800e984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e988:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e98c:	a917      	add	r1, sp, #92	@ 0x5c
 800e98e:	2300      	movs	r3, #0
 800e990:	a80b      	add	r0, sp, #44	@ 0x2c
 800e992:	f88d 301c 	strb.w	r3, [sp, #28]
 800e996:	f7fd f891 	bl	800babc <ucdr_init_buffer>
 800e99a:	a906      	add	r1, sp, #24
 800e99c:	a80b      	add	r0, sp, #44	@ 0x2c
 800e99e:	f001 ffa5 	bl	80108ec <uxr_serialize_OBJK_Topic_Binary>
 800e9a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9a4:	9316      	str	r3, [sp, #88]	@ 0x58
 800e9a6:	ac13      	add	r4, sp, #76	@ 0x4c
 800e9a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e9ac:	9600      	str	r6, [sp, #0]
 800e9ae:	9401      	str	r4, [sp, #4]
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f7ff ff70 	bl	800e898 <uxr_common_create_entity>
 800e9b8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e9bc:	bd70      	pop	{r4, r5, r6, pc}
 800e9be:	bf00      	nop

0800e9c0 <uxr_buffer_create_publisher_bin>:
 800e9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9c2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800e9c6:	4605      	mov	r5, r0
 800e9c8:	9105      	str	r1, [sp, #20]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	2603      	movs	r6, #3
 800e9ce:	a992      	add	r1, sp, #584	@ 0x248
 800e9d0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e9d4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800e9d8:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800e9dc:	f000 f960 	bl	800eca0 <uxr_object_id_to_raw>
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9e6:	a912      	add	r1, sp, #72	@ 0x48
 800e9e8:	a806      	add	r0, sp, #24
 800e9ea:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e9ee:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e9f2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800e9f6:	f7fd f861 	bl	800babc <ucdr_init_buffer>
 800e9fa:	a993      	add	r1, sp, #588	@ 0x24c
 800e9fc:	a806      	add	r0, sp, #24
 800e9fe:	f002 f829 	bl	8010a54 <uxr_serialize_OBJK_Publisher_Binary>
 800ea02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea04:	9311      	str	r3, [sp, #68]	@ 0x44
 800ea06:	ac0e      	add	r4, sp, #56	@ 0x38
 800ea08:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ea0c:	9700      	str	r7, [sp, #0]
 800ea0e:	9401      	str	r4, [sp, #4]
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	4628      	mov	r0, r5
 800ea14:	f7ff ff40 	bl	800e898 <uxr_common_create_entity>
 800ea18:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800ea1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea1e:	bf00      	nop

0800ea20 <uxr_buffer_create_subscriber_bin>:
 800ea20:	b570      	push	{r4, r5, r6, lr}
 800ea22:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800ea26:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ea2a:	9105      	str	r1, [sp, #20]
 800ea2c:	4605      	mov	r5, r0
 800ea2e:	a992      	add	r1, sp, #584	@ 0x248
 800ea30:	4618      	mov	r0, r3
 800ea32:	2304      	movs	r3, #4
 800ea34:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800ea38:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800ea3c:	f000 f930 	bl	800eca0 <uxr_object_id_to_raw>
 800ea40:	2300      	movs	r3, #0
 800ea42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea46:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800ea4a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800ea4e:	a912      	add	r1, sp, #72	@ 0x48
 800ea50:	2303      	movs	r3, #3
 800ea52:	a806      	add	r0, sp, #24
 800ea54:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800ea58:	f7fd f830 	bl	800babc <ucdr_init_buffer>
 800ea5c:	a993      	add	r1, sp, #588	@ 0x24c
 800ea5e:	a806      	add	r0, sp, #24
 800ea60:	f002 f8a8 	bl	8010bb4 <uxr_serialize_OBJK_Subscriber_Binary>
 800ea64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea66:	9311      	str	r3, [sp, #68]	@ 0x44
 800ea68:	ac0e      	add	r4, sp, #56	@ 0x38
 800ea6a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ea6e:	9600      	str	r6, [sp, #0]
 800ea70:	9401      	str	r4, [sp, #4]
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	4628      	mov	r0, r5
 800ea76:	f7ff ff0f 	bl	800e898 <uxr_common_create_entity>
 800ea7a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800ea7e:	bd70      	pop	{r4, r5, r6, pc}

0800ea80 <uxr_buffer_create_datawriter_bin>:
 800ea80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea84:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ea88:	ac1d      	add	r4, sp, #116	@ 0x74
 800ea8a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ea8e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800ea92:	9105      	str	r1, [sp, #20]
 800ea94:	4606      	mov	r6, r0
 800ea96:	a9a1      	add	r1, sp, #644	@ 0x284
 800ea98:	4618      	mov	r0, r3
 800ea9a:	2305      	movs	r3, #5
 800ea9c:	7123      	strb	r3, [r4, #4]
 800ea9e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800eaa2:	2703      	movs	r7, #3
 800eaa4:	f000 f8fc 	bl	800eca0 <uxr_object_id_to_raw>
 800eaa8:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800eaaa:	7227      	strb	r7, [r4, #8]
 800eaac:	a90e      	add	r1, sp, #56	@ 0x38
 800eaae:	f000 f8f7 	bl	800eca0 <uxr_object_id_to_raw>
 800eab2:	2300      	movs	r3, #0
 800eab4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800eab8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800eabc:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800eac0:	3d00      	subs	r5, #0
 800eac2:	bf18      	it	ne
 800eac4:	2501      	movne	r5, #1
 800eac6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800eaca:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800eace:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ead2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ead6:	2301      	movs	r3, #1
 800ead8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800eadc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800eae0:	bb8a      	cbnz	r2, 800eb46 <uxr_buffer_create_datawriter_bin+0xc6>
 800eae2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800eae6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800eaea:	f04f 0c13 	mov.w	ip, #19
 800eaee:	250b      	movs	r5, #11
 800eaf0:	2221      	movs	r2, #33	@ 0x21
 800eaf2:	2111      	movs	r1, #17
 800eaf4:	2009      	movs	r0, #9
 800eaf6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800eafa:	b923      	cbnz	r3, 800eb06 <uxr_buffer_create_datawriter_bin+0x86>
 800eafc:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800eb00:	4672      	mov	r2, lr
 800eb02:	4661      	mov	r1, ip
 800eb04:	4628      	mov	r0, r5
 800eb06:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d025      	beq.n	800eb5a <uxr_buffer_create_datawriter_bin+0xda>
 800eb0e:	2b03      	cmp	r3, #3
 800eb10:	d029      	beq.n	800eb66 <uxr_buffer_create_datawriter_bin+0xe6>
 800eb12:	b32b      	cbz	r3, 800eb60 <uxr_buffer_create_datawriter_bin+0xe0>
 800eb14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb18:	a921      	add	r1, sp, #132	@ 0x84
 800eb1a:	a806      	add	r0, sp, #24
 800eb1c:	f7fc ffce 	bl	800babc <ucdr_init_buffer>
 800eb20:	a90e      	add	r1, sp, #56	@ 0x38
 800eb22:	a806      	add	r0, sp, #24
 800eb24:	f002 f8f8 	bl	8010d18 <uxr_serialize_OBJK_DataWriter_Binary>
 800eb28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb2a:	f8cd 8000 	str.w	r8, [sp]
 800eb2e:	9401      	str	r4, [sp, #4]
 800eb30:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800eb34:	60e3      	str	r3, [r4, #12]
 800eb36:	4630      	mov	r0, r6
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	f7ff fead 	bl	800e898 <uxr_common_create_entity>
 800eb3e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800eb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb46:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800eb4a:	f04f 0c12 	mov.w	ip, #18
 800eb4e:	250a      	movs	r5, #10
 800eb50:	2220      	movs	r2, #32
 800eb52:	2110      	movs	r1, #16
 800eb54:	2008      	movs	r0, #8
 800eb56:	2702      	movs	r7, #2
 800eb58:	e7cd      	b.n	800eaf6 <uxr_buffer_create_datawriter_bin+0x76>
 800eb5a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800eb5e:	e7d9      	b.n	800eb14 <uxr_buffer_create_datawriter_bin+0x94>
 800eb60:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800eb64:	e7d6      	b.n	800eb14 <uxr_buffer_create_datawriter_bin+0x94>
 800eb66:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800eb6a:	e7d3      	b.n	800eb14 <uxr_buffer_create_datawriter_bin+0x94>

0800eb6c <uxr_buffer_create_datareader_bin>:
 800eb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb70:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800eb74:	ac1f      	add	r4, sp, #124	@ 0x7c
 800eb76:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800eb7a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800eb7e:	9105      	str	r1, [sp, #20]
 800eb80:	4606      	mov	r6, r0
 800eb82:	a9a3      	add	r1, sp, #652	@ 0x28c
 800eb84:	4618      	mov	r0, r3
 800eb86:	2306      	movs	r3, #6
 800eb88:	7123      	strb	r3, [r4, #4]
 800eb8a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800eb8e:	2703      	movs	r7, #3
 800eb90:	f000 f886 	bl	800eca0 <uxr_object_id_to_raw>
 800eb94:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800eb96:	7227      	strb	r7, [r4, #8]
 800eb98:	a90e      	add	r1, sp, #56	@ 0x38
 800eb9a:	f000 f881 	bl	800eca0 <uxr_object_id_to_raw>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800eba4:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800eba8:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800ebac:	3d00      	subs	r5, #0
 800ebae:	bf18      	it	ne
 800ebb0:	2501      	movne	r5, #1
 800ebb2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ebb6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800ebba:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800ebbe:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ebc2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800ebcc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ebd0:	bb8a      	cbnz	r2, 800ec36 <uxr_buffer_create_datareader_bin+0xca>
 800ebd2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ebd6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ebda:	f04f 0c13 	mov.w	ip, #19
 800ebde:	250b      	movs	r5, #11
 800ebe0:	2221      	movs	r2, #33	@ 0x21
 800ebe2:	2111      	movs	r1, #17
 800ebe4:	2009      	movs	r0, #9
 800ebe6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800ebea:	b923      	cbnz	r3, 800ebf6 <uxr_buffer_create_datareader_bin+0x8a>
 800ebec:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ebf0:	4672      	mov	r2, lr
 800ebf2:	4661      	mov	r1, ip
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d025      	beq.n	800ec4a <uxr_buffer_create_datareader_bin+0xde>
 800ebfe:	2b03      	cmp	r3, #3
 800ec00:	d029      	beq.n	800ec56 <uxr_buffer_create_datareader_bin+0xea>
 800ec02:	b32b      	cbz	r3, 800ec50 <uxr_buffer_create_datareader_bin+0xe4>
 800ec04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec08:	a923      	add	r1, sp, #140	@ 0x8c
 800ec0a:	a806      	add	r0, sp, #24
 800ec0c:	f7fc ff56 	bl	800babc <ucdr_init_buffer>
 800ec10:	a90e      	add	r1, sp, #56	@ 0x38
 800ec12:	a806      	add	r0, sp, #24
 800ec14:	f002 f844 	bl	8010ca0 <uxr_serialize_OBJK_DataReader_Binary>
 800ec18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec1a:	f8cd 8000 	str.w	r8, [sp]
 800ec1e:	9401      	str	r4, [sp, #4]
 800ec20:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ec24:	60e3      	str	r3, [r4, #12]
 800ec26:	4630      	mov	r0, r6
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	f7ff fe35 	bl	800e898 <uxr_common_create_entity>
 800ec2e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ec32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec36:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ec3a:	f04f 0c12 	mov.w	ip, #18
 800ec3e:	250a      	movs	r5, #10
 800ec40:	2220      	movs	r2, #32
 800ec42:	2110      	movs	r1, #16
 800ec44:	2008      	movs	r0, #8
 800ec46:	2702      	movs	r7, #2
 800ec48:	e7cd      	b.n	800ebe6 <uxr_buffer_create_datareader_bin+0x7a>
 800ec4a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ec4e:	e7d9      	b.n	800ec04 <uxr_buffer_create_datareader_bin+0x98>
 800ec50:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ec54:	e7d6      	b.n	800ec04 <uxr_buffer_create_datareader_bin+0x98>
 800ec56:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ec5a:	e7d3      	b.n	800ec04 <uxr_buffer_create_datareader_bin+0x98>

0800ec5c <uxr_object_id>:
 800ec5c:	b082      	sub	sp, #8
 800ec5e:	2300      	movs	r3, #0
 800ec60:	f88d 1006 	strb.w	r1, [sp, #6]
 800ec64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec68:	f360 030f 	bfi	r3, r0, #0, #16
 800ec6c:	f362 431f 	bfi	r3, r2, #16, #16
 800ec70:	4618      	mov	r0, r3
 800ec72:	b002      	add	sp, #8
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop

0800ec78 <uxr_object_id_from_raw>:
 800ec78:	7843      	ldrb	r3, [r0, #1]
 800ec7a:	7801      	ldrb	r1, [r0, #0]
 800ec7c:	b082      	sub	sp, #8
 800ec7e:	f003 020f 	and.w	r2, r3, #15
 800ec82:	f88d 2006 	strb.w	r2, [sp, #6]
 800ec86:	091b      	lsrs	r3, r3, #4
 800ec88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec8c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ec90:	2000      	movs	r0, #0
 800ec92:	f363 000f 	bfi	r0, r3, #0, #16
 800ec96:	f362 401f 	bfi	r0, r2, #16, #16
 800ec9a:	b002      	add	sp, #8
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop

0800eca0 <uxr_object_id_to_raw>:
 800eca0:	4602      	mov	r2, r0
 800eca2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800eca6:	b082      	sub	sp, #8
 800eca8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ecac:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ecb0:	f881 c000 	strb.w	ip, [r1]
 800ecb4:	7048      	strb	r0, [r1, #1]
 800ecb6:	b002      	add	sp, #8
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop

0800ecbc <on_get_fragmentation_info>:
 800ecbc:	b500      	push	{lr}
 800ecbe:	b08b      	sub	sp, #44	@ 0x2c
 800ecc0:	4601      	mov	r1, r0
 800ecc2:	2204      	movs	r2, #4
 800ecc4:	a802      	add	r0, sp, #8
 800ecc6:	f7fc fef9 	bl	800babc <ucdr_init_buffer>
 800ecca:	f10d 0305 	add.w	r3, sp, #5
 800ecce:	f10d 0206 	add.w	r2, sp, #6
 800ecd2:	a901      	add	r1, sp, #4
 800ecd4:	a802      	add	r0, sp, #8
 800ecd6:	f001 f9d5 	bl	8010084 <uxr_read_submessage_header>
 800ecda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ecde:	2b0d      	cmp	r3, #13
 800ece0:	d003      	beq.n	800ecea <on_get_fragmentation_info+0x2e>
 800ece2:	2000      	movs	r0, #0
 800ece4:	b00b      	add	sp, #44	@ 0x2c
 800ece6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ecee:	f013 0f02 	tst.w	r3, #2
 800ecf2:	bf14      	ite	ne
 800ecf4:	2002      	movne	r0, #2
 800ecf6:	2001      	moveq	r0, #1
 800ecf8:	b00b      	add	sp, #44	@ 0x2c
 800ecfa:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecfe:	bf00      	nop

0800ed00 <read_submessage_get_info>:
 800ed00:	b570      	push	{r4, r5, r6, lr}
 800ed02:	2500      	movs	r5, #0
 800ed04:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800ed08:	4604      	mov	r4, r0
 800ed0a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800ed0e:	460e      	mov	r6, r1
 800ed10:	a810      	add	r0, sp, #64	@ 0x40
 800ed12:	4629      	mov	r1, r5
 800ed14:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ed18:	f00a f90e 	bl	8018f38 <memset>
 800ed1c:	a903      	add	r1, sp, #12
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f002 fa70 	bl	8011204 <uxr_deserialize_GET_INFO_Payload>
 800ed24:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ed28:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	f001 f81f 	bl	800fd70 <uxr_session_header_offset>
 800ed32:	462b      	mov	r3, r5
 800ed34:	9000      	str	r0, [sp, #0]
 800ed36:	220c      	movs	r2, #12
 800ed38:	a905      	add	r1, sp, #20
 800ed3a:	a808      	add	r0, sp, #32
 800ed3c:	f7fc feac 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 800ed40:	a910      	add	r1, sp, #64	@ 0x40
 800ed42:	a808      	add	r0, sp, #32
 800ed44:	f002 fad0 	bl	80112e8 <uxr_serialize_INFO_Payload>
 800ed48:	9b08      	ldr	r3, [sp, #32]
 800ed4a:	462a      	mov	r2, r5
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 ffb8 	bl	800fcc4 <uxr_stamp_session_header>
 800ed54:	a808      	add	r0, sp, #32
 800ed56:	f7fc fedd 	bl	800bb14 <ucdr_buffer_length>
 800ed5a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	a905      	add	r1, sp, #20
 800ed60:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ed64:	47a0      	blx	r4
 800ed66:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}

0800ed6c <write_submessage_acknack.isra.0>:
 800ed6c:	b570      	push	{r4, r5, r6, lr}
 800ed6e:	b092      	sub	sp, #72	@ 0x48
 800ed70:	4605      	mov	r5, r0
 800ed72:	460e      	mov	r6, r1
 800ed74:	4614      	mov	r4, r2
 800ed76:	f000 fffb 	bl	800fd70 <uxr_session_header_offset>
 800ed7a:	a905      	add	r1, sp, #20
 800ed7c:	9000      	str	r0, [sp, #0]
 800ed7e:	2300      	movs	r3, #0
 800ed80:	a80a      	add	r0, sp, #40	@ 0x28
 800ed82:	2211      	movs	r2, #17
 800ed84:	f7fc fe88 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 800ed88:	2218      	movs	r2, #24
 800ed8a:	fb02 5404 	mla	r4, r2, r4, r5
 800ed8e:	2300      	movs	r3, #0
 800ed90:	2205      	movs	r2, #5
 800ed92:	3450      	adds	r4, #80	@ 0x50
 800ed94:	210a      	movs	r1, #10
 800ed96:	a80a      	add	r0, sp, #40	@ 0x28
 800ed98:	f001 f95a 	bl	8010050 <uxr_buffer_submessage_header>
 800ed9c:	a903      	add	r1, sp, #12
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f007 fcce 	bl	8016740 <uxr_compute_acknack>
 800eda4:	ba40      	rev16	r0, r0
 800eda6:	f8ad 000e 	strh.w	r0, [sp, #14]
 800edaa:	a903      	add	r1, sp, #12
 800edac:	a80a      	add	r0, sp, #40	@ 0x28
 800edae:	f88d 6010 	strb.w	r6, [sp, #16]
 800edb2:	f002 fb09 	bl	80113c8 <uxr_serialize_ACKNACK_Payload>
 800edb6:	2200      	movs	r2, #0
 800edb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edba:	4611      	mov	r1, r2
 800edbc:	4628      	mov	r0, r5
 800edbe:	f000 ff81 	bl	800fcc4 <uxr_stamp_session_header>
 800edc2:	a80a      	add	r0, sp, #40	@ 0x28
 800edc4:	f7fc fea6 	bl	800bb14 <ucdr_buffer_length>
 800edc8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800edca:	4602      	mov	r2, r0
 800edcc:	a905      	add	r1, sp, #20
 800edce:	e9d3 0400 	ldrd	r0, r4, [r3]
 800edd2:	47a0      	blx	r4
 800edd4:	b012      	add	sp, #72	@ 0x48
 800edd6:	bd70      	pop	{r4, r5, r6, pc}

0800edd8 <uxr_init_session>:
 800edd8:	b510      	push	{r4, lr}
 800edda:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ee10 <uxr_init_session+0x38>
 800edde:	2300      	movs	r3, #0
 800ede0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800ede4:	4604      	mov	r4, r0
 800ede6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800edea:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800edee:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800edf2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800edf6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800edfa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800edfe:	2181      	movs	r1, #129	@ 0x81
 800ee00:	f000 fecc 	bl	800fb9c <uxr_init_session_info>
 800ee04:	f104 0008 	add.w	r0, r4, #8
 800ee08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee0c:	f001 b83c 	b.w	800fe88 <uxr_init_stream_storage>
	...

0800ee18 <uxr_set_status_callback>:
 800ee18:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop

0800ee20 <uxr_set_topic_callback>:
 800ee20:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800ee24:	4770      	bx	lr
 800ee26:	bf00      	nop

0800ee28 <uxr_set_request_callback>:
 800ee28:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop

0800ee30 <uxr_set_reply_callback>:
 800ee30:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800ee34:	4770      	bx	lr
 800ee36:	bf00      	nop

0800ee38 <uxr_create_output_best_effort_stream>:
 800ee38:	b510      	push	{r4, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	e9cd 2100 	strd	r2, r1, [sp]
 800ee40:	4604      	mov	r4, r0
 800ee42:	f000 ff95 	bl	800fd70 <uxr_session_header_offset>
 800ee46:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	f104 0008 	add.w	r0, r4, #8
 800ee50:	b004      	add	sp, #16
 800ee52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee56:	f001 b861 	b.w	800ff1c <uxr_add_output_best_effort_buffer>
 800ee5a:	bf00      	nop

0800ee5c <uxr_create_output_reliable_stream>:
 800ee5c:	b510      	push	{r4, lr}
 800ee5e:	b088      	sub	sp, #32
 800ee60:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ee64:	4604      	mov	r4, r0
 800ee66:	9303      	str	r3, [sp, #12]
 800ee68:	f000 ff82 	bl	800fd70 <uxr_session_header_offset>
 800ee6c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ee70:	9000      	str	r0, [sp, #0]
 800ee72:	9905      	ldr	r1, [sp, #20]
 800ee74:	f104 0008 	add.w	r0, r4, #8
 800ee78:	f001 f864 	bl	800ff44 <uxr_add_output_reliable_buffer>
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	b2c3      	uxtb	r3, r0
 800ee80:	f363 0207 	bfi	r2, r3, #0, #8
 800ee84:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ee88:	f363 220f 	bfi	r2, r3, #8, #8
 800ee8c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ee90:	f363 4217 	bfi	r2, r3, #16, #8
 800ee94:	0e03      	lsrs	r3, r0, #24
 800ee96:	f363 621f 	bfi	r2, r3, #24, #8
 800ee9a:	4610      	mov	r0, r2
 800ee9c:	b008      	add	sp, #32
 800ee9e:	bd10      	pop	{r4, pc}

0800eea0 <uxr_create_input_best_effort_stream>:
 800eea0:	b082      	sub	sp, #8
 800eea2:	3008      	adds	r0, #8
 800eea4:	b002      	add	sp, #8
 800eea6:	f001 b867 	b.w	800ff78 <uxr_add_input_best_effort_buffer>
 800eeaa:	bf00      	nop

0800eeac <uxr_create_input_reliable_stream>:
 800eeac:	b510      	push	{r4, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	4c0b      	ldr	r4, [pc, #44]	@ (800eee0 <uxr_create_input_reliable_stream+0x34>)
 800eeb2:	9400      	str	r4, [sp, #0]
 800eeb4:	3008      	adds	r0, #8
 800eeb6:	f001 f875 	bl	800ffa4 <uxr_add_input_reliable_buffer>
 800eeba:	2200      	movs	r2, #0
 800eebc:	b2c3      	uxtb	r3, r0
 800eebe:	f363 0207 	bfi	r2, r3, #0, #8
 800eec2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800eec6:	f363 220f 	bfi	r2, r3, #8, #8
 800eeca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800eece:	f363 4217 	bfi	r2, r3, #16, #8
 800eed2:	0e03      	lsrs	r3, r0, #24
 800eed4:	f363 621f 	bfi	r2, r3, #24, #8
 800eed8:	4610      	mov	r0, r2
 800eeda:	b004      	add	sp, #16
 800eedc:	bd10      	pop	{r4, pc}
 800eede:	bf00      	nop
 800eee0:	0800ecbd 	.word	0x0800ecbd

0800eee4 <uxr_epoch_nanos>:
 800eee4:	b510      	push	{r4, lr}
 800eee6:	4604      	mov	r4, r0
 800eee8:	f001 f912 	bl	8010110 <uxr_nanos>
 800eeec:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800eef0:	1ac0      	subs	r0, r0, r3
 800eef2:	eb61 0102 	sbc.w	r1, r1, r2
 800eef6:	bd10      	pop	{r4, pc}

0800eef8 <uxr_flash_output_streams>:
 800eef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eefc:	7e03      	ldrb	r3, [r0, #24]
 800eefe:	b084      	sub	sp, #16
 800ef00:	4604      	mov	r4, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d035      	beq.n	800ef72 <uxr_flash_output_streams+0x7a>
 800ef06:	f04f 0900 	mov.w	r9, #0
 800ef0a:	4648      	mov	r0, r9
 800ef0c:	f10d 0802 	add.w	r8, sp, #2
 800ef10:	af03      	add	r7, sp, #12
 800ef12:	ae02      	add	r6, sp, #8
 800ef14:	e006      	b.n	800ef24 <uxr_flash_output_streams+0x2c>
 800ef16:	7e23      	ldrb	r3, [r4, #24]
 800ef18:	f109 0901 	add.w	r9, r9, #1
 800ef1c:	fa5f f089 	uxtb.w	r0, r9
 800ef20:	4283      	cmp	r3, r0
 800ef22:	d926      	bls.n	800ef72 <uxr_flash_output_streams+0x7a>
 800ef24:	2201      	movs	r2, #1
 800ef26:	4611      	mov	r1, r2
 800ef28:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ef2c:	f000 ff58 	bl	800fde0 <uxr_stream_id>
 800ef30:	3508      	adds	r5, #8
 800ef32:	4684      	mov	ip, r0
 800ef34:	4643      	mov	r3, r8
 800ef36:	463a      	mov	r2, r7
 800ef38:	4631      	mov	r1, r6
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	f8cd c004 	str.w	ip, [sp, #4]
 800ef40:	f007 fc84 	bl	801684c <uxr_prepare_best_effort_buffer_to_send>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d0e6      	beq.n	800ef16 <uxr_flash_output_streams+0x1e>
 800ef48:	9b02      	ldr	r3, [sp, #8]
 800ef4a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ef4e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ef52:	4620      	mov	r0, r4
 800ef54:	f000 feb6 	bl	800fcc4 <uxr_stamp_session_header>
 800ef58:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ef5a:	9a03      	ldr	r2, [sp, #12]
 800ef5c:	685d      	ldr	r5, [r3, #4]
 800ef5e:	6818      	ldr	r0, [r3, #0]
 800ef60:	9902      	ldr	r1, [sp, #8]
 800ef62:	47a8      	blx	r5
 800ef64:	f109 0901 	add.w	r9, r9, #1
 800ef68:	7e23      	ldrb	r3, [r4, #24]
 800ef6a:	fa5f f089 	uxtb.w	r0, r9
 800ef6e:	4283      	cmp	r3, r0
 800ef70:	d8d8      	bhi.n	800ef24 <uxr_flash_output_streams+0x2c>
 800ef72:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ef76:	b38b      	cbz	r3, 800efdc <uxr_flash_output_streams+0xe4>
 800ef78:	f04f 0900 	mov.w	r9, #0
 800ef7c:	f10d 0802 	add.w	r8, sp, #2
 800ef80:	af03      	add	r7, sp, #12
 800ef82:	ae02      	add	r6, sp, #8
 800ef84:	4648      	mov	r0, r9
 800ef86:	2201      	movs	r2, #1
 800ef88:	2102      	movs	r1, #2
 800ef8a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ef8e:	f000 ff27 	bl	800fde0 <uxr_stream_id>
 800ef92:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ef96:	3520      	adds	r5, #32
 800ef98:	9001      	str	r0, [sp, #4]
 800ef9a:	e00d      	b.n	800efb8 <uxr_flash_output_streams+0xc0>
 800ef9c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800efa0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800efa4:	9b02      	ldr	r3, [sp, #8]
 800efa6:	f000 fe8d 	bl	800fcc4 <uxr_stamp_session_header>
 800efaa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800efac:	9a03      	ldr	r2, [sp, #12]
 800efae:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800efb2:	9902      	ldr	r1, [sp, #8]
 800efb4:	6818      	ldr	r0, [r3, #0]
 800efb6:	47d0      	blx	sl
 800efb8:	4643      	mov	r3, r8
 800efba:	463a      	mov	r2, r7
 800efbc:	4631      	mov	r1, r6
 800efbe:	4628      	mov	r0, r5
 800efc0:	f007 fe62 	bl	8016c88 <uxr_prepare_next_reliable_buffer_to_send>
 800efc4:	4603      	mov	r3, r0
 800efc6:	4620      	mov	r0, r4
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1e7      	bne.n	800ef9c <uxr_flash_output_streams+0xa4>
 800efcc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800efd0:	f109 0901 	add.w	r9, r9, #1
 800efd4:	fa5f f089 	uxtb.w	r0, r9
 800efd8:	4283      	cmp	r3, r0
 800efda:	d8d4      	bhi.n	800ef86 <uxr_flash_output_streams+0x8e>
 800efdc:	b004      	add	sp, #16
 800efde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efe2:	bf00      	nop

0800efe4 <read_submessage_info>:
 800efe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe8:	460d      	mov	r5, r1
 800efea:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800efee:	4669      	mov	r1, sp
 800eff0:	4607      	mov	r7, r0
 800eff2:	4628      	mov	r0, r5
 800eff4:	f002 f814 	bl	8011020 <uxr_deserialize_BaseObjectReply>
 800eff8:	a902      	add	r1, sp, #8
 800effa:	4604      	mov	r4, r0
 800effc:	4628      	mov	r0, r5
 800effe:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f002:	f7fb fa61 	bl	800a4c8 <ucdr_deserialize_bool>
 800f006:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f00a:	4004      	ands	r4, r0
 800f00c:	b2e4      	uxtb	r4, r4
 800f00e:	b95b      	cbnz	r3, 800f028 <read_submessage_info+0x44>
 800f010:	a987      	add	r1, sp, #540	@ 0x21c
 800f012:	4628      	mov	r0, r5
 800f014:	f7fb fa58 	bl	800a4c8 <ucdr_deserialize_bool>
 800f018:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f01c:	4606      	mov	r6, r0
 800f01e:	b94b      	cbnz	r3, 800f034 <read_submessage_info+0x50>
 800f020:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f028:	a903      	add	r1, sp, #12
 800f02a:	4628      	mov	r0, r5
 800f02c:	f001 fea0 	bl	8010d70 <uxr_deserialize_ObjectVariant>
 800f030:	4004      	ands	r4, r0
 800f032:	e7ed      	b.n	800f010 <read_submessage_info+0x2c>
 800f034:	a988      	add	r1, sp, #544	@ 0x220
 800f036:	4628      	mov	r0, r5
 800f038:	f7fb fa74 	bl	800a524 <ucdr_deserialize_uint8_t>
 800f03c:	4234      	tst	r4, r6
 800f03e:	d0ef      	beq.n	800f020 <read_submessage_info+0x3c>
 800f040:	2800      	cmp	r0, #0
 800f042:	d0ed      	beq.n	800f020 <read_submessage_info+0x3c>
 800f044:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f048:	2b0d      	cmp	r3, #13
 800f04a:	d1e9      	bne.n	800f020 <read_submessage_info+0x3c>
 800f04c:	a98a      	add	r1, sp, #552	@ 0x228
 800f04e:	4628      	mov	r0, r5
 800f050:	f7fc f80e 	bl	800b070 <ucdr_deserialize_int16_t>
 800f054:	b140      	cbz	r0, 800f068 <read_submessage_info+0x84>
 800f056:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	dd07      	ble.n	800f06e <read_submessage_info+0x8a>
 800f05e:	f1b8 0f00 	cmp.w	r8, #0
 800f062:	bf14      	ite	ne
 800f064:	2001      	movne	r0, #1
 800f066:	2002      	moveq	r0, #2
 800f068:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f06c:	e7d8      	b.n	800f020 <read_submessage_info+0x3c>
 800f06e:	2000      	movs	r0, #0
 800f070:	e7fa      	b.n	800f068 <read_submessage_info+0x84>
 800f072:	bf00      	nop

0800f074 <read_submessage_list>:
 800f074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f078:	b097      	sub	sp, #92	@ 0x5c
 800f07a:	4ec1      	ldr	r6, [pc, #772]	@ (800f380 <read_submessage_list+0x30c>)
 800f07c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f07e:	4604      	mov	r4, r0
 800f080:	460d      	mov	r5, r1
 800f082:	f04f 0801 	mov.w	r8, #1
 800f086:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f08a:	aa0c      	add	r2, sp, #48	@ 0x30
 800f08c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f090:	4628      	mov	r0, r5
 800f092:	f000 fff7 	bl	8010084 <uxr_read_submessage_header>
 800f096:	2800      	cmp	r0, #0
 800f098:	f000 813e 	beq.w	800f318 <read_submessage_list+0x2a4>
 800f09c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f0a0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f0a4:	3b02      	subs	r3, #2
 800f0a6:	2b0d      	cmp	r3, #13
 800f0a8:	d8ed      	bhi.n	800f086 <read_submessage_list+0x12>
 800f0aa:	a101      	add	r1, pc, #4	@ (adr r1, 800f0b0 <read_submessage_list+0x3c>)
 800f0ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0b0:	0800f30f 	.word	0x0800f30f
 800f0b4:	0800f087 	.word	0x0800f087
 800f0b8:	0800f2ff 	.word	0x0800f2ff
 800f0bc:	0800f29d 	.word	0x0800f29d
 800f0c0:	0800f293 	.word	0x0800f293
 800f0c4:	0800f087 	.word	0x0800f087
 800f0c8:	0800f087 	.word	0x0800f087
 800f0cc:	0800f1f3 	.word	0x0800f1f3
 800f0d0:	0800f183 	.word	0x0800f183
 800f0d4:	0800f143 	.word	0x0800f143
 800f0d8:	0800f087 	.word	0x0800f087
 800f0dc:	0800f087 	.word	0x0800f087
 800f0e0:	0800f087 	.word	0x0800f087
 800f0e4:	0800f0e9 	.word	0x0800f0e9
 800f0e8:	a910      	add	r1, sp, #64	@ 0x40
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	f002 f9bc 	bl	8011468 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f0f0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800f0f4:	f1b9 0f00 	cmp.w	r9, #0
 800f0f8:	f000 8116 	beq.w	800f328 <read_submessage_list+0x2b4>
 800f0fc:	f001 f808 	bl	8010110 <uxr_nanos>
 800f100:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f108:	2100      	movs	r1, #0
 800f10a:	468c      	mov	ip, r1
 800f10c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f110:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f114:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f116:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f118:	468c      	mov	ip, r1
 800f11a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f11e:	46e2      	mov	sl, ip
 800f120:	46bc      	mov	ip, r7
 800f122:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f126:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f12a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f12e:	e9cd 7100 	strd	r7, r1, [sp]
 800f132:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f136:	9106      	str	r1, [sp, #24]
 800f138:	4620      	mov	r0, r4
 800f13a:	47c8      	blx	r9
 800f13c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800f140:	e7a1      	b.n	800f086 <read_submessage_list+0x12>
 800f142:	a910      	add	r1, sp, #64	@ 0x40
 800f144:	4628      	mov	r0, r5
 800f146:	f002 f97d 	bl	8011444 <uxr_deserialize_HEARTBEAT_Payload>
 800f14a:	2100      	movs	r1, #0
 800f14c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f150:	f000 fe70 	bl	800fe34 <uxr_stream_id_from_raw>
 800f154:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f158:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f15a:	4639      	mov	r1, r7
 800f15c:	f104 0008 	add.w	r0, r4, #8
 800f160:	f000 ff56 	bl	8010010 <uxr_get_input_reliable_stream>
 800f164:	2800      	cmp	r0, #0
 800f166:	d08e      	beq.n	800f086 <read_submessage_list+0x12>
 800f168:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f16c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f170:	f007 fada 	bl	8016728 <uxr_process_heartbeat>
 800f174:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f178:	463a      	mov	r2, r7
 800f17a:	4620      	mov	r0, r4
 800f17c:	f7ff fdf6 	bl	800ed6c <write_submessage_acknack.isra.0>
 800f180:	e781      	b.n	800f086 <read_submessage_list+0x12>
 800f182:	a910      	add	r1, sp, #64	@ 0x40
 800f184:	4628      	mov	r0, r5
 800f186:	f002 f935 	bl	80113f4 <uxr_deserialize_ACKNACK_Payload>
 800f18a:	2100      	movs	r1, #0
 800f18c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f190:	f000 fe50 	bl	800fe34 <uxr_stream_id_from_raw>
 800f194:	900d      	str	r0, [sp, #52]	@ 0x34
 800f196:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f19a:	f104 0008 	add.w	r0, r4, #8
 800f19e:	f000 ff23 	bl	800ffe8 <uxr_get_output_reliable_stream>
 800f1a2:	4607      	mov	r7, r0
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	f43f af6e 	beq.w	800f086 <read_submessage_list+0x12>
 800f1aa:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800f1ae:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800f1b2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f1b6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f1ba:	b289      	uxth	r1, r1
 800f1bc:	f007 fe0e 	bl	8016ddc <uxr_process_acknack>
 800f1c0:	4638      	mov	r0, r7
 800f1c2:	f007 fdcb 	bl	8016d5c <uxr_begin_output_nack_buffer_it>
 800f1c6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f1ca:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800f1ce:	e006      	b.n	800f1de <read_submessage_list+0x16a>
 800f1d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f1d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f1d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f1d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f1da:	6818      	ldr	r0, [r3, #0]
 800f1dc:	47c8      	blx	r9
 800f1de:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800f1e2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f1e4:	4651      	mov	r1, sl
 800f1e6:	4638      	mov	r0, r7
 800f1e8:	f007 fdba 	bl	8016d60 <uxr_next_reliable_nack_buffer_to_send>
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	d1ef      	bne.n	800f1d0 <read_submessage_list+0x15c>
 800f1f0:	e749      	b.n	800f086 <read_submessage_list+0x12>
 800f1f2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800f1f6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800f1fa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f1fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800f202:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800f206:	4651      	mov	r1, sl
 800f208:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f20c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800f210:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800f214:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800f218:	4628      	mov	r0, r5
 800f21a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800f21e:	f001 fe49 	bl	8010eb4 <uxr_deserialize_BaseObjectRequest>
 800f222:	4650      	mov	r0, sl
 800f224:	a90f      	add	r1, sp, #60	@ 0x3c
 800f226:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f22a:	f000 fdc7 	bl	800fdbc <uxr_parse_base_object_request>
 800f22e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800f232:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f234:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800f238:	9110      	str	r1, [sp, #64]	@ 0x40
 800f23a:	3f04      	subs	r7, #4
 800f23c:	f009 090e 	and.w	r9, r9, #14
 800f240:	b2bf      	uxth	r7, r7
 800f242:	f1bb 0f00 	cmp.w	fp, #0
 800f246:	d006      	beq.n	800f256 <read_submessage_list+0x1e2>
 800f248:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	4652      	mov	r2, sl
 800f250:	2300      	movs	r3, #0
 800f252:	4620      	mov	r0, r4
 800f254:	47d8      	blx	fp
 800f256:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f258:	b16a      	cbz	r2, 800f276 <read_submessage_list+0x202>
 800f25a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f25c:	2100      	movs	r1, #0
 800f25e:	3802      	subs	r0, #2
 800f260:	e002      	b.n	800f268 <read_submessage_list+0x1f4>
 800f262:	3101      	adds	r1, #1
 800f264:	4291      	cmp	r1, r2
 800f266:	d006      	beq.n	800f276 <read_submessage_list+0x202>
 800f268:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f26c:	4553      	cmp	r3, sl
 800f26e:	d1f8      	bne.n	800f262 <read_submessage_list+0x1ee>
 800f270:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f272:	2200      	movs	r2, #0
 800f274:	545a      	strb	r2, [r3, r1]
 800f276:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800f27a:	9102      	str	r1, [sp, #8]
 800f27c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f27e:	9101      	str	r1, [sp, #4]
 800f280:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f282:	9100      	str	r1, [sp, #0]
 800f284:	464b      	mov	r3, r9
 800f286:	463a      	mov	r2, r7
 800f288:	4629      	mov	r1, r5
 800f28a:	4620      	mov	r0, r4
 800f28c:	f007 fe64 	bl	8016f58 <read_submessage_format>
 800f290:	e6f9      	b.n	800f086 <read_submessage_list+0x12>
 800f292:	4629      	mov	r1, r5
 800f294:	4620      	mov	r0, r4
 800f296:	f7ff fea5 	bl	800efe4 <read_submessage_info>
 800f29a:	e6f4      	b.n	800f086 <read_submessage_list+0x12>
 800f29c:	2a00      	cmp	r2, #0
 800f29e:	d03e      	beq.n	800f31e <read_submessage_list+0x2aa>
 800f2a0:	a910      	add	r1, sp, #64	@ 0x40
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	f002 f802 	bl	80112ac <uxr_deserialize_STATUS_Payload>
 800f2a8:	a90e      	add	r1, sp, #56	@ 0x38
 800f2aa:	aa0d      	add	r2, sp, #52	@ 0x34
 800f2ac:	a810      	add	r0, sp, #64	@ 0x40
 800f2ae:	f000 fd85 	bl	800fdbc <uxr_parse_base_object_request>
 800f2b2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800f2b6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f2b8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800f2bc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800f2c0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f2c2:	f1ba 0f00 	cmp.w	sl, #0
 800f2c6:	d006      	beq.n	800f2d6 <read_submessage_list+0x262>
 800f2c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f2cc:	9300      	str	r3, [sp, #0]
 800f2ce:	463a      	mov	r2, r7
 800f2d0:	464b      	mov	r3, r9
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	47d0      	blx	sl
 800f2d6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f2d8:	2a00      	cmp	r2, #0
 800f2da:	f43f aed4 	beq.w	800f086 <read_submessage_list+0x12>
 800f2de:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	3802      	subs	r0, #2
 800f2e4:	e003      	b.n	800f2ee <read_submessage_list+0x27a>
 800f2e6:	3101      	adds	r1, #1
 800f2e8:	4291      	cmp	r1, r2
 800f2ea:	f43f aecc 	beq.w	800f086 <read_submessage_list+0x12>
 800f2ee:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f2f2:	42bb      	cmp	r3, r7
 800f2f4:	d1f7      	bne.n	800f2e6 <read_submessage_list+0x272>
 800f2f6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f2f8:	f803 9001 	strb.w	r9, [r3, r1]
 800f2fc:	e6c3      	b.n	800f086 <read_submessage_list+0x12>
 800f2fe:	2a00      	cmp	r2, #0
 800f300:	f47f aec1 	bne.w	800f086 <read_submessage_list+0x12>
 800f304:	4629      	mov	r1, r5
 800f306:	4620      	mov	r0, r4
 800f308:	f000 fc9e 	bl	800fc48 <uxr_read_create_session_status>
 800f30c:	e6bb      	b.n	800f086 <read_submessage_list+0x12>
 800f30e:	4629      	mov	r1, r5
 800f310:	4620      	mov	r0, r4
 800f312:	f7ff fcf5 	bl	800ed00 <read_submessage_get_info>
 800f316:	e6b6      	b.n	800f086 <read_submessage_list+0x12>
 800f318:	b017      	add	sp, #92	@ 0x5c
 800f31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31e:	4629      	mov	r1, r5
 800f320:	4620      	mov	r0, r4
 800f322:	f000 fc9d 	bl	800fc60 <uxr_read_delete_session_status>
 800f326:	e6ae      	b.n	800f086 <read_submessage_list+0x12>
 800f328:	f000 fef2 	bl	8010110 <uxr_nanos>
 800f32c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f32e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f330:	464f      	mov	r7, r9
 800f332:	fbc3 2706 	smlal	r2, r7, r3, r6
 800f336:	1812      	adds	r2, r2, r0
 800f338:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f33a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f33c:	eb47 0101 	adc.w	r1, r7, r1
 800f340:	464f      	mov	r7, r9
 800f342:	fbc3 0706 	smlal	r0, r7, r3, r6
 800f346:	463b      	mov	r3, r7
 800f348:	4684      	mov	ip, r0
 800f34a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800f34e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800f352:	eb1c 0c00 	adds.w	ip, ip, r0
 800f356:	464f      	mov	r7, r9
 800f358:	eb43 0307 	adc.w	r3, r3, r7
 800f35c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800f360:	eb61 0303 	sbc.w	r3, r1, r3
 800f364:	0fda      	lsrs	r2, r3, #31
 800f366:	eb12 020c 	adds.w	r2, r2, ip
 800f36a:	f143 0300 	adc.w	r3, r3, #0
 800f36e:	0852      	lsrs	r2, r2, #1
 800f370:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f374:	105b      	asrs	r3, r3, #1
 800f376:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f37a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f37e:	e6dd      	b.n	800f13c <read_submessage_list+0xc8>
 800f380:	3b9aca00 	.word	0x3b9aca00

0800f384 <listen_message_reliably>:
 800f384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f388:	1e0b      	subs	r3, r1, #0
 800f38a:	b09d      	sub	sp, #116	@ 0x74
 800f38c:	bfb8      	it	lt
 800f38e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f392:	4680      	mov	r8, r0
 800f394:	9305      	str	r3, [sp, #20]
 800f396:	f000 fea1 	bl	80100dc <uxr_millis>
 800f39a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f39e:	4681      	mov	r9, r0
 800f3a0:	2a00      	cmp	r2, #0
 800f3a2:	f000 80a1 	beq.w	800f4e8 <listen_message_reliably+0x164>
 800f3a6:	2600      	movs	r6, #0
 800f3a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f3ac:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f3b0:	9303      	str	r3, [sp, #12]
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	460f      	mov	r7, r1
 800f3b6:	e00f      	b.n	800f3d8 <listen_message_reliably+0x54>
 800f3b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f3bc:	9903      	ldr	r1, [sp, #12]
 800f3be:	455a      	cmp	r2, fp
 800f3c0:	f106 0601 	add.w	r6, r6, #1
 800f3c4:	eb73 0101 	sbcs.w	r1, r3, r1
 800f3c8:	b2f0      	uxtb	r0, r6
 800f3ca:	da01      	bge.n	800f3d0 <listen_message_reliably+0x4c>
 800f3cc:	4693      	mov	fp, r2
 800f3ce:	9303      	str	r3, [sp, #12]
 800f3d0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f3d4:	4283      	cmp	r3, r0
 800f3d6:	d960      	bls.n	800f49a <listen_message_reliably+0x116>
 800f3d8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f3dc:	2102      	movs	r1, #2
 800f3de:	2201      	movs	r2, #1
 800f3e0:	f000 fcfe 	bl	800fde0 <uxr_stream_id>
 800f3e4:	00e4      	lsls	r4, r4, #3
 800f3e6:	f104 0520 	add.w	r5, r4, #32
 800f3ea:	4445      	add	r5, r8
 800f3ec:	4601      	mov	r1, r0
 800f3ee:	463b      	mov	r3, r7
 800f3f0:	464a      	mov	r2, r9
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800f3f6:	f007 fc87 	bl	8016d08 <uxr_update_output_stream_heartbeat_timestamp>
 800f3fa:	eb08 0304 	add.w	r3, r8, r4
 800f3fe:	2800      	cmp	r0, #0
 800f400:	d0da      	beq.n	800f3b8 <listen_message_reliably+0x34>
 800f402:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f406:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f40a:	9304      	str	r3, [sp, #16]
 800f40c:	4640      	mov	r0, r8
 800f40e:	f000 fcaf 	bl	800fd70 <uxr_session_header_offset>
 800f412:	3501      	adds	r5, #1
 800f414:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f418:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f41c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f420:	2300      	movs	r3, #0
 800f422:	2211      	movs	r2, #17
 800f424:	9000      	str	r0, [sp, #0]
 800f426:	a90c      	add	r1, sp, #48	@ 0x30
 800f428:	4650      	mov	r0, sl
 800f42a:	f7fc fb35 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 800f42e:	2300      	movs	r3, #0
 800f430:	2205      	movs	r2, #5
 800f432:	210b      	movs	r1, #11
 800f434:	4650      	mov	r0, sl
 800f436:	f000 fe0b 	bl	8010050 <uxr_buffer_submessage_header>
 800f43a:	8968      	ldrh	r0, [r5, #10]
 800f43c:	2101      	movs	r1, #1
 800f43e:	f007 fe55 	bl	80170ec <uxr_seq_num_add>
 800f442:	892b      	ldrh	r3, [r5, #8]
 800f444:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f448:	4602      	mov	r2, r0
 800f44a:	9b04      	ldr	r3, [sp, #16]
 800f44c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f450:	a90a      	add	r1, sp, #40	@ 0x28
 800f452:	4650      	mov	r0, sl
 800f454:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f458:	f001 ffe0 	bl	801141c <uxr_serialize_HEARTBEAT_Payload>
 800f45c:	2200      	movs	r2, #0
 800f45e:	4611      	mov	r1, r2
 800f460:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f462:	4640      	mov	r0, r8
 800f464:	f000 fc2e 	bl	800fcc4 <uxr_stamp_session_header>
 800f468:	4650      	mov	r0, sl
 800f46a:	f7fc fb53 	bl	800bb14 <ucdr_buffer_length>
 800f46e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f472:	4602      	mov	r2, r0
 800f474:	a90c      	add	r1, sp, #48	@ 0x30
 800f476:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f47a:	4444      	add	r4, r8
 800f47c:	47a8      	blx	r5
 800f47e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f482:	9903      	ldr	r1, [sp, #12]
 800f484:	455a      	cmp	r2, fp
 800f486:	f106 0601 	add.w	r6, r6, #1
 800f48a:	eb73 0101 	sbcs.w	r1, r3, r1
 800f48e:	b2f0      	uxtb	r0, r6
 800f490:	db9c      	blt.n	800f3cc <listen_message_reliably+0x48>
 800f492:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f496:	4283      	cmp	r3, r0
 800f498:	d89e      	bhi.n	800f3d8 <listen_message_reliably+0x54>
 800f49a:	9a03      	ldr	r2, [sp, #12]
 800f49c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	bf08      	it	eq
 800f4a4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f4a8:	d01e      	beq.n	800f4e8 <listen_message_reliably+0x164>
 800f4aa:	ebab 0309 	sub.w	r3, fp, r9
 800f4ae:	9905      	ldr	r1, [sp, #20]
 800f4b0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	bf08      	it	eq
 800f4b8:	2301      	moveq	r3, #1
 800f4ba:	4299      	cmp	r1, r3
 800f4bc:	bfa8      	it	ge
 800f4be:	4619      	movge	r1, r3
 800f4c0:	6894      	ldr	r4, [r2, #8]
 800f4c2:	6810      	ldr	r0, [r2, #0]
 800f4c4:	4689      	mov	r9, r1
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	aa08      	add	r2, sp, #32
 800f4ca:	a907      	add	r1, sp, #28
 800f4cc:	47a0      	blx	r4
 800f4ce:	b968      	cbnz	r0, 800f4ec <listen_message_reliably+0x168>
 800f4d0:	9b05      	ldr	r3, [sp, #20]
 800f4d2:	eba3 0309 	sub.w	r3, r3, r9
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	9305      	str	r3, [sp, #20]
 800f4da:	f73f af5c 	bgt.w	800f396 <listen_message_reliably+0x12>
 800f4de:	4604      	mov	r4, r0
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	b01d      	add	sp, #116	@ 0x74
 800f4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4e8:	9b05      	ldr	r3, [sp, #20]
 800f4ea:	e7e0      	b.n	800f4ae <listen_message_reliably+0x12a>
 800f4ec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f4f0:	4604      	mov	r4, r0
 800f4f2:	a80c      	add	r0, sp, #48	@ 0x30
 800f4f4:	f7fc fae2 	bl	800babc <ucdr_init_buffer>
 800f4f8:	2500      	movs	r5, #0
 800f4fa:	f10d 031a 	add.w	r3, sp, #26
 800f4fe:	aa06      	add	r2, sp, #24
 800f500:	a90c      	add	r1, sp, #48	@ 0x30
 800f502:	4640      	mov	r0, r8
 800f504:	f88d 5018 	strb.w	r5, [sp, #24]
 800f508:	f000 fbf0 	bl	800fcec <uxr_read_session_header>
 800f50c:	b918      	cbnz	r0, 800f516 <listen_message_reliably+0x192>
 800f50e:	4620      	mov	r0, r4
 800f510:	b01d      	add	sp, #116	@ 0x74
 800f512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f516:	4629      	mov	r1, r5
 800f518:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f51c:	f000 fc8a 	bl	800fe34 <uxr_stream_id_from_raw>
 800f520:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f524:	2d01      	cmp	r5, #1
 800f526:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f52a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f52e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f532:	d04b      	beq.n	800f5cc <listen_message_reliably+0x248>
 800f534:	2d02      	cmp	r5, #2
 800f536:	d00f      	beq.n	800f558 <listen_message_reliably+0x1d4>
 800f538:	2d00      	cmp	r5, #0
 800f53a:	d1e8      	bne.n	800f50e <listen_message_reliably+0x18a>
 800f53c:	4629      	mov	r1, r5
 800f53e:	4628      	mov	r0, r5
 800f540:	f000 fc78 	bl	800fe34 <uxr_stream_id_from_raw>
 800f544:	a90c      	add	r1, sp, #48	@ 0x30
 800f546:	4602      	mov	r2, r0
 800f548:	4640      	mov	r0, r8
 800f54a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f54c:	f7ff fd92 	bl	800f074 <read_submessage_list>
 800f550:	4620      	mov	r0, r4
 800f552:	b01d      	add	sp, #116	@ 0x74
 800f554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f558:	4631      	mov	r1, r6
 800f55a:	f108 0008 	add.w	r0, r8, #8
 800f55e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f562:	f000 fd55 	bl	8010010 <uxr_get_input_reliable_stream>
 800f566:	4607      	mov	r7, r0
 800f568:	b338      	cbz	r0, 800f5ba <listen_message_reliably+0x236>
 800f56a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f56c:	9203      	str	r2, [sp, #12]
 800f56e:	a80c      	add	r0, sp, #48	@ 0x30
 800f570:	f7fc fad4 	bl	800bb1c <ucdr_buffer_remaining>
 800f574:	4603      	mov	r3, r0
 800f576:	f10d 0019 	add.w	r0, sp, #25
 800f57a:	9000      	str	r0, [sp, #0]
 800f57c:	9a03      	ldr	r2, [sp, #12]
 800f57e:	4651      	mov	r1, sl
 800f580:	4638      	mov	r0, r7
 800f582:	f006 ffd7 	bl	8016534 <uxr_receive_reliable_message>
 800f586:	b1c0      	cbz	r0, 800f5ba <listen_message_reliably+0x236>
 800f588:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f58c:	b393      	cbz	r3, 800f5f4 <listen_message_reliably+0x270>
 800f58e:	ad14      	add	r5, sp, #80	@ 0x50
 800f590:	f04f 0a02 	mov.w	sl, #2
 800f594:	e00a      	b.n	800f5ac <listen_message_reliably+0x228>
 800f596:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f59a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f59e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f5a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5a4:	4629      	mov	r1, r5
 800f5a6:	4640      	mov	r0, r8
 800f5a8:	f7ff fd64 	bl	800f074 <read_submessage_list>
 800f5ac:	2204      	movs	r2, #4
 800f5ae:	4629      	mov	r1, r5
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	f007 f83f 	bl	8016634 <uxr_next_input_reliable_buffer_available>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d1ed      	bne.n	800f596 <listen_message_reliably+0x212>
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	4632      	mov	r2, r6
 800f5be:	4649      	mov	r1, r9
 800f5c0:	f7ff fbd4 	bl	800ed6c <write_submessage_acknack.isra.0>
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	b01d      	add	sp, #116	@ 0x74
 800f5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5cc:	4631      	mov	r1, r6
 800f5ce:	f108 0008 	add.w	r0, r8, #8
 800f5d2:	f000 fd13 	bl	800fffc <uxr_get_input_best_effort_stream>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d099      	beq.n	800f50e <listen_message_reliably+0x18a>
 800f5da:	4651      	mov	r1, sl
 800f5dc:	f006 ff16 	bl	801640c <uxr_receive_best_effort_message>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d094      	beq.n	800f50e <listen_message_reliably+0x18a>
 800f5e4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f5e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5ea:	a90c      	add	r1, sp, #48	@ 0x30
 800f5ec:	4640      	mov	r0, r8
 800f5ee:	f7ff fd41 	bl	800f074 <read_submessage_list>
 800f5f2:	e78c      	b.n	800f50e <listen_message_reliably+0x18a>
 800f5f4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f5f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5fa:	a90c      	add	r1, sp, #48	@ 0x30
 800f5fc:	4640      	mov	r0, r8
 800f5fe:	f7ff fd39 	bl	800f074 <read_submessage_list>
 800f602:	e7c4      	b.n	800f58e <listen_message_reliably+0x20a>

0800f604 <uxr_run_session_timeout>:
 800f604:	b570      	push	{r4, r5, r6, lr}
 800f606:	4604      	mov	r4, r0
 800f608:	460d      	mov	r5, r1
 800f60a:	f000 fd67 	bl	80100dc <uxr_millis>
 800f60e:	4606      	mov	r6, r0
 800f610:	4620      	mov	r0, r4
 800f612:	f7ff fc71 	bl	800eef8 <uxr_flash_output_streams>
 800f616:	4629      	mov	r1, r5
 800f618:	4620      	mov	r0, r4
 800f61a:	f7ff feb3 	bl	800f384 <listen_message_reliably>
 800f61e:	f000 fd5d 	bl	80100dc <uxr_millis>
 800f622:	1b83      	subs	r3, r0, r6
 800f624:	1ae9      	subs	r1, r5, r3
 800f626:	2900      	cmp	r1, #0
 800f628:	dcf6      	bgt.n	800f618 <uxr_run_session_timeout+0x14>
 800f62a:	f104 0008 	add.w	r0, r4, #8
 800f62e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f632:	f000 bcf7 	b.w	8010024 <uxr_output_streams_confirmed>
 800f636:	bf00      	nop

0800f638 <uxr_run_session_until_data>:
 800f638:	b570      	push	{r4, r5, r6, lr}
 800f63a:	4604      	mov	r4, r0
 800f63c:	460d      	mov	r5, r1
 800f63e:	f000 fd4d 	bl	80100dc <uxr_millis>
 800f642:	4606      	mov	r6, r0
 800f644:	4620      	mov	r0, r4
 800f646:	f7ff fc57 	bl	800eef8 <uxr_flash_output_streams>
 800f64a:	2300      	movs	r3, #0
 800f64c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f650:	4629      	mov	r1, r5
 800f652:	e005      	b.n	800f660 <uxr_run_session_until_data+0x28>
 800f654:	f000 fd42 	bl	80100dc <uxr_millis>
 800f658:	1b83      	subs	r3, r0, r6
 800f65a:	1ae9      	subs	r1, r5, r3
 800f65c:	2900      	cmp	r1, #0
 800f65e:	dd07      	ble.n	800f670 <uxr_run_session_until_data+0x38>
 800f660:	4620      	mov	r0, r4
 800f662:	f7ff fe8f 	bl	800f384 <listen_message_reliably>
 800f666:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d0f2      	beq.n	800f654 <uxr_run_session_until_data+0x1c>
 800f66e:	bd70      	pop	{r4, r5, r6, pc}
 800f670:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f674:	bd70      	pop	{r4, r5, r6, pc}
 800f676:	bf00      	nop

0800f678 <uxr_run_session_until_confirm_delivery>:
 800f678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f67c:	4606      	mov	r6, r0
 800f67e:	460d      	mov	r5, r1
 800f680:	f000 fd2c 	bl	80100dc <uxr_millis>
 800f684:	4607      	mov	r7, r0
 800f686:	4630      	mov	r0, r6
 800f688:	f7ff fc36 	bl	800eef8 <uxr_flash_output_streams>
 800f68c:	2d00      	cmp	r5, #0
 800f68e:	f106 0808 	add.w	r8, r6, #8
 800f692:	bfa8      	it	ge
 800f694:	462c      	movge	r4, r5
 800f696:	da07      	bge.n	800f6a8 <uxr_run_session_until_confirm_delivery+0x30>
 800f698:	e00e      	b.n	800f6b8 <uxr_run_session_until_confirm_delivery+0x40>
 800f69a:	f7ff fe73 	bl	800f384 <listen_message_reliably>
 800f69e:	f000 fd1d 	bl	80100dc <uxr_millis>
 800f6a2:	1bc3      	subs	r3, r0, r7
 800f6a4:	1aec      	subs	r4, r5, r3
 800f6a6:	d407      	bmi.n	800f6b8 <uxr_run_session_until_confirm_delivery+0x40>
 800f6a8:	4640      	mov	r0, r8
 800f6aa:	f000 fcbb 	bl	8010024 <uxr_output_streams_confirmed>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	4621      	mov	r1, r4
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d0f0      	beq.n	800f69a <uxr_run_session_until_confirm_delivery+0x22>
 800f6b8:	4640      	mov	r0, r8
 800f6ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6be:	f000 bcb1 	b.w	8010024 <uxr_output_streams_confirmed>
 800f6c2:	bf00      	nop

0800f6c4 <uxr_run_session_until_all_status>:
 800f6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6c8:	9c08      	ldr	r4, [sp, #32]
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460f      	mov	r7, r1
 800f6ce:	4691      	mov	r9, r2
 800f6d0:	461d      	mov	r5, r3
 800f6d2:	f7ff fc11 	bl	800eef8 <uxr_flash_output_streams>
 800f6d6:	b124      	cbz	r4, 800f6e2 <uxr_run_session_until_all_status+0x1e>
 800f6d8:	4622      	mov	r2, r4
 800f6da:	21ff      	movs	r1, #255	@ 0xff
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f009 fc2b 	bl	8018f38 <memset>
 800f6e2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f6e6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f6e8:	f000 fcf8 	bl	80100dc <uxr_millis>
 800f6ec:	3d01      	subs	r5, #1
 800f6ee:	f1a9 0902 	sub.w	r9, r9, #2
 800f6f2:	4680      	mov	r8, r0
 800f6f4:	4639      	mov	r1, r7
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	f7ff fe44 	bl	800f384 <listen_message_reliably>
 800f6fc:	f000 fcee 	bl	80100dc <uxr_millis>
 800f700:	eba0 0008 	sub.w	r0, r0, r8
 800f704:	1a39      	subs	r1, r7, r0
 800f706:	b344      	cbz	r4, 800f75a <uxr_run_session_until_all_status+0x96>
 800f708:	4628      	mov	r0, r5
 800f70a:	46ac      	mov	ip, r5
 800f70c:	2301      	movs	r3, #1
 800f70e:	e002      	b.n	800f716 <uxr_run_session_until_all_status+0x52>
 800f710:	42a3      	cmp	r3, r4
 800f712:	d20d      	bcs.n	800f730 <uxr_run_session_until_all_status+0x6c>
 800f714:	3301      	adds	r3, #1
 800f716:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f71a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f71e:	d1f7      	bne.n	800f710 <uxr_run_session_until_all_status+0x4c>
 800f720:	42a3      	cmp	r3, r4
 800f722:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f726:	d213      	bcs.n	800f750 <uxr_run_session_until_all_status+0x8c>
 800f728:	2a00      	cmp	r2, #0
 800f72a:	d0f3      	beq.n	800f714 <uxr_run_session_until_all_status+0x50>
 800f72c:	2900      	cmp	r1, #0
 800f72e:	dce2      	bgt.n	800f6f6 <uxr_run_session_until_all_status+0x32>
 800f730:	2300      	movs	r3, #0
 800f732:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f734:	442c      	add	r4, r5
 800f736:	e001      	b.n	800f73c <uxr_run_session_until_all_status+0x78>
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d812      	bhi.n	800f762 <uxr_run_session_until_all_status+0x9e>
 800f73c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f740:	4284      	cmp	r4, r0
 800f742:	d1f9      	bne.n	800f738 <uxr_run_session_until_all_status+0x74>
 800f744:	2b01      	cmp	r3, #1
 800f746:	bf8c      	ite	hi
 800f748:	2000      	movhi	r0, #0
 800f74a:	2001      	movls	r0, #1
 800f74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f750:	2900      	cmp	r1, #0
 800f752:	dded      	ble.n	800f730 <uxr_run_session_until_all_status+0x6c>
 800f754:	2a00      	cmp	r2, #0
 800f756:	d1ce      	bne.n	800f6f6 <uxr_run_session_until_all_status+0x32>
 800f758:	e7ea      	b.n	800f730 <uxr_run_session_until_all_status+0x6c>
 800f75a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f75c:	2001      	movs	r0, #1
 800f75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f762:	2000      	movs	r0, #0
 800f764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f768 <wait_session_status>:
 800f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76c:	4604      	mov	r4, r0
 800f76e:	b09d      	sub	sp, #116	@ 0x74
 800f770:	20ff      	movs	r0, #255	@ 0xff
 800f772:	7160      	strb	r0, [r4, #5]
 800f774:	9303      	str	r3, [sp, #12]
 800f776:	2b00      	cmp	r3, #0
 800f778:	f000 80b6 	beq.w	800f8e8 <wait_session_status+0x180>
 800f77c:	468a      	mov	sl, r1
 800f77e:	4691      	mov	r9, r2
 800f780:	f04f 0b00 	mov.w	fp, #0
 800f784:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f786:	464a      	mov	r2, r9
 800f788:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f78c:	4651      	mov	r1, sl
 800f78e:	47a8      	blx	r5
 800f790:	f000 fca4 	bl	80100dc <uxr_millis>
 800f794:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f798:	4605      	mov	r5, r0
 800f79a:	e009      	b.n	800f7b0 <wait_session_status+0x48>
 800f79c:	f000 fc9e 	bl	80100dc <uxr_millis>
 800f7a0:	1b40      	subs	r0, r0, r5
 800f7a2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	dd40      	ble.n	800f82c <wait_session_status+0xc4>
 800f7aa:	7960      	ldrb	r0, [r4, #5]
 800f7ac:	28ff      	cmp	r0, #255	@ 0xff
 800f7ae:	d145      	bne.n	800f83c <wait_session_status+0xd4>
 800f7b0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f7b2:	a908      	add	r1, sp, #32
 800f7b4:	6896      	ldr	r6, [r2, #8]
 800f7b6:	6810      	ldr	r0, [r2, #0]
 800f7b8:	aa09      	add	r2, sp, #36	@ 0x24
 800f7ba:	47b0      	blx	r6
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	d0ed      	beq.n	800f79c <wait_session_status+0x34>
 800f7c0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f7c4:	a80c      	add	r0, sp, #48	@ 0x30
 800f7c6:	f7fc f979 	bl	800babc <ucdr_init_buffer>
 800f7ca:	2600      	movs	r6, #0
 800f7cc:	f10d 031e 	add.w	r3, sp, #30
 800f7d0:	aa07      	add	r2, sp, #28
 800f7d2:	a90c      	add	r1, sp, #48	@ 0x30
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	f88d 601c 	strb.w	r6, [sp, #28]
 800f7da:	f000 fa87 	bl	800fcec <uxr_read_session_header>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d0dc      	beq.n	800f79c <wait_session_status+0x34>
 800f7e2:	4631      	mov	r1, r6
 800f7e4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f7e8:	f000 fb24 	bl	800fe34 <uxr_stream_id_from_raw>
 800f7ec:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f7f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f7f4:	9302      	str	r3, [sp, #8]
 800f7f6:	2f01      	cmp	r7, #1
 800f7f8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f7fc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f800:	d05c      	beq.n	800f8bc <wait_session_status+0x154>
 800f802:	2f02      	cmp	r7, #2
 800f804:	d020      	beq.n	800f848 <wait_session_status+0xe0>
 800f806:	2f00      	cmp	r7, #0
 800f808:	d1c8      	bne.n	800f79c <wait_session_status+0x34>
 800f80a:	4639      	mov	r1, r7
 800f80c:	4638      	mov	r0, r7
 800f80e:	f000 fb11 	bl	800fe34 <uxr_stream_id_from_raw>
 800f812:	a90c      	add	r1, sp, #48	@ 0x30
 800f814:	4602      	mov	r2, r0
 800f816:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f818:	4620      	mov	r0, r4
 800f81a:	f7ff fc2b 	bl	800f074 <read_submessage_list>
 800f81e:	f000 fc5d 	bl	80100dc <uxr_millis>
 800f822:	1b40      	subs	r0, r0, r5
 800f824:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f828:	2b00      	cmp	r3, #0
 800f82a:	dcbe      	bgt.n	800f7aa <wait_session_status+0x42>
 800f82c:	9b03      	ldr	r3, [sp, #12]
 800f82e:	7960      	ldrb	r0, [r4, #5]
 800f830:	f10b 0b01 	add.w	fp, fp, #1
 800f834:	455b      	cmp	r3, fp
 800f836:	d001      	beq.n	800f83c <wait_session_status+0xd4>
 800f838:	28ff      	cmp	r0, #255	@ 0xff
 800f83a:	d0a3      	beq.n	800f784 <wait_session_status+0x1c>
 800f83c:	38ff      	subs	r0, #255	@ 0xff
 800f83e:	bf18      	it	ne
 800f840:	2001      	movne	r0, #1
 800f842:	b01d      	add	sp, #116	@ 0x74
 800f844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f848:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f84c:	9304      	str	r3, [sp, #16]
 800f84e:	4631      	mov	r1, r6
 800f850:	f104 0008 	add.w	r0, r4, #8
 800f854:	f000 fbdc 	bl	8010010 <uxr_get_input_reliable_stream>
 800f858:	4680      	mov	r8, r0
 800f85a:	b348      	cbz	r0, 800f8b0 <wait_session_status+0x148>
 800f85c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f85e:	9205      	str	r2, [sp, #20]
 800f860:	a80c      	add	r0, sp, #48	@ 0x30
 800f862:	f7fc f95b 	bl	800bb1c <ucdr_buffer_remaining>
 800f866:	4603      	mov	r3, r0
 800f868:	f10d 001d 	add.w	r0, sp, #29
 800f86c:	9000      	str	r0, [sp, #0]
 800f86e:	9a05      	ldr	r2, [sp, #20]
 800f870:	9902      	ldr	r1, [sp, #8]
 800f872:	4640      	mov	r0, r8
 800f874:	f006 fe5e 	bl	8016534 <uxr_receive_reliable_message>
 800f878:	b1d0      	cbz	r0, 800f8b0 <wait_session_status+0x148>
 800f87a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d03a      	beq.n	800f8f8 <wait_session_status+0x190>
 800f882:	9f04      	ldr	r7, [sp, #16]
 800f884:	e00a      	b.n	800f89c <wait_session_status+0x134>
 800f886:	f04f 0302 	mov.w	r3, #2
 800f88a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800f88e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f892:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800f896:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f898:	f7ff fbec 	bl	800f074 <read_submessage_list>
 800f89c:	a914      	add	r1, sp, #80	@ 0x50
 800f89e:	2204      	movs	r2, #4
 800f8a0:	4640      	mov	r0, r8
 800f8a2:	f006 fec7 	bl	8016634 <uxr_next_input_reliable_buffer_available>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	a914      	add	r1, sp, #80	@ 0x50
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d1ea      	bne.n	800f886 <wait_session_status+0x11e>
 800f8b0:	9904      	ldr	r1, [sp, #16]
 800f8b2:	4632      	mov	r2, r6
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	f7ff fa59 	bl	800ed6c <write_submessage_acknack.isra.0>
 800f8ba:	e76f      	b.n	800f79c <wait_session_status+0x34>
 800f8bc:	4631      	mov	r1, r6
 800f8be:	f104 0008 	add.w	r0, r4, #8
 800f8c2:	f000 fb9b 	bl	800fffc <uxr_get_input_best_effort_stream>
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	f43f af68 	beq.w	800f79c <wait_session_status+0x34>
 800f8cc:	9902      	ldr	r1, [sp, #8]
 800f8ce:	f006 fd9d 	bl	801640c <uxr_receive_best_effort_message>
 800f8d2:	2800      	cmp	r0, #0
 800f8d4:	f43f af62 	beq.w	800f79c <wait_session_status+0x34>
 800f8d8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f8dc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f8de:	a90c      	add	r1, sp, #48	@ 0x30
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f7ff fbc7 	bl	800f074 <read_submessage_list>
 800f8e6:	e759      	b.n	800f79c <wait_session_status+0x34>
 800f8e8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f8ea:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f8ee:	47a0      	blx	r4
 800f8f0:	2001      	movs	r0, #1
 800f8f2:	b01d      	add	sp, #116	@ 0x74
 800f8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f8fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f8fe:	a90c      	add	r1, sp, #48	@ 0x30
 800f900:	4620      	mov	r0, r4
 800f902:	f7ff fbb7 	bl	800f074 <read_submessage_list>
 800f906:	e7bc      	b.n	800f882 <wait_session_status+0x11a>

0800f908 <uxr_delete_session_retries>:
 800f908:	b530      	push	{r4, r5, lr}
 800f90a:	b08f      	sub	sp, #60	@ 0x3c
 800f90c:	4604      	mov	r4, r0
 800f90e:	460d      	mov	r5, r1
 800f910:	f000 fa2e 	bl	800fd70 <uxr_session_header_offset>
 800f914:	2300      	movs	r3, #0
 800f916:	2210      	movs	r2, #16
 800f918:	9000      	str	r0, [sp, #0]
 800f91a:	a902      	add	r1, sp, #8
 800f91c:	a806      	add	r0, sp, #24
 800f91e:	f7fc f8bb 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 800f922:	a906      	add	r1, sp, #24
 800f924:	4620      	mov	r0, r4
 800f926:	f000 f973 	bl	800fc10 <uxr_buffer_delete_session>
 800f92a:	2200      	movs	r2, #0
 800f92c:	4611      	mov	r1, r2
 800f92e:	9b06      	ldr	r3, [sp, #24]
 800f930:	4620      	mov	r0, r4
 800f932:	f000 f9c7 	bl	800fcc4 <uxr_stamp_session_header>
 800f936:	a806      	add	r0, sp, #24
 800f938:	f7fc f8ec 	bl	800bb14 <ucdr_buffer_length>
 800f93c:	462b      	mov	r3, r5
 800f93e:	4602      	mov	r2, r0
 800f940:	a902      	add	r1, sp, #8
 800f942:	4620      	mov	r0, r4
 800f944:	f7ff ff10 	bl	800f768 <wait_session_status>
 800f948:	b118      	cbz	r0, 800f952 <uxr_delete_session_retries+0x4a>
 800f94a:	7960      	ldrb	r0, [r4, #5]
 800f94c:	fab0 f080 	clz	r0, r0
 800f950:	0940      	lsrs	r0, r0, #5
 800f952:	b00f      	add	sp, #60	@ 0x3c
 800f954:	bd30      	pop	{r4, r5, pc}
 800f956:	bf00      	nop

0800f958 <uxr_create_session>:
 800f958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95c:	f100 0b08 	add.w	fp, r0, #8
 800f960:	b0ab      	sub	sp, #172	@ 0xac
 800f962:	4604      	mov	r4, r0
 800f964:	4658      	mov	r0, fp
 800f966:	f000 fa99 	bl	800fe9c <uxr_reset_stream_storage>
 800f96a:	4620      	mov	r0, r4
 800f96c:	f000 fa00 	bl	800fd70 <uxr_session_header_offset>
 800f970:	2300      	movs	r3, #0
 800f972:	9000      	str	r0, [sp, #0]
 800f974:	221c      	movs	r2, #28
 800f976:	a90b      	add	r1, sp, #44	@ 0x2c
 800f978:	a812      	add	r0, sp, #72	@ 0x48
 800f97a:	f7fc f88d 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 800f97e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f980:	8a1a      	ldrh	r2, [r3, #16]
 800f982:	3a04      	subs	r2, #4
 800f984:	b292      	uxth	r2, r2
 800f986:	a912      	add	r1, sp, #72	@ 0x48
 800f988:	4620      	mov	r0, r4
 800f98a:	f000 f917 	bl	800fbbc <uxr_buffer_create_session>
 800f98e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f990:	4620      	mov	r0, r4
 800f992:	f000 f983 	bl	800fc9c <uxr_stamp_create_session_header>
 800f996:	a812      	add	r0, sp, #72	@ 0x48
 800f998:	f7fc f8bc 	bl	800bb14 <ucdr_buffer_length>
 800f99c:	23ff      	movs	r3, #255	@ 0xff
 800f99e:	7163      	strb	r3, [r4, #5]
 800f9a0:	230a      	movs	r3, #10
 800f9a2:	46da      	mov	sl, fp
 800f9a4:	9303      	str	r3, [sp, #12]
 800f9a6:	4683      	mov	fp, r0
 800f9a8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f9aa:	465a      	mov	r2, fp
 800f9ac:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f9b0:	a90b      	add	r1, sp, #44	@ 0x2c
 800f9b2:	47a8      	blx	r5
 800f9b4:	f000 fb92 	bl	80100dc <uxr_millis>
 800f9b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f9bc:	4605      	mov	r5, r0
 800f9be:	e009      	b.n	800f9d4 <uxr_create_session+0x7c>
 800f9c0:	f000 fb8c 	bl	80100dc <uxr_millis>
 800f9c4:	1b40      	subs	r0, r0, r5
 800f9c6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	7962      	ldrb	r2, [r4, #5]
 800f9ce:	dd38      	ble.n	800fa42 <uxr_create_session+0xea>
 800f9d0:	2aff      	cmp	r2, #255	@ 0xff
 800f9d2:	d13c      	bne.n	800fa4e <uxr_create_session+0xf6>
 800f9d4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f9d6:	a907      	add	r1, sp, #28
 800f9d8:	6896      	ldr	r6, [r2, #8]
 800f9da:	6810      	ldr	r0, [r2, #0]
 800f9dc:	aa08      	add	r2, sp, #32
 800f9de:	47b0      	blx	r6
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	d0ed      	beq.n	800f9c0 <uxr_create_session+0x68>
 800f9e4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f9e8:	a81a      	add	r0, sp, #104	@ 0x68
 800f9ea:	f7fc f867 	bl	800babc <ucdr_init_buffer>
 800f9ee:	2600      	movs	r6, #0
 800f9f0:	f10d 031a 	add.w	r3, sp, #26
 800f9f4:	aa06      	add	r2, sp, #24
 800f9f6:	a91a      	add	r1, sp, #104	@ 0x68
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	f88d 6018 	strb.w	r6, [sp, #24]
 800f9fe:	f000 f975 	bl	800fcec <uxr_read_session_header>
 800fa02:	2800      	cmp	r0, #0
 800fa04:	d0dc      	beq.n	800f9c0 <uxr_create_session+0x68>
 800fa06:	4631      	mov	r1, r6
 800fa08:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fa0c:	f000 fa12 	bl	800fe34 <uxr_stream_id_from_raw>
 800fa10:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800fa14:	2e01      	cmp	r6, #1
 800fa16:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fa1a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800fa1e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800fa22:	d053      	beq.n	800facc <uxr_create_session+0x174>
 800fa24:	2e02      	cmp	r6, #2
 800fa26:	d018      	beq.n	800fa5a <uxr_create_session+0x102>
 800fa28:	2e00      	cmp	r6, #0
 800fa2a:	d1c9      	bne.n	800f9c0 <uxr_create_session+0x68>
 800fa2c:	4631      	mov	r1, r6
 800fa2e:	4630      	mov	r0, r6
 800fa30:	f000 fa00 	bl	800fe34 <uxr_stream_id_from_raw>
 800fa34:	a91a      	add	r1, sp, #104	@ 0x68
 800fa36:	4602      	mov	r2, r0
 800fa38:	900a      	str	r0, [sp, #40]	@ 0x28
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f7ff fb1a 	bl	800f074 <read_submessage_list>
 800fa40:	e7be      	b.n	800f9c0 <uxr_create_session+0x68>
 800fa42:	9b03      	ldr	r3, [sp, #12]
 800fa44:	3b01      	subs	r3, #1
 800fa46:	9303      	str	r3, [sp, #12]
 800fa48:	d001      	beq.n	800fa4e <uxr_create_session+0xf6>
 800fa4a:	2aff      	cmp	r2, #255	@ 0xff
 800fa4c:	d0ac      	beq.n	800f9a8 <uxr_create_session+0x50>
 800fa4e:	2a00      	cmp	r2, #0
 800fa50:	d051      	beq.n	800faf6 <uxr_create_session+0x19e>
 800fa52:	2000      	movs	r0, #0
 800fa54:	b02b      	add	sp, #172	@ 0xac
 800fa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fa5e:	9304      	str	r3, [sp, #16]
 800fa60:	4639      	mov	r1, r7
 800fa62:	4650      	mov	r0, sl
 800fa64:	f000 fad4 	bl	8010010 <uxr_get_input_reliable_stream>
 800fa68:	4680      	mov	r8, r0
 800fa6a:	b348      	cbz	r0, 800fac0 <uxr_create_session+0x168>
 800fa6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fa6e:	9205      	str	r2, [sp, #20]
 800fa70:	a81a      	add	r0, sp, #104	@ 0x68
 800fa72:	f7fc f853 	bl	800bb1c <ucdr_buffer_remaining>
 800fa76:	4603      	mov	r3, r0
 800fa78:	f10d 0019 	add.w	r0, sp, #25
 800fa7c:	9000      	str	r0, [sp, #0]
 800fa7e:	9a05      	ldr	r2, [sp, #20]
 800fa80:	4649      	mov	r1, r9
 800fa82:	4640      	mov	r0, r8
 800fa84:	f006 fd56 	bl	8016534 <uxr_receive_reliable_message>
 800fa88:	b1d0      	cbz	r0, 800fac0 <uxr_create_session+0x168>
 800fa8a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d038      	beq.n	800fb04 <uxr_create_session+0x1ac>
 800fa92:	9e04      	ldr	r6, [sp, #16]
 800fa94:	e00a      	b.n	800faac <uxr_create_session+0x154>
 800fa96:	f04f 0302 	mov.w	r3, #2
 800fa9a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800fa9e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800faa2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800faa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800faa8:	f7ff fae4 	bl	800f074 <read_submessage_list>
 800faac:	a922      	add	r1, sp, #136	@ 0x88
 800faae:	2204      	movs	r2, #4
 800fab0:	4640      	mov	r0, r8
 800fab2:	f006 fdbf 	bl	8016634 <uxr_next_input_reliable_buffer_available>
 800fab6:	4603      	mov	r3, r0
 800fab8:	a922      	add	r1, sp, #136	@ 0x88
 800faba:	4620      	mov	r0, r4
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d1ea      	bne.n	800fa96 <uxr_create_session+0x13e>
 800fac0:	9904      	ldr	r1, [sp, #16]
 800fac2:	463a      	mov	r2, r7
 800fac4:	4620      	mov	r0, r4
 800fac6:	f7ff f951 	bl	800ed6c <write_submessage_acknack.isra.0>
 800faca:	e779      	b.n	800f9c0 <uxr_create_session+0x68>
 800facc:	4639      	mov	r1, r7
 800face:	4650      	mov	r0, sl
 800fad0:	f000 fa94 	bl	800fffc <uxr_get_input_best_effort_stream>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	f43f af73 	beq.w	800f9c0 <uxr_create_session+0x68>
 800fada:	4649      	mov	r1, r9
 800fadc:	f006 fc96 	bl	801640c <uxr_receive_best_effort_message>
 800fae0:	2800      	cmp	r0, #0
 800fae2:	f43f af6d 	beq.w	800f9c0 <uxr_create_session+0x68>
 800fae6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800faea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800faec:	a91a      	add	r1, sp, #104	@ 0x68
 800faee:	4620      	mov	r0, r4
 800faf0:	f7ff fac0 	bl	800f074 <read_submessage_list>
 800faf4:	e764      	b.n	800f9c0 <uxr_create_session+0x68>
 800faf6:	4650      	mov	r0, sl
 800faf8:	f000 f9d0 	bl	800fe9c <uxr_reset_stream_storage>
 800fafc:	2001      	movs	r0, #1
 800fafe:	b02b      	add	sp, #172	@ 0xac
 800fb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb04:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fb08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb0a:	a91a      	add	r1, sp, #104	@ 0x68
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f7ff fab1 	bl	800f074 <read_submessage_list>
 800fb12:	e7be      	b.n	800fa92 <uxr_create_session+0x13a>

0800fb14 <uxr_prepare_stream_to_write_submessage>:
 800fb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb18:	b082      	sub	sp, #8
 800fb1a:	4682      	mov	sl, r0
 800fb1c:	4610      	mov	r0, r2
 800fb1e:	4615      	mov	r5, r2
 800fb20:	461e      	mov	r6, r3
 800fb22:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800fb26:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800fb2a:	9101      	str	r1, [sp, #4]
 800fb2c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800fb30:	f000 face 	bl	80100d0 <uxr_submessage_padding>
 800fb34:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fb38:	f105 0904 	add.w	r9, r5, #4
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	4481      	add	r9, r0
 800fb40:	d01d      	beq.n	800fb7e <uxr_prepare_stream_to_write_submessage+0x6a>
 800fb42:	2b02      	cmp	r3, #2
 800fb44:	d116      	bne.n	800fb74 <uxr_prepare_stream_to_write_submessage+0x60>
 800fb46:	4621      	mov	r1, r4
 800fb48:	f10a 0008 	add.w	r0, sl, #8
 800fb4c:	f000 fa4c 	bl	800ffe8 <uxr_get_output_reliable_stream>
 800fb50:	4604      	mov	r4, r0
 800fb52:	b158      	cbz	r0, 800fb6c <uxr_prepare_stream_to_write_submessage+0x58>
 800fb54:	4649      	mov	r1, r9
 800fb56:	4632      	mov	r2, r6
 800fb58:	f006 ff28 	bl	80169ac <uxr_prepare_reliable_buffer_to_write>
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	b12c      	cbz	r4, 800fb6c <uxr_prepare_stream_to_write_submessage+0x58>
 800fb60:	4643      	mov	r3, r8
 800fb62:	b2aa      	uxth	r2, r5
 800fb64:	4639      	mov	r1, r7
 800fb66:	4630      	mov	r0, r6
 800fb68:	f000 fa72 	bl	8010050 <uxr_buffer_submessage_header>
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	b002      	add	sp, #8
 800fb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb74:	2400      	movs	r4, #0
 800fb76:	4620      	mov	r0, r4
 800fb78:	b002      	add	sp, #8
 800fb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb7e:	4621      	mov	r1, r4
 800fb80:	f10a 0008 	add.w	r0, sl, #8
 800fb84:	f000 fa28 	bl	800ffd8 <uxr_get_output_best_effort_stream>
 800fb88:	4604      	mov	r4, r0
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d0ee      	beq.n	800fb6c <uxr_prepare_stream_to_write_submessage+0x58>
 800fb8e:	4649      	mov	r1, r9
 800fb90:	4632      	mov	r2, r6
 800fb92:	f006 fe3b 	bl	801680c <uxr_prepare_best_effort_buffer_to_write>
 800fb96:	4604      	mov	r4, r0
 800fb98:	e7e1      	b.n	800fb5e <uxr_prepare_stream_to_write_submessage+0x4a>
 800fb9a:	bf00      	nop

0800fb9c <uxr_init_session_info>:
 800fb9c:	0e13      	lsrs	r3, r2, #24
 800fb9e:	7043      	strb	r3, [r0, #1]
 800fba0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800fba4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fba8:	7001      	strb	r1, [r0, #0]
 800fbaa:	70c3      	strb	r3, [r0, #3]
 800fbac:	2109      	movs	r1, #9
 800fbae:	23ff      	movs	r3, #255	@ 0xff
 800fbb0:	f880 c002 	strb.w	ip, [r0, #2]
 800fbb4:	7102      	strb	r2, [r0, #4]
 800fbb6:	80c1      	strh	r1, [r0, #6]
 800fbb8:	7143      	strb	r3, [r0, #5]
 800fbba:	4770      	bx	lr

0800fbbc <uxr_buffer_create_session>:
 800fbbc:	b530      	push	{r4, r5, lr}
 800fbbe:	b089      	sub	sp, #36	@ 0x24
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	4d12      	ldr	r5, [pc, #72]	@ (800fc0c <uxr_buffer_create_session+0x50>)
 800fbc4:	9307      	str	r3, [sp, #28]
 800fbc6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fbca:	2201      	movs	r2, #1
 800fbcc:	9301      	str	r3, [sp, #4]
 800fbce:	80c2      	strh	r2, [r0, #6]
 800fbd0:	f88d 2004 	strb.w	r2, [sp, #4]
 800fbd4:	682a      	ldr	r2, [r5, #0]
 800fbd6:	9200      	str	r2, [sp, #0]
 800fbd8:	88aa      	ldrh	r2, [r5, #4]
 800fbda:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fbde:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800fbe2:	9202      	str	r2, [sp, #8]
 800fbe4:	460c      	mov	r4, r1
 800fbe6:	7802      	ldrb	r2, [r0, #0]
 800fbe8:	9303      	str	r3, [sp, #12]
 800fbea:	4619      	mov	r1, r3
 800fbec:	f88d 200c 	strb.w	r2, [sp, #12]
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	2210      	movs	r2, #16
 800fbf4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800fbf8:	9306      	str	r3, [sp, #24]
 800fbfa:	f000 fa29 	bl	8010050 <uxr_buffer_submessage_header>
 800fbfe:	4669      	mov	r1, sp
 800fc00:	4620      	mov	r0, r4
 800fc02:	f001 fa6d 	bl	80110e0 <uxr_serialize_CREATE_CLIENT_Payload>
 800fc06:	b009      	add	sp, #36	@ 0x24
 800fc08:	bd30      	pop	{r4, r5, pc}
 800fc0a:	bf00      	nop
 800fc0c:	08019e3c 	.word	0x08019e3c

0800fc10 <uxr_buffer_delete_session>:
 800fc10:	b510      	push	{r4, lr}
 800fc12:	4b0c      	ldr	r3, [pc, #48]	@ (800fc44 <uxr_buffer_delete_session+0x34>)
 800fc14:	b082      	sub	sp, #8
 800fc16:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800fc1a:	f8ad c006 	strh.w	ip, [sp, #6]
 800fc1e:	460c      	mov	r4, r1
 800fc20:	2202      	movs	r2, #2
 800fc22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc26:	80c2      	strh	r2, [r0, #6]
 800fc28:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fc2c:	2204      	movs	r2, #4
 800fc2e:	2300      	movs	r3, #0
 800fc30:	2103      	movs	r1, #3
 800fc32:	4620      	mov	r0, r4
 800fc34:	f000 fa0c 	bl	8010050 <uxr_buffer_submessage_header>
 800fc38:	a901      	add	r1, sp, #4
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f001 faf6 	bl	801122c <uxr_serialize_DELETE_Payload>
 800fc40:	b002      	add	sp, #8
 800fc42:	bd10      	pop	{r4, pc}
 800fc44:	08019e3c 	.word	0x08019e3c

0800fc48 <uxr_read_create_session_status>:
 800fc48:	b510      	push	{r4, lr}
 800fc4a:	b088      	sub	sp, #32
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	4608      	mov	r0, r1
 800fc50:	a901      	add	r1, sp, #4
 800fc52:	f001 fafb 	bl	801124c <uxr_deserialize_STATUS_AGENT_Payload>
 800fc56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fc5a:	7163      	strb	r3, [r4, #5]
 800fc5c:	b008      	add	sp, #32
 800fc5e:	bd10      	pop	{r4, pc}

0800fc60 <uxr_read_delete_session_status>:
 800fc60:	b510      	push	{r4, lr}
 800fc62:	4604      	mov	r4, r0
 800fc64:	b084      	sub	sp, #16
 800fc66:	4608      	mov	r0, r1
 800fc68:	a902      	add	r1, sp, #8
 800fc6a:	f001 fb1f 	bl	80112ac <uxr_deserialize_STATUS_Payload>
 800fc6e:	88e3      	ldrh	r3, [r4, #6]
 800fc70:	2b02      	cmp	r3, #2
 800fc72:	d001      	beq.n	800fc78 <uxr_read_delete_session_status+0x18>
 800fc74:	b004      	add	sp, #16
 800fc76:	bd10      	pop	{r4, pc}
 800fc78:	f10d 000a 	add.w	r0, sp, #10
 800fc7c:	f7fe fffc 	bl	800ec78 <uxr_object_id_from_raw>
 800fc80:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800fc84:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800fc88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	2b02      	cmp	r3, #2
 800fc90:	bf04      	itt	eq
 800fc92:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800fc96:	7163      	strbeq	r3, [r4, #5]
 800fc98:	b004      	add	sp, #16
 800fc9a:	bd10      	pop	{r4, pc}

0800fc9c <uxr_stamp_create_session_header>:
 800fc9c:	b510      	push	{r4, lr}
 800fc9e:	2208      	movs	r2, #8
 800fca0:	b08a      	sub	sp, #40	@ 0x28
 800fca2:	4604      	mov	r4, r0
 800fca4:	eb0d 0002 	add.w	r0, sp, r2
 800fca8:	f7fb ff08 	bl	800babc <ucdr_init_buffer>
 800fcac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcb0:	9400      	str	r4, [sp, #0]
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800fcba:	a802      	add	r0, sp, #8
 800fcbc:	f000 fbc2 	bl	8010444 <uxr_serialize_message_header>
 800fcc0:	b00a      	add	sp, #40	@ 0x28
 800fcc2:	bd10      	pop	{r4, pc}

0800fcc4 <uxr_stamp_session_header>:
 800fcc4:	b530      	push	{r4, r5, lr}
 800fcc6:	b08d      	sub	sp, #52	@ 0x34
 800fcc8:	4604      	mov	r4, r0
 800fcca:	460d      	mov	r5, r1
 800fccc:	9203      	str	r2, [sp, #12]
 800fcce:	4619      	mov	r1, r3
 800fcd0:	a804      	add	r0, sp, #16
 800fcd2:	2208      	movs	r2, #8
 800fcd4:	f7fb fef2 	bl	800babc <ucdr_init_buffer>
 800fcd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcdc:	9b03      	ldr	r3, [sp, #12]
 800fcde:	9400      	str	r4, [sp, #0]
 800fce0:	462a      	mov	r2, r5
 800fce2:	a804      	add	r0, sp, #16
 800fce4:	f000 fbae 	bl	8010444 <uxr_serialize_message_header>
 800fce8:	b00d      	add	sp, #52	@ 0x34
 800fcea:	bd30      	pop	{r4, r5, pc}

0800fcec <uxr_read_session_header>:
 800fcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf0:	4607      	mov	r7, r0
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	4608      	mov	r0, r1
 800fcf6:	460c      	mov	r4, r1
 800fcf8:	4615      	mov	r5, r2
 800fcfa:	461e      	mov	r6, r3
 800fcfc:	f7fb ff0e 	bl	800bb1c <ucdr_buffer_remaining>
 800fd00:	2808      	cmp	r0, #8
 800fd02:	d803      	bhi.n	800fd0c <uxr_read_session_header+0x20>
 800fd04:	2000      	movs	r0, #0
 800fd06:	b004      	add	sp, #16
 800fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0c:	f10d 080c 	add.w	r8, sp, #12
 800fd10:	4633      	mov	r3, r6
 800fd12:	462a      	mov	r2, r5
 800fd14:	f8cd 8000 	str.w	r8, [sp]
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f10d 010b 	add.w	r1, sp, #11
 800fd1e:	f000 fbaf 	bl	8010480 <uxr_deserialize_message_header>
 800fd22:	783a      	ldrb	r2, [r7, #0]
 800fd24:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d1eb      	bne.n	800fd04 <uxr_read_session_header+0x18>
 800fd2c:	061b      	lsls	r3, r3, #24
 800fd2e:	d41c      	bmi.n	800fd6a <uxr_read_session_header+0x7e>
 800fd30:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800fd34:	787b      	ldrb	r3, [r7, #1]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d003      	beq.n	800fd42 <uxr_read_session_header+0x56>
 800fd3a:	2001      	movs	r0, #1
 800fd3c:	f080 0001 	eor.w	r0, r0, #1
 800fd40:	e7e1      	b.n	800fd06 <uxr_read_session_header+0x1a>
 800fd42:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800fd46:	78bb      	ldrb	r3, [r7, #2]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	f107 0102 	add.w	r1, r7, #2
 800fd4e:	d1f4      	bne.n	800fd3a <uxr_read_session_header+0x4e>
 800fd50:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800fd54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d1ee      	bne.n	800fd3a <uxr_read_session_header+0x4e>
 800fd5c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800fd60:	784b      	ldrb	r3, [r1, #1]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d1e9      	bne.n	800fd3a <uxr_read_session_header+0x4e>
 800fd66:	2000      	movs	r0, #0
 800fd68:	e7e8      	b.n	800fd3c <uxr_read_session_header+0x50>
 800fd6a:	2001      	movs	r0, #1
 800fd6c:	e7cb      	b.n	800fd06 <uxr_read_session_header+0x1a>
 800fd6e:	bf00      	nop

0800fd70 <uxr_session_header_offset>:
 800fd70:	f990 3000 	ldrsb.w	r3, [r0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	bfac      	ite	ge
 800fd78:	2008      	movge	r0, #8
 800fd7a:	2004      	movlt	r0, #4
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop

0800fd80 <uxr_init_base_object_request>:
 800fd80:	b510      	push	{r4, lr}
 800fd82:	88c3      	ldrh	r3, [r0, #6]
 800fd84:	b082      	sub	sp, #8
 800fd86:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800fd8a:	9101      	str	r1, [sp, #4]
 800fd8c:	f1a3 010a 	sub.w	r1, r3, #10
 800fd90:	b289      	uxth	r1, r1
 800fd92:	42a1      	cmp	r1, r4
 800fd94:	d80e      	bhi.n	800fdb4 <uxr_init_base_object_request+0x34>
 800fd96:	3301      	adds	r3, #1
 800fd98:	b29c      	uxth	r4, r3
 800fd9a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	80c4      	strh	r4, [r0, #6]
 800fda2:	9801      	ldr	r0, [sp, #4]
 800fda4:	7011      	strb	r1, [r2, #0]
 800fda6:	7053      	strb	r3, [r2, #1]
 800fda8:	1c91      	adds	r1, r2, #2
 800fdaa:	f7fe ff79 	bl	800eca0 <uxr_object_id_to_raw>
 800fdae:	4620      	mov	r0, r4
 800fdb0:	b002      	add	sp, #8
 800fdb2:	bd10      	pop	{r4, pc}
 800fdb4:	230a      	movs	r3, #10
 800fdb6:	2100      	movs	r1, #0
 800fdb8:	461c      	mov	r4, r3
 800fdba:	e7f1      	b.n	800fda0 <uxr_init_base_object_request+0x20>

0800fdbc <uxr_parse_base_object_request>:
 800fdbc:	b570      	push	{r4, r5, r6, lr}
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	3002      	adds	r0, #2
 800fdc2:	460d      	mov	r5, r1
 800fdc4:	4616      	mov	r6, r2
 800fdc6:	f7fe ff57 	bl	800ec78 <uxr_object_id_from_raw>
 800fdca:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800fdce:	8028      	strh	r0, [r5, #0]
 800fdd0:	806b      	strh	r3, [r5, #2]
 800fdd2:	7822      	ldrb	r2, [r4, #0]
 800fdd4:	7863      	ldrb	r3, [r4, #1]
 800fdd6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fdda:	8033      	strh	r3, [r6, #0]
 800fddc:	bd70      	pop	{r4, r5, r6, pc}
 800fdde:	bf00      	nop

0800fde0 <uxr_stream_id>:
 800fde0:	2901      	cmp	r1, #1
 800fde2:	b082      	sub	sp, #8
 800fde4:	d01d      	beq.n	800fe22 <uxr_stream_id+0x42>
 800fde6:	2902      	cmp	r1, #2
 800fde8:	f04f 0c00 	mov.w	ip, #0
 800fdec:	d01e      	beq.n	800fe2c <uxr_stream_id+0x4c>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	f36c 0307 	bfi	r3, ip, #0, #8
 800fdf4:	f360 230f 	bfi	r3, r0, #8, #8
 800fdf8:	f361 4317 	bfi	r3, r1, #16, #8
 800fdfc:	f362 631f 	bfi	r3, r2, #24, #8
 800fe00:	b2da      	uxtb	r2, r3
 800fe02:	2000      	movs	r0, #0
 800fe04:	f362 0007 	bfi	r0, r2, #0, #8
 800fe08:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fe0c:	f362 200f 	bfi	r0, r2, #8, #8
 800fe10:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fe14:	f362 4017 	bfi	r0, r2, #16, #8
 800fe18:	0e1b      	lsrs	r3, r3, #24
 800fe1a:	f363 601f 	bfi	r0, r3, #24, #8
 800fe1e:	b002      	add	sp, #8
 800fe20:	4770      	bx	lr
 800fe22:	f100 0c01 	add.w	ip, r0, #1
 800fe26:	fa5f fc8c 	uxtb.w	ip, ip
 800fe2a:	e7e0      	b.n	800fdee <uxr_stream_id+0xe>
 800fe2c:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800fe30:	e7dd      	b.n	800fdee <uxr_stream_id+0xe>
 800fe32:	bf00      	nop

0800fe34 <uxr_stream_id_from_raw>:
 800fe34:	b082      	sub	sp, #8
 800fe36:	b130      	cbz	r0, 800fe46 <uxr_stream_id_from_raw+0x12>
 800fe38:	0603      	lsls	r3, r0, #24
 800fe3a:	d420      	bmi.n	800fe7e <uxr_stream_id_from_raw+0x4a>
 800fe3c:	1e42      	subs	r2, r0, #1
 800fe3e:	b2d2      	uxtb	r2, r2
 800fe40:	f04f 0c01 	mov.w	ip, #1
 800fe44:	e001      	b.n	800fe4a <uxr_stream_id_from_raw+0x16>
 800fe46:	4684      	mov	ip, r0
 800fe48:	4602      	mov	r2, r0
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	f360 0307 	bfi	r3, r0, #0, #8
 800fe50:	f362 230f 	bfi	r3, r2, #8, #8
 800fe54:	f36c 4317 	bfi	r3, ip, #16, #8
 800fe58:	f361 631f 	bfi	r3, r1, #24, #8
 800fe5c:	b2da      	uxtb	r2, r3
 800fe5e:	2000      	movs	r0, #0
 800fe60:	f362 0007 	bfi	r0, r2, #0, #8
 800fe64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fe68:	f362 200f 	bfi	r0, r2, #8, #8
 800fe6c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fe70:	f362 4017 	bfi	r0, r2, #16, #8
 800fe74:	0e1b      	lsrs	r3, r3, #24
 800fe76:	f363 601f 	bfi	r0, r3, #24, #8
 800fe7a:	b002      	add	sp, #8
 800fe7c:	4770      	bx	lr
 800fe7e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800fe82:	f04f 0c02 	mov.w	ip, #2
 800fe86:	e7e0      	b.n	800fe4a <uxr_stream_id_from_raw+0x16>

0800fe88 <uxr_init_stream_storage>:
 800fe88:	2300      	movs	r3, #0
 800fe8a:	7403      	strb	r3, [r0, #16]
 800fe8c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800fe90:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800fe94:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800fe98:	4770      	bx	lr
 800fe9a:	bf00      	nop

0800fe9c <uxr_reset_stream_storage>:
 800fe9c:	b570      	push	{r4, r5, r6, lr}
 800fe9e:	7c03      	ldrb	r3, [r0, #16]
 800fea0:	4604      	mov	r4, r0
 800fea2:	b153      	cbz	r3, 800feba <uxr_reset_stream_storage+0x1e>
 800fea4:	4606      	mov	r6, r0
 800fea6:	2500      	movs	r5, #0
 800fea8:	4630      	mov	r0, r6
 800feaa:	f006 fca9 	bl	8016800 <uxr_reset_output_best_effort_stream>
 800feae:	7c23      	ldrb	r3, [r4, #16]
 800feb0:	3501      	adds	r5, #1
 800feb2:	42ab      	cmp	r3, r5
 800feb4:	f106 0610 	add.w	r6, r6, #16
 800feb8:	d8f6      	bhi.n	800fea8 <uxr_reset_stream_storage+0xc>
 800feba:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800febe:	b163      	cbz	r3, 800feda <uxr_reset_stream_storage+0x3e>
 800fec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fec4:	2500      	movs	r5, #0
 800fec6:	4630      	mov	r0, r6
 800fec8:	f006 fa9c 	bl	8016404 <uxr_reset_input_best_effort_stream>
 800fecc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fed0:	3501      	adds	r5, #1
 800fed2:	42ab      	cmp	r3, r5
 800fed4:	f106 0602 	add.w	r6, r6, #2
 800fed8:	d8f5      	bhi.n	800fec6 <uxr_reset_stream_storage+0x2a>
 800feda:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fede:	b163      	cbz	r3, 800fefa <uxr_reset_stream_storage+0x5e>
 800fee0:	f104 0618 	add.w	r6, r4, #24
 800fee4:	2500      	movs	r5, #0
 800fee6:	4630      	mov	r0, r6
 800fee8:	f006 fd36 	bl	8016958 <uxr_reset_output_reliable_stream>
 800feec:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fef0:	3501      	adds	r5, #1
 800fef2:	42ab      	cmp	r3, r5
 800fef4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800fef8:	d8f5      	bhi.n	800fee6 <uxr_reset_stream_storage+0x4a>
 800fefa:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800fefe:	b163      	cbz	r3, 800ff1a <uxr_reset_stream_storage+0x7e>
 800ff00:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ff04:	2500      	movs	r5, #0
 800ff06:	4630      	mov	r0, r6
 800ff08:	f006 faf0 	bl	80164ec <uxr_reset_input_reliable_stream>
 800ff0c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ff10:	3501      	adds	r5, #1
 800ff12:	42ab      	cmp	r3, r5
 800ff14:	f106 0618 	add.w	r6, r6, #24
 800ff18:	d8f5      	bhi.n	800ff06 <uxr_reset_stream_storage+0x6a>
 800ff1a:	bd70      	pop	{r4, r5, r6, pc}

0800ff1c <uxr_add_output_best_effort_buffer>:
 800ff1c:	b510      	push	{r4, lr}
 800ff1e:	7c04      	ldrb	r4, [r0, #16]
 800ff20:	f104 0c01 	add.w	ip, r4, #1
 800ff24:	b082      	sub	sp, #8
 800ff26:	f880 c010 	strb.w	ip, [r0, #16]
 800ff2a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ff2e:	f006 fc5d 	bl	80167ec <uxr_init_output_best_effort_stream>
 800ff32:	2201      	movs	r2, #1
 800ff34:	4611      	mov	r1, r2
 800ff36:	4620      	mov	r0, r4
 800ff38:	b002      	add	sp, #8
 800ff3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff3e:	f7ff bf4f 	b.w	800fde0 <uxr_stream_id>
 800ff42:	bf00      	nop

0800ff44 <uxr_add_output_reliable_buffer>:
 800ff44:	b510      	push	{r4, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	4684      	mov	ip, r0
 800ff4a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ff4e:	9000      	str	r0, [sp, #0]
 800ff50:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ff54:	2028      	movs	r0, #40	@ 0x28
 800ff56:	fb00 c004 	mla	r0, r0, r4, ip
 800ff5a:	f104 0e01 	add.w	lr, r4, #1
 800ff5e:	3018      	adds	r0, #24
 800ff60:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ff64:	f006 fcc0 	bl	80168e8 <uxr_init_output_reliable_stream>
 800ff68:	2201      	movs	r2, #1
 800ff6a:	2102      	movs	r1, #2
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	b004      	add	sp, #16
 800ff70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff74:	f7ff bf34 	b.w	800fde0 <uxr_stream_id>

0800ff78 <uxr_add_input_best_effort_buffer>:
 800ff78:	b510      	push	{r4, lr}
 800ff7a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ff7e:	4603      	mov	r3, r0
 800ff80:	1c62      	adds	r2, r4, #1
 800ff82:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ff86:	b082      	sub	sp, #8
 800ff88:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ff8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ff90:	f006 fa34 	bl	80163fc <uxr_init_input_best_effort_stream>
 800ff94:	2200      	movs	r2, #0
 800ff96:	2101      	movs	r1, #1
 800ff98:	4620      	mov	r0, r4
 800ff9a:	b002      	add	sp, #8
 800ff9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffa0:	f7ff bf1e 	b.w	800fde0 <uxr_stream_id>

0800ffa4 <uxr_add_input_reliable_buffer>:
 800ffa4:	b510      	push	{r4, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	4684      	mov	ip, r0
 800ffaa:	9806      	ldr	r0, [sp, #24]
 800ffac:	9000      	str	r0, [sp, #0]
 800ffae:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ffb2:	2018      	movs	r0, #24
 800ffb4:	fb00 c004 	mla	r0, r0, r4, ip
 800ffb8:	f104 0e01 	add.w	lr, r4, #1
 800ffbc:	3048      	adds	r0, #72	@ 0x48
 800ffbe:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800ffc2:	f006 fa67 	bl	8016494 <uxr_init_input_reliable_stream>
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	2102      	movs	r1, #2
 800ffca:	4620      	mov	r0, r4
 800ffcc:	b004      	add	sp, #16
 800ffce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffd2:	f7ff bf05 	b.w	800fde0 <uxr_stream_id>
 800ffd6:	bf00      	nop

0800ffd8 <uxr_get_output_best_effort_stream>:
 800ffd8:	7c03      	ldrb	r3, [r0, #16]
 800ffda:	428b      	cmp	r3, r1
 800ffdc:	bf8c      	ite	hi
 800ffde:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ffe2:	2000      	movls	r0, #0
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop

0800ffe8 <uxr_get_output_reliable_stream>:
 800ffe8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ffec:	428b      	cmp	r3, r1
 800ffee:	bf83      	ittte	hi
 800fff0:	2328      	movhi	r3, #40	@ 0x28
 800fff2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fff6:	3018      	addhi	r0, #24
 800fff8:	2000      	movls	r0, #0
 800fffa:	4770      	bx	lr

0800fffc <uxr_get_input_best_effort_stream>:
 800fffc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010000:	428b      	cmp	r3, r1
 8010002:	bf86      	itte	hi
 8010004:	3121      	addhi	r1, #33	@ 0x21
 8010006:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801000a:	2000      	movls	r0, #0
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop

08010010 <uxr_get_input_reliable_stream>:
 8010010:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010014:	428b      	cmp	r3, r1
 8010016:	bf83      	ittte	hi
 8010018:	2318      	movhi	r3, #24
 801001a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801001e:	3048      	addhi	r0, #72	@ 0x48
 8010020:	2000      	movls	r0, #0
 8010022:	4770      	bx	lr

08010024 <uxr_output_streams_confirmed>:
 8010024:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010028:	b183      	cbz	r3, 801004c <uxr_output_streams_confirmed+0x28>
 801002a:	b570      	push	{r4, r5, r6, lr}
 801002c:	4606      	mov	r6, r0
 801002e:	f100 0518 	add.w	r5, r0, #24
 8010032:	2400      	movs	r4, #0
 8010034:	e001      	b.n	801003a <uxr_output_streams_confirmed+0x16>
 8010036:	3528      	adds	r5, #40	@ 0x28
 8010038:	b138      	cbz	r0, 801004a <uxr_output_streams_confirmed+0x26>
 801003a:	4628      	mov	r0, r5
 801003c:	f006 fefc 	bl	8016e38 <uxr_is_output_up_to_date>
 8010040:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010044:	3401      	adds	r4, #1
 8010046:	42a3      	cmp	r3, r4
 8010048:	d8f5      	bhi.n	8010036 <uxr_output_streams_confirmed+0x12>
 801004a:	bd70      	pop	{r4, r5, r6, pc}
 801004c:	2001      	movs	r0, #1
 801004e:	4770      	bx	lr

08010050 <uxr_buffer_submessage_header>:
 8010050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010052:	4604      	mov	r4, r0
 8010054:	460e      	mov	r6, r1
 8010056:	2104      	movs	r1, #4
 8010058:	4615      	mov	r5, r2
 801005a:	461f      	mov	r7, r3
 801005c:	f7fb fd48 	bl	800baf0 <ucdr_align_to>
 8010060:	2301      	movs	r3, #1
 8010062:	ea47 0203 	orr.w	r2, r7, r3
 8010066:	4631      	mov	r1, r6
 8010068:	7523      	strb	r3, [r4, #20]
 801006a:	4620      	mov	r0, r4
 801006c:	462b      	mov	r3, r5
 801006e:	f000 fa27 	bl	80104c0 <uxr_serialize_submessage_header>
 8010072:	4620      	mov	r0, r4
 8010074:	f7fb fd52 	bl	800bb1c <ucdr_buffer_remaining>
 8010078:	42a8      	cmp	r0, r5
 801007a:	bf34      	ite	cc
 801007c:	2000      	movcc	r0, #0
 801007e:	2001      	movcs	r0, #1
 8010080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010082:	bf00      	nop

08010084 <uxr_read_submessage_header>:
 8010084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010088:	4604      	mov	r4, r0
 801008a:	460d      	mov	r5, r1
 801008c:	2104      	movs	r1, #4
 801008e:	4616      	mov	r6, r2
 8010090:	4698      	mov	r8, r3
 8010092:	f7fb fd2d 	bl	800baf0 <ucdr_align_to>
 8010096:	4620      	mov	r0, r4
 8010098:	f7fb fd40 	bl	800bb1c <ucdr_buffer_remaining>
 801009c:	2803      	cmp	r0, #3
 801009e:	bf8c      	ite	hi
 80100a0:	2701      	movhi	r7, #1
 80100a2:	2700      	movls	r7, #0
 80100a4:	d802      	bhi.n	80100ac <uxr_read_submessage_header+0x28>
 80100a6:	4638      	mov	r0, r7
 80100a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ac:	4633      	mov	r3, r6
 80100ae:	4642      	mov	r2, r8
 80100b0:	4620      	mov	r0, r4
 80100b2:	4629      	mov	r1, r5
 80100b4:	f000 fa18 	bl	80104e8 <uxr_deserialize_submessage_header>
 80100b8:	f898 3000 	ldrb.w	r3, [r8]
 80100bc:	f003 0201 	and.w	r2, r3, #1
 80100c0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80100c4:	f888 3000 	strb.w	r3, [r8]
 80100c8:	7522      	strb	r2, [r4, #20]
 80100ca:	4638      	mov	r0, r7
 80100cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080100d0 <uxr_submessage_padding>:
 80100d0:	f010 0003 	ands.w	r0, r0, #3
 80100d4:	bf18      	it	ne
 80100d6:	f1c0 0004 	rsbne	r0, r0, #4
 80100da:	4770      	bx	lr

080100dc <uxr_millis>:
 80100dc:	b510      	push	{r4, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	4669      	mov	r1, sp
 80100e2:	2001      	movs	r0, #1
 80100e4:	f7f2 fa0c 	bl	8002500 <clock_gettime>
 80100e8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80100ec:	4906      	ldr	r1, [pc, #24]	@ (8010108 <uxr_millis+0x2c>)
 80100ee:	fba0 0301 	umull	r0, r3, r0, r1
 80100f2:	1900      	adds	r0, r0, r4
 80100f4:	fb01 3102 	mla	r1, r1, r2, r3
 80100f8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80100fc:	4a03      	ldr	r2, [pc, #12]	@ (801010c <uxr_millis+0x30>)
 80100fe:	2300      	movs	r3, #0
 8010100:	f7f0 fd74 	bl	8000bec <__aeabi_ldivmod>
 8010104:	b004      	add	sp, #16
 8010106:	bd10      	pop	{r4, pc}
 8010108:	3b9aca00 	.word	0x3b9aca00
 801010c:	000f4240 	.word	0x000f4240

08010110 <uxr_nanos>:
 8010110:	b510      	push	{r4, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	4669      	mov	r1, sp
 8010116:	2001      	movs	r0, #1
 8010118:	f7f2 f9f2 	bl	8002500 <clock_gettime>
 801011c:	4a06      	ldr	r2, [pc, #24]	@ (8010138 <uxr_nanos+0x28>)
 801011e:	9800      	ldr	r0, [sp, #0]
 8010120:	9902      	ldr	r1, [sp, #8]
 8010122:	9c01      	ldr	r4, [sp, #4]
 8010124:	fba0 0302 	umull	r0, r3, r0, r2
 8010128:	1840      	adds	r0, r0, r1
 801012a:	fb02 3304 	mla	r3, r2, r4, r3
 801012e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010132:	b004      	add	sp, #16
 8010134:	bd10      	pop	{r4, pc}
 8010136:	bf00      	nop
 8010138:	3b9aca00 	.word	0x3b9aca00

0801013c <on_full_output_buffer_fragmented>:
 801013c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010140:	460c      	mov	r4, r1
 8010142:	b08a      	sub	sp, #40	@ 0x28
 8010144:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010148:	4606      	mov	r6, r0
 801014a:	f104 0008 	add.w	r0, r4, #8
 801014e:	f7ff ff4b 	bl	800ffe8 <uxr_get_output_reliable_stream>
 8010152:	4605      	mov	r5, r0
 8010154:	f006 fe7a 	bl	8016e4c <get_available_free_slots>
 8010158:	b968      	cbnz	r0, 8010176 <on_full_output_buffer_fragmented+0x3a>
 801015a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801015e:	4620      	mov	r0, r4
 8010160:	4798      	blx	r3
 8010162:	b918      	cbnz	r0, 801016c <on_full_output_buffer_fragmented+0x30>
 8010164:	2001      	movs	r0, #1
 8010166:	b00a      	add	sp, #40	@ 0x28
 8010168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801016c:	4628      	mov	r0, r5
 801016e:	f006 fe6d 	bl	8016e4c <get_available_free_slots>
 8010172:	2800      	cmp	r0, #0
 8010174:	d0f6      	beq.n	8010164 <on_full_output_buffer_fragmented+0x28>
 8010176:	8929      	ldrh	r1, [r5, #8]
 8010178:	89eb      	ldrh	r3, [r5, #14]
 801017a:	7b28      	ldrb	r0, [r5, #12]
 801017c:	686a      	ldr	r2, [r5, #4]
 801017e:	fbb2 f8f1 	udiv	r8, r2, r1
 8010182:	fbb3 f2f1 	udiv	r2, r3, r1
 8010186:	fb01 3112 	mls	r1, r1, r2, r3
 801018a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801018e:	b289      	uxth	r1, r1
 8010190:	fb08 f101 	mul.w	r1, r8, r1
 8010194:	30fc      	adds	r0, #252	@ 0xfc
 8010196:	f1a8 0804 	sub.w	r8, r8, #4
 801019a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801019e:	4440      	add	r0, r8
 80101a0:	b287      	uxth	r7, r0
 80101a2:	1bdb      	subs	r3, r3, r7
 80101a4:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80101a8:	682b      	ldr	r3, [r5, #0]
 80101aa:	3104      	adds	r1, #4
 80101ac:	4419      	add	r1, r3
 80101ae:	4642      	mov	r2, r8
 80101b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101b4:	9300      	str	r3, [sp, #0]
 80101b6:	a802      	add	r0, sp, #8
 80101b8:	2300      	movs	r3, #0
 80101ba:	f7fb fc6d 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 80101be:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80101c2:	f102 0308 	add.w	r3, r2, #8
 80101c6:	4543      	cmp	r3, r8
 80101c8:	d928      	bls.n	801021c <on_full_output_buffer_fragmented+0xe0>
 80101ca:	463a      	mov	r2, r7
 80101cc:	2300      	movs	r3, #0
 80101ce:	210d      	movs	r1, #13
 80101d0:	a802      	add	r0, sp, #8
 80101d2:	f7ff ff3d 	bl	8010050 <uxr_buffer_submessage_header>
 80101d6:	8929      	ldrh	r1, [r5, #8]
 80101d8:	89eb      	ldrh	r3, [r5, #14]
 80101da:	fbb3 f2f1 	udiv	r2, r3, r1
 80101de:	fb01 3312 	mls	r3, r1, r2, r3
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	686a      	ldr	r2, [r5, #4]
 80101e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80101ea:	fb02 f303 	mul.w	r3, r2, r3
 80101ee:	682a      	ldr	r2, [r5, #0]
 80101f0:	f842 8003 	str.w	r8, [r2, r3]
 80101f4:	89e8      	ldrh	r0, [r5, #14]
 80101f6:	2101      	movs	r1, #1
 80101f8:	f006 ff78 	bl	80170ec <uxr_seq_num_add>
 80101fc:	9904      	ldr	r1, [sp, #16]
 80101fe:	9a03      	ldr	r2, [sp, #12]
 8010200:	81e8      	strh	r0, [r5, #14]
 8010202:	1a52      	subs	r2, r2, r1
 8010204:	4630      	mov	r0, r6
 8010206:	f7fb fc59 	bl	800babc <ucdr_init_buffer>
 801020a:	4630      	mov	r0, r6
 801020c:	490f      	ldr	r1, [pc, #60]	@ (801024c <on_full_output_buffer_fragmented+0x110>)
 801020e:	4622      	mov	r2, r4
 8010210:	f7fb fc28 	bl	800ba64 <ucdr_set_on_full_buffer_callback>
 8010214:	2000      	movs	r0, #0
 8010216:	b00a      	add	sp, #40	@ 0x28
 8010218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801021c:	b292      	uxth	r2, r2
 801021e:	2302      	movs	r3, #2
 8010220:	210d      	movs	r1, #13
 8010222:	a802      	add	r0, sp, #8
 8010224:	f7ff ff14 	bl	8010050 <uxr_buffer_submessage_header>
 8010228:	8928      	ldrh	r0, [r5, #8]
 801022a:	89eb      	ldrh	r3, [r5, #14]
 801022c:	fbb3 f1f0 	udiv	r1, r3, r0
 8010230:	fb00 3311 	mls	r3, r0, r1, r3
 8010234:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010238:	6869      	ldr	r1, [r5, #4]
 801023a:	fbb1 f1f0 	udiv	r1, r1, r0
 801023e:	b29b      	uxth	r3, r3
 8010240:	fb01 f303 	mul.w	r3, r1, r3
 8010244:	6829      	ldr	r1, [r5, #0]
 8010246:	3208      	adds	r2, #8
 8010248:	50ca      	str	r2, [r1, r3]
 801024a:	e7d3      	b.n	80101f4 <on_full_output_buffer_fragmented+0xb8>
 801024c:	0801013d 	.word	0x0801013d

08010250 <uxr_prepare_output_stream>:
 8010250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010252:	b087      	sub	sp, #28
 8010254:	2707      	movs	r7, #7
 8010256:	9202      	str	r2, [sp, #8]
 8010258:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801025a:	9103      	str	r1, [sp, #12]
 801025c:	2500      	movs	r5, #0
 801025e:	3204      	adds	r2, #4
 8010260:	e9cd 7500 	strd	r7, r5, [sp]
 8010264:	461c      	mov	r4, r3
 8010266:	4606      	mov	r6, r0
 8010268:	f7ff fc54 	bl	800fb14 <uxr_prepare_stream_to_write_submessage>
 801026c:	f080 0201 	eor.w	r2, r0, #1
 8010270:	b2d2      	uxtb	r2, r2
 8010272:	75a2      	strb	r2, [r4, #22]
 8010274:	b112      	cbz	r2, 801027c <uxr_prepare_output_stream+0x2c>
 8010276:	4628      	mov	r0, r5
 8010278:	b007      	add	sp, #28
 801027a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801027c:	aa05      	add	r2, sp, #20
 801027e:	9902      	ldr	r1, [sp, #8]
 8010280:	4630      	mov	r0, r6
 8010282:	f7ff fd7d 	bl	800fd80 <uxr_init_base_object_request>
 8010286:	a905      	add	r1, sp, #20
 8010288:	4605      	mov	r5, r0
 801028a:	4620      	mov	r0, r4
 801028c:	f001 f88c 	bl	80113a8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010290:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010294:	69a6      	ldr	r6, [r4, #24]
 8010296:	69e7      	ldr	r7, [r4, #28]
 8010298:	1a52      	subs	r2, r2, r1
 801029a:	4620      	mov	r0, r4
 801029c:	f7fb fc0e 	bl	800babc <ucdr_init_buffer>
 80102a0:	4620      	mov	r0, r4
 80102a2:	463a      	mov	r2, r7
 80102a4:	4631      	mov	r1, r6
 80102a6:	f7fb fbdd 	bl	800ba64 <ucdr_set_on_full_buffer_callback>
 80102aa:	4628      	mov	r0, r5
 80102ac:	b007      	add	sp, #28
 80102ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102b0 <uxr_prepare_output_stream_fragmented>:
 80102b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b4:	b091      	sub	sp, #68	@ 0x44
 80102b6:	4605      	mov	r5, r0
 80102b8:	9105      	str	r1, [sp, #20]
 80102ba:	3008      	adds	r0, #8
 80102bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80102c0:	461e      	mov	r6, r3
 80102c2:	9204      	str	r2, [sp, #16]
 80102c4:	f7ff fe90 	bl	800ffe8 <uxr_get_output_reliable_stream>
 80102c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	f000 8091 	beq.w	80103f4 <uxr_prepare_output_stream_fragmented+0x144>
 80102d2:	4604      	mov	r4, r0
 80102d4:	2800      	cmp	r0, #0
 80102d6:	f000 808d 	beq.w	80103f4 <uxr_prepare_output_stream_fragmented+0x144>
 80102da:	f006 fdb7 	bl	8016e4c <get_available_free_slots>
 80102de:	2800      	cmp	r0, #0
 80102e0:	f000 8083 	beq.w	80103ea <uxr_prepare_output_stream_fragmented+0x13a>
 80102e4:	8922      	ldrh	r2, [r4, #8]
 80102e6:	89e7      	ldrh	r7, [r4, #14]
 80102e8:	fbb7 f9f2 	udiv	r9, r7, r2
 80102ec:	fb02 7919 	mls	r9, r2, r9, r7
 80102f0:	fa1f f989 	uxth.w	r9, r9
 80102f4:	6863      	ldr	r3, [r4, #4]
 80102f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80102fa:	6823      	ldr	r3, [r4, #0]
 80102fc:	9203      	str	r2, [sp, #12]
 80102fe:	fb02 f909 	mul.w	r9, r2, r9
 8010302:	f109 0904 	add.w	r9, r9, #4
 8010306:	4499      	add	r9, r3
 8010308:	7b23      	ldrb	r3, [r4, #12]
 801030a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801030e:	4543      	cmp	r3, r8
 8010310:	f1a2 0b04 	sub.w	fp, r2, #4
 8010314:	d37a      	bcc.n	801040c <uxr_prepare_output_stream_fragmented+0x15c>
 8010316:	f1ab 0a04 	sub.w	sl, fp, #4
 801031a:	ebaa 0a03 	sub.w	sl, sl, r3
 801031e:	465a      	mov	r2, fp
 8010320:	2300      	movs	r3, #0
 8010322:	4649      	mov	r1, r9
 8010324:	a808      	add	r0, sp, #32
 8010326:	f8cd 8000 	str.w	r8, [sp]
 801032a:	f7fb fbb5 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 801032e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010330:	fa1f fa8a 	uxth.w	sl, sl
 8010334:	4652      	mov	r2, sl
 8010336:	f103 0a08 	add.w	sl, r3, #8
 801033a:	45da      	cmp	sl, fp
 801033c:	bf34      	ite	cc
 801033e:	2302      	movcc	r3, #2
 8010340:	2300      	movcs	r3, #0
 8010342:	210d      	movs	r1, #13
 8010344:	a808      	add	r0, sp, #32
 8010346:	f7ff fe83 	bl	8010050 <uxr_buffer_submessage_header>
 801034a:	8921      	ldrh	r1, [r4, #8]
 801034c:	fbb7 f2f1 	udiv	r2, r7, r1
 8010350:	fb01 7212 	mls	r2, r1, r2, r7
 8010354:	b292      	uxth	r2, r2
 8010356:	6863      	ldr	r3, [r4, #4]
 8010358:	fbb3 f3f1 	udiv	r3, r3, r1
 801035c:	fb02 f303 	mul.w	r3, r2, r3
 8010360:	6822      	ldr	r2, [r4, #0]
 8010362:	4638      	mov	r0, r7
 8010364:	f842 b003 	str.w	fp, [r2, r3]
 8010368:	2101      	movs	r1, #1
 801036a:	f006 febf 	bl	80170ec <uxr_seq_num_add>
 801036e:	9b03      	ldr	r3, [sp, #12]
 8010370:	f108 0104 	add.w	r1, r8, #4
 8010374:	f1a3 0208 	sub.w	r2, r3, #8
 8010378:	eba2 0208 	sub.w	r2, r2, r8
 801037c:	4449      	add	r1, r9
 801037e:	4607      	mov	r7, r0
 8010380:	4630      	mov	r0, r6
 8010382:	f7fb fb9b 	bl	800babc <ucdr_init_buffer>
 8010386:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010388:	81e7      	strh	r7, [r4, #14]
 801038a:	1d1a      	adds	r2, r3, #4
 801038c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010390:	bf28      	it	cs
 8010392:	2200      	movcs	r2, #0
 8010394:	2300      	movs	r3, #0
 8010396:	b292      	uxth	r2, r2
 8010398:	2107      	movs	r1, #7
 801039a:	4630      	mov	r0, r6
 801039c:	f7ff fe58 	bl	8010050 <uxr_buffer_submessage_header>
 80103a0:	9904      	ldr	r1, [sp, #16]
 80103a2:	aa07      	add	r2, sp, #28
 80103a4:	4628      	mov	r0, r5
 80103a6:	f7ff fceb 	bl	800fd80 <uxr_init_base_object_request>
 80103aa:	4604      	mov	r4, r0
 80103ac:	b318      	cbz	r0, 80103f6 <uxr_prepare_output_stream_fragmented+0x146>
 80103ae:	a907      	add	r1, sp, #28
 80103b0:	4630      	mov	r0, r6
 80103b2:	f000 fff9 	bl	80113a8 <uxr_serialize_WRITE_DATA_Payload_Data>
 80103b6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80103ba:	4630      	mov	r0, r6
 80103bc:	1a52      	subs	r2, r2, r1
 80103be:	f7fb fb7d 	bl	800babc <ucdr_init_buffer>
 80103c2:	9b05      	ldr	r3, [sp, #20]
 80103c4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80103c8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80103ca:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80103ce:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80103d0:	491b      	ldr	r1, [pc, #108]	@ (8010440 <uxr_prepare_output_stream_fragmented+0x190>)
 80103d2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80103d6:	4630      	mov	r0, r6
 80103d8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80103dc:	462a      	mov	r2, r5
 80103de:	f7fb fb41 	bl	800ba64 <ucdr_set_on_full_buffer_callback>
 80103e2:	4620      	mov	r0, r4
 80103e4:	b011      	add	sp, #68	@ 0x44
 80103e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ea:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80103ec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80103ee:	4628      	mov	r0, r5
 80103f0:	4798      	blx	r3
 80103f2:	b920      	cbnz	r0, 80103fe <uxr_prepare_output_stream_fragmented+0x14e>
 80103f4:	2400      	movs	r4, #0
 80103f6:	4620      	mov	r0, r4
 80103f8:	b011      	add	sp, #68	@ 0x44
 80103fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103fe:	4620      	mov	r0, r4
 8010400:	f006 fd24 	bl	8016e4c <get_available_free_slots>
 8010404:	2800      	cmp	r0, #0
 8010406:	f47f af6d 	bne.w	80102e4 <uxr_prepare_output_stream_fragmented+0x34>
 801040a:	e7f3      	b.n	80103f4 <uxr_prepare_output_stream_fragmented+0x144>
 801040c:	4638      	mov	r0, r7
 801040e:	2101      	movs	r1, #1
 8010410:	f006 fe6c 	bl	80170ec <uxr_seq_num_add>
 8010414:	8921      	ldrh	r1, [r4, #8]
 8010416:	fbb0 f2f1 	udiv	r2, r0, r1
 801041a:	fb01 0912 	mls	r9, r1, r2, r0
 801041e:	fa1f f289 	uxth.w	r2, r9
 8010422:	6863      	ldr	r3, [r4, #4]
 8010424:	fbb3 f9f1 	udiv	r9, r3, r1
 8010428:	6823      	ldr	r3, [r4, #0]
 801042a:	fb02 f909 	mul.w	r9, r2, r9
 801042e:	f109 0904 	add.w	r9, r9, #4
 8010432:	4499      	add	r9, r3
 8010434:	4607      	mov	r7, r0
 8010436:	7b23      	ldrb	r3, [r4, #12]
 8010438:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801043c:	e76b      	b.n	8010316 <uxr_prepare_output_stream_fragmented+0x66>
 801043e:	bf00      	nop
 8010440:	0801013d 	.word	0x0801013d

08010444 <uxr_serialize_message_header>:
 8010444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010446:	b083      	sub	sp, #12
 8010448:	4616      	mov	r6, r2
 801044a:	4604      	mov	r4, r0
 801044c:	9301      	str	r3, [sp, #4]
 801044e:	460d      	mov	r5, r1
 8010450:	9f08      	ldr	r7, [sp, #32]
 8010452:	f7fa f851 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8010456:	4631      	mov	r1, r6
 8010458:	4620      	mov	r0, r4
 801045a:	f7fa f84d 	bl	800a4f8 <ucdr_serialize_uint8_t>
 801045e:	9a01      	ldr	r2, [sp, #4]
 8010460:	2101      	movs	r1, #1
 8010462:	4620      	mov	r0, r4
 8010464:	f7fa f8f4 	bl	800a650 <ucdr_serialize_endian_uint16_t>
 8010468:	062b      	lsls	r3, r5, #24
 801046a:	d501      	bpl.n	8010470 <uxr_serialize_message_header+0x2c>
 801046c:	b003      	add	sp, #12
 801046e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010470:	2204      	movs	r2, #4
 8010472:	4639      	mov	r1, r7
 8010474:	4620      	mov	r0, r4
 8010476:	b003      	add	sp, #12
 8010478:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801047c:	f7fe b822 	b.w	800e4c4 <ucdr_serialize_array_uint8_t>

08010480 <uxr_deserialize_message_header>:
 8010480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010482:	b083      	sub	sp, #12
 8010484:	4616      	mov	r6, r2
 8010486:	4604      	mov	r4, r0
 8010488:	9301      	str	r3, [sp, #4]
 801048a:	460d      	mov	r5, r1
 801048c:	9f08      	ldr	r7, [sp, #32]
 801048e:	f7fa f849 	bl	800a524 <ucdr_deserialize_uint8_t>
 8010492:	4631      	mov	r1, r6
 8010494:	4620      	mov	r0, r4
 8010496:	f7fa f845 	bl	800a524 <ucdr_deserialize_uint8_t>
 801049a:	9a01      	ldr	r2, [sp, #4]
 801049c:	2101      	movs	r1, #1
 801049e:	4620      	mov	r0, r4
 80104a0:	f7fa f9ca 	bl	800a838 <ucdr_deserialize_endian_uint16_t>
 80104a4:	f995 3000 	ldrsb.w	r3, [r5]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	da01      	bge.n	80104b0 <uxr_deserialize_message_header+0x30>
 80104ac:	b003      	add	sp, #12
 80104ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104b0:	2204      	movs	r2, #4
 80104b2:	4639      	mov	r1, r7
 80104b4:	4620      	mov	r0, r4
 80104b6:	b003      	add	sp, #12
 80104b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80104bc:	f7fe b866 	b.w	800e58c <ucdr_deserialize_array_uint8_t>

080104c0 <uxr_serialize_submessage_header>:
 80104c0:	b530      	push	{r4, r5, lr}
 80104c2:	b083      	sub	sp, #12
 80104c4:	4615      	mov	r5, r2
 80104c6:	4604      	mov	r4, r0
 80104c8:	9301      	str	r3, [sp, #4]
 80104ca:	f7fa f815 	bl	800a4f8 <ucdr_serialize_uint8_t>
 80104ce:	4629      	mov	r1, r5
 80104d0:	4620      	mov	r0, r4
 80104d2:	f7fa f811 	bl	800a4f8 <ucdr_serialize_uint8_t>
 80104d6:	9a01      	ldr	r2, [sp, #4]
 80104d8:	2101      	movs	r1, #1
 80104da:	4620      	mov	r0, r4
 80104dc:	b003      	add	sp, #12
 80104de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104e2:	f7fa b8b5 	b.w	800a650 <ucdr_serialize_endian_uint16_t>
 80104e6:	bf00      	nop

080104e8 <uxr_deserialize_submessage_header>:
 80104e8:	b530      	push	{r4, r5, lr}
 80104ea:	b083      	sub	sp, #12
 80104ec:	4615      	mov	r5, r2
 80104ee:	4604      	mov	r4, r0
 80104f0:	9301      	str	r3, [sp, #4]
 80104f2:	f7fa f817 	bl	800a524 <ucdr_deserialize_uint8_t>
 80104f6:	4629      	mov	r1, r5
 80104f8:	4620      	mov	r0, r4
 80104fa:	f7fa f813 	bl	800a524 <ucdr_deserialize_uint8_t>
 80104fe:	9a01      	ldr	r2, [sp, #4]
 8010500:	2101      	movs	r1, #1
 8010502:	4620      	mov	r0, r4
 8010504:	b003      	add	sp, #12
 8010506:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801050a:	f7fa b995 	b.w	800a838 <ucdr_deserialize_endian_uint16_t>
 801050e:	bf00      	nop

08010510 <uxr_serialize_CLIENT_Representation>:
 8010510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010514:	2204      	movs	r2, #4
 8010516:	460e      	mov	r6, r1
 8010518:	4605      	mov	r5, r0
 801051a:	f7fd ffd3 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 801051e:	2202      	movs	r2, #2
 8010520:	4607      	mov	r7, r0
 8010522:	1d31      	adds	r1, r6, #4
 8010524:	4628      	mov	r0, r5
 8010526:	f7fd ffcd 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 801052a:	4038      	ands	r0, r7
 801052c:	2202      	movs	r2, #2
 801052e:	1db1      	adds	r1, r6, #6
 8010530:	b2c7      	uxtb	r7, r0
 8010532:	4628      	mov	r0, r5
 8010534:	f7fd ffc6 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8010538:	2204      	movs	r2, #4
 801053a:	4007      	ands	r7, r0
 801053c:	f106 0108 	add.w	r1, r6, #8
 8010540:	4628      	mov	r0, r5
 8010542:	f7fd ffbf 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8010546:	7b31      	ldrb	r1, [r6, #12]
 8010548:	4007      	ands	r7, r0
 801054a:	4628      	mov	r0, r5
 801054c:	f7f9 ffd4 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8010550:	7b71      	ldrb	r1, [r6, #13]
 8010552:	4007      	ands	r7, r0
 8010554:	4628      	mov	r0, r5
 8010556:	f7f9 ffa1 	bl	800a49c <ucdr_serialize_bool>
 801055a:	7b73      	ldrb	r3, [r6, #13]
 801055c:	ea07 0800 	and.w	r8, r7, r0
 8010560:	b93b      	cbnz	r3, 8010572 <uxr_serialize_CLIENT_Representation+0x62>
 8010562:	8bb1      	ldrh	r1, [r6, #28]
 8010564:	4628      	mov	r0, r5
 8010566:	f7f9 fff3 	bl	800a550 <ucdr_serialize_uint16_t>
 801056a:	ea08 0000 	and.w	r0, r8, r0
 801056e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010572:	6931      	ldr	r1, [r6, #16]
 8010574:	4628      	mov	r0, r5
 8010576:	f7fa f9d5 	bl	800a924 <ucdr_serialize_uint32_t>
 801057a:	6933      	ldr	r3, [r6, #16]
 801057c:	b1e3      	cbz	r3, 80105b8 <uxr_serialize_CLIENT_Representation+0xa8>
 801057e:	b1c0      	cbz	r0, 80105b2 <uxr_serialize_CLIENT_Representation+0xa2>
 8010580:	4637      	mov	r7, r6
 8010582:	f04f 0900 	mov.w	r9, #0
 8010586:	e001      	b.n	801058c <uxr_serialize_CLIENT_Representation+0x7c>
 8010588:	3708      	adds	r7, #8
 801058a:	b194      	cbz	r4, 80105b2 <uxr_serialize_CLIENT_Representation+0xa2>
 801058c:	6979      	ldr	r1, [r7, #20]
 801058e:	4628      	mov	r0, r5
 8010590:	f005 fe5a 	bl	8016248 <ucdr_serialize_string>
 8010594:	69b9      	ldr	r1, [r7, #24]
 8010596:	4604      	mov	r4, r0
 8010598:	4628      	mov	r0, r5
 801059a:	f005 fe55 	bl	8016248 <ucdr_serialize_string>
 801059e:	6933      	ldr	r3, [r6, #16]
 80105a0:	f109 0901 	add.w	r9, r9, #1
 80105a4:	4004      	ands	r4, r0
 80105a6:	4599      	cmp	r9, r3
 80105a8:	b2e4      	uxtb	r4, r4
 80105aa:	d3ed      	bcc.n	8010588 <uxr_serialize_CLIENT_Representation+0x78>
 80105ac:	ea08 0804 	and.w	r8, r8, r4
 80105b0:	e7d7      	b.n	8010562 <uxr_serialize_CLIENT_Representation+0x52>
 80105b2:	f04f 0800 	mov.w	r8, #0
 80105b6:	e7d4      	b.n	8010562 <uxr_serialize_CLIENT_Representation+0x52>
 80105b8:	ea08 0800 	and.w	r8, r8, r0
 80105bc:	e7d1      	b.n	8010562 <uxr_serialize_CLIENT_Representation+0x52>
 80105be:	bf00      	nop

080105c0 <uxr_deserialize_CLIENT_Representation>:
 80105c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105c4:	2204      	movs	r2, #4
 80105c6:	460c      	mov	r4, r1
 80105c8:	4605      	mov	r5, r0
 80105ca:	f7fd ffdf 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 80105ce:	2202      	movs	r2, #2
 80105d0:	4607      	mov	r7, r0
 80105d2:	1d21      	adds	r1, r4, #4
 80105d4:	4628      	mov	r0, r5
 80105d6:	f7fd ffd9 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 80105da:	4038      	ands	r0, r7
 80105dc:	2202      	movs	r2, #2
 80105de:	1da1      	adds	r1, r4, #6
 80105e0:	b2c6      	uxtb	r6, r0
 80105e2:	4628      	mov	r0, r5
 80105e4:	f7fd ffd2 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 80105e8:	2204      	movs	r2, #4
 80105ea:	4006      	ands	r6, r0
 80105ec:	f104 0108 	add.w	r1, r4, #8
 80105f0:	4628      	mov	r0, r5
 80105f2:	f7fd ffcb 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 80105f6:	f104 010c 	add.w	r1, r4, #12
 80105fa:	4006      	ands	r6, r0
 80105fc:	4628      	mov	r0, r5
 80105fe:	f7f9 ff91 	bl	800a524 <ucdr_deserialize_uint8_t>
 8010602:	f104 010d 	add.w	r1, r4, #13
 8010606:	ea06 0700 	and.w	r7, r6, r0
 801060a:	4628      	mov	r0, r5
 801060c:	f7f9 ff5c 	bl	800a4c8 <ucdr_deserialize_bool>
 8010610:	7b63      	ldrb	r3, [r4, #13]
 8010612:	4007      	ands	r7, r0
 8010614:	b93b      	cbnz	r3, 8010626 <uxr_deserialize_CLIENT_Representation+0x66>
 8010616:	f104 011c 	add.w	r1, r4, #28
 801061a:	4628      	mov	r0, r5
 801061c:	f7fa f898 	bl	800a750 <ucdr_deserialize_uint16_t>
 8010620:	4038      	ands	r0, r7
 8010622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010626:	f104 0110 	add.w	r1, r4, #16
 801062a:	4628      	mov	r0, r5
 801062c:	f7fa faaa 	bl	800ab84 <ucdr_deserialize_uint32_t>
 8010630:	6923      	ldr	r3, [r4, #16]
 8010632:	2b01      	cmp	r3, #1
 8010634:	d903      	bls.n	801063e <uxr_deserialize_CLIENT_Representation+0x7e>
 8010636:	2301      	movs	r3, #1
 8010638:	75ab      	strb	r3, [r5, #22]
 801063a:	2700      	movs	r7, #0
 801063c:	e7eb      	b.n	8010616 <uxr_deserialize_CLIENT_Representation+0x56>
 801063e:	b30b      	cbz	r3, 8010684 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010640:	2800      	cmp	r0, #0
 8010642:	d0fa      	beq.n	801063a <uxr_deserialize_CLIENT_Representation+0x7a>
 8010644:	46a0      	mov	r8, r4
 8010646:	f04f 0900 	mov.w	r9, #0
 801064a:	e001      	b.n	8010650 <uxr_deserialize_CLIENT_Representation+0x90>
 801064c:	2e00      	cmp	r6, #0
 801064e:	d0f4      	beq.n	801063a <uxr_deserialize_CLIENT_Representation+0x7a>
 8010650:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010658:	4628      	mov	r0, r5
 801065a:	f005 fe05 	bl	8016268 <ucdr_deserialize_string>
 801065e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010662:	4606      	mov	r6, r0
 8010664:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010668:	4628      	mov	r0, r5
 801066a:	f005 fdfd 	bl	8016268 <ucdr_deserialize_string>
 801066e:	6923      	ldr	r3, [r4, #16]
 8010670:	f109 0901 	add.w	r9, r9, #1
 8010674:	4006      	ands	r6, r0
 8010676:	4599      	cmp	r9, r3
 8010678:	f108 0808 	add.w	r8, r8, #8
 801067c:	b2f6      	uxtb	r6, r6
 801067e:	d3e5      	bcc.n	801064c <uxr_deserialize_CLIENT_Representation+0x8c>
 8010680:	4037      	ands	r7, r6
 8010682:	e7c8      	b.n	8010616 <uxr_deserialize_CLIENT_Representation+0x56>
 8010684:	4007      	ands	r7, r0
 8010686:	e7c6      	b.n	8010616 <uxr_deserialize_CLIENT_Representation+0x56>

08010688 <uxr_serialize_AGENT_Representation>:
 8010688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801068c:	2204      	movs	r2, #4
 801068e:	460f      	mov	r7, r1
 8010690:	4605      	mov	r5, r0
 8010692:	f7fd ff17 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8010696:	2202      	movs	r2, #2
 8010698:	4604      	mov	r4, r0
 801069a:	1d39      	adds	r1, r7, #4
 801069c:	4628      	mov	r0, r5
 801069e:	f7fd ff11 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80106a2:	4020      	ands	r0, r4
 80106a4:	2202      	movs	r2, #2
 80106a6:	1db9      	adds	r1, r7, #6
 80106a8:	b2c4      	uxtb	r4, r0
 80106aa:	4628      	mov	r0, r5
 80106ac:	f7fd ff0a 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80106b0:	7a39      	ldrb	r1, [r7, #8]
 80106b2:	4004      	ands	r4, r0
 80106b4:	4628      	mov	r0, r5
 80106b6:	f7f9 fef1 	bl	800a49c <ucdr_serialize_bool>
 80106ba:	7a3b      	ldrb	r3, [r7, #8]
 80106bc:	ea00 0804 	and.w	r8, r0, r4
 80106c0:	b913      	cbnz	r3, 80106c8 <uxr_serialize_AGENT_Representation+0x40>
 80106c2:	4640      	mov	r0, r8
 80106c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106c8:	68f9      	ldr	r1, [r7, #12]
 80106ca:	4628      	mov	r0, r5
 80106cc:	f7fa f92a 	bl	800a924 <ucdr_serialize_uint32_t>
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	b303      	cbz	r3, 8010716 <uxr_serialize_AGENT_Representation+0x8e>
 80106d4:	b1d0      	cbz	r0, 801070c <uxr_serialize_AGENT_Representation+0x84>
 80106d6:	463e      	mov	r6, r7
 80106d8:	f04f 0900 	mov.w	r9, #0
 80106dc:	e001      	b.n	80106e2 <uxr_serialize_AGENT_Representation+0x5a>
 80106de:	3608      	adds	r6, #8
 80106e0:	b1a4      	cbz	r4, 801070c <uxr_serialize_AGENT_Representation+0x84>
 80106e2:	6931      	ldr	r1, [r6, #16]
 80106e4:	4628      	mov	r0, r5
 80106e6:	f005 fdaf 	bl	8016248 <ucdr_serialize_string>
 80106ea:	6971      	ldr	r1, [r6, #20]
 80106ec:	4604      	mov	r4, r0
 80106ee:	4628      	mov	r0, r5
 80106f0:	f005 fdaa 	bl	8016248 <ucdr_serialize_string>
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f109 0901 	add.w	r9, r9, #1
 80106fa:	4004      	ands	r4, r0
 80106fc:	4599      	cmp	r9, r3
 80106fe:	b2e4      	uxtb	r4, r4
 8010700:	d3ed      	bcc.n	80106de <uxr_serialize_AGENT_Representation+0x56>
 8010702:	ea08 0804 	and.w	r8, r8, r4
 8010706:	4640      	mov	r0, r8
 8010708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801070c:	f04f 0800 	mov.w	r8, #0
 8010710:	4640      	mov	r0, r8
 8010712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010716:	ea08 0800 	and.w	r8, r8, r0
 801071a:	e7d2      	b.n	80106c2 <uxr_serialize_AGENT_Representation+0x3a>

0801071c <uxr_serialize_DATAWRITER_Representation>:
 801071c:	b570      	push	{r4, r5, r6, lr}
 801071e:	460d      	mov	r5, r1
 8010720:	7809      	ldrb	r1, [r1, #0]
 8010722:	4606      	mov	r6, r0
 8010724:	f7f9 fee8 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8010728:	4604      	mov	r4, r0
 801072a:	b130      	cbz	r0, 801073a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801072c:	782b      	ldrb	r3, [r5, #0]
 801072e:	2b02      	cmp	r3, #2
 8010730:	d00c      	beq.n	801074c <uxr_serialize_DATAWRITER_Representation+0x30>
 8010732:	2b03      	cmp	r3, #3
 8010734:	d010      	beq.n	8010758 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010736:	2b01      	cmp	r3, #1
 8010738:	d008      	beq.n	801074c <uxr_serialize_DATAWRITER_Representation+0x30>
 801073a:	2202      	movs	r2, #2
 801073c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010740:	4630      	mov	r0, r6
 8010742:	f7fd febf 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8010746:	4020      	ands	r0, r4
 8010748:	b2c0      	uxtb	r0, r0
 801074a:	bd70      	pop	{r4, r5, r6, pc}
 801074c:	6869      	ldr	r1, [r5, #4]
 801074e:	4630      	mov	r0, r6
 8010750:	f005 fd7a 	bl	8016248 <ucdr_serialize_string>
 8010754:	4604      	mov	r4, r0
 8010756:	e7f0      	b.n	801073a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010758:	4629      	mov	r1, r5
 801075a:	4630      	mov	r0, r6
 801075c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010760:	3104      	adds	r1, #4
 8010762:	f7fe f84d 	bl	800e800 <ucdr_serialize_sequence_uint8_t>
 8010766:	4604      	mov	r4, r0
 8010768:	e7e7      	b.n	801073a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801076a:	bf00      	nop

0801076c <uxr_serialize_ObjectVariant.part.0>:
 801076c:	b570      	push	{r4, r5, r6, lr}
 801076e:	780b      	ldrb	r3, [r1, #0]
 8010770:	3b01      	subs	r3, #1
 8010772:	460c      	mov	r4, r1
 8010774:	4605      	mov	r5, r0
 8010776:	2b0d      	cmp	r3, #13
 8010778:	d854      	bhi.n	8010824 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801077a:	e8df f003 	tbb	[pc, r3]
 801077e:	0730      	.short	0x0730
 8010780:	07071b1b 	.word	0x07071b1b
 8010784:	0c530707 	.word	0x0c530707
 8010788:	494e0c0c 	.word	0x494e0c0c
 801078c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010790:	3104      	adds	r1, #4
 8010792:	f7ff bfc3 	b.w	801071c <uxr_serialize_DATAWRITER_Representation>
 8010796:	7909      	ldrb	r1, [r1, #4]
 8010798:	f7f9 feae 	bl	800a4f8 <ucdr_serialize_uint8_t>
 801079c:	b1e8      	cbz	r0, 80107da <uxr_serialize_ObjectVariant.part.0+0x6e>
 801079e:	7923      	ldrb	r3, [r4, #4]
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d001      	beq.n	80107a8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80107a4:	2b02      	cmp	r3, #2
 80107a6:	d13d      	bne.n	8010824 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80107a8:	68a1      	ldr	r1, [r4, #8]
 80107aa:	4628      	mov	r0, r5
 80107ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107b0:	f005 bd4a 	b.w	8016248 <ucdr_serialize_string>
 80107b4:	7909      	ldrb	r1, [r1, #4]
 80107b6:	f7f9 fe9f 	bl	800a4f8 <ucdr_serialize_uint8_t>
 80107ba:	4606      	mov	r6, r0
 80107bc:	b120      	cbz	r0, 80107c8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80107be:	7923      	ldrb	r3, [r4, #4]
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	d039      	beq.n	8010838 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80107c4:	2b03      	cmp	r3, #3
 80107c6:	d02f      	beq.n	8010828 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80107c8:	2202      	movs	r2, #2
 80107ca:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80107ce:	4628      	mov	r0, r5
 80107d0:	f7fd fe78 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80107d4:	4030      	ands	r0, r6
 80107d6:	b2c0      	uxtb	r0, r0
 80107d8:	bd70      	pop	{r4, r5, r6, pc}
 80107da:	2000      	movs	r0, #0
 80107dc:	bd70      	pop	{r4, r5, r6, pc}
 80107de:	7909      	ldrb	r1, [r1, #4]
 80107e0:	f7f9 fe8a 	bl	800a4f8 <ucdr_serialize_uint8_t>
 80107e4:	4606      	mov	r6, r0
 80107e6:	b158      	cbz	r0, 8010800 <uxr_serialize_ObjectVariant.part.0+0x94>
 80107e8:	7923      	ldrb	r3, [r4, #4]
 80107ea:	2b02      	cmp	r3, #2
 80107ec:	d003      	beq.n	80107f6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80107ee:	2b03      	cmp	r3, #3
 80107f0:	d028      	beq.n	8010844 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d104      	bne.n	8010800 <uxr_serialize_ObjectVariant.part.0+0x94>
 80107f6:	68a1      	ldr	r1, [r4, #8]
 80107f8:	4628      	mov	r0, r5
 80107fa:	f005 fd25 	bl	8016248 <ucdr_serialize_string>
 80107fe:	4606      	mov	r6, r0
 8010800:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010804:	4628      	mov	r0, r5
 8010806:	f7fa fbb3 	bl	800af70 <ucdr_serialize_int16_t>
 801080a:	4030      	ands	r0, r6
 801080c:	b2c0      	uxtb	r0, r0
 801080e:	bd70      	pop	{r4, r5, r6, pc}
 8010810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010814:	3104      	adds	r1, #4
 8010816:	f7ff be7b 	b.w	8010510 <uxr_serialize_CLIENT_Representation>
 801081a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801081e:	3104      	adds	r1, #4
 8010820:	f7ff bf32 	b.w	8010688 <uxr_serialize_AGENT_Representation>
 8010824:	2001      	movs	r0, #1
 8010826:	bd70      	pop	{r4, r5, r6, pc}
 8010828:	68a2      	ldr	r2, [r4, #8]
 801082a:	f104 010c 	add.w	r1, r4, #12
 801082e:	4628      	mov	r0, r5
 8010830:	f7fd ffe6 	bl	800e800 <ucdr_serialize_sequence_uint8_t>
 8010834:	4606      	mov	r6, r0
 8010836:	e7c7      	b.n	80107c8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010838:	68a1      	ldr	r1, [r4, #8]
 801083a:	4628      	mov	r0, r5
 801083c:	f005 fd04 	bl	8016248 <ucdr_serialize_string>
 8010840:	4606      	mov	r6, r0
 8010842:	e7c1      	b.n	80107c8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010844:	68a2      	ldr	r2, [r4, #8]
 8010846:	f104 010c 	add.w	r1, r4, #12
 801084a:	4628      	mov	r0, r5
 801084c:	f7fd ffd8 	bl	800e800 <ucdr_serialize_sequence_uint8_t>
 8010850:	4606      	mov	r6, r0
 8010852:	e7d5      	b.n	8010800 <uxr_serialize_ObjectVariant.part.0+0x94>

08010854 <uxr_deserialize_DATAWRITER_Representation>:
 8010854:	b570      	push	{r4, r5, r6, lr}
 8010856:	4606      	mov	r6, r0
 8010858:	460d      	mov	r5, r1
 801085a:	f7f9 fe63 	bl	800a524 <ucdr_deserialize_uint8_t>
 801085e:	4604      	mov	r4, r0
 8010860:	b130      	cbz	r0, 8010870 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010862:	782b      	ldrb	r3, [r5, #0]
 8010864:	2b02      	cmp	r3, #2
 8010866:	d00c      	beq.n	8010882 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010868:	2b03      	cmp	r3, #3
 801086a:	d012      	beq.n	8010892 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801086c:	2b01      	cmp	r3, #1
 801086e:	d008      	beq.n	8010882 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010870:	2202      	movs	r2, #2
 8010872:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010876:	4630      	mov	r0, r6
 8010878:	f7fd fe88 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 801087c:	4020      	ands	r0, r4
 801087e:	b2c0      	uxtb	r0, r0
 8010880:	bd70      	pop	{r4, r5, r6, pc}
 8010882:	6869      	ldr	r1, [r5, #4]
 8010884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010888:	4630      	mov	r0, r6
 801088a:	f005 fced 	bl	8016268 <ucdr_deserialize_string>
 801088e:	4604      	mov	r4, r0
 8010890:	e7ee      	b.n	8010870 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010892:	1d2b      	adds	r3, r5, #4
 8010894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010898:	f105 0108 	add.w	r1, r5, #8
 801089c:	4630      	mov	r0, r6
 801089e:	f7fd ffc1 	bl	800e824 <ucdr_deserialize_sequence_uint8_t>
 80108a2:	4604      	mov	r4, r0
 80108a4:	e7e4      	b.n	8010870 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80108a6:	bf00      	nop

080108a8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80108a8:	b570      	push	{r4, r5, r6, lr}
 80108aa:	460d      	mov	r5, r1
 80108ac:	7809      	ldrb	r1, [r1, #0]
 80108ae:	4606      	mov	r6, r0
 80108b0:	f7f9 fdf4 	bl	800a49c <ucdr_serialize_bool>
 80108b4:	782b      	ldrb	r3, [r5, #0]
 80108b6:	4604      	mov	r4, r0
 80108b8:	b94b      	cbnz	r3, 80108ce <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80108ba:	7a29      	ldrb	r1, [r5, #8]
 80108bc:	4630      	mov	r0, r6
 80108be:	f7f9 fded 	bl	800a49c <ucdr_serialize_bool>
 80108c2:	7a2b      	ldrb	r3, [r5, #8]
 80108c4:	4004      	ands	r4, r0
 80108c6:	b2e4      	uxtb	r4, r4
 80108c8:	b943      	cbnz	r3, 80108dc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80108ca:	4620      	mov	r0, r4
 80108cc:	bd70      	pop	{r4, r5, r6, pc}
 80108ce:	6869      	ldr	r1, [r5, #4]
 80108d0:	4630      	mov	r0, r6
 80108d2:	f005 fcb9 	bl	8016248 <ucdr_serialize_string>
 80108d6:	4004      	ands	r4, r0
 80108d8:	b2e4      	uxtb	r4, r4
 80108da:	e7ee      	b.n	80108ba <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80108dc:	68e9      	ldr	r1, [r5, #12]
 80108de:	4630      	mov	r0, r6
 80108e0:	f005 fcb2 	bl	8016248 <ucdr_serialize_string>
 80108e4:	4004      	ands	r4, r0
 80108e6:	4620      	mov	r0, r4
 80108e8:	bd70      	pop	{r4, r5, r6, pc}
 80108ea:	bf00      	nop

080108ec <uxr_serialize_OBJK_Topic_Binary>:
 80108ec:	b570      	push	{r4, r5, r6, lr}
 80108ee:	460d      	mov	r5, r1
 80108f0:	6809      	ldr	r1, [r1, #0]
 80108f2:	4606      	mov	r6, r0
 80108f4:	f005 fca8 	bl	8016248 <ucdr_serialize_string>
 80108f8:	7929      	ldrb	r1, [r5, #4]
 80108fa:	4604      	mov	r4, r0
 80108fc:	4630      	mov	r0, r6
 80108fe:	f7f9 fdcd 	bl	800a49c <ucdr_serialize_bool>
 8010902:	792b      	ldrb	r3, [r5, #4]
 8010904:	4004      	ands	r4, r0
 8010906:	b2e4      	uxtb	r4, r4
 8010908:	b943      	cbnz	r3, 801091c <uxr_serialize_OBJK_Topic_Binary+0x30>
 801090a:	7b29      	ldrb	r1, [r5, #12]
 801090c:	4630      	mov	r0, r6
 801090e:	f7f9 fdc5 	bl	800a49c <ucdr_serialize_bool>
 8010912:	7b2b      	ldrb	r3, [r5, #12]
 8010914:	4004      	ands	r4, r0
 8010916:	b93b      	cbnz	r3, 8010928 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010918:	4620      	mov	r0, r4
 801091a:	bd70      	pop	{r4, r5, r6, pc}
 801091c:	68a9      	ldr	r1, [r5, #8]
 801091e:	4630      	mov	r0, r6
 8010920:	f005 fc92 	bl	8016248 <ucdr_serialize_string>
 8010924:	4004      	ands	r4, r0
 8010926:	e7f0      	b.n	801090a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010928:	6929      	ldr	r1, [r5, #16]
 801092a:	4630      	mov	r0, r6
 801092c:	f005 fc8c 	bl	8016248 <ucdr_serialize_string>
 8010930:	4004      	ands	r4, r0
 8010932:	b2e4      	uxtb	r4, r4
 8010934:	4620      	mov	r0, r4
 8010936:	bd70      	pop	{r4, r5, r6, pc}

08010938 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801093c:	460c      	mov	r4, r1
 801093e:	7809      	ldrb	r1, [r1, #0]
 8010940:	4606      	mov	r6, r0
 8010942:	f7f9 fdab 	bl	800a49c <ucdr_serialize_bool>
 8010946:	7823      	ldrb	r3, [r4, #0]
 8010948:	4605      	mov	r5, r0
 801094a:	b96b      	cbnz	r3, 8010968 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801094c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010950:	4630      	mov	r0, r6
 8010952:	f7f9 fda3 	bl	800a49c <ucdr_serialize_bool>
 8010956:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801095a:	4005      	ands	r5, r0
 801095c:	b2ed      	uxtb	r5, r5
 801095e:	2b00      	cmp	r3, #0
 8010960:	d169      	bne.n	8010a36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8010962:	4628      	mov	r0, r5
 8010964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010968:	6861      	ldr	r1, [r4, #4]
 801096a:	4630      	mov	r0, r6
 801096c:	f7f9 ffda 	bl	800a924 <ucdr_serialize_uint32_t>
 8010970:	6863      	ldr	r3, [r4, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d06b      	beq.n	8010a4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8010976:	2800      	cmp	r0, #0
 8010978:	d067      	beq.n	8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801097a:	68a1      	ldr	r1, [r4, #8]
 801097c:	4630      	mov	r0, r6
 801097e:	f005 fc63 	bl	8016248 <ucdr_serialize_string>
 8010982:	6863      	ldr	r3, [r4, #4]
 8010984:	2b01      	cmp	r3, #1
 8010986:	d953      	bls.n	8010a30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010988:	2800      	cmp	r0, #0
 801098a:	d05e      	beq.n	8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801098c:	68e1      	ldr	r1, [r4, #12]
 801098e:	4630      	mov	r0, r6
 8010990:	f005 fc5a 	bl	8016248 <ucdr_serialize_string>
 8010994:	6863      	ldr	r3, [r4, #4]
 8010996:	2b02      	cmp	r3, #2
 8010998:	d94a      	bls.n	8010a30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801099a:	2800      	cmp	r0, #0
 801099c:	d055      	beq.n	8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801099e:	6921      	ldr	r1, [r4, #16]
 80109a0:	4630      	mov	r0, r6
 80109a2:	f005 fc51 	bl	8016248 <ucdr_serialize_string>
 80109a6:	6863      	ldr	r3, [r4, #4]
 80109a8:	2b03      	cmp	r3, #3
 80109aa:	d941      	bls.n	8010a30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80109ac:	2800      	cmp	r0, #0
 80109ae:	d04c      	beq.n	8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80109b0:	6961      	ldr	r1, [r4, #20]
 80109b2:	4630      	mov	r0, r6
 80109b4:	f005 fc48 	bl	8016248 <ucdr_serialize_string>
 80109b8:	6863      	ldr	r3, [r4, #4]
 80109ba:	2b04      	cmp	r3, #4
 80109bc:	d938      	bls.n	8010a30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80109be:	2800      	cmp	r0, #0
 80109c0:	d043      	beq.n	8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80109c2:	69a1      	ldr	r1, [r4, #24]
 80109c4:	4630      	mov	r0, r6
 80109c6:	f005 fc3f 	bl	8016248 <ucdr_serialize_string>
 80109ca:	6863      	ldr	r3, [r4, #4]
 80109cc:	2b05      	cmp	r3, #5
 80109ce:	d92f      	bls.n	8010a30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80109d0:	2800      	cmp	r0, #0
 80109d2:	d03a      	beq.n	8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80109d4:	69e1      	ldr	r1, [r4, #28]
 80109d6:	4630      	mov	r0, r6
 80109d8:	f005 fc36 	bl	8016248 <ucdr_serialize_string>
 80109dc:	6863      	ldr	r3, [r4, #4]
 80109de:	2b06      	cmp	r3, #6
 80109e0:	d926      	bls.n	8010a30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80109e2:	b390      	cbz	r0, 8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80109e4:	6a21      	ldr	r1, [r4, #32]
 80109e6:	4630      	mov	r0, r6
 80109e8:	f005 fc2e 	bl	8016248 <ucdr_serialize_string>
 80109ec:	6863      	ldr	r3, [r4, #4]
 80109ee:	2b07      	cmp	r3, #7
 80109f0:	d91e      	bls.n	8010a30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80109f2:	b350      	cbz	r0, 8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80109f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80109f6:	4630      	mov	r0, r6
 80109f8:	f005 fc26 	bl	8016248 <ucdr_serialize_string>
 80109fc:	6863      	ldr	r3, [r4, #4]
 80109fe:	2b08      	cmp	r3, #8
 8010a00:	d916      	bls.n	8010a30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010a02:	b310      	cbz	r0, 8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010a04:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010a06:	4630      	mov	r0, r6
 8010a08:	f005 fc1e 	bl	8016248 <ucdr_serialize_string>
 8010a0c:	6863      	ldr	r3, [r4, #4]
 8010a0e:	2b09      	cmp	r3, #9
 8010a10:	d90e      	bls.n	8010a30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010a12:	b1d0      	cbz	r0, 8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010a14:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010a18:	2709      	movs	r7, #9
 8010a1a:	e000      	b.n	8010a1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8010a1c:	b1a8      	cbz	r0, 8010a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010a1e:	f858 1b04 	ldr.w	r1, [r8], #4
 8010a22:	4630      	mov	r0, r6
 8010a24:	f005 fc10 	bl	8016248 <ucdr_serialize_string>
 8010a28:	6862      	ldr	r2, [r4, #4]
 8010a2a:	3701      	adds	r7, #1
 8010a2c:	4297      	cmp	r7, r2
 8010a2e:	d3f5      	bcc.n	8010a1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8010a30:	4005      	ands	r5, r0
 8010a32:	b2ed      	uxtb	r5, r5
 8010a34:	e78a      	b.n	801094c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010a36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010a38:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f7fd fedf 	bl	800e800 <ucdr_serialize_sequence_uint8_t>
 8010a42:	4005      	ands	r5, r0
 8010a44:	4628      	mov	r0, r5
 8010a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a4a:	2500      	movs	r5, #0
 8010a4c:	e77e      	b.n	801094c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010a4e:	4028      	ands	r0, r5
 8010a50:	b2c5      	uxtb	r5, r0
 8010a52:	e77b      	b.n	801094c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08010a54 <uxr_serialize_OBJK_Publisher_Binary>:
 8010a54:	b570      	push	{r4, r5, r6, lr}
 8010a56:	460d      	mov	r5, r1
 8010a58:	7809      	ldrb	r1, [r1, #0]
 8010a5a:	4606      	mov	r6, r0
 8010a5c:	f7f9 fd1e 	bl	800a49c <ucdr_serialize_bool>
 8010a60:	782b      	ldrb	r3, [r5, #0]
 8010a62:	4604      	mov	r4, r0
 8010a64:	b94b      	cbnz	r3, 8010a7a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8010a66:	7a29      	ldrb	r1, [r5, #8]
 8010a68:	4630      	mov	r0, r6
 8010a6a:	f7f9 fd17 	bl	800a49c <ucdr_serialize_bool>
 8010a6e:	7a2b      	ldrb	r3, [r5, #8]
 8010a70:	4004      	ands	r4, r0
 8010a72:	b2e4      	uxtb	r4, r4
 8010a74:	b943      	cbnz	r3, 8010a88 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8010a76:	4620      	mov	r0, r4
 8010a78:	bd70      	pop	{r4, r5, r6, pc}
 8010a7a:	6869      	ldr	r1, [r5, #4]
 8010a7c:	4630      	mov	r0, r6
 8010a7e:	f005 fbe3 	bl	8016248 <ucdr_serialize_string>
 8010a82:	4004      	ands	r4, r0
 8010a84:	b2e4      	uxtb	r4, r4
 8010a86:	e7ee      	b.n	8010a66 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010a88:	f105 010c 	add.w	r1, r5, #12
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	f7ff ff53 	bl	8010938 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8010a92:	4004      	ands	r4, r0
 8010a94:	4620      	mov	r0, r4
 8010a96:	bd70      	pop	{r4, r5, r6, pc}

08010a98 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8010a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a9c:	460c      	mov	r4, r1
 8010a9e:	7809      	ldrb	r1, [r1, #0]
 8010aa0:	4606      	mov	r6, r0
 8010aa2:	f7f9 fcfb 	bl	800a49c <ucdr_serialize_bool>
 8010aa6:	7823      	ldrb	r3, [r4, #0]
 8010aa8:	4605      	mov	r5, r0
 8010aaa:	b96b      	cbnz	r3, 8010ac8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8010aac:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010ab0:	4630      	mov	r0, r6
 8010ab2:	f7f9 fcf3 	bl	800a49c <ucdr_serialize_bool>
 8010ab6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010aba:	4005      	ands	r5, r0
 8010abc:	b2ed      	uxtb	r5, r5
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d169      	bne.n	8010b96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ac8:	6861      	ldr	r1, [r4, #4]
 8010aca:	4630      	mov	r0, r6
 8010acc:	f7f9 ff2a 	bl	800a924 <ucdr_serialize_uint32_t>
 8010ad0:	6863      	ldr	r3, [r4, #4]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d06b      	beq.n	8010bae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	d067      	beq.n	8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010ada:	68a1      	ldr	r1, [r4, #8]
 8010adc:	4630      	mov	r0, r6
 8010ade:	f005 fbb3 	bl	8016248 <ucdr_serialize_string>
 8010ae2:	6863      	ldr	r3, [r4, #4]
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d953      	bls.n	8010b90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010ae8:	2800      	cmp	r0, #0
 8010aea:	d05e      	beq.n	8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010aec:	68e1      	ldr	r1, [r4, #12]
 8010aee:	4630      	mov	r0, r6
 8010af0:	f005 fbaa 	bl	8016248 <ucdr_serialize_string>
 8010af4:	6863      	ldr	r3, [r4, #4]
 8010af6:	2b02      	cmp	r3, #2
 8010af8:	d94a      	bls.n	8010b90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010afa:	2800      	cmp	r0, #0
 8010afc:	d055      	beq.n	8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010afe:	6921      	ldr	r1, [r4, #16]
 8010b00:	4630      	mov	r0, r6
 8010b02:	f005 fba1 	bl	8016248 <ucdr_serialize_string>
 8010b06:	6863      	ldr	r3, [r4, #4]
 8010b08:	2b03      	cmp	r3, #3
 8010b0a:	d941      	bls.n	8010b90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	d04c      	beq.n	8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010b10:	6961      	ldr	r1, [r4, #20]
 8010b12:	4630      	mov	r0, r6
 8010b14:	f005 fb98 	bl	8016248 <ucdr_serialize_string>
 8010b18:	6863      	ldr	r3, [r4, #4]
 8010b1a:	2b04      	cmp	r3, #4
 8010b1c:	d938      	bls.n	8010b90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	d043      	beq.n	8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010b22:	69a1      	ldr	r1, [r4, #24]
 8010b24:	4630      	mov	r0, r6
 8010b26:	f005 fb8f 	bl	8016248 <ucdr_serialize_string>
 8010b2a:	6863      	ldr	r3, [r4, #4]
 8010b2c:	2b05      	cmp	r3, #5
 8010b2e:	d92f      	bls.n	8010b90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010b30:	2800      	cmp	r0, #0
 8010b32:	d03a      	beq.n	8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010b34:	69e1      	ldr	r1, [r4, #28]
 8010b36:	4630      	mov	r0, r6
 8010b38:	f005 fb86 	bl	8016248 <ucdr_serialize_string>
 8010b3c:	6863      	ldr	r3, [r4, #4]
 8010b3e:	2b06      	cmp	r3, #6
 8010b40:	d926      	bls.n	8010b90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010b42:	b390      	cbz	r0, 8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010b44:	6a21      	ldr	r1, [r4, #32]
 8010b46:	4630      	mov	r0, r6
 8010b48:	f005 fb7e 	bl	8016248 <ucdr_serialize_string>
 8010b4c:	6863      	ldr	r3, [r4, #4]
 8010b4e:	2b07      	cmp	r3, #7
 8010b50:	d91e      	bls.n	8010b90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010b52:	b350      	cbz	r0, 8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010b54:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010b56:	4630      	mov	r0, r6
 8010b58:	f005 fb76 	bl	8016248 <ucdr_serialize_string>
 8010b5c:	6863      	ldr	r3, [r4, #4]
 8010b5e:	2b08      	cmp	r3, #8
 8010b60:	d916      	bls.n	8010b90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010b62:	b310      	cbz	r0, 8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010b64:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010b66:	4630      	mov	r0, r6
 8010b68:	f005 fb6e 	bl	8016248 <ucdr_serialize_string>
 8010b6c:	6863      	ldr	r3, [r4, #4]
 8010b6e:	2b09      	cmp	r3, #9
 8010b70:	d90e      	bls.n	8010b90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010b72:	b1d0      	cbz	r0, 8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010b74:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010b78:	2709      	movs	r7, #9
 8010b7a:	e000      	b.n	8010b7e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8010b7c:	b1a8      	cbz	r0, 8010baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010b7e:	f858 1b04 	ldr.w	r1, [r8], #4
 8010b82:	4630      	mov	r0, r6
 8010b84:	f005 fb60 	bl	8016248 <ucdr_serialize_string>
 8010b88:	6862      	ldr	r2, [r4, #4]
 8010b8a:	3701      	adds	r7, #1
 8010b8c:	4297      	cmp	r7, r2
 8010b8e:	d3f5      	bcc.n	8010b7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8010b90:	4005      	ands	r5, r0
 8010b92:	b2ed      	uxtb	r5, r5
 8010b94:	e78a      	b.n	8010aac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010b96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010b98:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	f7fd fe2f 	bl	800e800 <ucdr_serialize_sequence_uint8_t>
 8010ba2:	4005      	ands	r5, r0
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010baa:	2500      	movs	r5, #0
 8010bac:	e77e      	b.n	8010aac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010bae:	4028      	ands	r0, r5
 8010bb0:	b2c5      	uxtb	r5, r0
 8010bb2:	e77b      	b.n	8010aac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08010bb4 <uxr_serialize_OBJK_Subscriber_Binary>:
 8010bb4:	b570      	push	{r4, r5, r6, lr}
 8010bb6:	460d      	mov	r5, r1
 8010bb8:	7809      	ldrb	r1, [r1, #0]
 8010bba:	4606      	mov	r6, r0
 8010bbc:	f7f9 fc6e 	bl	800a49c <ucdr_serialize_bool>
 8010bc0:	782b      	ldrb	r3, [r5, #0]
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	b94b      	cbnz	r3, 8010bda <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8010bc6:	7a29      	ldrb	r1, [r5, #8]
 8010bc8:	4630      	mov	r0, r6
 8010bca:	f7f9 fc67 	bl	800a49c <ucdr_serialize_bool>
 8010bce:	7a2b      	ldrb	r3, [r5, #8]
 8010bd0:	4004      	ands	r4, r0
 8010bd2:	b2e4      	uxtb	r4, r4
 8010bd4:	b943      	cbnz	r3, 8010be8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	bd70      	pop	{r4, r5, r6, pc}
 8010bda:	6869      	ldr	r1, [r5, #4]
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f005 fb33 	bl	8016248 <ucdr_serialize_string>
 8010be2:	4004      	ands	r4, r0
 8010be4:	b2e4      	uxtb	r4, r4
 8010be6:	e7ee      	b.n	8010bc6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8010be8:	f105 010c 	add.w	r1, r5, #12
 8010bec:	4630      	mov	r0, r6
 8010bee:	f7ff ff53 	bl	8010a98 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8010bf2:	4004      	ands	r4, r0
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	bd70      	pop	{r4, r5, r6, pc}

08010bf8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010bf8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8010bfc:	4688      	mov	r8, r1
 8010bfe:	8809      	ldrh	r1, [r1, #0]
 8010c00:	4681      	mov	r9, r0
 8010c02:	f7f9 fca5 	bl	800a550 <ucdr_serialize_uint16_t>
 8010c06:	f898 1002 	ldrb.w	r1, [r8, #2]
 8010c0a:	4606      	mov	r6, r0
 8010c0c:	4648      	mov	r0, r9
 8010c0e:	f7f9 fc45 	bl	800a49c <ucdr_serialize_bool>
 8010c12:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010c16:	4006      	ands	r6, r0
 8010c18:	b2f5      	uxtb	r5, r6
 8010c1a:	b9eb      	cbnz	r3, 8010c58 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8010c1c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8010c20:	4648      	mov	r0, r9
 8010c22:	f7f9 fc3b 	bl	800a49c <ucdr_serialize_bool>
 8010c26:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010c2a:	4005      	ands	r5, r0
 8010c2c:	bb7b      	cbnz	r3, 8010c8e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8010c2e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8010c32:	4648      	mov	r0, r9
 8010c34:	f7f9 fc32 	bl	800a49c <ucdr_serialize_bool>
 8010c38:	f898 300c 	ldrb.w	r3, [r8, #12]
 8010c3c:	4005      	ands	r5, r0
 8010c3e:	b9f3      	cbnz	r3, 8010c7e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8010c40:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010c44:	4648      	mov	r0, r9
 8010c46:	f7f9 fc29 	bl	800a49c <ucdr_serialize_bool>
 8010c4a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010c4e:	4005      	ands	r5, r0
 8010c50:	b94b      	cbnz	r3, 8010c66 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8010c52:	4628      	mov	r0, r5
 8010c54:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010c58:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8010c5c:	4648      	mov	r0, r9
 8010c5e:	f7f9 fc77 	bl	800a550 <ucdr_serialize_uint16_t>
 8010c62:	4005      	ands	r5, r0
 8010c64:	e7da      	b.n	8010c1c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010c66:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010c6a:	f108 011c 	add.w	r1, r8, #28
 8010c6e:	4648      	mov	r0, r9
 8010c70:	f7fd fdc6 	bl	800e800 <ucdr_serialize_sequence_uint8_t>
 8010c74:	4028      	ands	r0, r5
 8010c76:	b2c5      	uxtb	r5, r0
 8010c78:	4628      	mov	r0, r5
 8010c7a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010c7e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010c82:	4648      	mov	r0, r9
 8010c84:	f7f9 fe4e 	bl	800a924 <ucdr_serialize_uint32_t>
 8010c88:	4028      	ands	r0, r5
 8010c8a:	b2c5      	uxtb	r5, r0
 8010c8c:	e7d8      	b.n	8010c40 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8010c8e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010c92:	4648      	mov	r0, r9
 8010c94:	f7f9 fe46 	bl	800a924 <ucdr_serialize_uint32_t>
 8010c98:	4028      	ands	r0, r5
 8010c9a:	b2c5      	uxtb	r5, r0
 8010c9c:	e7c7      	b.n	8010c2e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8010c9e:	bf00      	nop

08010ca0 <uxr_serialize_OBJK_DataReader_Binary>:
 8010ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca2:	2202      	movs	r2, #2
 8010ca4:	460c      	mov	r4, r1
 8010ca6:	4606      	mov	r6, r0
 8010ca8:	f7fd fc0c 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8010cac:	78a1      	ldrb	r1, [r4, #2]
 8010cae:	4605      	mov	r5, r0
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	f7f9 fbf3 	bl	800a49c <ucdr_serialize_bool>
 8010cb6:	78a3      	ldrb	r3, [r4, #2]
 8010cb8:	4005      	ands	r5, r0
 8010cba:	b2ed      	uxtb	r5, r5
 8010cbc:	b90b      	cbnz	r3, 8010cc2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cc2:	f104 0108 	add.w	r1, r4, #8
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	f7ff ff96 	bl	8010bf8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010ccc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010cd0:	4607      	mov	r7, r0
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	f7f9 fbe2 	bl	800a49c <ucdr_serialize_bool>
 8010cd8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010cdc:	4038      	ands	r0, r7
 8010cde:	b2c7      	uxtb	r7, r0
 8010ce0:	b95b      	cbnz	r3, 8010cfa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8010ce2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	f7f9 fbd8 	bl	800a49c <ucdr_serialize_bool>
 8010cec:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010cf0:	4007      	ands	r7, r0
 8010cf2:	b94b      	cbnz	r3, 8010d08 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8010cf4:	403d      	ands	r5, r7
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cfa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8010cfe:	4630      	mov	r0, r6
 8010d00:	f7fa f866 	bl	800add0 <ucdr_serialize_uint64_t>
 8010d04:	4007      	ands	r7, r0
 8010d06:	e7ec      	b.n	8010ce2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8010d08:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8010d0a:	4630      	mov	r0, r6
 8010d0c:	f005 fa9c 	bl	8016248 <ucdr_serialize_string>
 8010d10:	4007      	ands	r7, r0
 8010d12:	b2ff      	uxtb	r7, r7
 8010d14:	e7ee      	b.n	8010cf4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8010d16:	bf00      	nop

08010d18 <uxr_serialize_OBJK_DataWriter_Binary>:
 8010d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d1a:	2202      	movs	r2, #2
 8010d1c:	460d      	mov	r5, r1
 8010d1e:	4606      	mov	r6, r0
 8010d20:	f7fd fbd0 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8010d24:	78a9      	ldrb	r1, [r5, #2]
 8010d26:	4604      	mov	r4, r0
 8010d28:	4630      	mov	r0, r6
 8010d2a:	f7f9 fbb7 	bl	800a49c <ucdr_serialize_bool>
 8010d2e:	78ab      	ldrb	r3, [r5, #2]
 8010d30:	4004      	ands	r4, r0
 8010d32:	b2e4      	uxtb	r4, r4
 8010d34:	b90b      	cbnz	r3, 8010d3a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8010d36:	4620      	mov	r0, r4
 8010d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d3a:	f105 0108 	add.w	r1, r5, #8
 8010d3e:	4630      	mov	r0, r6
 8010d40:	f7ff ff5a 	bl	8010bf8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010d44:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8010d48:	4607      	mov	r7, r0
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	f7f9 fba6 	bl	800a49c <ucdr_serialize_bool>
 8010d50:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8010d54:	4038      	ands	r0, r7
 8010d56:	b2c7      	uxtb	r7, r0
 8010d58:	b913      	cbnz	r3, 8010d60 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8010d5a:	403c      	ands	r4, r7
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d60:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8010d64:	4630      	mov	r0, r6
 8010d66:	f7fa f833 	bl	800add0 <ucdr_serialize_uint64_t>
 8010d6a:	4007      	ands	r7, r0
 8010d6c:	e7f5      	b.n	8010d5a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8010d6e:	bf00      	nop

08010d70 <uxr_deserialize_ObjectVariant>:
 8010d70:	b570      	push	{r4, r5, r6, lr}
 8010d72:	4605      	mov	r5, r0
 8010d74:	460e      	mov	r6, r1
 8010d76:	f7f9 fbd5 	bl	800a524 <ucdr_deserialize_uint8_t>
 8010d7a:	b168      	cbz	r0, 8010d98 <uxr_deserialize_ObjectVariant+0x28>
 8010d7c:	7833      	ldrb	r3, [r6, #0]
 8010d7e:	3b01      	subs	r3, #1
 8010d80:	4604      	mov	r4, r0
 8010d82:	2b0d      	cmp	r3, #13
 8010d84:	d809      	bhi.n	8010d9a <uxr_deserialize_ObjectVariant+0x2a>
 8010d86:	e8df f003 	tbb	[pc, r3]
 8010d8a:	0a41      	.short	0x0a41
 8010d8c:	0a0a2323 	.word	0x0a0a2323
 8010d90:	10080a0a 	.word	0x10080a0a
 8010d94:	565c1010 	.word	0x565c1010
 8010d98:	2400      	movs	r4, #0
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	bd70      	pop	{r4, r5, r6, pc}
 8010d9e:	1d31      	adds	r1, r6, #4
 8010da0:	4628      	mov	r0, r5
 8010da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010da6:	f7ff bd55 	b.w	8010854 <uxr_deserialize_DATAWRITER_Representation>
 8010daa:	1d31      	adds	r1, r6, #4
 8010dac:	4628      	mov	r0, r5
 8010dae:	f7f9 fbb9 	bl	800a524 <ucdr_deserialize_uint8_t>
 8010db2:	2800      	cmp	r0, #0
 8010db4:	d0f0      	beq.n	8010d98 <uxr_deserialize_ObjectVariant+0x28>
 8010db6:	7933      	ldrb	r3, [r6, #4]
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d001      	beq.n	8010dc0 <uxr_deserialize_ObjectVariant+0x50>
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d1ec      	bne.n	8010d9a <uxr_deserialize_ObjectVariant+0x2a>
 8010dc0:	68b1      	ldr	r1, [r6, #8]
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dcc:	f005 ba4c 	b.w	8016268 <ucdr_deserialize_string>
 8010dd0:	1d31      	adds	r1, r6, #4
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	f7f9 fba6 	bl	800a524 <ucdr_deserialize_uint8_t>
 8010dd8:	4604      	mov	r4, r0
 8010dda:	b170      	cbz	r0, 8010dfa <uxr_deserialize_ObjectVariant+0x8a>
 8010ddc:	7933      	ldrb	r3, [r6, #4]
 8010dde:	2b02      	cmp	r3, #2
 8010de0:	d04c      	beq.n	8010e7c <uxr_deserialize_ObjectVariant+0x10c>
 8010de2:	2b03      	cmp	r3, #3
 8010de4:	d109      	bne.n	8010dfa <uxr_deserialize_ObjectVariant+0x8a>
 8010de6:	f106 0308 	add.w	r3, r6, #8
 8010dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010dee:	f106 010c 	add.w	r1, r6, #12
 8010df2:	4628      	mov	r0, r5
 8010df4:	f7fd fd16 	bl	800e824 <ucdr_deserialize_sequence_uint8_t>
 8010df8:	4604      	mov	r4, r0
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010e00:	4628      	mov	r0, r5
 8010e02:	f7fd fbc3 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 8010e06:	4020      	ands	r0, r4
 8010e08:	b2c4      	uxtb	r4, r0
 8010e0a:	e7c6      	b.n	8010d9a <uxr_deserialize_ObjectVariant+0x2a>
 8010e0c:	1d31      	adds	r1, r6, #4
 8010e0e:	4628      	mov	r0, r5
 8010e10:	f7f9 fb88 	bl	800a524 <ucdr_deserialize_uint8_t>
 8010e14:	4604      	mov	r4, r0
 8010e16:	b130      	cbz	r0, 8010e26 <uxr_deserialize_ObjectVariant+0xb6>
 8010e18:	7933      	ldrb	r3, [r6, #4]
 8010e1a:	2b02      	cmp	r3, #2
 8010e1c:	d036      	beq.n	8010e8c <uxr_deserialize_ObjectVariant+0x11c>
 8010e1e:	2b03      	cmp	r3, #3
 8010e20:	d03c      	beq.n	8010e9c <uxr_deserialize_ObjectVariant+0x12c>
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d032      	beq.n	8010e8c <uxr_deserialize_ObjectVariant+0x11c>
 8010e26:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010e2a:	4628      	mov	r0, r5
 8010e2c:	f7fa f920 	bl	800b070 <ucdr_deserialize_int16_t>
 8010e30:	4020      	ands	r0, r4
 8010e32:	b2c4      	uxtb	r4, r0
 8010e34:	e7b1      	b.n	8010d9a <uxr_deserialize_ObjectVariant+0x2a>
 8010e36:	1d31      	adds	r1, r6, #4
 8010e38:	4628      	mov	r0, r5
 8010e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e3e:	f7ff bbbf 	b.w	80105c0 <uxr_deserialize_CLIENT_Representation>
 8010e42:	2204      	movs	r2, #4
 8010e44:	18b1      	adds	r1, r6, r2
 8010e46:	4628      	mov	r0, r5
 8010e48:	f7fd fba0 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 8010e4c:	2202      	movs	r2, #2
 8010e4e:	f106 0108 	add.w	r1, r6, #8
 8010e52:	4604      	mov	r4, r0
 8010e54:	4628      	mov	r0, r5
 8010e56:	f7fd fb99 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 8010e5a:	2202      	movs	r2, #2
 8010e5c:	4004      	ands	r4, r0
 8010e5e:	f106 010a 	add.w	r1, r6, #10
 8010e62:	4628      	mov	r0, r5
 8010e64:	f7fd fb92 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 8010e68:	b2e4      	uxtb	r4, r4
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	f106 010c 	add.w	r1, r6, #12
 8010e70:	4628      	mov	r0, r5
 8010e72:	401c      	ands	r4, r3
 8010e74:	f7f9 fb28 	bl	800a4c8 <ucdr_deserialize_bool>
 8010e78:	4004      	ands	r4, r0
 8010e7a:	e78e      	b.n	8010d9a <uxr_deserialize_ObjectVariant+0x2a>
 8010e7c:	68b1      	ldr	r1, [r6, #8]
 8010e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e82:	4628      	mov	r0, r5
 8010e84:	f005 f9f0 	bl	8016268 <ucdr_deserialize_string>
 8010e88:	4604      	mov	r4, r0
 8010e8a:	e7b6      	b.n	8010dfa <uxr_deserialize_ObjectVariant+0x8a>
 8010e8c:	68b1      	ldr	r1, [r6, #8]
 8010e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e92:	4628      	mov	r0, r5
 8010e94:	f005 f9e8 	bl	8016268 <ucdr_deserialize_string>
 8010e98:	4604      	mov	r4, r0
 8010e9a:	e7c4      	b.n	8010e26 <uxr_deserialize_ObjectVariant+0xb6>
 8010e9c:	f106 0308 	add.w	r3, r6, #8
 8010ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ea4:	f106 010c 	add.w	r1, r6, #12
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	f7fd fcbb 	bl	800e824 <ucdr_deserialize_sequence_uint8_t>
 8010eae:	4604      	mov	r4, r0
 8010eb0:	e7b9      	b.n	8010e26 <uxr_deserialize_ObjectVariant+0xb6>
 8010eb2:	bf00      	nop

08010eb4 <uxr_deserialize_BaseObjectRequest>:
 8010eb4:	b570      	push	{r4, r5, r6, lr}
 8010eb6:	2202      	movs	r2, #2
 8010eb8:	4605      	mov	r5, r0
 8010eba:	460e      	mov	r6, r1
 8010ebc:	f7fd fb66 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 8010ec0:	2202      	movs	r2, #2
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	18b1      	adds	r1, r6, r2
 8010ec6:	4628      	mov	r0, r5
 8010ec8:	f7fd fb60 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 8010ecc:	4020      	ands	r0, r4
 8010ece:	b2c0      	uxtb	r0, r0
 8010ed0:	bd70      	pop	{r4, r5, r6, pc}
 8010ed2:	bf00      	nop

08010ed4 <uxr_serialize_ActivityInfoVariant>:
 8010ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed8:	460d      	mov	r5, r1
 8010eda:	7809      	ldrb	r1, [r1, #0]
 8010edc:	4607      	mov	r7, r0
 8010ede:	f7f9 fb0b 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8010ee2:	4681      	mov	r9, r0
 8010ee4:	b138      	cbz	r0, 8010ef6 <uxr_serialize_ActivityInfoVariant+0x22>
 8010ee6:	782b      	ldrb	r3, [r5, #0]
 8010ee8:	2b06      	cmp	r3, #6
 8010eea:	f000 8082 	beq.w	8010ff2 <uxr_serialize_ActivityInfoVariant+0x11e>
 8010eee:	2b0d      	cmp	r3, #13
 8010ef0:	d016      	beq.n	8010f20 <uxr_serialize_ActivityInfoVariant+0x4c>
 8010ef2:	2b05      	cmp	r3, #5
 8010ef4:	d002      	beq.n	8010efc <uxr_serialize_ActivityInfoVariant+0x28>
 8010ef6:	4648      	mov	r0, r9
 8010ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010efc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010f00:	4638      	mov	r0, r7
 8010f02:	f7fa f835 	bl	800af70 <ucdr_serialize_int16_t>
 8010f06:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8010f0a:	4681      	mov	r9, r0
 8010f0c:	4638      	mov	r0, r7
 8010f0e:	f7f9 ff5f 	bl	800add0 <ucdr_serialize_uint64_t>
 8010f12:	ea09 0000 	and.w	r0, r9, r0
 8010f16:	fa5f f980 	uxtb.w	r9, r0
 8010f1a:	4648      	mov	r0, r9
 8010f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f20:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010f24:	4638      	mov	r0, r7
 8010f26:	f7fa f823 	bl	800af70 <ucdr_serialize_int16_t>
 8010f2a:	68e9      	ldr	r1, [r5, #12]
 8010f2c:	4681      	mov	r9, r0
 8010f2e:	4638      	mov	r0, r7
 8010f30:	f7f9 fcf8 	bl	800a924 <ucdr_serialize_uint32_t>
 8010f34:	68eb      	ldr	r3, [r5, #12]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d0eb      	beq.n	8010f12 <uxr_serialize_ActivityInfoVariant+0x3e>
 8010f3a:	b320      	cbz	r0, 8010f86 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010f3c:	f105 080c 	add.w	r8, r5, #12
 8010f40:	2600      	movs	r6, #0
 8010f42:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8010f46:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8010f4a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8010f4e:	4638      	mov	r0, r7
 8010f50:	f7f9 fad2 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	d053      	beq.n	8011000 <uxr_serialize_ActivityInfoVariant+0x12c>
 8010f58:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8010f5c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8010f60:	0074      	lsls	r4, r6, #1
 8010f62:	00c9      	lsls	r1, r1, #3
 8010f64:	2b03      	cmp	r3, #3
 8010f66:	d854      	bhi.n	8011012 <uxr_serialize_ActivityInfoVariant+0x13e>
 8010f68:	e8df f003 	tbb	[pc, r3]
 8010f6c:	02102132 	.word	0x02102132
 8010f70:	4441      	add	r1, r8
 8010f72:	4638      	mov	r0, r7
 8010f74:	6889      	ldr	r1, [r1, #8]
 8010f76:	f005 f967 	bl	8016248 <ucdr_serialize_string>
 8010f7a:	68ea      	ldr	r2, [r5, #12]
 8010f7c:	3601      	adds	r6, #1
 8010f7e:	4296      	cmp	r6, r2
 8010f80:	d242      	bcs.n	8011008 <uxr_serialize_ActivityInfoVariant+0x134>
 8010f82:	2800      	cmp	r0, #0
 8010f84:	d1dd      	bne.n	8010f42 <uxr_serialize_ActivityInfoVariant+0x6e>
 8010f86:	f04f 0900 	mov.w	r9, #0
 8010f8a:	e7b4      	b.n	8010ef6 <uxr_serialize_ActivityInfoVariant+0x22>
 8010f8c:	3108      	adds	r1, #8
 8010f8e:	4441      	add	r1, r8
 8010f90:	2210      	movs	r2, #16
 8010f92:	4638      	mov	r0, r7
 8010f94:	f7fd fa96 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8010f98:	4434      	add	r4, r6
 8010f9a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010fa2:	4638      	mov	r0, r7
 8010fa4:	f7f9 fcbe 	bl	800a924 <ucdr_serialize_uint32_t>
 8010fa8:	4020      	ands	r0, r4
 8010faa:	b2c0      	uxtb	r0, r0
 8010fac:	e7e5      	b.n	8010f7a <uxr_serialize_ActivityInfoVariant+0xa6>
 8010fae:	3108      	adds	r1, #8
 8010fb0:	4441      	add	r1, r8
 8010fb2:	2204      	movs	r2, #4
 8010fb4:	4638      	mov	r0, r7
 8010fb6:	f7fd fa85 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8010fba:	4434      	add	r4, r6
 8010fbc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	8b19      	ldrh	r1, [r3, #24]
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	f7f9 fac3 	bl	800a550 <ucdr_serialize_uint16_t>
 8010fca:	4020      	ands	r0, r4
 8010fcc:	b2c0      	uxtb	r0, r0
 8010fce:	e7d4      	b.n	8010f7a <uxr_serialize_ActivityInfoVariant+0xa6>
 8010fd0:	3108      	adds	r1, #8
 8010fd2:	4441      	add	r1, r8
 8010fd4:	2202      	movs	r2, #2
 8010fd6:	4638      	mov	r0, r7
 8010fd8:	f7fd fa74 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8010fdc:	4434      	add	r4, r6
 8010fde:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	7d99      	ldrb	r1, [r3, #22]
 8010fe6:	4638      	mov	r0, r7
 8010fe8:	f7f9 fa86 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8010fec:	4020      	ands	r0, r4
 8010fee:	b2c0      	uxtb	r0, r0
 8010ff0:	e7c3      	b.n	8010f7a <uxr_serialize_ActivityInfoVariant+0xa6>
 8010ff2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010ff6:	4638      	mov	r0, r7
 8010ff8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ffc:	f7f9 bfb8 	b.w	800af70 <ucdr_serialize_int16_t>
 8011000:	68ea      	ldr	r2, [r5, #12]
 8011002:	3601      	adds	r6, #1
 8011004:	42b2      	cmp	r2, r6
 8011006:	d8be      	bhi.n	8010f86 <uxr_serialize_ActivityInfoVariant+0xb2>
 8011008:	ea09 0900 	and.w	r9, r9, r0
 801100c:	fa5f f989 	uxtb.w	r9, r9
 8011010:	e771      	b.n	8010ef6 <uxr_serialize_ActivityInfoVariant+0x22>
 8011012:	68eb      	ldr	r3, [r5, #12]
 8011014:	3601      	adds	r6, #1
 8011016:	429e      	cmp	r6, r3
 8011018:	f10a 0a18 	add.w	sl, sl, #24
 801101c:	d395      	bcc.n	8010f4a <uxr_serialize_ActivityInfoVariant+0x76>
 801101e:	e76a      	b.n	8010ef6 <uxr_serialize_ActivityInfoVariant+0x22>

08011020 <uxr_deserialize_BaseObjectReply>:
 8011020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011024:	2202      	movs	r2, #2
 8011026:	4606      	mov	r6, r0
 8011028:	460f      	mov	r7, r1
 801102a:	f7fd faaf 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 801102e:	2202      	movs	r2, #2
 8011030:	18b9      	adds	r1, r7, r2
 8011032:	4605      	mov	r5, r0
 8011034:	4630      	mov	r0, r6
 8011036:	f7fd faa9 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 801103a:	1d39      	adds	r1, r7, #4
 801103c:	4680      	mov	r8, r0
 801103e:	4630      	mov	r0, r6
 8011040:	f7f9 fa70 	bl	800a524 <ucdr_deserialize_uint8_t>
 8011044:	1d79      	adds	r1, r7, #5
 8011046:	4604      	mov	r4, r0
 8011048:	4630      	mov	r0, r6
 801104a:	f7f9 fa6b 	bl	800a524 <ucdr_deserialize_uint8_t>
 801104e:	ea05 0508 	and.w	r5, r5, r8
 8011052:	402c      	ands	r4, r5
 8011054:	4020      	ands	r0, r4
 8011056:	b2c0      	uxtb	r0, r0
 8011058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801105c <uxr_serialize_ReadSpecification>:
 801105c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011060:	460e      	mov	r6, r1
 8011062:	7809      	ldrb	r1, [r1, #0]
 8011064:	4607      	mov	r7, r0
 8011066:	f7f9 fa47 	bl	800a4f8 <ucdr_serialize_uint8_t>
 801106a:	7871      	ldrb	r1, [r6, #1]
 801106c:	4604      	mov	r4, r0
 801106e:	4638      	mov	r0, r7
 8011070:	f7f9 fa42 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8011074:	78b1      	ldrb	r1, [r6, #2]
 8011076:	4004      	ands	r4, r0
 8011078:	4638      	mov	r0, r7
 801107a:	f7f9 fa0f 	bl	800a49c <ucdr_serialize_bool>
 801107e:	78b3      	ldrb	r3, [r6, #2]
 8011080:	b2e4      	uxtb	r4, r4
 8011082:	4004      	ands	r4, r0
 8011084:	b94b      	cbnz	r3, 801109a <uxr_serialize_ReadSpecification+0x3e>
 8011086:	7a31      	ldrb	r1, [r6, #8]
 8011088:	4638      	mov	r0, r7
 801108a:	f7f9 fa07 	bl	800a49c <ucdr_serialize_bool>
 801108e:	7a33      	ldrb	r3, [r6, #8]
 8011090:	4004      	ands	r4, r0
 8011092:	b943      	cbnz	r3, 80110a6 <uxr_serialize_ReadSpecification+0x4a>
 8011094:	4620      	mov	r0, r4
 8011096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801109a:	6871      	ldr	r1, [r6, #4]
 801109c:	4638      	mov	r0, r7
 801109e:	f005 f8d3 	bl	8016248 <ucdr_serialize_string>
 80110a2:	4004      	ands	r4, r0
 80110a4:	e7ef      	b.n	8011086 <uxr_serialize_ReadSpecification+0x2a>
 80110a6:	8971      	ldrh	r1, [r6, #10]
 80110a8:	4638      	mov	r0, r7
 80110aa:	f7f9 fa51 	bl	800a550 <ucdr_serialize_uint16_t>
 80110ae:	89b1      	ldrh	r1, [r6, #12]
 80110b0:	4605      	mov	r5, r0
 80110b2:	4638      	mov	r0, r7
 80110b4:	f7f9 fa4c 	bl	800a550 <ucdr_serialize_uint16_t>
 80110b8:	89f1      	ldrh	r1, [r6, #14]
 80110ba:	4005      	ands	r5, r0
 80110bc:	4638      	mov	r0, r7
 80110be:	f7f9 fa47 	bl	800a550 <ucdr_serialize_uint16_t>
 80110c2:	8a31      	ldrh	r1, [r6, #16]
 80110c4:	4680      	mov	r8, r0
 80110c6:	4638      	mov	r0, r7
 80110c8:	f7f9 fa42 	bl	800a550 <ucdr_serialize_uint16_t>
 80110cc:	b2ed      	uxtb	r5, r5
 80110ce:	4025      	ands	r5, r4
 80110d0:	ea08 0505 	and.w	r5, r8, r5
 80110d4:	ea00 0405 	and.w	r4, r0, r5
 80110d8:	4620      	mov	r0, r4
 80110da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110de:	bf00      	nop

080110e0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80110e0:	f7ff ba16 	b.w	8010510 <uxr_serialize_CLIENT_Representation>

080110e4 <uxr_serialize_CREATE_Payload>:
 80110e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e6:	2202      	movs	r2, #2
 80110e8:	4607      	mov	r7, r0
 80110ea:	460e      	mov	r6, r1
 80110ec:	f7fd f9ea 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80110f0:	2202      	movs	r2, #2
 80110f2:	18b1      	adds	r1, r6, r2
 80110f4:	4605      	mov	r5, r0
 80110f6:	4638      	mov	r0, r7
 80110f8:	f7fd f9e4 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80110fc:	7931      	ldrb	r1, [r6, #4]
 80110fe:	4604      	mov	r4, r0
 8011100:	4638      	mov	r0, r7
 8011102:	f7f9 f9f9 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8011106:	b170      	cbz	r0, 8011126 <uxr_serialize_CREATE_Payload+0x42>
 8011108:	7933      	ldrb	r3, [r6, #4]
 801110a:	402c      	ands	r4, r5
 801110c:	3b01      	subs	r3, #1
 801110e:	b2e4      	uxtb	r4, r4
 8011110:	2b0d      	cmp	r3, #13
 8011112:	d809      	bhi.n	8011128 <uxr_serialize_CREATE_Payload+0x44>
 8011114:	e8df f003 	tbb	[pc, r3]
 8011118:	23230a4c 	.word	0x23230a4c
 801111c:	0a0a0a0a 	.word	0x0a0a0a0a
 8011120:	12121208 	.word	0x12121208
 8011124:	3e45      	.short	0x3e45
 8011126:	2400      	movs	r4, #0
 8011128:	4620      	mov	r0, r4
 801112a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801112c:	f106 0108 	add.w	r1, r6, #8
 8011130:	4638      	mov	r0, r7
 8011132:	f7ff faf3 	bl	801071c <uxr_serialize_DATAWRITER_Representation>
 8011136:	4004      	ands	r4, r0
 8011138:	4620      	mov	r0, r4
 801113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801113c:	7a31      	ldrb	r1, [r6, #8]
 801113e:	4638      	mov	r0, r7
 8011140:	f7f9 f9da 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8011144:	2800      	cmp	r0, #0
 8011146:	d0ee      	beq.n	8011126 <uxr_serialize_CREATE_Payload+0x42>
 8011148:	7a33      	ldrb	r3, [r6, #8]
 801114a:	2b01      	cmp	r3, #1
 801114c:	d001      	beq.n	8011152 <uxr_serialize_CREATE_Payload+0x6e>
 801114e:	2b02      	cmp	r3, #2
 8011150:	d1ea      	bne.n	8011128 <uxr_serialize_CREATE_Payload+0x44>
 8011152:	68f1      	ldr	r1, [r6, #12]
 8011154:	4638      	mov	r0, r7
 8011156:	f005 f877 	bl	8016248 <ucdr_serialize_string>
 801115a:	4004      	ands	r4, r0
 801115c:	e7e4      	b.n	8011128 <uxr_serialize_CREATE_Payload+0x44>
 801115e:	7a31      	ldrb	r1, [r6, #8]
 8011160:	4638      	mov	r0, r7
 8011162:	f7f9 f9c9 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8011166:	4605      	mov	r5, r0
 8011168:	b158      	cbz	r0, 8011182 <uxr_serialize_CREATE_Payload+0x9e>
 801116a:	7a33      	ldrb	r3, [r6, #8]
 801116c:	2b02      	cmp	r3, #2
 801116e:	d034      	beq.n	80111da <uxr_serialize_CREATE_Payload+0xf6>
 8011170:	2b03      	cmp	r3, #3
 8011172:	d106      	bne.n	8011182 <uxr_serialize_CREATE_Payload+0x9e>
 8011174:	68f2      	ldr	r2, [r6, #12]
 8011176:	f106 0110 	add.w	r1, r6, #16
 801117a:	4638      	mov	r0, r7
 801117c:	f7fd fb40 	bl	800e800 <ucdr_serialize_sequence_uint8_t>
 8011180:	4605      	mov	r5, r0
 8011182:	2202      	movs	r2, #2
 8011184:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011188:	4638      	mov	r0, r7
 801118a:	f7fd f99b 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 801118e:	4028      	ands	r0, r5
 8011190:	4004      	ands	r4, r0
 8011192:	e7c9      	b.n	8011128 <uxr_serialize_CREATE_Payload+0x44>
 8011194:	f106 0108 	add.w	r1, r6, #8
 8011198:	4638      	mov	r0, r7
 801119a:	f7ff f9b9 	bl	8010510 <uxr_serialize_CLIENT_Representation>
 801119e:	4004      	ands	r4, r0
 80111a0:	e7c2      	b.n	8011128 <uxr_serialize_CREATE_Payload+0x44>
 80111a2:	f106 0108 	add.w	r1, r6, #8
 80111a6:	4638      	mov	r0, r7
 80111a8:	f7ff fa6e 	bl	8010688 <uxr_serialize_AGENT_Representation>
 80111ac:	4004      	ands	r4, r0
 80111ae:	e7bb      	b.n	8011128 <uxr_serialize_CREATE_Payload+0x44>
 80111b0:	7a31      	ldrb	r1, [r6, #8]
 80111b2:	4638      	mov	r0, r7
 80111b4:	f7f9 f9a0 	bl	800a4f8 <ucdr_serialize_uint8_t>
 80111b8:	4605      	mov	r5, r0
 80111ba:	b130      	cbz	r0, 80111ca <uxr_serialize_CREATE_Payload+0xe6>
 80111bc:	7a33      	ldrb	r3, [r6, #8]
 80111be:	2b02      	cmp	r3, #2
 80111c0:	d011      	beq.n	80111e6 <uxr_serialize_CREATE_Payload+0x102>
 80111c2:	2b03      	cmp	r3, #3
 80111c4:	d015      	beq.n	80111f2 <uxr_serialize_CREATE_Payload+0x10e>
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d00d      	beq.n	80111e6 <uxr_serialize_CREATE_Payload+0x102>
 80111ca:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80111ce:	4638      	mov	r0, r7
 80111d0:	f7f9 fece 	bl	800af70 <ucdr_serialize_int16_t>
 80111d4:	4028      	ands	r0, r5
 80111d6:	4004      	ands	r4, r0
 80111d8:	e7a6      	b.n	8011128 <uxr_serialize_CREATE_Payload+0x44>
 80111da:	68f1      	ldr	r1, [r6, #12]
 80111dc:	4638      	mov	r0, r7
 80111de:	f005 f833 	bl	8016248 <ucdr_serialize_string>
 80111e2:	4605      	mov	r5, r0
 80111e4:	e7cd      	b.n	8011182 <uxr_serialize_CREATE_Payload+0x9e>
 80111e6:	68f1      	ldr	r1, [r6, #12]
 80111e8:	4638      	mov	r0, r7
 80111ea:	f005 f82d 	bl	8016248 <ucdr_serialize_string>
 80111ee:	4605      	mov	r5, r0
 80111f0:	e7eb      	b.n	80111ca <uxr_serialize_CREATE_Payload+0xe6>
 80111f2:	68f2      	ldr	r2, [r6, #12]
 80111f4:	f106 0110 	add.w	r1, r6, #16
 80111f8:	4638      	mov	r0, r7
 80111fa:	f7fd fb01 	bl	800e800 <ucdr_serialize_sequence_uint8_t>
 80111fe:	4605      	mov	r5, r0
 8011200:	e7e3      	b.n	80111ca <uxr_serialize_CREATE_Payload+0xe6>
 8011202:	bf00      	nop

08011204 <uxr_deserialize_GET_INFO_Payload>:
 8011204:	b570      	push	{r4, r5, r6, lr}
 8011206:	2202      	movs	r2, #2
 8011208:	4605      	mov	r5, r0
 801120a:	460e      	mov	r6, r1
 801120c:	f7fd f9be 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 8011210:	2202      	movs	r2, #2
 8011212:	18b1      	adds	r1, r6, r2
 8011214:	4604      	mov	r4, r0
 8011216:	4628      	mov	r0, r5
 8011218:	f7fd f9b8 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 801121c:	1d31      	adds	r1, r6, #4
 801121e:	4004      	ands	r4, r0
 8011220:	4628      	mov	r0, r5
 8011222:	f7f9 fcaf 	bl	800ab84 <ucdr_deserialize_uint32_t>
 8011226:	b2e4      	uxtb	r4, r4
 8011228:	4020      	ands	r0, r4
 801122a:	bd70      	pop	{r4, r5, r6, pc}

0801122c <uxr_serialize_DELETE_Payload>:
 801122c:	b570      	push	{r4, r5, r6, lr}
 801122e:	2202      	movs	r2, #2
 8011230:	4605      	mov	r5, r0
 8011232:	460e      	mov	r6, r1
 8011234:	f7fd f946 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8011238:	2202      	movs	r2, #2
 801123a:	4604      	mov	r4, r0
 801123c:	18b1      	adds	r1, r6, r2
 801123e:	4628      	mov	r0, r5
 8011240:	f7fd f940 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8011244:	4020      	ands	r0, r4
 8011246:	b2c0      	uxtb	r0, r0
 8011248:	bd70      	pop	{r4, r5, r6, pc}
 801124a:	bf00      	nop

0801124c <uxr_deserialize_STATUS_AGENT_Payload>:
 801124c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011250:	4605      	mov	r5, r0
 8011252:	460e      	mov	r6, r1
 8011254:	f7f9 f966 	bl	800a524 <ucdr_deserialize_uint8_t>
 8011258:	1c71      	adds	r1, r6, #1
 801125a:	4604      	mov	r4, r0
 801125c:	4628      	mov	r0, r5
 801125e:	f7f9 f961 	bl	800a524 <ucdr_deserialize_uint8_t>
 8011262:	2204      	movs	r2, #4
 8011264:	18b1      	adds	r1, r6, r2
 8011266:	4680      	mov	r8, r0
 8011268:	4628      	mov	r0, r5
 801126a:	f7fd f98f 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 801126e:	f106 0108 	add.w	r1, r6, #8
 8011272:	4607      	mov	r7, r0
 8011274:	2202      	movs	r2, #2
 8011276:	4628      	mov	r0, r5
 8011278:	f7fd f988 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 801127c:	ea04 0308 	and.w	r3, r4, r8
 8011280:	b2db      	uxtb	r3, r3
 8011282:	ea03 0407 	and.w	r4, r3, r7
 8011286:	2202      	movs	r2, #2
 8011288:	4607      	mov	r7, r0
 801128a:	f106 010a 	add.w	r1, r6, #10
 801128e:	4628      	mov	r0, r5
 8011290:	f7fd f97c 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 8011294:	f106 010c 	add.w	r1, r6, #12
 8011298:	4603      	mov	r3, r0
 801129a:	4628      	mov	r0, r5
 801129c:	461d      	mov	r5, r3
 801129e:	f7f9 f913 	bl	800a4c8 <ucdr_deserialize_bool>
 80112a2:	403c      	ands	r4, r7
 80112a4:	4025      	ands	r5, r4
 80112a6:	4028      	ands	r0, r5
 80112a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080112ac <uxr_deserialize_STATUS_Payload>:
 80112ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112b0:	2202      	movs	r2, #2
 80112b2:	4606      	mov	r6, r0
 80112b4:	460f      	mov	r7, r1
 80112b6:	f7fd f969 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 80112ba:	2202      	movs	r2, #2
 80112bc:	18b9      	adds	r1, r7, r2
 80112be:	4605      	mov	r5, r0
 80112c0:	4630      	mov	r0, r6
 80112c2:	f7fd f963 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 80112c6:	1d39      	adds	r1, r7, #4
 80112c8:	4680      	mov	r8, r0
 80112ca:	4630      	mov	r0, r6
 80112cc:	f7f9 f92a 	bl	800a524 <ucdr_deserialize_uint8_t>
 80112d0:	1d79      	adds	r1, r7, #5
 80112d2:	4604      	mov	r4, r0
 80112d4:	4630      	mov	r0, r6
 80112d6:	f7f9 f925 	bl	800a524 <ucdr_deserialize_uint8_t>
 80112da:	ea05 0508 	and.w	r5, r5, r8
 80112de:	402c      	ands	r4, r5
 80112e0:	4020      	ands	r0, r4
 80112e2:	b2c0      	uxtb	r0, r0
 80112e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080112e8 <uxr_serialize_INFO_Payload>:
 80112e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ec:	2202      	movs	r2, #2
 80112ee:	460c      	mov	r4, r1
 80112f0:	4605      	mov	r5, r0
 80112f2:	f7fd f8e7 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80112f6:	2202      	movs	r2, #2
 80112f8:	18a1      	adds	r1, r4, r2
 80112fa:	4680      	mov	r8, r0
 80112fc:	4628      	mov	r0, r5
 80112fe:	f7fd f8e1 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8011302:	7921      	ldrb	r1, [r4, #4]
 8011304:	4607      	mov	r7, r0
 8011306:	4628      	mov	r0, r5
 8011308:	f7f9 f8f6 	bl	800a4f8 <ucdr_serialize_uint8_t>
 801130c:	7961      	ldrb	r1, [r4, #5]
 801130e:	4606      	mov	r6, r0
 8011310:	4628      	mov	r0, r5
 8011312:	f7f9 f8f1 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8011316:	ea08 0807 	and.w	r8, r8, r7
 801131a:	ea06 0608 	and.w	r6, r6, r8
 801131e:	4006      	ands	r6, r0
 8011320:	7a21      	ldrb	r1, [r4, #8]
 8011322:	4628      	mov	r0, r5
 8011324:	f7f9 f8ba 	bl	800a49c <ucdr_serialize_bool>
 8011328:	7a23      	ldrb	r3, [r4, #8]
 801132a:	b2f7      	uxtb	r7, r6
 801132c:	4606      	mov	r6, r0
 801132e:	b96b      	cbnz	r3, 801134c <uxr_serialize_INFO_Payload+0x64>
 8011330:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011334:	4628      	mov	r0, r5
 8011336:	f7f9 f8b1 	bl	800a49c <ucdr_serialize_bool>
 801133a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801133e:	4030      	ands	r0, r6
 8011340:	b2c6      	uxtb	r6, r0
 8011342:	b983      	cbnz	r3, 8011366 <uxr_serialize_INFO_Payload+0x7e>
 8011344:	ea06 0007 	and.w	r0, r6, r7
 8011348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801134c:	7b21      	ldrb	r1, [r4, #12]
 801134e:	4628      	mov	r0, r5
 8011350:	f7f9 f8d2 	bl	800a4f8 <ucdr_serialize_uint8_t>
 8011354:	b188      	cbz	r0, 801137a <uxr_serialize_INFO_Payload+0x92>
 8011356:	f104 010c 	add.w	r1, r4, #12
 801135a:	4628      	mov	r0, r5
 801135c:	f7ff fa06 	bl	801076c <uxr_serialize_ObjectVariant.part.0>
 8011360:	4030      	ands	r0, r6
 8011362:	b2c6      	uxtb	r6, r0
 8011364:	e7e4      	b.n	8011330 <uxr_serialize_INFO_Payload+0x48>
 8011366:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801136a:	4628      	mov	r0, r5
 801136c:	f7ff fdb2 	bl	8010ed4 <uxr_serialize_ActivityInfoVariant>
 8011370:	4006      	ands	r6, r0
 8011372:	ea06 0007 	and.w	r0, r6, r7
 8011376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801137a:	4606      	mov	r6, r0
 801137c:	e7d8      	b.n	8011330 <uxr_serialize_INFO_Payload+0x48>
 801137e:	bf00      	nop

08011380 <uxr_serialize_READ_DATA_Payload>:
 8011380:	b570      	push	{r4, r5, r6, lr}
 8011382:	2202      	movs	r2, #2
 8011384:	4605      	mov	r5, r0
 8011386:	460e      	mov	r6, r1
 8011388:	f7fd f89c 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 801138c:	2202      	movs	r2, #2
 801138e:	18b1      	adds	r1, r6, r2
 8011390:	4604      	mov	r4, r0
 8011392:	4628      	mov	r0, r5
 8011394:	f7fd f896 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 8011398:	1d31      	adds	r1, r6, #4
 801139a:	4004      	ands	r4, r0
 801139c:	4628      	mov	r0, r5
 801139e:	f7ff fe5d 	bl	801105c <uxr_serialize_ReadSpecification>
 80113a2:	b2e4      	uxtb	r4, r4
 80113a4:	4020      	ands	r0, r4
 80113a6:	bd70      	pop	{r4, r5, r6, pc}

080113a8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	2202      	movs	r2, #2
 80113ac:	4605      	mov	r5, r0
 80113ae:	460e      	mov	r6, r1
 80113b0:	f7fd f888 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80113b4:	2202      	movs	r2, #2
 80113b6:	4604      	mov	r4, r0
 80113b8:	18b1      	adds	r1, r6, r2
 80113ba:	4628      	mov	r0, r5
 80113bc:	f7fd f882 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80113c0:	4020      	ands	r0, r4
 80113c2:	b2c0      	uxtb	r0, r0
 80113c4:	bd70      	pop	{r4, r5, r6, pc}
 80113c6:	bf00      	nop

080113c8 <uxr_serialize_ACKNACK_Payload>:
 80113c8:	b570      	push	{r4, r5, r6, lr}
 80113ca:	460c      	mov	r4, r1
 80113cc:	460e      	mov	r6, r1
 80113ce:	f834 1b02 	ldrh.w	r1, [r4], #2
 80113d2:	4605      	mov	r5, r0
 80113d4:	f7f9 f8bc 	bl	800a550 <ucdr_serialize_uint16_t>
 80113d8:	2202      	movs	r2, #2
 80113da:	4621      	mov	r1, r4
 80113dc:	4604      	mov	r4, r0
 80113de:	4628      	mov	r0, r5
 80113e0:	f7fd f870 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80113e4:	7931      	ldrb	r1, [r6, #4]
 80113e6:	4004      	ands	r4, r0
 80113e8:	4628      	mov	r0, r5
 80113ea:	f7f9 f885 	bl	800a4f8 <ucdr_serialize_uint8_t>
 80113ee:	b2e4      	uxtb	r4, r4
 80113f0:	4020      	ands	r0, r4
 80113f2:	bd70      	pop	{r4, r5, r6, pc}

080113f4 <uxr_deserialize_ACKNACK_Payload>:
 80113f4:	b570      	push	{r4, r5, r6, lr}
 80113f6:	4605      	mov	r5, r0
 80113f8:	460e      	mov	r6, r1
 80113fa:	f7f9 f9a9 	bl	800a750 <ucdr_deserialize_uint16_t>
 80113fe:	2202      	movs	r2, #2
 8011400:	18b1      	adds	r1, r6, r2
 8011402:	4604      	mov	r4, r0
 8011404:	4628      	mov	r0, r5
 8011406:	f7fd f8c1 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 801140a:	1d31      	adds	r1, r6, #4
 801140c:	4004      	ands	r4, r0
 801140e:	4628      	mov	r0, r5
 8011410:	f7f9 f888 	bl	800a524 <ucdr_deserialize_uint8_t>
 8011414:	b2e4      	uxtb	r4, r4
 8011416:	4020      	ands	r0, r4
 8011418:	bd70      	pop	{r4, r5, r6, pc}
 801141a:	bf00      	nop

0801141c <uxr_serialize_HEARTBEAT_Payload>:
 801141c:	b570      	push	{r4, r5, r6, lr}
 801141e:	460d      	mov	r5, r1
 8011420:	8809      	ldrh	r1, [r1, #0]
 8011422:	4606      	mov	r6, r0
 8011424:	f7f9 f894 	bl	800a550 <ucdr_serialize_uint16_t>
 8011428:	8869      	ldrh	r1, [r5, #2]
 801142a:	4604      	mov	r4, r0
 801142c:	4630      	mov	r0, r6
 801142e:	f7f9 f88f 	bl	800a550 <ucdr_serialize_uint16_t>
 8011432:	7929      	ldrb	r1, [r5, #4]
 8011434:	4004      	ands	r4, r0
 8011436:	4630      	mov	r0, r6
 8011438:	f7f9 f85e 	bl	800a4f8 <ucdr_serialize_uint8_t>
 801143c:	b2e4      	uxtb	r4, r4
 801143e:	4020      	ands	r0, r4
 8011440:	bd70      	pop	{r4, r5, r6, pc}
 8011442:	bf00      	nop

08011444 <uxr_deserialize_HEARTBEAT_Payload>:
 8011444:	b570      	push	{r4, r5, r6, lr}
 8011446:	4605      	mov	r5, r0
 8011448:	460e      	mov	r6, r1
 801144a:	f7f9 f981 	bl	800a750 <ucdr_deserialize_uint16_t>
 801144e:	1cb1      	adds	r1, r6, #2
 8011450:	4604      	mov	r4, r0
 8011452:	4628      	mov	r0, r5
 8011454:	f7f9 f97c 	bl	800a750 <ucdr_deserialize_uint16_t>
 8011458:	1d31      	adds	r1, r6, #4
 801145a:	4004      	ands	r4, r0
 801145c:	4628      	mov	r0, r5
 801145e:	f7f9 f861 	bl	800a524 <ucdr_deserialize_uint8_t>
 8011462:	b2e4      	uxtb	r4, r4
 8011464:	4020      	ands	r0, r4
 8011466:	bd70      	pop	{r4, r5, r6, pc}

08011468 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801146c:	4605      	mov	r5, r0
 801146e:	460e      	mov	r6, r1
 8011470:	f7f9 ff0a 	bl	800b288 <ucdr_deserialize_int32_t>
 8011474:	1d31      	adds	r1, r6, #4
 8011476:	4607      	mov	r7, r0
 8011478:	4628      	mov	r0, r5
 801147a:	f7f9 fb83 	bl	800ab84 <ucdr_deserialize_uint32_t>
 801147e:	f106 0108 	add.w	r1, r6, #8
 8011482:	4680      	mov	r8, r0
 8011484:	4628      	mov	r0, r5
 8011486:	f7f9 feff 	bl	800b288 <ucdr_deserialize_int32_t>
 801148a:	f106 010c 	add.w	r1, r6, #12
 801148e:	4604      	mov	r4, r0
 8011490:	4628      	mov	r0, r5
 8011492:	f7f9 fb77 	bl	800ab84 <ucdr_deserialize_uint32_t>
 8011496:	ea07 0708 	and.w	r7, r7, r8
 801149a:	403c      	ands	r4, r7
 801149c:	f106 0110 	add.w	r1, r6, #16
 80114a0:	4004      	ands	r4, r0
 80114a2:	4628      	mov	r0, r5
 80114a4:	f7f9 fef0 	bl	800b288 <ucdr_deserialize_int32_t>
 80114a8:	f106 0114 	add.w	r1, r6, #20
 80114ac:	4607      	mov	r7, r0
 80114ae:	4628      	mov	r0, r5
 80114b0:	f7f9 fb68 	bl	800ab84 <ucdr_deserialize_uint32_t>
 80114b4:	b2e4      	uxtb	r4, r4
 80114b6:	403c      	ands	r4, r7
 80114b8:	4020      	ands	r0, r4
 80114ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114be:	bf00      	nop

080114c0 <uxr_serialize_SampleIdentity>:
 80114c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114c4:	220c      	movs	r2, #12
 80114c6:	4604      	mov	r4, r0
 80114c8:	460d      	mov	r5, r1
 80114ca:	f7fc fffb 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80114ce:	2203      	movs	r2, #3
 80114d0:	f105 010c 	add.w	r1, r5, #12
 80114d4:	4607      	mov	r7, r0
 80114d6:	4620      	mov	r0, r4
 80114d8:	f7fc fff4 	bl	800e4c4 <ucdr_serialize_array_uint8_t>
 80114dc:	7be9      	ldrb	r1, [r5, #15]
 80114de:	4680      	mov	r8, r0
 80114e0:	4620      	mov	r0, r4
 80114e2:	f7f9 f809 	bl	800a4f8 <ucdr_serialize_uint8_t>
 80114e6:	6929      	ldr	r1, [r5, #16]
 80114e8:	4606      	mov	r6, r0
 80114ea:	4620      	mov	r0, r4
 80114ec:	f7f9 fe34 	bl	800b158 <ucdr_serialize_int32_t>
 80114f0:	6969      	ldr	r1, [r5, #20]
 80114f2:	4603      	mov	r3, r0
 80114f4:	4620      	mov	r0, r4
 80114f6:	ea07 0708 	and.w	r7, r7, r8
 80114fa:	461c      	mov	r4, r3
 80114fc:	f7f9 fa12 	bl	800a924 <ucdr_serialize_uint32_t>
 8011500:	403e      	ands	r6, r7
 8011502:	4034      	ands	r4, r6
 8011504:	4020      	ands	r0, r4
 8011506:	b2c0      	uxtb	r0, r0
 8011508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801150c <uxr_deserialize_SampleIdentity>:
 801150c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011510:	220c      	movs	r2, #12
 8011512:	4604      	mov	r4, r0
 8011514:	460d      	mov	r5, r1
 8011516:	f7fd f839 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 801151a:	2203      	movs	r2, #3
 801151c:	f105 010c 	add.w	r1, r5, #12
 8011520:	4607      	mov	r7, r0
 8011522:	4620      	mov	r0, r4
 8011524:	f7fd f832 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 8011528:	f105 010f 	add.w	r1, r5, #15
 801152c:	4680      	mov	r8, r0
 801152e:	4620      	mov	r0, r4
 8011530:	f7f8 fff8 	bl	800a524 <ucdr_deserialize_uint8_t>
 8011534:	f105 0110 	add.w	r1, r5, #16
 8011538:	4606      	mov	r6, r0
 801153a:	4620      	mov	r0, r4
 801153c:	f7f9 fea4 	bl	800b288 <ucdr_deserialize_int32_t>
 8011540:	f105 0114 	add.w	r1, r5, #20
 8011544:	4603      	mov	r3, r0
 8011546:	4620      	mov	r0, r4
 8011548:	ea07 0708 	and.w	r7, r7, r8
 801154c:	461c      	mov	r4, r3
 801154e:	f7f9 fb19 	bl	800ab84 <ucdr_deserialize_uint32_t>
 8011552:	403e      	ands	r6, r7
 8011554:	4034      	ands	r4, r6
 8011556:	4020      	ands	r0, r4
 8011558:	b2c0      	uxtb	r0, r0
 801155a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801155e:	bf00      	nop

08011560 <nav_msgs__msg__Odometry__init>:
 8011560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011564:	4605      	mov	r5, r0
 8011566:	b3c0      	cbz	r0, 80115da <nav_msgs__msg__Odometry__init+0x7a>
 8011568:	f004 fd66 	bl	8016038 <std_msgs__msg__Header__init>
 801156c:	4604      	mov	r4, r0
 801156e:	b310      	cbz	r0, 80115b6 <nav_msgs__msg__Odometry__init+0x56>
 8011570:	f105 0614 	add.w	r6, r5, #20
 8011574:	4630      	mov	r0, r6
 8011576:	f004 fc97 	bl	8015ea8 <rosidl_runtime_c__String__init>
 801157a:	4604      	mov	r4, r0
 801157c:	2800      	cmp	r0, #0
 801157e:	d040      	beq.n	8011602 <nav_msgs__msg__Odometry__init+0xa2>
 8011580:	f105 0720 	add.w	r7, r5, #32
 8011584:	4638      	mov	r0, r7
 8011586:	f004 fd8d 	bl	80160a4 <geometry_msgs__msg__PoseWithCovariance__init>
 801158a:	4604      	mov	r4, r0
 801158c:	b348      	cbz	r0, 80115e2 <nav_msgs__msg__Odometry__init+0x82>
 801158e:	f505 78bc 	add.w	r8, r5, #376	@ 0x178
 8011592:	4640      	mov	r0, r8
 8011594:	f004 fdb2 	bl	80160fc <geometry_msgs__msg__TwistWithCovariance__init>
 8011598:	4604      	mov	r4, r0
 801159a:	b9d8      	cbnz	r0, 80115d4 <nav_msgs__msg__Odometry__init+0x74>
 801159c:	4628      	mov	r0, r5
 801159e:	f004 fd6f 	bl	8016080 <std_msgs__msg__Header__fini>
 80115a2:	4630      	mov	r0, r6
 80115a4:	f004 fc96 	bl	8015ed4 <rosidl_runtime_c__String__fini>
 80115a8:	4638      	mov	r0, r7
 80115aa:	f004 fd8d 	bl	80160c8 <geometry_msgs__msg__PoseWithCovariance__fini>
 80115ae:	4640      	mov	r0, r8
 80115b0:	f004 fdb6 	bl	8016120 <geometry_msgs__msg__TwistWithCovariance__fini>
 80115b4:	e00e      	b.n	80115d4 <nav_msgs__msg__Odometry__init+0x74>
 80115b6:	4628      	mov	r0, r5
 80115b8:	f004 fd62 	bl	8016080 <std_msgs__msg__Header__fini>
 80115bc:	f105 0014 	add.w	r0, r5, #20
 80115c0:	f004 fc88 	bl	8015ed4 <rosidl_runtime_c__String__fini>
 80115c4:	f105 0020 	add.w	r0, r5, #32
 80115c8:	f004 fd7e 	bl	80160c8 <geometry_msgs__msg__PoseWithCovariance__fini>
 80115cc:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 80115d0:	f004 fda6 	bl	8016120 <geometry_msgs__msg__TwistWithCovariance__fini>
 80115d4:	4620      	mov	r0, r4
 80115d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115da:	4604      	mov	r4, r0
 80115dc:	4620      	mov	r0, r4
 80115de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e2:	4628      	mov	r0, r5
 80115e4:	f004 fd4c 	bl	8016080 <std_msgs__msg__Header__fini>
 80115e8:	4630      	mov	r0, r6
 80115ea:	f004 fc73 	bl	8015ed4 <rosidl_runtime_c__String__fini>
 80115ee:	4638      	mov	r0, r7
 80115f0:	f004 fd6a 	bl	80160c8 <geometry_msgs__msg__PoseWithCovariance__fini>
 80115f4:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 80115f8:	f004 fd92 	bl	8016120 <geometry_msgs__msg__TwistWithCovariance__fini>
 80115fc:	4620      	mov	r0, r4
 80115fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011602:	4628      	mov	r0, r5
 8011604:	f004 fd3c 	bl	8016080 <std_msgs__msg__Header__fini>
 8011608:	4630      	mov	r0, r6
 801160a:	e7d9      	b.n	80115c0 <nav_msgs__msg__Odometry__init+0x60>

0801160c <nav_msgs__msg__Odometry__fini>:
 801160c:	b188      	cbz	r0, 8011632 <nav_msgs__msg__Odometry__fini+0x26>
 801160e:	b510      	push	{r4, lr}
 8011610:	4604      	mov	r4, r0
 8011612:	f004 fd35 	bl	8016080 <std_msgs__msg__Header__fini>
 8011616:	f104 0014 	add.w	r0, r4, #20
 801161a:	f004 fc5b 	bl	8015ed4 <rosidl_runtime_c__String__fini>
 801161e:	f104 0020 	add.w	r0, r4, #32
 8011622:	f004 fd51 	bl	80160c8 <geometry_msgs__msg__PoseWithCovariance__fini>
 8011626:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 801162a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801162e:	f004 bd77 	b.w	8016120 <geometry_msgs__msg__TwistWithCovariance__fini>
 8011632:	4770      	bx	lr

08011634 <rcl_client_get_rmw_handle>:
 8011634:	b118      	cbz	r0, 801163e <rcl_client_get_rmw_handle+0xa>
 8011636:	6800      	ldr	r0, [r0, #0]
 8011638:	b108      	cbz	r0, 801163e <rcl_client_get_rmw_handle+0xa>
 801163a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801163e:	4770      	bx	lr

08011640 <rcl_send_request>:
 8011640:	b570      	push	{r4, r5, r6, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	b1e8      	cbz	r0, 8011682 <rcl_send_request+0x42>
 8011646:	4604      	mov	r4, r0
 8011648:	6800      	ldr	r0, [r0, #0]
 801164a:	b1d0      	cbz	r0, 8011682 <rcl_send_request+0x42>
 801164c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011650:	b1bb      	cbz	r3, 8011682 <rcl_send_request+0x42>
 8011652:	460e      	mov	r6, r1
 8011654:	b1d1      	cbz	r1, 801168c <rcl_send_request+0x4c>
 8011656:	4615      	mov	r5, r2
 8011658:	b1c2      	cbz	r2, 801168c <rcl_send_request+0x4c>
 801165a:	2105      	movs	r1, #5
 801165c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011660:	f002 fd76 	bl	8014150 <__atomic_load_8>
 8011664:	6823      	ldr	r3, [r4, #0]
 8011666:	e9c5 0100 	strd	r0, r1, [r5]
 801166a:	462a      	mov	r2, r5
 801166c:	4631      	mov	r1, r6
 801166e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011672:	f003 ff21 	bl	80154b8 <rmw_send_request>
 8011676:	4606      	mov	r6, r0
 8011678:	b160      	cbz	r0, 8011694 <rcl_send_request+0x54>
 801167a:	2601      	movs	r6, #1
 801167c:	4630      	mov	r0, r6
 801167e:	b002      	add	sp, #8
 8011680:	bd70      	pop	{r4, r5, r6, pc}
 8011682:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011686:	4630      	mov	r0, r6
 8011688:	b002      	add	sp, #8
 801168a:	bd70      	pop	{r4, r5, r6, pc}
 801168c:	260b      	movs	r6, #11
 801168e:	4630      	mov	r0, r6
 8011690:	b002      	add	sp, #8
 8011692:	bd70      	pop	{r4, r5, r6, pc}
 8011694:	6820      	ldr	r0, [r4, #0]
 8011696:	2105      	movs	r1, #5
 8011698:	e9d5 2300 	ldrd	r2, r3, [r5]
 801169c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80116a0:	9100      	str	r1, [sp, #0]
 80116a2:	f002 fdc1 	bl	8014228 <__atomic_exchange_8>
 80116a6:	4630      	mov	r0, r6
 80116a8:	b002      	add	sp, #8
 80116aa:	bd70      	pop	{r4, r5, r6, pc}
 80116ac:	0000      	movs	r0, r0
	...

080116b0 <rcl_take_response>:
 80116b0:	b570      	push	{r4, r5, r6, lr}
 80116b2:	468e      	mov	lr, r1
 80116b4:	460c      	mov	r4, r1
 80116b6:	4616      	mov	r6, r2
 80116b8:	4605      	mov	r5, r0
 80116ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80116be:	b08c      	sub	sp, #48	@ 0x30
 80116c0:	f10d 0c18 	add.w	ip, sp, #24
 80116c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80116c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80116cc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80116d0:	b35d      	cbz	r5, 801172a <rcl_take_response+0x7a>
 80116d2:	682b      	ldr	r3, [r5, #0]
 80116d4:	b34b      	cbz	r3, 801172a <rcl_take_response+0x7a>
 80116d6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80116da:	b330      	cbz	r0, 801172a <rcl_take_response+0x7a>
 80116dc:	b346      	cbz	r6, 8011730 <rcl_take_response+0x80>
 80116de:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011738 <rcl_take_response+0x88>
 80116e2:	2300      	movs	r3, #0
 80116e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80116e8:	4632      	mov	r2, r6
 80116ea:	f10d 0307 	add.w	r3, sp, #7
 80116ee:	a902      	add	r1, sp, #8
 80116f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80116f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80116f8:	f003 ffe6 	bl	80156c8 <rmw_take_response>
 80116fc:	4605      	mov	r5, r0
 80116fe:	b9c8      	cbnz	r0, 8011734 <rcl_take_response+0x84>
 8011700:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011704:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011708:	2a00      	cmp	r2, #0
 801170a:	bf08      	it	eq
 801170c:	461d      	moveq	r5, r3
 801170e:	f10d 0e18 	add.w	lr, sp, #24
 8011712:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011716:	46a4      	mov	ip, r4
 8011718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801171c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011720:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011724:	4628      	mov	r0, r5
 8011726:	b00c      	add	sp, #48	@ 0x30
 8011728:	bd70      	pop	{r4, r5, r6, pc}
 801172a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801172e:	e7ee      	b.n	801170e <rcl_take_response+0x5e>
 8011730:	250b      	movs	r5, #11
 8011732:	e7ec      	b.n	801170e <rcl_take_response+0x5e>
 8011734:	2501      	movs	r5, #1
 8011736:	e7ea      	b.n	801170e <rcl_take_response+0x5e>
	...

08011740 <rcl_client_is_valid>:
 8011740:	b130      	cbz	r0, 8011750 <rcl_client_is_valid+0x10>
 8011742:	6800      	ldr	r0, [r0, #0]
 8011744:	b120      	cbz	r0, 8011750 <rcl_client_is_valid+0x10>
 8011746:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801174a:	3800      	subs	r0, #0
 801174c:	bf18      	it	ne
 801174e:	2001      	movne	r0, #1
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop

08011754 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011754:	280b      	cmp	r0, #11
 8011756:	dc0d      	bgt.n	8011774 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011758:	2800      	cmp	r0, #0
 801175a:	db09      	blt.n	8011770 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801175c:	280b      	cmp	r0, #11
 801175e:	d807      	bhi.n	8011770 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011760:	e8df f000 	tbb	[pc, r0]
 8011764:	07060607 	.word	0x07060607
 8011768:	06060606 	.word	0x06060606
 801176c:	07070606 	.word	0x07070606
 8011770:	2001      	movs	r0, #1
 8011772:	4770      	bx	lr
 8011774:	28cb      	cmp	r0, #203	@ 0xcb
 8011776:	bf18      	it	ne
 8011778:	2001      	movne	r0, #1
 801177a:	4770      	bx	lr

0801177c <rcl_get_zero_initialized_context>:
 801177c:	4a03      	ldr	r2, [pc, #12]	@ (801178c <rcl_get_zero_initialized_context+0x10>)
 801177e:	4603      	mov	r3, r0
 8011780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011784:	e883 0003 	stmia.w	r3, {r0, r1}
 8011788:	4618      	mov	r0, r3
 801178a:	4770      	bx	lr
 801178c:	0801a678 	.word	0x0801a678

08011790 <rcl_context_is_valid>:
 8011790:	b118      	cbz	r0, 801179a <rcl_context_is_valid+0xa>
 8011792:	6840      	ldr	r0, [r0, #4]
 8011794:	3800      	subs	r0, #0
 8011796:	bf18      	it	ne
 8011798:	2001      	movne	r0, #1
 801179a:	4770      	bx	lr

0801179c <__cleanup_context>:
 801179c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117a0:	4606      	mov	r6, r0
 80117a2:	6800      	ldr	r0, [r0, #0]
 80117a4:	2300      	movs	r3, #0
 80117a6:	6073      	str	r3, [r6, #4]
 80117a8:	2800      	cmp	r0, #0
 80117aa:	d049      	beq.n	8011840 <__cleanup_context+0xa4>
 80117ac:	6947      	ldr	r7, [r0, #20]
 80117ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80117b2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80117b6:	b137      	cbz	r7, 80117c6 <__cleanup_context+0x2a>
 80117b8:	3014      	adds	r0, #20
 80117ba:	f000 f9bb 	bl	8011b34 <rcl_init_options_fini>
 80117be:	4607      	mov	r7, r0
 80117c0:	2800      	cmp	r0, #0
 80117c2:	d144      	bne.n	801184e <__cleanup_context+0xb2>
 80117c4:	6830      	ldr	r0, [r6, #0]
 80117c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80117c8:	b143      	cbz	r3, 80117dc <__cleanup_context+0x40>
 80117ca:	3028      	adds	r0, #40	@ 0x28
 80117cc:	f003 fcbc 	bl	8015148 <rmw_context_fini>
 80117d0:	b118      	cbz	r0, 80117da <__cleanup_context+0x3e>
 80117d2:	2f00      	cmp	r7, #0
 80117d4:	d03e      	beq.n	8011854 <__cleanup_context+0xb8>
 80117d6:	f7fb fb5f 	bl	800ce98 <rcutils_reset_error>
 80117da:	6830      	ldr	r0, [r6, #0]
 80117dc:	6a03      	ldr	r3, [r0, #32]
 80117de:	b1db      	cbz	r3, 8011818 <__cleanup_context+0x7c>
 80117e0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80117e4:	2a01      	cmp	r2, #1
 80117e6:	f17c 0100 	sbcs.w	r1, ip, #0
 80117ea:	db11      	blt.n	8011810 <__cleanup_context+0x74>
 80117ec:	2400      	movs	r4, #0
 80117ee:	4625      	mov	r5, r4
 80117f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80117f4:	4649      	mov	r1, r9
 80117f6:	b1b8      	cbz	r0, 8011828 <__cleanup_context+0x8c>
 80117f8:	47c0      	blx	r8
 80117fa:	6833      	ldr	r3, [r6, #0]
 80117fc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011800:	3401      	adds	r4, #1
 8011802:	f145 0500 	adc.w	r5, r5, #0
 8011806:	4294      	cmp	r4, r2
 8011808:	eb75 010c 	sbcs.w	r1, r5, ip
 801180c:	6a1b      	ldr	r3, [r3, #32]
 801180e:	dbef      	blt.n	80117f0 <__cleanup_context+0x54>
 8011810:	4618      	mov	r0, r3
 8011812:	4649      	mov	r1, r9
 8011814:	47c0      	blx	r8
 8011816:	6830      	ldr	r0, [r6, #0]
 8011818:	4649      	mov	r1, r9
 801181a:	47c0      	blx	r8
 801181c:	2300      	movs	r3, #0
 801181e:	e9c6 3300 	strd	r3, r3, [r6]
 8011822:	4638      	mov	r0, r7
 8011824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011828:	3401      	adds	r4, #1
 801182a:	f145 0500 	adc.w	r5, r5, #0
 801182e:	4294      	cmp	r4, r2
 8011830:	eb75 010c 	sbcs.w	r1, r5, ip
 8011834:	dbdc      	blt.n	80117f0 <__cleanup_context+0x54>
 8011836:	4618      	mov	r0, r3
 8011838:	4649      	mov	r1, r9
 801183a:	47c0      	blx	r8
 801183c:	6830      	ldr	r0, [r6, #0]
 801183e:	e7eb      	b.n	8011818 <__cleanup_context+0x7c>
 8011840:	4607      	mov	r7, r0
 8011842:	2300      	movs	r3, #0
 8011844:	e9c6 3300 	strd	r3, r3, [r6]
 8011848:	4638      	mov	r0, r7
 801184a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801184e:	f7fb fb23 	bl	800ce98 <rcutils_reset_error>
 8011852:	e7b7      	b.n	80117c4 <__cleanup_context+0x28>
 8011854:	f7ff ff7e 	bl	8011754 <rcl_convert_rmw_ret_to_rcl_ret>
 8011858:	4607      	mov	r7, r0
 801185a:	e7bc      	b.n	80117d6 <__cleanup_context+0x3a>

0801185c <rcl_init>:
 801185c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011860:	1e05      	subs	r5, r0, #0
 8011862:	b09e      	sub	sp, #120	@ 0x78
 8011864:	460e      	mov	r6, r1
 8011866:	4690      	mov	r8, r2
 8011868:	461f      	mov	r7, r3
 801186a:	f340 809c 	ble.w	80119a6 <rcl_init+0x14a>
 801186e:	2900      	cmp	r1, #0
 8011870:	f000 809c 	beq.w	80119ac <rcl_init+0x150>
 8011874:	f1a1 0e04 	sub.w	lr, r1, #4
 8011878:	f04f 0c00 	mov.w	ip, #0
 801187c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011880:	f10c 0c01 	add.w	ip, ip, #1
 8011884:	2c00      	cmp	r4, #0
 8011886:	f000 8091 	beq.w	80119ac <rcl_init+0x150>
 801188a:	4565      	cmp	r5, ip
 801188c:	d1f6      	bne.n	801187c <rcl_init+0x20>
 801188e:	f1b8 0f00 	cmp.w	r8, #0
 8011892:	f000 808b 	beq.w	80119ac <rcl_init+0x150>
 8011896:	f8d8 4000 	ldr.w	r4, [r8]
 801189a:	2c00      	cmp	r4, #0
 801189c:	f000 8086 	beq.w	80119ac <rcl_init+0x150>
 80118a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118a2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80118a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118aa:	6823      	ldr	r3, [r4, #0]
 80118ac:	f8cc 3000 	str.w	r3, [ip]
 80118b0:	a819      	add	r0, sp, #100	@ 0x64
 80118b2:	f7fb facd 	bl	800ce50 <rcutils_allocator_is_valid>
 80118b6:	2800      	cmp	r0, #0
 80118b8:	d078      	beq.n	80119ac <rcl_init+0x150>
 80118ba:	2f00      	cmp	r7, #0
 80118bc:	d076      	beq.n	80119ac <rcl_init+0x150>
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d178      	bne.n	80119b6 <rcl_init+0x15a>
 80118c4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80118c8:	2178      	movs	r1, #120	@ 0x78
 80118ca:	2001      	movs	r0, #1
 80118cc:	4798      	blx	r3
 80118ce:	4604      	mov	r4, r0
 80118d0:	6038      	str	r0, [r7, #0]
 80118d2:	2800      	cmp	r0, #0
 80118d4:	f000 80b6 	beq.w	8011a44 <rcl_init+0x1e8>
 80118d8:	a802      	add	r0, sp, #8
 80118da:	f002 ff89 	bl	80147f0 <rmw_get_zero_initialized_context>
 80118de:	a902      	add	r1, sp, #8
 80118e0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80118e4:	2250      	movs	r2, #80	@ 0x50
 80118e6:	ac19      	add	r4, sp, #100	@ 0x64
 80118e8:	f007 fbef 	bl	80190ca <memcpy>
 80118ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118ee:	f8d7 e000 	ldr.w	lr, [r7]
 80118f2:	46f4      	mov	ip, lr
 80118f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118f8:	6823      	ldr	r3, [r4, #0]
 80118fa:	f8cc 3000 	str.w	r3, [ip]
 80118fe:	f10e 0114 	add.w	r1, lr, #20
 8011902:	4640      	mov	r0, r8
 8011904:	f000 f940 	bl	8011b88 <rcl_init_options_copy>
 8011908:	4604      	mov	r4, r0
 801190a:	2800      	cmp	r0, #0
 801190c:	d144      	bne.n	8011998 <rcl_init+0x13c>
 801190e:	f8d7 9000 	ldr.w	r9, [r7]
 8011912:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011916:	f8c9 0020 	str.w	r0, [r9, #32]
 801191a:	f8c9 5018 	str.w	r5, [r9, #24]
 801191e:	f8c9 801c 	str.w	r8, [r9, #28]
 8011922:	2d00      	cmp	r5, #0
 8011924:	d04e      	beq.n	80119c4 <rcl_init+0x168>
 8011926:	2e00      	cmp	r6, #0
 8011928:	d04c      	beq.n	80119c4 <rcl_init+0x168>
 801192a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801192e:	2104      	movs	r1, #4
 8011930:	4628      	mov	r0, r5
 8011932:	4798      	blx	r3
 8011934:	f8c9 0020 	str.w	r0, [r9, #32]
 8011938:	f8d7 9000 	ldr.w	r9, [r7]
 801193c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011940:	46ca      	mov	sl, r9
 8011942:	b343      	cbz	r3, 8011996 <rcl_init+0x13a>
 8011944:	2d01      	cmp	r5, #1
 8011946:	f178 0300 	sbcs.w	r3, r8, #0
 801194a:	db3b      	blt.n	80119c4 <rcl_init+0x168>
 801194c:	2400      	movs	r4, #0
 801194e:	3e04      	subs	r6, #4
 8011950:	46a1      	mov	r9, r4
 8011952:	e00b      	b.n	801196c <rcl_init+0x110>
 8011954:	6831      	ldr	r1, [r6, #0]
 8011956:	f007 fbb8 	bl	80190ca <memcpy>
 801195a:	3401      	adds	r4, #1
 801195c:	f149 0900 	adc.w	r9, r9, #0
 8011960:	45c8      	cmp	r8, r9
 8011962:	bf08      	it	eq
 8011964:	42a5      	cmpeq	r5, r4
 8011966:	d02b      	beq.n	80119c0 <rcl_init+0x164>
 8011968:	f8d7 a000 	ldr.w	sl, [r7]
 801196c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011970:	f7ee fc40 	bl	80001f4 <strlen>
 8011974:	1c42      	adds	r2, r0, #1
 8011976:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011978:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801197a:	f8da a020 	ldr.w	sl, [sl, #32]
 801197e:	9201      	str	r2, [sp, #4]
 8011980:	4610      	mov	r0, r2
 8011982:	4798      	blx	r3
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801198a:	6a1b      	ldr	r3, [r3, #32]
 801198c:	9a01      	ldr	r2, [sp, #4]
 801198e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011992:	2800      	cmp	r0, #0
 8011994:	d1de      	bne.n	8011954 <rcl_init+0xf8>
 8011996:	240a      	movs	r4, #10
 8011998:	4638      	mov	r0, r7
 801199a:	f7ff feff 	bl	801179c <__cleanup_context>
 801199e:	4620      	mov	r0, r4
 80119a0:	b01e      	add	sp, #120	@ 0x78
 80119a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a6:	2900      	cmp	r1, #0
 80119a8:	f43f af71 	beq.w	801188e <rcl_init+0x32>
 80119ac:	240b      	movs	r4, #11
 80119ae:	4620      	mov	r0, r4
 80119b0:	b01e      	add	sp, #120	@ 0x78
 80119b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119b6:	2464      	movs	r4, #100	@ 0x64
 80119b8:	4620      	mov	r0, r4
 80119ba:	b01e      	add	sp, #120	@ 0x78
 80119bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119c0:	f8d7 9000 	ldr.w	r9, [r7]
 80119c4:	4926      	ldr	r1, [pc, #152]	@ (8011a60 <rcl_init+0x204>)
 80119c6:	680b      	ldr	r3, [r1, #0]
 80119c8:	3301      	adds	r3, #1
 80119ca:	d036      	beq.n	8011a3a <rcl_init+0x1de>
 80119cc:	600b      	str	r3, [r1, #0]
 80119ce:	461a      	mov	r2, r3
 80119d0:	2400      	movs	r4, #0
 80119d2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80119d6:	607b      	str	r3, [r7, #4]
 80119d8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80119da:	3301      	adds	r3, #1
 80119dc:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80119e0:	d034      	beq.n	8011a4c <rcl_init+0x1f0>
 80119e2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80119e6:	b93b      	cbnz	r3, 80119f8 <rcl_init+0x19c>
 80119e8:	3030      	adds	r0, #48	@ 0x30
 80119ea:	f000 f939 	bl	8011c60 <rcl_get_localhost_only>
 80119ee:	4604      	mov	r4, r0
 80119f0:	2800      	cmp	r0, #0
 80119f2:	d1d1      	bne.n	8011998 <rcl_init+0x13c>
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	6958      	ldr	r0, [r3, #20]
 80119f8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80119fa:	aa18      	add	r2, sp, #96	@ 0x60
 80119fc:	a917      	add	r1, sp, #92	@ 0x5c
 80119fe:	f001 f841 	bl	8012a84 <rcl_validate_enclave_name>
 8011a02:	4604      	mov	r4, r0
 8011a04:	2800      	cmp	r0, #0
 8011a06:	d1c7      	bne.n	8011998 <rcl_init+0x13c>
 8011a08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011a0a:	b9eb      	cbnz	r3, 8011a48 <rcl_init+0x1ec>
 8011a0c:	6839      	ldr	r1, [r7, #0]
 8011a0e:	694b      	ldr	r3, [r1, #20]
 8011a10:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8011a12:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011a16:	f000 fc3d 	bl	8012294 <rcl_get_security_options_from_environment>
 8011a1a:	4604      	mov	r4, r0
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	d1bb      	bne.n	8011998 <rcl_init+0x13c>
 8011a20:	6839      	ldr	r1, [r7, #0]
 8011a22:	6948      	ldr	r0, [r1, #20]
 8011a24:	3128      	adds	r1, #40	@ 0x28
 8011a26:	3018      	adds	r0, #24
 8011a28:	f003 fa58 	bl	8014edc <rmw_init>
 8011a2c:	4604      	mov	r4, r0
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d0bd      	beq.n	80119ae <rcl_init+0x152>
 8011a32:	f7ff fe8f 	bl	8011754 <rcl_convert_rmw_ret_to_rcl_ret>
 8011a36:	4604      	mov	r4, r0
 8011a38:	e7ae      	b.n	8011998 <rcl_init+0x13c>
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	461c      	mov	r4, r3
 8011a3e:	600a      	str	r2, [r1, #0]
 8011a40:	4613      	mov	r3, r2
 8011a42:	e7c6      	b.n	80119d2 <rcl_init+0x176>
 8011a44:	240a      	movs	r4, #10
 8011a46:	e7b2      	b.n	80119ae <rcl_init+0x152>
 8011a48:	2401      	movs	r4, #1
 8011a4a:	e7a5      	b.n	8011998 <rcl_init+0x13c>
 8011a4c:	3024      	adds	r0, #36	@ 0x24
 8011a4e:	f005 ffff 	bl	8017a50 <rcl_get_default_domain_id>
 8011a52:	4604      	mov	r4, r0
 8011a54:	2800      	cmp	r0, #0
 8011a56:	d19f      	bne.n	8011998 <rcl_init+0x13c>
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	6958      	ldr	r0, [r3, #20]
 8011a5c:	e7c1      	b.n	80119e2 <rcl_init+0x186>
 8011a5e:	bf00      	nop
 8011a60:	2000e42c 	.word	0x2000e42c

08011a64 <rcl_get_zero_initialized_init_options>:
 8011a64:	2000      	movs	r0, #0
 8011a66:	4770      	bx	lr

08011a68 <rcl_init_options_init>:
 8011a68:	b084      	sub	sp, #16
 8011a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a6c:	b097      	sub	sp, #92	@ 0x5c
 8011a6e:	ae1d      	add	r6, sp, #116	@ 0x74
 8011a70:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8011a74:	2800      	cmp	r0, #0
 8011a76:	d058      	beq.n	8011b2a <rcl_init_options_init+0xc2>
 8011a78:	6803      	ldr	r3, [r0, #0]
 8011a7a:	4605      	mov	r5, r0
 8011a7c:	b133      	cbz	r3, 8011a8c <rcl_init_options_init+0x24>
 8011a7e:	2464      	movs	r4, #100	@ 0x64
 8011a80:	4620      	mov	r0, r4
 8011a82:	b017      	add	sp, #92	@ 0x5c
 8011a84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011a88:	b004      	add	sp, #16
 8011a8a:	4770      	bx	lr
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	f7fb f9df 	bl	800ce50 <rcutils_allocator_is_valid>
 8011a92:	2800      	cmp	r0, #0
 8011a94:	d049      	beq.n	8011b2a <rcl_init_options_init+0xc2>
 8011a96:	46b4      	mov	ip, r6
 8011a98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a9c:	ac11      	add	r4, sp, #68	@ 0x44
 8011a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011aa0:	f8dc 3000 	ldr.w	r3, [ip]
 8011aa4:	6023      	str	r3, [r4, #0]
 8011aa6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8011aa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011aaa:	2050      	movs	r0, #80	@ 0x50
 8011aac:	4798      	blx	r3
 8011aae:	4604      	mov	r4, r0
 8011ab0:	6028      	str	r0, [r5, #0]
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	d03b      	beq.n	8011b2e <rcl_init_options_init+0xc6>
 8011ab6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8011aba:	4686      	mov	lr, r0
 8011abc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ac0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011ac4:	f8dc 3000 	ldr.w	r3, [ip]
 8011ac8:	f8ce 3000 	str.w	r3, [lr]
 8011acc:	a802      	add	r0, sp, #8
 8011ace:	f002 fe9f 	bl	8014810 <rmw_get_zero_initialized_init_options>
 8011ad2:	f10d 0e08 	add.w	lr, sp, #8
 8011ad6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ada:	f104 0c18 	add.w	ip, r4, #24
 8011ade:	682f      	ldr	r7, [r5, #0]
 8011ae0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ae4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ae8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011aec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011af0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011af4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011af8:	ac20      	add	r4, sp, #128	@ 0x80
 8011afa:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011afe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011b02:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011b06:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8011b0a:	f107 0018 	add.w	r0, r7, #24
 8011b0e:	f003 f8ed 	bl	8014cec <rmw_init_options_init>
 8011b12:	4604      	mov	r4, r0
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d0b3      	beq.n	8011a80 <rcl_init_options_init+0x18>
 8011b18:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8011b1a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011b1c:	6828      	ldr	r0, [r5, #0]
 8011b1e:	4798      	blx	r3
 8011b20:	4620      	mov	r0, r4
 8011b22:	f7ff fe17 	bl	8011754 <rcl_convert_rmw_ret_to_rcl_ret>
 8011b26:	4604      	mov	r4, r0
 8011b28:	e7aa      	b.n	8011a80 <rcl_init_options_init+0x18>
 8011b2a:	240b      	movs	r4, #11
 8011b2c:	e7a8      	b.n	8011a80 <rcl_init_options_init+0x18>
 8011b2e:	240a      	movs	r4, #10
 8011b30:	e7a6      	b.n	8011a80 <rcl_init_options_init+0x18>
 8011b32:	bf00      	nop

08011b34 <rcl_init_options_fini>:
 8011b34:	b530      	push	{r4, r5, lr}
 8011b36:	b087      	sub	sp, #28
 8011b38:	b1f0      	cbz	r0, 8011b78 <rcl_init_options_fini+0x44>
 8011b3a:	6803      	ldr	r3, [r0, #0]
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	b1db      	cbz	r3, 8011b78 <rcl_init_options_fini+0x44>
 8011b40:	469c      	mov	ip, r3
 8011b42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011b46:	f10d 0e04 	add.w	lr, sp, #4
 8011b4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011b4e:	f8dc 3000 	ldr.w	r3, [ip]
 8011b52:	f8ce 3000 	str.w	r3, [lr]
 8011b56:	a801      	add	r0, sp, #4
 8011b58:	f7fb f97a 	bl	800ce50 <rcutils_allocator_is_valid>
 8011b5c:	b160      	cbz	r0, 8011b78 <rcl_init_options_fini+0x44>
 8011b5e:	6820      	ldr	r0, [r4, #0]
 8011b60:	3018      	adds	r0, #24
 8011b62:	f003 f973 	bl	8014e4c <rmw_init_options_fini>
 8011b66:	4605      	mov	r5, r0
 8011b68:	b950      	cbnz	r0, 8011b80 <rcl_init_options_fini+0x4c>
 8011b6a:	6820      	ldr	r0, [r4, #0]
 8011b6c:	9b02      	ldr	r3, [sp, #8]
 8011b6e:	9905      	ldr	r1, [sp, #20]
 8011b70:	4798      	blx	r3
 8011b72:	4628      	mov	r0, r5
 8011b74:	b007      	add	sp, #28
 8011b76:	bd30      	pop	{r4, r5, pc}
 8011b78:	250b      	movs	r5, #11
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	b007      	add	sp, #28
 8011b7e:	bd30      	pop	{r4, r5, pc}
 8011b80:	f7ff fde8 	bl	8011754 <rcl_convert_rmw_ret_to_rcl_ret>
 8011b84:	4605      	mov	r5, r0
 8011b86:	e7f8      	b.n	8011b7a <rcl_init_options_fini+0x46>

08011b88 <rcl_init_options_copy>:
 8011b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b8c:	b094      	sub	sp, #80	@ 0x50
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	d058      	beq.n	8011c44 <rcl_init_options_copy+0xbc>
 8011b92:	4604      	mov	r4, r0
 8011b94:	6800      	ldr	r0, [r0, #0]
 8011b96:	2800      	cmp	r0, #0
 8011b98:	d054      	beq.n	8011c44 <rcl_init_options_copy+0xbc>
 8011b9a:	460e      	mov	r6, r1
 8011b9c:	f7fb f958 	bl	800ce50 <rcutils_allocator_is_valid>
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	d04f      	beq.n	8011c44 <rcl_init_options_copy+0xbc>
 8011ba4:	2e00      	cmp	r6, #0
 8011ba6:	d04d      	beq.n	8011c44 <rcl_init_options_copy+0xbc>
 8011ba8:	6833      	ldr	r3, [r6, #0]
 8011baa:	b123      	cbz	r3, 8011bb6 <rcl_init_options_copy+0x2e>
 8011bac:	2464      	movs	r4, #100	@ 0x64
 8011bae:	4620      	mov	r0, r4
 8011bb0:	b014      	add	sp, #80	@ 0x50
 8011bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bb6:	6827      	ldr	r7, [r4, #0]
 8011bb8:	46bc      	mov	ip, r7
 8011bba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011bbe:	ad0f      	add	r5, sp, #60	@ 0x3c
 8011bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011bc2:	f8dc 3000 	ldr.w	r3, [ip]
 8011bc6:	f8d7 8000 	ldr.w	r8, [r7]
 8011bca:	602b      	str	r3, [r5, #0]
 8011bcc:	4619      	mov	r1, r3
 8011bce:	2050      	movs	r0, #80	@ 0x50
 8011bd0:	47c0      	blx	r8
 8011bd2:	4605      	mov	r5, r0
 8011bd4:	6030      	str	r0, [r6, #0]
 8011bd6:	b3d0      	cbz	r0, 8011c4e <rcl_init_options_copy+0xc6>
 8011bd8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8011bdc:	4686      	mov	lr, r0
 8011bde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011be2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011be6:	f8dc 3000 	ldr.w	r3, [ip]
 8011bea:	f8ce 3000 	str.w	r3, [lr]
 8011bee:	4668      	mov	r0, sp
 8011bf0:	f002 fe0e 	bl	8014810 <rmw_get_zero_initialized_init_options>
 8011bf4:	46ee      	mov	lr, sp
 8011bf6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011bfa:	f105 0c18 	add.w	ip, r5, #24
 8011bfe:	6824      	ldr	r4, [r4, #0]
 8011c00:	6835      	ldr	r5, [r6, #0]
 8011c02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c16:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011c1a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011c1e:	f104 0018 	add.w	r0, r4, #24
 8011c22:	f105 0118 	add.w	r1, r5, #24
 8011c26:	f003 f8c9 	bl	8014dbc <rmw_init_options_copy>
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d0be      	beq.n	8011bae <rcl_init_options_copy+0x26>
 8011c30:	f7fb f91c 	bl	800ce6c <rcutils_get_error_string>
 8011c34:	f7fb f930 	bl	800ce98 <rcutils_reset_error>
 8011c38:	4630      	mov	r0, r6
 8011c3a:	f7ff ff7b 	bl	8011b34 <rcl_init_options_fini>
 8011c3e:	b140      	cbz	r0, 8011c52 <rcl_init_options_copy+0xca>
 8011c40:	4604      	mov	r4, r0
 8011c42:	e7b4      	b.n	8011bae <rcl_init_options_copy+0x26>
 8011c44:	240b      	movs	r4, #11
 8011c46:	4620      	mov	r0, r4
 8011c48:	b014      	add	sp, #80	@ 0x50
 8011c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c4e:	240a      	movs	r4, #10
 8011c50:	e7ad      	b.n	8011bae <rcl_init_options_copy+0x26>
 8011c52:	4620      	mov	r0, r4
 8011c54:	b014      	add	sp, #80	@ 0x50
 8011c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5a:	f7ff bd7b 	b.w	8011754 <rcl_convert_rmw_ret_to_rcl_ret>
 8011c5e:	bf00      	nop

08011c60 <rcl_get_localhost_only>:
 8011c60:	b510      	push	{r4, lr}
 8011c62:	b082      	sub	sp, #8
 8011c64:	2300      	movs	r3, #0
 8011c66:	9301      	str	r3, [sp, #4]
 8011c68:	b1b8      	cbz	r0, 8011c9a <rcl_get_localhost_only+0x3a>
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	a901      	add	r1, sp, #4
 8011c6e:	480c      	ldr	r0, [pc, #48]	@ (8011ca0 <rcl_get_localhost_only+0x40>)
 8011c70:	f002 fb12 	bl	8014298 <rcutils_get_env>
 8011c74:	b110      	cbz	r0, 8011c7c <rcl_get_localhost_only+0x1c>
 8011c76:	2001      	movs	r0, #1
 8011c78:	b002      	add	sp, #8
 8011c7a:	bd10      	pop	{r4, pc}
 8011c7c:	9b01      	ldr	r3, [sp, #4]
 8011c7e:	b113      	cbz	r3, 8011c86 <rcl_get_localhost_only+0x26>
 8011c80:	781a      	ldrb	r2, [r3, #0]
 8011c82:	2a31      	cmp	r2, #49	@ 0x31
 8011c84:	d004      	beq.n	8011c90 <rcl_get_localhost_only+0x30>
 8011c86:	2302      	movs	r3, #2
 8011c88:	2000      	movs	r0, #0
 8011c8a:	7023      	strb	r3, [r4, #0]
 8011c8c:	b002      	add	sp, #8
 8011c8e:	bd10      	pop	{r4, pc}
 8011c90:	785b      	ldrb	r3, [r3, #1]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d1f7      	bne.n	8011c86 <rcl_get_localhost_only+0x26>
 8011c96:	2301      	movs	r3, #1
 8011c98:	e7f6      	b.n	8011c88 <rcl_get_localhost_only+0x28>
 8011c9a:	200b      	movs	r0, #11
 8011c9c:	b002      	add	sp, #8
 8011c9e:	bd10      	pop	{r4, pc}
 8011ca0:	0801a680 	.word	0x0801a680

08011ca4 <rcl_get_zero_initialized_node>:
 8011ca4:	4a03      	ldr	r2, [pc, #12]	@ (8011cb4 <rcl_get_zero_initialized_node+0x10>)
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cac:	e883 0003 	stmia.w	r3, {r0, r1}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	4770      	bx	lr
 8011cb4:	0801a6a8 	.word	0x0801a6a8

08011cb8 <rcl_node_init>:
 8011cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cbc:	b0a9      	sub	sp, #164	@ 0xa4
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8011cc4:	a823      	add	r0, sp, #140	@ 0x8c
 8011cc6:	460e      	mov	r6, r1
 8011cc8:	4615      	mov	r5, r2
 8011cca:	461f      	mov	r7, r3
 8011ccc:	f006 f8e8 	bl	8017ea0 <rcl_guard_condition_get_default_options>
 8011cd0:	f1b8 0f00 	cmp.w	r8, #0
 8011cd4:	f000 80e6 	beq.w	8011ea4 <rcl_node_init+0x1ec>
 8011cd8:	4640      	mov	r0, r8
 8011cda:	f7fb f8b9 	bl	800ce50 <rcutils_allocator_is_valid>
 8011cde:	2800      	cmp	r0, #0
 8011ce0:	f000 80e0 	beq.w	8011ea4 <rcl_node_init+0x1ec>
 8011ce4:	2e00      	cmp	r6, #0
 8011ce6:	f000 80dd 	beq.w	8011ea4 <rcl_node_init+0x1ec>
 8011cea:	2d00      	cmp	r5, #0
 8011cec:	f000 80da 	beq.w	8011ea4 <rcl_node_init+0x1ec>
 8011cf0:	2c00      	cmp	r4, #0
 8011cf2:	f000 80d7 	beq.w	8011ea4 <rcl_node_init+0x1ec>
 8011cf6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011cfa:	f1b9 0f00 	cmp.w	r9, #0
 8011cfe:	f040 80fd 	bne.w	8011efc <rcl_node_init+0x244>
 8011d02:	2f00      	cmp	r7, #0
 8011d04:	f000 80ce 	beq.w	8011ea4 <rcl_node_init+0x1ec>
 8011d08:	4638      	mov	r0, r7
 8011d0a:	f7ff fd41 	bl	8011790 <rcl_context_is_valid>
 8011d0e:	4682      	mov	sl, r0
 8011d10:	2800      	cmp	r0, #0
 8011d12:	f000 80cd 	beq.w	8011eb0 <rcl_node_init+0x1f8>
 8011d16:	464a      	mov	r2, r9
 8011d18:	a922      	add	r1, sp, #136	@ 0x88
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8011d20:	f002 ff18 	bl	8014b54 <rmw_validate_node_name>
 8011d24:	4681      	mov	r9, r0
 8011d26:	2800      	cmp	r0, #0
 8011d28:	f040 80be 	bne.w	8011ea8 <rcl_node_init+0x1f0>
 8011d2c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	f040 80f0 	bne.w	8011f14 <rcl_node_init+0x25c>
 8011d34:	4628      	mov	r0, r5
 8011d36:	f7ee fa5d 	bl	80001f4 <strlen>
 8011d3a:	2800      	cmp	r0, #0
 8011d3c:	f040 80bb 	bne.w	8011eb6 <rcl_node_init+0x1fe>
 8011d40:	4d7c      	ldr	r5, [pc, #496]	@ (8011f34 <rcl_node_init+0x27c>)
 8011d42:	a922      	add	r1, sp, #136	@ 0x88
 8011d44:	2200      	movs	r2, #0
 8011d46:	4628      	mov	r0, r5
 8011d48:	f002 fee6 	bl	8014b18 <rmw_validate_namespace>
 8011d4c:	4681      	mov	r9, r0
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	f040 80aa 	bne.w	8011ea8 <rcl_node_init+0x1f0>
 8011d54:	4682      	mov	sl, r0
 8011d56:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	f040 80e0 	bne.w	8011f1e <rcl_node_init+0x266>
 8011d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8011d62:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011d66:	2078      	movs	r0, #120	@ 0x78
 8011d68:	4798      	blx	r3
 8011d6a:	4681      	mov	r9, r0
 8011d6c:	6060      	str	r0, [r4, #4]
 8011d6e:	2800      	cmp	r0, #0
 8011d70:	f000 80ca 	beq.w	8011f08 <rcl_node_init+0x250>
 8011d74:	2200      	movs	r2, #0
 8011d76:	2300      	movs	r3, #0
 8011d78:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8011d7c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8011d80:	a808      	add	r0, sp, #32
 8011d82:	f000 f907 	bl	8011f94 <rcl_node_get_default_options>
 8011d86:	a908      	add	r1, sp, #32
 8011d88:	4648      	mov	r0, r9
 8011d8a:	2268      	movs	r2, #104	@ 0x68
 8011d8c:	f007 f99d 	bl	80190ca <memcpy>
 8011d90:	6861      	ldr	r1, [r4, #4]
 8011d92:	6027      	str	r7, [r4, #0]
 8011d94:	4640      	mov	r0, r8
 8011d96:	f000 f90b 	bl	8011fb0 <rcl_node_options_copy>
 8011d9a:	2800      	cmp	r0, #0
 8011d9c:	d158      	bne.n	8011e50 <rcl_node_init+0x198>
 8011d9e:	4628      	mov	r0, r5
 8011da0:	f7ee fa28 	bl	80001f4 <strlen>
 8011da4:	4428      	add	r0, r5
 8011da6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8011daa:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8011dae:	2b2f      	cmp	r3, #47	@ 0x2f
 8011db0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011db4:	9300      	str	r3, [sp, #0]
 8011db6:	bf0c      	ite	eq
 8011db8:	4b5f      	ldreq	r3, [pc, #380]	@ (8011f38 <rcl_node_init+0x280>)
 8011dba:	4b60      	ldrne	r3, [pc, #384]	@ (8011f3c <rcl_node_init+0x284>)
 8011dbc:	9302      	str	r3, [sp, #8]
 8011dbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011dc2:	9301      	str	r3, [sp, #4]
 8011dc4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011dc8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011dcc:	f002 fa8c 	bl	80142e8 <rcutils_format_string_limit>
 8011dd0:	6823      	ldr	r3, [r4, #0]
 8011dd2:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8011dd6:	6818      	ldr	r0, [r3, #0]
 8011dd8:	4631      	mov	r1, r6
 8011dda:	3028      	adds	r0, #40	@ 0x28
 8011ddc:	462a      	mov	r2, r5
 8011dde:	6866      	ldr	r6, [r4, #4]
 8011de0:	f003 fad0 	bl	8015384 <rmw_create_node>
 8011de4:	6863      	ldr	r3, [r4, #4]
 8011de6:	66b0      	str	r0, [r6, #104]	@ 0x68
 8011de8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011dea:	2800      	cmp	r0, #0
 8011dec:	d032      	beq.n	8011e54 <rcl_node_init+0x19c>
 8011dee:	f003 fb5d 	bl	80154ac <rmw_node_get_graph_guard_condition>
 8011df2:	4681      	mov	r9, r0
 8011df4:	b360      	cbz	r0, 8011e50 <rcl_node_init+0x198>
 8011df6:	f8d8 3000 	ldr.w	r3, [r8]
 8011dfa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011dfe:	6866      	ldr	r6, [r4, #4]
 8011e00:	2008      	movs	r0, #8
 8011e02:	4798      	blx	r3
 8011e04:	6863      	ldr	r3, [r4, #4]
 8011e06:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8011e08:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8011e0c:	f1bb 0f00 	cmp.w	fp, #0
 8011e10:	d020      	beq.n	8011e54 <rcl_node_init+0x19c>
 8011e12:	a806      	add	r0, sp, #24
 8011e14:	f005 ffb4 	bl	8017d80 <rcl_get_zero_initialized_guard_condition>
 8011e18:	a806      	add	r0, sp, #24
 8011e1a:	c803      	ldmia	r0, {r0, r1}
 8011e1c:	6863      	ldr	r3, [r4, #4]
 8011e1e:	46c4      	mov	ip, r8
 8011e20:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8011e24:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011e28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011e2c:	ae23      	add	r6, sp, #140	@ 0x8c
 8011e2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011e30:	f8dc 3000 	ldr.w	r3, [ip]
 8011e34:	6033      	str	r3, [r6, #0]
 8011e36:	ab28      	add	r3, sp, #160	@ 0xa0
 8011e38:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8011e3c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011e40:	4649      	mov	r1, r9
 8011e42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e44:	463a      	mov	r2, r7
 8011e46:	4670      	mov	r0, lr
 8011e48:	f005 ffa4 	bl	8017d94 <rcl_guard_condition_init_from_rmw>
 8011e4c:	4681      	mov	r9, r0
 8011e4e:	b328      	cbz	r0, 8011e9c <rcl_node_init+0x1e4>
 8011e50:	6863      	ldr	r3, [r4, #4]
 8011e52:	b1f3      	cbz	r3, 8011e92 <rcl_node_init+0x1da>
 8011e54:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8011e56:	b128      	cbz	r0, 8011e64 <rcl_node_init+0x1ac>
 8011e58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011e5c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011e60:	4798      	blx	r3
 8011e62:	6863      	ldr	r3, [r4, #4]
 8011e64:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011e66:	b110      	cbz	r0, 8011e6e <rcl_node_init+0x1b6>
 8011e68:	f003 faa4 	bl	80153b4 <rmw_destroy_node>
 8011e6c:	6863      	ldr	r3, [r4, #4]
 8011e6e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011e70:	b148      	cbz	r0, 8011e86 <rcl_node_init+0x1ce>
 8011e72:	f005 ffef 	bl	8017e54 <rcl_guard_condition_fini>
 8011e76:	6863      	ldr	r3, [r4, #4]
 8011e78:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011e7c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011e7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011e82:	4798      	blx	r3
 8011e84:	6863      	ldr	r3, [r4, #4]
 8011e86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011e90:	4798      	blx	r3
 8011e92:	2300      	movs	r3, #0
 8011e94:	e9c4 3300 	strd	r3, r3, [r4]
 8011e98:	f04f 0901 	mov.w	r9, #1
 8011e9c:	f1ba 0f00 	cmp.w	sl, #0
 8011ea0:	d125      	bne.n	8011eee <rcl_node_init+0x236>
 8011ea2:	e001      	b.n	8011ea8 <rcl_node_init+0x1f0>
 8011ea4:	f04f 090b 	mov.w	r9, #11
 8011ea8:	4648      	mov	r0, r9
 8011eaa:	b029      	add	sp, #164	@ 0xa4
 8011eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb0:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8011eb4:	e7f8      	b.n	8011ea8 <rcl_node_init+0x1f0>
 8011eb6:	782b      	ldrb	r3, [r5, #0]
 8011eb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8011eba:	f43f af42 	beq.w	8011d42 <rcl_node_init+0x8a>
 8011ebe:	9503      	str	r5, [sp, #12]
 8011ec0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011ec4:	9300      	str	r3, [sp, #0]
 8011ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8011f40 <rcl_node_init+0x288>)
 8011ec8:	9302      	str	r3, [sp, #8]
 8011eca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011ece:	9301      	str	r3, [sp, #4]
 8011ed0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011ed4:	f002 fa08 	bl	80142e8 <rcutils_format_string_limit>
 8011ed8:	4605      	mov	r5, r0
 8011eda:	b340      	cbz	r0, 8011f2e <rcl_node_init+0x276>
 8011edc:	2200      	movs	r2, #0
 8011ede:	a922      	add	r1, sp, #136	@ 0x88
 8011ee0:	9222      	str	r2, [sp, #136]	@ 0x88
 8011ee2:	f002 fe19 	bl	8014b18 <rmw_validate_namespace>
 8011ee6:	4681      	mov	r9, r0
 8011ee8:	2800      	cmp	r0, #0
 8011eea:	f43f af34 	beq.w	8011d56 <rcl_node_init+0x9e>
 8011eee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011ef2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	4798      	blx	r3
 8011efa:	e7d5      	b.n	8011ea8 <rcl_node_init+0x1f0>
 8011efc:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8011f00:	4648      	mov	r0, r9
 8011f02:	b029      	add	sp, #164	@ 0xa4
 8011f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f08:	f04f 090a 	mov.w	r9, #10
 8011f0c:	f1ba 0f00 	cmp.w	sl, #0
 8011f10:	d1ed      	bne.n	8011eee <rcl_node_init+0x236>
 8011f12:	e7c9      	b.n	8011ea8 <rcl_node_init+0x1f0>
 8011f14:	f002 fe70 	bl	8014bf8 <rmw_node_name_validation_result_string>
 8011f18:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8011f1c:	e7c4      	b.n	8011ea8 <rcl_node_init+0x1f0>
 8011f1e:	f002 fe0d 	bl	8014b3c <rmw_namespace_validation_result_string>
 8011f22:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8011f26:	f1ba 0f00 	cmp.w	sl, #0
 8011f2a:	d1e0      	bne.n	8011eee <rcl_node_init+0x236>
 8011f2c:	e7bc      	b.n	8011ea8 <rcl_node_init+0x1f0>
 8011f2e:	f04f 090a 	mov.w	r9, #10
 8011f32:	e7b9      	b.n	8011ea8 <rcl_node_init+0x1f0>
 8011f34:	0801a698 	.word	0x0801a698
 8011f38:	0801a35c 	.word	0x0801a35c
 8011f3c:	0801a6a0 	.word	0x0801a6a0
 8011f40:	0801a69c 	.word	0x0801a69c

08011f44 <rcl_node_is_valid>:
 8011f44:	b130      	cbz	r0, 8011f54 <rcl_node_is_valid+0x10>
 8011f46:	6843      	ldr	r3, [r0, #4]
 8011f48:	b123      	cbz	r3, 8011f54 <rcl_node_is_valid+0x10>
 8011f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011f4c:	b113      	cbz	r3, 8011f54 <rcl_node_is_valid+0x10>
 8011f4e:	6800      	ldr	r0, [r0, #0]
 8011f50:	f7ff bc1e 	b.w	8011790 <rcl_context_is_valid>
 8011f54:	2000      	movs	r0, #0
 8011f56:	4770      	bx	lr

08011f58 <rcl_node_get_name>:
 8011f58:	b120      	cbz	r0, 8011f64 <rcl_node_get_name+0xc>
 8011f5a:	6840      	ldr	r0, [r0, #4]
 8011f5c:	b110      	cbz	r0, 8011f64 <rcl_node_get_name+0xc>
 8011f5e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011f60:	b100      	cbz	r0, 8011f64 <rcl_node_get_name+0xc>
 8011f62:	6880      	ldr	r0, [r0, #8]
 8011f64:	4770      	bx	lr
 8011f66:	bf00      	nop

08011f68 <rcl_node_get_namespace>:
 8011f68:	b120      	cbz	r0, 8011f74 <rcl_node_get_namespace+0xc>
 8011f6a:	6840      	ldr	r0, [r0, #4]
 8011f6c:	b110      	cbz	r0, 8011f74 <rcl_node_get_namespace+0xc>
 8011f6e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011f70:	b100      	cbz	r0, 8011f74 <rcl_node_get_namespace+0xc>
 8011f72:	68c0      	ldr	r0, [r0, #12]
 8011f74:	4770      	bx	lr
 8011f76:	bf00      	nop

08011f78 <rcl_node_get_options>:
 8011f78:	b128      	cbz	r0, 8011f86 <rcl_node_get_options+0xe>
 8011f7a:	6840      	ldr	r0, [r0, #4]
 8011f7c:	b118      	cbz	r0, 8011f86 <rcl_node_get_options+0xe>
 8011f7e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	bf08      	it	eq
 8011f84:	2000      	moveq	r0, #0
 8011f86:	4770      	bx	lr

08011f88 <rcl_node_get_rmw_handle>:
 8011f88:	b110      	cbz	r0, 8011f90 <rcl_node_get_rmw_handle+0x8>
 8011f8a:	6840      	ldr	r0, [r0, #4]
 8011f8c:	b100      	cbz	r0, 8011f90 <rcl_node_get_rmw_handle+0x8>
 8011f8e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011f90:	4770      	bx	lr
 8011f92:	bf00      	nop

08011f94 <rcl_node_get_default_options>:
 8011f94:	b510      	push	{r4, lr}
 8011f96:	2268      	movs	r2, #104	@ 0x68
 8011f98:	4604      	mov	r4, r0
 8011f9a:	2100      	movs	r1, #0
 8011f9c:	f006 ffcc 	bl	8018f38 <memset>
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f7fa ff47 	bl	800ce34 <rcutils_get_default_allocator>
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	7523      	strb	r3, [r4, #20]
 8011faa:	4620      	mov	r0, r4
 8011fac:	bd10      	pop	{r4, pc}
 8011fae:	bf00      	nop

08011fb0 <rcl_node_options_copy>:
 8011fb0:	b1d0      	cbz	r0, 8011fe8 <rcl_node_options_copy+0x38>
 8011fb2:	b570      	push	{r4, r5, r6, lr}
 8011fb4:	460c      	mov	r4, r1
 8011fb6:	b1a9      	cbz	r1, 8011fe4 <rcl_node_options_copy+0x34>
 8011fb8:	4288      	cmp	r0, r1
 8011fba:	4684      	mov	ip, r0
 8011fbc:	d012      	beq.n	8011fe4 <rcl_node_options_copy+0x34>
 8011fbe:	4605      	mov	r5, r0
 8011fc0:	8a86      	ldrh	r6, [r0, #20]
 8011fc2:	468e      	mov	lr, r1
 8011fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011fc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011fca:	682b      	ldr	r3, [r5, #0]
 8011fcc:	f8ce 3000 	str.w	r3, [lr]
 8011fd0:	f10c 0118 	add.w	r1, ip, #24
 8011fd4:	2250      	movs	r2, #80	@ 0x50
 8011fd6:	82a6      	strh	r6, [r4, #20]
 8011fd8:	f104 0018 	add.w	r0, r4, #24
 8011fdc:	f007 f875 	bl	80190ca <memcpy>
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	bd70      	pop	{r4, r5, r6, pc}
 8011fe4:	200b      	movs	r0, #11
 8011fe6:	bd70      	pop	{r4, r5, r6, pc}
 8011fe8:	200b      	movs	r0, #11
 8011fea:	4770      	bx	lr

08011fec <rcl_node_resolve_name>:
 8011fec:	b082      	sub	sp, #8
 8011fee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff2:	b091      	sub	sp, #68	@ 0x44
 8011ff4:	ac1a      	add	r4, sp, #104	@ 0x68
 8011ff6:	e884 000c 	stmia.w	r4, {r2, r3}
 8011ffa:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d03b      	beq.n	801207a <rcl_node_resolve_name+0x8e>
 8012002:	460c      	mov	r4, r1
 8012004:	4605      	mov	r5, r0
 8012006:	f7ff ffb7 	bl	8011f78 <rcl_node_get_options>
 801200a:	2800      	cmp	r0, #0
 801200c:	d037      	beq.n	801207e <rcl_node_resolve_name+0x92>
 801200e:	4628      	mov	r0, r5
 8012010:	f7ff ffa2 	bl	8011f58 <rcl_node_get_name>
 8012014:	4606      	mov	r6, r0
 8012016:	4628      	mov	r0, r5
 8012018:	f7ff ffa6 	bl	8011f68 <rcl_node_get_namespace>
 801201c:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012020:	4681      	mov	r9, r0
 8012022:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012026:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012028:	46ac      	mov	ip, r5
 801202a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801202e:	f8de 3000 	ldr.w	r3, [lr]
 8012032:	f8cc 3000 	str.w	r3, [ip]
 8012036:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012038:	b1fb      	cbz	r3, 801207a <rcl_node_resolve_name+0x8e>
 801203a:	468a      	mov	sl, r1
 801203c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012040:	f002 faaa 	bl	8014598 <rcutils_get_zero_initialized_string_map>
 8012044:	ab10      	add	r3, sp, #64	@ 0x40
 8012046:	9008      	str	r0, [sp, #32]
 8012048:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801204c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012050:	2100      	movs	r1, #0
 8012052:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012056:	a808      	add	r0, sp, #32
 8012058:	f002 fb16 	bl	8014688 <rcutils_string_map_init>
 801205c:	4607      	mov	r7, r0
 801205e:	b180      	cbz	r0, 8012082 <rcl_node_resolve_name+0x96>
 8012060:	f7fa ff04 	bl	800ce6c <rcutils_get_error_string>
 8012064:	f7fa ff18 	bl	800ce98 <rcutils_reset_error>
 8012068:	2f0a      	cmp	r7, #10
 801206a:	bf18      	it	ne
 801206c:	2701      	movne	r7, #1
 801206e:	4638      	mov	r0, r7
 8012070:	b011      	add	sp, #68	@ 0x44
 8012072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012076:	b002      	add	sp, #8
 8012078:	4770      	bx	lr
 801207a:	270b      	movs	r7, #11
 801207c:	e7f7      	b.n	801206e <rcl_node_resolve_name+0x82>
 801207e:	2701      	movs	r7, #1
 8012080:	e7f5      	b.n	801206e <rcl_node_resolve_name+0x82>
 8012082:	9009      	str	r0, [sp, #36]	@ 0x24
 8012084:	9007      	str	r0, [sp, #28]
 8012086:	a808      	add	r0, sp, #32
 8012088:	f005 fe74 	bl	8017d74 <rcl_get_default_topic_name_substitutions>
 801208c:	4607      	mov	r7, r0
 801208e:	b1a8      	cbz	r0, 80120bc <rcl_node_resolve_name+0xd0>
 8012090:	280a      	cmp	r0, #10
 8012092:	9c07      	ldr	r4, [sp, #28]
 8012094:	d000      	beq.n	8012098 <rcl_node_resolve_name+0xac>
 8012096:	2701      	movs	r7, #1
 8012098:	a808      	add	r0, sp, #32
 801209a:	f002 fb35 	bl	8014708 <rcutils_string_map_fini>
 801209e:	2800      	cmp	r0, #0
 80120a0:	d13d      	bne.n	801211e <rcl_node_resolve_name+0x132>
 80120a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120a4:	4659      	mov	r1, fp
 80120a6:	47d0      	blx	sl
 80120a8:	4659      	mov	r1, fp
 80120aa:	4620      	mov	r0, r4
 80120ac:	47d0      	blx	sl
 80120ae:	f1b8 0f00 	cmp.w	r8, #0
 80120b2:	d0dc      	beq.n	801206e <rcl_node_resolve_name+0x82>
 80120b4:	2f67      	cmp	r7, #103	@ 0x67
 80120b6:	bf08      	it	eq
 80120b8:	2768      	moveq	r7, #104	@ 0x68
 80120ba:	e7d8      	b.n	801206e <rcl_node_resolve_name+0x82>
 80120bc:	ab09      	add	r3, sp, #36	@ 0x24
 80120be:	9305      	str	r3, [sp, #20]
 80120c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80120c2:	46ec      	mov	ip, sp
 80120c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120c8:	682b      	ldr	r3, [r5, #0]
 80120ca:	f8cc 3000 	str.w	r3, [ip]
 80120ce:	464a      	mov	r2, r9
 80120d0:	4631      	mov	r1, r6
 80120d2:	4620      	mov	r0, r4
 80120d4:	ab08      	add	r3, sp, #32
 80120d6:	f005 fcef 	bl	8017ab8 <rcl_expand_topic_name>
 80120da:	4607      	mov	r7, r0
 80120dc:	b9b8      	cbnz	r0, 801210e <rcl_node_resolve_name+0x122>
 80120de:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80120e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80120e2:	4602      	mov	r2, r0
 80120e4:	a90a      	add	r1, sp, #40	@ 0x28
 80120e6:	4620      	mov	r0, r4
 80120e8:	f002 fc52 	bl	8014990 <rmw_validate_full_topic_name>
 80120ec:	b988      	cbnz	r0, 8012112 <rcl_node_resolve_name+0x126>
 80120ee:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80120f0:	b9d5      	cbnz	r5, 8012128 <rcl_node_resolve_name+0x13c>
 80120f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80120f4:	a808      	add	r0, sp, #32
 80120f6:	601c      	str	r4, [r3, #0]
 80120f8:	f002 fb06 	bl	8014708 <rcutils_string_map_fini>
 80120fc:	4607      	mov	r7, r0
 80120fe:	b1a8      	cbz	r0, 801212c <rcl_node_resolve_name+0x140>
 8012100:	f7fa feb4 	bl	800ce6c <rcutils_get_error_string>
 8012104:	462c      	mov	r4, r5
 8012106:	f7fa fec7 	bl	800ce98 <rcutils_reset_error>
 801210a:	2701      	movs	r7, #1
 801210c:	e7c9      	b.n	80120a2 <rcl_node_resolve_name+0xb6>
 801210e:	9c07      	ldr	r4, [sp, #28]
 8012110:	e7c2      	b.n	8012098 <rcl_node_resolve_name+0xac>
 8012112:	f7fa feab 	bl	800ce6c <rcutils_get_error_string>
 8012116:	2701      	movs	r7, #1
 8012118:	f7fa febe 	bl	800ce98 <rcutils_reset_error>
 801211c:	e7bc      	b.n	8012098 <rcl_node_resolve_name+0xac>
 801211e:	f7fa fea5 	bl	800ce6c <rcutils_get_error_string>
 8012122:	f7fa feb9 	bl	800ce98 <rcutils_reset_error>
 8012126:	e7bc      	b.n	80120a2 <rcl_node_resolve_name+0xb6>
 8012128:	2767      	movs	r7, #103	@ 0x67
 801212a:	e7b5      	b.n	8012098 <rcl_node_resolve_name+0xac>
 801212c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801212e:	4659      	mov	r1, fp
 8012130:	47d0      	blx	sl
 8012132:	4659      	mov	r1, fp
 8012134:	4638      	mov	r0, r7
 8012136:	47d0      	blx	sl
 8012138:	e799      	b.n	801206e <rcl_node_resolve_name+0x82>
 801213a:	bf00      	nop

0801213c <exact_match_lookup>:
 801213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801213e:	f102 0708 	add.w	r7, r2, #8
 8012142:	460b      	mov	r3, r1
 8012144:	4614      	mov	r4, r2
 8012146:	4606      	mov	r6, r0
 8012148:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801214c:	b085      	sub	sp, #20
 801214e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012152:	4618      	mov	r0, r3
 8012154:	4919      	ldr	r1, [pc, #100]	@ (80121bc <exact_match_lookup+0x80>)
 8012156:	e894 000c 	ldmia.w	r4, {r2, r3}
 801215a:	f002 f8b7 	bl	80142cc <rcutils_join_path>
 801215e:	7833      	ldrb	r3, [r6, #0]
 8012160:	2b2f      	cmp	r3, #47	@ 0x2f
 8012162:	4605      	mov	r5, r0
 8012164:	d023      	beq.n	80121ae <exact_match_lookup+0x72>
 8012166:	f104 030c 	add.w	r3, r4, #12
 801216a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801216e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012172:	1c70      	adds	r0, r6, #1
 8012174:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012178:	f002 f8ae 	bl	80142d8 <rcutils_to_native_path>
 801217c:	4606      	mov	r6, r0
 801217e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012182:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012186:	4631      	mov	r1, r6
 8012188:	e894 000c 	ldmia.w	r4, {r2, r3}
 801218c:	4628      	mov	r0, r5
 801218e:	f002 f89d 	bl	80142cc <rcutils_join_path>
 8012192:	6862      	ldr	r2, [r4, #4]
 8012194:	6921      	ldr	r1, [r4, #16]
 8012196:	4603      	mov	r3, r0
 8012198:	4630      	mov	r0, r6
 801219a:	461e      	mov	r6, r3
 801219c:	4790      	blx	r2
 801219e:	4628      	mov	r0, r5
 80121a0:	6863      	ldr	r3, [r4, #4]
 80121a2:	6921      	ldr	r1, [r4, #16]
 80121a4:	4798      	blx	r3
 80121a6:	4635      	mov	r5, r6
 80121a8:	4628      	mov	r0, r5
 80121aa:	b005      	add	sp, #20
 80121ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ae:	7873      	ldrb	r3, [r6, #1]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d1d8      	bne.n	8012166 <exact_match_lookup+0x2a>
 80121b4:	4628      	mov	r0, r5
 80121b6:	b005      	add	sp, #20
 80121b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ba:	bf00      	nop
 80121bc:	0801a6ec 	.word	0x0801a6ec

080121c0 <rcl_get_secure_root>:
 80121c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121c4:	b085      	sub	sp, #20
 80121c6:	b168      	cbz	r0, 80121e4 <rcl_get_secure_root+0x24>
 80121c8:	4607      	mov	r7, r0
 80121ca:	4608      	mov	r0, r1
 80121cc:	460c      	mov	r4, r1
 80121ce:	f7fa fe3f 	bl	800ce50 <rcutils_allocator_is_valid>
 80121d2:	b138      	cbz	r0, 80121e4 <rcl_get_secure_root+0x24>
 80121d4:	2300      	movs	r3, #0
 80121d6:	482d      	ldr	r0, [pc, #180]	@ (801228c <rcl_get_secure_root+0xcc>)
 80121d8:	9303      	str	r3, [sp, #12]
 80121da:	a903      	add	r1, sp, #12
 80121dc:	f002 f85c 	bl	8014298 <rcutils_get_env>
 80121e0:	4605      	mov	r5, r0
 80121e2:	b120      	cbz	r0, 80121ee <rcl_get_secure_root+0x2e>
 80121e4:	2500      	movs	r5, #0
 80121e6:	4628      	mov	r0, r5
 80121e8:	b005      	add	sp, #20
 80121ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121ee:	9b03      	ldr	r3, [sp, #12]
 80121f0:	781a      	ldrb	r2, [r3, #0]
 80121f2:	2a00      	cmp	r2, #0
 80121f4:	d0f6      	beq.n	80121e4 <rcl_get_secure_root+0x24>
 80121f6:	f104 090c 	add.w	r9, r4, #12
 80121fa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80121fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012202:	4618      	mov	r0, r3
 8012204:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012208:	f002 f988 	bl	801451c <rcutils_strdup>
 801220c:	4680      	mov	r8, r0
 801220e:	2800      	cmp	r0, #0
 8012210:	d0e8      	beq.n	80121e4 <rcl_get_secure_root+0x24>
 8012212:	481f      	ldr	r0, [pc, #124]	@ (8012290 <rcl_get_secure_root+0xd0>)
 8012214:	9503      	str	r5, [sp, #12]
 8012216:	a903      	add	r1, sp, #12
 8012218:	f002 f83e 	bl	8014298 <rcutils_get_env>
 801221c:	b160      	cbz	r0, 8012238 <rcl_get_secure_root+0x78>
 801221e:	2600      	movs	r6, #0
 8012220:	6863      	ldr	r3, [r4, #4]
 8012222:	6921      	ldr	r1, [r4, #16]
 8012224:	4630      	mov	r0, r6
 8012226:	4798      	blx	r3
 8012228:	4640      	mov	r0, r8
 801222a:	6863      	ldr	r3, [r4, #4]
 801222c:	6921      	ldr	r1, [r4, #16]
 801222e:	4798      	blx	r3
 8012230:	4628      	mov	r0, r5
 8012232:	b005      	add	sp, #20
 8012234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012238:	9b03      	ldr	r3, [sp, #12]
 801223a:	781e      	ldrb	r6, [r3, #0]
 801223c:	b1f6      	cbz	r6, 801227c <rcl_get_secure_root+0xbc>
 801223e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012242:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012246:	4618      	mov	r0, r3
 8012248:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801224c:	f002 f966 	bl	801451c <rcutils_strdup>
 8012250:	4606      	mov	r6, r0
 8012252:	2800      	cmp	r0, #0
 8012254:	d0e3      	beq.n	801221e <rcl_get_secure_root+0x5e>
 8012256:	4622      	mov	r2, r4
 8012258:	4641      	mov	r1, r8
 801225a:	f7ff ff6f 	bl	801213c <exact_match_lookup>
 801225e:	4605      	mov	r5, r0
 8012260:	2d00      	cmp	r5, #0
 8012262:	d0dd      	beq.n	8012220 <rcl_get_secure_root+0x60>
 8012264:	4628      	mov	r0, r5
 8012266:	f002 f82f 	bl	80142c8 <rcutils_is_directory>
 801226a:	4603      	mov	r3, r0
 801226c:	2800      	cmp	r0, #0
 801226e:	d1d7      	bne.n	8012220 <rcl_get_secure_root+0x60>
 8012270:	4628      	mov	r0, r5
 8012272:	6921      	ldr	r1, [r4, #16]
 8012274:	461d      	mov	r5, r3
 8012276:	6863      	ldr	r3, [r4, #4]
 8012278:	4798      	blx	r3
 801227a:	e7d1      	b.n	8012220 <rcl_get_secure_root+0x60>
 801227c:	4622      	mov	r2, r4
 801227e:	4638      	mov	r0, r7
 8012280:	4641      	mov	r1, r8
 8012282:	f7ff ff5b 	bl	801213c <exact_match_lookup>
 8012286:	4605      	mov	r5, r0
 8012288:	e7ea      	b.n	8012260 <rcl_get_secure_root+0xa0>
 801228a:	bf00      	nop
 801228c:	0801a6f8 	.word	0x0801a6f8
 8012290:	0801a710 	.word	0x0801a710

08012294 <rcl_get_security_options_from_environment>:
 8012294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012298:	b082      	sub	sp, #8
 801229a:	2300      	movs	r3, #0
 801229c:	4606      	mov	r6, r0
 801229e:	460f      	mov	r7, r1
 80122a0:	4820      	ldr	r0, [pc, #128]	@ (8012324 <rcl_get_security_options_from_environment+0x90>)
 80122a2:	9301      	str	r3, [sp, #4]
 80122a4:	a901      	add	r1, sp, #4
 80122a6:	4690      	mov	r8, r2
 80122a8:	f001 fff6 	bl	8014298 <rcutils_get_env>
 80122ac:	b120      	cbz	r0, 80122b8 <rcl_get_security_options_from_environment+0x24>
 80122ae:	2501      	movs	r5, #1
 80122b0:	4628      	mov	r0, r5
 80122b2:	b002      	add	sp, #8
 80122b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122b8:	491b      	ldr	r1, [pc, #108]	@ (8012328 <rcl_get_security_options_from_environment+0x94>)
 80122ba:	4604      	mov	r4, r0
 80122bc:	9801      	ldr	r0, [sp, #4]
 80122be:	f7ed ff8f 	bl	80001e0 <strcmp>
 80122c2:	4605      	mov	r5, r0
 80122c4:	b9e8      	cbnz	r0, 8012302 <rcl_get_security_options_from_environment+0x6e>
 80122c6:	9001      	str	r0, [sp, #4]
 80122c8:	f1b8 0f00 	cmp.w	r8, #0
 80122cc:	d020      	beq.n	8012310 <rcl_get_security_options_from_environment+0x7c>
 80122ce:	4817      	ldr	r0, [pc, #92]	@ (801232c <rcl_get_security_options_from_environment+0x98>)
 80122d0:	a901      	add	r1, sp, #4
 80122d2:	f001 ffe1 	bl	8014298 <rcutils_get_env>
 80122d6:	2800      	cmp	r0, #0
 80122d8:	d1e9      	bne.n	80122ae <rcl_get_security_options_from_environment+0x1a>
 80122da:	4915      	ldr	r1, [pc, #84]	@ (8012330 <rcl_get_security_options_from_environment+0x9c>)
 80122dc:	9801      	ldr	r0, [sp, #4]
 80122de:	f7ed ff7f 	bl	80001e0 <strcmp>
 80122e2:	fab0 f080 	clz	r0, r0
 80122e6:	0940      	lsrs	r0, r0, #5
 80122e8:	f888 0000 	strb.w	r0, [r8]
 80122ec:	4639      	mov	r1, r7
 80122ee:	4630      	mov	r0, r6
 80122f0:	f7ff ff66 	bl	80121c0 <rcl_get_secure_root>
 80122f4:	b170      	cbz	r0, 8012314 <rcl_get_security_options_from_environment+0x80>
 80122f6:	f8c8 0004 	str.w	r0, [r8, #4]
 80122fa:	4628      	mov	r0, r5
 80122fc:	b002      	add	sp, #8
 80122fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012302:	4625      	mov	r5, r4
 8012304:	4628      	mov	r0, r5
 8012306:	f888 4000 	strb.w	r4, [r8]
 801230a:	b002      	add	sp, #8
 801230c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012310:	250b      	movs	r5, #11
 8012312:	e7cd      	b.n	80122b0 <rcl_get_security_options_from_environment+0x1c>
 8012314:	f898 5000 	ldrb.w	r5, [r8]
 8012318:	f1a5 0501 	sub.w	r5, r5, #1
 801231c:	fab5 f585 	clz	r5, r5
 8012320:	096d      	lsrs	r5, r5, #5
 8012322:	e7c5      	b.n	80122b0 <rcl_get_security_options_from_environment+0x1c>
 8012324:	0801a6b0 	.word	0x0801a6b0
 8012328:	0801a6c4 	.word	0x0801a6c4
 801232c:	0801a6cc 	.word	0x0801a6cc
 8012330:	0801a6e4 	.word	0x0801a6e4

08012334 <rcl_service_get_rmw_handle>:
 8012334:	b118      	cbz	r0, 801233e <rcl_service_get_rmw_handle+0xa>
 8012336:	6800      	ldr	r0, [r0, #0]
 8012338:	b108      	cbz	r0, 801233e <rcl_service_get_rmw_handle+0xa>
 801233a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801233e:	4770      	bx	lr

08012340 <rcl_take_request>:
 8012340:	b570      	push	{r4, r5, r6, lr}
 8012342:	468e      	mov	lr, r1
 8012344:	460c      	mov	r4, r1
 8012346:	4616      	mov	r6, r2
 8012348:	4605      	mov	r5, r0
 801234a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801234e:	b08c      	sub	sp, #48	@ 0x30
 8012350:	f10d 0c18 	add.w	ip, sp, #24
 8012354:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012358:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801235c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012360:	b30d      	cbz	r5, 80123a6 <rcl_take_request+0x66>
 8012362:	682b      	ldr	r3, [r5, #0]
 8012364:	b1fb      	cbz	r3, 80123a6 <rcl_take_request+0x66>
 8012366:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801236a:	b1e0      	cbz	r0, 80123a6 <rcl_take_request+0x66>
 801236c:	b336      	cbz	r6, 80123bc <rcl_take_request+0x7c>
 801236e:	2300      	movs	r3, #0
 8012370:	f88d 3007 	strb.w	r3, [sp, #7]
 8012374:	4632      	mov	r2, r6
 8012376:	f10d 0307 	add.w	r3, sp, #7
 801237a:	a902      	add	r1, sp, #8
 801237c:	f003 f8ea 	bl	8015554 <rmw_take_request>
 8012380:	4605      	mov	r5, r0
 8012382:	b198      	cbz	r0, 80123ac <rcl_take_request+0x6c>
 8012384:	280a      	cmp	r0, #10
 8012386:	bf18      	it	ne
 8012388:	2501      	movne	r5, #1
 801238a:	f10d 0e18 	add.w	lr, sp, #24
 801238e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012392:	46a4      	mov	ip, r4
 8012394:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012398:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801239c:	e88c 0003 	stmia.w	ip, {r0, r1}
 80123a0:	4628      	mov	r0, r5
 80123a2:	b00c      	add	sp, #48	@ 0x30
 80123a4:	bd70      	pop	{r4, r5, r6, pc}
 80123a6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80123aa:	e7ee      	b.n	801238a <rcl_take_request+0x4a>
 80123ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80123b0:	f240 2359 	movw	r3, #601	@ 0x259
 80123b4:	2a00      	cmp	r2, #0
 80123b6:	bf08      	it	eq
 80123b8:	461d      	moveq	r5, r3
 80123ba:	e7e6      	b.n	801238a <rcl_take_request+0x4a>
 80123bc:	250b      	movs	r5, #11
 80123be:	e7e4      	b.n	801238a <rcl_take_request+0x4a>

080123c0 <rcl_send_response>:
 80123c0:	b170      	cbz	r0, 80123e0 <rcl_send_response+0x20>
 80123c2:	6800      	ldr	r0, [r0, #0]
 80123c4:	b160      	cbz	r0, 80123e0 <rcl_send_response+0x20>
 80123c6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80123ca:	b148      	cbz	r0, 80123e0 <rcl_send_response+0x20>
 80123cc:	b159      	cbz	r1, 80123e6 <rcl_send_response+0x26>
 80123ce:	b510      	push	{r4, lr}
 80123d0:	b15a      	cbz	r2, 80123ea <rcl_send_response+0x2a>
 80123d2:	f003 f91d 	bl	8015610 <rmw_send_response>
 80123d6:	b110      	cbz	r0, 80123de <rcl_send_response+0x1e>
 80123d8:	2802      	cmp	r0, #2
 80123da:	bf18      	it	ne
 80123dc:	2001      	movne	r0, #1
 80123de:	bd10      	pop	{r4, pc}
 80123e0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80123e4:	4770      	bx	lr
 80123e6:	200b      	movs	r0, #11
 80123e8:	4770      	bx	lr
 80123ea:	200b      	movs	r0, #11
 80123ec:	bd10      	pop	{r4, pc}
 80123ee:	bf00      	nop

080123f0 <rcl_service_is_valid>:
 80123f0:	b130      	cbz	r0, 8012400 <rcl_service_is_valid+0x10>
 80123f2:	6800      	ldr	r0, [r0, #0]
 80123f4:	b120      	cbz	r0, 8012400 <rcl_service_is_valid+0x10>
 80123f6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80123fa:	3800      	subs	r0, #0
 80123fc:	bf18      	it	ne
 80123fe:	2001      	movne	r0, #1
 8012400:	4770      	bx	lr
 8012402:	bf00      	nop

08012404 <rcl_get_zero_initialized_subscription>:
 8012404:	4b01      	ldr	r3, [pc, #4]	@ (801240c <rcl_get_zero_initialized_subscription+0x8>)
 8012406:	6818      	ldr	r0, [r3, #0]
 8012408:	4770      	bx	lr
 801240a:	bf00      	nop
 801240c:	0801a730 	.word	0x0801a730

08012410 <rcl_subscription_init>:
 8012410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012414:	b089      	sub	sp, #36	@ 0x24
 8012416:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8012418:	b1d6      	cbz	r6, 8012450 <rcl_subscription_init+0x40>
 801241a:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801241e:	4604      	mov	r4, r0
 8012420:	4648      	mov	r0, r9
 8012422:	460d      	mov	r5, r1
 8012424:	4690      	mov	r8, r2
 8012426:	461f      	mov	r7, r3
 8012428:	f7fa fd12 	bl	800ce50 <rcutils_allocator_is_valid>
 801242c:	b180      	cbz	r0, 8012450 <rcl_subscription_init+0x40>
 801242e:	b17c      	cbz	r4, 8012450 <rcl_subscription_init+0x40>
 8012430:	4628      	mov	r0, r5
 8012432:	f7ff fd87 	bl	8011f44 <rcl_node_is_valid>
 8012436:	2800      	cmp	r0, #0
 8012438:	d054      	beq.n	80124e4 <rcl_subscription_init+0xd4>
 801243a:	f1b8 0f00 	cmp.w	r8, #0
 801243e:	d007      	beq.n	8012450 <rcl_subscription_init+0x40>
 8012440:	b137      	cbz	r7, 8012450 <rcl_subscription_init+0x40>
 8012442:	6823      	ldr	r3, [r4, #0]
 8012444:	b14b      	cbz	r3, 801245a <rcl_subscription_init+0x4a>
 8012446:	2764      	movs	r7, #100	@ 0x64
 8012448:	4638      	mov	r0, r7
 801244a:	b009      	add	sp, #36	@ 0x24
 801244c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012450:	270b      	movs	r7, #11
 8012452:	4638      	mov	r0, r7
 8012454:	b009      	add	sp, #36	@ 0x24
 8012456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801245a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801245e:	aa07      	add	r2, sp, #28
 8012460:	9205      	str	r2, [sp, #20]
 8012462:	9307      	str	r3, [sp, #28]
 8012464:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8012468:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801246c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012470:	4639      	mov	r1, r7
 8012472:	e899 000c 	ldmia.w	r9, {r2, r3}
 8012476:	4628      	mov	r0, r5
 8012478:	f7ff fdb8 	bl	8011fec <rcl_node_resolve_name>
 801247c:	4607      	mov	r7, r0
 801247e:	2800      	cmp	r0, #0
 8012480:	d15f      	bne.n	8012542 <rcl_subscription_init+0x132>
 8012482:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8012486:	21c8      	movs	r1, #200	@ 0xc8
 8012488:	2001      	movs	r0, #1
 801248a:	4798      	blx	r3
 801248c:	6020      	str	r0, [r4, #0]
 801248e:	2800      	cmp	r0, #0
 8012490:	d05d      	beq.n	801254e <rcl_subscription_init+0x13e>
 8012492:	4628      	mov	r0, r5
 8012494:	f7ff fd78 	bl	8011f88 <rcl_node_get_rmw_handle>
 8012498:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 801249c:	9300      	str	r3, [sp, #0]
 801249e:	9a07      	ldr	r2, [sp, #28]
 80124a0:	6827      	ldr	r7, [r4, #0]
 80124a2:	4641      	mov	r1, r8
 80124a4:	4633      	mov	r3, r6
 80124a6:	f003 f99d 	bl	80157e4 <rmw_create_subscription>
 80124aa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80124ae:	6827      	ldr	r7, [r4, #0]
 80124b0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80124b4:	b348      	cbz	r0, 801250a <rcl_subscription_init+0xfa>
 80124b6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80124ba:	f003 fa75 	bl	80159a8 <rmw_subscription_get_actual_qos>
 80124be:	4607      	mov	r7, r0
 80124c0:	b9a8      	cbnz	r0, 80124ee <rcl_subscription_init+0xde>
 80124c2:	6820      	ldr	r0, [r4, #0]
 80124c4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80124c8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80124cc:	2270      	movs	r2, #112	@ 0x70
 80124ce:	4631      	mov	r1, r6
 80124d0:	f006 fdfb 	bl	80190ca <memcpy>
 80124d4:	9807      	ldr	r0, [sp, #28]
 80124d6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80124d8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80124da:	4798      	blx	r3
 80124dc:	4638      	mov	r0, r7
 80124de:	b009      	add	sp, #36	@ 0x24
 80124e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124e4:	27c8      	movs	r7, #200	@ 0xc8
 80124e6:	4638      	mov	r0, r7
 80124e8:	b009      	add	sp, #36	@ 0x24
 80124ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124ee:	6827      	ldr	r7, [r4, #0]
 80124f0:	b32f      	cbz	r7, 801253e <rcl_subscription_init+0x12e>
 80124f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80124f6:	b14b      	cbz	r3, 801250c <rcl_subscription_init+0xfc>
 80124f8:	4628      	mov	r0, r5
 80124fa:	f7ff fd45 	bl	8011f88 <rcl_node_get_rmw_handle>
 80124fe:	6823      	ldr	r3, [r4, #0]
 8012500:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8012504:	f003 fa60 	bl	80159c8 <rmw_destroy_subscription>
 8012508:	6827      	ldr	r7, [r4, #0]
 801250a:	b197      	cbz	r7, 8012532 <rcl_subscription_init+0x122>
 801250c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8012510:	4628      	mov	r0, r5
 8012512:	f7fa fc9d 	bl	800ce50 <rcutils_allocator_is_valid>
 8012516:	b158      	cbz	r0, 8012530 <rcl_subscription_init+0x120>
 8012518:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801251a:	b148      	cbz	r0, 8012530 <rcl_subscription_init+0x120>
 801251c:	4629      	mov	r1, r5
 801251e:	f002 f98b 	bl	8014838 <rmw_subscription_content_filter_options_fini>
 8012522:	4605      	mov	r5, r0
 8012524:	b9b8      	cbnz	r0, 8012556 <rcl_subscription_init+0x146>
 8012526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012528:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801252a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801252c:	4798      	blx	r3
 801252e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8012530:	6827      	ldr	r7, [r4, #0]
 8012532:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8012534:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8012536:	4638      	mov	r0, r7
 8012538:	4798      	blx	r3
 801253a:	2300      	movs	r3, #0
 801253c:	6023      	str	r3, [r4, #0]
 801253e:	2701      	movs	r7, #1
 8012540:	e7c8      	b.n	80124d4 <rcl_subscription_init+0xc4>
 8012542:	2867      	cmp	r0, #103	@ 0x67
 8012544:	d0c6      	beq.n	80124d4 <rcl_subscription_init+0xc4>
 8012546:	2869      	cmp	r0, #105	@ 0x69
 8012548:	d003      	beq.n	8012552 <rcl_subscription_init+0x142>
 801254a:	280a      	cmp	r0, #10
 801254c:	d1f7      	bne.n	801253e <rcl_subscription_init+0x12e>
 801254e:	270a      	movs	r7, #10
 8012550:	e7c0      	b.n	80124d4 <rcl_subscription_init+0xc4>
 8012552:	2767      	movs	r7, #103	@ 0x67
 8012554:	e7be      	b.n	80124d4 <rcl_subscription_init+0xc4>
 8012556:	f7ff f8fd 	bl	8011754 <rcl_convert_rmw_ret_to_rcl_ret>
 801255a:	6827      	ldr	r7, [r4, #0]
 801255c:	e7e9      	b.n	8012532 <rcl_subscription_init+0x122>
 801255e:	bf00      	nop

08012560 <rcl_subscription_get_default_options>:
 8012560:	b570      	push	{r4, r5, r6, lr}
 8012562:	4d14      	ldr	r5, [pc, #80]	@ (80125b4 <rcl_subscription_get_default_options+0x54>)
 8012564:	4914      	ldr	r1, [pc, #80]	@ (80125b8 <rcl_subscription_get_default_options+0x58>)
 8012566:	b08a      	sub	sp, #40	@ 0x28
 8012568:	4604      	mov	r4, r0
 801256a:	2250      	movs	r2, #80	@ 0x50
 801256c:	4628      	mov	r0, r5
 801256e:	f006 fdac 	bl	80190ca <memcpy>
 8012572:	a804      	add	r0, sp, #16
 8012574:	f7fa fc5e 	bl	800ce34 <rcutils_get_default_allocator>
 8012578:	f10d 0c10 	add.w	ip, sp, #16
 801257c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012580:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012584:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012588:	466e      	mov	r6, sp
 801258a:	f8dc 3000 	ldr.w	r3, [ip]
 801258e:	f8ce 3000 	str.w	r3, [lr]
 8012592:	4630      	mov	r0, r6
 8012594:	f002 f96a 	bl	801486c <rmw_get_default_subscription_options>
 8012598:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801259c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80125a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80125a4:	2270      	movs	r2, #112	@ 0x70
 80125a6:	4629      	mov	r1, r5
 80125a8:	4620      	mov	r0, r4
 80125aa:	f006 fd8e 	bl	80190ca <memcpy>
 80125ae:	4620      	mov	r0, r4
 80125b0:	b00a      	add	sp, #40	@ 0x28
 80125b2:	bd70      	pop	{r4, r5, r6, pc}
 80125b4:	2000e430 	.word	0x2000e430
 80125b8:	0801a738 	.word	0x0801a738

080125bc <rcl_take>:
 80125bc:	2800      	cmp	r0, #0
 80125be:	d04a      	beq.n	8012656 <rcl_take+0x9a>
 80125c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125c4:	4604      	mov	r4, r0
 80125c6:	6800      	ldr	r0, [r0, #0]
 80125c8:	b0a4      	sub	sp, #144	@ 0x90
 80125ca:	2800      	cmp	r0, #0
 80125cc:	d03b      	beq.n	8012646 <rcl_take+0x8a>
 80125ce:	461f      	mov	r7, r3
 80125d0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d036      	beq.n	8012646 <rcl_take+0x8a>
 80125d8:	460e      	mov	r6, r1
 80125da:	2900      	cmp	r1, #0
 80125dc:	d039      	beq.n	8012652 <rcl_take+0x96>
 80125de:	4615      	mov	r5, r2
 80125e0:	2a00      	cmp	r2, #0
 80125e2:	d03c      	beq.n	801265e <rcl_take+0xa2>
 80125e4:	a802      	add	r0, sp, #8
 80125e6:	f002 f9cb 	bl	8014980 <rmw_get_zero_initialized_message_info>
 80125ea:	f10d 0c08 	add.w	ip, sp, #8
 80125ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80125f2:	46ae      	mov	lr, r5
 80125f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80125f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80125fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012600:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012604:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012608:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801260c:	f04f 0800 	mov.w	r8, #0
 8012610:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012614:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012618:	6822      	ldr	r2, [r4, #0]
 801261a:	462b      	mov	r3, r5
 801261c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8012620:	9700      	str	r7, [sp, #0]
 8012622:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012626:	4631      	mov	r1, r6
 8012628:	f003 fa2e 	bl	8015a88 <rmw_take_with_info>
 801262c:	4603      	mov	r3, r0
 801262e:	b9c0      	cbnz	r0, 8012662 <rcl_take+0xa6>
 8012630:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012634:	f240 1291 	movw	r2, #401	@ 0x191
 8012638:	2900      	cmp	r1, #0
 801263a:	bf08      	it	eq
 801263c:	4613      	moveq	r3, r2
 801263e:	4618      	mov	r0, r3
 8012640:	b024      	add	sp, #144	@ 0x90
 8012642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012646:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801264a:	4618      	mov	r0, r3
 801264c:	b024      	add	sp, #144	@ 0x90
 801264e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012652:	230b      	movs	r3, #11
 8012654:	e7f3      	b.n	801263e <rcl_take+0x82>
 8012656:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801265a:	4618      	mov	r0, r3
 801265c:	4770      	bx	lr
 801265e:	ad14      	add	r5, sp, #80	@ 0x50
 8012660:	e7c0      	b.n	80125e4 <rcl_take+0x28>
 8012662:	f7ff f877 	bl	8011754 <rcl_convert_rmw_ret_to_rcl_ret>
 8012666:	4603      	mov	r3, r0
 8012668:	e7e9      	b.n	801263e <rcl_take+0x82>
 801266a:	bf00      	nop

0801266c <rcl_subscription_get_rmw_handle>:
 801266c:	b118      	cbz	r0, 8012676 <rcl_subscription_get_rmw_handle+0xa>
 801266e:	6800      	ldr	r0, [r0, #0]
 8012670:	b108      	cbz	r0, 8012676 <rcl_subscription_get_rmw_handle+0xa>
 8012672:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012676:	4770      	bx	lr

08012678 <rcl_subscription_is_valid>:
 8012678:	b130      	cbz	r0, 8012688 <rcl_subscription_is_valid+0x10>
 801267a:	6800      	ldr	r0, [r0, #0]
 801267c:	b120      	cbz	r0, 8012688 <rcl_subscription_is_valid+0x10>
 801267e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012682:	3800      	subs	r0, #0
 8012684:	bf18      	it	ne
 8012686:	2001      	movne	r0, #1
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop

0801268c <rcl_get_system_time>:
 801268c:	4608      	mov	r0, r1
 801268e:	f7fa bc1f 	b.w	800ced0 <rcutils_system_time_now>
 8012692:	bf00      	nop

08012694 <rcl_get_steady_time>:
 8012694:	4608      	mov	r0, r1
 8012696:	f7fa bc43 	b.w	800cf20 <rcutils_steady_time_now>
 801269a:	bf00      	nop

0801269c <rcl_get_ros_time>:
 801269c:	7a03      	ldrb	r3, [r0, #8]
 801269e:	b510      	push	{r4, lr}
 80126a0:	460c      	mov	r4, r1
 80126a2:	b133      	cbz	r3, 80126b2 <rcl_get_ros_time+0x16>
 80126a4:	2105      	movs	r1, #5
 80126a6:	f001 fd53 	bl	8014150 <__atomic_load_8>
 80126aa:	e9c4 0100 	strd	r0, r1, [r4]
 80126ae:	2000      	movs	r0, #0
 80126b0:	bd10      	pop	{r4, pc}
 80126b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126b6:	4608      	mov	r0, r1
 80126b8:	f7fa bc0a 	b.w	800ced0 <rcutils_system_time_now>

080126bc <rcl_clock_init>:
 80126bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126be:	4605      	mov	r5, r0
 80126c0:	4610      	mov	r0, r2
 80126c2:	4614      	mov	r4, r2
 80126c4:	460e      	mov	r6, r1
 80126c6:	f7fa fbc3 	bl	800ce50 <rcutils_allocator_is_valid>
 80126ca:	b128      	cbz	r0, 80126d8 <rcl_clock_init+0x1c>
 80126cc:	2d03      	cmp	r5, #3
 80126ce:	d803      	bhi.n	80126d8 <rcl_clock_init+0x1c>
 80126d0:	e8df f005 	tbb	[pc, r5]
 80126d4:	06532e1d 	.word	0x06532e1d
 80126d8:	f04f 0c0b 	mov.w	ip, #11
 80126dc:	4660      	mov	r0, ip
 80126de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126e0:	2e00      	cmp	r6, #0
 80126e2:	d0f9      	beq.n	80126d8 <rcl_clock_init+0x1c>
 80126e4:	2c00      	cmp	r4, #0
 80126e6:	d0f7      	beq.n	80126d8 <rcl_clock_init+0x1c>
 80126e8:	2300      	movs	r3, #0
 80126ea:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80126ee:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80127a4 <rcl_clock_init+0xe8>
 80126f2:	6133      	str	r3, [r6, #16]
 80126f4:	f106 0514 	add.w	r5, r6, #20
 80126f8:	469c      	mov	ip, r3
 80126fa:	2703      	movs	r7, #3
 80126fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	602b      	str	r3, [r5, #0]
 8012704:	7037      	strb	r7, [r6, #0]
 8012706:	f8c6 e00c 	str.w	lr, [r6, #12]
 801270a:	4660      	mov	r0, ip
 801270c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801270e:	2e00      	cmp	r6, #0
 8012710:	d0e2      	beq.n	80126d8 <rcl_clock_init+0x1c>
 8012712:	2300      	movs	r3, #0
 8012714:	7033      	strb	r3, [r6, #0]
 8012716:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801271a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801271e:	469c      	mov	ip, r3
 8012720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012722:	f106 0514 	add.w	r5, r6, #20
 8012726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012728:	6823      	ldr	r3, [r4, #0]
 801272a:	602b      	str	r3, [r5, #0]
 801272c:	4660      	mov	r0, ip
 801272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012730:	2e00      	cmp	r6, #0
 8012732:	d0d1      	beq.n	80126d8 <rcl_clock_init+0x1c>
 8012734:	2c00      	cmp	r4, #0
 8012736:	d0cf      	beq.n	80126d8 <rcl_clock_init+0x1c>
 8012738:	2700      	movs	r7, #0
 801273a:	7037      	strb	r7, [r6, #0]
 801273c:	46a4      	mov	ip, r4
 801273e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012742:	f106 0514 	add.w	r5, r6, #20
 8012746:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801274a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801274e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012750:	f8dc 3000 	ldr.w	r3, [ip]
 8012754:	602b      	str	r3, [r5, #0]
 8012756:	6921      	ldr	r1, [r4, #16]
 8012758:	6823      	ldr	r3, [r4, #0]
 801275a:	2010      	movs	r0, #16
 801275c:	4798      	blx	r3
 801275e:	6130      	str	r0, [r6, #16]
 8012760:	b1d0      	cbz	r0, 8012798 <rcl_clock_init+0xdc>
 8012762:	2200      	movs	r2, #0
 8012764:	2300      	movs	r3, #0
 8012766:	e9c0 2300 	strd	r2, r3, [r0]
 801276a:	2301      	movs	r3, #1
 801276c:	7207      	strb	r7, [r0, #8]
 801276e:	4a0c      	ldr	r2, [pc, #48]	@ (80127a0 <rcl_clock_init+0xe4>)
 8012770:	7033      	strb	r3, [r6, #0]
 8012772:	46bc      	mov	ip, r7
 8012774:	60f2      	str	r2, [r6, #12]
 8012776:	4660      	mov	r0, ip
 8012778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801277a:	2e00      	cmp	r6, #0
 801277c:	d0ac      	beq.n	80126d8 <rcl_clock_init+0x1c>
 801277e:	2c00      	cmp	r4, #0
 8012780:	d0aa      	beq.n	80126d8 <rcl_clock_init+0x1c>
 8012782:	2300      	movs	r3, #0
 8012784:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012788:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80127a8 <rcl_clock_init+0xec>
 801278c:	6133      	str	r3, [r6, #16]
 801278e:	f106 0514 	add.w	r5, r6, #20
 8012792:	469c      	mov	ip, r3
 8012794:	2702      	movs	r7, #2
 8012796:	e7b1      	b.n	80126fc <rcl_clock_init+0x40>
 8012798:	f04f 0c0a 	mov.w	ip, #10
 801279c:	e79e      	b.n	80126dc <rcl_clock_init+0x20>
 801279e:	bf00      	nop
 80127a0:	0801269d 	.word	0x0801269d
 80127a4:	08012695 	.word	0x08012695
 80127a8:	0801268d 	.word	0x0801268d

080127ac <rcl_clock_get_now>:
 80127ac:	b140      	cbz	r0, 80127c0 <rcl_clock_get_now+0x14>
 80127ae:	b139      	cbz	r1, 80127c0 <rcl_clock_get_now+0x14>
 80127b0:	7803      	ldrb	r3, [r0, #0]
 80127b2:	b11b      	cbz	r3, 80127bc <rcl_clock_get_now+0x10>
 80127b4:	68c3      	ldr	r3, [r0, #12]
 80127b6:	b10b      	cbz	r3, 80127bc <rcl_clock_get_now+0x10>
 80127b8:	6900      	ldr	r0, [r0, #16]
 80127ba:	4718      	bx	r3
 80127bc:	2001      	movs	r0, #1
 80127be:	4770      	bx	lr
 80127c0:	200b      	movs	r0, #11
 80127c2:	4770      	bx	lr

080127c4 <rcl_timer_call>:
 80127c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c8:	b087      	sub	sp, #28
 80127ca:	2800      	cmp	r0, #0
 80127cc:	d06d      	beq.n	80128aa <rcl_timer_call+0xe6>
 80127ce:	6803      	ldr	r3, [r0, #0]
 80127d0:	4604      	mov	r4, r0
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d063      	beq.n	801289e <rcl_timer_call+0xda>
 80127d6:	f3bf 8f5b 	dmb	ish
 80127da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80127de:	f3bf 8f5b 	dmb	ish
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d150      	bne.n	8012888 <rcl_timer_call+0xc4>
 80127e6:	6803      	ldr	r3, [r0, #0]
 80127e8:	a904      	add	r1, sp, #16
 80127ea:	6818      	ldr	r0, [r3, #0]
 80127ec:	f7ff ffde 	bl	80127ac <rcl_clock_get_now>
 80127f0:	4605      	mov	r5, r0
 80127f2:	2800      	cmp	r0, #0
 80127f4:	d14a      	bne.n	801288c <rcl_timer_call+0xc8>
 80127f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	db4a      	blt.n	8012894 <rcl_timer_call+0xd0>
 80127fe:	6820      	ldr	r0, [r4, #0]
 8012800:	f04f 0a05 	mov.w	sl, #5
 8012804:	f8cd a000 	str.w	sl, [sp]
 8012808:	3020      	adds	r0, #32
 801280a:	f001 fd0d 	bl	8014228 <__atomic_exchange_8>
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	f3bf 8f5b 	dmb	ish
 8012814:	4680      	mov	r8, r0
 8012816:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801281a:	f3bf 8f5b 	dmb	ish
 801281e:	6820      	ldr	r0, [r4, #0]
 8012820:	4689      	mov	r9, r1
 8012822:	3028      	adds	r0, #40	@ 0x28
 8012824:	4651      	mov	r1, sl
 8012826:	f001 fc93 	bl	8014150 <__atomic_load_8>
 801282a:	4606      	mov	r6, r0
 801282c:	6820      	ldr	r0, [r4, #0]
 801282e:	460f      	mov	r7, r1
 8012830:	3018      	adds	r0, #24
 8012832:	4651      	mov	r1, sl
 8012834:	f001 fc8c 	bl	8014150 <__atomic_load_8>
 8012838:	1836      	adds	r6, r6, r0
 801283a:	4602      	mov	r2, r0
 801283c:	4682      	mov	sl, r0
 801283e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012842:	eb47 0701 	adc.w	r7, r7, r1
 8012846:	4286      	cmp	r6, r0
 8012848:	460b      	mov	r3, r1
 801284a:	eb77 010c 	sbcs.w	r1, r7, ip
 801284e:	da04      	bge.n	801285a <rcl_timer_call+0x96>
 8012850:	ea53 0102 	orrs.w	r1, r3, r2
 8012854:	d12e      	bne.n	80128b4 <rcl_timer_call+0xf0>
 8012856:	4606      	mov	r6, r0
 8012858:	4667      	mov	r7, ip
 801285a:	6820      	ldr	r0, [r4, #0]
 801285c:	2105      	movs	r1, #5
 801285e:	4632      	mov	r2, r6
 8012860:	463b      	mov	r3, r7
 8012862:	3028      	adds	r0, #40	@ 0x28
 8012864:	9100      	str	r1, [sp, #0]
 8012866:	f001 fca9 	bl	80141bc <__atomic_store_8>
 801286a:	f1bb 0f00 	cmp.w	fp, #0
 801286e:	d00d      	beq.n	801288c <rcl_timer_call+0xc8>
 8012870:	9a04      	ldr	r2, [sp, #16]
 8012872:	9b05      	ldr	r3, [sp, #20]
 8012874:	ebb2 0208 	subs.w	r2, r2, r8
 8012878:	4620      	mov	r0, r4
 801287a:	eb63 0309 	sbc.w	r3, r3, r9
 801287e:	47d8      	blx	fp
 8012880:	4628      	mov	r0, r5
 8012882:	b007      	add	sp, #28
 8012884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012888:	f240 3521 	movw	r5, #801	@ 0x321
 801288c:	4628      	mov	r0, r5
 801288e:	b007      	add	sp, #28
 8012890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012894:	2501      	movs	r5, #1
 8012896:	4628      	mov	r0, r5
 8012898:	b007      	add	sp, #28
 801289a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801289e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80128a2:	4628      	mov	r0, r5
 80128a4:	b007      	add	sp, #28
 80128a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128aa:	250b      	movs	r5, #11
 80128ac:	4628      	mov	r0, r5
 80128ae:	b007      	add	sp, #28
 80128b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b4:	1b80      	subs	r0, r0, r6
 80128b6:	eb6c 0107 	sbc.w	r1, ip, r7
 80128ba:	3801      	subs	r0, #1
 80128bc:	f161 0100 	sbc.w	r1, r1, #0
 80128c0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80128c4:	f7ee f992 	bl	8000bec <__aeabi_ldivmod>
 80128c8:	9b02      	ldr	r3, [sp, #8]
 80128ca:	3001      	adds	r0, #1
 80128cc:	f141 0100 	adc.w	r1, r1, #0
 80128d0:	fb00 f303 	mul.w	r3, r0, r3
 80128d4:	fb01 330a 	mla	r3, r1, sl, r3
 80128d8:	fba0 0a0a 	umull	r0, sl, r0, sl
 80128dc:	1986      	adds	r6, r0, r6
 80128de:	4453      	add	r3, sl
 80128e0:	eb43 0707 	adc.w	r7, r3, r7
 80128e4:	e7b9      	b.n	801285a <rcl_timer_call+0x96>
 80128e6:	bf00      	nop

080128e8 <rcl_timer_is_ready>:
 80128e8:	b570      	push	{r4, r5, r6, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	b378      	cbz	r0, 801294e <rcl_timer_is_ready+0x66>
 80128ee:	6803      	ldr	r3, [r0, #0]
 80128f0:	4604      	mov	r4, r0
 80128f2:	b383      	cbz	r3, 8012956 <rcl_timer_is_ready+0x6e>
 80128f4:	460d      	mov	r5, r1
 80128f6:	b351      	cbz	r1, 801294e <rcl_timer_is_ready+0x66>
 80128f8:	f3bf 8f5b 	dmb	ish
 80128fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012900:	f3bf 8f5b 	dmb	ish
 8012904:	b953      	cbnz	r3, 801291c <rcl_timer_is_ready+0x34>
 8012906:	6803      	ldr	r3, [r0, #0]
 8012908:	4669      	mov	r1, sp
 801290a:	6818      	ldr	r0, [r3, #0]
 801290c:	f7ff ff4e 	bl	80127ac <rcl_clock_get_now>
 8012910:	4606      	mov	r6, r0
 8012912:	b140      	cbz	r0, 8012926 <rcl_timer_is_ready+0x3e>
 8012914:	f240 3321 	movw	r3, #801	@ 0x321
 8012918:	4298      	cmp	r0, r3
 801291a:	d101      	bne.n	8012920 <rcl_timer_is_ready+0x38>
 801291c:	2600      	movs	r6, #0
 801291e:	702e      	strb	r6, [r5, #0]
 8012920:	4630      	mov	r0, r6
 8012922:	b002      	add	sp, #8
 8012924:	bd70      	pop	{r4, r5, r6, pc}
 8012926:	6820      	ldr	r0, [r4, #0]
 8012928:	2105      	movs	r1, #5
 801292a:	3028      	adds	r0, #40	@ 0x28
 801292c:	f001 fc10 	bl	8014150 <__atomic_load_8>
 8012930:	9b00      	ldr	r3, [sp, #0]
 8012932:	1ac0      	subs	r0, r0, r3
 8012934:	9b01      	ldr	r3, [sp, #4]
 8012936:	eb61 0103 	sbc.w	r1, r1, r3
 801293a:	2801      	cmp	r0, #1
 801293c:	f171 0300 	sbcs.w	r3, r1, #0
 8012940:	bfb4      	ite	lt
 8012942:	2301      	movlt	r3, #1
 8012944:	2300      	movge	r3, #0
 8012946:	4630      	mov	r0, r6
 8012948:	702b      	strb	r3, [r5, #0]
 801294a:	b002      	add	sp, #8
 801294c:	bd70      	pop	{r4, r5, r6, pc}
 801294e:	260b      	movs	r6, #11
 8012950:	4630      	mov	r0, r6
 8012952:	b002      	add	sp, #8
 8012954:	bd70      	pop	{r4, r5, r6, pc}
 8012956:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801295a:	e7e1      	b.n	8012920 <rcl_timer_is_ready+0x38>

0801295c <rcl_timer_get_time_until_next_call>:
 801295c:	b570      	push	{r4, r5, r6, lr}
 801295e:	b082      	sub	sp, #8
 8012960:	b330      	cbz	r0, 80129b0 <rcl_timer_get_time_until_next_call+0x54>
 8012962:	6803      	ldr	r3, [r0, #0]
 8012964:	4604      	mov	r4, r0
 8012966:	b33b      	cbz	r3, 80129b8 <rcl_timer_get_time_until_next_call+0x5c>
 8012968:	460d      	mov	r5, r1
 801296a:	b309      	cbz	r1, 80129b0 <rcl_timer_get_time_until_next_call+0x54>
 801296c:	f3bf 8f5b 	dmb	ish
 8012970:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012974:	f3bf 8f5b 	dmb	ish
 8012978:	b9ab      	cbnz	r3, 80129a6 <rcl_timer_get_time_until_next_call+0x4a>
 801297a:	6803      	ldr	r3, [r0, #0]
 801297c:	4669      	mov	r1, sp
 801297e:	6818      	ldr	r0, [r3, #0]
 8012980:	f7ff ff14 	bl	80127ac <rcl_clock_get_now>
 8012984:	4606      	mov	r6, r0
 8012986:	b958      	cbnz	r0, 80129a0 <rcl_timer_get_time_until_next_call+0x44>
 8012988:	6820      	ldr	r0, [r4, #0]
 801298a:	2105      	movs	r1, #5
 801298c:	3028      	adds	r0, #40	@ 0x28
 801298e:	f001 fbdf 	bl	8014150 <__atomic_load_8>
 8012992:	9b00      	ldr	r3, [sp, #0]
 8012994:	1ac0      	subs	r0, r0, r3
 8012996:	9b01      	ldr	r3, [sp, #4]
 8012998:	6028      	str	r0, [r5, #0]
 801299a:	eb61 0103 	sbc.w	r1, r1, r3
 801299e:	6069      	str	r1, [r5, #4]
 80129a0:	4630      	mov	r0, r6
 80129a2:	b002      	add	sp, #8
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
 80129a6:	f240 3621 	movw	r6, #801	@ 0x321
 80129aa:	4630      	mov	r0, r6
 80129ac:	b002      	add	sp, #8
 80129ae:	bd70      	pop	{r4, r5, r6, pc}
 80129b0:	260b      	movs	r6, #11
 80129b2:	4630      	mov	r0, r6
 80129b4:	b002      	add	sp, #8
 80129b6:	bd70      	pop	{r4, r5, r6, pc}
 80129b8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80129bc:	e7f0      	b.n	80129a0 <rcl_timer_get_time_until_next_call+0x44>
 80129be:	bf00      	nop

080129c0 <rcl_timer_get_guard_condition>:
 80129c0:	b130      	cbz	r0, 80129d0 <rcl_timer_get_guard_condition+0x10>
 80129c2:	6800      	ldr	r0, [r0, #0]
 80129c4:	b120      	cbz	r0, 80129d0 <rcl_timer_get_guard_condition+0x10>
 80129c6:	68c3      	ldr	r3, [r0, #12]
 80129c8:	b10b      	cbz	r3, 80129ce <rcl_timer_get_guard_condition+0xe>
 80129ca:	3008      	adds	r0, #8
 80129cc:	4770      	bx	lr
 80129ce:	4618      	mov	r0, r3
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop

080129d4 <rcl_validate_enclave_name_with_size>:
 80129d4:	b378      	cbz	r0, 8012a36 <rcl_validate_enclave_name_with_size+0x62>
 80129d6:	b570      	push	{r4, r5, r6, lr}
 80129d8:	4615      	mov	r5, r2
 80129da:	b0c2      	sub	sp, #264	@ 0x108
 80129dc:	b302      	cbz	r2, 8012a20 <rcl_validate_enclave_name_with_size+0x4c>
 80129de:	461e      	mov	r6, r3
 80129e0:	466a      	mov	r2, sp
 80129e2:	ab01      	add	r3, sp, #4
 80129e4:	460c      	mov	r4, r1
 80129e6:	f002 f849 	bl	8014a7c <rmw_validate_namespace_with_size>
 80129ea:	4684      	mov	ip, r0
 80129ec:	b9e8      	cbnz	r0, 8012a2a <rcl_validate_enclave_name_with_size+0x56>
 80129ee:	9b00      	ldr	r3, [sp, #0]
 80129f0:	b923      	cbnz	r3, 80129fc <rcl_validate_enclave_name_with_size+0x28>
 80129f2:	2300      	movs	r3, #0
 80129f4:	602b      	str	r3, [r5, #0]
 80129f6:	4660      	mov	r0, ip
 80129f8:	b042      	add	sp, #264	@ 0x108
 80129fa:	bd70      	pop	{r4, r5, r6, pc}
 80129fc:	2b07      	cmp	r3, #7
 80129fe:	d007      	beq.n	8012a10 <rcl_validate_enclave_name_with_size+0x3c>
 8012a00:	1e5a      	subs	r2, r3, #1
 8012a02:	2a05      	cmp	r2, #5
 8012a04:	d833      	bhi.n	8012a6e <rcl_validate_enclave_name_with_size+0x9a>
 8012a06:	e8df f002 	tbb	[pc, r2]
 8012a0a:	2c2f      	.short	0x2c2f
 8012a0c:	1a232629 	.word	0x1a232629
 8012a10:	2cff      	cmp	r4, #255	@ 0xff
 8012a12:	d9ee      	bls.n	80129f2 <rcl_validate_enclave_name_with_size+0x1e>
 8012a14:	602b      	str	r3, [r5, #0]
 8012a16:	2e00      	cmp	r6, #0
 8012a18:	d0ed      	beq.n	80129f6 <rcl_validate_enclave_name_with_size+0x22>
 8012a1a:	23fe      	movs	r3, #254	@ 0xfe
 8012a1c:	6033      	str	r3, [r6, #0]
 8012a1e:	e7ea      	b.n	80129f6 <rcl_validate_enclave_name_with_size+0x22>
 8012a20:	f04f 0c0b 	mov.w	ip, #11
 8012a24:	4660      	mov	r0, ip
 8012a26:	b042      	add	sp, #264	@ 0x108
 8012a28:	bd70      	pop	{r4, r5, r6, pc}
 8012a2a:	f7fe fe93 	bl	8011754 <rcl_convert_rmw_ret_to_rcl_ret>
 8012a2e:	4684      	mov	ip, r0
 8012a30:	4660      	mov	r0, ip
 8012a32:	b042      	add	sp, #264	@ 0x108
 8012a34:	bd70      	pop	{r4, r5, r6, pc}
 8012a36:	f04f 0c0b 	mov.w	ip, #11
 8012a3a:	4660      	mov	r0, ip
 8012a3c:	4770      	bx	lr
 8012a3e:	2306      	movs	r3, #6
 8012a40:	602b      	str	r3, [r5, #0]
 8012a42:	2e00      	cmp	r6, #0
 8012a44:	d0d7      	beq.n	80129f6 <rcl_validate_enclave_name_with_size+0x22>
 8012a46:	9b01      	ldr	r3, [sp, #4]
 8012a48:	6033      	str	r3, [r6, #0]
 8012a4a:	4660      	mov	r0, ip
 8012a4c:	b042      	add	sp, #264	@ 0x108
 8012a4e:	bd70      	pop	{r4, r5, r6, pc}
 8012a50:	2305      	movs	r3, #5
 8012a52:	602b      	str	r3, [r5, #0]
 8012a54:	e7f5      	b.n	8012a42 <rcl_validate_enclave_name_with_size+0x6e>
 8012a56:	2304      	movs	r3, #4
 8012a58:	602b      	str	r3, [r5, #0]
 8012a5a:	e7f2      	b.n	8012a42 <rcl_validate_enclave_name_with_size+0x6e>
 8012a5c:	2303      	movs	r3, #3
 8012a5e:	602b      	str	r3, [r5, #0]
 8012a60:	e7ef      	b.n	8012a42 <rcl_validate_enclave_name_with_size+0x6e>
 8012a62:	2302      	movs	r3, #2
 8012a64:	602b      	str	r3, [r5, #0]
 8012a66:	e7ec      	b.n	8012a42 <rcl_validate_enclave_name_with_size+0x6e>
 8012a68:	2301      	movs	r3, #1
 8012a6a:	602b      	str	r3, [r5, #0]
 8012a6c:	e7e9      	b.n	8012a42 <rcl_validate_enclave_name_with_size+0x6e>
 8012a6e:	4a04      	ldr	r2, [pc, #16]	@ (8012a80 <rcl_validate_enclave_name_with_size+0xac>)
 8012a70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012a74:	a802      	add	r0, sp, #8
 8012a76:	f001 fd25 	bl	80144c4 <rcutils_snprintf>
 8012a7a:	f04f 0c01 	mov.w	ip, #1
 8012a7e:	e7ba      	b.n	80129f6 <rcl_validate_enclave_name_with_size+0x22>
 8012a80:	0801a788 	.word	0x0801a788

08012a84 <rcl_validate_enclave_name>:
 8012a84:	b168      	cbz	r0, 8012aa2 <rcl_validate_enclave_name+0x1e>
 8012a86:	b570      	push	{r4, r5, r6, lr}
 8012a88:	460d      	mov	r5, r1
 8012a8a:	4616      	mov	r6, r2
 8012a8c:	4604      	mov	r4, r0
 8012a8e:	f7ed fbb1 	bl	80001f4 <strlen>
 8012a92:	4633      	mov	r3, r6
 8012a94:	4601      	mov	r1, r0
 8012a96:	462a      	mov	r2, r5
 8012a98:	4620      	mov	r0, r4
 8012a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a9e:	f7ff bf99 	b.w	80129d4 <rcl_validate_enclave_name_with_size>
 8012aa2:	200b      	movs	r0, #11
 8012aa4:	4770      	bx	lr
 8012aa6:	bf00      	nop

08012aa8 <rcl_get_zero_initialized_wait_set>:
 8012aa8:	b510      	push	{r4, lr}
 8012aaa:	4c08      	ldr	r4, [pc, #32]	@ (8012acc <rcl_get_zero_initialized_wait_set+0x24>)
 8012aac:	4686      	mov	lr, r0
 8012aae:	4684      	mov	ip, r0
 8012ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ab2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ab8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012abe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ac2:	6823      	ldr	r3, [r4, #0]
 8012ac4:	f8cc 3000 	str.w	r3, [ip]
 8012ac8:	4670      	mov	r0, lr
 8012aca:	bd10      	pop	{r4, pc}
 8012acc:	0801a7e8 	.word	0x0801a7e8

08012ad0 <rcl_wait_set_is_valid>:
 8012ad0:	b118      	cbz	r0, 8012ada <rcl_wait_set_is_valid+0xa>
 8012ad2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012ad4:	3800      	subs	r0, #0
 8012ad6:	bf18      	it	ne
 8012ad8:	2001      	movne	r0, #1
 8012ada:	4770      	bx	lr

08012adc <rcl_wait_set_fini>:
 8012adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae0:	b082      	sub	sp, #8
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	f000 8095 	beq.w	8012c12 <rcl_wait_set_fini+0x136>
 8012ae8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012aea:	4604      	mov	r4, r0
 8012aec:	2e00      	cmp	r6, #0
 8012aee:	f000 808c 	beq.w	8012c0a <rcl_wait_set_fini+0x12e>
 8012af2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8012af4:	f003 f9b6 	bl	8015e64 <rmw_destroy_wait_set>
 8012af8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012afa:	1e06      	subs	r6, r0, #0
 8012afc:	bf18      	it	ne
 8012afe:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8012b02:	2d00      	cmp	r5, #0
 8012b04:	f000 8081 	beq.w	8012c0a <rcl_wait_set_fini+0x12e>
 8012b08:	6820      	ldr	r0, [r4, #0]
 8012b0a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012b0e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012b10:	2700      	movs	r7, #0
 8012b12:	6067      	str	r7, [r4, #4]
 8012b14:	602f      	str	r7, [r5, #0]
 8012b16:	b120      	cbz	r0, 8012b22 <rcl_wait_set_fini+0x46>
 8012b18:	9101      	str	r1, [sp, #4]
 8012b1a:	47c0      	blx	r8
 8012b1c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012b1e:	9901      	ldr	r1, [sp, #4]
 8012b20:	6027      	str	r7, [r4, #0]
 8012b22:	68a8      	ldr	r0, [r5, #8]
 8012b24:	b120      	cbz	r0, 8012b30 <rcl_wait_set_fini+0x54>
 8012b26:	47c0      	blx	r8
 8012b28:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8012b30:	68a0      	ldr	r0, [r4, #8]
 8012b32:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012b34:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012b36:	f04f 0800 	mov.w	r8, #0
 8012b3a:	f8c4 800c 	str.w	r8, [r4, #12]
 8012b3e:	f8c5 800c 	str.w	r8, [r5, #12]
 8012b42:	b128      	cbz	r0, 8012b50 <rcl_wait_set_fini+0x74>
 8012b44:	47b8      	blx	r7
 8012b46:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012b48:	f8c4 8008 	str.w	r8, [r4, #8]
 8012b4c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012b4e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012b50:	6968      	ldr	r0, [r5, #20]
 8012b52:	f04f 0800 	mov.w	r8, #0
 8012b56:	f8c5 8010 	str.w	r8, [r5, #16]
 8012b5a:	b128      	cbz	r0, 8012b68 <rcl_wait_set_fini+0x8c>
 8012b5c:	47b8      	blx	r7
 8012b5e:	f8c5 8014 	str.w	r8, [r5, #20]
 8012b62:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012b64:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012b66:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012b68:	6920      	ldr	r0, [r4, #16]
 8012b6a:	f04f 0800 	mov.w	r8, #0
 8012b6e:	f8c4 8014 	str.w	r8, [r4, #20]
 8012b72:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8012b76:	b128      	cbz	r0, 8012b84 <rcl_wait_set_fini+0xa8>
 8012b78:	47b8      	blx	r7
 8012b7a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012b7c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012b80:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012b82:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012b84:	69a0      	ldr	r0, [r4, #24]
 8012b86:	f04f 0800 	mov.w	r8, #0
 8012b8a:	f8c4 801c 	str.w	r8, [r4, #28]
 8012b8e:	f8c5 8018 	str.w	r8, [r5, #24]
 8012b92:	b128      	cbz	r0, 8012ba0 <rcl_wait_set_fini+0xc4>
 8012b94:	9101      	str	r1, [sp, #4]
 8012b96:	47b8      	blx	r7
 8012b98:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012b9a:	9901      	ldr	r1, [sp, #4]
 8012b9c:	f8c4 8018 	str.w	r8, [r4, #24]
 8012ba0:	6a28      	ldr	r0, [r5, #32]
 8012ba2:	b120      	cbz	r0, 8012bae <rcl_wait_set_fini+0xd2>
 8012ba4:	47b8      	blx	r7
 8012ba6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012ba8:	2300      	movs	r3, #0
 8012baa:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8012bae:	6a20      	ldr	r0, [r4, #32]
 8012bb0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012bb4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012bb6:	2700      	movs	r7, #0
 8012bb8:	6267      	str	r7, [r4, #36]	@ 0x24
 8012bba:	626f      	str	r7, [r5, #36]	@ 0x24
 8012bbc:	b120      	cbz	r0, 8012bc8 <rcl_wait_set_fini+0xec>
 8012bbe:	9101      	str	r1, [sp, #4]
 8012bc0:	47c0      	blx	r8
 8012bc2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012bc4:	9901      	ldr	r1, [sp, #4]
 8012bc6:	6227      	str	r7, [r4, #32]
 8012bc8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8012bca:	b120      	cbz	r0, 8012bd6 <rcl_wait_set_fini+0xfa>
 8012bcc:	47c0      	blx	r8
 8012bce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012bd6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012bd8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012bdc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012bde:	2700      	movs	r7, #0
 8012be0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8012be2:	632f      	str	r7, [r5, #48]	@ 0x30
 8012be4:	b120      	cbz	r0, 8012bf0 <rcl_wait_set_fini+0x114>
 8012be6:	9101      	str	r1, [sp, #4]
 8012be8:	47c0      	blx	r8
 8012bea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012bec:	9901      	ldr	r1, [sp, #4]
 8012bee:	62a7      	str	r7, [r4, #40]	@ 0x28
 8012bf0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8012bf2:	b120      	cbz	r0, 8012bfe <rcl_wait_set_fini+0x122>
 8012bf4:	47c0      	blx	r8
 8012bf6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8012bfe:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8012c00:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012c02:	4628      	mov	r0, r5
 8012c04:	4798      	blx	r3
 8012c06:	2300      	movs	r3, #0
 8012c08:	6323      	str	r3, [r4, #48]	@ 0x30
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	b002      	add	sp, #8
 8012c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c12:	260b      	movs	r6, #11
 8012c14:	4630      	mov	r0, r6
 8012c16:	b002      	add	sp, #8
 8012c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c1c <rcl_wait_set_add_subscription>:
 8012c1c:	b318      	cbz	r0, 8012c66 <rcl_wait_set_add_subscription+0x4a>
 8012c1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c20:	b570      	push	{r4, r5, r6, lr}
 8012c22:	4604      	mov	r4, r0
 8012c24:	b30b      	cbz	r3, 8012c6a <rcl_wait_set_add_subscription+0x4e>
 8012c26:	b319      	cbz	r1, 8012c70 <rcl_wait_set_add_subscription+0x54>
 8012c28:	681d      	ldr	r5, [r3, #0]
 8012c2a:	6840      	ldr	r0, [r0, #4]
 8012c2c:	4285      	cmp	r5, r0
 8012c2e:	d217      	bcs.n	8012c60 <rcl_wait_set_add_subscription+0x44>
 8012c30:	6820      	ldr	r0, [r4, #0]
 8012c32:	1c6e      	adds	r6, r5, #1
 8012c34:	601e      	str	r6, [r3, #0]
 8012c36:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012c3a:	b102      	cbz	r2, 8012c3e <rcl_wait_set_add_subscription+0x22>
 8012c3c:	6015      	str	r5, [r2, #0]
 8012c3e:	4608      	mov	r0, r1
 8012c40:	f7ff fd14 	bl	801266c <rcl_subscription_get_rmw_handle>
 8012c44:	b150      	cbz	r0, 8012c5c <rcl_wait_set_add_subscription+0x40>
 8012c46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012c48:	6842      	ldr	r2, [r0, #4]
 8012c4a:	689b      	ldr	r3, [r3, #8]
 8012c4c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c50:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012c52:	6853      	ldr	r3, [r2, #4]
 8012c54:	3301      	adds	r3, #1
 8012c56:	2000      	movs	r0, #0
 8012c58:	6053      	str	r3, [r2, #4]
 8012c5a:	bd70      	pop	{r4, r5, r6, pc}
 8012c5c:	2001      	movs	r0, #1
 8012c5e:	bd70      	pop	{r4, r5, r6, pc}
 8012c60:	f240 3086 	movw	r0, #902	@ 0x386
 8012c64:	bd70      	pop	{r4, r5, r6, pc}
 8012c66:	200b      	movs	r0, #11
 8012c68:	4770      	bx	lr
 8012c6a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012c6e:	bd70      	pop	{r4, r5, r6, pc}
 8012c70:	200b      	movs	r0, #11
 8012c72:	bd70      	pop	{r4, r5, r6, pc}

08012c74 <rcl_wait_set_clear>:
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d073      	beq.n	8012d60 <rcl_wait_set_clear+0xec>
 8012c78:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c7a:	b510      	push	{r4, lr}
 8012c7c:	4604      	mov	r4, r0
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d070      	beq.n	8012d64 <rcl_wait_set_clear+0xf0>
 8012c82:	6800      	ldr	r0, [r0, #0]
 8012c84:	b138      	cbz	r0, 8012c96 <rcl_wait_set_clear+0x22>
 8012c86:	6862      	ldr	r2, [r4, #4]
 8012c88:	2100      	movs	r1, #0
 8012c8a:	0092      	lsls	r2, r2, #2
 8012c8c:	f006 f954 	bl	8018f38 <memset>
 8012c90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012c92:	2200      	movs	r2, #0
 8012c94:	601a      	str	r2, [r3, #0]
 8012c96:	68a0      	ldr	r0, [r4, #8]
 8012c98:	b138      	cbz	r0, 8012caa <rcl_wait_set_clear+0x36>
 8012c9a:	68e2      	ldr	r2, [r4, #12]
 8012c9c:	2100      	movs	r1, #0
 8012c9e:	0092      	lsls	r2, r2, #2
 8012ca0:	f006 f94a 	bl	8018f38 <memset>
 8012ca4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	60da      	str	r2, [r3, #12]
 8012caa:	69a0      	ldr	r0, [r4, #24]
 8012cac:	b138      	cbz	r0, 8012cbe <rcl_wait_set_clear+0x4a>
 8012cae:	69e2      	ldr	r2, [r4, #28]
 8012cb0:	2100      	movs	r1, #0
 8012cb2:	0092      	lsls	r2, r2, #2
 8012cb4:	f006 f940 	bl	8018f38 <memset>
 8012cb8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012cba:	2200      	movs	r2, #0
 8012cbc:	619a      	str	r2, [r3, #24]
 8012cbe:	6a20      	ldr	r0, [r4, #32]
 8012cc0:	b138      	cbz	r0, 8012cd2 <rcl_wait_set_clear+0x5e>
 8012cc2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012cc4:	2100      	movs	r1, #0
 8012cc6:	0092      	lsls	r2, r2, #2
 8012cc8:	f006 f936 	bl	8018f38 <memset>
 8012ccc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012cce:	2200      	movs	r2, #0
 8012cd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8012cd2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012cd4:	b138      	cbz	r0, 8012ce6 <rcl_wait_set_clear+0x72>
 8012cd6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012cd8:	2100      	movs	r1, #0
 8012cda:	0092      	lsls	r2, r2, #2
 8012cdc:	f006 f92c 	bl	8018f38 <memset>
 8012ce0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	631a      	str	r2, [r3, #48]	@ 0x30
 8012ce6:	6920      	ldr	r0, [r4, #16]
 8012ce8:	b138      	cbz	r0, 8012cfa <rcl_wait_set_clear+0x86>
 8012cea:	6962      	ldr	r2, [r4, #20]
 8012cec:	2100      	movs	r1, #0
 8012cee:	0092      	lsls	r2, r2, #2
 8012cf0:	f006 f922 	bl	8018f38 <memset>
 8012cf4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	641a      	str	r2, [r3, #64]	@ 0x40
 8012cfa:	6898      	ldr	r0, [r3, #8]
 8012cfc:	b138      	cbz	r0, 8012d0e <rcl_wait_set_clear+0x9a>
 8012cfe:	685a      	ldr	r2, [r3, #4]
 8012d00:	2100      	movs	r1, #0
 8012d02:	0092      	lsls	r2, r2, #2
 8012d04:	f006 f918 	bl	8018f38 <memset>
 8012d08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	605a      	str	r2, [r3, #4]
 8012d0e:	6958      	ldr	r0, [r3, #20]
 8012d10:	b138      	cbz	r0, 8012d22 <rcl_wait_set_clear+0xae>
 8012d12:	691a      	ldr	r2, [r3, #16]
 8012d14:	2100      	movs	r1, #0
 8012d16:	0092      	lsls	r2, r2, #2
 8012d18:	f006 f90e 	bl	8018f38 <memset>
 8012d1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d1e:	2200      	movs	r2, #0
 8012d20:	611a      	str	r2, [r3, #16]
 8012d22:	6a18      	ldr	r0, [r3, #32]
 8012d24:	b138      	cbz	r0, 8012d36 <rcl_wait_set_clear+0xc2>
 8012d26:	69da      	ldr	r2, [r3, #28]
 8012d28:	2100      	movs	r1, #0
 8012d2a:	0092      	lsls	r2, r2, #2
 8012d2c:	f006 f904 	bl	8018f38 <memset>
 8012d30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d32:	2200      	movs	r2, #0
 8012d34:	61da      	str	r2, [r3, #28]
 8012d36:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012d38:	b138      	cbz	r0, 8012d4a <rcl_wait_set_clear+0xd6>
 8012d3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012d3c:	2100      	movs	r1, #0
 8012d3e:	0092      	lsls	r2, r2, #2
 8012d40:	f006 f8fa 	bl	8018f38 <memset>
 8012d44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d46:	2200      	movs	r2, #0
 8012d48:	629a      	str	r2, [r3, #40]	@ 0x28
 8012d4a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012d4c:	b138      	cbz	r0, 8012d5e <rcl_wait_set_clear+0xea>
 8012d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012d50:	2100      	movs	r1, #0
 8012d52:	0092      	lsls	r2, r2, #2
 8012d54:	f006 f8f0 	bl	8018f38 <memset>
 8012d58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d5a:	2000      	movs	r0, #0
 8012d5c:	6358      	str	r0, [r3, #52]	@ 0x34
 8012d5e:	bd10      	pop	{r4, pc}
 8012d60:	200b      	movs	r0, #11
 8012d62:	4770      	bx	lr
 8012d64:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012d68:	bd10      	pop	{r4, pc}
 8012d6a:	bf00      	nop

08012d6c <rcl_wait_set_resize>:
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	f000 8185 	beq.w	801307c <rcl_wait_set_resize+0x310>
 8012d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d76:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8012d78:	b083      	sub	sp, #12
 8012d7a:	4605      	mov	r5, r0
 8012d7c:	2c00      	cmp	r4, #0
 8012d7e:	f000 817f 	beq.w	8013080 <rcl_wait_set_resize+0x314>
 8012d82:	f04f 0900 	mov.w	r9, #0
 8012d86:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8012d8a:	461f      	mov	r7, r3
 8012d8c:	4688      	mov	r8, r1
 8012d8e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8012d92:	4616      	mov	r6, r2
 8012d94:	f8c0 9004 	str.w	r9, [r0, #4]
 8012d98:	f8c4 9000 	str.w	r9, [r4]
 8012d9c:	2900      	cmp	r1, #0
 8012d9e:	f000 80bd 	beq.w	8012f1c <rcl_wait_set_resize+0x1b0>
 8012da2:	008c      	lsls	r4, r1, #2
 8012da4:	6800      	ldr	r0, [r0, #0]
 8012da6:	9301      	str	r3, [sp, #4]
 8012da8:	4652      	mov	r2, sl
 8012daa:	4621      	mov	r1, r4
 8012dac:	4798      	blx	r3
 8012dae:	9b01      	ldr	r3, [sp, #4]
 8012db0:	6028      	str	r0, [r5, #0]
 8012db2:	2800      	cmp	r0, #0
 8012db4:	f000 80cb 	beq.w	8012f4e <rcl_wait_set_resize+0x1e2>
 8012db8:	4622      	mov	r2, r4
 8012dba:	4649      	mov	r1, r9
 8012dbc:	9301      	str	r3, [sp, #4]
 8012dbe:	f006 f8bb 	bl	8018f38 <memset>
 8012dc2:	f8c5 8004 	str.w	r8, [r5, #4]
 8012dc6:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8012dca:	9b01      	ldr	r3, [sp, #4]
 8012dcc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8012dd0:	f8c8 9004 	str.w	r9, [r8, #4]
 8012dd4:	4652      	mov	r2, sl
 8012dd6:	4621      	mov	r1, r4
 8012dd8:	4798      	blx	r3
 8012dda:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012ddc:	f8c8 0008 	str.w	r0, [r8, #8]
 8012de0:	689b      	ldr	r3, [r3, #8]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	f000 80ac 	beq.w	8012f40 <rcl_wait_set_resize+0x1d4>
 8012de8:	4622      	mov	r2, r4
 8012dea:	4649      	mov	r1, r9
 8012dec:	4618      	mov	r0, r3
 8012dee:	f006 f8a3 	bl	8018f38 <memset>
 8012df2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012df4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012df8:	f04f 0800 	mov.w	r8, #0
 8012dfc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8012e00:	f8c5 800c 	str.w	r8, [r5, #12]
 8012e04:	f8c4 800c 	str.w	r8, [r4, #12]
 8012e08:	2e00      	cmp	r6, #0
 8012e0a:	f040 80a4 	bne.w	8012f56 <rcl_wait_set_resize+0x1ea>
 8012e0e:	68a8      	ldr	r0, [r5, #8]
 8012e10:	b128      	cbz	r0, 8012e1e <rcl_wait_set_resize+0xb2>
 8012e12:	4649      	mov	r1, r9
 8012e14:	4790      	blx	r2
 8012e16:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012e18:	60ae      	str	r6, [r5, #8]
 8012e1a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012e1e:	f04f 0800 	mov.w	r8, #0
 8012e22:	19f6      	adds	r6, r6, r7
 8012e24:	f8c4 8010 	str.w	r8, [r4, #16]
 8012e28:	f040 80ac 	bne.w	8012f84 <rcl_wait_set_resize+0x218>
 8012e2c:	6960      	ldr	r0, [r4, #20]
 8012e2e:	b130      	cbz	r0, 8012e3e <rcl_wait_set_resize+0xd2>
 8012e30:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8012e32:	4649      	mov	r1, r9
 8012e34:	4798      	blx	r3
 8012e36:	6166      	str	r6, [r4, #20]
 8012e38:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012e3a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012e3e:	2600      	movs	r6, #0
 8012e40:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012e44:	616e      	str	r6, [r5, #20]
 8012e46:	6426      	str	r6, [r4, #64]	@ 0x40
 8012e48:	2f00      	cmp	r7, #0
 8012e4a:	f040 80ad 	bne.w	8012fa8 <rcl_wait_set_resize+0x23c>
 8012e4e:	6928      	ldr	r0, [r5, #16]
 8012e50:	b138      	cbz	r0, 8012e62 <rcl_wait_set_resize+0xf6>
 8012e52:	4649      	mov	r1, r9
 8012e54:	47d0      	blx	sl
 8012e56:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012e58:	612f      	str	r7, [r5, #16]
 8012e5a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012e5e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012e62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e64:	2600      	movs	r6, #0
 8012e66:	61ee      	str	r6, [r5, #28]
 8012e68:	61a6      	str	r6, [r4, #24]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	f040 80af 	bne.w	8012fce <rcl_wait_set_resize+0x262>
 8012e70:	69a8      	ldr	r0, [r5, #24]
 8012e72:	b120      	cbz	r0, 8012e7e <rcl_wait_set_resize+0x112>
 8012e74:	4649      	mov	r1, r9
 8012e76:	47d0      	blx	sl
 8012e78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012e7c:	61ab      	str	r3, [r5, #24]
 8012e7e:	6a20      	ldr	r0, [r4, #32]
 8012e80:	b128      	cbz	r0, 8012e8e <rcl_wait_set_resize+0x122>
 8012e82:	4649      	mov	r1, r9
 8012e84:	47d0      	blx	sl
 8012e86:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012e88:	2300      	movs	r3, #0
 8012e8a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8012e8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e90:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012e92:	2600      	movs	r6, #0
 8012e94:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012e98:	626e      	str	r6, [r5, #36]	@ 0x24
 8012e9a:	6266      	str	r6, [r4, #36]	@ 0x24
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	f000 80b6 	beq.w	801300e <rcl_wait_set_resize+0x2a2>
 8012ea2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8012ea6:	6a28      	ldr	r0, [r5, #32]
 8012ea8:	463a      	mov	r2, r7
 8012eaa:	4651      	mov	r1, sl
 8012eac:	47c8      	blx	r9
 8012eae:	6228      	str	r0, [r5, #32]
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	d04c      	beq.n	8012f4e <rcl_wait_set_resize+0x1e2>
 8012eb4:	4652      	mov	r2, sl
 8012eb6:	4631      	mov	r1, r6
 8012eb8:	f006 f83e 	bl	8018f38 <memset>
 8012ebc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012ebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ec0:	626b      	str	r3, [r5, #36]	@ 0x24
 8012ec2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012ec4:	62a6      	str	r6, [r4, #40]	@ 0x28
 8012ec6:	463a      	mov	r2, r7
 8012ec8:	4651      	mov	r1, sl
 8012eca:	47c8      	blx	r9
 8012ecc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012ece:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8012ed0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8012ed2:	2c00      	cmp	r4, #0
 8012ed4:	f000 80f0 	beq.w	80130b8 <rcl_wait_set_resize+0x34c>
 8012ed8:	4620      	mov	r0, r4
 8012eda:	4652      	mov	r2, sl
 8012edc:	4631      	mov	r1, r6
 8012ede:	f006 f82b 	bl	8018f38 <memset>
 8012ee2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012ee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ee6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012ee8:	2600      	movs	r6, #0
 8012eea:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012eee:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8012ef0:	6326      	str	r6, [r4, #48]	@ 0x30
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	f040 809d 	bne.w	8013032 <rcl_wait_set_resize+0x2c6>
 8012ef8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012efa:	b120      	cbz	r0, 8012f06 <rcl_wait_set_resize+0x19a>
 8012efc:	4639      	mov	r1, r7
 8012efe:	47c0      	blx	r8
 8012f00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012f04:	62ab      	str	r3, [r5, #40]	@ 0x28
 8012f06:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8012f08:	b310      	cbz	r0, 8012f50 <rcl_wait_set_resize+0x1e4>
 8012f0a:	4639      	mov	r1, r7
 8012f0c:	47c0      	blx	r8
 8012f0e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012f10:	2000      	movs	r0, #0
 8012f12:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8012f16:	b003      	add	sp, #12
 8012f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f1c:	6800      	ldr	r0, [r0, #0]
 8012f1e:	b120      	cbz	r0, 8012f2a <rcl_wait_set_resize+0x1be>
 8012f20:	4651      	mov	r1, sl
 8012f22:	47d8      	blx	fp
 8012f24:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012f26:	f8c5 8000 	str.w	r8, [r5]
 8012f2a:	68a0      	ldr	r0, [r4, #8]
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	f43f af61 	beq.w	8012df4 <rcl_wait_set_resize+0x88>
 8012f32:	4651      	mov	r1, sl
 8012f34:	47d8      	blx	fp
 8012f36:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012f38:	2300      	movs	r3, #0
 8012f3a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8012f3e:	e759      	b.n	8012df4 <rcl_wait_set_resize+0x88>
 8012f40:	6828      	ldr	r0, [r5, #0]
 8012f42:	9301      	str	r3, [sp, #4]
 8012f44:	4651      	mov	r1, sl
 8012f46:	47d8      	blx	fp
 8012f48:	9b01      	ldr	r3, [sp, #4]
 8012f4a:	e9c5 3300 	strd	r3, r3, [r5]
 8012f4e:	200a      	movs	r0, #10
 8012f50:	b003      	add	sp, #12
 8012f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f56:	00b4      	lsls	r4, r6, #2
 8012f58:	68a8      	ldr	r0, [r5, #8]
 8012f5a:	464a      	mov	r2, r9
 8012f5c:	4621      	mov	r1, r4
 8012f5e:	4798      	blx	r3
 8012f60:	60a8      	str	r0, [r5, #8]
 8012f62:	2800      	cmp	r0, #0
 8012f64:	d0f3      	beq.n	8012f4e <rcl_wait_set_resize+0x1e2>
 8012f66:	4622      	mov	r2, r4
 8012f68:	4641      	mov	r1, r8
 8012f6a:	f005 ffe5 	bl	8018f38 <memset>
 8012f6e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012f70:	60ee      	str	r6, [r5, #12]
 8012f72:	f04f 0800 	mov.w	r8, #0
 8012f76:	19f6      	adds	r6, r6, r7
 8012f78:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012f7c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012f80:	f43f af54 	beq.w	8012e2c <rcl_wait_set_resize+0xc0>
 8012f84:	00b6      	lsls	r6, r6, #2
 8012f86:	464a      	mov	r2, r9
 8012f88:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8012f8a:	6960      	ldr	r0, [r4, #20]
 8012f8c:	4631      	mov	r1, r6
 8012f8e:	4798      	blx	r3
 8012f90:	4681      	mov	r9, r0
 8012f92:	6160      	str	r0, [r4, #20]
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d076      	beq.n	8013086 <rcl_wait_set_resize+0x31a>
 8012f98:	4632      	mov	r2, r6
 8012f9a:	4641      	mov	r1, r8
 8012f9c:	f005 ffcc 	bl	8018f38 <memset>
 8012fa0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012fa2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012fa6:	e74a      	b.n	8012e3e <rcl_wait_set_resize+0xd2>
 8012fa8:	00bc      	lsls	r4, r7, #2
 8012faa:	6928      	ldr	r0, [r5, #16]
 8012fac:	464a      	mov	r2, r9
 8012fae:	4621      	mov	r1, r4
 8012fb0:	47c0      	blx	r8
 8012fb2:	6128      	str	r0, [r5, #16]
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	d0ca      	beq.n	8012f4e <rcl_wait_set_resize+0x1e2>
 8012fb8:	4622      	mov	r2, r4
 8012fba:	4631      	mov	r1, r6
 8012fbc:	f005 ffbc 	bl	8018f38 <memset>
 8012fc0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012fc2:	616f      	str	r7, [r5, #20]
 8012fc4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012fc8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012fcc:	e749      	b.n	8012e62 <rcl_wait_set_resize+0xf6>
 8012fce:	009c      	lsls	r4, r3, #2
 8012fd0:	69a8      	ldr	r0, [r5, #24]
 8012fd2:	464a      	mov	r2, r9
 8012fd4:	4621      	mov	r1, r4
 8012fd6:	47c0      	blx	r8
 8012fd8:	61a8      	str	r0, [r5, #24]
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	d0b7      	beq.n	8012f4e <rcl_wait_set_resize+0x1e2>
 8012fde:	4622      	mov	r2, r4
 8012fe0:	4631      	mov	r1, r6
 8012fe2:	f005 ffa9 	bl	8018f38 <memset>
 8012fe6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8012fe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012fea:	61eb      	str	r3, [r5, #28]
 8012fec:	6a38      	ldr	r0, [r7, #32]
 8012fee:	61fe      	str	r6, [r7, #28]
 8012ff0:	464a      	mov	r2, r9
 8012ff2:	4621      	mov	r1, r4
 8012ff4:	47c0      	blx	r8
 8012ff6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012ff8:	6238      	str	r0, [r7, #32]
 8012ffa:	6a1f      	ldr	r7, [r3, #32]
 8012ffc:	2f00      	cmp	r7, #0
 8012ffe:	d054      	beq.n	80130aa <rcl_wait_set_resize+0x33e>
 8013000:	4622      	mov	r2, r4
 8013002:	4631      	mov	r1, r6
 8013004:	4638      	mov	r0, r7
 8013006:	f005 ff97 	bl	8018f38 <memset>
 801300a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801300c:	e73f      	b.n	8012e8e <rcl_wait_set_resize+0x122>
 801300e:	6a28      	ldr	r0, [r5, #32]
 8013010:	b120      	cbz	r0, 801301c <rcl_wait_set_resize+0x2b0>
 8013012:	4639      	mov	r1, r7
 8013014:	47c0      	blx	r8
 8013016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013018:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801301a:	622b      	str	r3, [r5, #32]
 801301c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801301e:	2800      	cmp	r0, #0
 8013020:	f43f af60 	beq.w	8012ee4 <rcl_wait_set_resize+0x178>
 8013024:	4639      	mov	r1, r7
 8013026:	47c0      	blx	r8
 8013028:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801302a:	2300      	movs	r3, #0
 801302c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013030:	e758      	b.n	8012ee4 <rcl_wait_set_resize+0x178>
 8013032:	009c      	lsls	r4, r3, #2
 8013034:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013036:	463a      	mov	r2, r7
 8013038:	4621      	mov	r1, r4
 801303a:	47c8      	blx	r9
 801303c:	62a8      	str	r0, [r5, #40]	@ 0x28
 801303e:	2800      	cmp	r0, #0
 8013040:	d085      	beq.n	8012f4e <rcl_wait_set_resize+0x1e2>
 8013042:	4622      	mov	r2, r4
 8013044:	4631      	mov	r1, r6
 8013046:	f005 ff77 	bl	8018f38 <memset>
 801304a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801304e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013050:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013052:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013056:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801305a:	463a      	mov	r2, r7
 801305c:	4621      	mov	r1, r4
 801305e:	47c8      	blx	r9
 8013060:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013062:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013068:	b36b      	cbz	r3, 80130c6 <rcl_wait_set_resize+0x35a>
 801306a:	4622      	mov	r2, r4
 801306c:	4631      	mov	r1, r6
 801306e:	4618      	mov	r0, r3
 8013070:	f005 ff62 	bl	8018f38 <memset>
 8013074:	4630      	mov	r0, r6
 8013076:	b003      	add	sp, #12
 8013078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801307c:	200b      	movs	r0, #11
 801307e:	4770      	bx	lr
 8013080:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013084:	e764      	b.n	8012f50 <rcl_wait_set_resize+0x1e4>
 8013086:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013088:	68a8      	ldr	r0, [r5, #8]
 801308a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801308c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801308e:	4798      	blx	r3
 8013090:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013092:	6928      	ldr	r0, [r5, #16]
 8013094:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013096:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013098:	f8c5 900c 	str.w	r9, [r5, #12]
 801309c:	f8c5 9008 	str.w	r9, [r5, #8]
 80130a0:	4790      	blx	r2
 80130a2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80130a6:	200a      	movs	r0, #10
 80130a8:	e752      	b.n	8012f50 <rcl_wait_set_resize+0x1e4>
 80130aa:	69a8      	ldr	r0, [r5, #24]
 80130ac:	4649      	mov	r1, r9
 80130ae:	47d0      	blx	sl
 80130b0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80130b4:	200a      	movs	r0, #10
 80130b6:	e74b      	b.n	8012f50 <rcl_wait_set_resize+0x1e4>
 80130b8:	6a28      	ldr	r0, [r5, #32]
 80130ba:	4639      	mov	r1, r7
 80130bc:	47c0      	blx	r8
 80130be:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80130c2:	200a      	movs	r0, #10
 80130c4:	e744      	b.n	8012f50 <rcl_wait_set_resize+0x1e4>
 80130c6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80130c8:	9301      	str	r3, [sp, #4]
 80130ca:	4639      	mov	r1, r7
 80130cc:	47c0      	blx	r8
 80130ce:	9b01      	ldr	r3, [sp, #4]
 80130d0:	200a      	movs	r0, #10
 80130d2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80130d6:	e73b      	b.n	8012f50 <rcl_wait_set_resize+0x1e4>

080130d8 <rcl_wait_set_init>:
 80130d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130dc:	b084      	sub	sp, #16
 80130de:	4604      	mov	r4, r0
 80130e0:	a810      	add	r0, sp, #64	@ 0x40
 80130e2:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80130e6:	460f      	mov	r7, r1
 80130e8:	4690      	mov	r8, r2
 80130ea:	4699      	mov	r9, r3
 80130ec:	f7f9 feb0 	bl	800ce50 <rcutils_allocator_is_valid>
 80130f0:	2800      	cmp	r0, #0
 80130f2:	d06b      	beq.n	80131cc <rcl_wait_set_init+0xf4>
 80130f4:	2c00      	cmp	r4, #0
 80130f6:	d069      	beq.n	80131cc <rcl_wait_set_init+0xf4>
 80130f8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80130fa:	b125      	cbz	r5, 8013106 <rcl_wait_set_init+0x2e>
 80130fc:	2564      	movs	r5, #100	@ 0x64
 80130fe:	4628      	mov	r0, r5
 8013100:	b004      	add	sp, #16
 8013102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013106:	f1ba 0f00 	cmp.w	sl, #0
 801310a:	d05f      	beq.n	80131cc <rcl_wait_set_init+0xf4>
 801310c:	4650      	mov	r0, sl
 801310e:	f7fe fb3f 	bl	8011790 <rcl_context_is_valid>
 8013112:	2800      	cmp	r0, #0
 8013114:	d067      	beq.n	80131e6 <rcl_wait_set_init+0x10e>
 8013116:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013118:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801311a:	205c      	movs	r0, #92	@ 0x5c
 801311c:	4798      	blx	r3
 801311e:	6320      	str	r0, [r4, #48]	@ 0x30
 8013120:	2800      	cmp	r0, #0
 8013122:	d062      	beq.n	80131ea <rcl_wait_set_init+0x112>
 8013124:	4629      	mov	r1, r5
 8013126:	225c      	movs	r2, #92	@ 0x5c
 8013128:	f005 ff06 	bl	8018f38 <memset>
 801312c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013130:	eb03 0e02 	add.w	lr, r3, r2
 8013134:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013136:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013138:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801313c:	449e      	add	lr, r3
 801313e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013142:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013146:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801314a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801314e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8013152:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8013156:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801315a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801315e:	f8da a000 	ldr.w	sl, [sl]
 8013162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013164:	44c6      	add	lr, r8
 8013166:	f8dc 3000 	ldr.w	r3, [ip]
 801316a:	602b      	str	r3, [r5, #0]
 801316c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013170:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8013174:	f002 fe6c 	bl	8015e50 <rmw_create_wait_set>
 8013178:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801317a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801317c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801317e:	b350      	cbz	r0, 80131d6 <rcl_wait_set_init+0xfe>
 8013180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013182:	9302      	str	r3, [sp, #8]
 8013184:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013186:	9301      	str	r3, [sp, #4]
 8013188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801318a:	9300      	str	r3, [sp, #0]
 801318c:	4642      	mov	r2, r8
 801318e:	464b      	mov	r3, r9
 8013190:	4639      	mov	r1, r7
 8013192:	4620      	mov	r0, r4
 8013194:	f7ff fdea 	bl	8012d6c <rcl_wait_set_resize>
 8013198:	4605      	mov	r5, r0
 801319a:	2800      	cmp	r0, #0
 801319c:	d0af      	beq.n	80130fe <rcl_wait_set_init+0x26>
 801319e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80131a0:	bb2b      	cbnz	r3, 80131ee <rcl_wait_set_init+0x116>
 80131a2:	2600      	movs	r6, #0
 80131a4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80131a8:	9600      	str	r6, [sp, #0]
 80131aa:	4633      	mov	r3, r6
 80131ac:	4632      	mov	r2, r6
 80131ae:	4631      	mov	r1, r6
 80131b0:	4620      	mov	r0, r4
 80131b2:	f7ff fddb 	bl	8012d6c <rcl_wait_set_resize>
 80131b6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80131b8:	2800      	cmp	r0, #0
 80131ba:	d0a0      	beq.n	80130fe <rcl_wait_set_init+0x26>
 80131bc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80131be:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80131c0:	4798      	blx	r3
 80131c2:	4628      	mov	r0, r5
 80131c4:	6326      	str	r6, [r4, #48]	@ 0x30
 80131c6:	b004      	add	sp, #16
 80131c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131cc:	250b      	movs	r5, #11
 80131ce:	4628      	mov	r0, r5
 80131d0:	b004      	add	sp, #16
 80131d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131d6:	2501      	movs	r5, #1
 80131d8:	f002 fe44 	bl	8015e64 <rmw_destroy_wait_set>
 80131dc:	2800      	cmp	r0, #0
 80131de:	bf18      	it	ne
 80131e0:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80131e4:	e7dd      	b.n	80131a2 <rcl_wait_set_init+0xca>
 80131e6:	2565      	movs	r5, #101	@ 0x65
 80131e8:	e789      	b.n	80130fe <rcl_wait_set_init+0x26>
 80131ea:	250a      	movs	r5, #10
 80131ec:	e787      	b.n	80130fe <rcl_wait_set_init+0x26>
 80131ee:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80131f0:	e7f2      	b.n	80131d8 <rcl_wait_set_init+0x100>
 80131f2:	bf00      	nop

080131f4 <rcl_wait_set_add_guard_condition>:
 80131f4:	b318      	cbz	r0, 801323e <rcl_wait_set_add_guard_condition+0x4a>
 80131f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80131f8:	b570      	push	{r4, r5, r6, lr}
 80131fa:	4604      	mov	r4, r0
 80131fc:	b30b      	cbz	r3, 8013242 <rcl_wait_set_add_guard_condition+0x4e>
 80131fe:	b319      	cbz	r1, 8013248 <rcl_wait_set_add_guard_condition+0x54>
 8013200:	68dd      	ldr	r5, [r3, #12]
 8013202:	68c0      	ldr	r0, [r0, #12]
 8013204:	4285      	cmp	r5, r0
 8013206:	d217      	bcs.n	8013238 <rcl_wait_set_add_guard_condition+0x44>
 8013208:	68a0      	ldr	r0, [r4, #8]
 801320a:	1c6e      	adds	r6, r5, #1
 801320c:	60de      	str	r6, [r3, #12]
 801320e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013212:	b102      	cbz	r2, 8013216 <rcl_wait_set_add_guard_condition+0x22>
 8013214:	6015      	str	r5, [r2, #0]
 8013216:	4608      	mov	r0, r1
 8013218:	f004 fe5e 	bl	8017ed8 <rcl_guard_condition_get_rmw_handle>
 801321c:	b150      	cbz	r0, 8013234 <rcl_wait_set_add_guard_condition+0x40>
 801321e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013220:	6842      	ldr	r2, [r0, #4]
 8013222:	695b      	ldr	r3, [r3, #20]
 8013224:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013228:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801322a:	6913      	ldr	r3, [r2, #16]
 801322c:	3301      	adds	r3, #1
 801322e:	2000      	movs	r0, #0
 8013230:	6113      	str	r3, [r2, #16]
 8013232:	bd70      	pop	{r4, r5, r6, pc}
 8013234:	2001      	movs	r0, #1
 8013236:	bd70      	pop	{r4, r5, r6, pc}
 8013238:	f240 3086 	movw	r0, #902	@ 0x386
 801323c:	bd70      	pop	{r4, r5, r6, pc}
 801323e:	200b      	movs	r0, #11
 8013240:	4770      	bx	lr
 8013242:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013246:	bd70      	pop	{r4, r5, r6, pc}
 8013248:	200b      	movs	r0, #11
 801324a:	bd70      	pop	{r4, r5, r6, pc}

0801324c <rcl_wait_set_add_timer>:
 801324c:	b328      	cbz	r0, 801329a <rcl_wait_set_add_timer+0x4e>
 801324e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013250:	b570      	push	{r4, r5, r6, lr}
 8013252:	4604      	mov	r4, r0
 8013254:	b31b      	cbz	r3, 801329e <rcl_wait_set_add_timer+0x52>
 8013256:	b329      	cbz	r1, 80132a4 <rcl_wait_set_add_timer+0x58>
 8013258:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801325a:	6965      	ldr	r5, [r4, #20]
 801325c:	42a8      	cmp	r0, r5
 801325e:	d219      	bcs.n	8013294 <rcl_wait_set_add_timer+0x48>
 8013260:	6925      	ldr	r5, [r4, #16]
 8013262:	1c46      	adds	r6, r0, #1
 8013264:	641e      	str	r6, [r3, #64]	@ 0x40
 8013266:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801326a:	b102      	cbz	r2, 801326e <rcl_wait_set_add_timer+0x22>
 801326c:	6010      	str	r0, [r2, #0]
 801326e:	4608      	mov	r0, r1
 8013270:	f7ff fba6 	bl	80129c0 <rcl_timer_get_guard_condition>
 8013274:	b168      	cbz	r0, 8013292 <rcl_wait_set_add_timer+0x46>
 8013276:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013278:	68e3      	ldr	r3, [r4, #12]
 801327a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801327c:	3b01      	subs	r3, #1
 801327e:	441d      	add	r5, r3
 8013280:	f004 fe2a 	bl	8017ed8 <rcl_guard_condition_get_rmw_handle>
 8013284:	b180      	cbz	r0, 80132a8 <rcl_wait_set_add_timer+0x5c>
 8013286:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013288:	6842      	ldr	r2, [r0, #4]
 801328a:	695b      	ldr	r3, [r3, #20]
 801328c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013290:	2000      	movs	r0, #0
 8013292:	bd70      	pop	{r4, r5, r6, pc}
 8013294:	f240 3086 	movw	r0, #902	@ 0x386
 8013298:	bd70      	pop	{r4, r5, r6, pc}
 801329a:	200b      	movs	r0, #11
 801329c:	4770      	bx	lr
 801329e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80132a2:	bd70      	pop	{r4, r5, r6, pc}
 80132a4:	200b      	movs	r0, #11
 80132a6:	bd70      	pop	{r4, r5, r6, pc}
 80132a8:	2001      	movs	r0, #1
 80132aa:	bd70      	pop	{r4, r5, r6, pc}

080132ac <rcl_wait_set_add_client>:
 80132ac:	b318      	cbz	r0, 80132f6 <rcl_wait_set_add_client+0x4a>
 80132ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80132b0:	b570      	push	{r4, r5, r6, lr}
 80132b2:	4604      	mov	r4, r0
 80132b4:	b30b      	cbz	r3, 80132fa <rcl_wait_set_add_client+0x4e>
 80132b6:	b319      	cbz	r1, 8013300 <rcl_wait_set_add_client+0x54>
 80132b8:	699d      	ldr	r5, [r3, #24]
 80132ba:	69c0      	ldr	r0, [r0, #28]
 80132bc:	4285      	cmp	r5, r0
 80132be:	d217      	bcs.n	80132f0 <rcl_wait_set_add_client+0x44>
 80132c0:	69a0      	ldr	r0, [r4, #24]
 80132c2:	1c6e      	adds	r6, r5, #1
 80132c4:	619e      	str	r6, [r3, #24]
 80132c6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80132ca:	b102      	cbz	r2, 80132ce <rcl_wait_set_add_client+0x22>
 80132cc:	6015      	str	r5, [r2, #0]
 80132ce:	4608      	mov	r0, r1
 80132d0:	f7fe f9b0 	bl	8011634 <rcl_client_get_rmw_handle>
 80132d4:	b150      	cbz	r0, 80132ec <rcl_wait_set_add_client+0x40>
 80132d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80132d8:	6842      	ldr	r2, [r0, #4]
 80132da:	6a1b      	ldr	r3, [r3, #32]
 80132dc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80132e0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80132e2:	69d3      	ldr	r3, [r2, #28]
 80132e4:	3301      	adds	r3, #1
 80132e6:	2000      	movs	r0, #0
 80132e8:	61d3      	str	r3, [r2, #28]
 80132ea:	bd70      	pop	{r4, r5, r6, pc}
 80132ec:	2001      	movs	r0, #1
 80132ee:	bd70      	pop	{r4, r5, r6, pc}
 80132f0:	f240 3086 	movw	r0, #902	@ 0x386
 80132f4:	bd70      	pop	{r4, r5, r6, pc}
 80132f6:	200b      	movs	r0, #11
 80132f8:	4770      	bx	lr
 80132fa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80132fe:	bd70      	pop	{r4, r5, r6, pc}
 8013300:	200b      	movs	r0, #11
 8013302:	bd70      	pop	{r4, r5, r6, pc}

08013304 <rcl_wait_set_add_service>:
 8013304:	b318      	cbz	r0, 801334e <rcl_wait_set_add_service+0x4a>
 8013306:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013308:	b570      	push	{r4, r5, r6, lr}
 801330a:	4604      	mov	r4, r0
 801330c:	b30b      	cbz	r3, 8013352 <rcl_wait_set_add_service+0x4e>
 801330e:	b319      	cbz	r1, 8013358 <rcl_wait_set_add_service+0x54>
 8013310:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013312:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013314:	4285      	cmp	r5, r0
 8013316:	d217      	bcs.n	8013348 <rcl_wait_set_add_service+0x44>
 8013318:	6a20      	ldr	r0, [r4, #32]
 801331a:	1c6e      	adds	r6, r5, #1
 801331c:	625e      	str	r6, [r3, #36]	@ 0x24
 801331e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013322:	b102      	cbz	r2, 8013326 <rcl_wait_set_add_service+0x22>
 8013324:	6015      	str	r5, [r2, #0]
 8013326:	4608      	mov	r0, r1
 8013328:	f7ff f804 	bl	8012334 <rcl_service_get_rmw_handle>
 801332c:	b150      	cbz	r0, 8013344 <rcl_wait_set_add_service+0x40>
 801332e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013330:	6842      	ldr	r2, [r0, #4]
 8013332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013334:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013338:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801333a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801333c:	3301      	adds	r3, #1
 801333e:	2000      	movs	r0, #0
 8013340:	6293      	str	r3, [r2, #40]	@ 0x28
 8013342:	bd70      	pop	{r4, r5, r6, pc}
 8013344:	2001      	movs	r0, #1
 8013346:	bd70      	pop	{r4, r5, r6, pc}
 8013348:	f240 3086 	movw	r0, #902	@ 0x386
 801334c:	bd70      	pop	{r4, r5, r6, pc}
 801334e:	200b      	movs	r0, #11
 8013350:	4770      	bx	lr
 8013352:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013356:	bd70      	pop	{r4, r5, r6, pc}
 8013358:	200b      	movs	r0, #11
 801335a:	bd70      	pop	{r4, r5, r6, pc}
 801335c:	0000      	movs	r0, r0
	...

08013360 <rcl_wait>:
 8013360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013364:	ed2d 8b02 	vpush	{d8}
 8013368:	b08d      	sub	sp, #52	@ 0x34
 801336a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801336e:	2800      	cmp	r0, #0
 8013370:	f000 8143 	beq.w	80135fa <rcl_wait+0x29a>
 8013374:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013376:	4605      	mov	r5, r0
 8013378:	2e00      	cmp	r6, #0
 801337a:	f000 8112 	beq.w	80135a2 <rcl_wait+0x242>
 801337e:	6843      	ldr	r3, [r0, #4]
 8013380:	b983      	cbnz	r3, 80133a4 <rcl_wait+0x44>
 8013382:	68eb      	ldr	r3, [r5, #12]
 8013384:	b973      	cbnz	r3, 80133a4 <rcl_wait+0x44>
 8013386:	696b      	ldr	r3, [r5, #20]
 8013388:	b963      	cbnz	r3, 80133a4 <rcl_wait+0x44>
 801338a:	69eb      	ldr	r3, [r5, #28]
 801338c:	b953      	cbnz	r3, 80133a4 <rcl_wait+0x44>
 801338e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013390:	b943      	cbnz	r3, 80133a4 <rcl_wait+0x44>
 8013392:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013394:	b933      	cbnz	r3, 80133a4 <rcl_wait+0x44>
 8013396:	f240 3085 	movw	r0, #901	@ 0x385
 801339a:	b00d      	add	sp, #52	@ 0x34
 801339c:	ecbd 8b02 	vpop	{d8}
 80133a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133a4:	9b04      	ldr	r3, [sp, #16]
 80133a6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	9b05      	ldr	r3, [sp, #20]
 80133ac:	f173 0300 	sbcs.w	r3, r3, #0
 80133b0:	f2c0 80f0 	blt.w	8013594 <rcl_wait+0x234>
 80133b4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80133b8:	4643      	mov	r3, r8
 80133ba:	2a00      	cmp	r2, #0
 80133bc:	f000 8133 	beq.w	8013626 <rcl_wait+0x2c6>
 80133c0:	2400      	movs	r4, #0
 80133c2:	4613      	mov	r3, r2
 80133c4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013638 <rcl_wait+0x2d8>
 80133c8:	46a2      	mov	sl, r4
 80133ca:	46a3      	mov	fp, r4
 80133cc:	f240 3921 	movw	r9, #801	@ 0x321
 80133d0:	4632      	mov	r2, r6
 80133d2:	e014      	b.n	80133fe <rcl_wait+0x9e>
 80133d4:	2800      	cmp	r0, #0
 80133d6:	d1e0      	bne.n	801339a <rcl_wait+0x3a>
 80133d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80133dc:	4542      	cmp	r2, r8
 80133de:	eb73 0107 	sbcs.w	r1, r3, r7
 80133e2:	da03      	bge.n	80133ec <rcl_wait+0x8c>
 80133e4:	4690      	mov	r8, r2
 80133e6:	461f      	mov	r7, r3
 80133e8:	f04f 0b01 	mov.w	fp, #1
 80133ec:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80133ee:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80133f0:	3401      	adds	r4, #1
 80133f2:	f14a 0a00 	adc.w	sl, sl, #0
 80133f6:	429c      	cmp	r4, r3
 80133f8:	f17a 0100 	sbcs.w	r1, sl, #0
 80133fc:	d228      	bcs.n	8013450 <rcl_wait+0xf0>
 80133fe:	6928      	ldr	r0, [r5, #16]
 8013400:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013404:	a908      	add	r1, sp, #32
 8013406:	00a6      	lsls	r6, r4, #2
 8013408:	2800      	cmp	r0, #0
 801340a:	d0f1      	beq.n	80133f0 <rcl_wait+0x90>
 801340c:	68eb      	ldr	r3, [r5, #12]
 801340e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013412:	4423      	add	r3, r4
 8013414:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013418:	f1be 0f00 	cmp.w	lr, #0
 801341c:	d006      	beq.n	801342c <rcl_wait+0xcc>
 801341e:	6913      	ldr	r3, [r2, #16]
 8013420:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013424:	3301      	adds	r3, #1
 8013426:	6113      	str	r3, [r2, #16]
 8013428:	692b      	ldr	r3, [r5, #16]
 801342a:	5998      	ldr	r0, [r3, r6]
 801342c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013430:	f7ff fa94 	bl	801295c <rcl_timer_get_time_until_next_call>
 8013434:	4548      	cmp	r0, r9
 8013436:	d1cd      	bne.n	80133d4 <rcl_wait+0x74>
 8013438:	692b      	ldr	r3, [r5, #16]
 801343a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801343c:	2100      	movs	r1, #0
 801343e:	5199      	str	r1, [r3, r6]
 8013440:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013442:	3401      	adds	r4, #1
 8013444:	f14a 0a00 	adc.w	sl, sl, #0
 8013448:	429c      	cmp	r4, r3
 801344a:	f17a 0100 	sbcs.w	r1, sl, #0
 801344e:	d3d6      	bcc.n	80133fe <rcl_wait+0x9e>
 8013450:	4616      	mov	r6, r2
 8013452:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013456:	4313      	orrs	r3, r2
 8013458:	46d9      	mov	r9, fp
 801345a:	f040 80a9 	bne.w	80135b0 <rcl_wait+0x250>
 801345e:	2300      	movs	r3, #0
 8013460:	2200      	movs	r2, #0
 8013462:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013466:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801346a:	ab08      	add	r3, sp, #32
 801346c:	9302      	str	r3, [sp, #8]
 801346e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013470:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013474:	e9cd 3200 	strd	r3, r2, [sp]
 8013478:	f106 0110 	add.w	r1, r6, #16
 801347c:	f106 031c 	add.w	r3, r6, #28
 8013480:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013484:	1d30      	adds	r0, r6, #4
 8013486:	f002 fb6b 	bl	8015b60 <rmw_wait>
 801348a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801348c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801348e:	4680      	mov	r8, r0
 8013490:	b1ca      	cbz	r2, 80134c6 <rcl_wait+0x166>
 8013492:	2400      	movs	r4, #0
 8013494:	4627      	mov	r7, r4
 8013496:	692a      	ldr	r2, [r5, #16]
 8013498:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801349c:	f10d 011f 	add.w	r1, sp, #31
 80134a0:	00a6      	lsls	r6, r4, #2
 80134a2:	b160      	cbz	r0, 80134be <rcl_wait+0x15e>
 80134a4:	f88d 701f 	strb.w	r7, [sp, #31]
 80134a8:	f7ff fa1e 	bl	80128e8 <rcl_timer_is_ready>
 80134ac:	2800      	cmp	r0, #0
 80134ae:	f47f af74 	bne.w	801339a <rcl_wait+0x3a>
 80134b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80134b6:	b90b      	cbnz	r3, 80134bc <rcl_wait+0x15c>
 80134b8:	692a      	ldr	r2, [r5, #16]
 80134ba:	5193      	str	r3, [r2, r6]
 80134bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80134be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80134c0:	3401      	adds	r4, #1
 80134c2:	42a2      	cmp	r2, r4
 80134c4:	d8e7      	bhi.n	8013496 <rcl_wait+0x136>
 80134c6:	f038 0002 	bics.w	r0, r8, #2
 80134ca:	f040 8090 	bne.w	80135ee <rcl_wait+0x28e>
 80134ce:	686e      	ldr	r6, [r5, #4]
 80134d0:	4602      	mov	r2, r0
 80134d2:	b91e      	cbnz	r6, 80134dc <rcl_wait+0x17c>
 80134d4:	e00d      	b.n	80134f2 <rcl_wait+0x192>
 80134d6:	3201      	adds	r2, #1
 80134d8:	42b2      	cmp	r2, r6
 80134da:	d00a      	beq.n	80134f2 <rcl_wait+0x192>
 80134dc:	6899      	ldr	r1, [r3, #8]
 80134de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80134e2:	2900      	cmp	r1, #0
 80134e4:	d1f7      	bne.n	80134d6 <rcl_wait+0x176>
 80134e6:	682c      	ldr	r4, [r5, #0]
 80134e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80134ec:	3201      	adds	r2, #1
 80134ee:	42b2      	cmp	r2, r6
 80134f0:	d1f4      	bne.n	80134dc <rcl_wait+0x17c>
 80134f2:	68ee      	ldr	r6, [r5, #12]
 80134f4:	2200      	movs	r2, #0
 80134f6:	b91e      	cbnz	r6, 8013500 <rcl_wait+0x1a0>
 80134f8:	e00d      	b.n	8013516 <rcl_wait+0x1b6>
 80134fa:	3201      	adds	r2, #1
 80134fc:	42b2      	cmp	r2, r6
 80134fe:	d00a      	beq.n	8013516 <rcl_wait+0x1b6>
 8013500:	6959      	ldr	r1, [r3, #20]
 8013502:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013506:	2900      	cmp	r1, #0
 8013508:	d1f7      	bne.n	80134fa <rcl_wait+0x19a>
 801350a:	68ac      	ldr	r4, [r5, #8]
 801350c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013510:	3201      	adds	r2, #1
 8013512:	42b2      	cmp	r2, r6
 8013514:	d1f4      	bne.n	8013500 <rcl_wait+0x1a0>
 8013516:	69ee      	ldr	r6, [r5, #28]
 8013518:	2200      	movs	r2, #0
 801351a:	b91e      	cbnz	r6, 8013524 <rcl_wait+0x1c4>
 801351c:	e00d      	b.n	801353a <rcl_wait+0x1da>
 801351e:	3201      	adds	r2, #1
 8013520:	42b2      	cmp	r2, r6
 8013522:	d00a      	beq.n	801353a <rcl_wait+0x1da>
 8013524:	6a19      	ldr	r1, [r3, #32]
 8013526:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801352a:	2900      	cmp	r1, #0
 801352c:	d1f7      	bne.n	801351e <rcl_wait+0x1be>
 801352e:	69ac      	ldr	r4, [r5, #24]
 8013530:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013534:	3201      	adds	r2, #1
 8013536:	42b2      	cmp	r2, r6
 8013538:	d1f4      	bne.n	8013524 <rcl_wait+0x1c4>
 801353a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801353c:	2200      	movs	r2, #0
 801353e:	b91e      	cbnz	r6, 8013548 <rcl_wait+0x1e8>
 8013540:	e00d      	b.n	801355e <rcl_wait+0x1fe>
 8013542:	3201      	adds	r2, #1
 8013544:	4296      	cmp	r6, r2
 8013546:	d00a      	beq.n	801355e <rcl_wait+0x1fe>
 8013548:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801354a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801354e:	2900      	cmp	r1, #0
 8013550:	d1f7      	bne.n	8013542 <rcl_wait+0x1e2>
 8013552:	6a2c      	ldr	r4, [r5, #32]
 8013554:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013558:	3201      	adds	r2, #1
 801355a:	4296      	cmp	r6, r2
 801355c:	d1f4      	bne.n	8013548 <rcl_wait+0x1e8>
 801355e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013560:	2200      	movs	r2, #0
 8013562:	b91e      	cbnz	r6, 801356c <rcl_wait+0x20c>
 8013564:	e00d      	b.n	8013582 <rcl_wait+0x222>
 8013566:	3201      	adds	r2, #1
 8013568:	42b2      	cmp	r2, r6
 801356a:	d00a      	beq.n	8013582 <rcl_wait+0x222>
 801356c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801356e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013572:	2900      	cmp	r1, #0
 8013574:	d1f7      	bne.n	8013566 <rcl_wait+0x206>
 8013576:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013578:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801357c:	3201      	adds	r2, #1
 801357e:	42b2      	cmp	r2, r6
 8013580:	d1f4      	bne.n	801356c <rcl_wait+0x20c>
 8013582:	f1b8 0f02 	cmp.w	r8, #2
 8013586:	f47f af08 	bne.w	801339a <rcl_wait+0x3a>
 801358a:	464b      	mov	r3, r9
 801358c:	2b00      	cmp	r3, #0
 801358e:	bf08      	it	eq
 8013590:	2002      	moveq	r0, #2
 8013592:	e702      	b.n	801339a <rcl_wait+0x3a>
 8013594:	2a00      	cmp	r2, #0
 8013596:	d03a      	beq.n	801360e <rcl_wait+0x2ae>
 8013598:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801359c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80135a0:	e70e      	b.n	80133c0 <rcl_wait+0x60>
 80135a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80135a6:	b00d      	add	sp, #52	@ 0x34
 80135a8:	ecbd 8b02 	vpop	{d8}
 80135ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b0:	9b04      	ldr	r3, [sp, #16]
 80135b2:	2b01      	cmp	r3, #1
 80135b4:	9b05      	ldr	r3, [sp, #20]
 80135b6:	f173 0300 	sbcs.w	r3, r3, #0
 80135ba:	db24      	blt.n	8013606 <rcl_wait+0x2a6>
 80135bc:	2f00      	cmp	r7, #0
 80135be:	bfbc      	itt	lt
 80135c0:	f04f 0800 	movlt.w	r8, #0
 80135c4:	4647      	movlt	r7, r8
 80135c6:	a31e      	add	r3, pc, #120	@ (adr r3, 8013640 <rcl_wait+0x2e0>)
 80135c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135cc:	4640      	mov	r0, r8
 80135ce:	4639      	mov	r1, r7
 80135d0:	f7ed fb0c 	bl	8000bec <__aeabi_ldivmod>
 80135d4:	a31a      	add	r3, pc, #104	@ (adr r3, 8013640 <rcl_wait+0x2e0>)
 80135d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80135de:	4640      	mov	r0, r8
 80135e0:	4639      	mov	r1, r7
 80135e2:	f7ed fb03 	bl	8000bec <__aeabi_ldivmod>
 80135e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80135ea:	ab08      	add	r3, sp, #32
 80135ec:	e73e      	b.n	801346c <rcl_wait+0x10c>
 80135ee:	2001      	movs	r0, #1
 80135f0:	b00d      	add	sp, #52	@ 0x34
 80135f2:	ecbd 8b02 	vpop	{d8}
 80135f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135fa:	200b      	movs	r0, #11
 80135fc:	b00d      	add	sp, #52	@ 0x34
 80135fe:	ecbd 8b02 	vpop	{d8}
 8013602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013606:	465b      	mov	r3, fp
 8013608:	2b00      	cmp	r3, #0
 801360a:	d1d7      	bne.n	80135bc <rcl_wait+0x25c>
 801360c:	e72e      	b.n	801346c <rcl_wait+0x10c>
 801360e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013612:	430b      	orrs	r3, r1
 8013614:	bf08      	it	eq
 8013616:	4691      	moveq	r9, r2
 8013618:	f43f af21 	beq.w	801345e <rcl_wait+0xfe>
 801361c:	9b04      	ldr	r3, [sp, #16]
 801361e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013622:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013626:	2b01      	cmp	r3, #1
 8013628:	9b05      	ldr	r3, [sp, #20]
 801362a:	f173 0300 	sbcs.w	r3, r3, #0
 801362e:	f04f 0300 	mov.w	r3, #0
 8013632:	4699      	mov	r9, r3
 8013634:	dac2      	bge.n	80135bc <rcl_wait+0x25c>
 8013636:	e719      	b.n	801346c <rcl_wait+0x10c>
 8013638:	ffffffff 	.word	0xffffffff
 801363c:	7fffffff 	.word	0x7fffffff
 8013640:	3b9aca00 	.word	0x3b9aca00
 8013644:	00000000 	.word	0x00000000

08013648 <rcl_action_take_goal_response>:
 8013648:	2800      	cmp	r0, #0
 801364a:	d039      	beq.n	80136c0 <rcl_action_take_goal_response+0x78>
 801364c:	b570      	push	{r4, r5, r6, lr}
 801364e:	4604      	mov	r4, r0
 8013650:	6800      	ldr	r0, [r0, #0]
 8013652:	b380      	cbz	r0, 80136b6 <rcl_action_take_goal_response+0x6e>
 8013654:	460d      	mov	r5, r1
 8013656:	4616      	mov	r6, r2
 8013658:	f7fe f872 	bl	8011740 <rcl_client_is_valid>
 801365c:	b330      	cbz	r0, 80136ac <rcl_action_take_goal_response+0x64>
 801365e:	6820      	ldr	r0, [r4, #0]
 8013660:	3004      	adds	r0, #4
 8013662:	f7fe f86d 	bl	8011740 <rcl_client_is_valid>
 8013666:	b308      	cbz	r0, 80136ac <rcl_action_take_goal_response+0x64>
 8013668:	6820      	ldr	r0, [r4, #0]
 801366a:	3008      	adds	r0, #8
 801366c:	f7fe f868 	bl	8011740 <rcl_client_is_valid>
 8013670:	b1e0      	cbz	r0, 80136ac <rcl_action_take_goal_response+0x64>
 8013672:	6820      	ldr	r0, [r4, #0]
 8013674:	300c      	adds	r0, #12
 8013676:	f7fe ffff 	bl	8012678 <rcl_subscription_is_valid>
 801367a:	b1b8      	cbz	r0, 80136ac <rcl_action_take_goal_response+0x64>
 801367c:	6820      	ldr	r0, [r4, #0]
 801367e:	3010      	adds	r0, #16
 8013680:	f7fe fffa 	bl	8012678 <rcl_subscription_is_valid>
 8013684:	b190      	cbz	r0, 80136ac <rcl_action_take_goal_response+0x64>
 8013686:	b1cd      	cbz	r5, 80136bc <rcl_action_take_goal_response+0x74>
 8013688:	b1c6      	cbz	r6, 80136bc <rcl_action_take_goal_response+0x74>
 801368a:	6820      	ldr	r0, [r4, #0]
 801368c:	4632      	mov	r2, r6
 801368e:	4629      	mov	r1, r5
 8013690:	f7fe f80e 	bl	80116b0 <rcl_take_response>
 8013694:	b148      	cbz	r0, 80136aa <rcl_action_take_goal_response+0x62>
 8013696:	280a      	cmp	r0, #10
 8013698:	d007      	beq.n	80136aa <rcl_action_take_goal_response+0x62>
 801369a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801369e:	f640 0337 	movw	r3, #2103	@ 0x837
 80136a2:	4290      	cmp	r0, r2
 80136a4:	bf0c      	ite	eq
 80136a6:	4618      	moveq	r0, r3
 80136a8:	2001      	movne	r0, #1
 80136aa:	bd70      	pop	{r4, r5, r6, pc}
 80136ac:	f7f9 fbf4 	bl	800ce98 <rcutils_reset_error>
 80136b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80136b4:	bd70      	pop	{r4, r5, r6, pc}
 80136b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80136ba:	bd70      	pop	{r4, r5, r6, pc}
 80136bc:	200b      	movs	r0, #11
 80136be:	bd70      	pop	{r4, r5, r6, pc}
 80136c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80136c4:	4770      	bx	lr
 80136c6:	bf00      	nop

080136c8 <rcl_action_send_result_request>:
 80136c8:	b390      	cbz	r0, 8013730 <rcl_action_send_result_request+0x68>
 80136ca:	b570      	push	{r4, r5, r6, lr}
 80136cc:	4604      	mov	r4, r0
 80136ce:	6800      	ldr	r0, [r0, #0]
 80136d0:	b348      	cbz	r0, 8013726 <rcl_action_send_result_request+0x5e>
 80136d2:	460d      	mov	r5, r1
 80136d4:	4616      	mov	r6, r2
 80136d6:	f7fe f833 	bl	8011740 <rcl_client_is_valid>
 80136da:	b1f8      	cbz	r0, 801371c <rcl_action_send_result_request+0x54>
 80136dc:	6820      	ldr	r0, [r4, #0]
 80136de:	3004      	adds	r0, #4
 80136e0:	f7fe f82e 	bl	8011740 <rcl_client_is_valid>
 80136e4:	b1d0      	cbz	r0, 801371c <rcl_action_send_result_request+0x54>
 80136e6:	6820      	ldr	r0, [r4, #0]
 80136e8:	3008      	adds	r0, #8
 80136ea:	f7fe f829 	bl	8011740 <rcl_client_is_valid>
 80136ee:	b1a8      	cbz	r0, 801371c <rcl_action_send_result_request+0x54>
 80136f0:	6820      	ldr	r0, [r4, #0]
 80136f2:	300c      	adds	r0, #12
 80136f4:	f7fe ffc0 	bl	8012678 <rcl_subscription_is_valid>
 80136f8:	b180      	cbz	r0, 801371c <rcl_action_send_result_request+0x54>
 80136fa:	6820      	ldr	r0, [r4, #0]
 80136fc:	3010      	adds	r0, #16
 80136fe:	f7fe ffbb 	bl	8012678 <rcl_subscription_is_valid>
 8013702:	b158      	cbz	r0, 801371c <rcl_action_send_result_request+0x54>
 8013704:	b195      	cbz	r5, 801372c <rcl_action_send_result_request+0x64>
 8013706:	b18e      	cbz	r6, 801372c <rcl_action_send_result_request+0x64>
 8013708:	6820      	ldr	r0, [r4, #0]
 801370a:	4632      	mov	r2, r6
 801370c:	4629      	mov	r1, r5
 801370e:	3008      	adds	r0, #8
 8013710:	f7fd ff96 	bl	8011640 <rcl_send_request>
 8013714:	3800      	subs	r0, #0
 8013716:	bf18      	it	ne
 8013718:	2001      	movne	r0, #1
 801371a:	bd70      	pop	{r4, r5, r6, pc}
 801371c:	f7f9 fbbc 	bl	800ce98 <rcutils_reset_error>
 8013720:	f640 0036 	movw	r0, #2102	@ 0x836
 8013724:	bd70      	pop	{r4, r5, r6, pc}
 8013726:	f640 0036 	movw	r0, #2102	@ 0x836
 801372a:	bd70      	pop	{r4, r5, r6, pc}
 801372c:	200b      	movs	r0, #11
 801372e:	bd70      	pop	{r4, r5, r6, pc}
 8013730:	f640 0036 	movw	r0, #2102	@ 0x836
 8013734:	4770      	bx	lr
 8013736:	bf00      	nop

08013738 <rcl_action_take_result_response>:
 8013738:	2800      	cmp	r0, #0
 801373a:	d03a      	beq.n	80137b2 <rcl_action_take_result_response+0x7a>
 801373c:	b570      	push	{r4, r5, r6, lr}
 801373e:	4604      	mov	r4, r0
 8013740:	6800      	ldr	r0, [r0, #0]
 8013742:	b388      	cbz	r0, 80137a8 <rcl_action_take_result_response+0x70>
 8013744:	460d      	mov	r5, r1
 8013746:	4616      	mov	r6, r2
 8013748:	f7fd fffa 	bl	8011740 <rcl_client_is_valid>
 801374c:	b338      	cbz	r0, 801379e <rcl_action_take_result_response+0x66>
 801374e:	6820      	ldr	r0, [r4, #0]
 8013750:	3004      	adds	r0, #4
 8013752:	f7fd fff5 	bl	8011740 <rcl_client_is_valid>
 8013756:	b310      	cbz	r0, 801379e <rcl_action_take_result_response+0x66>
 8013758:	6820      	ldr	r0, [r4, #0]
 801375a:	3008      	adds	r0, #8
 801375c:	f7fd fff0 	bl	8011740 <rcl_client_is_valid>
 8013760:	b1e8      	cbz	r0, 801379e <rcl_action_take_result_response+0x66>
 8013762:	6820      	ldr	r0, [r4, #0]
 8013764:	300c      	adds	r0, #12
 8013766:	f7fe ff87 	bl	8012678 <rcl_subscription_is_valid>
 801376a:	b1c0      	cbz	r0, 801379e <rcl_action_take_result_response+0x66>
 801376c:	6820      	ldr	r0, [r4, #0]
 801376e:	3010      	adds	r0, #16
 8013770:	f7fe ff82 	bl	8012678 <rcl_subscription_is_valid>
 8013774:	b198      	cbz	r0, 801379e <rcl_action_take_result_response+0x66>
 8013776:	b1d5      	cbz	r5, 80137ae <rcl_action_take_result_response+0x76>
 8013778:	b1ce      	cbz	r6, 80137ae <rcl_action_take_result_response+0x76>
 801377a:	6820      	ldr	r0, [r4, #0]
 801377c:	4632      	mov	r2, r6
 801377e:	4629      	mov	r1, r5
 8013780:	3008      	adds	r0, #8
 8013782:	f7fd ff95 	bl	80116b0 <rcl_take_response>
 8013786:	b148      	cbz	r0, 801379c <rcl_action_take_result_response+0x64>
 8013788:	280a      	cmp	r0, #10
 801378a:	d007      	beq.n	801379c <rcl_action_take_result_response+0x64>
 801378c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013790:	f640 0337 	movw	r3, #2103	@ 0x837
 8013794:	4290      	cmp	r0, r2
 8013796:	bf0c      	ite	eq
 8013798:	4618      	moveq	r0, r3
 801379a:	2001      	movne	r0, #1
 801379c:	bd70      	pop	{r4, r5, r6, pc}
 801379e:	f7f9 fb7b 	bl	800ce98 <rcutils_reset_error>
 80137a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80137a6:	bd70      	pop	{r4, r5, r6, pc}
 80137a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80137ac:	bd70      	pop	{r4, r5, r6, pc}
 80137ae:	200b      	movs	r0, #11
 80137b0:	bd70      	pop	{r4, r5, r6, pc}
 80137b2:	f640 0036 	movw	r0, #2102	@ 0x836
 80137b6:	4770      	bx	lr

080137b8 <rcl_action_take_cancel_response>:
 80137b8:	2800      	cmp	r0, #0
 80137ba:	d03a      	beq.n	8013832 <rcl_action_take_cancel_response+0x7a>
 80137bc:	b570      	push	{r4, r5, r6, lr}
 80137be:	4604      	mov	r4, r0
 80137c0:	6800      	ldr	r0, [r0, #0]
 80137c2:	b388      	cbz	r0, 8013828 <rcl_action_take_cancel_response+0x70>
 80137c4:	460d      	mov	r5, r1
 80137c6:	4616      	mov	r6, r2
 80137c8:	f7fd ffba 	bl	8011740 <rcl_client_is_valid>
 80137cc:	b338      	cbz	r0, 801381e <rcl_action_take_cancel_response+0x66>
 80137ce:	6820      	ldr	r0, [r4, #0]
 80137d0:	3004      	adds	r0, #4
 80137d2:	f7fd ffb5 	bl	8011740 <rcl_client_is_valid>
 80137d6:	b310      	cbz	r0, 801381e <rcl_action_take_cancel_response+0x66>
 80137d8:	6820      	ldr	r0, [r4, #0]
 80137da:	3008      	adds	r0, #8
 80137dc:	f7fd ffb0 	bl	8011740 <rcl_client_is_valid>
 80137e0:	b1e8      	cbz	r0, 801381e <rcl_action_take_cancel_response+0x66>
 80137e2:	6820      	ldr	r0, [r4, #0]
 80137e4:	300c      	adds	r0, #12
 80137e6:	f7fe ff47 	bl	8012678 <rcl_subscription_is_valid>
 80137ea:	b1c0      	cbz	r0, 801381e <rcl_action_take_cancel_response+0x66>
 80137ec:	6820      	ldr	r0, [r4, #0]
 80137ee:	3010      	adds	r0, #16
 80137f0:	f7fe ff42 	bl	8012678 <rcl_subscription_is_valid>
 80137f4:	b198      	cbz	r0, 801381e <rcl_action_take_cancel_response+0x66>
 80137f6:	b1d5      	cbz	r5, 801382e <rcl_action_take_cancel_response+0x76>
 80137f8:	b1ce      	cbz	r6, 801382e <rcl_action_take_cancel_response+0x76>
 80137fa:	6820      	ldr	r0, [r4, #0]
 80137fc:	4632      	mov	r2, r6
 80137fe:	4629      	mov	r1, r5
 8013800:	3004      	adds	r0, #4
 8013802:	f7fd ff55 	bl	80116b0 <rcl_take_response>
 8013806:	b148      	cbz	r0, 801381c <rcl_action_take_cancel_response+0x64>
 8013808:	280a      	cmp	r0, #10
 801380a:	d007      	beq.n	801381c <rcl_action_take_cancel_response+0x64>
 801380c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013810:	f640 0337 	movw	r3, #2103	@ 0x837
 8013814:	4290      	cmp	r0, r2
 8013816:	bf0c      	ite	eq
 8013818:	4618      	moveq	r0, r3
 801381a:	2001      	movne	r0, #1
 801381c:	bd70      	pop	{r4, r5, r6, pc}
 801381e:	f7f9 fb3b 	bl	800ce98 <rcutils_reset_error>
 8013822:	f640 0036 	movw	r0, #2102	@ 0x836
 8013826:	bd70      	pop	{r4, r5, r6, pc}
 8013828:	f640 0036 	movw	r0, #2102	@ 0x836
 801382c:	bd70      	pop	{r4, r5, r6, pc}
 801382e:	200b      	movs	r0, #11
 8013830:	bd70      	pop	{r4, r5, r6, pc}
 8013832:	f640 0036 	movw	r0, #2102	@ 0x836
 8013836:	4770      	bx	lr

08013838 <rcl_action_take_feedback>:
 8013838:	2800      	cmp	r0, #0
 801383a:	d038      	beq.n	80138ae <rcl_action_take_feedback+0x76>
 801383c:	b530      	push	{r4, r5, lr}
 801383e:	4604      	mov	r4, r0
 8013840:	6800      	ldr	r0, [r0, #0]
 8013842:	b091      	sub	sp, #68	@ 0x44
 8013844:	b378      	cbz	r0, 80138a6 <rcl_action_take_feedback+0x6e>
 8013846:	460d      	mov	r5, r1
 8013848:	f7fd ff7a 	bl	8011740 <rcl_client_is_valid>
 801384c:	b328      	cbz	r0, 801389a <rcl_action_take_feedback+0x62>
 801384e:	6820      	ldr	r0, [r4, #0]
 8013850:	3004      	adds	r0, #4
 8013852:	f7fd ff75 	bl	8011740 <rcl_client_is_valid>
 8013856:	b300      	cbz	r0, 801389a <rcl_action_take_feedback+0x62>
 8013858:	6820      	ldr	r0, [r4, #0]
 801385a:	3008      	adds	r0, #8
 801385c:	f7fd ff70 	bl	8011740 <rcl_client_is_valid>
 8013860:	b1d8      	cbz	r0, 801389a <rcl_action_take_feedback+0x62>
 8013862:	6820      	ldr	r0, [r4, #0]
 8013864:	300c      	adds	r0, #12
 8013866:	f7fe ff07 	bl	8012678 <rcl_subscription_is_valid>
 801386a:	b1b0      	cbz	r0, 801389a <rcl_action_take_feedback+0x62>
 801386c:	6820      	ldr	r0, [r4, #0]
 801386e:	3010      	adds	r0, #16
 8013870:	f7fe ff02 	bl	8012678 <rcl_subscription_is_valid>
 8013874:	b188      	cbz	r0, 801389a <rcl_action_take_feedback+0x62>
 8013876:	b1ed      	cbz	r5, 80138b4 <rcl_action_take_feedback+0x7c>
 8013878:	6820      	ldr	r0, [r4, #0]
 801387a:	2300      	movs	r3, #0
 801387c:	466a      	mov	r2, sp
 801387e:	4629      	mov	r1, r5
 8013880:	300c      	adds	r0, #12
 8013882:	f7fe fe9b 	bl	80125bc <rcl_take>
 8013886:	b160      	cbz	r0, 80138a2 <rcl_action_take_feedback+0x6a>
 8013888:	f240 1391 	movw	r3, #401	@ 0x191
 801388c:	4298      	cmp	r0, r3
 801388e:	d014      	beq.n	80138ba <rcl_action_take_feedback+0x82>
 8013890:	280a      	cmp	r0, #10
 8013892:	bf18      	it	ne
 8013894:	2001      	movne	r0, #1
 8013896:	b011      	add	sp, #68	@ 0x44
 8013898:	bd30      	pop	{r4, r5, pc}
 801389a:	f7f9 fafd 	bl	800ce98 <rcutils_reset_error>
 801389e:	f640 0036 	movw	r0, #2102	@ 0x836
 80138a2:	b011      	add	sp, #68	@ 0x44
 80138a4:	bd30      	pop	{r4, r5, pc}
 80138a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80138aa:	b011      	add	sp, #68	@ 0x44
 80138ac:	bd30      	pop	{r4, r5, pc}
 80138ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80138b2:	4770      	bx	lr
 80138b4:	200b      	movs	r0, #11
 80138b6:	b011      	add	sp, #68	@ 0x44
 80138b8:	bd30      	pop	{r4, r5, pc}
 80138ba:	f640 0037 	movw	r0, #2103	@ 0x837
 80138be:	e7f0      	b.n	80138a2 <rcl_action_take_feedback+0x6a>

080138c0 <rcl_action_wait_set_add_action_client>:
 80138c0:	2800      	cmp	r0, #0
 80138c2:	d048      	beq.n	8013956 <rcl_action_wait_set_add_action_client+0x96>
 80138c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138c6:	460c      	mov	r4, r1
 80138c8:	2900      	cmp	r1, #0
 80138ca:	d03c      	beq.n	8013946 <rcl_action_wait_set_add_action_client+0x86>
 80138cc:	4605      	mov	r5, r0
 80138ce:	6808      	ldr	r0, [r1, #0]
 80138d0:	2800      	cmp	r0, #0
 80138d2:	d038      	beq.n	8013946 <rcl_action_wait_set_add_action_client+0x86>
 80138d4:	4617      	mov	r7, r2
 80138d6:	461e      	mov	r6, r3
 80138d8:	f7fd ff32 	bl	8011740 <rcl_client_is_valid>
 80138dc:	b3b0      	cbz	r0, 801394c <rcl_action_wait_set_add_action_client+0x8c>
 80138de:	6820      	ldr	r0, [r4, #0]
 80138e0:	3004      	adds	r0, #4
 80138e2:	f7fd ff2d 	bl	8011740 <rcl_client_is_valid>
 80138e6:	b388      	cbz	r0, 801394c <rcl_action_wait_set_add_action_client+0x8c>
 80138e8:	6820      	ldr	r0, [r4, #0]
 80138ea:	3008      	adds	r0, #8
 80138ec:	f7fd ff28 	bl	8011740 <rcl_client_is_valid>
 80138f0:	b360      	cbz	r0, 801394c <rcl_action_wait_set_add_action_client+0x8c>
 80138f2:	6820      	ldr	r0, [r4, #0]
 80138f4:	300c      	adds	r0, #12
 80138f6:	f7fe febf 	bl	8012678 <rcl_subscription_is_valid>
 80138fa:	b338      	cbz	r0, 801394c <rcl_action_wait_set_add_action_client+0x8c>
 80138fc:	6820      	ldr	r0, [r4, #0]
 80138fe:	3010      	adds	r0, #16
 8013900:	f7fe feba 	bl	8012678 <rcl_subscription_is_valid>
 8013904:	b310      	cbz	r0, 801394c <rcl_action_wait_set_add_action_client+0x8c>
 8013906:	6821      	ldr	r1, [r4, #0]
 8013908:	4628      	mov	r0, r5
 801390a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801390e:	f7ff fccd 	bl	80132ac <rcl_wait_set_add_client>
 8013912:	b9b8      	cbnz	r0, 8013944 <rcl_action_wait_set_add_action_client+0x84>
 8013914:	6821      	ldr	r1, [r4, #0]
 8013916:	4628      	mov	r0, r5
 8013918:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801391c:	3104      	adds	r1, #4
 801391e:	f7ff fcc5 	bl	80132ac <rcl_wait_set_add_client>
 8013922:	b978      	cbnz	r0, 8013944 <rcl_action_wait_set_add_action_client+0x84>
 8013924:	6821      	ldr	r1, [r4, #0]
 8013926:	4628      	mov	r0, r5
 8013928:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801392c:	3108      	adds	r1, #8
 801392e:	f7ff fcbd 	bl	80132ac <rcl_wait_set_add_client>
 8013932:	b938      	cbnz	r0, 8013944 <rcl_action_wait_set_add_action_client+0x84>
 8013934:	6821      	ldr	r1, [r4, #0]
 8013936:	4628      	mov	r0, r5
 8013938:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801393c:	310c      	adds	r1, #12
 801393e:	f7ff f96d 	bl	8012c1c <rcl_wait_set_add_subscription>
 8013942:	b158      	cbz	r0, 801395c <rcl_action_wait_set_add_action_client+0x9c>
 8013944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013946:	f640 0036 	movw	r0, #2102	@ 0x836
 801394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801394c:	f7f9 faa4 	bl	800ce98 <rcutils_reset_error>
 8013950:	f640 0036 	movw	r0, #2102	@ 0x836
 8013954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013956:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801395a:	4770      	bx	lr
 801395c:	6821      	ldr	r1, [r4, #0]
 801395e:	4628      	mov	r0, r5
 8013960:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8013964:	3110      	adds	r1, #16
 8013966:	f7ff f959 	bl	8012c1c <rcl_wait_set_add_subscription>
 801396a:	2800      	cmp	r0, #0
 801396c:	d1ea      	bne.n	8013944 <rcl_action_wait_set_add_action_client+0x84>
 801396e:	b11f      	cbz	r7, 8013978 <rcl_action_wait_set_add_action_client+0xb8>
 8013970:	6823      	ldr	r3, [r4, #0]
 8013972:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8013976:	603b      	str	r3, [r7, #0]
 8013978:	2e00      	cmp	r6, #0
 801397a:	d0e3      	beq.n	8013944 <rcl_action_wait_set_add_action_client+0x84>
 801397c:	6823      	ldr	r3, [r4, #0]
 801397e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8013982:	6033      	str	r3, [r6, #0]
 8013984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013986:	bf00      	nop

08013988 <rcl_action_client_wait_set_get_entities_ready>:
 8013988:	2800      	cmp	r0, #0
 801398a:	f000 808d 	beq.w	8013aa8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801398e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013992:	460c      	mov	r4, r1
 8013994:	2900      	cmp	r1, #0
 8013996:	d077      	beq.n	8013a88 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013998:	4605      	mov	r5, r0
 801399a:	6808      	ldr	r0, [r1, #0]
 801399c:	2800      	cmp	r0, #0
 801399e:	d073      	beq.n	8013a88 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80139a0:	4616      	mov	r6, r2
 80139a2:	461f      	mov	r7, r3
 80139a4:	f7fd fecc 	bl	8011740 <rcl_client_is_valid>
 80139a8:	2800      	cmp	r0, #0
 80139aa:	d071      	beq.n	8013a90 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80139ac:	6820      	ldr	r0, [r4, #0]
 80139ae:	3004      	adds	r0, #4
 80139b0:	f7fd fec6 	bl	8011740 <rcl_client_is_valid>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	d06b      	beq.n	8013a90 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80139b8:	6820      	ldr	r0, [r4, #0]
 80139ba:	3008      	adds	r0, #8
 80139bc:	f7fd fec0 	bl	8011740 <rcl_client_is_valid>
 80139c0:	2800      	cmp	r0, #0
 80139c2:	d065      	beq.n	8013a90 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80139c4:	6820      	ldr	r0, [r4, #0]
 80139c6:	300c      	adds	r0, #12
 80139c8:	f7fe fe56 	bl	8012678 <rcl_subscription_is_valid>
 80139cc:	2800      	cmp	r0, #0
 80139ce:	d05f      	beq.n	8013a90 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80139d0:	6820      	ldr	r0, [r4, #0]
 80139d2:	3010      	adds	r0, #16
 80139d4:	f7fe fe50 	bl	8012678 <rcl_subscription_is_valid>
 80139d8:	2800      	cmp	r0, #0
 80139da:	d059      	beq.n	8013a90 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80139dc:	2e00      	cmp	r6, #0
 80139de:	d060      	beq.n	8013aa2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80139e0:	2f00      	cmp	r7, #0
 80139e2:	d05e      	beq.n	8013aa2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80139e4:	9b06      	ldr	r3, [sp, #24]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d05b      	beq.n	8013aa2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80139ea:	9b07      	ldr	r3, [sp, #28]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d058      	beq.n	8013aa2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80139f0:	9b08      	ldr	r3, [sp, #32]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d055      	beq.n	8013aa2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80139f6:	6823      	ldr	r3, [r4, #0]
 80139f8:	686a      	ldr	r2, [r5, #4]
 80139fa:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80139fe:	428a      	cmp	r2, r1
 8013a00:	d94c      	bls.n	8013a9c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013a02:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8013a06:	4282      	cmp	r2, r0
 8013a08:	d948      	bls.n	8013a9c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013a0a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8013a0e:	69ea      	ldr	r2, [r5, #28]
 8013a10:	42a2      	cmp	r2, r4
 8013a12:	d943      	bls.n	8013a9c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013a14:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8013a18:	4562      	cmp	r2, ip
 8013a1a:	d93f      	bls.n	8013a9c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013a1c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8013a20:	4572      	cmp	r2, lr
 8013a22:	d93b      	bls.n	8013a9c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013a24:	69aa      	ldr	r2, [r5, #24]
 8013a26:	682d      	ldr	r5, [r5, #0]
 8013a28:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8013a2c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8013a30:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8013a34:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8013a38:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8013a3c:	f103 0c0c 	add.w	ip, r3, #12
 8013a40:	eba5 050c 	sub.w	r5, r5, ip
 8013a44:	fab5 f585 	clz	r5, r5
 8013a48:	096d      	lsrs	r5, r5, #5
 8013a4a:	7035      	strb	r5, [r6, #0]
 8013a4c:	f103 0510 	add.w	r5, r3, #16
 8013a50:	1b64      	subs	r4, r4, r5
 8013a52:	fab4 f484 	clz	r4, r4
 8013a56:	0964      	lsrs	r4, r4, #5
 8013a58:	703c      	strb	r4, [r7, #0]
 8013a5a:	eba3 0008 	sub.w	r0, r3, r8
 8013a5e:	1d1c      	adds	r4, r3, #4
 8013a60:	3308      	adds	r3, #8
 8013a62:	1ad3      	subs	r3, r2, r3
 8013a64:	fab0 f080 	clz	r0, r0
 8013a68:	9a06      	ldr	r2, [sp, #24]
 8013a6a:	0940      	lsrs	r0, r0, #5
 8013a6c:	1b09      	subs	r1, r1, r4
 8013a6e:	7010      	strb	r0, [r2, #0]
 8013a70:	fab1 f181 	clz	r1, r1
 8013a74:	9a07      	ldr	r2, [sp, #28]
 8013a76:	0949      	lsrs	r1, r1, #5
 8013a78:	7011      	strb	r1, [r2, #0]
 8013a7a:	fab3 f383 	clz	r3, r3
 8013a7e:	9a08      	ldr	r2, [sp, #32]
 8013a80:	095b      	lsrs	r3, r3, #5
 8013a82:	2000      	movs	r0, #0
 8013a84:	7013      	strb	r3, [r2, #0]
 8013a86:	e001      	b.n	8013a8c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013a88:	f640 0036 	movw	r0, #2102	@ 0x836
 8013a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a90:	f7f9 fa02 	bl	800ce98 <rcutils_reset_error>
 8013a94:	f640 0036 	movw	r0, #2102	@ 0x836
 8013a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a9c:	2001      	movs	r0, #1
 8013a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aa2:	200b      	movs	r0, #11
 8013aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aa8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013aac:	4770      	bx	lr
 8013aae:	bf00      	nop

08013ab0 <rcl_action_take_goal_request>:
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	d039      	beq.n	8013b28 <rcl_action_take_goal_request+0x78>
 8013ab4:	b570      	push	{r4, r5, r6, lr}
 8013ab6:	4604      	mov	r4, r0
 8013ab8:	6800      	ldr	r0, [r0, #0]
 8013aba:	b380      	cbz	r0, 8013b1e <rcl_action_take_goal_request+0x6e>
 8013abc:	460d      	mov	r5, r1
 8013abe:	4616      	mov	r6, r2
 8013ac0:	f7fe fc96 	bl	80123f0 <rcl_service_is_valid>
 8013ac4:	b330      	cbz	r0, 8013b14 <rcl_action_take_goal_request+0x64>
 8013ac6:	6820      	ldr	r0, [r4, #0]
 8013ac8:	3004      	adds	r0, #4
 8013aca:	f7fe fc91 	bl	80123f0 <rcl_service_is_valid>
 8013ace:	b308      	cbz	r0, 8013b14 <rcl_action_take_goal_request+0x64>
 8013ad0:	6820      	ldr	r0, [r4, #0]
 8013ad2:	3008      	adds	r0, #8
 8013ad4:	f7fe fc8c 	bl	80123f0 <rcl_service_is_valid>
 8013ad8:	b1e0      	cbz	r0, 8013b14 <rcl_action_take_goal_request+0x64>
 8013ada:	6820      	ldr	r0, [r4, #0]
 8013adc:	300c      	adds	r0, #12
 8013ade:	f7f8 fa49 	bl	800bf74 <rcl_publisher_is_valid>
 8013ae2:	b1b8      	cbz	r0, 8013b14 <rcl_action_take_goal_request+0x64>
 8013ae4:	6820      	ldr	r0, [r4, #0]
 8013ae6:	3010      	adds	r0, #16
 8013ae8:	f7f8 fa44 	bl	800bf74 <rcl_publisher_is_valid>
 8013aec:	b190      	cbz	r0, 8013b14 <rcl_action_take_goal_request+0x64>
 8013aee:	b1cd      	cbz	r5, 8013b24 <rcl_action_take_goal_request+0x74>
 8013af0:	b1c6      	cbz	r6, 8013b24 <rcl_action_take_goal_request+0x74>
 8013af2:	6820      	ldr	r0, [r4, #0]
 8013af4:	4632      	mov	r2, r6
 8013af6:	4629      	mov	r1, r5
 8013af8:	f7fe fc22 	bl	8012340 <rcl_take_request>
 8013afc:	b148      	cbz	r0, 8013b12 <rcl_action_take_goal_request+0x62>
 8013afe:	280a      	cmp	r0, #10
 8013b00:	d007      	beq.n	8013b12 <rcl_action_take_goal_request+0x62>
 8013b02:	f240 2259 	movw	r2, #601	@ 0x259
 8013b06:	f640 0399 	movw	r3, #2201	@ 0x899
 8013b0a:	4290      	cmp	r0, r2
 8013b0c:	bf0c      	ite	eq
 8013b0e:	4618      	moveq	r0, r3
 8013b10:	2001      	movne	r0, #1
 8013b12:	bd70      	pop	{r4, r5, r6, pc}
 8013b14:	f7f9 f9c0 	bl	800ce98 <rcutils_reset_error>
 8013b18:	f640 0098 	movw	r0, #2200	@ 0x898
 8013b1c:	bd70      	pop	{r4, r5, r6, pc}
 8013b1e:	f640 0098 	movw	r0, #2200	@ 0x898
 8013b22:	bd70      	pop	{r4, r5, r6, pc}
 8013b24:	200b      	movs	r0, #11
 8013b26:	bd70      	pop	{r4, r5, r6, pc}
 8013b28:	f640 0098 	movw	r0, #2200	@ 0x898
 8013b2c:	4770      	bx	lr
 8013b2e:	bf00      	nop

08013b30 <rcl_action_send_goal_response>:
 8013b30:	b390      	cbz	r0, 8013b98 <rcl_action_send_goal_response+0x68>
 8013b32:	b570      	push	{r4, r5, r6, lr}
 8013b34:	4604      	mov	r4, r0
 8013b36:	6800      	ldr	r0, [r0, #0]
 8013b38:	b348      	cbz	r0, 8013b8e <rcl_action_send_goal_response+0x5e>
 8013b3a:	460d      	mov	r5, r1
 8013b3c:	4616      	mov	r6, r2
 8013b3e:	f7fe fc57 	bl	80123f0 <rcl_service_is_valid>
 8013b42:	b1f8      	cbz	r0, 8013b84 <rcl_action_send_goal_response+0x54>
 8013b44:	6820      	ldr	r0, [r4, #0]
 8013b46:	3004      	adds	r0, #4
 8013b48:	f7fe fc52 	bl	80123f0 <rcl_service_is_valid>
 8013b4c:	b1d0      	cbz	r0, 8013b84 <rcl_action_send_goal_response+0x54>
 8013b4e:	6820      	ldr	r0, [r4, #0]
 8013b50:	3008      	adds	r0, #8
 8013b52:	f7fe fc4d 	bl	80123f0 <rcl_service_is_valid>
 8013b56:	b1a8      	cbz	r0, 8013b84 <rcl_action_send_goal_response+0x54>
 8013b58:	6820      	ldr	r0, [r4, #0]
 8013b5a:	300c      	adds	r0, #12
 8013b5c:	f7f8 fa0a 	bl	800bf74 <rcl_publisher_is_valid>
 8013b60:	b180      	cbz	r0, 8013b84 <rcl_action_send_goal_response+0x54>
 8013b62:	6820      	ldr	r0, [r4, #0]
 8013b64:	3010      	adds	r0, #16
 8013b66:	f7f8 fa05 	bl	800bf74 <rcl_publisher_is_valid>
 8013b6a:	b158      	cbz	r0, 8013b84 <rcl_action_send_goal_response+0x54>
 8013b6c:	b195      	cbz	r5, 8013b94 <rcl_action_send_goal_response+0x64>
 8013b6e:	b18e      	cbz	r6, 8013b94 <rcl_action_send_goal_response+0x64>
 8013b70:	6820      	ldr	r0, [r4, #0]
 8013b72:	4632      	mov	r2, r6
 8013b74:	4629      	mov	r1, r5
 8013b76:	f7fe fc23 	bl	80123c0 <rcl_send_response>
 8013b7a:	b110      	cbz	r0, 8013b82 <rcl_action_send_goal_response+0x52>
 8013b7c:	2802      	cmp	r0, #2
 8013b7e:	bf18      	it	ne
 8013b80:	2001      	movne	r0, #1
 8013b82:	bd70      	pop	{r4, r5, r6, pc}
 8013b84:	f7f9 f988 	bl	800ce98 <rcutils_reset_error>
 8013b88:	f640 0098 	movw	r0, #2200	@ 0x898
 8013b8c:	bd70      	pop	{r4, r5, r6, pc}
 8013b8e:	f640 0098 	movw	r0, #2200	@ 0x898
 8013b92:	bd70      	pop	{r4, r5, r6, pc}
 8013b94:	200b      	movs	r0, #11
 8013b96:	bd70      	pop	{r4, r5, r6, pc}
 8013b98:	f640 0098 	movw	r0, #2200	@ 0x898
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop

08013ba0 <rcl_action_take_result_request>:
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	d03a      	beq.n	8013c1a <rcl_action_take_result_request+0x7a>
 8013ba4:	b570      	push	{r4, r5, r6, lr}
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	6800      	ldr	r0, [r0, #0]
 8013baa:	b388      	cbz	r0, 8013c10 <rcl_action_take_result_request+0x70>
 8013bac:	460d      	mov	r5, r1
 8013bae:	4616      	mov	r6, r2
 8013bb0:	f7fe fc1e 	bl	80123f0 <rcl_service_is_valid>
 8013bb4:	b338      	cbz	r0, 8013c06 <rcl_action_take_result_request+0x66>
 8013bb6:	6820      	ldr	r0, [r4, #0]
 8013bb8:	3004      	adds	r0, #4
 8013bba:	f7fe fc19 	bl	80123f0 <rcl_service_is_valid>
 8013bbe:	b310      	cbz	r0, 8013c06 <rcl_action_take_result_request+0x66>
 8013bc0:	6820      	ldr	r0, [r4, #0]
 8013bc2:	3008      	adds	r0, #8
 8013bc4:	f7fe fc14 	bl	80123f0 <rcl_service_is_valid>
 8013bc8:	b1e8      	cbz	r0, 8013c06 <rcl_action_take_result_request+0x66>
 8013bca:	6820      	ldr	r0, [r4, #0]
 8013bcc:	300c      	adds	r0, #12
 8013bce:	f7f8 f9d1 	bl	800bf74 <rcl_publisher_is_valid>
 8013bd2:	b1c0      	cbz	r0, 8013c06 <rcl_action_take_result_request+0x66>
 8013bd4:	6820      	ldr	r0, [r4, #0]
 8013bd6:	3010      	adds	r0, #16
 8013bd8:	f7f8 f9cc 	bl	800bf74 <rcl_publisher_is_valid>
 8013bdc:	b198      	cbz	r0, 8013c06 <rcl_action_take_result_request+0x66>
 8013bde:	b1d5      	cbz	r5, 8013c16 <rcl_action_take_result_request+0x76>
 8013be0:	b1ce      	cbz	r6, 8013c16 <rcl_action_take_result_request+0x76>
 8013be2:	6820      	ldr	r0, [r4, #0]
 8013be4:	4632      	mov	r2, r6
 8013be6:	4629      	mov	r1, r5
 8013be8:	3008      	adds	r0, #8
 8013bea:	f7fe fba9 	bl	8012340 <rcl_take_request>
 8013bee:	b148      	cbz	r0, 8013c04 <rcl_action_take_result_request+0x64>
 8013bf0:	280a      	cmp	r0, #10
 8013bf2:	d007      	beq.n	8013c04 <rcl_action_take_result_request+0x64>
 8013bf4:	f240 2259 	movw	r2, #601	@ 0x259
 8013bf8:	f640 0399 	movw	r3, #2201	@ 0x899
 8013bfc:	4290      	cmp	r0, r2
 8013bfe:	bf0c      	ite	eq
 8013c00:	4618      	moveq	r0, r3
 8013c02:	2001      	movne	r0, #1
 8013c04:	bd70      	pop	{r4, r5, r6, pc}
 8013c06:	f7f9 f947 	bl	800ce98 <rcutils_reset_error>
 8013c0a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013c0e:	bd70      	pop	{r4, r5, r6, pc}
 8013c10:	f640 0098 	movw	r0, #2200	@ 0x898
 8013c14:	bd70      	pop	{r4, r5, r6, pc}
 8013c16:	200b      	movs	r0, #11
 8013c18:	bd70      	pop	{r4, r5, r6, pc}
 8013c1a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013c1e:	4770      	bx	lr

08013c20 <rcl_action_take_cancel_request>:
 8013c20:	2800      	cmp	r0, #0
 8013c22:	d03a      	beq.n	8013c9a <rcl_action_take_cancel_request+0x7a>
 8013c24:	b570      	push	{r4, r5, r6, lr}
 8013c26:	4604      	mov	r4, r0
 8013c28:	6800      	ldr	r0, [r0, #0]
 8013c2a:	b388      	cbz	r0, 8013c90 <rcl_action_take_cancel_request+0x70>
 8013c2c:	460d      	mov	r5, r1
 8013c2e:	4616      	mov	r6, r2
 8013c30:	f7fe fbde 	bl	80123f0 <rcl_service_is_valid>
 8013c34:	b338      	cbz	r0, 8013c86 <rcl_action_take_cancel_request+0x66>
 8013c36:	6820      	ldr	r0, [r4, #0]
 8013c38:	3004      	adds	r0, #4
 8013c3a:	f7fe fbd9 	bl	80123f0 <rcl_service_is_valid>
 8013c3e:	b310      	cbz	r0, 8013c86 <rcl_action_take_cancel_request+0x66>
 8013c40:	6820      	ldr	r0, [r4, #0]
 8013c42:	3008      	adds	r0, #8
 8013c44:	f7fe fbd4 	bl	80123f0 <rcl_service_is_valid>
 8013c48:	b1e8      	cbz	r0, 8013c86 <rcl_action_take_cancel_request+0x66>
 8013c4a:	6820      	ldr	r0, [r4, #0]
 8013c4c:	300c      	adds	r0, #12
 8013c4e:	f7f8 f991 	bl	800bf74 <rcl_publisher_is_valid>
 8013c52:	b1c0      	cbz	r0, 8013c86 <rcl_action_take_cancel_request+0x66>
 8013c54:	6820      	ldr	r0, [r4, #0]
 8013c56:	3010      	adds	r0, #16
 8013c58:	f7f8 f98c 	bl	800bf74 <rcl_publisher_is_valid>
 8013c5c:	b198      	cbz	r0, 8013c86 <rcl_action_take_cancel_request+0x66>
 8013c5e:	b1d5      	cbz	r5, 8013c96 <rcl_action_take_cancel_request+0x76>
 8013c60:	b1ce      	cbz	r6, 8013c96 <rcl_action_take_cancel_request+0x76>
 8013c62:	6820      	ldr	r0, [r4, #0]
 8013c64:	4632      	mov	r2, r6
 8013c66:	4629      	mov	r1, r5
 8013c68:	3004      	adds	r0, #4
 8013c6a:	f7fe fb69 	bl	8012340 <rcl_take_request>
 8013c6e:	b148      	cbz	r0, 8013c84 <rcl_action_take_cancel_request+0x64>
 8013c70:	280a      	cmp	r0, #10
 8013c72:	d007      	beq.n	8013c84 <rcl_action_take_cancel_request+0x64>
 8013c74:	f240 2259 	movw	r2, #601	@ 0x259
 8013c78:	f640 0399 	movw	r3, #2201	@ 0x899
 8013c7c:	4290      	cmp	r0, r2
 8013c7e:	bf0c      	ite	eq
 8013c80:	4618      	moveq	r0, r3
 8013c82:	2001      	movne	r0, #1
 8013c84:	bd70      	pop	{r4, r5, r6, pc}
 8013c86:	f7f9 f907 	bl	800ce98 <rcutils_reset_error>
 8013c8a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013c8e:	bd70      	pop	{r4, r5, r6, pc}
 8013c90:	f640 0098 	movw	r0, #2200	@ 0x898
 8013c94:	bd70      	pop	{r4, r5, r6, pc}
 8013c96:	200b      	movs	r0, #11
 8013c98:	bd70      	pop	{r4, r5, r6, pc}
 8013c9a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013c9e:	4770      	bx	lr

08013ca0 <rcl_action_send_cancel_response>:
 8013ca0:	b398      	cbz	r0, 8013d0a <rcl_action_send_cancel_response+0x6a>
 8013ca2:	b570      	push	{r4, r5, r6, lr}
 8013ca4:	4604      	mov	r4, r0
 8013ca6:	6800      	ldr	r0, [r0, #0]
 8013ca8:	b350      	cbz	r0, 8013d00 <rcl_action_send_cancel_response+0x60>
 8013caa:	460d      	mov	r5, r1
 8013cac:	4616      	mov	r6, r2
 8013cae:	f7fe fb9f 	bl	80123f0 <rcl_service_is_valid>
 8013cb2:	b300      	cbz	r0, 8013cf6 <rcl_action_send_cancel_response+0x56>
 8013cb4:	6820      	ldr	r0, [r4, #0]
 8013cb6:	3004      	adds	r0, #4
 8013cb8:	f7fe fb9a 	bl	80123f0 <rcl_service_is_valid>
 8013cbc:	b1d8      	cbz	r0, 8013cf6 <rcl_action_send_cancel_response+0x56>
 8013cbe:	6820      	ldr	r0, [r4, #0]
 8013cc0:	3008      	adds	r0, #8
 8013cc2:	f7fe fb95 	bl	80123f0 <rcl_service_is_valid>
 8013cc6:	b1b0      	cbz	r0, 8013cf6 <rcl_action_send_cancel_response+0x56>
 8013cc8:	6820      	ldr	r0, [r4, #0]
 8013cca:	300c      	adds	r0, #12
 8013ccc:	f7f8 f952 	bl	800bf74 <rcl_publisher_is_valid>
 8013cd0:	b188      	cbz	r0, 8013cf6 <rcl_action_send_cancel_response+0x56>
 8013cd2:	6820      	ldr	r0, [r4, #0]
 8013cd4:	3010      	adds	r0, #16
 8013cd6:	f7f8 f94d 	bl	800bf74 <rcl_publisher_is_valid>
 8013cda:	b160      	cbz	r0, 8013cf6 <rcl_action_send_cancel_response+0x56>
 8013cdc:	b19d      	cbz	r5, 8013d06 <rcl_action_send_cancel_response+0x66>
 8013cde:	b196      	cbz	r6, 8013d06 <rcl_action_send_cancel_response+0x66>
 8013ce0:	6820      	ldr	r0, [r4, #0]
 8013ce2:	4632      	mov	r2, r6
 8013ce4:	4629      	mov	r1, r5
 8013ce6:	3004      	adds	r0, #4
 8013ce8:	f7fe fb6a 	bl	80123c0 <rcl_send_response>
 8013cec:	b110      	cbz	r0, 8013cf4 <rcl_action_send_cancel_response+0x54>
 8013cee:	2802      	cmp	r0, #2
 8013cf0:	bf18      	it	ne
 8013cf2:	2001      	movne	r0, #1
 8013cf4:	bd70      	pop	{r4, r5, r6, pc}
 8013cf6:	f7f9 f8cf 	bl	800ce98 <rcutils_reset_error>
 8013cfa:	f640 0098 	movw	r0, #2200	@ 0x898
 8013cfe:	bd70      	pop	{r4, r5, r6, pc}
 8013d00:	f640 0098 	movw	r0, #2200	@ 0x898
 8013d04:	bd70      	pop	{r4, r5, r6, pc}
 8013d06:	200b      	movs	r0, #11
 8013d08:	bd70      	pop	{r4, r5, r6, pc}
 8013d0a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013d0e:	4770      	bx	lr

08013d10 <rcl_action_wait_set_add_action_server>:
 8013d10:	2800      	cmp	r0, #0
 8013d12:	d04d      	beq.n	8013db0 <rcl_action_wait_set_add_action_server+0xa0>
 8013d14:	b570      	push	{r4, r5, r6, lr}
 8013d16:	460c      	mov	r4, r1
 8013d18:	b159      	cbz	r1, 8013d32 <rcl_action_wait_set_add_action_server+0x22>
 8013d1a:	4605      	mov	r5, r0
 8013d1c:	6808      	ldr	r0, [r1, #0]
 8013d1e:	b140      	cbz	r0, 8013d32 <rcl_action_wait_set_add_action_server+0x22>
 8013d20:	4616      	mov	r6, r2
 8013d22:	f7fe fb65 	bl	80123f0 <rcl_service_is_valid>
 8013d26:	b120      	cbz	r0, 8013d32 <rcl_action_wait_set_add_action_server+0x22>
 8013d28:	6820      	ldr	r0, [r4, #0]
 8013d2a:	3004      	adds	r0, #4
 8013d2c:	f7fe fb60 	bl	80123f0 <rcl_service_is_valid>
 8013d30:	b910      	cbnz	r0, 8013d38 <rcl_action_wait_set_add_action_server+0x28>
 8013d32:	f640 0098 	movw	r0, #2200	@ 0x898
 8013d36:	bd70      	pop	{r4, r5, r6, pc}
 8013d38:	6820      	ldr	r0, [r4, #0]
 8013d3a:	3008      	adds	r0, #8
 8013d3c:	f7fe fb58 	bl	80123f0 <rcl_service_is_valid>
 8013d40:	2800      	cmp	r0, #0
 8013d42:	d0f6      	beq.n	8013d32 <rcl_action_wait_set_add_action_server+0x22>
 8013d44:	6820      	ldr	r0, [r4, #0]
 8013d46:	300c      	adds	r0, #12
 8013d48:	f7f8 f92c 	bl	800bfa4 <rcl_publisher_is_valid_except_context>
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	d0f0      	beq.n	8013d32 <rcl_action_wait_set_add_action_server+0x22>
 8013d50:	6820      	ldr	r0, [r4, #0]
 8013d52:	3010      	adds	r0, #16
 8013d54:	f7f8 f926 	bl	800bfa4 <rcl_publisher_is_valid_except_context>
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	d0ea      	beq.n	8013d32 <rcl_action_wait_set_add_action_server+0x22>
 8013d5c:	6821      	ldr	r1, [r4, #0]
 8013d5e:	4628      	mov	r0, r5
 8013d60:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8013d64:	f7ff face 	bl	8013304 <rcl_wait_set_add_service>
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	d1e4      	bne.n	8013d36 <rcl_action_wait_set_add_action_server+0x26>
 8013d6c:	6821      	ldr	r1, [r4, #0]
 8013d6e:	4628      	mov	r0, r5
 8013d70:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8013d74:	3104      	adds	r1, #4
 8013d76:	f7ff fac5 	bl	8013304 <rcl_wait_set_add_service>
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	d1db      	bne.n	8013d36 <rcl_action_wait_set_add_action_server+0x26>
 8013d7e:	6821      	ldr	r1, [r4, #0]
 8013d80:	4628      	mov	r0, r5
 8013d82:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8013d86:	3108      	adds	r1, #8
 8013d88:	f7ff fabc 	bl	8013304 <rcl_wait_set_add_service>
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	d1d2      	bne.n	8013d36 <rcl_action_wait_set_add_action_server+0x26>
 8013d90:	6821      	ldr	r1, [r4, #0]
 8013d92:	4628      	mov	r0, r5
 8013d94:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8013d98:	3114      	adds	r1, #20
 8013d9a:	f7ff fa57 	bl	801324c <rcl_wait_set_add_timer>
 8013d9e:	2800      	cmp	r0, #0
 8013da0:	d1c9      	bne.n	8013d36 <rcl_action_wait_set_add_action_server+0x26>
 8013da2:	2e00      	cmp	r6, #0
 8013da4:	d0c7      	beq.n	8013d36 <rcl_action_wait_set_add_action_server+0x26>
 8013da6:	6823      	ldr	r3, [r4, #0]
 8013da8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8013dac:	6033      	str	r3, [r6, #0]
 8013dae:	bd70      	pop	{r4, r5, r6, pc}
 8013db0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013db4:	4770      	bx	lr
 8013db6:	bf00      	nop

08013db8 <rcl_action_server_wait_set_get_entities_ready>:
 8013db8:	2800      	cmp	r0, #0
 8013dba:	d05a      	beq.n	8013e72 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8013dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dbe:	460c      	mov	r4, r1
 8013dc0:	b161      	cbz	r1, 8013ddc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013dc2:	4605      	mov	r5, r0
 8013dc4:	6808      	ldr	r0, [r1, #0]
 8013dc6:	b148      	cbz	r0, 8013ddc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013dc8:	4616      	mov	r6, r2
 8013dca:	461f      	mov	r7, r3
 8013dcc:	f7fe fb10 	bl	80123f0 <rcl_service_is_valid>
 8013dd0:	b120      	cbz	r0, 8013ddc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013dd2:	6820      	ldr	r0, [r4, #0]
 8013dd4:	3004      	adds	r0, #4
 8013dd6:	f7fe fb0b 	bl	80123f0 <rcl_service_is_valid>
 8013dda:	b910      	cbnz	r0, 8013de2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8013ddc:	f640 0098 	movw	r0, #2200	@ 0x898
 8013de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013de2:	6820      	ldr	r0, [r4, #0]
 8013de4:	3008      	adds	r0, #8
 8013de6:	f7fe fb03 	bl	80123f0 <rcl_service_is_valid>
 8013dea:	2800      	cmp	r0, #0
 8013dec:	d0f6      	beq.n	8013ddc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013dee:	6820      	ldr	r0, [r4, #0]
 8013df0:	300c      	adds	r0, #12
 8013df2:	f7f8 f8d7 	bl	800bfa4 <rcl_publisher_is_valid_except_context>
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d0f0      	beq.n	8013ddc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013dfa:	6820      	ldr	r0, [r4, #0]
 8013dfc:	3010      	adds	r0, #16
 8013dfe:	f7f8 f8d1 	bl	800bfa4 <rcl_publisher_is_valid_except_context>
 8013e02:	2800      	cmp	r0, #0
 8013e04:	d0ea      	beq.n	8013ddc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013e06:	b3be      	cbz	r6, 8013e78 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013e08:	b3b7      	cbz	r7, 8013e78 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013e0a:	9b06      	ldr	r3, [sp, #24]
 8013e0c:	b3a3      	cbz	r3, 8013e78 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013e0e:	9b07      	ldr	r3, [sp, #28]
 8013e10:	b393      	cbz	r3, 8013e78 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013e12:	6821      	ldr	r1, [r4, #0]
 8013e14:	692a      	ldr	r2, [r5, #16]
 8013e16:	6a2c      	ldr	r4, [r5, #32]
 8013e18:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8013e1c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8013e20:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8013e24:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8013e28:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8013e2c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8013e30:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013e34:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8013e38:	1a64      	subs	r4, r4, r1
 8013e3a:	fab4 f484 	clz	r4, r4
 8013e3e:	0964      	lsrs	r4, r4, #5
 8013e40:	7034      	strb	r4, [r6, #0]
 8013e42:	1d0c      	adds	r4, r1, #4
 8013e44:	1b1b      	subs	r3, r3, r4
 8013e46:	fab3 f383 	clz	r3, r3
 8013e4a:	095b      	lsrs	r3, r3, #5
 8013e4c:	f101 0408 	add.w	r4, r1, #8
 8013e50:	703b      	strb	r3, [r7, #0]
 8013e52:	f101 0314 	add.w	r3, r1, #20
 8013e56:	1b01      	subs	r1, r0, r4
 8013e58:	1ad3      	subs	r3, r2, r3
 8013e5a:	fab1 f181 	clz	r1, r1
 8013e5e:	9a06      	ldr	r2, [sp, #24]
 8013e60:	0949      	lsrs	r1, r1, #5
 8013e62:	7011      	strb	r1, [r2, #0]
 8013e64:	fab3 f383 	clz	r3, r3
 8013e68:	9a07      	ldr	r2, [sp, #28]
 8013e6a:	095b      	lsrs	r3, r3, #5
 8013e6c:	2000      	movs	r0, #0
 8013e6e:	7013      	strb	r3, [r2, #0]
 8013e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e72:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013e76:	4770      	bx	lr
 8013e78:	200b      	movs	r0, #11
 8013e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013e7c <_execute_event_handler>:
 8013e7c:	2002      	movs	r0, #2
 8013e7e:	4770      	bx	lr

08013e80 <_cancel_goal_event_handler>:
 8013e80:	2003      	movs	r0, #3
 8013e82:	4770      	bx	lr

08013e84 <_succeed_event_handler>:
 8013e84:	2004      	movs	r0, #4
 8013e86:	4770      	bx	lr

08013e88 <_abort_event_handler>:
 8013e88:	2006      	movs	r0, #6
 8013e8a:	4770      	bx	lr

08013e8c <_canceled_event_handler>:
 8013e8c:	2005      	movs	r0, #5
 8013e8e:	4770      	bx	lr

08013e90 <rcl_action_transition_goal_state>:
 8013e90:	b2c2      	uxtb	r2, r0
 8013e92:	2a06      	cmp	r2, #6
 8013e94:	d80c      	bhi.n	8013eb0 <rcl_action_transition_goal_state+0x20>
 8013e96:	2904      	cmp	r1, #4
 8013e98:	d80a      	bhi.n	8013eb0 <rcl_action_transition_goal_state+0x20>
 8013e9a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8013e9e:	b410      	push	{r4}
 8013ea0:	1853      	adds	r3, r2, r1
 8013ea2:	4c06      	ldr	r4, [pc, #24]	@ (8013ebc <rcl_action_transition_goal_state+0x2c>)
 8013ea4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013ea8:	b123      	cbz	r3, 8013eb4 <rcl_action_transition_goal_state+0x24>
 8013eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eae:	4718      	bx	r3
 8013eb0:	2000      	movs	r0, #0
 8013eb2:	4770      	bx	lr
 8013eb4:	2000      	movs	r0, #0
 8013eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eba:	4770      	bx	lr
 8013ebc:	0801a81c 	.word	0x0801a81c

08013ec0 <rcl_action_get_zero_initialized_cancel_response>:
 8013ec0:	b510      	push	{r4, lr}
 8013ec2:	4c07      	ldr	r4, [pc, #28]	@ (8013ee0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8013ec4:	4686      	mov	lr, r0
 8013ec6:	4684      	mov	ip, r0
 8013ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013eca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ed0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ed4:	6823      	ldr	r3, [r4, #0]
 8013ed6:	f8cc 3000 	str.w	r3, [ip]
 8013eda:	4670      	mov	r0, lr
 8013edc:	bd10      	pop	{r4, pc}
 8013ede:	bf00      	nop
 8013ee0:	0801a8a8 	.word	0x0801a8a8

08013ee4 <rclc_action_send_result_request>:
 8013ee4:	b1d0      	cbz	r0, 8013f1c <rclc_action_send_result_request+0x38>
 8013ee6:	b500      	push	{lr}
 8013ee8:	4684      	mov	ip, r0
 8013eea:	b087      	sub	sp, #28
 8013eec:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8013ef0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8013ef4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8013ef8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8013efc:	f10d 0e08 	add.w	lr, sp, #8
 8013f00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f04:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013f08:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8013f0c:	a902      	add	r1, sp, #8
 8013f0e:	3010      	adds	r0, #16
 8013f10:	f7ff fbda 	bl	80136c8 <rcl_action_send_result_request>
 8013f14:	b920      	cbnz	r0, 8013f20 <rclc_action_send_result_request+0x3c>
 8013f16:	b007      	add	sp, #28
 8013f18:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f1c:	200b      	movs	r0, #11
 8013f1e:	4770      	bx	lr
 8013f20:	9001      	str	r0, [sp, #4]
 8013f22:	f7f8 ffb9 	bl	800ce98 <rcutils_reset_error>
 8013f26:	9801      	ldr	r0, [sp, #4]
 8013f28:	b007      	add	sp, #28
 8013f2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f2e:	bf00      	nop

08013f30 <rclc_action_take_goal_handle>:
 8013f30:	b160      	cbz	r0, 8013f4c <rclc_action_take_goal_handle+0x1c>
 8013f32:	6883      	ldr	r3, [r0, #8]
 8013f34:	b143      	cbz	r3, 8013f48 <rclc_action_take_goal_handle+0x18>
 8013f36:	6819      	ldr	r1, [r3, #0]
 8013f38:	6081      	str	r1, [r0, #8]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	721a      	strb	r2, [r3, #8]
 8013f3e:	68c1      	ldr	r1, [r0, #12]
 8013f40:	6019      	str	r1, [r3, #0]
 8013f42:	621a      	str	r2, [r3, #32]
 8013f44:	849a      	strh	r2, [r3, #36]	@ 0x24
 8013f46:	60c3      	str	r3, [r0, #12]
 8013f48:	4618      	mov	r0, r3
 8013f4a:	4770      	bx	lr
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	e7fb      	b.n	8013f48 <rclc_action_take_goal_handle+0x18>

08013f50 <rclc_action_remove_used_goal_handle>:
 8013f50:	b180      	cbz	r0, 8013f74 <rclc_action_remove_used_goal_handle+0x24>
 8013f52:	b179      	cbz	r1, 8013f74 <rclc_action_remove_used_goal_handle+0x24>
 8013f54:	68c3      	ldr	r3, [r0, #12]
 8013f56:	4299      	cmp	r1, r3
 8013f58:	d00d      	beq.n	8013f76 <rclc_action_remove_used_goal_handle+0x26>
 8013f5a:	b12b      	cbz	r3, 8013f68 <rclc_action_remove_used_goal_handle+0x18>
 8013f5c:	681a      	ldr	r2, [r3, #0]
 8013f5e:	4291      	cmp	r1, r2
 8013f60:	d003      	beq.n	8013f6a <rclc_action_remove_used_goal_handle+0x1a>
 8013f62:	4613      	mov	r3, r2
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d1f9      	bne.n	8013f5c <rclc_action_remove_used_goal_handle+0xc>
 8013f68:	4770      	bx	lr
 8013f6a:	680a      	ldr	r2, [r1, #0]
 8013f6c:	601a      	str	r2, [r3, #0]
 8013f6e:	6883      	ldr	r3, [r0, #8]
 8013f70:	600b      	str	r3, [r1, #0]
 8013f72:	6081      	str	r1, [r0, #8]
 8013f74:	4770      	bx	lr
 8013f76:	680b      	ldr	r3, [r1, #0]
 8013f78:	60c3      	str	r3, [r0, #12]
 8013f7a:	e7f8      	b.n	8013f6e <rclc_action_remove_used_goal_handle+0x1e>

08013f7c <rclc_action_find_goal_handle_by_uuid>:
 8013f7c:	b538      	push	{r3, r4, r5, lr}
 8013f7e:	b180      	cbz	r0, 8013fa2 <rclc_action_find_goal_handle_by_uuid+0x26>
 8013f80:	460d      	mov	r5, r1
 8013f82:	b181      	cbz	r1, 8013fa6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8013f84:	68c4      	ldr	r4, [r0, #12]
 8013f86:	b914      	cbnz	r4, 8013f8e <rclc_action_find_goal_handle_by_uuid+0x12>
 8013f88:	e009      	b.n	8013f9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013f8a:	6824      	ldr	r4, [r4, #0]
 8013f8c:	b13c      	cbz	r4, 8013f9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013f8e:	f104 0009 	add.w	r0, r4, #9
 8013f92:	2210      	movs	r2, #16
 8013f94:	4629      	mov	r1, r5
 8013f96:	f004 ffa5 	bl	8018ee4 <memcmp>
 8013f9a:	2800      	cmp	r0, #0
 8013f9c:	d1f5      	bne.n	8013f8a <rclc_action_find_goal_handle_by_uuid+0xe>
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	bd38      	pop	{r3, r4, r5, pc}
 8013fa2:	4604      	mov	r4, r0
 8013fa4:	e7fb      	b.n	8013f9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013fa6:	460c      	mov	r4, r1
 8013fa8:	e7f9      	b.n	8013f9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013faa:	bf00      	nop

08013fac <rclc_action_find_first_handle_by_status>:
 8013fac:	b140      	cbz	r0, 8013fc0 <rclc_action_find_first_handle_by_status+0x14>
 8013fae:	68c0      	ldr	r0, [r0, #12]
 8013fb0:	b910      	cbnz	r0, 8013fb8 <rclc_action_find_first_handle_by_status+0xc>
 8013fb2:	e005      	b.n	8013fc0 <rclc_action_find_first_handle_by_status+0x14>
 8013fb4:	6800      	ldr	r0, [r0, #0]
 8013fb6:	b118      	cbz	r0, 8013fc0 <rclc_action_find_first_handle_by_status+0x14>
 8013fb8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013fbc:	428b      	cmp	r3, r1
 8013fbe:	d1f9      	bne.n	8013fb4 <rclc_action_find_first_handle_by_status+0x8>
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop

08013fc4 <rclc_action_find_first_terminated_handle>:
 8013fc4:	b140      	cbz	r0, 8013fd8 <rclc_action_find_first_terminated_handle+0x14>
 8013fc6:	68c0      	ldr	r0, [r0, #12]
 8013fc8:	b910      	cbnz	r0, 8013fd0 <rclc_action_find_first_terminated_handle+0xc>
 8013fca:	e005      	b.n	8013fd8 <rclc_action_find_first_terminated_handle+0x14>
 8013fcc:	6800      	ldr	r0, [r0, #0]
 8013fce:	b118      	cbz	r0, 8013fd8 <rclc_action_find_first_terminated_handle+0x14>
 8013fd0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013fd4:	2b03      	cmp	r3, #3
 8013fd6:	ddf9      	ble.n	8013fcc <rclc_action_find_first_terminated_handle+0x8>
 8013fd8:	4770      	bx	lr
 8013fda:	bf00      	nop

08013fdc <rclc_action_find_handle_by_goal_request_sequence_number>:
 8013fdc:	b170      	cbz	r0, 8013ffc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013fde:	68c0      	ldr	r0, [r0, #12]
 8013fe0:	b160      	cbz	r0, 8013ffc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013fe2:	b410      	push	{r4}
 8013fe4:	e001      	b.n	8013fea <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8013fe6:	6800      	ldr	r0, [r0, #0]
 8013fe8:	b128      	cbz	r0, 8013ff6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8013fea:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8013fee:	4299      	cmp	r1, r3
 8013ff0:	bf08      	it	eq
 8013ff2:	4294      	cmpeq	r4, r2
 8013ff4:	d1f7      	bne.n	8013fe6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8013ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ffa:	4770      	bx	lr
 8013ffc:	4770      	bx	lr
 8013ffe:	bf00      	nop

08014000 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014000:	b170      	cbz	r0, 8014020 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014002:	68c0      	ldr	r0, [r0, #12]
 8014004:	b160      	cbz	r0, 8014020 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014006:	b410      	push	{r4}
 8014008:	e001      	b.n	801400e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801400a:	6800      	ldr	r0, [r0, #0]
 801400c:	b128      	cbz	r0, 801401a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801400e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014012:	4299      	cmp	r1, r3
 8014014:	bf08      	it	eq
 8014016:	4294      	cmpeq	r4, r2
 8014018:	d1f7      	bne.n	801400a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801401a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801401e:	4770      	bx	lr
 8014020:	4770      	bx	lr
 8014022:	bf00      	nop

08014024 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014024:	b170      	cbz	r0, 8014044 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014026:	68c0      	ldr	r0, [r0, #12]
 8014028:	b160      	cbz	r0, 8014044 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801402a:	b410      	push	{r4}
 801402c:	e001      	b.n	8014032 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801402e:	6800      	ldr	r0, [r0, #0]
 8014030:	b128      	cbz	r0, 801403e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8014032:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8014036:	4299      	cmp	r1, r3
 8014038:	bf08      	it	eq
 801403a:	4294      	cmpeq	r4, r2
 801403c:	d1f7      	bne.n	801402e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801403e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014042:	4770      	bx	lr
 8014044:	4770      	bx	lr
 8014046:	bf00      	nop

08014048 <rclc_action_find_first_handle_with_goal_response>:
 8014048:	b140      	cbz	r0, 801405c <rclc_action_find_first_handle_with_goal_response+0x14>
 801404a:	68c0      	ldr	r0, [r0, #12]
 801404c:	b910      	cbnz	r0, 8014054 <rclc_action_find_first_handle_with_goal_response+0xc>
 801404e:	e005      	b.n	801405c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014050:	6800      	ldr	r0, [r0, #0]
 8014052:	b118      	cbz	r0, 801405c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014054:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d0f9      	beq.n	8014050 <rclc_action_find_first_handle_with_goal_response+0x8>
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop

08014060 <rclc_action_find_first_handle_with_result_response>:
 8014060:	b140      	cbz	r0, 8014074 <rclc_action_find_first_handle_with_result_response+0x14>
 8014062:	68c0      	ldr	r0, [r0, #12]
 8014064:	b910      	cbnz	r0, 801406c <rclc_action_find_first_handle_with_result_response+0xc>
 8014066:	e005      	b.n	8014074 <rclc_action_find_first_handle_with_result_response+0x14>
 8014068:	6800      	ldr	r0, [r0, #0]
 801406a:	b118      	cbz	r0, 8014074 <rclc_action_find_first_handle_with_result_response+0x14>
 801406c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014070:	2b00      	cmp	r3, #0
 8014072:	d0f9      	beq.n	8014068 <rclc_action_find_first_handle_with_result_response+0x8>
 8014074:	4770      	bx	lr
 8014076:	bf00      	nop

08014078 <rclc_action_server_response_goal_request>:
 8014078:	b198      	cbz	r0, 80140a2 <rclc_action_server_response_goal_request+0x2a>
 801407a:	b510      	push	{r4, lr}
 801407c:	6844      	ldr	r4, [r0, #4]
 801407e:	b086      	sub	sp, #24
 8014080:	2200      	movs	r2, #0
 8014082:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8014086:	460b      	mov	r3, r1
 8014088:	9205      	str	r2, [sp, #20]
 801408a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801408e:	aa03      	add	r2, sp, #12
 8014090:	f104 0010 	add.w	r0, r4, #16
 8014094:	f88d 300c 	strb.w	r3, [sp, #12]
 8014098:	f7ff fd4a 	bl	8013b30 <rcl_action_send_goal_response>
 801409c:	b918      	cbnz	r0, 80140a6 <rclc_action_server_response_goal_request+0x2e>
 801409e:	b006      	add	sp, #24
 80140a0:	bd10      	pop	{r4, pc}
 80140a2:	200b      	movs	r0, #11
 80140a4:	4770      	bx	lr
 80140a6:	9001      	str	r0, [sp, #4]
 80140a8:	f7f8 fef6 	bl	800ce98 <rcutils_reset_error>
 80140ac:	9801      	ldr	r0, [sp, #4]
 80140ae:	b006      	add	sp, #24
 80140b0:	bd10      	pop	{r4, pc}
 80140b2:	bf00      	nop
 80140b4:	0000      	movs	r0, r0
	...

080140b8 <rclc_action_server_goal_cancel_accept>:
 80140b8:	b310      	cbz	r0, 8014100 <rclc_action_server_goal_cancel_accept+0x48>
 80140ba:	b510      	push	{r4, lr}
 80140bc:	b090      	sub	sp, #64	@ 0x40
 80140be:	4604      	mov	r4, r0
 80140c0:	a806      	add	r0, sp, #24
 80140c2:	f7ff fefd 	bl	8013ec0 <rcl_action_get_zero_initialized_cancel_response>
 80140c6:	2300      	movs	r3, #0
 80140c8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80140cc:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80140d0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80140d4:	f88d 3018 	strb.w	r3, [sp, #24]
 80140d8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80140dc:	f8cd d01c 	str.w	sp, [sp, #28]
 80140e0:	46ec      	mov	ip, sp
 80140e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140e6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014108 <rclc_action_server_goal_cancel_accept+0x50>
 80140ea:	6860      	ldr	r0, [r4, #4]
 80140ec:	aa06      	add	r2, sp, #24
 80140ee:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80140f2:	3010      	adds	r0, #16
 80140f4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80140f8:	f7ff fdd2 	bl	8013ca0 <rcl_action_send_cancel_response>
 80140fc:	b010      	add	sp, #64	@ 0x40
 80140fe:	bd10      	pop	{r4, pc}
 8014100:	200b      	movs	r0, #11
 8014102:	4770      	bx	lr
 8014104:	f3af 8000 	nop.w
 8014108:	00000001 	.word	0x00000001
 801410c:	00000001 	.word	0x00000001

08014110 <rclc_action_server_goal_cancel_reject>:
 8014110:	b082      	sub	sp, #8
 8014112:	b530      	push	{r4, r5, lr}
 8014114:	b08b      	sub	sp, #44	@ 0x2c
 8014116:	ac0e      	add	r4, sp, #56	@ 0x38
 8014118:	e884 000c 	stmia.w	r4, {r2, r3}
 801411c:	b188      	cbz	r0, 8014142 <rclc_action_server_goal_cancel_reject+0x32>
 801411e:	4604      	mov	r4, r0
 8014120:	a801      	add	r0, sp, #4
 8014122:	460d      	mov	r5, r1
 8014124:	f7ff fecc 	bl	8013ec0 <rcl_action_get_zero_initialized_cancel_response>
 8014128:	aa01      	add	r2, sp, #4
 801412a:	a90e      	add	r1, sp, #56	@ 0x38
 801412c:	f104 0010 	add.w	r0, r4, #16
 8014130:	f88d 5004 	strb.w	r5, [sp, #4]
 8014134:	f7ff fdb4 	bl	8013ca0 <rcl_action_send_cancel_response>
 8014138:	b00b      	add	sp, #44	@ 0x2c
 801413a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801413e:	b002      	add	sp, #8
 8014140:	4770      	bx	lr
 8014142:	200b      	movs	r0, #11
 8014144:	b00b      	add	sp, #44	@ 0x2c
 8014146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801414a:	b002      	add	sp, #8
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop

08014150 <__atomic_load_8>:
 8014150:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014154:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014158:	4a15      	ldr	r2, [pc, #84]	@ (80141b0 <__atomic_load_8+0x60>)
 801415a:	4b16      	ldr	r3, [pc, #88]	@ (80141b4 <__atomic_load_8+0x64>)
 801415c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014160:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014164:	fb02 f101 	mul.w	r1, r2, r1
 8014168:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801416c:	fba3 2301 	umull	r2, r3, r3, r1
 8014170:	091b      	lsrs	r3, r3, #4
 8014172:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014176:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801417a:	b4d0      	push	{r4, r6, r7}
 801417c:	4c0e      	ldr	r4, [pc, #56]	@ (80141b8 <__atomic_load_8+0x68>)
 801417e:	1ac9      	subs	r1, r1, r3
 8014180:	1862      	adds	r2, r4, r1
 8014182:	f04f 0c01 	mov.w	ip, #1
 8014186:	e8d2 3f4f 	ldrexb	r3, [r2]
 801418a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801418e:	2e00      	cmp	r6, #0
 8014190:	d1f9      	bne.n	8014186 <__atomic_load_8+0x36>
 8014192:	f3bf 8f5b 	dmb	ish
 8014196:	b2db      	uxtb	r3, r3
 8014198:	2b00      	cmp	r3, #0
 801419a:	d1f4      	bne.n	8014186 <__atomic_load_8+0x36>
 801419c:	e9d0 6700 	ldrd	r6, r7, [r0]
 80141a0:	f3bf 8f5b 	dmb	ish
 80141a4:	5463      	strb	r3, [r4, r1]
 80141a6:	4630      	mov	r0, r6
 80141a8:	4639      	mov	r1, r7
 80141aa:	bcd0      	pop	{r4, r6, r7}
 80141ac:	4770      	bx	lr
 80141ae:	bf00      	nop
 80141b0:	27d4eb2d 	.word	0x27d4eb2d
 80141b4:	b21642c9 	.word	0xb21642c9
 80141b8:	2000e4a0 	.word	0x2000e4a0

080141bc <__atomic_store_8>:
 80141bc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80141c0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80141c4:	b570      	push	{r4, r5, r6, lr}
 80141c6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80141ca:	4c14      	ldr	r4, [pc, #80]	@ (801421c <__atomic_store_8+0x60>)
 80141cc:	4d14      	ldr	r5, [pc, #80]	@ (8014220 <__atomic_store_8+0x64>)
 80141ce:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80141d2:	fb04 f101 	mul.w	r1, r4, r1
 80141d6:	4c13      	ldr	r4, [pc, #76]	@ (8014224 <__atomic_store_8+0x68>)
 80141d8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80141dc:	fba4 4e01 	umull	r4, lr, r4, r1
 80141e0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80141e4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80141e8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80141ec:	eba1 0e0e 	sub.w	lr, r1, lr
 80141f0:	eb05 0c0e 	add.w	ip, r5, lr
 80141f4:	f04f 0401 	mov.w	r4, #1
 80141f8:	e8dc 1f4f 	ldrexb	r1, [ip]
 80141fc:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014200:	2e00      	cmp	r6, #0
 8014202:	d1f9      	bne.n	80141f8 <__atomic_store_8+0x3c>
 8014204:	f3bf 8f5b 	dmb	ish
 8014208:	b2c9      	uxtb	r1, r1
 801420a:	2900      	cmp	r1, #0
 801420c:	d1f4      	bne.n	80141f8 <__atomic_store_8+0x3c>
 801420e:	e9c0 2300 	strd	r2, r3, [r0]
 8014212:	f3bf 8f5b 	dmb	ish
 8014216:	f805 100e 	strb.w	r1, [r5, lr]
 801421a:	bd70      	pop	{r4, r5, r6, pc}
 801421c:	27d4eb2d 	.word	0x27d4eb2d
 8014220:	2000e4a0 	.word	0x2000e4a0
 8014224:	b21642c9 	.word	0xb21642c9

08014228 <__atomic_exchange_8>:
 8014228:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801422c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014230:	4916      	ldr	r1, [pc, #88]	@ (801428c <__atomic_exchange_8+0x64>)
 8014232:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014236:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801423a:	fb01 fc0c 	mul.w	ip, r1, ip
 801423e:	4914      	ldr	r1, [pc, #80]	@ (8014290 <__atomic_exchange_8+0x68>)
 8014240:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014244:	b570      	push	{r4, r5, r6, lr}
 8014246:	4605      	mov	r5, r0
 8014248:	fba1 010c 	umull	r0, r1, r1, ip
 801424c:	0909      	lsrs	r1, r1, #4
 801424e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014252:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014256:	4e0f      	ldr	r6, [pc, #60]	@ (8014294 <__atomic_exchange_8+0x6c>)
 8014258:	ebac 0c01 	sub.w	ip, ip, r1
 801425c:	eb06 010c 	add.w	r1, r6, ip
 8014260:	f04f 0e01 	mov.w	lr, #1
 8014264:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014268:	e8c1 ef40 	strexb	r0, lr, [r1]
 801426c:	2800      	cmp	r0, #0
 801426e:	d1f9      	bne.n	8014264 <__atomic_exchange_8+0x3c>
 8014270:	f3bf 8f5b 	dmb	ish
 8014274:	b2e4      	uxtb	r4, r4
 8014276:	2c00      	cmp	r4, #0
 8014278:	d1f4      	bne.n	8014264 <__atomic_exchange_8+0x3c>
 801427a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801427e:	e9c5 2300 	strd	r2, r3, [r5]
 8014282:	f3bf 8f5b 	dmb	ish
 8014286:	f806 400c 	strb.w	r4, [r6, ip]
 801428a:	bd70      	pop	{r4, r5, r6, pc}
 801428c:	27d4eb2d 	.word	0x27d4eb2d
 8014290:	b21642c9 	.word	0xb21642c9
 8014294:	2000e4a0 	.word	0x2000e4a0

08014298 <rcutils_get_env>:
 8014298:	b168      	cbz	r0, 80142b6 <rcutils_get_env+0x1e>
 801429a:	b510      	push	{r4, lr}
 801429c:	460c      	mov	r4, r1
 801429e:	b129      	cbz	r1, 80142ac <rcutils_get_env+0x14>
 80142a0:	f004 f930 	bl	8018504 <getenv>
 80142a4:	b120      	cbz	r0, 80142b0 <rcutils_get_env+0x18>
 80142a6:	6020      	str	r0, [r4, #0]
 80142a8:	2000      	movs	r0, #0
 80142aa:	bd10      	pop	{r4, pc}
 80142ac:	4803      	ldr	r0, [pc, #12]	@ (80142bc <rcutils_get_env+0x24>)
 80142ae:	bd10      	pop	{r4, pc}
 80142b0:	4b03      	ldr	r3, [pc, #12]	@ (80142c0 <rcutils_get_env+0x28>)
 80142b2:	6023      	str	r3, [r4, #0]
 80142b4:	bd10      	pop	{r4, pc}
 80142b6:	4803      	ldr	r0, [pc, #12]	@ (80142c4 <rcutils_get_env+0x2c>)
 80142b8:	4770      	bx	lr
 80142ba:	bf00      	nop
 80142bc:	0801a8e8 	.word	0x0801a8e8
 80142c0:	0801ac84 	.word	0x0801ac84
 80142c4:	0801a8cc 	.word	0x0801a8cc

080142c8 <rcutils_is_directory>:
 80142c8:	2000      	movs	r0, #0
 80142ca:	4770      	bx	lr

080142cc <rcutils_join_path>:
 80142cc:	b082      	sub	sp, #8
 80142ce:	e88d 000c 	stmia.w	sp, {r2, r3}
 80142d2:	2000      	movs	r0, #0
 80142d4:	b002      	add	sp, #8
 80142d6:	4770      	bx	lr

080142d8 <rcutils_to_native_path>:
 80142d8:	b084      	sub	sp, #16
 80142da:	a801      	add	r0, sp, #4
 80142dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80142e0:	b004      	add	sp, #16
 80142e2:	2000      	movs	r0, #0
 80142e4:	4770      	bx	lr
 80142e6:	bf00      	nop

080142e8 <rcutils_format_string_limit>:
 80142e8:	b40f      	push	{r0, r1, r2, r3}
 80142ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142ec:	b083      	sub	sp, #12
 80142ee:	ac08      	add	r4, sp, #32
 80142f0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80142f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80142f6:	b34e      	cbz	r6, 801434c <rcutils_format_string_limit+0x64>
 80142f8:	a808      	add	r0, sp, #32
 80142fa:	f7f8 fda9 	bl	800ce50 <rcutils_allocator_is_valid>
 80142fe:	b328      	cbz	r0, 801434c <rcutils_format_string_limit+0x64>
 8014300:	2100      	movs	r1, #0
 8014302:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014304:	4632      	mov	r2, r6
 8014306:	4608      	mov	r0, r1
 8014308:	e9cd 3300 	strd	r3, r3, [sp]
 801430c:	f000 f8f4 	bl	80144f8 <rcutils_vsnprintf>
 8014310:	1c43      	adds	r3, r0, #1
 8014312:	4605      	mov	r5, r0
 8014314:	d01a      	beq.n	801434c <rcutils_format_string_limit+0x64>
 8014316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014318:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801431a:	1c47      	adds	r7, r0, #1
 801431c:	429f      	cmp	r7, r3
 801431e:	bf84      	itt	hi
 8014320:	461f      	movhi	r7, r3
 8014322:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014326:	4638      	mov	r0, r7
 8014328:	9b08      	ldr	r3, [sp, #32]
 801432a:	4798      	blx	r3
 801432c:	4604      	mov	r4, r0
 801432e:	b168      	cbz	r0, 801434c <rcutils_format_string_limit+0x64>
 8014330:	9b01      	ldr	r3, [sp, #4]
 8014332:	4632      	mov	r2, r6
 8014334:	4639      	mov	r1, r7
 8014336:	f000 f8df 	bl	80144f8 <rcutils_vsnprintf>
 801433a:	2800      	cmp	r0, #0
 801433c:	db02      	blt.n	8014344 <rcutils_format_string_limit+0x5c>
 801433e:	2300      	movs	r3, #0
 8014340:	5563      	strb	r3, [r4, r5]
 8014342:	e004      	b.n	801434e <rcutils_format_string_limit+0x66>
 8014344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014346:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014348:	4620      	mov	r0, r4
 801434a:	4798      	blx	r3
 801434c:	2400      	movs	r4, #0
 801434e:	4620      	mov	r0, r4
 8014350:	b003      	add	sp, #12
 8014352:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014356:	b004      	add	sp, #16
 8014358:	4770      	bx	lr
 801435a:	bf00      	nop

0801435c <rcutils_repl_str>:
 801435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014360:	ed2d 8b02 	vpush	{d8}
 8014364:	b087      	sub	sp, #28
 8014366:	4680      	mov	r8, r0
 8014368:	4608      	mov	r0, r1
 801436a:	f8cd 8004 	str.w	r8, [sp, #4]
 801436e:	ee08 2a10 	vmov	s16, r2
 8014372:	468a      	mov	sl, r1
 8014374:	4699      	mov	r9, r3
 8014376:	f7eb ff3d 	bl	80001f4 <strlen>
 801437a:	2600      	movs	r6, #0
 801437c:	4647      	mov	r7, r8
 801437e:	9002      	str	r0, [sp, #8]
 8014380:	46b3      	mov	fp, r6
 8014382:	2510      	movs	r5, #16
 8014384:	46b0      	mov	r8, r6
 8014386:	e01d      	b.n	80143c4 <rcutils_repl_str+0x68>
 8014388:	f10b 0b01 	add.w	fp, fp, #1
 801438c:	455e      	cmp	r6, fp
 801438e:	d211      	bcs.n	80143b4 <rcutils_repl_str+0x58>
 8014390:	442e      	add	r6, r5
 8014392:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014396:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801439a:	00b1      	lsls	r1, r6, #2
 801439c:	4798      	blx	r3
 801439e:	2800      	cmp	r0, #0
 80143a0:	f000 8088 	beq.w	80144b4 <rcutils_repl_str+0x158>
 80143a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143a8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80143ac:	4680      	mov	r8, r0
 80143ae:	bf28      	it	cs
 80143b0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80143b4:	9a01      	ldr	r2, [sp, #4]
 80143b6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80143ba:	1aa2      	subs	r2, r4, r2
 80143bc:	f843 2c04 	str.w	r2, [r3, #-4]
 80143c0:	9b02      	ldr	r3, [sp, #8]
 80143c2:	18e7      	adds	r7, r4, r3
 80143c4:	4651      	mov	r1, sl
 80143c6:	4638      	mov	r0, r7
 80143c8:	f004 fddd 	bl	8018f86 <strstr>
 80143cc:	4604      	mov	r4, r0
 80143ce:	4640      	mov	r0, r8
 80143d0:	2c00      	cmp	r4, #0
 80143d2:	d1d9      	bne.n	8014388 <rcutils_repl_str+0x2c>
 80143d4:	46b8      	mov	r8, r7
 80143d6:	4607      	mov	r7, r0
 80143d8:	4640      	mov	r0, r8
 80143da:	f7eb ff0b 	bl	80001f4 <strlen>
 80143de:	9b01      	ldr	r3, [sp, #4]
 80143e0:	eba8 0303 	sub.w	r3, r8, r3
 80143e4:	181c      	adds	r4, r3, r0
 80143e6:	9404      	str	r4, [sp, #16]
 80143e8:	f1bb 0f00 	cmp.w	fp, #0
 80143ec:	d04a      	beq.n	8014484 <rcutils_repl_str+0x128>
 80143ee:	ee18 0a10 	vmov	r0, s16
 80143f2:	f7eb feff 	bl	80001f4 <strlen>
 80143f6:	9b02      	ldr	r3, [sp, #8]
 80143f8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80143fc:	1ac3      	subs	r3, r0, r3
 80143fe:	fb0b 4303 	mla	r3, fp, r3, r4
 8014402:	461a      	mov	r2, r3
 8014404:	9305      	str	r3, [sp, #20]
 8014406:	4606      	mov	r6, r0
 8014408:	f8d9 3000 	ldr.w	r3, [r9]
 801440c:	1c50      	adds	r0, r2, #1
 801440e:	4798      	blx	r3
 8014410:	9003      	str	r0, [sp, #12]
 8014412:	2800      	cmp	r0, #0
 8014414:	d04f      	beq.n	80144b6 <rcutils_repl_str+0x15a>
 8014416:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801441a:	683a      	ldr	r2, [r7, #0]
 801441c:	4641      	mov	r1, r8
 801441e:	f004 fe54 	bl	80190ca <memcpy>
 8014422:	683d      	ldr	r5, [r7, #0]
 8014424:	9b03      	ldr	r3, [sp, #12]
 8014426:	9701      	str	r7, [sp, #4]
 8014428:	46ba      	mov	sl, r7
 801442a:	441d      	add	r5, r3
 801442c:	9f02      	ldr	r7, [sp, #8]
 801442e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014432:	2401      	movs	r4, #1
 8014434:	46d1      	mov	r9, sl
 8014436:	ee18 aa10 	vmov	sl, s16
 801443a:	e00a      	b.n	8014452 <rcutils_repl_str+0xf6>
 801443c:	f8d9 5000 	ldr.w	r5, [r9]
 8014440:	1aaa      	subs	r2, r5, r2
 8014442:	1885      	adds	r5, r0, r2
 8014444:	f004 fe41 	bl	80190ca <memcpy>
 8014448:	45a3      	cmp	fp, r4
 801444a:	f104 0201 	add.w	r2, r4, #1
 801444e:	d935      	bls.n	80144bc <rcutils_repl_str+0x160>
 8014450:	4614      	mov	r4, r2
 8014452:	4632      	mov	r2, r6
 8014454:	4651      	mov	r1, sl
 8014456:	4628      	mov	r0, r5
 8014458:	f004 fe37 	bl	80190ca <memcpy>
 801445c:	f859 2b04 	ldr.w	r2, [r9], #4
 8014460:	45a3      	cmp	fp, r4
 8014462:	443a      	add	r2, r7
 8014464:	eb05 0006 	add.w	r0, r5, r6
 8014468:	eb08 0102 	add.w	r1, r8, r2
 801446c:	d1e6      	bne.n	801443c <rcutils_repl_str+0xe0>
 801446e:	9b04      	ldr	r3, [sp, #16]
 8014470:	1a9a      	subs	r2, r3, r2
 8014472:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014476:	f004 fe28 	bl	80190ca <memcpy>
 801447a:	9a03      	ldr	r2, [sp, #12]
 801447c:	9905      	ldr	r1, [sp, #20]
 801447e:	2300      	movs	r3, #0
 8014480:	5453      	strb	r3, [r2, r1]
 8014482:	e00b      	b.n	801449c <rcutils_repl_str+0x140>
 8014484:	4620      	mov	r0, r4
 8014486:	f8d9 3000 	ldr.w	r3, [r9]
 801448a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801448e:	3001      	adds	r0, #1
 8014490:	4798      	blx	r3
 8014492:	9003      	str	r0, [sp, #12]
 8014494:	b110      	cbz	r0, 801449c <rcutils_repl_str+0x140>
 8014496:	9901      	ldr	r1, [sp, #4]
 8014498:	f004 fe0f 	bl	80190ba <strcpy>
 801449c:	4638      	mov	r0, r7
 801449e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80144a2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80144a6:	4798      	blx	r3
 80144a8:	9803      	ldr	r0, [sp, #12]
 80144aa:	b007      	add	sp, #28
 80144ac:	ecbd 8b02 	vpop	{d8}
 80144b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b4:	4647      	mov	r7, r8
 80144b6:	2300      	movs	r3, #0
 80144b8:	9303      	str	r3, [sp, #12]
 80144ba:	e7ef      	b.n	801449c <rcutils_repl_str+0x140>
 80144bc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80144c0:	e7db      	b.n	801447a <rcutils_repl_str+0x11e>
 80144c2:	bf00      	nop

080144c4 <rcutils_snprintf>:
 80144c4:	b40c      	push	{r2, r3}
 80144c6:	b530      	push	{r4, r5, lr}
 80144c8:	b083      	sub	sp, #12
 80144ca:	ab06      	add	r3, sp, #24
 80144cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80144d0:	9301      	str	r3, [sp, #4]
 80144d2:	b152      	cbz	r2, 80144ea <rcutils_snprintf+0x26>
 80144d4:	b138      	cbz	r0, 80144e6 <rcutils_snprintf+0x22>
 80144d6:	b141      	cbz	r1, 80144ea <rcutils_snprintf+0x26>
 80144d8:	f004 fc62 	bl	8018da0 <vsniprintf>
 80144dc:	b003      	add	sp, #12
 80144de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144e2:	b002      	add	sp, #8
 80144e4:	4770      	bx	lr
 80144e6:	2900      	cmp	r1, #0
 80144e8:	d0f6      	beq.n	80144d8 <rcutils_snprintf+0x14>
 80144ea:	f004 fdb9 	bl	8019060 <__errno>
 80144ee:	2316      	movs	r3, #22
 80144f0:	6003      	str	r3, [r0, #0]
 80144f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144f6:	e7f1      	b.n	80144dc <rcutils_snprintf+0x18>

080144f8 <rcutils_vsnprintf>:
 80144f8:	b570      	push	{r4, r5, r6, lr}
 80144fa:	b13a      	cbz	r2, 801450c <rcutils_vsnprintf+0x14>
 80144fc:	b120      	cbz	r0, 8014508 <rcutils_vsnprintf+0x10>
 80144fe:	b129      	cbz	r1, 801450c <rcutils_vsnprintf+0x14>
 8014500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014504:	f004 bc4c 	b.w	8018da0 <vsniprintf>
 8014508:	2900      	cmp	r1, #0
 801450a:	d0f9      	beq.n	8014500 <rcutils_vsnprintf+0x8>
 801450c:	f004 fda8 	bl	8019060 <__errno>
 8014510:	2316      	movs	r3, #22
 8014512:	6003      	str	r3, [r0, #0]
 8014514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014518:	bd70      	pop	{r4, r5, r6, pc}
 801451a:	bf00      	nop

0801451c <rcutils_strdup>:
 801451c:	b084      	sub	sp, #16
 801451e:	b570      	push	{r4, r5, r6, lr}
 8014520:	b082      	sub	sp, #8
 8014522:	ac07      	add	r4, sp, #28
 8014524:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014528:	4605      	mov	r5, r0
 801452a:	b1b0      	cbz	r0, 801455a <rcutils_strdup+0x3e>
 801452c:	f7eb fe62 	bl	80001f4 <strlen>
 8014530:	1c42      	adds	r2, r0, #1
 8014532:	9b07      	ldr	r3, [sp, #28]
 8014534:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014536:	9201      	str	r2, [sp, #4]
 8014538:	4606      	mov	r6, r0
 801453a:	4610      	mov	r0, r2
 801453c:	4798      	blx	r3
 801453e:	4604      	mov	r4, r0
 8014540:	b128      	cbz	r0, 801454e <rcutils_strdup+0x32>
 8014542:	9a01      	ldr	r2, [sp, #4]
 8014544:	4629      	mov	r1, r5
 8014546:	f004 fdc0 	bl	80190ca <memcpy>
 801454a:	2300      	movs	r3, #0
 801454c:	55a3      	strb	r3, [r4, r6]
 801454e:	4620      	mov	r0, r4
 8014550:	b002      	add	sp, #8
 8014552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014556:	b004      	add	sp, #16
 8014558:	4770      	bx	lr
 801455a:	4604      	mov	r4, r0
 801455c:	e7f7      	b.n	801454e <rcutils_strdup+0x32>
 801455e:	bf00      	nop

08014560 <rcutils_strndup>:
 8014560:	b082      	sub	sp, #8
 8014562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014564:	ac06      	add	r4, sp, #24
 8014566:	e884 000c 	stmia.w	r4, {r2, r3}
 801456a:	4605      	mov	r5, r0
 801456c:	b188      	cbz	r0, 8014592 <rcutils_strndup+0x32>
 801456e:	1c4f      	adds	r7, r1, #1
 8014570:	460e      	mov	r6, r1
 8014572:	4638      	mov	r0, r7
 8014574:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014576:	4790      	blx	r2
 8014578:	4604      	mov	r4, r0
 801457a:	b128      	cbz	r0, 8014588 <rcutils_strndup+0x28>
 801457c:	463a      	mov	r2, r7
 801457e:	4629      	mov	r1, r5
 8014580:	f004 fda3 	bl	80190ca <memcpy>
 8014584:	2300      	movs	r3, #0
 8014586:	55a3      	strb	r3, [r4, r6]
 8014588:	4620      	mov	r0, r4
 801458a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801458e:	b002      	add	sp, #8
 8014590:	4770      	bx	lr
 8014592:	4604      	mov	r4, r0
 8014594:	e7f8      	b.n	8014588 <rcutils_strndup+0x28>
 8014596:	bf00      	nop

08014598 <rcutils_get_zero_initialized_string_map>:
 8014598:	4b01      	ldr	r3, [pc, #4]	@ (80145a0 <rcutils_get_zero_initialized_string_map+0x8>)
 801459a:	2000      	movs	r0, #0
 801459c:	6018      	str	r0, [r3, #0]
 801459e:	4770      	bx	lr
 80145a0:	2000e4b8 	.word	0x2000e4b8

080145a4 <rcutils_string_map_reserve>:
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d05f      	beq.n	8014668 <rcutils_string_map_reserve+0xc4>
 80145a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145ac:	460c      	mov	r4, r1
 80145ae:	6801      	ldr	r1, [r0, #0]
 80145b0:	b082      	sub	sp, #8
 80145b2:	4605      	mov	r5, r0
 80145b4:	b129      	cbz	r1, 80145c2 <rcutils_string_map_reserve+0x1e>
 80145b6:	68cb      	ldr	r3, [r1, #12]
 80145b8:	42a3      	cmp	r3, r4
 80145ba:	d906      	bls.n	80145ca <rcutils_string_map_reserve+0x26>
 80145bc:	461c      	mov	r4, r3
 80145be:	2900      	cmp	r1, #0
 80145c0:	d1f9      	bne.n	80145b6 <rcutils_string_map_reserve+0x12>
 80145c2:	201f      	movs	r0, #31
 80145c4:	b002      	add	sp, #8
 80145c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ca:	688b      	ldr	r3, [r1, #8]
 80145cc:	42a3      	cmp	r3, r4
 80145ce:	d047      	beq.n	8014660 <rcutils_string_map_reserve+0xbc>
 80145d0:	6a0e      	ldr	r6, [r1, #32]
 80145d2:	2c00      	cmp	r4, #0
 80145d4:	d034      	beq.n	8014640 <rcutils_string_map_reserve+0x9c>
 80145d6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80145da:	d243      	bcs.n	8014664 <rcutils_string_map_reserve+0xc0>
 80145dc:	00a7      	lsls	r7, r4, #2
 80145de:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80145e2:	6808      	ldr	r0, [r1, #0]
 80145e4:	4632      	mov	r2, r6
 80145e6:	4639      	mov	r1, r7
 80145e8:	47c0      	blx	r8
 80145ea:	2800      	cmp	r0, #0
 80145ec:	d03a      	beq.n	8014664 <rcutils_string_map_reserve+0xc0>
 80145ee:	682b      	ldr	r3, [r5, #0]
 80145f0:	4632      	mov	r2, r6
 80145f2:	6018      	str	r0, [r3, #0]
 80145f4:	4639      	mov	r1, r7
 80145f6:	6858      	ldr	r0, [r3, #4]
 80145f8:	47c0      	blx	r8
 80145fa:	2800      	cmp	r0, #0
 80145fc:	d032      	beq.n	8014664 <rcutils_string_map_reserve+0xc0>
 80145fe:	682d      	ldr	r5, [r5, #0]
 8014600:	68ab      	ldr	r3, [r5, #8]
 8014602:	6068      	str	r0, [r5, #4]
 8014604:	42a3      	cmp	r3, r4
 8014606:	d226      	bcs.n	8014656 <rcutils_string_map_reserve+0xb2>
 8014608:	682a      	ldr	r2, [r5, #0]
 801460a:	eb00 0c07 	add.w	ip, r0, r7
 801460e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014612:	45e6      	cmp	lr, ip
 8014614:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014618:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801461c:	d203      	bcs.n	8014626 <rcutils_string_map_reserve+0x82>
 801461e:	eb02 0c07 	add.w	ip, r2, r7
 8014622:	4566      	cmp	r6, ip
 8014624:	d322      	bcc.n	801466c <rcutils_string_map_reserve+0xc8>
 8014626:	1ae3      	subs	r3, r4, r3
 8014628:	009a      	lsls	r2, r3, #2
 801462a:	4670      	mov	r0, lr
 801462c:	2100      	movs	r1, #0
 801462e:	9201      	str	r2, [sp, #4]
 8014630:	f004 fc82 	bl	8018f38 <memset>
 8014634:	9a01      	ldr	r2, [sp, #4]
 8014636:	2100      	movs	r1, #0
 8014638:	4630      	mov	r0, r6
 801463a:	f004 fc7d 	bl	8018f38 <memset>
 801463e:	e00a      	b.n	8014656 <rcutils_string_map_reserve+0xb2>
 8014640:	694f      	ldr	r7, [r1, #20]
 8014642:	6808      	ldr	r0, [r1, #0]
 8014644:	4631      	mov	r1, r6
 8014646:	47b8      	blx	r7
 8014648:	682b      	ldr	r3, [r5, #0]
 801464a:	4631      	mov	r1, r6
 801464c:	6858      	ldr	r0, [r3, #4]
 801464e:	601c      	str	r4, [r3, #0]
 8014650:	47b8      	blx	r7
 8014652:	682d      	ldr	r5, [r5, #0]
 8014654:	606c      	str	r4, [r5, #4]
 8014656:	2000      	movs	r0, #0
 8014658:	60ac      	str	r4, [r5, #8]
 801465a:	b002      	add	sp, #8
 801465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014660:	2000      	movs	r0, #0
 8014662:	e7af      	b.n	80145c4 <rcutils_string_map_reserve+0x20>
 8014664:	200a      	movs	r0, #10
 8014666:	e7ad      	b.n	80145c4 <rcutils_string_map_reserve+0x20>
 8014668:	200b      	movs	r0, #11
 801466a:	4770      	bx	lr
 801466c:	1f0b      	subs	r3, r1, #4
 801466e:	4418      	add	r0, r3
 8014670:	4413      	add	r3, r2
 8014672:	3a04      	subs	r2, #4
 8014674:	4417      	add	r7, r2
 8014676:	2200      	movs	r2, #0
 8014678:	f843 2f04 	str.w	r2, [r3, #4]!
 801467c:	42bb      	cmp	r3, r7
 801467e:	f840 2f04 	str.w	r2, [r0, #4]!
 8014682:	d1f9      	bne.n	8014678 <rcutils_string_map_reserve+0xd4>
 8014684:	e7e7      	b.n	8014656 <rcutils_string_map_reserve+0xb2>
 8014686:	bf00      	nop

08014688 <rcutils_string_map_init>:
 8014688:	b082      	sub	sp, #8
 801468a:	b570      	push	{r4, r5, r6, lr}
 801468c:	ac04      	add	r4, sp, #16
 801468e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014692:	b380      	cbz	r0, 80146f6 <rcutils_string_map_init+0x6e>
 8014694:	6806      	ldr	r6, [r0, #0]
 8014696:	4604      	mov	r4, r0
 8014698:	b12e      	cbz	r6, 80146a6 <rcutils_string_map_init+0x1e>
 801469a:	251e      	movs	r5, #30
 801469c:	4628      	mov	r0, r5
 801469e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146a2:	b002      	add	sp, #8
 80146a4:	4770      	bx	lr
 80146a6:	a804      	add	r0, sp, #16
 80146a8:	460d      	mov	r5, r1
 80146aa:	f7f8 fbd1 	bl	800ce50 <rcutils_allocator_is_valid>
 80146ae:	b310      	cbz	r0, 80146f6 <rcutils_string_map_init+0x6e>
 80146b0:	9b04      	ldr	r3, [sp, #16]
 80146b2:	9908      	ldr	r1, [sp, #32]
 80146b4:	2024      	movs	r0, #36	@ 0x24
 80146b6:	4798      	blx	r3
 80146b8:	6020      	str	r0, [r4, #0]
 80146ba:	b310      	cbz	r0, 8014702 <rcutils_string_map_init+0x7a>
 80146bc:	f10d 0e10 	add.w	lr, sp, #16
 80146c0:	e9c0 6600 	strd	r6, r6, [r0]
 80146c4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80146c8:	f100 0c10 	add.w	ip, r0, #16
 80146cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80146d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146d4:	f8de 3000 	ldr.w	r3, [lr]
 80146d8:	f8cc 3000 	str.w	r3, [ip]
 80146dc:	4629      	mov	r1, r5
 80146de:	4620      	mov	r0, r4
 80146e0:	f7ff ff60 	bl	80145a4 <rcutils_string_map_reserve>
 80146e4:	4605      	mov	r5, r0
 80146e6:	2800      	cmp	r0, #0
 80146e8:	d0d8      	beq.n	801469c <rcutils_string_map_init+0x14>
 80146ea:	9b05      	ldr	r3, [sp, #20]
 80146ec:	9908      	ldr	r1, [sp, #32]
 80146ee:	6820      	ldr	r0, [r4, #0]
 80146f0:	4798      	blx	r3
 80146f2:	6026      	str	r6, [r4, #0]
 80146f4:	e7d2      	b.n	801469c <rcutils_string_map_init+0x14>
 80146f6:	250b      	movs	r5, #11
 80146f8:	4628      	mov	r0, r5
 80146fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146fe:	b002      	add	sp, #8
 8014700:	4770      	bx	lr
 8014702:	250a      	movs	r5, #10
 8014704:	e7ca      	b.n	801469c <rcutils_string_map_init+0x14>
 8014706:	bf00      	nop

08014708 <rcutils_string_map_fini>:
 8014708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801470c:	b082      	sub	sp, #8
 801470e:	2800      	cmp	r0, #0
 8014710:	d03a      	beq.n	8014788 <rcutils_string_map_fini+0x80>
 8014712:	6804      	ldr	r4, [r0, #0]
 8014714:	4606      	mov	r6, r0
 8014716:	2c00      	cmp	r4, #0
 8014718:	d032      	beq.n	8014780 <rcutils_string_map_fini+0x78>
 801471a:	68a3      	ldr	r3, [r4, #8]
 801471c:	b32b      	cbz	r3, 801476a <rcutils_string_map_fini+0x62>
 801471e:	2500      	movs	r5, #0
 8014720:	6822      	ldr	r2, [r4, #0]
 8014722:	462f      	mov	r7, r5
 8014724:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014728:	b1e0      	cbz	r0, 8014764 <rcutils_string_map_fini+0x5c>
 801472a:	6a21      	ldr	r1, [r4, #32]
 801472c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014730:	9101      	str	r1, [sp, #4]
 8014732:	47c0      	blx	r8
 8014734:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014738:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801473c:	9901      	ldr	r1, [sp, #4]
 801473e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014742:	47c0      	blx	r8
 8014744:	68e3      	ldr	r3, [r4, #12]
 8014746:	6862      	ldr	r2, [r4, #4]
 8014748:	3b01      	subs	r3, #1
 801474a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801474e:	60e3      	str	r3, [r4, #12]
 8014750:	6834      	ldr	r4, [r6, #0]
 8014752:	68a3      	ldr	r3, [r4, #8]
 8014754:	3501      	adds	r5, #1
 8014756:	429d      	cmp	r5, r3
 8014758:	d207      	bcs.n	801476a <rcutils_string_map_fini+0x62>
 801475a:	6822      	ldr	r2, [r4, #0]
 801475c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014760:	2800      	cmp	r0, #0
 8014762:	d1e2      	bne.n	801472a <rcutils_string_map_fini+0x22>
 8014764:	3501      	adds	r5, #1
 8014766:	429d      	cmp	r5, r3
 8014768:	d3dc      	bcc.n	8014724 <rcutils_string_map_fini+0x1c>
 801476a:	2100      	movs	r1, #0
 801476c:	4630      	mov	r0, r6
 801476e:	f7ff ff19 	bl	80145a4 <rcutils_string_map_reserve>
 8014772:	4604      	mov	r4, r0
 8014774:	b920      	cbnz	r0, 8014780 <rcutils_string_map_fini+0x78>
 8014776:	6830      	ldr	r0, [r6, #0]
 8014778:	6943      	ldr	r3, [r0, #20]
 801477a:	6a01      	ldr	r1, [r0, #32]
 801477c:	4798      	blx	r3
 801477e:	6034      	str	r4, [r6, #0]
 8014780:	4620      	mov	r0, r4
 8014782:	b002      	add	sp, #8
 8014784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014788:	240b      	movs	r4, #11
 801478a:	4620      	mov	r0, r4
 801478c:	b002      	add	sp, #8
 801478e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014792:	bf00      	nop

08014794 <rcutils_string_map_getn>:
 8014794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014798:	b300      	cbz	r0, 80147dc <rcutils_string_map_getn+0x48>
 801479a:	6807      	ldr	r7, [r0, #0]
 801479c:	b1ff      	cbz	r7, 80147de <rcutils_string_map_getn+0x4a>
 801479e:	4688      	mov	r8, r1
 80147a0:	b1e1      	cbz	r1, 80147dc <rcutils_string_map_getn+0x48>
 80147a2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80147a6:	683e      	ldr	r6, [r7, #0]
 80147a8:	f1ba 0f00 	cmp.w	sl, #0
 80147ac:	d016      	beq.n	80147dc <rcutils_string_map_getn+0x48>
 80147ae:	4691      	mov	r9, r2
 80147b0:	3e04      	subs	r6, #4
 80147b2:	2400      	movs	r4, #0
 80147b4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80147b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80147bc:	4628      	mov	r0, r5
 80147be:	3401      	adds	r4, #1
 80147c0:	b155      	cbz	r5, 80147d8 <rcutils_string_map_getn+0x44>
 80147c2:	f7eb fd17 	bl	80001f4 <strlen>
 80147c6:	4548      	cmp	r0, r9
 80147c8:	4602      	mov	r2, r0
 80147ca:	4629      	mov	r1, r5
 80147cc:	bf38      	it	cc
 80147ce:	464a      	movcc	r2, r9
 80147d0:	4640      	mov	r0, r8
 80147d2:	f004 fbc6 	bl	8018f62 <strncmp>
 80147d6:	b128      	cbz	r0, 80147e4 <rcutils_string_map_getn+0x50>
 80147d8:	45a2      	cmp	sl, r4
 80147da:	d1eb      	bne.n	80147b4 <rcutils_string_map_getn+0x20>
 80147dc:	2700      	movs	r7, #0
 80147de:	4638      	mov	r0, r7
 80147e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f853 700b 	ldr.w	r7, [r3, fp]
 80147ea:	4638      	mov	r0, r7
 80147ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080147f0 <rmw_get_zero_initialized_context>:
 80147f0:	b510      	push	{r4, lr}
 80147f2:	4604      	mov	r4, r0
 80147f4:	3010      	adds	r0, #16
 80147f6:	f000 f80b 	bl	8014810 <rmw_get_zero_initialized_init_options>
 80147fa:	2300      	movs	r3, #0
 80147fc:	2000      	movs	r0, #0
 80147fe:	2100      	movs	r1, #0
 8014800:	e9c4 0100 	strd	r0, r1, [r4]
 8014804:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014808:	60a3      	str	r3, [r4, #8]
 801480a:	4620      	mov	r0, r4
 801480c:	bd10      	pop	{r4, pc}
 801480e:	bf00      	nop

08014810 <rmw_get_zero_initialized_init_options>:
 8014810:	b510      	push	{r4, lr}
 8014812:	2238      	movs	r2, #56	@ 0x38
 8014814:	4604      	mov	r4, r0
 8014816:	2100      	movs	r1, #0
 8014818:	f004 fb8e 	bl	8018f38 <memset>
 801481c:	f104 0010 	add.w	r0, r4, #16
 8014820:	f000 f806 	bl	8014830 <rmw_get_default_security_options>
 8014824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014828:	60e3      	str	r3, [r4, #12]
 801482a:	4620      	mov	r0, r4
 801482c:	bd10      	pop	{r4, pc}
 801482e:	bf00      	nop

08014830 <rmw_get_default_security_options>:
 8014830:	2200      	movs	r2, #0
 8014832:	7002      	strb	r2, [r0, #0]
 8014834:	6042      	str	r2, [r0, #4]
 8014836:	4770      	bx	lr

08014838 <rmw_subscription_content_filter_options_fini>:
 8014838:	b1b0      	cbz	r0, 8014868 <rmw_subscription_content_filter_options_fini+0x30>
 801483a:	b538      	push	{r3, r4, r5, lr}
 801483c:	4604      	mov	r4, r0
 801483e:	4608      	mov	r0, r1
 8014840:	460d      	mov	r5, r1
 8014842:	f7f8 fb05 	bl	800ce50 <rcutils_allocator_is_valid>
 8014846:	b168      	cbz	r0, 8014864 <rmw_subscription_content_filter_options_fini+0x2c>
 8014848:	6820      	ldr	r0, [r4, #0]
 801484a:	b120      	cbz	r0, 8014856 <rmw_subscription_content_filter_options_fini+0x1e>
 801484c:	686b      	ldr	r3, [r5, #4]
 801484e:	6929      	ldr	r1, [r5, #16]
 8014850:	4798      	blx	r3
 8014852:	2300      	movs	r3, #0
 8014854:	6023      	str	r3, [r4, #0]
 8014856:	1d20      	adds	r0, r4, #4
 8014858:	f003 fc16 	bl	8018088 <rcutils_string_array_fini>
 801485c:	3800      	subs	r0, #0
 801485e:	bf18      	it	ne
 8014860:	2001      	movne	r0, #1
 8014862:	bd38      	pop	{r3, r4, r5, pc}
 8014864:	200b      	movs	r0, #11
 8014866:	bd38      	pop	{r3, r4, r5, pc}
 8014868:	200b      	movs	r0, #11
 801486a:	4770      	bx	lr

0801486c <rmw_get_default_subscription_options>:
 801486c:	2200      	movs	r2, #0
 801486e:	e9c0 2200 	strd	r2, r2, [r0]
 8014872:	6082      	str	r2, [r0, #8]
 8014874:	4770      	bx	lr
 8014876:	bf00      	nop

08014878 <rmw_time_equal>:
 8014878:	b4f0      	push	{r4, r5, r6, r7}
 801487a:	b084      	sub	sp, #16
 801487c:	ac04      	add	r4, sp, #16
 801487e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014882:	4603      	mov	r3, r0
 8014884:	4924      	ldr	r1, [pc, #144]	@ (8014918 <rmw_time_equal+0xa0>)
 8014886:	9e03      	ldr	r6, [sp, #12]
 8014888:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801488c:	2202      	movs	r2, #2
 801488e:	4299      	cmp	r1, r3
 8014890:	41aa      	sbcs	r2, r5
 8014892:	d330      	bcc.n	80148f6 <rmw_time_equal+0x7e>
 8014894:	4c21      	ldr	r4, [pc, #132]	@ (801491c <rmw_time_equal+0xa4>)
 8014896:	fba3 3204 	umull	r3, r2, r3, r4
 801489a:	fb04 2205 	mla	r2, r4, r5, r2
 801489e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80148a2:	43dd      	mvns	r5, r3
 80148a4:	1a8c      	subs	r4, r1, r2
 80148a6:	4285      	cmp	r5, r0
 80148a8:	41b4      	sbcs	r4, r6
 80148aa:	d332      	bcc.n	8014912 <rmw_time_equal+0x9a>
 80148ac:	eb10 0c03 	adds.w	ip, r0, r3
 80148b0:	eb42 0106 	adc.w	r1, r2, r6
 80148b4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80148b8:	4817      	ldr	r0, [pc, #92]	@ (8014918 <rmw_time_equal+0xa0>)
 80148ba:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80148bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80148be:	2202      	movs	r2, #2
 80148c0:	4298      	cmp	r0, r3
 80148c2:	41b2      	sbcs	r2, r6
 80148c4:	d31c      	bcc.n	8014900 <rmw_time_equal+0x88>
 80148c6:	4c15      	ldr	r4, [pc, #84]	@ (801491c <rmw_time_equal+0xa4>)
 80148c8:	fba3 3204 	umull	r3, r2, r3, r4
 80148cc:	fb04 2206 	mla	r2, r4, r6, r2
 80148d0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80148d4:	43de      	mvns	r6, r3
 80148d6:	1a84      	subs	r4, r0, r2
 80148d8:	42ae      	cmp	r6, r5
 80148da:	41bc      	sbcs	r4, r7
 80148dc:	d315      	bcc.n	801490a <rmw_time_equal+0x92>
 80148de:	195b      	adds	r3, r3, r5
 80148e0:	eb42 0207 	adc.w	r2, r2, r7
 80148e4:	428a      	cmp	r2, r1
 80148e6:	bf08      	it	eq
 80148e8:	4563      	cmpeq	r3, ip
 80148ea:	bf0c      	ite	eq
 80148ec:	2001      	moveq	r0, #1
 80148ee:	2000      	movne	r0, #0
 80148f0:	b004      	add	sp, #16
 80148f2:	bcf0      	pop	{r4, r5, r6, r7}
 80148f4:	4770      	bx	lr
 80148f6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80148fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80148fe:	e7d9      	b.n	80148b4 <rmw_time_equal+0x3c>
 8014900:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014904:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8014908:	e7ec      	b.n	80148e4 <rmw_time_equal+0x6c>
 801490a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801490e:	4602      	mov	r2, r0
 8014910:	e7e8      	b.n	80148e4 <rmw_time_equal+0x6c>
 8014912:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014916:	e7cd      	b.n	80148b4 <rmw_time_equal+0x3c>
 8014918:	25c17d04 	.word	0x25c17d04
 801491c:	3b9aca00 	.word	0x3b9aca00

08014920 <rmw_time_total_nsec>:
 8014920:	b470      	push	{r4, r5, r6}
 8014922:	b085      	sub	sp, #20
 8014924:	ac04      	add	r4, sp, #16
 8014926:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801492a:	4603      	mov	r3, r0
 801492c:	4912      	ldr	r1, [pc, #72]	@ (8014978 <rmw_time_total_nsec+0x58>)
 801492e:	9e03      	ldr	r6, [sp, #12]
 8014930:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014934:	2202      	movs	r2, #2
 8014936:	4299      	cmp	r1, r3
 8014938:	41aa      	sbcs	r2, r5
 801493a:	d311      	bcc.n	8014960 <rmw_time_total_nsec+0x40>
 801493c:	4c0f      	ldr	r4, [pc, #60]	@ (801497c <rmw_time_total_nsec+0x5c>)
 801493e:	fba3 3204 	umull	r3, r2, r3, r4
 8014942:	fb04 2205 	mla	r2, r4, r5, r2
 8014946:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801494a:	43dd      	mvns	r5, r3
 801494c:	1a8c      	subs	r4, r1, r2
 801494e:	4285      	cmp	r5, r0
 8014950:	41b4      	sbcs	r4, r6
 8014952:	d30c      	bcc.n	801496e <rmw_time_total_nsec+0x4e>
 8014954:	1818      	adds	r0, r3, r0
 8014956:	eb42 0106 	adc.w	r1, r2, r6
 801495a:	b005      	add	sp, #20
 801495c:	bc70      	pop	{r4, r5, r6}
 801495e:	4770      	bx	lr
 8014960:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014964:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014968:	b005      	add	sp, #20
 801496a:	bc70      	pop	{r4, r5, r6}
 801496c:	4770      	bx	lr
 801496e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014972:	b005      	add	sp, #20
 8014974:	bc70      	pop	{r4, r5, r6}
 8014976:	4770      	bx	lr
 8014978:	25c17d04 	.word	0x25c17d04
 801497c:	3b9aca00 	.word	0x3b9aca00

08014980 <rmw_get_zero_initialized_message_info>:
 8014980:	b510      	push	{r4, lr}
 8014982:	2240      	movs	r2, #64	@ 0x40
 8014984:	4604      	mov	r4, r0
 8014986:	2100      	movs	r1, #0
 8014988:	f004 fad6 	bl	8018f38 <memset>
 801498c:	4620      	mov	r0, r4
 801498e:	bd10      	pop	{r4, pc}

08014990 <rmw_validate_full_topic_name>:
 8014990:	2800      	cmp	r0, #0
 8014992:	d057      	beq.n	8014a44 <rmw_validate_full_topic_name+0xb4>
 8014994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014998:	460d      	mov	r5, r1
 801499a:	2900      	cmp	r1, #0
 801499c:	d054      	beq.n	8014a48 <rmw_validate_full_topic_name+0xb8>
 801499e:	4616      	mov	r6, r2
 80149a0:	4604      	mov	r4, r0
 80149a2:	f7eb fc27 	bl	80001f4 <strlen>
 80149a6:	b148      	cbz	r0, 80149bc <rmw_validate_full_topic_name+0x2c>
 80149a8:	7823      	ldrb	r3, [r4, #0]
 80149aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80149ac:	d00d      	beq.n	80149ca <rmw_validate_full_topic_name+0x3a>
 80149ae:	2302      	movs	r3, #2
 80149b0:	602b      	str	r3, [r5, #0]
 80149b2:	b13e      	cbz	r6, 80149c4 <rmw_validate_full_topic_name+0x34>
 80149b4:	2000      	movs	r0, #0
 80149b6:	6030      	str	r0, [r6, #0]
 80149b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149bc:	2301      	movs	r3, #1
 80149be:	602b      	str	r3, [r5, #0]
 80149c0:	2e00      	cmp	r6, #0
 80149c2:	d1f7      	bne.n	80149b4 <rmw_validate_full_topic_name+0x24>
 80149c4:	2000      	movs	r0, #0
 80149c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149ca:	1e43      	subs	r3, r0, #1
 80149cc:	5ce2      	ldrb	r2, [r4, r3]
 80149ce:	2a2f      	cmp	r2, #47	@ 0x2f
 80149d0:	d03c      	beq.n	8014a4c <rmw_validate_full_topic_name+0xbc>
 80149d2:	1e63      	subs	r3, r4, #1
 80149d4:	eb03 0800 	add.w	r8, r3, r0
 80149d8:	f1c4 0e01 	rsb	lr, r4, #1
 80149dc:	eb0e 0703 	add.w	r7, lr, r3
 80149e0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80149e4:	f021 0220 	bic.w	r2, r1, #32
 80149e8:	3a41      	subs	r2, #65	@ 0x41
 80149ea:	2a19      	cmp	r2, #25
 80149ec:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80149f0:	d90b      	bls.n	8014a0a <rmw_validate_full_topic_name+0x7a>
 80149f2:	295f      	cmp	r1, #95	@ 0x5f
 80149f4:	d009      	beq.n	8014a0a <rmw_validate_full_topic_name+0x7a>
 80149f6:	f1bc 0f0a 	cmp.w	ip, #10
 80149fa:	d906      	bls.n	8014a0a <rmw_validate_full_topic_name+0x7a>
 80149fc:	2304      	movs	r3, #4
 80149fe:	602b      	str	r3, [r5, #0]
 8014a00:	2e00      	cmp	r6, #0
 8014a02:	d0df      	beq.n	80149c4 <rmw_validate_full_topic_name+0x34>
 8014a04:	6037      	str	r7, [r6, #0]
 8014a06:	2000      	movs	r0, #0
 8014a08:	e7d6      	b.n	80149b8 <rmw_validate_full_topic_name+0x28>
 8014a0a:	4543      	cmp	r3, r8
 8014a0c:	d1e6      	bne.n	80149dc <rmw_validate_full_topic_name+0x4c>
 8014a0e:	4f1a      	ldr	r7, [pc, #104]	@ (8014a78 <rmw_validate_full_topic_name+0xe8>)
 8014a10:	2301      	movs	r3, #1
 8014a12:	e004      	b.n	8014a1e <rmw_validate_full_topic_name+0x8e>
 8014a14:	4298      	cmp	r0, r3
 8014a16:	f104 0401 	add.w	r4, r4, #1
 8014a1a:	d91c      	bls.n	8014a56 <rmw_validate_full_topic_name+0xc6>
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	4298      	cmp	r0, r3
 8014a20:	f103 0201 	add.w	r2, r3, #1
 8014a24:	d0f6      	beq.n	8014a14 <rmw_validate_full_topic_name+0x84>
 8014a26:	7821      	ldrb	r1, [r4, #0]
 8014a28:	292f      	cmp	r1, #47	@ 0x2f
 8014a2a:	d1f3      	bne.n	8014a14 <rmw_validate_full_topic_name+0x84>
 8014a2c:	7861      	ldrb	r1, [r4, #1]
 8014a2e:	292f      	cmp	r1, #47	@ 0x2f
 8014a30:	d01c      	beq.n	8014a6c <rmw_validate_full_topic_name+0xdc>
 8014a32:	5dc9      	ldrb	r1, [r1, r7]
 8014a34:	0749      	lsls	r1, r1, #29
 8014a36:	d5ed      	bpl.n	8014a14 <rmw_validate_full_topic_name+0x84>
 8014a38:	2206      	movs	r2, #6
 8014a3a:	602a      	str	r2, [r5, #0]
 8014a3c:	2e00      	cmp	r6, #0
 8014a3e:	d0c1      	beq.n	80149c4 <rmw_validate_full_topic_name+0x34>
 8014a40:	6033      	str	r3, [r6, #0]
 8014a42:	e7bf      	b.n	80149c4 <rmw_validate_full_topic_name+0x34>
 8014a44:	200b      	movs	r0, #11
 8014a46:	4770      	bx	lr
 8014a48:	200b      	movs	r0, #11
 8014a4a:	e7b5      	b.n	80149b8 <rmw_validate_full_topic_name+0x28>
 8014a4c:	2203      	movs	r2, #3
 8014a4e:	602a      	str	r2, [r5, #0]
 8014a50:	2e00      	cmp	r6, #0
 8014a52:	d1f5      	bne.n	8014a40 <rmw_validate_full_topic_name+0xb0>
 8014a54:	e7b6      	b.n	80149c4 <rmw_validate_full_topic_name+0x34>
 8014a56:	28f7      	cmp	r0, #247	@ 0xf7
 8014a58:	d802      	bhi.n	8014a60 <rmw_validate_full_topic_name+0xd0>
 8014a5a:	2000      	movs	r0, #0
 8014a5c:	6028      	str	r0, [r5, #0]
 8014a5e:	e7ab      	b.n	80149b8 <rmw_validate_full_topic_name+0x28>
 8014a60:	2307      	movs	r3, #7
 8014a62:	602b      	str	r3, [r5, #0]
 8014a64:	2e00      	cmp	r6, #0
 8014a66:	d0ad      	beq.n	80149c4 <rmw_validate_full_topic_name+0x34>
 8014a68:	23f6      	movs	r3, #246	@ 0xf6
 8014a6a:	e7e9      	b.n	8014a40 <rmw_validate_full_topic_name+0xb0>
 8014a6c:	2205      	movs	r2, #5
 8014a6e:	602a      	str	r2, [r5, #0]
 8014a70:	2e00      	cmp	r6, #0
 8014a72:	d1e5      	bne.n	8014a40 <rmw_validate_full_topic_name+0xb0>
 8014a74:	e7a6      	b.n	80149c4 <rmw_validate_full_topic_name+0x34>
 8014a76:	bf00      	nop
 8014a78:	0801b02c 	.word	0x0801b02c

08014a7c <rmw_validate_namespace_with_size>:
 8014a7c:	b340      	cbz	r0, 8014ad0 <rmw_validate_namespace_with_size+0x54>
 8014a7e:	b570      	push	{r4, r5, r6, lr}
 8014a80:	4614      	mov	r4, r2
 8014a82:	b0c2      	sub	sp, #264	@ 0x108
 8014a84:	b332      	cbz	r2, 8014ad4 <rmw_validate_namespace_with_size+0x58>
 8014a86:	2901      	cmp	r1, #1
 8014a88:	460d      	mov	r5, r1
 8014a8a:	461e      	mov	r6, r3
 8014a8c:	d102      	bne.n	8014a94 <rmw_validate_namespace_with_size+0x18>
 8014a8e:	7803      	ldrb	r3, [r0, #0]
 8014a90:	2b2f      	cmp	r3, #47	@ 0x2f
 8014a92:	d012      	beq.n	8014aba <rmw_validate_namespace_with_size+0x3e>
 8014a94:	aa01      	add	r2, sp, #4
 8014a96:	4669      	mov	r1, sp
 8014a98:	f7ff ff7a 	bl	8014990 <rmw_validate_full_topic_name>
 8014a9c:	b978      	cbnz	r0, 8014abe <rmw_validate_namespace_with_size+0x42>
 8014a9e:	9b00      	ldr	r3, [sp, #0]
 8014aa0:	b14b      	cbz	r3, 8014ab6 <rmw_validate_namespace_with_size+0x3a>
 8014aa2:	2b07      	cmp	r3, #7
 8014aa4:	d007      	beq.n	8014ab6 <rmw_validate_namespace_with_size+0x3a>
 8014aa6:	1e5a      	subs	r2, r3, #1
 8014aa8:	2a05      	cmp	r2, #5
 8014aaa:	d82b      	bhi.n	8014b04 <rmw_validate_namespace_with_size+0x88>
 8014aac:	e8df f002 	tbb	[pc, r2]
 8014ab0:	1e212427 	.word	0x1e212427
 8014ab4:	141b      	.short	0x141b
 8014ab6:	2df5      	cmp	r5, #245	@ 0xf5
 8014ab8:	d803      	bhi.n	8014ac2 <rmw_validate_namespace_with_size+0x46>
 8014aba:	2000      	movs	r0, #0
 8014abc:	6020      	str	r0, [r4, #0]
 8014abe:	b042      	add	sp, #264	@ 0x108
 8014ac0:	bd70      	pop	{r4, r5, r6, pc}
 8014ac2:	2307      	movs	r3, #7
 8014ac4:	6023      	str	r3, [r4, #0]
 8014ac6:	2e00      	cmp	r6, #0
 8014ac8:	d0f9      	beq.n	8014abe <rmw_validate_namespace_with_size+0x42>
 8014aca:	23f4      	movs	r3, #244	@ 0xf4
 8014acc:	6033      	str	r3, [r6, #0]
 8014ace:	e7f6      	b.n	8014abe <rmw_validate_namespace_with_size+0x42>
 8014ad0:	200b      	movs	r0, #11
 8014ad2:	4770      	bx	lr
 8014ad4:	200b      	movs	r0, #11
 8014ad6:	e7f2      	b.n	8014abe <rmw_validate_namespace_with_size+0x42>
 8014ad8:	2306      	movs	r3, #6
 8014ada:	6023      	str	r3, [r4, #0]
 8014adc:	2e00      	cmp	r6, #0
 8014ade:	d0ee      	beq.n	8014abe <rmw_validate_namespace_with_size+0x42>
 8014ae0:	9b01      	ldr	r3, [sp, #4]
 8014ae2:	6033      	str	r3, [r6, #0]
 8014ae4:	e7eb      	b.n	8014abe <rmw_validate_namespace_with_size+0x42>
 8014ae6:	2305      	movs	r3, #5
 8014ae8:	6023      	str	r3, [r4, #0]
 8014aea:	e7f7      	b.n	8014adc <rmw_validate_namespace_with_size+0x60>
 8014aec:	2304      	movs	r3, #4
 8014aee:	6023      	str	r3, [r4, #0]
 8014af0:	e7f4      	b.n	8014adc <rmw_validate_namespace_with_size+0x60>
 8014af2:	2303      	movs	r3, #3
 8014af4:	6023      	str	r3, [r4, #0]
 8014af6:	e7f1      	b.n	8014adc <rmw_validate_namespace_with_size+0x60>
 8014af8:	2302      	movs	r3, #2
 8014afa:	6023      	str	r3, [r4, #0]
 8014afc:	e7ee      	b.n	8014adc <rmw_validate_namespace_with_size+0x60>
 8014afe:	2301      	movs	r3, #1
 8014b00:	6023      	str	r3, [r4, #0]
 8014b02:	e7eb      	b.n	8014adc <rmw_validate_namespace_with_size+0x60>
 8014b04:	4a03      	ldr	r2, [pc, #12]	@ (8014b14 <rmw_validate_namespace_with_size+0x98>)
 8014b06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014b0a:	a802      	add	r0, sp, #8
 8014b0c:	f7ff fcda 	bl	80144c4 <rcutils_snprintf>
 8014b10:	2001      	movs	r0, #1
 8014b12:	e7d4      	b.n	8014abe <rmw_validate_namespace_with_size+0x42>
 8014b14:	0801a904 	.word	0x0801a904

08014b18 <rmw_validate_namespace>:
 8014b18:	b168      	cbz	r0, 8014b36 <rmw_validate_namespace+0x1e>
 8014b1a:	b570      	push	{r4, r5, r6, lr}
 8014b1c:	460d      	mov	r5, r1
 8014b1e:	4616      	mov	r6, r2
 8014b20:	4604      	mov	r4, r0
 8014b22:	f7eb fb67 	bl	80001f4 <strlen>
 8014b26:	4633      	mov	r3, r6
 8014b28:	4601      	mov	r1, r0
 8014b2a:	462a      	mov	r2, r5
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b32:	f7ff bfa3 	b.w	8014a7c <rmw_validate_namespace_with_size>
 8014b36:	200b      	movs	r0, #11
 8014b38:	4770      	bx	lr
 8014b3a:	bf00      	nop

08014b3c <rmw_namespace_validation_result_string>:
 8014b3c:	2807      	cmp	r0, #7
 8014b3e:	bf9a      	itte	ls
 8014b40:	4b02      	ldrls	r3, [pc, #8]	@ (8014b4c <rmw_namespace_validation_result_string+0x10>)
 8014b42:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014b46:	4802      	ldrhi	r0, [pc, #8]	@ (8014b50 <rmw_namespace_validation_result_string+0x14>)
 8014b48:	4770      	bx	lr
 8014b4a:	bf00      	nop
 8014b4c:	0801aafc 	.word	0x0801aafc
 8014b50:	0801a954 	.word	0x0801a954

08014b54 <rmw_validate_node_name>:
 8014b54:	2800      	cmp	r0, #0
 8014b56:	d03b      	beq.n	8014bd0 <rmw_validate_node_name+0x7c>
 8014b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b5c:	460d      	mov	r5, r1
 8014b5e:	2900      	cmp	r1, #0
 8014b60:	d038      	beq.n	8014bd4 <rmw_validate_node_name+0x80>
 8014b62:	4616      	mov	r6, r2
 8014b64:	4604      	mov	r4, r0
 8014b66:	f7eb fb45 	bl	80001f4 <strlen>
 8014b6a:	b1e0      	cbz	r0, 8014ba6 <rmw_validate_node_name+0x52>
 8014b6c:	1e63      	subs	r3, r4, #1
 8014b6e:	eb03 0800 	add.w	r8, r3, r0
 8014b72:	f1c4 0101 	rsb	r1, r4, #1
 8014b76:	18cf      	adds	r7, r1, r3
 8014b78:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8014b7c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8014b80:	f02e 0c20 	bic.w	ip, lr, #32
 8014b84:	2a09      	cmp	r2, #9
 8014b86:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8014b8a:	d914      	bls.n	8014bb6 <rmw_validate_node_name+0x62>
 8014b8c:	f1bc 0f19 	cmp.w	ip, #25
 8014b90:	d911      	bls.n	8014bb6 <rmw_validate_node_name+0x62>
 8014b92:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014b96:	d00e      	beq.n	8014bb6 <rmw_validate_node_name+0x62>
 8014b98:	2302      	movs	r3, #2
 8014b9a:	602b      	str	r3, [r5, #0]
 8014b9c:	b106      	cbz	r6, 8014ba0 <rmw_validate_node_name+0x4c>
 8014b9e:	6037      	str	r7, [r6, #0]
 8014ba0:	2000      	movs	r0, #0
 8014ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba6:	2301      	movs	r3, #1
 8014ba8:	602b      	str	r3, [r5, #0]
 8014baa:	2e00      	cmp	r6, #0
 8014bac:	d0f8      	beq.n	8014ba0 <rmw_validate_node_name+0x4c>
 8014bae:	2000      	movs	r0, #0
 8014bb0:	6030      	str	r0, [r6, #0]
 8014bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb6:	4543      	cmp	r3, r8
 8014bb8:	d1dd      	bne.n	8014b76 <rmw_validate_node_name+0x22>
 8014bba:	7822      	ldrb	r2, [r4, #0]
 8014bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8014bf4 <rmw_validate_node_name+0xa0>)
 8014bbe:	5cd3      	ldrb	r3, [r2, r3]
 8014bc0:	f013 0304 	ands.w	r3, r3, #4
 8014bc4:	d110      	bne.n	8014be8 <rmw_validate_node_name+0x94>
 8014bc6:	28ff      	cmp	r0, #255	@ 0xff
 8014bc8:	d806      	bhi.n	8014bd8 <rmw_validate_node_name+0x84>
 8014bca:	602b      	str	r3, [r5, #0]
 8014bcc:	4618      	mov	r0, r3
 8014bce:	e7e8      	b.n	8014ba2 <rmw_validate_node_name+0x4e>
 8014bd0:	200b      	movs	r0, #11
 8014bd2:	4770      	bx	lr
 8014bd4:	200b      	movs	r0, #11
 8014bd6:	e7e4      	b.n	8014ba2 <rmw_validate_node_name+0x4e>
 8014bd8:	2204      	movs	r2, #4
 8014bda:	602a      	str	r2, [r5, #0]
 8014bdc:	2e00      	cmp	r6, #0
 8014bde:	d0df      	beq.n	8014ba0 <rmw_validate_node_name+0x4c>
 8014be0:	22fe      	movs	r2, #254	@ 0xfe
 8014be2:	6032      	str	r2, [r6, #0]
 8014be4:	4618      	mov	r0, r3
 8014be6:	e7dc      	b.n	8014ba2 <rmw_validate_node_name+0x4e>
 8014be8:	2303      	movs	r3, #3
 8014bea:	602b      	str	r3, [r5, #0]
 8014bec:	2e00      	cmp	r6, #0
 8014bee:	d1de      	bne.n	8014bae <rmw_validate_node_name+0x5a>
 8014bf0:	e7d6      	b.n	8014ba0 <rmw_validate_node_name+0x4c>
 8014bf2:	bf00      	nop
 8014bf4:	0801b02c 	.word	0x0801b02c

08014bf8 <rmw_node_name_validation_result_string>:
 8014bf8:	2804      	cmp	r0, #4
 8014bfa:	bf9a      	itte	ls
 8014bfc:	4b02      	ldrls	r3, [pc, #8]	@ (8014c08 <rmw_node_name_validation_result_string+0x10>)
 8014bfe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014c02:	4802      	ldrhi	r0, [pc, #8]	@ (8014c0c <rmw_node_name_validation_result_string+0x14>)
 8014c04:	4770      	bx	lr
 8014c06:	bf00      	nop
 8014c08:	0801ac08 	.word	0x0801ac08
 8014c0c:	0801ab1c 	.word	0x0801ab1c

08014c10 <get_memory>:
 8014c10:	4603      	mov	r3, r0
 8014c12:	6840      	ldr	r0, [r0, #4]
 8014c14:	b158      	cbz	r0, 8014c2e <get_memory+0x1e>
 8014c16:	6842      	ldr	r2, [r0, #4]
 8014c18:	605a      	str	r2, [r3, #4]
 8014c1a:	b10a      	cbz	r2, 8014c20 <get_memory+0x10>
 8014c1c:	2100      	movs	r1, #0
 8014c1e:	6011      	str	r1, [r2, #0]
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	6042      	str	r2, [r0, #4]
 8014c24:	b102      	cbz	r2, 8014c28 <get_memory+0x18>
 8014c26:	6010      	str	r0, [r2, #0]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	6002      	str	r2, [r0, #0]
 8014c2c:	6018      	str	r0, [r3, #0]
 8014c2e:	4770      	bx	lr

08014c30 <put_memory>:
 8014c30:	680b      	ldr	r3, [r1, #0]
 8014c32:	b10b      	cbz	r3, 8014c38 <put_memory+0x8>
 8014c34:	684a      	ldr	r2, [r1, #4]
 8014c36:	605a      	str	r2, [r3, #4]
 8014c38:	684a      	ldr	r2, [r1, #4]
 8014c3a:	b102      	cbz	r2, 8014c3e <put_memory+0xe>
 8014c3c:	6013      	str	r3, [r2, #0]
 8014c3e:	6803      	ldr	r3, [r0, #0]
 8014c40:	428b      	cmp	r3, r1
 8014c42:	6843      	ldr	r3, [r0, #4]
 8014c44:	bf08      	it	eq
 8014c46:	6002      	streq	r2, [r0, #0]
 8014c48:	604b      	str	r3, [r1, #4]
 8014c4a:	b103      	cbz	r3, 8014c4e <put_memory+0x1e>
 8014c4c:	6019      	str	r1, [r3, #0]
 8014c4e:	2300      	movs	r3, #0
 8014c50:	600b      	str	r3, [r1, #0]
 8014c52:	6041      	str	r1, [r0, #4]
 8014c54:	4770      	bx	lr
 8014c56:	bf00      	nop

08014c58 <rmw_destroy_client>:
 8014c58:	b570      	push	{r4, r5, r6, lr}
 8014c5a:	b128      	cbz	r0, 8014c68 <rmw_destroy_client+0x10>
 8014c5c:	4604      	mov	r4, r0
 8014c5e:	6800      	ldr	r0, [r0, #0]
 8014c60:	460d      	mov	r5, r1
 8014c62:	f7f8 fe9b 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 8014c66:	b910      	cbnz	r0, 8014c6e <rmw_destroy_client+0x16>
 8014c68:	2401      	movs	r4, #1
 8014c6a:	4620      	mov	r0, r4
 8014c6c:	bd70      	pop	{r4, r5, r6, pc}
 8014c6e:	6863      	ldr	r3, [r4, #4]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d0f9      	beq.n	8014c68 <rmw_destroy_client+0x10>
 8014c74:	2d00      	cmp	r5, #0
 8014c76:	d0f7      	beq.n	8014c68 <rmw_destroy_client+0x10>
 8014c78:	6828      	ldr	r0, [r5, #0]
 8014c7a:	f7f8 fe8f 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 8014c7e:	2800      	cmp	r0, #0
 8014c80:	d0f2      	beq.n	8014c68 <rmw_destroy_client+0x10>
 8014c82:	686e      	ldr	r6, [r5, #4]
 8014c84:	2e00      	cmp	r6, #0
 8014c86:	d0ef      	beq.n	8014c68 <rmw_destroy_client+0x10>
 8014c88:	6864      	ldr	r4, [r4, #4]
 8014c8a:	6932      	ldr	r2, [r6, #16]
 8014c8c:	6920      	ldr	r0, [r4, #16]
 8014c8e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014c92:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014c96:	6819      	ldr	r1, [r3, #0]
 8014c98:	f002 f932 	bl	8016f00 <uxr_buffer_cancel_data>
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	6920      	ldr	r0, [r4, #16]
 8014ca0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014ca4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014ca8:	f7f8 fdf8 	bl	800d89c <run_xrce_session>
 8014cac:	6920      	ldr	r0, [r4, #16]
 8014cae:	6932      	ldr	r2, [r6, #16]
 8014cb0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014cb4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014cb8:	6819      	ldr	r1, [r3, #0]
 8014cba:	f7f9 fdcd 	bl	800e858 <uxr_buffer_delete_entity>
 8014cbe:	4602      	mov	r2, r0
 8014cc0:	6920      	ldr	r0, [r4, #16]
 8014cc2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014cc6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014cca:	f7f8 fde7 	bl	800d89c <run_xrce_session>
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	4628      	mov	r0, r5
 8014cd2:	bf14      	ite	ne
 8014cd4:	2400      	movne	r4, #0
 8014cd6:	2402      	moveq	r4, #2
 8014cd8:	f7f8 fcc8 	bl	800d66c <rmw_uxrce_fini_client_memory>
 8014cdc:	e7c5      	b.n	8014c6a <rmw_destroy_client+0x12>
 8014cde:	bf00      	nop

08014ce0 <rmw_get_implementation_identifier>:
 8014ce0:	4b01      	ldr	r3, [pc, #4]	@ (8014ce8 <rmw_get_implementation_identifier+0x8>)
 8014ce2:	6818      	ldr	r0, [r3, #0]
 8014ce4:	4770      	bx	lr
 8014ce6:	bf00      	nop
 8014ce8:	0801ac34 	.word	0x0801ac34

08014cec <rmw_init_options_init>:
 8014cec:	b084      	sub	sp, #16
 8014cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cf0:	b083      	sub	sp, #12
 8014cf2:	ad09      	add	r5, sp, #36	@ 0x24
 8014cf4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014cf8:	b130      	cbz	r0, 8014d08 <rmw_init_options_init+0x1c>
 8014cfa:	4604      	mov	r4, r0
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	f7f8 f8a7 	bl	800ce50 <rcutils_allocator_is_valid>
 8014d02:	b108      	cbz	r0, 8014d08 <rmw_init_options_init+0x1c>
 8014d04:	68a6      	ldr	r6, [r4, #8]
 8014d06:	b12e      	cbz	r6, 8014d14 <rmw_init_options_init+0x28>
 8014d08:	200b      	movs	r0, #11
 8014d0a:	b003      	add	sp, #12
 8014d0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d10:	b004      	add	sp, #16
 8014d12:	4770      	bx	lr
 8014d14:	2200      	movs	r2, #0
 8014d16:	2300      	movs	r3, #0
 8014d18:	e9c4 2300 	strd	r2, r3, [r4]
 8014d1c:	4b22      	ldr	r3, [pc, #136]	@ (8014da8 <rmw_init_options_init+0xbc>)
 8014d1e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8014db8 <rmw_init_options_init+0xcc>
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	60a3      	str	r3, [r4, #8]
 8014d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d28:	f104 0c20 	add.w	ip, r4, #32
 8014d2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d30:	466f      	mov	r7, sp
 8014d32:	682b      	ldr	r3, [r5, #0]
 8014d34:	f8cc 3000 	str.w	r3, [ip]
 8014d38:	4638      	mov	r0, r7
 8014d3a:	f8c4 e01c 	str.w	lr, [r4, #28]
 8014d3e:	60e6      	str	r6, [r4, #12]
 8014d40:	f7ff fd76 	bl	8014830 <rmw_get_default_security_options>
 8014d44:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014d48:	f104 0310 	add.w	r3, r4, #16
 8014d4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014d50:	2203      	movs	r2, #3
 8014d52:	4816      	ldr	r0, [pc, #88]	@ (8014dac <rmw_init_options_init+0xc0>)
 8014d54:	4916      	ldr	r1, [pc, #88]	@ (8014db0 <rmw_init_options_init+0xc4>)
 8014d56:	7626      	strb	r6, [r4, #24]
 8014d58:	f7f8 fbc8 	bl	800d4ec <rmw_uxrce_init_init_options_impl_memory>
 8014d5c:	4813      	ldr	r0, [pc, #76]	@ (8014dac <rmw_init_options_init+0xc0>)
 8014d5e:	f7ff ff57 	bl	8014c10 <get_memory>
 8014d62:	b1f0      	cbz	r0, 8014da2 <rmw_init_options_init+0xb6>
 8014d64:	4a13      	ldr	r2, [pc, #76]	@ (8014db4 <rmw_init_options_init+0xc8>)
 8014d66:	6883      	ldr	r3, [r0, #8]
 8014d68:	6851      	ldr	r1, [r2, #4]
 8014d6a:	7810      	ldrb	r0, [r2, #0]
 8014d6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d6e:	7418      	strb	r0, [r3, #16]
 8014d70:	6159      	str	r1, [r3, #20]
 8014d72:	68d1      	ldr	r1, [r2, #12]
 8014d74:	61d9      	str	r1, [r3, #28]
 8014d76:	6911      	ldr	r1, [r2, #16]
 8014d78:	6219      	str	r1, [r3, #32]
 8014d7a:	6951      	ldr	r1, [r2, #20]
 8014d7c:	6892      	ldr	r2, [r2, #8]
 8014d7e:	619a      	str	r2, [r3, #24]
 8014d80:	6259      	str	r1, [r3, #36]	@ 0x24
 8014d82:	f7fb f9c5 	bl	8010110 <uxr_nanos>
 8014d86:	f003 fcc3 	bl	8018710 <srand>
 8014d8a:	f003 fcef 	bl	801876c <rand>
 8014d8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014d90:	6298      	str	r0, [r3, #40]	@ 0x28
 8014d92:	2800      	cmp	r0, #0
 8014d94:	d0f9      	beq.n	8014d8a <rmw_init_options_init+0x9e>
 8014d96:	2000      	movs	r0, #0
 8014d98:	b003      	add	sp, #12
 8014d9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d9e:	b004      	add	sp, #16
 8014da0:	4770      	bx	lr
 8014da2:	2001      	movs	r0, #1
 8014da4:	e7b1      	b.n	8014d0a <rmw_init_options_init+0x1e>
 8014da6:	bf00      	nop
 8014da8:	0801ac34 	.word	0x0801ac34
 8014dac:	2000e39c 	.word	0x2000e39c
 8014db0:	20009c38 	.word	0x20009c38
 8014db4:	20009ac4 	.word	0x20009ac4
 8014db8:	0801a698 	.word	0x0801a698

08014dbc <rmw_init_options_copy>:
 8014dbc:	b570      	push	{r4, r5, r6, lr}
 8014dbe:	b158      	cbz	r0, 8014dd8 <rmw_init_options_copy+0x1c>
 8014dc0:	460d      	mov	r5, r1
 8014dc2:	b149      	cbz	r1, 8014dd8 <rmw_init_options_copy+0x1c>
 8014dc4:	4604      	mov	r4, r0
 8014dc6:	6880      	ldr	r0, [r0, #8]
 8014dc8:	b120      	cbz	r0, 8014dd4 <rmw_init_options_copy+0x18>
 8014dca:	4b1e      	ldr	r3, [pc, #120]	@ (8014e44 <rmw_init_options_copy+0x88>)
 8014dcc:	6819      	ldr	r1, [r3, #0]
 8014dce:	f7eb fa07 	bl	80001e0 <strcmp>
 8014dd2:	bb90      	cbnz	r0, 8014e3a <rmw_init_options_copy+0x7e>
 8014dd4:	68ab      	ldr	r3, [r5, #8]
 8014dd6:	b113      	cbz	r3, 8014dde <rmw_init_options_copy+0x22>
 8014dd8:	250b      	movs	r5, #11
 8014dda:	4628      	mov	r0, r5
 8014ddc:	bd70      	pop	{r4, r5, r6, pc}
 8014dde:	4623      	mov	r3, r4
 8014de0:	462a      	mov	r2, r5
 8014de2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8014de6:	f8d3 c000 	ldr.w	ip, [r3]
 8014dea:	6858      	ldr	r0, [r3, #4]
 8014dec:	6899      	ldr	r1, [r3, #8]
 8014dee:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8014df2:	f8c2 e00c 	str.w	lr, [r2, #12]
 8014df6:	3310      	adds	r3, #16
 8014df8:	42b3      	cmp	r3, r6
 8014dfa:	f8c2 c000 	str.w	ip, [r2]
 8014dfe:	6050      	str	r0, [r2, #4]
 8014e00:	6091      	str	r1, [r2, #8]
 8014e02:	f102 0210 	add.w	r2, r2, #16
 8014e06:	d1ee      	bne.n	8014de6 <rmw_init_options_copy+0x2a>
 8014e08:	6819      	ldr	r1, [r3, #0]
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	480e      	ldr	r0, [pc, #56]	@ (8014e48 <rmw_init_options_copy+0x8c>)
 8014e0e:	6053      	str	r3, [r2, #4]
 8014e10:	6011      	str	r1, [r2, #0]
 8014e12:	f7ff fefd 	bl	8014c10 <get_memory>
 8014e16:	b198      	cbz	r0, 8014e40 <rmw_init_options_copy+0x84>
 8014e18:	6883      	ldr	r3, [r0, #8]
 8014e1a:	636b      	str	r3, [r5, #52]	@ 0x34
 8014e1c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8014e1e:	f102 0c10 	add.w	ip, r2, #16
 8014e22:	f103 0410 	add.w	r4, r3, #16
 8014e26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e2c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8014e30:	2500      	movs	r5, #0
 8014e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014e36:	4628      	mov	r0, r5
 8014e38:	bd70      	pop	{r4, r5, r6, pc}
 8014e3a:	250c      	movs	r5, #12
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	bd70      	pop	{r4, r5, r6, pc}
 8014e40:	2501      	movs	r5, #1
 8014e42:	e7ca      	b.n	8014dda <rmw_init_options_copy+0x1e>
 8014e44:	0801ac34 	.word	0x0801ac34
 8014e48:	2000e39c 	.word	0x2000e39c

08014e4c <rmw_init_options_fini>:
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	d03d      	beq.n	8014ecc <rmw_init_options_fini+0x80>
 8014e50:	b510      	push	{r4, lr}
 8014e52:	4604      	mov	r4, r0
 8014e54:	b08e      	sub	sp, #56	@ 0x38
 8014e56:	3020      	adds	r0, #32
 8014e58:	f7f7 fffa 	bl	800ce50 <rcutils_allocator_is_valid>
 8014e5c:	b360      	cbz	r0, 8014eb8 <rmw_init_options_fini+0x6c>
 8014e5e:	68a0      	ldr	r0, [r4, #8]
 8014e60:	b120      	cbz	r0, 8014e6c <rmw_init_options_fini+0x20>
 8014e62:	4b1c      	ldr	r3, [pc, #112]	@ (8014ed4 <rmw_init_options_fini+0x88>)
 8014e64:	6819      	ldr	r1, [r3, #0]
 8014e66:	f7eb f9bb 	bl	80001e0 <strcmp>
 8014e6a:	bb68      	cbnz	r0, 8014ec8 <rmw_init_options_fini+0x7c>
 8014e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8014ed8 <rmw_init_options_fini+0x8c>)
 8014e6e:	6819      	ldr	r1, [r3, #0]
 8014e70:	b331      	cbz	r1, 8014ec0 <rmw_init_options_fini+0x74>
 8014e72:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8014e74:	e001      	b.n	8014e7a <rmw_init_options_fini+0x2e>
 8014e76:	6849      	ldr	r1, [r1, #4]
 8014e78:	b311      	cbz	r1, 8014ec0 <rmw_init_options_fini+0x74>
 8014e7a:	688b      	ldr	r3, [r1, #8]
 8014e7c:	429a      	cmp	r2, r3
 8014e7e:	d1fa      	bne.n	8014e76 <rmw_init_options_fini+0x2a>
 8014e80:	4815      	ldr	r0, [pc, #84]	@ (8014ed8 <rmw_init_options_fini+0x8c>)
 8014e82:	f7ff fed5 	bl	8014c30 <put_memory>
 8014e86:	4668      	mov	r0, sp
 8014e88:	f7ff fcc2 	bl	8014810 <rmw_get_zero_initialized_init_options>
 8014e8c:	46ee      	mov	lr, sp
 8014e8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014e92:	46a4      	mov	ip, r4
 8014e94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014e9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ea0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ea4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ea8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014eac:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	b00e      	add	sp, #56	@ 0x38
 8014eb6:	bd10      	pop	{r4, pc}
 8014eb8:	230b      	movs	r3, #11
 8014eba:	4618      	mov	r0, r3
 8014ebc:	b00e      	add	sp, #56	@ 0x38
 8014ebe:	bd10      	pop	{r4, pc}
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	b00e      	add	sp, #56	@ 0x38
 8014ec6:	bd10      	pop	{r4, pc}
 8014ec8:	230c      	movs	r3, #12
 8014eca:	e7f2      	b.n	8014eb2 <rmw_init_options_fini+0x66>
 8014ecc:	230b      	movs	r3, #11
 8014ece:	4618      	mov	r0, r3
 8014ed0:	4770      	bx	lr
 8014ed2:	bf00      	nop
 8014ed4:	0801ac34 	.word	0x0801ac34
 8014ed8:	2000e39c 	.word	0x2000e39c

08014edc <rmw_init>:
 8014edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ee0:	b083      	sub	sp, #12
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	f000 80d3 	beq.w	801508e <rmw_init+0x1b2>
 8014ee8:	460e      	mov	r6, r1
 8014eea:	2900      	cmp	r1, #0
 8014eec:	f000 80cf 	beq.w	801508e <rmw_init+0x1b2>
 8014ef0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014ef2:	4605      	mov	r5, r0
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	f000 80ca 	beq.w	801508e <rmw_init+0x1b2>
 8014efa:	4b78      	ldr	r3, [pc, #480]	@ (80150dc <rmw_init+0x200>)
 8014efc:	6880      	ldr	r0, [r0, #8]
 8014efe:	681f      	ldr	r7, [r3, #0]
 8014f00:	b128      	cbz	r0, 8014f0e <rmw_init+0x32>
 8014f02:	4639      	mov	r1, r7
 8014f04:	f7eb f96c 	bl	80001e0 <strcmp>
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	f040 80ca 	bne.w	80150a2 <rmw_init+0x1c6>
 8014f0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014f12:	4c73      	ldr	r4, [pc, #460]	@ (80150e0 <rmw_init+0x204>)
 8014f14:	4973      	ldr	r1, [pc, #460]	@ (80150e4 <rmw_init+0x208>)
 8014f16:	4874      	ldr	r0, [pc, #464]	@ (80150e8 <rmw_init+0x20c>)
 8014f18:	60b7      	str	r7, [r6, #8]
 8014f1a:	e9c6 2300 	strd	r2, r3, [r6]
 8014f1e:	68eb      	ldr	r3, [r5, #12]
 8014f20:	64b3      	str	r3, [r6, #72]	@ 0x48
 8014f22:	2201      	movs	r2, #1
 8014f24:	f7f8 fa82 	bl	800d42c <rmw_uxrce_init_session_memory>
 8014f28:	4620      	mov	r0, r4
 8014f2a:	4970      	ldr	r1, [pc, #448]	@ (80150ec <rmw_init+0x210>)
 8014f2c:	2204      	movs	r2, #4
 8014f2e:	f7f8 fabd 	bl	800d4ac <rmw_uxrce_init_static_input_buffer_memory>
 8014f32:	f04f 0800 	mov.w	r8, #0
 8014f36:	486c      	ldr	r0, [pc, #432]	@ (80150e8 <rmw_init+0x20c>)
 8014f38:	f884 800d 	strb.w	r8, [r4, #13]
 8014f3c:	f7ff fe68 	bl	8014c10 <get_memory>
 8014f40:	2800      	cmp	r0, #0
 8014f42:	f000 80a9 	beq.w	8015098 <rmw_init+0x1bc>
 8014f46:	6884      	ldr	r4, [r0, #8]
 8014f48:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8014f4a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8014f4c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8014f50:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014f54:	9101      	str	r1, [sp, #4]
 8014f56:	6a00      	ldr	r0, [r0, #32]
 8014f58:	9000      	str	r0, [sp, #0]
 8014f5a:	f104 0910 	add.w	r9, r4, #16
 8014f5e:	4661      	mov	r1, ip
 8014f60:	4648      	mov	r0, r9
 8014f62:	f001 fa05 	bl	8016370 <uxr_set_custom_transport_callbacks>
 8014f66:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8014f6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014f6e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8014f72:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8014f76:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8014f7a:	495d      	ldr	r1, [pc, #372]	@ (80150f0 <rmw_init+0x214>)
 8014f7c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8014f80:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8014f84:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8014f88:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8014f8c:	4859      	ldr	r0, [pc, #356]	@ (80150f4 <rmw_init+0x218>)
 8014f8e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8014f92:	2201      	movs	r2, #1
 8014f94:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8014f96:	f7f8 fa29 	bl	800d3ec <rmw_uxrce_init_node_memory>
 8014f9a:	4957      	ldr	r1, [pc, #348]	@ (80150f8 <rmw_init+0x21c>)
 8014f9c:	4857      	ldr	r0, [pc, #348]	@ (80150fc <rmw_init+0x220>)
 8014f9e:	2205      	movs	r2, #5
 8014fa0:	f7f8 fa04 	bl	800d3ac <rmw_uxrce_init_subscription_memory>
 8014fa4:	4956      	ldr	r1, [pc, #344]	@ (8015100 <rmw_init+0x224>)
 8014fa6:	4857      	ldr	r0, [pc, #348]	@ (8015104 <rmw_init+0x228>)
 8014fa8:	220a      	movs	r2, #10
 8014faa:	f7f8 f9df 	bl	800d36c <rmw_uxrce_init_publisher_memory>
 8014fae:	4956      	ldr	r1, [pc, #344]	@ (8015108 <rmw_init+0x22c>)
 8014fb0:	4856      	ldr	r0, [pc, #344]	@ (801510c <rmw_init+0x230>)
 8014fb2:	2201      	movs	r2, #1
 8014fb4:	f7f8 f99a 	bl	800d2ec <rmw_uxrce_init_service_memory>
 8014fb8:	4955      	ldr	r1, [pc, #340]	@ (8015110 <rmw_init+0x234>)
 8014fba:	4856      	ldr	r0, [pc, #344]	@ (8015114 <rmw_init+0x238>)
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	f7f8 f9b5 	bl	800d32c <rmw_uxrce_init_client_memory>
 8014fc2:	4955      	ldr	r1, [pc, #340]	@ (8015118 <rmw_init+0x23c>)
 8014fc4:	4855      	ldr	r0, [pc, #340]	@ (801511c <rmw_init+0x240>)
 8014fc6:	220f      	movs	r2, #15
 8014fc8:	f7f8 fa50 	bl	800d46c <rmw_uxrce_init_topic_memory>
 8014fcc:	4954      	ldr	r1, [pc, #336]	@ (8015120 <rmw_init+0x244>)
 8014fce:	4855      	ldr	r0, [pc, #340]	@ (8015124 <rmw_init+0x248>)
 8014fd0:	2203      	movs	r2, #3
 8014fd2:	f7f8 fa8b 	bl	800d4ec <rmw_uxrce_init_init_options_impl_memory>
 8014fd6:	4954      	ldr	r1, [pc, #336]	@ (8015128 <rmw_init+0x24c>)
 8014fd8:	4854      	ldr	r0, [pc, #336]	@ (801512c <rmw_init+0x250>)
 8014fda:	2204      	movs	r2, #4
 8014fdc:	f7f8 faa6 	bl	800d52c <rmw_uxrce_init_wait_set_memory>
 8014fe0:	4953      	ldr	r1, [pc, #332]	@ (8015130 <rmw_init+0x254>)
 8014fe2:	4854      	ldr	r0, [pc, #336]	@ (8015134 <rmw_init+0x258>)
 8014fe4:	2204      	movs	r2, #4
 8014fe6:	f7f8 fac1 	bl	800d56c <rmw_uxrce_init_guard_condition_memory>
 8014fea:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8014fec:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8014fee:	4642      	mov	r2, r8
 8014ff0:	f000 fd9e 	bl	8015b30 <rmw_uxrce_transport_init>
 8014ff4:	4607      	mov	r7, r0
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	d158      	bne.n	80150ac <rmw_init+0x1d0>
 8014ffa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8014ffc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8015000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015002:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8015006:	4628      	mov	r0, r5
 8015008:	f7f9 fee6 	bl	800edd8 <uxr_init_session>
 801500c:	494a      	ldr	r1, [pc, #296]	@ (8015138 <rmw_init+0x25c>)
 801500e:	4622      	mov	r2, r4
 8015010:	4628      	mov	r0, r5
 8015012:	f7f9 ff05 	bl	800ee20 <uxr_set_topic_callback>
 8015016:	4949      	ldr	r1, [pc, #292]	@ (801513c <rmw_init+0x260>)
 8015018:	463a      	mov	r2, r7
 801501a:	4628      	mov	r0, r5
 801501c:	f7f9 fefc 	bl	800ee18 <uxr_set_status_callback>
 8015020:	4947      	ldr	r1, [pc, #284]	@ (8015140 <rmw_init+0x264>)
 8015022:	463a      	mov	r2, r7
 8015024:	4628      	mov	r0, r5
 8015026:	f7f9 feff 	bl	800ee28 <uxr_set_request_callback>
 801502a:	4946      	ldr	r1, [pc, #280]	@ (8015144 <rmw_init+0x268>)
 801502c:	463a      	mov	r2, r7
 801502e:	4628      	mov	r0, r5
 8015030:	f7f9 fefe 	bl	800ee30 <uxr_set_reply_callback>
 8015034:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015038:	2304      	movs	r3, #4
 801503a:	0092      	lsls	r2, r2, #2
 801503c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8015040:	4628      	mov	r0, r5
 8015042:	f7f9 ff33 	bl	800eeac <uxr_create_input_reliable_stream>
 8015046:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801504a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801504e:	0092      	lsls	r2, r2, #2
 8015050:	2304      	movs	r3, #4
 8015052:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8015056:	4628      	mov	r0, r5
 8015058:	f7f9 ff00 	bl	800ee5c <uxr_create_output_reliable_stream>
 801505c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8015060:	4628      	mov	r0, r5
 8015062:	f7f9 ff1d 	bl	800eea0 <uxr_create_input_best_effort_stream>
 8015066:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801506a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801506e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015072:	3114      	adds	r1, #20
 8015074:	4628      	mov	r0, r5
 8015076:	f7f9 fedf 	bl	800ee38 <uxr_create_output_best_effort_stream>
 801507a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801507e:	4628      	mov	r0, r5
 8015080:	f7fa fc6a 	bl	800f958 <uxr_create_session>
 8015084:	b1f8      	cbz	r0, 80150c6 <rmw_init+0x1ea>
 8015086:	4638      	mov	r0, r7
 8015088:	b003      	add	sp, #12
 801508a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801508e:	270b      	movs	r7, #11
 8015090:	4638      	mov	r0, r7
 8015092:	b003      	add	sp, #12
 8015094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015098:	2701      	movs	r7, #1
 801509a:	4638      	mov	r0, r7
 801509c:	b003      	add	sp, #12
 801509e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150a2:	270c      	movs	r7, #12
 80150a4:	4638      	mov	r0, r7
 80150a6:	b003      	add	sp, #12
 80150a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150ac:	4648      	mov	r0, r9
 80150ae:	f001 f9a1 	bl	80163f4 <uxr_close_custom_transport>
 80150b2:	480d      	ldr	r0, [pc, #52]	@ (80150e8 <rmw_init+0x20c>)
 80150b4:	4621      	mov	r1, r4
 80150b6:	f7ff fdbb 	bl	8014c30 <put_memory>
 80150ba:	4638      	mov	r0, r7
 80150bc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80150c0:	b003      	add	sp, #12
 80150c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150c6:	4648      	mov	r0, r9
 80150c8:	f001 f994 	bl	80163f4 <uxr_close_custom_transport>
 80150cc:	4806      	ldr	r0, [pc, #24]	@ (80150e8 <rmw_init+0x20c>)
 80150ce:	4621      	mov	r1, r4
 80150d0:	f7ff fdae 	bl	8014c30 <put_memory>
 80150d4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80150d6:	2701      	movs	r7, #1
 80150d8:	e7d5      	b.n	8015086 <rmw_init+0x1aa>
 80150da:	bf00      	nop
 80150dc:	0801ac34 	.word	0x0801ac34
 80150e0:	2000e3ec 	.word	0x2000e3ec
 80150e4:	2000a698 	.word	0x2000a698
 80150e8:	2000e3dc 	.word	0x2000e3dc
 80150ec:	2000bc40 	.word	0x2000bc40
 80150f0:	20009cbc 	.word	0x20009cbc
 80150f4:	2000e3ac 	.word	0x2000e3ac
 80150f8:	2000dd40 	.word	0x2000dd40
 80150fc:	2000e3fc 	.word	0x2000e3fc
 8015100:	20009d60 	.word	0x20009d60
 8015104:	2000e3bc 	.word	0x2000e3bc
 8015108:	2000a5d0 	.word	0x2000a5d0
 801510c:	2000e3cc 	.word	0x2000e3cc
 8015110:	20009af0 	.word	0x20009af0
 8015114:	20009ae0 	.word	0x20009ae0
 8015118:	2000e178 	.word	0x2000e178
 801511c:	2000e40c 	.word	0x2000e40c
 8015120:	20009c38 	.word	0x20009c38
 8015124:	2000e39c 	.word	0x2000e39c
 8015128:	2000e31c 	.word	0x2000e31c
 801512c:	2000e41c 	.word	0x2000e41c
 8015130:	20009bb8 	.word	0x20009bb8
 8015134:	2000e38c 	.word	0x2000e38c
 8015138:	080180e1 	.word	0x080180e1
 801513c:	080180d9 	.word	0x080180d9
 8015140:	08018179 	.word	0x08018179
 8015144:	08018215 	.word	0x08018215

08015148 <rmw_context_fini>:
 8015148:	4b17      	ldr	r3, [pc, #92]	@ (80151a8 <rmw_context_fini+0x60>)
 801514a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801514c:	b570      	push	{r4, r5, r6, lr}
 801514e:	681c      	ldr	r4, [r3, #0]
 8015150:	4605      	mov	r5, r0
 8015152:	b334      	cbz	r4, 80151a2 <rmw_context_fini+0x5a>
 8015154:	2600      	movs	r6, #0
 8015156:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801515a:	6902      	ldr	r2, [r0, #16]
 801515c:	428a      	cmp	r2, r1
 801515e:	d018      	beq.n	8015192 <rmw_context_fini+0x4a>
 8015160:	2c00      	cmp	r4, #0
 8015162:	d1f8      	bne.n	8015156 <rmw_context_fini+0xe>
 8015164:	b189      	cbz	r1, 801518a <rmw_context_fini+0x42>
 8015166:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801516a:	789b      	ldrb	r3, [r3, #2]
 801516c:	2b01      	cmp	r3, #1
 801516e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8015172:	bf14      	ite	ne
 8015174:	210a      	movne	r1, #10
 8015176:	2100      	moveq	r1, #0
 8015178:	f7fa fbc6 	bl	800f908 <uxr_delete_session_retries>
 801517c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801517e:	f7f8 fa15 	bl	800d5ac <rmw_uxrce_fini_session_memory>
 8015182:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8015184:	3010      	adds	r0, #16
 8015186:	f001 f935 	bl	80163f4 <uxr_close_custom_transport>
 801518a:	2300      	movs	r3, #0
 801518c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801518e:	4630      	mov	r0, r6
 8015190:	bd70      	pop	{r4, r5, r6, pc}
 8015192:	3018      	adds	r0, #24
 8015194:	f000 f90e 	bl	80153b4 <rmw_destroy_node>
 8015198:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801519a:	4606      	mov	r6, r0
 801519c:	2c00      	cmp	r4, #0
 801519e:	d1da      	bne.n	8015156 <rmw_context_fini+0xe>
 80151a0:	e7e0      	b.n	8015164 <rmw_context_fini+0x1c>
 80151a2:	4626      	mov	r6, r4
 80151a4:	e7de      	b.n	8015164 <rmw_context_fini+0x1c>
 80151a6:	bf00      	nop
 80151a8:	2000e3ac 	.word	0x2000e3ac

080151ac <create_topic>:
 80151ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151b0:	4605      	mov	r5, r0
 80151b2:	b084      	sub	sp, #16
 80151b4:	4822      	ldr	r0, [pc, #136]	@ (8015240 <create_topic+0x94>)
 80151b6:	460f      	mov	r7, r1
 80151b8:	4616      	mov	r6, r2
 80151ba:	f7ff fd29 	bl	8014c10 <get_memory>
 80151be:	4604      	mov	r4, r0
 80151c0:	2800      	cmp	r0, #0
 80151c2:	d039      	beq.n	8015238 <create_topic+0x8c>
 80151c4:	692b      	ldr	r3, [r5, #16]
 80151c6:	6884      	ldr	r4, [r0, #8]
 80151c8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015248 <create_topic+0x9c>
 80151cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80151d0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80151d4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80151d8:	1c42      	adds	r2, r0, #1
 80151da:	2102      	movs	r1, #2
 80151dc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80151e0:	f7f9 fd3c 	bl	800ec5c <uxr_object_id>
 80151e4:	223c      	movs	r2, #60	@ 0x3c
 80151e6:	6120      	str	r0, [r4, #16]
 80151e8:	4641      	mov	r1, r8
 80151ea:	4638      	mov	r0, r7
 80151ec:	f7f8 fbbc 	bl	800d968 <generate_topic_name>
 80151f0:	b1f0      	cbz	r0, 8015230 <create_topic+0x84>
 80151f2:	4f14      	ldr	r7, [pc, #80]	@ (8015244 <create_topic+0x98>)
 80151f4:	4630      	mov	r0, r6
 80151f6:	2264      	movs	r2, #100	@ 0x64
 80151f8:	4639      	mov	r1, r7
 80151fa:	f7f8 fb85 	bl	800d908 <generate_type_name>
 80151fe:	b1b8      	cbz	r0, 8015230 <create_topic+0x84>
 8015200:	6928      	ldr	r0, [r5, #16]
 8015202:	2306      	movs	r3, #6
 8015204:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015208:	f8cd 8000 	str.w	r8, [sp]
 801520c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015210:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015214:	6811      	ldr	r1, [r2, #0]
 8015216:	696b      	ldr	r3, [r5, #20]
 8015218:	6922      	ldr	r2, [r4, #16]
 801521a:	f7f9 fb9b 	bl	800e954 <uxr_buffer_create_topic_bin>
 801521e:	4602      	mov	r2, r0
 8015220:	6928      	ldr	r0, [r5, #16]
 8015222:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015226:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801522a:	f7f8 fb37 	bl	800d89c <run_xrce_session>
 801522e:	b918      	cbnz	r0, 8015238 <create_topic+0x8c>
 8015230:	4620      	mov	r0, r4
 8015232:	f7f8 fa31 	bl	800d698 <rmw_uxrce_fini_topic_memory>
 8015236:	2400      	movs	r4, #0
 8015238:	4620      	mov	r0, r4
 801523a:	b004      	add	sp, #16
 801523c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015240:	2000e40c 	.word	0x2000e40c
 8015244:	2000e4f8 	.word	0x2000e4f8
 8015248:	2000e4bc 	.word	0x2000e4bc

0801524c <destroy_topic>:
 801524c:	b538      	push	{r3, r4, r5, lr}
 801524e:	6985      	ldr	r5, [r0, #24]
 8015250:	b1d5      	cbz	r5, 8015288 <destroy_topic+0x3c>
 8015252:	4604      	mov	r4, r0
 8015254:	6928      	ldr	r0, [r5, #16]
 8015256:	6922      	ldr	r2, [r4, #16]
 8015258:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801525c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015260:	6819      	ldr	r1, [r3, #0]
 8015262:	f7f9 faf9 	bl	800e858 <uxr_buffer_delete_entity>
 8015266:	4602      	mov	r2, r0
 8015268:	6928      	ldr	r0, [r5, #16]
 801526a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801526e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015272:	f7f8 fb13 	bl	800d89c <run_xrce_session>
 8015276:	2800      	cmp	r0, #0
 8015278:	4620      	mov	r0, r4
 801527a:	bf14      	ite	ne
 801527c:	2400      	movne	r4, #0
 801527e:	2402      	moveq	r4, #2
 8015280:	f7f8 fa0a 	bl	800d698 <rmw_uxrce_fini_topic_memory>
 8015284:	4620      	mov	r0, r4
 8015286:	bd38      	pop	{r3, r4, r5, pc}
 8015288:	2401      	movs	r4, #1
 801528a:	4620      	mov	r0, r4
 801528c:	bd38      	pop	{r3, r4, r5, pc}
 801528e:	bf00      	nop

08015290 <create_node>:
 8015290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015294:	b083      	sub	sp, #12
 8015296:	2b00      	cmp	r3, #0
 8015298:	d05f      	beq.n	801535a <create_node+0xca>
 801529a:	4606      	mov	r6, r0
 801529c:	4835      	ldr	r0, [pc, #212]	@ (8015374 <create_node+0xe4>)
 801529e:	460f      	mov	r7, r1
 80152a0:	4690      	mov	r8, r2
 80152a2:	461d      	mov	r5, r3
 80152a4:	f7ff fcb4 	bl	8014c10 <get_memory>
 80152a8:	2800      	cmp	r0, #0
 80152aa:	d056      	beq.n	801535a <create_node+0xca>
 80152ac:	6884      	ldr	r4, [r0, #8]
 80152ae:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80152b0:	6123      	str	r3, [r4, #16]
 80152b2:	f7ff fd15 	bl	8014ce0 <rmw_get_implementation_identifier>
 80152b6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80152ba:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80152be:	f8c4 9020 	str.w	r9, [r4, #32]
 80152c2:	4630      	mov	r0, r6
 80152c4:	f7ea ff96 	bl	80001f4 <strlen>
 80152c8:	1c42      	adds	r2, r0, #1
 80152ca:	2a3c      	cmp	r2, #60	@ 0x3c
 80152cc:	f104 0518 	add.w	r5, r4, #24
 80152d0:	d840      	bhi.n	8015354 <create_node+0xc4>
 80152d2:	4648      	mov	r0, r9
 80152d4:	4631      	mov	r1, r6
 80152d6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80152da:	f003 fef6 	bl	80190ca <memcpy>
 80152de:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80152e2:	4638      	mov	r0, r7
 80152e4:	f7ea ff86 	bl	80001f4 <strlen>
 80152e8:	1c42      	adds	r2, r0, #1
 80152ea:	2a3c      	cmp	r2, #60	@ 0x3c
 80152ec:	d832      	bhi.n	8015354 <create_node+0xc4>
 80152ee:	4639      	mov	r1, r7
 80152f0:	4648      	mov	r0, r9
 80152f2:	f003 feea 	bl	80190ca <memcpy>
 80152f6:	6923      	ldr	r3, [r4, #16]
 80152f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80152fc:	2101      	movs	r1, #1
 80152fe:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8015302:	1842      	adds	r2, r0, r1
 8015304:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8015308:	f7f9 fca8 	bl	800ec5c <uxr_object_id>
 801530c:	6160      	str	r0, [r4, #20]
 801530e:	783b      	ldrb	r3, [r7, #0]
 8015310:	2b2f      	cmp	r3, #47	@ 0x2f
 8015312:	d127      	bne.n	8015364 <create_node+0xd4>
 8015314:	787b      	ldrb	r3, [r7, #1]
 8015316:	bb2b      	cbnz	r3, 8015364 <create_node+0xd4>
 8015318:	4a17      	ldr	r2, [pc, #92]	@ (8015378 <create_node+0xe8>)
 801531a:	4818      	ldr	r0, [pc, #96]	@ (801537c <create_node+0xec>)
 801531c:	4633      	mov	r3, r6
 801531e:	213c      	movs	r1, #60	@ 0x3c
 8015320:	f003 fc9c 	bl	8018c5c <sniprintf>
 8015324:	6920      	ldr	r0, [r4, #16]
 8015326:	4915      	ldr	r1, [pc, #84]	@ (801537c <create_node+0xec>)
 8015328:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801532c:	9100      	str	r1, [sp, #0]
 801532e:	2106      	movs	r1, #6
 8015330:	9101      	str	r1, [sp, #4]
 8015332:	6811      	ldr	r1, [r2, #0]
 8015334:	6962      	ldr	r2, [r4, #20]
 8015336:	fa1f f388 	uxth.w	r3, r8
 801533a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801533e:	f7f9 fad7 	bl	800e8f0 <uxr_buffer_create_participant_bin>
 8015342:	4602      	mov	r2, r0
 8015344:	6920      	ldr	r0, [r4, #16]
 8015346:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801534a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801534e:	f7f8 faa5 	bl	800d89c <run_xrce_session>
 8015352:	b918      	cbnz	r0, 801535c <create_node+0xcc>
 8015354:	4628      	mov	r0, r5
 8015356:	f7f8 f92f 	bl	800d5b8 <rmw_uxrce_fini_node_memory>
 801535a:	2500      	movs	r5, #0
 801535c:	4628      	mov	r0, r5
 801535e:	b003      	add	sp, #12
 8015360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015364:	4a06      	ldr	r2, [pc, #24]	@ (8015380 <create_node+0xf0>)
 8015366:	9600      	str	r6, [sp, #0]
 8015368:	463b      	mov	r3, r7
 801536a:	213c      	movs	r1, #60	@ 0x3c
 801536c:	4803      	ldr	r0, [pc, #12]	@ (801537c <create_node+0xec>)
 801536e:	f003 fc75 	bl	8018c5c <sniprintf>
 8015372:	e7d7      	b.n	8015324 <create_node+0x94>
 8015374:	2000e3ac 	.word	0x2000e3ac
 8015378:	0801a350 	.word	0x0801a350
 801537c:	2000e55c 	.word	0x2000e55c
 8015380:	0801a6a0 	.word	0x0801a6a0

08015384 <rmw_create_node>:
 8015384:	b199      	cbz	r1, 80153ae <rmw_create_node+0x2a>
 8015386:	780b      	ldrb	r3, [r1, #0]
 8015388:	468c      	mov	ip, r1
 801538a:	b183      	cbz	r3, 80153ae <rmw_create_node+0x2a>
 801538c:	b410      	push	{r4}
 801538e:	4614      	mov	r4, r2
 8015390:	b14a      	cbz	r2, 80153a6 <rmw_create_node+0x22>
 8015392:	7813      	ldrb	r3, [r2, #0]
 8015394:	b13b      	cbz	r3, 80153a6 <rmw_create_node+0x22>
 8015396:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8015398:	4603      	mov	r3, r0
 801539a:	4621      	mov	r1, r4
 801539c:	4660      	mov	r0, ip
 801539e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153a2:	f7ff bf75 	b.w	8015290 <create_node>
 80153a6:	2000      	movs	r0, #0
 80153a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153ac:	4770      	bx	lr
 80153ae:	2000      	movs	r0, #0
 80153b0:	4770      	bx	lr
 80153b2:	bf00      	nop

080153b4 <rmw_destroy_node>:
 80153b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153b6:	b328      	cbz	r0, 8015404 <rmw_destroy_node+0x50>
 80153b8:	4607      	mov	r7, r0
 80153ba:	6800      	ldr	r0, [r0, #0]
 80153bc:	b120      	cbz	r0, 80153c8 <rmw_destroy_node+0x14>
 80153be:	4b36      	ldr	r3, [pc, #216]	@ (8015498 <rmw_destroy_node+0xe4>)
 80153c0:	6819      	ldr	r1, [r3, #0]
 80153c2:	f7ea ff0d 	bl	80001e0 <strcmp>
 80153c6:	b9e8      	cbnz	r0, 8015404 <rmw_destroy_node+0x50>
 80153c8:	687d      	ldr	r5, [r7, #4]
 80153ca:	b1dd      	cbz	r5, 8015404 <rmw_destroy_node+0x50>
 80153cc:	4b33      	ldr	r3, [pc, #204]	@ (801549c <rmw_destroy_node+0xe8>)
 80153ce:	681c      	ldr	r4, [r3, #0]
 80153d0:	2c00      	cmp	r4, #0
 80153d2:	d05f      	beq.n	8015494 <rmw_destroy_node+0xe0>
 80153d4:	2600      	movs	r6, #0
 80153d6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80153da:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80153de:	429d      	cmp	r5, r3
 80153e0:	d013      	beq.n	801540a <rmw_destroy_node+0x56>
 80153e2:	2c00      	cmp	r4, #0
 80153e4:	d1f7      	bne.n	80153d6 <rmw_destroy_node+0x22>
 80153e6:	4b2e      	ldr	r3, [pc, #184]	@ (80154a0 <rmw_destroy_node+0xec>)
 80153e8:	681c      	ldr	r4, [r3, #0]
 80153ea:	b1c4      	cbz	r4, 801541e <rmw_destroy_node+0x6a>
 80153ec:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80153f0:	6a0b      	ldr	r3, [r1, #32]
 80153f2:	429d      	cmp	r5, r3
 80153f4:	d1f9      	bne.n	80153ea <rmw_destroy_node+0x36>
 80153f6:	317c      	adds	r1, #124	@ 0x7c
 80153f8:	4638      	mov	r0, r7
 80153fa:	f000 fae5 	bl	80159c8 <rmw_destroy_subscription>
 80153fe:	2801      	cmp	r0, #1
 8015400:	4606      	mov	r6, r0
 8015402:	d1f2      	bne.n	80153ea <rmw_destroy_node+0x36>
 8015404:	2601      	movs	r6, #1
 8015406:	4630      	mov	r0, r6
 8015408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801540a:	3184      	adds	r1, #132	@ 0x84
 801540c:	4638      	mov	r0, r7
 801540e:	f7f7 ff1b 	bl	800d248 <rmw_destroy_publisher>
 8015412:	2801      	cmp	r0, #1
 8015414:	4606      	mov	r6, r0
 8015416:	d0f5      	beq.n	8015404 <rmw_destroy_node+0x50>
 8015418:	2c00      	cmp	r4, #0
 801541a:	d1dc      	bne.n	80153d6 <rmw_destroy_node+0x22>
 801541c:	e7e3      	b.n	80153e6 <rmw_destroy_node+0x32>
 801541e:	4b21      	ldr	r3, [pc, #132]	@ (80154a4 <rmw_destroy_node+0xf0>)
 8015420:	681c      	ldr	r4, [r3, #0]
 8015422:	b16c      	cbz	r4, 8015440 <rmw_destroy_node+0x8c>
 8015424:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015428:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801542a:	429d      	cmp	r5, r3
 801542c:	d1f9      	bne.n	8015422 <rmw_destroy_node+0x6e>
 801542e:	317c      	adds	r1, #124	@ 0x7c
 8015430:	4638      	mov	r0, r7
 8015432:	f000 f993 	bl	801575c <rmw_destroy_service>
 8015436:	2801      	cmp	r0, #1
 8015438:	4606      	mov	r6, r0
 801543a:	d0e3      	beq.n	8015404 <rmw_destroy_node+0x50>
 801543c:	2c00      	cmp	r4, #0
 801543e:	d1f1      	bne.n	8015424 <rmw_destroy_node+0x70>
 8015440:	4b19      	ldr	r3, [pc, #100]	@ (80154a8 <rmw_destroy_node+0xf4>)
 8015442:	681c      	ldr	r4, [r3, #0]
 8015444:	b16c      	cbz	r4, 8015462 <rmw_destroy_node+0xae>
 8015446:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801544a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801544c:	429d      	cmp	r5, r3
 801544e:	d1f9      	bne.n	8015444 <rmw_destroy_node+0x90>
 8015450:	317c      	adds	r1, #124	@ 0x7c
 8015452:	4638      	mov	r0, r7
 8015454:	f7ff fc00 	bl	8014c58 <rmw_destroy_client>
 8015458:	2801      	cmp	r0, #1
 801545a:	4606      	mov	r6, r0
 801545c:	d0d2      	beq.n	8015404 <rmw_destroy_node+0x50>
 801545e:	2c00      	cmp	r4, #0
 8015460:	d1f1      	bne.n	8015446 <rmw_destroy_node+0x92>
 8015462:	6928      	ldr	r0, [r5, #16]
 8015464:	696a      	ldr	r2, [r5, #20]
 8015466:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801546a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801546e:	6819      	ldr	r1, [r3, #0]
 8015470:	f7f9 f9f2 	bl	800e858 <uxr_buffer_delete_entity>
 8015474:	4602      	mov	r2, r0
 8015476:	6928      	ldr	r0, [r5, #16]
 8015478:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801547c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015480:	f7f8 fa0c 	bl	800d89c <run_xrce_session>
 8015484:	2800      	cmp	r0, #0
 8015486:	bf08      	it	eq
 8015488:	2602      	moveq	r6, #2
 801548a:	4638      	mov	r0, r7
 801548c:	f7f8 f894 	bl	800d5b8 <rmw_uxrce_fini_node_memory>
 8015490:	4630      	mov	r0, r6
 8015492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015494:	4626      	mov	r6, r4
 8015496:	e7a6      	b.n	80153e6 <rmw_destroy_node+0x32>
 8015498:	0801ac34 	.word	0x0801ac34
 801549c:	2000e3bc 	.word	0x2000e3bc
 80154a0:	2000e3fc 	.word	0x2000e3fc
 80154a4:	2000e3cc 	.word	0x2000e3cc
 80154a8:	20009ae0 	.word	0x20009ae0

080154ac <rmw_node_get_graph_guard_condition>:
 80154ac:	6843      	ldr	r3, [r0, #4]
 80154ae:	6918      	ldr	r0, [r3, #16]
 80154b0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80154b4:	4770      	bx	lr
 80154b6:	bf00      	nop

080154b8 <rmw_send_request>:
 80154b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154bc:	4604      	mov	r4, r0
 80154be:	6800      	ldr	r0, [r0, #0]
 80154c0:	b08b      	sub	sp, #44	@ 0x2c
 80154c2:	460e      	mov	r6, r1
 80154c4:	4615      	mov	r5, r2
 80154c6:	b128      	cbz	r0, 80154d4 <rmw_send_request+0x1c>
 80154c8:	4b21      	ldr	r3, [pc, #132]	@ (8015550 <rmw_send_request+0x98>)
 80154ca:	6819      	ldr	r1, [r3, #0]
 80154cc:	f7ea fe88 	bl	80001e0 <strcmp>
 80154d0:	2800      	cmp	r0, #0
 80154d2:	d139      	bne.n	8015548 <rmw_send_request+0x90>
 80154d4:	6864      	ldr	r4, [r4, #4]
 80154d6:	6963      	ldr	r3, [r4, #20]
 80154d8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80154dc:	689b      	ldr	r3, [r3, #8]
 80154de:	4798      	blx	r3
 80154e0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80154e4:	4630      	mov	r0, r6
 80154e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80154ea:	4798      	blx	r3
 80154ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80154f0:	9000      	str	r0, [sp, #0]
 80154f2:	6922      	ldr	r2, [r4, #16]
 80154f4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80154f6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80154fa:	ab02      	add	r3, sp, #8
 80154fc:	f7fa fea8 	bl	8010250 <uxr_prepare_output_stream>
 8015500:	2700      	movs	r7, #0
 8015502:	6028      	str	r0, [r5, #0]
 8015504:	606f      	str	r7, [r5, #4]
 8015506:	b198      	cbz	r0, 8015530 <rmw_send_request+0x78>
 8015508:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801550c:	a902      	add	r1, sp, #8
 801550e:	4630      	mov	r0, r6
 8015510:	4798      	blx	r3
 8015512:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015516:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801551a:	2b01      	cmp	r3, #1
 801551c:	d00c      	beq.n	8015538 <rmw_send_request+0x80>
 801551e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015520:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015524:	f7fa f8a8 	bl	800f678 <uxr_run_session_until_confirm_delivery>
 8015528:	4638      	mov	r0, r7
 801552a:	b00b      	add	sp, #44	@ 0x2c
 801552c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015530:	2001      	movs	r0, #1
 8015532:	b00b      	add	sp, #44	@ 0x2c
 8015534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015538:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801553c:	f7f9 fcdc 	bl	800eef8 <uxr_flash_output_streams>
 8015540:	4638      	mov	r0, r7
 8015542:	b00b      	add	sp, #44	@ 0x2c
 8015544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015548:	200c      	movs	r0, #12
 801554a:	b00b      	add	sp, #44	@ 0x2c
 801554c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015550:	0801ac34 	.word	0x0801ac34

08015554 <rmw_take_request>:
 8015554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015558:	4605      	mov	r5, r0
 801555a:	6800      	ldr	r0, [r0, #0]
 801555c:	b089      	sub	sp, #36	@ 0x24
 801555e:	460c      	mov	r4, r1
 8015560:	4690      	mov	r8, r2
 8015562:	461e      	mov	r6, r3
 8015564:	b128      	cbz	r0, 8015572 <rmw_take_request+0x1e>
 8015566:	4b28      	ldr	r3, [pc, #160]	@ (8015608 <rmw_take_request+0xb4>)
 8015568:	6819      	ldr	r1, [r3, #0]
 801556a:	f7ea fe39 	bl	80001e0 <strcmp>
 801556e:	2800      	cmp	r0, #0
 8015570:	d146      	bne.n	8015600 <rmw_take_request+0xac>
 8015572:	b10e      	cbz	r6, 8015578 <rmw_take_request+0x24>
 8015574:	2300      	movs	r3, #0
 8015576:	7033      	strb	r3, [r6, #0]
 8015578:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801557c:	f7f8 f910 	bl	800d7a0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015580:	4648      	mov	r0, r9
 8015582:	f7f8 f8e5 	bl	800d750 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015586:	4607      	mov	r7, r0
 8015588:	b3b0      	cbz	r0, 80155f8 <rmw_take_request+0xa4>
 801558a:	6885      	ldr	r5, [r0, #8]
 801558c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015590:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8015594:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015598:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801559c:	7423      	strb	r3, [r4, #16]
 801559e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80155a2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80155a6:	74e2      	strb	r2, [r4, #19]
 80155a8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80155ac:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80155b0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80155b4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80155b8:	61e1      	str	r1, [r4, #28]
 80155ba:	6162      	str	r2, [r4, #20]
 80155bc:	61a3      	str	r3, [r4, #24]
 80155be:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80155c2:	689b      	ldr	r3, [r3, #8]
 80155c4:	4798      	blx	r3
 80155c6:	6844      	ldr	r4, [r0, #4]
 80155c8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80155cc:	f105 0110 	add.w	r1, r5, #16
 80155d0:	4668      	mov	r0, sp
 80155d2:	f7f6 fa73 	bl	800babc <ucdr_init_buffer>
 80155d6:	68e3      	ldr	r3, [r4, #12]
 80155d8:	4641      	mov	r1, r8
 80155da:	4668      	mov	r0, sp
 80155dc:	4798      	blx	r3
 80155de:	4639      	mov	r1, r7
 80155e0:	4604      	mov	r4, r0
 80155e2:	480a      	ldr	r0, [pc, #40]	@ (801560c <rmw_take_request+0xb8>)
 80155e4:	f7ff fb24 	bl	8014c30 <put_memory>
 80155e8:	b106      	cbz	r6, 80155ec <rmw_take_request+0x98>
 80155ea:	7034      	strb	r4, [r6, #0]
 80155ec:	f084 0001 	eor.w	r0, r4, #1
 80155f0:	b2c0      	uxtb	r0, r0
 80155f2:	b009      	add	sp, #36	@ 0x24
 80155f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155f8:	2001      	movs	r0, #1
 80155fa:	b009      	add	sp, #36	@ 0x24
 80155fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015600:	200c      	movs	r0, #12
 8015602:	b009      	add	sp, #36	@ 0x24
 8015604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015608:	0801ac34 	.word	0x0801ac34
 801560c:	2000e3ec 	.word	0x2000e3ec

08015610 <rmw_send_response>:
 8015610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015612:	4605      	mov	r5, r0
 8015614:	6800      	ldr	r0, [r0, #0]
 8015616:	b091      	sub	sp, #68	@ 0x44
 8015618:	460c      	mov	r4, r1
 801561a:	4616      	mov	r6, r2
 801561c:	b128      	cbz	r0, 801562a <rmw_send_response+0x1a>
 801561e:	4b29      	ldr	r3, [pc, #164]	@ (80156c4 <rmw_send_response+0xb4>)
 8015620:	6819      	ldr	r1, [r3, #0]
 8015622:	f7ea fddd 	bl	80001e0 <strcmp>
 8015626:	2800      	cmp	r0, #0
 8015628:	d141      	bne.n	80156ae <rmw_send_response+0x9e>
 801562a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801562e:	9306      	str	r3, [sp, #24]
 8015630:	4623      	mov	r3, r4
 8015632:	9207      	str	r2, [sp, #28]
 8015634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015638:	686d      	ldr	r5, [r5, #4]
 801563a:	789b      	ldrb	r3, [r3, #2]
 801563c:	68a1      	ldr	r1, [r4, #8]
 801563e:	f88d 2017 	strb.w	r2, [sp, #23]
 8015642:	f88d 3016 	strb.w	r3, [sp, #22]
 8015646:	68e2      	ldr	r2, [r4, #12]
 8015648:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801564c:	6860      	ldr	r0, [r4, #4]
 801564e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015652:	ab02      	add	r3, sp, #8
 8015654:	c307      	stmia	r3!, {r0, r1, r2}
 8015656:	696b      	ldr	r3, [r5, #20]
 8015658:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	4798      	blx	r3
 801565e:	6844      	ldr	r4, [r0, #4]
 8015660:	4630      	mov	r0, r6
 8015662:	6923      	ldr	r3, [r4, #16]
 8015664:	4798      	blx	r3
 8015666:	f100 0318 	add.w	r3, r0, #24
 801566a:	6938      	ldr	r0, [r7, #16]
 801566c:	9300      	str	r3, [sp, #0]
 801566e:	692a      	ldr	r2, [r5, #16]
 8015670:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015672:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015676:	ab08      	add	r3, sp, #32
 8015678:	f7fa fdea 	bl	8010250 <uxr_prepare_output_stream>
 801567c:	b910      	cbnz	r0, 8015684 <rmw_send_response+0x74>
 801567e:	2001      	movs	r0, #1
 8015680:	b011      	add	sp, #68	@ 0x44
 8015682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015684:	a902      	add	r1, sp, #8
 8015686:	a808      	add	r0, sp, #32
 8015688:	f7fb ff1a 	bl	80114c0 <uxr_serialize_SampleIdentity>
 801568c:	68a3      	ldr	r3, [r4, #8]
 801568e:	a908      	add	r1, sp, #32
 8015690:	4630      	mov	r0, r6
 8015692:	4798      	blx	r3
 8015694:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015698:	6938      	ldr	r0, [r7, #16]
 801569a:	2b01      	cmp	r3, #1
 801569c:	d00a      	beq.n	80156b4 <rmw_send_response+0xa4>
 801569e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80156a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80156a4:	f7f9 ffe8 	bl	800f678 <uxr_run_session_until_confirm_delivery>
 80156a8:	2000      	movs	r0, #0
 80156aa:	b011      	add	sp, #68	@ 0x44
 80156ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156ae:	200c      	movs	r0, #12
 80156b0:	b011      	add	sp, #68	@ 0x44
 80156b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80156b8:	f7f9 fc1e 	bl	800eef8 <uxr_flash_output_streams>
 80156bc:	2000      	movs	r0, #0
 80156be:	b011      	add	sp, #68	@ 0x44
 80156c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156c2:	bf00      	nop
 80156c4:	0801ac34 	.word	0x0801ac34

080156c8 <rmw_take_response>:
 80156c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156cc:	4604      	mov	r4, r0
 80156ce:	6800      	ldr	r0, [r0, #0]
 80156d0:	b088      	sub	sp, #32
 80156d2:	4688      	mov	r8, r1
 80156d4:	4617      	mov	r7, r2
 80156d6:	461d      	mov	r5, r3
 80156d8:	b120      	cbz	r0, 80156e4 <rmw_take_response+0x1c>
 80156da:	4b1e      	ldr	r3, [pc, #120]	@ (8015754 <rmw_take_response+0x8c>)
 80156dc:	6819      	ldr	r1, [r3, #0]
 80156de:	f7ea fd7f 	bl	80001e0 <strcmp>
 80156e2:	bb78      	cbnz	r0, 8015744 <rmw_take_response+0x7c>
 80156e4:	b10d      	cbz	r5, 80156ea <rmw_take_response+0x22>
 80156e6:	2300      	movs	r3, #0
 80156e8:	702b      	strb	r3, [r5, #0]
 80156ea:	6864      	ldr	r4, [r4, #4]
 80156ec:	f7f8 f858 	bl	800d7a0 <rmw_uxrce_clean_expired_static_input_buffer>
 80156f0:	4620      	mov	r0, r4
 80156f2:	f7f8 f82d 	bl	800d750 <rmw_uxrce_find_static_input_buffer_by_owner>
 80156f6:	4606      	mov	r6, r0
 80156f8:	b340      	cbz	r0, 801574c <rmw_take_response+0x84>
 80156fa:	6963      	ldr	r3, [r4, #20]
 80156fc:	6884      	ldr	r4, [r0, #8]
 80156fe:	68db      	ldr	r3, [r3, #12]
 8015700:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8015704:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015708:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801570c:	4798      	blx	r3
 801570e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015712:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015716:	f104 0110 	add.w	r1, r4, #16
 801571a:	4668      	mov	r0, sp
 801571c:	f7f6 f9ce 	bl	800babc <ucdr_init_buffer>
 8015720:	4639      	mov	r1, r7
 8015722:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015726:	4668      	mov	r0, sp
 8015728:	4798      	blx	r3
 801572a:	4631      	mov	r1, r6
 801572c:	4604      	mov	r4, r0
 801572e:	480a      	ldr	r0, [pc, #40]	@ (8015758 <rmw_take_response+0x90>)
 8015730:	f7ff fa7e 	bl	8014c30 <put_memory>
 8015734:	b105      	cbz	r5, 8015738 <rmw_take_response+0x70>
 8015736:	702c      	strb	r4, [r5, #0]
 8015738:	f084 0001 	eor.w	r0, r4, #1
 801573c:	b2c0      	uxtb	r0, r0
 801573e:	b008      	add	sp, #32
 8015740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015744:	200c      	movs	r0, #12
 8015746:	b008      	add	sp, #32
 8015748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801574c:	2001      	movs	r0, #1
 801574e:	b008      	add	sp, #32
 8015750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015754:	0801ac34 	.word	0x0801ac34
 8015758:	2000e3ec 	.word	0x2000e3ec

0801575c <rmw_destroy_service>:
 801575c:	b570      	push	{r4, r5, r6, lr}
 801575e:	b128      	cbz	r0, 801576c <rmw_destroy_service+0x10>
 8015760:	4604      	mov	r4, r0
 8015762:	6800      	ldr	r0, [r0, #0]
 8015764:	460d      	mov	r5, r1
 8015766:	f7f8 f919 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 801576a:	b910      	cbnz	r0, 8015772 <rmw_destroy_service+0x16>
 801576c:	2401      	movs	r4, #1
 801576e:	4620      	mov	r0, r4
 8015770:	bd70      	pop	{r4, r5, r6, pc}
 8015772:	6863      	ldr	r3, [r4, #4]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d0f9      	beq.n	801576c <rmw_destroy_service+0x10>
 8015778:	2d00      	cmp	r5, #0
 801577a:	d0f7      	beq.n	801576c <rmw_destroy_service+0x10>
 801577c:	6828      	ldr	r0, [r5, #0]
 801577e:	f7f8 f90d 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 8015782:	2800      	cmp	r0, #0
 8015784:	d0f2      	beq.n	801576c <rmw_destroy_service+0x10>
 8015786:	686e      	ldr	r6, [r5, #4]
 8015788:	2e00      	cmp	r6, #0
 801578a:	d0ef      	beq.n	801576c <rmw_destroy_service+0x10>
 801578c:	6864      	ldr	r4, [r4, #4]
 801578e:	6932      	ldr	r2, [r6, #16]
 8015790:	6920      	ldr	r0, [r4, #16]
 8015792:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015796:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801579a:	6819      	ldr	r1, [r3, #0]
 801579c:	f001 fbb0 	bl	8016f00 <uxr_buffer_cancel_data>
 80157a0:	4602      	mov	r2, r0
 80157a2:	6920      	ldr	r0, [r4, #16]
 80157a4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80157a8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80157ac:	f7f8 f876 	bl	800d89c <run_xrce_session>
 80157b0:	6920      	ldr	r0, [r4, #16]
 80157b2:	6932      	ldr	r2, [r6, #16]
 80157b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80157b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80157bc:	6819      	ldr	r1, [r3, #0]
 80157be:	f7f9 f84b 	bl	800e858 <uxr_buffer_delete_entity>
 80157c2:	4602      	mov	r2, r0
 80157c4:	6920      	ldr	r0, [r4, #16]
 80157c6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80157ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80157ce:	f7f8 f865 	bl	800d89c <run_xrce_session>
 80157d2:	2800      	cmp	r0, #0
 80157d4:	4628      	mov	r0, r5
 80157d6:	bf14      	ite	ne
 80157d8:	2400      	movne	r4, #0
 80157da:	2402      	moveq	r4, #2
 80157dc:	f7f7 ff30 	bl	800d640 <rmw_uxrce_fini_service_memory>
 80157e0:	e7c5      	b.n	801576e <rmw_destroy_service+0x12>
 80157e2:	bf00      	nop

080157e4 <rmw_create_subscription>:
 80157e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e8:	b08d      	sub	sp, #52	@ 0x34
 80157ea:	2800      	cmp	r0, #0
 80157ec:	f000 80d1 	beq.w	8015992 <rmw_create_subscription+0x1ae>
 80157f0:	460e      	mov	r6, r1
 80157f2:	2900      	cmp	r1, #0
 80157f4:	f000 80cd 	beq.w	8015992 <rmw_create_subscription+0x1ae>
 80157f8:	4604      	mov	r4, r0
 80157fa:	6800      	ldr	r0, [r0, #0]
 80157fc:	4615      	mov	r5, r2
 80157fe:	4698      	mov	r8, r3
 8015800:	f7f8 f8cc 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 8015804:	2800      	cmp	r0, #0
 8015806:	f000 80c4 	beq.w	8015992 <rmw_create_subscription+0x1ae>
 801580a:	2d00      	cmp	r5, #0
 801580c:	f000 80c1 	beq.w	8015992 <rmw_create_subscription+0x1ae>
 8015810:	782b      	ldrb	r3, [r5, #0]
 8015812:	2b00      	cmp	r3, #0
 8015814:	f000 80bd 	beq.w	8015992 <rmw_create_subscription+0x1ae>
 8015818:	f1b8 0f00 	cmp.w	r8, #0
 801581c:	f000 80b9 	beq.w	8015992 <rmw_create_subscription+0x1ae>
 8015820:	485e      	ldr	r0, [pc, #376]	@ (801599c <rmw_create_subscription+0x1b8>)
 8015822:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015826:	f7ff f9f3 	bl	8014c10 <get_memory>
 801582a:	4604      	mov	r4, r0
 801582c:	2800      	cmp	r0, #0
 801582e:	f000 80b1 	beq.w	8015994 <rmw_create_subscription+0x1b0>
 8015832:	6887      	ldr	r7, [r0, #8]
 8015834:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8015838:	f7ff fa52 	bl	8014ce0 <rmw_get_implementation_identifier>
 801583c:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8015840:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8015842:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8015846:	4628      	mov	r0, r5
 8015848:	f7ea fcd4 	bl	80001f4 <strlen>
 801584c:	3001      	adds	r0, #1
 801584e:	283c      	cmp	r0, #60	@ 0x3c
 8015850:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8015854:	f200 8096 	bhi.w	8015984 <rmw_create_subscription+0x1a0>
 8015858:	4a51      	ldr	r2, [pc, #324]	@ (80159a0 <rmw_create_subscription+0x1bc>)
 801585a:	462b      	mov	r3, r5
 801585c:	213c      	movs	r1, #60	@ 0x3c
 801585e:	4650      	mov	r0, sl
 8015860:	f003 f9fc 	bl	8018c5c <sniprintf>
 8015864:	4641      	mov	r1, r8
 8015866:	f8c7 9020 	str.w	r9, [r7, #32]
 801586a:	2250      	movs	r2, #80	@ 0x50
 801586c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8015870:	f003 fc2b 	bl	80190ca <memcpy>
 8015874:	494b      	ldr	r1, [pc, #300]	@ (80159a4 <rmw_create_subscription+0x1c0>)
 8015876:	4630      	mov	r0, r6
 8015878:	f7f8 f89e 	bl	800d9b8 <get_message_typesupport_handle>
 801587c:	2800      	cmp	r0, #0
 801587e:	f000 8081 	beq.w	8015984 <rmw_create_subscription+0x1a0>
 8015882:	6842      	ldr	r2, [r0, #4]
 8015884:	61ba      	str	r2, [r7, #24]
 8015886:	2a00      	cmp	r2, #0
 8015888:	d07c      	beq.n	8015984 <rmw_create_subscription+0x1a0>
 801588a:	4629      	mov	r1, r5
 801588c:	4643      	mov	r3, r8
 801588e:	4648      	mov	r0, r9
 8015890:	f7ff fc8c 	bl	80151ac <create_topic>
 8015894:	61f8      	str	r0, [r7, #28]
 8015896:	2800      	cmp	r0, #0
 8015898:	d078      	beq.n	801598c <rmw_create_subscription+0x1a8>
 801589a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801589e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80158a2:	2104      	movs	r1, #4
 80158a4:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80158a8:	1c42      	adds	r2, r0, #1
 80158aa:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80158ae:	f7f9 f9d5 	bl	800ec5c <uxr_object_id>
 80158b2:	6138      	str	r0, [r7, #16]
 80158b4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80158b8:	2506      	movs	r5, #6
 80158ba:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80158be:	9500      	str	r5, [sp, #0]
 80158c0:	6819      	ldr	r1, [r3, #0]
 80158c2:	693a      	ldr	r2, [r7, #16]
 80158c4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80158c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158cc:	f7f9 f8a8 	bl	800ea20 <uxr_buffer_create_subscriber_bin>
 80158d0:	4602      	mov	r2, r0
 80158d2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80158d6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80158da:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80158de:	f7f7 ffdd 	bl	800d89c <run_xrce_session>
 80158e2:	2800      	cmp	r0, #0
 80158e4:	d04e      	beq.n	8015984 <rmw_create_subscription+0x1a0>
 80158e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80158ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80158ee:	4629      	mov	r1, r5
 80158f0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 80158f4:	1c42      	adds	r2, r0, #1
 80158f6:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80158fa:	f7f9 f9af 	bl	800ec5c <uxr_object_id>
 80158fe:	ae08      	add	r6, sp, #32
 8015900:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015904:	69fb      	ldr	r3, [r7, #28]
 8015906:	6178      	str	r0, [r7, #20]
 8015908:	4641      	mov	r1, r8
 801590a:	4630      	mov	r0, r6
 801590c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8015910:	9305      	str	r3, [sp, #20]
 8015912:	f7f7 ffdf 	bl	800d8d4 <convert_qos_profile>
 8015916:	9503      	str	r5, [sp, #12]
 8015918:	e896 0003 	ldmia.w	r6, {r0, r1}
 801591c:	9b05      	ldr	r3, [sp, #20]
 801591e:	9001      	str	r0, [sp, #4]
 8015920:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015924:	691b      	ldr	r3, [r3, #16]
 8015926:	9300      	str	r3, [sp, #0]
 8015928:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801592c:	f8db 1000 	ldr.w	r1, [fp]
 8015930:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8015934:	f7f9 f91a 	bl	800eb6c <uxr_buffer_create_datareader_bin>
 8015938:	4602      	mov	r2, r0
 801593a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801593e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015942:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015946:	f7f7 ffa9 	bl	800d89c <run_xrce_session>
 801594a:	b1d8      	cbz	r0, 8015984 <rmw_create_subscription+0x1a0>
 801594c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8015950:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015954:	2b02      	cmp	r3, #2
 8015956:	bf0c      	ite	eq
 8015958:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801595c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8015960:	9307      	str	r3, [sp, #28]
 8015962:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015966:	2200      	movs	r2, #0
 8015968:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801596c:	ab0a      	add	r3, sp, #40	@ 0x28
 801596e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015972:	9300      	str	r3, [sp, #0]
 8015974:	697a      	ldr	r2, [r7, #20]
 8015976:	9b07      	ldr	r3, [sp, #28]
 8015978:	6809      	ldr	r1, [r1, #0]
 801597a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801597e:	f001 fa85 	bl	8016e8c <uxr_buffer_request_data>
 8015982:	e007      	b.n	8015994 <rmw_create_subscription+0x1b0>
 8015984:	69f8      	ldr	r0, [r7, #28]
 8015986:	b108      	cbz	r0, 801598c <rmw_create_subscription+0x1a8>
 8015988:	f7f7 fe86 	bl	800d698 <rmw_uxrce_fini_topic_memory>
 801598c:	4620      	mov	r0, r4
 801598e:	f7f7 fe41 	bl	800d614 <rmw_uxrce_fini_subscription_memory>
 8015992:	2400      	movs	r4, #0
 8015994:	4620      	mov	r0, r4
 8015996:	b00d      	add	sp, #52	@ 0x34
 8015998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801599c:	2000e3fc 	.word	0x2000e3fc
 80159a0:	0801a350 	.word	0x0801a350
 80159a4:	08019f90 	.word	0x08019f90

080159a8 <rmw_subscription_get_actual_qos>:
 80159a8:	b150      	cbz	r0, 80159c0 <rmw_subscription_get_actual_qos+0x18>
 80159aa:	b508      	push	{r3, lr}
 80159ac:	460b      	mov	r3, r1
 80159ae:	b149      	cbz	r1, 80159c4 <rmw_subscription_get_actual_qos+0x1c>
 80159b0:	6841      	ldr	r1, [r0, #4]
 80159b2:	2250      	movs	r2, #80	@ 0x50
 80159b4:	3128      	adds	r1, #40	@ 0x28
 80159b6:	4618      	mov	r0, r3
 80159b8:	f003 fb87 	bl	80190ca <memcpy>
 80159bc:	2000      	movs	r0, #0
 80159be:	bd08      	pop	{r3, pc}
 80159c0:	200b      	movs	r0, #11
 80159c2:	4770      	bx	lr
 80159c4:	200b      	movs	r0, #11
 80159c6:	bd08      	pop	{r3, pc}

080159c8 <rmw_destroy_subscription>:
 80159c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ca:	b128      	cbz	r0, 80159d8 <rmw_destroy_subscription+0x10>
 80159cc:	4604      	mov	r4, r0
 80159ce:	6800      	ldr	r0, [r0, #0]
 80159d0:	460d      	mov	r5, r1
 80159d2:	f7f7 ffe3 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 80159d6:	b910      	cbnz	r0, 80159de <rmw_destroy_subscription+0x16>
 80159d8:	2401      	movs	r4, #1
 80159da:	4620      	mov	r0, r4
 80159dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159de:	6863      	ldr	r3, [r4, #4]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d0f9      	beq.n	80159d8 <rmw_destroy_subscription+0x10>
 80159e4:	2d00      	cmp	r5, #0
 80159e6:	d0f7      	beq.n	80159d8 <rmw_destroy_subscription+0x10>
 80159e8:	6828      	ldr	r0, [r5, #0]
 80159ea:	f7f7 ffd7 	bl	800d99c <is_uxrce_rmw_identifier_valid>
 80159ee:	2800      	cmp	r0, #0
 80159f0:	d0f2      	beq.n	80159d8 <rmw_destroy_subscription+0x10>
 80159f2:	686c      	ldr	r4, [r5, #4]
 80159f4:	2c00      	cmp	r4, #0
 80159f6:	d0ef      	beq.n	80159d8 <rmw_destroy_subscription+0x10>
 80159f8:	6a26      	ldr	r6, [r4, #32]
 80159fa:	6962      	ldr	r2, [r4, #20]
 80159fc:	6930      	ldr	r0, [r6, #16]
 80159fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015a02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a06:	6819      	ldr	r1, [r3, #0]
 8015a08:	f001 fa7a 	bl	8016f00 <uxr_buffer_cancel_data>
 8015a0c:	4602      	mov	r2, r0
 8015a0e:	6930      	ldr	r0, [r6, #16]
 8015a10:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015a14:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015a18:	f7f7 ff40 	bl	800d89c <run_xrce_session>
 8015a1c:	69e0      	ldr	r0, [r4, #28]
 8015a1e:	f7ff fc15 	bl	801524c <destroy_topic>
 8015a22:	6a23      	ldr	r3, [r4, #32]
 8015a24:	6962      	ldr	r2, [r4, #20]
 8015a26:	6918      	ldr	r0, [r3, #16]
 8015a28:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015a2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a30:	6819      	ldr	r1, [r3, #0]
 8015a32:	f7f8 ff11 	bl	800e858 <uxr_buffer_delete_entity>
 8015a36:	6a23      	ldr	r3, [r4, #32]
 8015a38:	6922      	ldr	r2, [r4, #16]
 8015a3a:	691b      	ldr	r3, [r3, #16]
 8015a3c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8015a40:	4604      	mov	r4, r0
 8015a42:	6809      	ldr	r1, [r1, #0]
 8015a44:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015a48:	f7f8 ff06 	bl	800e858 <uxr_buffer_delete_entity>
 8015a4c:	6937      	ldr	r7, [r6, #16]
 8015a4e:	4622      	mov	r2, r4
 8015a50:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8015a54:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8015a58:	4604      	mov	r4, r0
 8015a5a:	4638      	mov	r0, r7
 8015a5c:	f7f7 ff1e 	bl	800d89c <run_xrce_session>
 8015a60:	6936      	ldr	r6, [r6, #16]
 8015a62:	4622      	mov	r2, r4
 8015a64:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8015a68:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8015a6c:	4604      	mov	r4, r0
 8015a6e:	4630      	mov	r0, r6
 8015a70:	f7f7 ff14 	bl	800d89c <run_xrce_session>
 8015a74:	b12c      	cbz	r4, 8015a82 <rmw_destroy_subscription+0xba>
 8015a76:	b120      	cbz	r0, 8015a82 <rmw_destroy_subscription+0xba>
 8015a78:	2400      	movs	r4, #0
 8015a7a:	4628      	mov	r0, r5
 8015a7c:	f7f7 fdca 	bl	800d614 <rmw_uxrce_fini_subscription_memory>
 8015a80:	e7ab      	b.n	80159da <rmw_destroy_subscription+0x12>
 8015a82:	2402      	movs	r4, #2
 8015a84:	e7f9      	b.n	8015a7a <rmw_destroy_subscription+0xb2>
 8015a86:	bf00      	nop

08015a88 <rmw_take_with_info>:
 8015a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a8a:	4604      	mov	r4, r0
 8015a8c:	6800      	ldr	r0, [r0, #0]
 8015a8e:	b089      	sub	sp, #36	@ 0x24
 8015a90:	460f      	mov	r7, r1
 8015a92:	4615      	mov	r5, r2
 8015a94:	b128      	cbz	r0, 8015aa2 <rmw_take_with_info+0x1a>
 8015a96:	4b24      	ldr	r3, [pc, #144]	@ (8015b28 <rmw_take_with_info+0xa0>)
 8015a98:	6819      	ldr	r1, [r3, #0]
 8015a9a:	f7ea fba1 	bl	80001e0 <strcmp>
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d13e      	bne.n	8015b20 <rmw_take_with_info+0x98>
 8015aa2:	b305      	cbz	r5, 8015ae6 <rmw_take_with_info+0x5e>
 8015aa4:	6864      	ldr	r4, [r4, #4]
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	702b      	strb	r3, [r5, #0]
 8015aaa:	f7f7 fe79 	bl	800d7a0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015aae:	4620      	mov	r0, r4
 8015ab0:	f7f7 fe4e 	bl	800d750 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ab4:	4606      	mov	r6, r0
 8015ab6:	b1f0      	cbz	r0, 8015af6 <rmw_take_with_info+0x6e>
 8015ab8:	6881      	ldr	r1, [r0, #8]
 8015aba:	4668      	mov	r0, sp
 8015abc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015ac0:	3110      	adds	r1, #16
 8015ac2:	f7f5 fffb 	bl	800babc <ucdr_init_buffer>
 8015ac6:	69a3      	ldr	r3, [r4, #24]
 8015ac8:	4639      	mov	r1, r7
 8015aca:	68db      	ldr	r3, [r3, #12]
 8015acc:	4668      	mov	r0, sp
 8015ace:	4798      	blx	r3
 8015ad0:	4631      	mov	r1, r6
 8015ad2:	4604      	mov	r4, r0
 8015ad4:	4815      	ldr	r0, [pc, #84]	@ (8015b2c <rmw_take_with_info+0xa4>)
 8015ad6:	f7ff f8ab 	bl	8014c30 <put_memory>
 8015ada:	702c      	strb	r4, [r5, #0]
 8015adc:	f084 0001 	eor.w	r0, r4, #1
 8015ae0:	b2c0      	uxtb	r0, r0
 8015ae2:	b009      	add	sp, #36	@ 0x24
 8015ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ae6:	6864      	ldr	r4, [r4, #4]
 8015ae8:	f7f7 fe5a 	bl	800d7a0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015aec:	4620      	mov	r0, r4
 8015aee:	f7f7 fe2f 	bl	800d750 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015af2:	4605      	mov	r5, r0
 8015af4:	b910      	cbnz	r0, 8015afc <rmw_take_with_info+0x74>
 8015af6:	2001      	movs	r0, #1
 8015af8:	b009      	add	sp, #36	@ 0x24
 8015afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015afc:	68a9      	ldr	r1, [r5, #8]
 8015afe:	4668      	mov	r0, sp
 8015b00:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015b04:	3110      	adds	r1, #16
 8015b06:	f7f5 ffd9 	bl	800babc <ucdr_init_buffer>
 8015b0a:	69a3      	ldr	r3, [r4, #24]
 8015b0c:	4639      	mov	r1, r7
 8015b0e:	68db      	ldr	r3, [r3, #12]
 8015b10:	4668      	mov	r0, sp
 8015b12:	4798      	blx	r3
 8015b14:	4629      	mov	r1, r5
 8015b16:	4604      	mov	r4, r0
 8015b18:	4804      	ldr	r0, [pc, #16]	@ (8015b2c <rmw_take_with_info+0xa4>)
 8015b1a:	f7ff f889 	bl	8014c30 <put_memory>
 8015b1e:	e7dd      	b.n	8015adc <rmw_take_with_info+0x54>
 8015b20:	200c      	movs	r0, #12
 8015b22:	b009      	add	sp, #36	@ 0x24
 8015b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b26:	bf00      	nop
 8015b28:	0801ac34 	.word	0x0801ac34
 8015b2c:	2000e3ec 	.word	0x2000e3ec

08015b30 <rmw_uxrce_transport_init>:
 8015b30:	b508      	push	{r3, lr}
 8015b32:	b108      	cbz	r0, 8015b38 <rmw_uxrce_transport_init+0x8>
 8015b34:	f100 0210 	add.w	r2, r0, #16
 8015b38:	b139      	cbz	r1, 8015b4a <rmw_uxrce_transport_init+0x1a>
 8015b3a:	6949      	ldr	r1, [r1, #20]
 8015b3c:	4610      	mov	r0, r2
 8015b3e:	f000 fc25 	bl	801638c <uxr_init_custom_transport>
 8015b42:	f080 0001 	eor.w	r0, r0, #1
 8015b46:	b2c0      	uxtb	r0, r0
 8015b48:	bd08      	pop	{r3, pc}
 8015b4a:	4b04      	ldr	r3, [pc, #16]	@ (8015b5c <rmw_uxrce_transport_init+0x2c>)
 8015b4c:	4610      	mov	r0, r2
 8015b4e:	6859      	ldr	r1, [r3, #4]
 8015b50:	f000 fc1c 	bl	801638c <uxr_init_custom_transport>
 8015b54:	f080 0001 	eor.w	r0, r0, #1
 8015b58:	b2c0      	uxtb	r0, r0
 8015b5a:	bd08      	pop	{r3, pc}
 8015b5c:	20009ac4 	.word	0x20009ac4

08015b60 <rmw_wait>:
 8015b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b64:	b089      	sub	sp, #36	@ 0x24
 8015b66:	4605      	mov	r5, r0
 8015b68:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015b6a:	460e      	mov	r6, r1
 8015b6c:	4698      	mov	r8, r3
 8015b6e:	4691      	mov	r9, r2
 8015b70:	2a00      	cmp	r2, #0
 8015b72:	f000 810a 	beq.w	8015d8a <rmw_wait+0x22a>
 8015b76:	b16c      	cbz	r4, 8015b94 <rmw_wait+0x34>
 8015b78:	4bae      	ldr	r3, [pc, #696]	@ (8015e34 <rmw_wait+0x2d4>)
 8015b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015b7c:	af04      	add	r7, sp, #16
 8015b7e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015b82:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015b86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015b8a:	f7fe fe75 	bl	8014878 <rmw_time_equal>
 8015b8e:	2800      	cmp	r0, #0
 8015b90:	f000 8127 	beq.w	8015de2 <rmw_wait+0x282>
 8015b94:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015b98:	f7f7 fe02 	bl	800d7a0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015b9c:	4ba6      	ldr	r3, [pc, #664]	@ (8015e38 <rmw_wait+0x2d8>)
 8015b9e:	681c      	ldr	r4, [r3, #0]
 8015ba0:	b14c      	cbz	r4, 8015bb6 <rmw_wait+0x56>
 8015ba2:	4623      	mov	r3, r4
 8015ba4:	2100      	movs	r1, #0
 8015ba6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015baa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015bae:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d1f7      	bne.n	8015ba6 <rmw_wait+0x46>
 8015bb6:	f1b9 0f00 	cmp.w	r9, #0
 8015bba:	d011      	beq.n	8015be0 <rmw_wait+0x80>
 8015bbc:	f8d9 1000 	ldr.w	r1, [r9]
 8015bc0:	b171      	cbz	r1, 8015be0 <rmw_wait+0x80>
 8015bc2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	2001      	movs	r0, #1
 8015bca:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015bce:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015bd0:	6912      	ldr	r2, [r2, #16]
 8015bd2:	3301      	adds	r3, #1
 8015bd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015bd8:	4299      	cmp	r1, r3
 8015bda:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015bde:	d1f4      	bne.n	8015bca <rmw_wait+0x6a>
 8015be0:	f1b8 0f00 	cmp.w	r8, #0
 8015be4:	d011      	beq.n	8015c0a <rmw_wait+0xaa>
 8015be6:	f8d8 1000 	ldr.w	r1, [r8]
 8015bea:	b171      	cbz	r1, 8015c0a <rmw_wait+0xaa>
 8015bec:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	2001      	movs	r0, #1
 8015bf4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015bf8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015bfa:	6912      	ldr	r2, [r2, #16]
 8015bfc:	3301      	adds	r3, #1
 8015bfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015c02:	4299      	cmp	r1, r3
 8015c04:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015c08:	d1f4      	bne.n	8015bf4 <rmw_wait+0x94>
 8015c0a:	b185      	cbz	r5, 8015c2e <rmw_wait+0xce>
 8015c0c:	6829      	ldr	r1, [r5, #0]
 8015c0e:	b171      	cbz	r1, 8015c2e <rmw_wait+0xce>
 8015c10:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015c14:	2300      	movs	r3, #0
 8015c16:	2001      	movs	r0, #1
 8015c18:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015c1c:	6a12      	ldr	r2, [r2, #32]
 8015c1e:	6912      	ldr	r2, [r2, #16]
 8015c20:	3301      	adds	r3, #1
 8015c22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015c26:	4299      	cmp	r1, r3
 8015c28:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015c2c:	d1f4      	bne.n	8015c18 <rmw_wait+0xb8>
 8015c2e:	b34c      	cbz	r4, 8015c84 <rmw_wait+0x124>
 8015c30:	4622      	mov	r2, r4
 8015c32:	2300      	movs	r3, #0
 8015c34:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015c38:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015c3c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015c40:	440b      	add	r3, r1
 8015c42:	b2db      	uxtb	r3, r3
 8015c44:	2a00      	cmp	r2, #0
 8015c46:	d1f5      	bne.n	8015c34 <rmw_wait+0xd4>
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	f000 8084 	beq.w	8015d56 <rmw_wait+0x1f6>
 8015c4e:	1c7a      	adds	r2, r7, #1
 8015c50:	d00d      	beq.n	8015c6e <rmw_wait+0x10e>
 8015c52:	ee07 7a90 	vmov	s15, r7
 8015c56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015c5a:	ee07 3a90 	vmov	s15, r3
 8015c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015c66:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015c6a:	ee17 7a90 	vmov	r7, s15
 8015c6e:	68a0      	ldr	r0, [r4, #8]
 8015c70:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015c74:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	f040 8090 	bne.w	8015d9e <rmw_wait+0x23e>
 8015c7e:	6864      	ldr	r4, [r4, #4]
 8015c80:	2c00      	cmp	r4, #0
 8015c82:	d1f4      	bne.n	8015c6e <rmw_wait+0x10e>
 8015c84:	f1b9 0f00 	cmp.w	r9, #0
 8015c88:	f000 80bc 	beq.w	8015e04 <rmw_wait+0x2a4>
 8015c8c:	f8d9 7000 	ldr.w	r7, [r9]
 8015c90:	2f00      	cmp	r7, #0
 8015c92:	f000 808e 	beq.w	8015db2 <rmw_wait+0x252>
 8015c96:	2400      	movs	r4, #0
 8015c98:	4627      	mov	r7, r4
 8015c9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015c9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015ca2:	f7f7 fd55 	bl	800d750 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	d05f      	beq.n	8015d6a <rmw_wait+0x20a>
 8015caa:	f8d9 3000 	ldr.w	r3, [r9]
 8015cae:	3401      	adds	r4, #1
 8015cb0:	42a3      	cmp	r3, r4
 8015cb2:	f04f 0701 	mov.w	r7, #1
 8015cb6:	d8f0      	bhi.n	8015c9a <rmw_wait+0x13a>
 8015cb8:	f1b8 0f00 	cmp.w	r8, #0
 8015cbc:	d012      	beq.n	8015ce4 <rmw_wait+0x184>
 8015cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8015cc2:	b17b      	cbz	r3, 8015ce4 <rmw_wait+0x184>
 8015cc4:	2400      	movs	r4, #0
 8015cc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015cca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015cce:	f7f7 fd3f 	bl	800d750 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	d051      	beq.n	8015d7a <rmw_wait+0x21a>
 8015cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8015cda:	3401      	adds	r4, #1
 8015cdc:	42a3      	cmp	r3, r4
 8015cde:	f04f 0701 	mov.w	r7, #1
 8015ce2:	d8f0      	bhi.n	8015cc6 <rmw_wait+0x166>
 8015ce4:	b1dd      	cbz	r5, 8015d1e <rmw_wait+0x1be>
 8015ce6:	682b      	ldr	r3, [r5, #0]
 8015ce8:	b1cb      	cbz	r3, 8015d1e <rmw_wait+0x1be>
 8015cea:	2400      	movs	r4, #0
 8015cec:	686b      	ldr	r3, [r5, #4]
 8015cee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015cf2:	f7f7 fd2d 	bl	800d750 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015cf6:	b158      	cbz	r0, 8015d10 <rmw_wait+0x1b0>
 8015cf8:	682b      	ldr	r3, [r5, #0]
 8015cfa:	3401      	adds	r4, #1
 8015cfc:	42a3      	cmp	r3, r4
 8015cfe:	d969      	bls.n	8015dd4 <rmw_wait+0x274>
 8015d00:	686b      	ldr	r3, [r5, #4]
 8015d02:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015d06:	2701      	movs	r7, #1
 8015d08:	f7f7 fd22 	bl	800d750 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015d0c:	2800      	cmp	r0, #0
 8015d0e:	d1f3      	bne.n	8015cf8 <rmw_wait+0x198>
 8015d10:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015d14:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015d18:	3401      	adds	r4, #1
 8015d1a:	42a3      	cmp	r3, r4
 8015d1c:	d8e6      	bhi.n	8015cec <rmw_wait+0x18c>
 8015d1e:	b1a6      	cbz	r6, 8015d4a <rmw_wait+0x1ea>
 8015d20:	6834      	ldr	r4, [r6, #0]
 8015d22:	b194      	cbz	r4, 8015d4a <rmw_wait+0x1ea>
 8015d24:	2300      	movs	r3, #0
 8015d26:	461d      	mov	r5, r3
 8015d28:	e004      	b.n	8015d34 <rmw_wait+0x1d4>
 8015d2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015d2e:	3301      	adds	r3, #1
 8015d30:	42a3      	cmp	r3, r4
 8015d32:	d00a      	beq.n	8015d4a <rmw_wait+0x1ea>
 8015d34:	6870      	ldr	r0, [r6, #4]
 8015d36:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015d3a:	7c0a      	ldrb	r2, [r1, #16]
 8015d3c:	2a00      	cmp	r2, #0
 8015d3e:	d0f4      	beq.n	8015d2a <rmw_wait+0x1ca>
 8015d40:	3301      	adds	r3, #1
 8015d42:	42a3      	cmp	r3, r4
 8015d44:	740d      	strb	r5, [r1, #16]
 8015d46:	4617      	mov	r7, r2
 8015d48:	d1f4      	bne.n	8015d34 <rmw_wait+0x1d4>
 8015d4a:	2f00      	cmp	r7, #0
 8015d4c:	d03e      	beq.n	8015dcc <rmw_wait+0x26c>
 8015d4e:	2000      	movs	r0, #0
 8015d50:	b009      	add	sp, #36	@ 0x24
 8015d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d56:	68a0      	ldr	r0, [r4, #8]
 8015d58:	2100      	movs	r1, #0
 8015d5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d5e:	f7f9 fc51 	bl	800f604 <uxr_run_session_timeout>
 8015d62:	6864      	ldr	r4, [r4, #4]
 8015d64:	2c00      	cmp	r4, #0
 8015d66:	d1f6      	bne.n	8015d56 <rmw_wait+0x1f6>
 8015d68:	e78c      	b.n	8015c84 <rmw_wait+0x124>
 8015d6a:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015d6e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015d72:	3401      	adds	r4, #1
 8015d74:	42a3      	cmp	r3, r4
 8015d76:	d890      	bhi.n	8015c9a <rmw_wait+0x13a>
 8015d78:	e79e      	b.n	8015cb8 <rmw_wait+0x158>
 8015d7a:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015d7e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015d82:	3401      	adds	r4, #1
 8015d84:	429c      	cmp	r4, r3
 8015d86:	d39e      	bcc.n	8015cc6 <rmw_wait+0x166>
 8015d88:	e7ac      	b.n	8015ce4 <rmw_wait+0x184>
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	f47f aef3 	bne.w	8015b76 <rmw_wait+0x16>
 8015d90:	2800      	cmp	r0, #0
 8015d92:	f47f aef0 	bne.w	8015b76 <rmw_wait+0x16>
 8015d96:	2900      	cmp	r1, #0
 8015d98:	f47f aeed 	bne.w	8015b76 <rmw_wait+0x16>
 8015d9c:	e7d7      	b.n	8015d4e <rmw_wait+0x1ee>
 8015d9e:	4639      	mov	r1, r7
 8015da0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015da4:	f7f9 fc48 	bl	800f638 <uxr_run_session_until_data>
 8015da8:	6864      	ldr	r4, [r4, #4]
 8015daa:	2c00      	cmp	r4, #0
 8015dac:	f47f af5f 	bne.w	8015c6e <rmw_wait+0x10e>
 8015db0:	e768      	b.n	8015c84 <rmw_wait+0x124>
 8015db2:	f1b8 0f00 	cmp.w	r8, #0
 8015db6:	d032      	beq.n	8015e1e <rmw_wait+0x2be>
 8015db8:	f8d8 3000 	ldr.w	r3, [r8]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d181      	bne.n	8015cc4 <rmw_wait+0x164>
 8015dc0:	461f      	mov	r7, r3
 8015dc2:	2d00      	cmp	r5, #0
 8015dc4:	d18f      	bne.n	8015ce6 <rmw_wait+0x186>
 8015dc6:	462f      	mov	r7, r5
 8015dc8:	2e00      	cmp	r6, #0
 8015dca:	d1a9      	bne.n	8015d20 <rmw_wait+0x1c0>
 8015dcc:	2002      	movs	r0, #2
 8015dce:	b009      	add	sp, #36	@ 0x24
 8015dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015dd4:	2e00      	cmp	r6, #0
 8015dd6:	d0ba      	beq.n	8015d4e <rmw_wait+0x1ee>
 8015dd8:	6834      	ldr	r4, [r6, #0]
 8015dda:	2701      	movs	r7, #1
 8015ddc:	2c00      	cmp	r4, #0
 8015dde:	d1a1      	bne.n	8015d24 <rmw_wait+0x1c4>
 8015de0:	e7b5      	b.n	8015d4e <rmw_wait+0x1ee>
 8015de2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015de6:	f7fe fd9b 	bl	8014920 <rmw_time_total_nsec>
 8015dea:	2300      	movs	r3, #0
 8015dec:	4a13      	ldr	r2, [pc, #76]	@ (8015e3c <rmw_wait+0x2dc>)
 8015dee:	f7ea ff4d 	bl	8000c8c <__aeabi_uldivmod>
 8015df2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015df6:	f171 0300 	sbcs.w	r3, r1, #0
 8015dfa:	4607      	mov	r7, r0
 8015dfc:	bfa8      	it	ge
 8015dfe:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015e02:	e6c9      	b.n	8015b98 <rmw_wait+0x38>
 8015e04:	f1b8 0f00 	cmp.w	r8, #0
 8015e08:	d009      	beq.n	8015e1e <rmw_wait+0x2be>
 8015e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8015e0e:	464f      	mov	r7, r9
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	f47f af57 	bne.w	8015cc4 <rmw_wait+0x164>
 8015e16:	2d00      	cmp	r5, #0
 8015e18:	f47f af65 	bne.w	8015ce6 <rmw_wait+0x186>
 8015e1c:	e7d3      	b.n	8015dc6 <rmw_wait+0x266>
 8015e1e:	b17d      	cbz	r5, 8015e40 <rmw_wait+0x2e0>
 8015e20:	682b      	ldr	r3, [r5, #0]
 8015e22:	4647      	mov	r7, r8
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	f47f af60 	bne.w	8015cea <rmw_wait+0x18a>
 8015e2a:	2e00      	cmp	r6, #0
 8015e2c:	f47f af78 	bne.w	8015d20 <rmw_wait+0x1c0>
 8015e30:	e7cc      	b.n	8015dcc <rmw_wait+0x26c>
 8015e32:	bf00      	nop
 8015e34:	08019e48 	.word	0x08019e48
 8015e38:	2000e3dc 	.word	0x2000e3dc
 8015e3c:	000f4240 	.word	0x000f4240
 8015e40:	2e00      	cmp	r6, #0
 8015e42:	d0c3      	beq.n	8015dcc <rmw_wait+0x26c>
 8015e44:	6834      	ldr	r4, [r6, #0]
 8015e46:	462f      	mov	r7, r5
 8015e48:	2c00      	cmp	r4, #0
 8015e4a:	f47f af6b 	bne.w	8015d24 <rmw_wait+0x1c4>
 8015e4e:	e7bd      	b.n	8015dcc <rmw_wait+0x26c>

08015e50 <rmw_create_wait_set>:
 8015e50:	b508      	push	{r3, lr}
 8015e52:	4803      	ldr	r0, [pc, #12]	@ (8015e60 <rmw_create_wait_set+0x10>)
 8015e54:	f7fe fedc 	bl	8014c10 <get_memory>
 8015e58:	b108      	cbz	r0, 8015e5e <rmw_create_wait_set+0xe>
 8015e5a:	6880      	ldr	r0, [r0, #8]
 8015e5c:	3010      	adds	r0, #16
 8015e5e:	bd08      	pop	{r3, pc}
 8015e60:	2000e41c 	.word	0x2000e41c

08015e64 <rmw_destroy_wait_set>:
 8015e64:	b508      	push	{r3, lr}
 8015e66:	4b08      	ldr	r3, [pc, #32]	@ (8015e88 <rmw_destroy_wait_set+0x24>)
 8015e68:	6819      	ldr	r1, [r3, #0]
 8015e6a:	b911      	cbnz	r1, 8015e72 <rmw_destroy_wait_set+0xe>
 8015e6c:	e00a      	b.n	8015e84 <rmw_destroy_wait_set+0x20>
 8015e6e:	6849      	ldr	r1, [r1, #4]
 8015e70:	b141      	cbz	r1, 8015e84 <rmw_destroy_wait_set+0x20>
 8015e72:	688b      	ldr	r3, [r1, #8]
 8015e74:	3310      	adds	r3, #16
 8015e76:	4298      	cmp	r0, r3
 8015e78:	d1f9      	bne.n	8015e6e <rmw_destroy_wait_set+0xa>
 8015e7a:	4803      	ldr	r0, [pc, #12]	@ (8015e88 <rmw_destroy_wait_set+0x24>)
 8015e7c:	f7fe fed8 	bl	8014c30 <put_memory>
 8015e80:	2000      	movs	r0, #0
 8015e82:	bd08      	pop	{r3, pc}
 8015e84:	2001      	movs	r0, #1
 8015e86:	bd08      	pop	{r3, pc}
 8015e88:	2000e41c 	.word	0x2000e41c

08015e8c <rmw_uros_epoch_nanos>:
 8015e8c:	4b05      	ldr	r3, [pc, #20]	@ (8015ea4 <rmw_uros_epoch_nanos+0x18>)
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	b123      	cbz	r3, 8015e9c <rmw_uros_epoch_nanos+0x10>
 8015e92:	6898      	ldr	r0, [r3, #8]
 8015e94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e98:	f7f9 b824 	b.w	800eee4 <uxr_epoch_nanos>
 8015e9c:	2000      	movs	r0, #0
 8015e9e:	2100      	movs	r1, #0
 8015ea0:	4770      	bx	lr
 8015ea2:	bf00      	nop
 8015ea4:	2000e3dc 	.word	0x2000e3dc

08015ea8 <rosidl_runtime_c__String__init>:
 8015ea8:	b510      	push	{r4, lr}
 8015eaa:	4604      	mov	r4, r0
 8015eac:	b086      	sub	sp, #24
 8015eae:	b170      	cbz	r0, 8015ece <rosidl_runtime_c__String__init+0x26>
 8015eb0:	a801      	add	r0, sp, #4
 8015eb2:	f7f6 ffbf 	bl	800ce34 <rcutils_get_default_allocator>
 8015eb6:	9b01      	ldr	r3, [sp, #4]
 8015eb8:	9905      	ldr	r1, [sp, #20]
 8015eba:	2001      	movs	r0, #1
 8015ebc:	4798      	blx	r3
 8015ebe:	6020      	str	r0, [r4, #0]
 8015ec0:	b128      	cbz	r0, 8015ece <rosidl_runtime_c__String__init+0x26>
 8015ec2:	2100      	movs	r1, #0
 8015ec4:	2201      	movs	r2, #1
 8015ec6:	7001      	strb	r1, [r0, #0]
 8015ec8:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015ecc:	4610      	mov	r0, r2
 8015ece:	b006      	add	sp, #24
 8015ed0:	bd10      	pop	{r4, pc}
 8015ed2:	bf00      	nop

08015ed4 <rosidl_runtime_c__String__fini>:
 8015ed4:	b320      	cbz	r0, 8015f20 <rosidl_runtime_c__String__fini+0x4c>
 8015ed6:	b510      	push	{r4, lr}
 8015ed8:	6803      	ldr	r3, [r0, #0]
 8015eda:	b086      	sub	sp, #24
 8015edc:	4604      	mov	r4, r0
 8015ede:	b173      	cbz	r3, 8015efe <rosidl_runtime_c__String__fini+0x2a>
 8015ee0:	6883      	ldr	r3, [r0, #8]
 8015ee2:	b1f3      	cbz	r3, 8015f22 <rosidl_runtime_c__String__fini+0x4e>
 8015ee4:	a801      	add	r0, sp, #4
 8015ee6:	f7f6 ffa5 	bl	800ce34 <rcutils_get_default_allocator>
 8015eea:	9b02      	ldr	r3, [sp, #8]
 8015eec:	9905      	ldr	r1, [sp, #20]
 8015eee:	6820      	ldr	r0, [r4, #0]
 8015ef0:	4798      	blx	r3
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	e9c4 3300 	strd	r3, r3, [r4]
 8015ef8:	60a3      	str	r3, [r4, #8]
 8015efa:	b006      	add	sp, #24
 8015efc:	bd10      	pop	{r4, pc}
 8015efe:	6843      	ldr	r3, [r0, #4]
 8015f00:	b9db      	cbnz	r3, 8015f3a <rosidl_runtime_c__String__fini+0x66>
 8015f02:	6883      	ldr	r3, [r0, #8]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d0f8      	beq.n	8015efa <rosidl_runtime_c__String__fini+0x26>
 8015f08:	4b12      	ldr	r3, [pc, #72]	@ (8015f54 <rosidl_runtime_c__String__fini+0x80>)
 8015f0a:	4813      	ldr	r0, [pc, #76]	@ (8015f58 <rosidl_runtime_c__String__fini+0x84>)
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	2251      	movs	r2, #81	@ 0x51
 8015f10:	68db      	ldr	r3, [r3, #12]
 8015f12:	2101      	movs	r1, #1
 8015f14:	f002 fe24 	bl	8018b60 <fwrite>
 8015f18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f1c:	f002 fae0 	bl	80184e0 <exit>
 8015f20:	4770      	bx	lr
 8015f22:	4b0c      	ldr	r3, [pc, #48]	@ (8015f54 <rosidl_runtime_c__String__fini+0x80>)
 8015f24:	480d      	ldr	r0, [pc, #52]	@ (8015f5c <rosidl_runtime_c__String__fini+0x88>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	224c      	movs	r2, #76	@ 0x4c
 8015f2a:	68db      	ldr	r3, [r3, #12]
 8015f2c:	2101      	movs	r1, #1
 8015f2e:	f002 fe17 	bl	8018b60 <fwrite>
 8015f32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f36:	f002 fad3 	bl	80184e0 <exit>
 8015f3a:	4b06      	ldr	r3, [pc, #24]	@ (8015f54 <rosidl_runtime_c__String__fini+0x80>)
 8015f3c:	4808      	ldr	r0, [pc, #32]	@ (8015f60 <rosidl_runtime_c__String__fini+0x8c>)
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	224e      	movs	r2, #78	@ 0x4e
 8015f42:	68db      	ldr	r3, [r3, #12]
 8015f44:	2101      	movs	r1, #1
 8015f46:	f002 fe0b 	bl	8018b60 <fwrite>
 8015f4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f4e:	f002 fac7 	bl	80184e0 <exit>
 8015f52:	bf00      	nop
 8015f54:	20000a70 	.word	0x20000a70
 8015f58:	0801acd8 	.word	0x0801acd8
 8015f5c:	0801ac38 	.word	0x0801ac38
 8015f60:	0801ac88 	.word	0x0801ac88

08015f64 <sensor_msgs__msg__Imu__init>:
 8015f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f68:	4605      	mov	r5, r0
 8015f6a:	b3c0      	cbz	r0, 8015fde <sensor_msgs__msg__Imu__init+0x7a>
 8015f6c:	f000 f864 	bl	8016038 <std_msgs__msg__Header__init>
 8015f70:	4604      	mov	r4, r0
 8015f72:	b310      	cbz	r0, 8015fba <sensor_msgs__msg__Imu__init+0x56>
 8015f74:	f105 0618 	add.w	r6, r5, #24
 8015f78:	4630      	mov	r0, r6
 8015f7a:	f000 f8a9 	bl	80160d0 <geometry_msgs__msg__Quaternion__init>
 8015f7e:	4604      	mov	r4, r0
 8015f80:	2800      	cmp	r0, #0
 8015f82:	d040      	beq.n	8016006 <sensor_msgs__msg__Imu__init+0xa2>
 8015f84:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8015f88:	4638      	mov	r0, r7
 8015f8a:	f7f8 f81f 	bl	800dfcc <geometry_msgs__msg__Vector3__init>
 8015f8e:	4604      	mov	r4, r0
 8015f90:	b348      	cbz	r0, 8015fe6 <sensor_msgs__msg__Imu__init+0x82>
 8015f92:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8015f96:	4640      	mov	r0, r8
 8015f98:	f7f8 f818 	bl	800dfcc <geometry_msgs__msg__Vector3__init>
 8015f9c:	4604      	mov	r4, r0
 8015f9e:	b9d8      	cbnz	r0, 8015fd8 <sensor_msgs__msg__Imu__init+0x74>
 8015fa0:	4628      	mov	r0, r5
 8015fa2:	f000 f86d 	bl	8016080 <std_msgs__msg__Header__fini>
 8015fa6:	4630      	mov	r0, r6
 8015fa8:	f000 f8a6 	bl	80160f8 <geometry_msgs__msg__Quaternion__fini>
 8015fac:	4638      	mov	r0, r7
 8015fae:	f7f8 f811 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 8015fb2:	4640      	mov	r0, r8
 8015fb4:	f7f8 f80e 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 8015fb8:	e00e      	b.n	8015fd8 <sensor_msgs__msg__Imu__init+0x74>
 8015fba:	4628      	mov	r0, r5
 8015fbc:	f000 f860 	bl	8016080 <std_msgs__msg__Header__fini>
 8015fc0:	f105 0018 	add.w	r0, r5, #24
 8015fc4:	f000 f898 	bl	80160f8 <geometry_msgs__msg__Quaternion__fini>
 8015fc8:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8015fcc:	f7f8 f802 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 8015fd0:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8015fd4:	f7f7 fffe 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 8015fd8:	4620      	mov	r0, r4
 8015fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fde:	4604      	mov	r4, r0
 8015fe0:	4620      	mov	r0, r4
 8015fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fe6:	4628      	mov	r0, r5
 8015fe8:	f000 f84a 	bl	8016080 <std_msgs__msg__Header__fini>
 8015fec:	4630      	mov	r0, r6
 8015fee:	f000 f883 	bl	80160f8 <geometry_msgs__msg__Quaternion__fini>
 8015ff2:	4638      	mov	r0, r7
 8015ff4:	f7f7 ffee 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 8015ff8:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8015ffc:	f7f7 ffea 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 8016000:	4620      	mov	r0, r4
 8016002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016006:	4628      	mov	r0, r5
 8016008:	f000 f83a 	bl	8016080 <std_msgs__msg__Header__fini>
 801600c:	4630      	mov	r0, r6
 801600e:	e7d9      	b.n	8015fc4 <sensor_msgs__msg__Imu__init+0x60>

08016010 <sensor_msgs__msg__Imu__fini>:
 8016010:	b188      	cbz	r0, 8016036 <sensor_msgs__msg__Imu__fini+0x26>
 8016012:	b510      	push	{r4, lr}
 8016014:	4604      	mov	r4, r0
 8016016:	f000 f833 	bl	8016080 <std_msgs__msg__Header__fini>
 801601a:	f104 0018 	add.w	r0, r4, #24
 801601e:	f000 f86b 	bl	80160f8 <geometry_msgs__msg__Quaternion__fini>
 8016022:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8016026:	f7f7 ffd5 	bl	800dfd4 <geometry_msgs__msg__Vector3__fini>
 801602a:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801602e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016032:	f7f7 bfcf 	b.w	800dfd4 <geometry_msgs__msg__Vector3__fini>
 8016036:	4770      	bx	lr

08016038 <std_msgs__msg__Header__init>:
 8016038:	b570      	push	{r4, r5, r6, lr}
 801603a:	4605      	mov	r5, r0
 801603c:	b1a8      	cbz	r0, 801606a <std_msgs__msg__Header__init+0x32>
 801603e:	f000 f82b 	bl	8016098 <builtin_interfaces__msg__Time__init>
 8016042:	4604      	mov	r4, r0
 8016044:	b140      	cbz	r0, 8016058 <std_msgs__msg__Header__init+0x20>
 8016046:	f105 0608 	add.w	r6, r5, #8
 801604a:	4630      	mov	r0, r6
 801604c:	f7ff ff2c 	bl	8015ea8 <rosidl_runtime_c__String__init>
 8016050:	4604      	mov	r4, r0
 8016052:	b168      	cbz	r0, 8016070 <std_msgs__msg__Header__init+0x38>
 8016054:	4620      	mov	r0, r4
 8016056:	bd70      	pop	{r4, r5, r6, pc}
 8016058:	4628      	mov	r0, r5
 801605a:	f000 f821 	bl	80160a0 <builtin_interfaces__msg__Time__fini>
 801605e:	f105 0008 	add.w	r0, r5, #8
 8016062:	f7ff ff37 	bl	8015ed4 <rosidl_runtime_c__String__fini>
 8016066:	4620      	mov	r0, r4
 8016068:	bd70      	pop	{r4, r5, r6, pc}
 801606a:	4604      	mov	r4, r0
 801606c:	4620      	mov	r0, r4
 801606e:	bd70      	pop	{r4, r5, r6, pc}
 8016070:	4628      	mov	r0, r5
 8016072:	f000 f815 	bl	80160a0 <builtin_interfaces__msg__Time__fini>
 8016076:	4630      	mov	r0, r6
 8016078:	f7ff ff2c 	bl	8015ed4 <rosidl_runtime_c__String__fini>
 801607c:	e7ea      	b.n	8016054 <std_msgs__msg__Header__init+0x1c>
 801607e:	bf00      	nop

08016080 <std_msgs__msg__Header__fini>:
 8016080:	b148      	cbz	r0, 8016096 <std_msgs__msg__Header__fini+0x16>
 8016082:	b510      	push	{r4, lr}
 8016084:	4604      	mov	r4, r0
 8016086:	f000 f80b 	bl	80160a0 <builtin_interfaces__msg__Time__fini>
 801608a:	f104 0008 	add.w	r0, r4, #8
 801608e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016092:	f7ff bf1f 	b.w	8015ed4 <rosidl_runtime_c__String__fini>
 8016096:	4770      	bx	lr

08016098 <builtin_interfaces__msg__Time__init>:
 8016098:	3800      	subs	r0, #0
 801609a:	bf18      	it	ne
 801609c:	2001      	movne	r0, #1
 801609e:	4770      	bx	lr

080160a0 <builtin_interfaces__msg__Time__fini>:
 80160a0:	4770      	bx	lr
 80160a2:	bf00      	nop

080160a4 <geometry_msgs__msg__PoseWithCovariance__init>:
 80160a4:	b538      	push	{r3, r4, r5, lr}
 80160a6:	4604      	mov	r4, r0
 80160a8:	b128      	cbz	r0, 80160b6 <geometry_msgs__msg__PoseWithCovariance__init+0x12>
 80160aa:	f002 f925 	bl	80182f8 <geometry_msgs__msg__Pose__init>
 80160ae:	4605      	mov	r5, r0
 80160b0:	b120      	cbz	r0, 80160bc <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 80160b2:	4628      	mov	r0, r5
 80160b4:	bd38      	pop	{r3, r4, r5, pc}
 80160b6:	4605      	mov	r5, r0
 80160b8:	4628      	mov	r0, r5
 80160ba:	bd38      	pop	{r3, r4, r5, pc}
 80160bc:	4620      	mov	r0, r4
 80160be:	f002 f93f 	bl	8018340 <geometry_msgs__msg__Pose__fini>
 80160c2:	4628      	mov	r0, r5
 80160c4:	bd38      	pop	{r3, r4, r5, pc}
 80160c6:	bf00      	nop

080160c8 <geometry_msgs__msg__PoseWithCovariance__fini>:
 80160c8:	b108      	cbz	r0, 80160ce <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 80160ca:	f002 b939 	b.w	8018340 <geometry_msgs__msg__Pose__fini>
 80160ce:	4770      	bx	lr

080160d0 <geometry_msgs__msg__Quaternion__init>:
 80160d0:	b160      	cbz	r0, 80160ec <geometry_msgs__msg__Quaternion__init+0x1c>
 80160d2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80160f0 <geometry_msgs__msg__Quaternion__init+0x20>
 80160d6:	2200      	movs	r2, #0
 80160d8:	2300      	movs	r3, #0
 80160da:	e9c0 2300 	strd	r2, r3, [r0]
 80160de:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80160e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80160e6:	ed80 7b06 	vstr	d7, [r0, #24]
 80160ea:	2001      	movs	r0, #1
 80160ec:	4770      	bx	lr
 80160ee:	bf00      	nop
 80160f0:	00000000 	.word	0x00000000
 80160f4:	3ff00000 	.word	0x3ff00000

080160f8 <geometry_msgs__msg__Quaternion__fini>:
 80160f8:	4770      	bx	lr
 80160fa:	bf00      	nop

080160fc <geometry_msgs__msg__TwistWithCovariance__init>:
 80160fc:	b538      	push	{r3, r4, r5, lr}
 80160fe:	4604      	mov	r4, r0
 8016100:	b128      	cbz	r0, 801610e <geometry_msgs__msg__TwistWithCovariance__init+0x12>
 8016102:	f7f7 ff33 	bl	800df6c <geometry_msgs__msg__Twist__init>
 8016106:	4605      	mov	r5, r0
 8016108:	b120      	cbz	r0, 8016114 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 801610a:	4628      	mov	r0, r5
 801610c:	bd38      	pop	{r3, r4, r5, pc}
 801610e:	4605      	mov	r5, r0
 8016110:	4628      	mov	r0, r5
 8016112:	bd38      	pop	{r3, r4, r5, pc}
 8016114:	4620      	mov	r0, r4
 8016116:	f7f7 ff4d 	bl	800dfb4 <geometry_msgs__msg__Twist__fini>
 801611a:	4628      	mov	r0, r5
 801611c:	bd38      	pop	{r3, r4, r5, pc}
 801611e:	bf00      	nop

08016120 <geometry_msgs__msg__TwistWithCovariance__fini>:
 8016120:	b108      	cbz	r0, 8016126 <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 8016122:	f7f7 bf47 	b.w	800dfb4 <geometry_msgs__msg__Twist__fini>
 8016126:	4770      	bx	lr

08016128 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 8016128:	f002 b8e6 	b.w	80182f8 <geometry_msgs__msg__Pose__init>

0801612c <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 801612c:	f002 b908 	b.w	8018340 <geometry_msgs__msg__Pose__fini>

08016130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8016130:	b510      	push	{r4, lr}
 8016132:	f002 f915 	bl	8018360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8016136:	4c07      	ldr	r4, [pc, #28]	@ (8016154 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 8016138:	60e0      	str	r0, [r4, #12]
 801613a:	f7f7 ff85 	bl	800e048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801613e:	4b06      	ldr	r3, [pc, #24]	@ (8016158 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8016140:	64a0      	str	r0, [r4, #72]	@ 0x48
 8016142:	681a      	ldr	r2, [r3, #0]
 8016144:	b10a      	cbz	r2, 801614a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 8016146:	4804      	ldr	r0, [pc, #16]	@ (8016158 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8016148:	bd10      	pop	{r4, pc}
 801614a:	4a04      	ldr	r2, [pc, #16]	@ (801615c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 801614c:	4802      	ldr	r0, [pc, #8]	@ (8016158 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 801614e:	6812      	ldr	r2, [r2, #0]
 8016150:	601a      	str	r2, [r3, #0]
 8016152:	bd10      	pop	{r4, pc}
 8016154:	200008d0 	.word	0x200008d0
 8016158:	20000948 	.word	0x20000948
 801615c:	2000030c 	.word	0x2000030c

08016160 <get_serialized_size_geometry_msgs__msg__Pose>:
 8016160:	b570      	push	{r4, r5, r6, lr}
 8016162:	4604      	mov	r4, r0
 8016164:	b148      	cbz	r0, 801617a <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 8016166:	460d      	mov	r5, r1
 8016168:	f002 f908 	bl	801837c <get_serialized_size_geometry_msgs__msg__Point>
 801616c:	4606      	mov	r6, r0
 801616e:	1829      	adds	r1, r5, r0
 8016170:	f104 0018 	add.w	r0, r4, #24
 8016174:	f7f8 f81a 	bl	800e1ac <get_serialized_size_geometry_msgs__msg__Quaternion>
 8016178:	4430      	add	r0, r6
 801617a:	bd70      	pop	{r4, r5, r6, pc}

0801617c <_Pose__cdr_deserialize>:
 801617c:	b570      	push	{r4, r5, r6, lr}
 801617e:	460c      	mov	r4, r1
 8016180:	b189      	cbz	r1, 80161a6 <_Pose__cdr_deserialize+0x2a>
 8016182:	4605      	mov	r5, r0
 8016184:	f002 f986 	bl	8018494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8016188:	6843      	ldr	r3, [r0, #4]
 801618a:	4621      	mov	r1, r4
 801618c:	68db      	ldr	r3, [r3, #12]
 801618e:	4628      	mov	r0, r5
 8016190:	4798      	blx	r3
 8016192:	f7f8 f8bf 	bl	800e314 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8016196:	6843      	ldr	r3, [r0, #4]
 8016198:	f104 0118 	add.w	r1, r4, #24
 801619c:	4628      	mov	r0, r5
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161a4:	4718      	bx	r3
 80161a6:	4608      	mov	r0, r1
 80161a8:	bd70      	pop	{r4, r5, r6, pc}
 80161aa:	bf00      	nop

080161ac <_Pose__cdr_serialize>:
 80161ac:	b510      	push	{r4, lr}
 80161ae:	b082      	sub	sp, #8
 80161b0:	9101      	str	r1, [sp, #4]
 80161b2:	b190      	cbz	r0, 80161da <_Pose__cdr_serialize+0x2e>
 80161b4:	4604      	mov	r4, r0
 80161b6:	f002 f96d 	bl	8018494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80161ba:	6843      	ldr	r3, [r0, #4]
 80161bc:	9901      	ldr	r1, [sp, #4]
 80161be:	689b      	ldr	r3, [r3, #8]
 80161c0:	4620      	mov	r0, r4
 80161c2:	4798      	blx	r3
 80161c4:	f7f8 f8a6 	bl	800e314 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80161c8:	6843      	ldr	r3, [r0, #4]
 80161ca:	9901      	ldr	r1, [sp, #4]
 80161cc:	689b      	ldr	r3, [r3, #8]
 80161ce:	f104 0018 	add.w	r0, r4, #24
 80161d2:	b002      	add	sp, #8
 80161d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161d8:	4718      	bx	r3
 80161da:	b002      	add	sp, #8
 80161dc:	bd10      	pop	{r4, pc}
 80161de:	bf00      	nop

080161e0 <_Pose__get_serialized_size>:
 80161e0:	b538      	push	{r3, r4, r5, lr}
 80161e2:	4604      	mov	r4, r0
 80161e4:	b148      	cbz	r0, 80161fa <_Pose__get_serialized_size+0x1a>
 80161e6:	2100      	movs	r1, #0
 80161e8:	f002 f8c8 	bl	801837c <get_serialized_size_geometry_msgs__msg__Point>
 80161ec:	4605      	mov	r5, r0
 80161ee:	4601      	mov	r1, r0
 80161f0:	f104 0018 	add.w	r0, r4, #24
 80161f4:	f7f7 ffda 	bl	800e1ac <get_serialized_size_geometry_msgs__msg__Quaternion>
 80161f8:	4428      	add	r0, r5
 80161fa:	bd38      	pop	{r3, r4, r5, pc}

080161fc <_Pose__max_serialized_size>:
 80161fc:	b510      	push	{r4, lr}
 80161fe:	b082      	sub	sp, #8
 8016200:	2301      	movs	r3, #1
 8016202:	2100      	movs	r1, #0
 8016204:	f10d 0007 	add.w	r0, sp, #7
 8016208:	f88d 3007 	strb.w	r3, [sp, #7]
 801620c:	f002 f926 	bl	801845c <max_serialized_size_geometry_msgs__msg__Point>
 8016210:	4604      	mov	r4, r0
 8016212:	4601      	mov	r1, r0
 8016214:	f10d 0007 	add.w	r0, sp, #7
 8016218:	f7f8 f85a 	bl	800e2d0 <max_serialized_size_geometry_msgs__msg__Quaternion>
 801621c:	4420      	add	r0, r4
 801621e:	b002      	add	sp, #8
 8016220:	bd10      	pop	{r4, pc}
 8016222:	bf00      	nop

08016224 <max_serialized_size_geometry_msgs__msg__Pose>:
 8016224:	2301      	movs	r3, #1
 8016226:	b570      	push	{r4, r5, r6, lr}
 8016228:	7003      	strb	r3, [r0, #0]
 801622a:	4605      	mov	r5, r0
 801622c:	460e      	mov	r6, r1
 801622e:	f002 f915 	bl	801845c <max_serialized_size_geometry_msgs__msg__Point>
 8016232:	4604      	mov	r4, r0
 8016234:	1831      	adds	r1, r6, r0
 8016236:	4628      	mov	r0, r5
 8016238:	f7f8 f84a 	bl	800e2d0 <max_serialized_size_geometry_msgs__msg__Quaternion>
 801623c:	4420      	add	r0, r4
 801623e:	bd70      	pop	{r4, r5, r6, pc}

08016240 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8016240:	4800      	ldr	r0, [pc, #0]	@ (8016244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8016242:	4770      	bx	lr
 8016244:	20000954 	.word	0x20000954

08016248 <ucdr_serialize_string>:
 8016248:	b510      	push	{r4, lr}
 801624a:	b082      	sub	sp, #8
 801624c:	4604      	mov	r4, r0
 801624e:	4608      	mov	r0, r1
 8016250:	9101      	str	r1, [sp, #4]
 8016252:	f7e9 ffcf 	bl	80001f4 <strlen>
 8016256:	9901      	ldr	r1, [sp, #4]
 8016258:	1c42      	adds	r2, r0, #1
 801625a:	4620      	mov	r0, r4
 801625c:	b002      	add	sp, #8
 801625e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016262:	f7f8 baa1 	b.w	800e7a8 <ucdr_serialize_sequence_char>
 8016266:	bf00      	nop

08016268 <ucdr_deserialize_string>:
 8016268:	b500      	push	{lr}
 801626a:	b083      	sub	sp, #12
 801626c:	ab01      	add	r3, sp, #4
 801626e:	f7f8 faad 	bl	800e7cc <ucdr_deserialize_sequence_char>
 8016272:	b003      	add	sp, #12
 8016274:	f85d fb04 	ldr.w	pc, [sp], #4

08016278 <get_custom_error>:
 8016278:	4b01      	ldr	r3, [pc, #4]	@ (8016280 <get_custom_error+0x8>)
 801627a:	7818      	ldrb	r0, [r3, #0]
 801627c:	4770      	bx	lr
 801627e:	bf00      	nop
 8016280:	2000e598 	.word	0x2000e598

08016284 <recv_custom_msg>:
 8016284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016288:	4693      	mov	fp, r2
 801628a:	b089      	sub	sp, #36	@ 0x24
 801628c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8016290:	9305      	str	r3, [sp, #20]
 8016292:	468a      	mov	sl, r1
 8016294:	2100      	movs	r1, #0
 8016296:	4604      	mov	r4, r0
 8016298:	f88d 101e 	strb.w	r1, [sp, #30]
 801629c:	b322      	cbz	r2, 80162e8 <recv_custom_msg+0x64>
 801629e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80162a2:	f10d 081f 	add.w	r8, sp, #31
 80162a6:	af05      	add	r7, sp, #20
 80162a8:	f10d 061e 	add.w	r6, sp, #30
 80162ac:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80162b0:	e002      	b.n	80162b8 <recv_custom_msg+0x34>
 80162b2:	9b05      	ldr	r3, [sp, #20]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	dd0f      	ble.n	80162d8 <recv_custom_msg+0x54>
 80162b8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80162bc:	4623      	mov	r3, r4
 80162be:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80162c2:	e9cd 5600 	strd	r5, r6, [sp]
 80162c6:	4622      	mov	r2, r4
 80162c8:	4648      	mov	r0, r9
 80162ca:	f001 f92d 	bl	8017528 <uxr_read_framed_msg>
 80162ce:	2800      	cmp	r0, #0
 80162d0:	d0ef      	beq.n	80162b2 <recv_custom_msg+0x2e>
 80162d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80162d6:	b1b3      	cbz	r3, 8016306 <recv_custom_msg+0x82>
 80162d8:	4b0f      	ldr	r3, [pc, #60]	@ (8016318 <recv_custom_msg+0x94>)
 80162da:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80162de:	701a      	strb	r2, [r3, #0]
 80162e0:	2000      	movs	r0, #0
 80162e2:	b009      	add	sp, #36	@ 0x24
 80162e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162e8:	f10d 021f 	add.w	r2, sp, #31
 80162ec:	9200      	str	r2, [sp, #0]
 80162ee:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80162f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80162f6:	4601      	mov	r1, r0
 80162f8:	47a8      	blx	r5
 80162fa:	2800      	cmp	r0, #0
 80162fc:	d0ec      	beq.n	80162d8 <recv_custom_msg+0x54>
 80162fe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d1e8      	bne.n	80162d8 <recv_custom_msg+0x54>
 8016306:	f8cb 0000 	str.w	r0, [fp]
 801630a:	2001      	movs	r0, #1
 801630c:	f8ca 4000 	str.w	r4, [sl]
 8016310:	b009      	add	sp, #36	@ 0x24
 8016312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016316:	bf00      	nop
 8016318:	2000e598 	.word	0x2000e598

0801631c <send_custom_msg>:
 801631c:	b530      	push	{r4, r5, lr}
 801631e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8016322:	b087      	sub	sp, #28
 8016324:	4615      	mov	r5, r2
 8016326:	b974      	cbnz	r4, 8016346 <send_custom_msg+0x2a>
 8016328:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 801632c:	f10d 0317 	add.w	r3, sp, #23
 8016330:	47a0      	blx	r4
 8016332:	b108      	cbz	r0, 8016338 <send_custom_msg+0x1c>
 8016334:	42a8      	cmp	r0, r5
 8016336:	d015      	beq.n	8016364 <send_custom_msg+0x48>
 8016338:	4b0c      	ldr	r3, [pc, #48]	@ (801636c <send_custom_msg+0x50>)
 801633a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801633e:	701a      	strb	r2, [r3, #0]
 8016340:	2000      	movs	r0, #0
 8016342:	b007      	add	sp, #28
 8016344:	bd30      	pop	{r4, r5, pc}
 8016346:	460b      	mov	r3, r1
 8016348:	2200      	movs	r2, #0
 801634a:	f10d 0117 	add.w	r1, sp, #23
 801634e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8016352:	4602      	mov	r2, r0
 8016354:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8016358:	9500      	str	r5, [sp, #0]
 801635a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801635e:	f000 feeb 	bl	8017138 <uxr_write_framed_msg>
 8016362:	e7e6      	b.n	8016332 <send_custom_msg+0x16>
 8016364:	2001      	movs	r0, #1
 8016366:	b007      	add	sp, #28
 8016368:	bd30      	pop	{r4, r5, pc}
 801636a:	bf00      	nop
 801636c:	2000e598 	.word	0x2000e598

08016370 <uxr_set_custom_transport_callbacks>:
 8016370:	b410      	push	{r4}
 8016372:	9c01      	ldr	r4, [sp, #4]
 8016374:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8016378:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801637c:	9b02      	ldr	r3, [sp, #8]
 801637e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8016382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016386:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801638a:	4770      	bx	lr

0801638c <uxr_init_custom_transport>:
 801638c:	b538      	push	{r3, r4, r5, lr}
 801638e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8016392:	b303      	cbz	r3, 80163d6 <uxr_init_custom_transport+0x4a>
 8016394:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8016398:	4604      	mov	r4, r0
 801639a:	b1e2      	cbz	r2, 80163d6 <uxr_init_custom_transport+0x4a>
 801639c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80163a0:	b1ca      	cbz	r2, 80163d6 <uxr_init_custom_transport+0x4a>
 80163a2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80163a6:	b1b2      	cbz	r2, 80163d6 <uxr_init_custom_transport+0x4a>
 80163a8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80163ac:	4798      	blx	r3
 80163ae:	4605      	mov	r5, r0
 80163b0:	b188      	cbz	r0, 80163d6 <uxr_init_custom_transport+0x4a>
 80163b2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80163b6:	b98b      	cbnz	r3, 80163dc <uxr_init_custom_transport+0x50>
 80163b8:	490b      	ldr	r1, [pc, #44]	@ (80163e8 <uxr_init_custom_transport+0x5c>)
 80163ba:	4b0c      	ldr	r3, [pc, #48]	@ (80163ec <uxr_init_custom_transport+0x60>)
 80163bc:	4a0c      	ldr	r2, [pc, #48]	@ (80163f0 <uxr_init_custom_transport+0x64>)
 80163be:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80163c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80163c6:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80163ca:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80163ce:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80163d2:	4628      	mov	r0, r5
 80163d4:	bd38      	pop	{r3, r4, r5, pc}
 80163d6:	2500      	movs	r5, #0
 80163d8:	4628      	mov	r0, r5
 80163da:	bd38      	pop	{r3, r4, r5, pc}
 80163dc:	2100      	movs	r1, #0
 80163de:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80163e2:	f000 fea3 	bl	801712c <uxr_init_framing_io>
 80163e6:	e7e7      	b.n	80163b8 <uxr_init_custom_transport+0x2c>
 80163e8:	0801631d 	.word	0x0801631d
 80163ec:	08016285 	.word	0x08016285
 80163f0:	08016279 	.word	0x08016279

080163f4 <uxr_close_custom_transport>:
 80163f4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80163f8:	4718      	bx	r3
 80163fa:	bf00      	nop

080163fc <uxr_init_input_best_effort_stream>:
 80163fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016400:	8003      	strh	r3, [r0, #0]
 8016402:	4770      	bx	lr

08016404 <uxr_reset_input_best_effort_stream>:
 8016404:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016408:	8003      	strh	r3, [r0, #0]
 801640a:	4770      	bx	lr

0801640c <uxr_receive_best_effort_message>:
 801640c:	b538      	push	{r3, r4, r5, lr}
 801640e:	4604      	mov	r4, r0
 8016410:	8800      	ldrh	r0, [r0, #0]
 8016412:	460d      	mov	r5, r1
 8016414:	f000 fe72 	bl	80170fc <uxr_seq_num_cmp>
 8016418:	4603      	mov	r3, r0
 801641a:	2b00      	cmp	r3, #0
 801641c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016420:	bfb8      	it	lt
 8016422:	8025      	strhlt	r5, [r4, #0]
 8016424:	bd38      	pop	{r3, r4, r5, pc}
 8016426:	bf00      	nop

08016428 <on_full_input_buffer>:
 8016428:	b570      	push	{r4, r5, r6, lr}
 801642a:	4605      	mov	r5, r0
 801642c:	460c      	mov	r4, r1
 801642e:	682b      	ldr	r3, [r5, #0]
 8016430:	6809      	ldr	r1, [r1, #0]
 8016432:	8920      	ldrh	r0, [r4, #8]
 8016434:	6862      	ldr	r2, [r4, #4]
 8016436:	fbb2 f2f0 	udiv	r2, r2, r0
 801643a:	eba3 0c01 	sub.w	ip, r3, r1
 801643e:	fbbc fcf2 	udiv	ip, ip, r2
 8016442:	f10c 0c01 	add.w	ip, ip, #1
 8016446:	fa1f f38c 	uxth.w	r3, ip
 801644a:	fbb3 f6f0 	udiv	r6, r3, r0
 801644e:	fb00 3316 	mls	r3, r0, r6, r3
 8016452:	b29b      	uxth	r3, r3
 8016454:	fb02 f303 	mul.w	r3, r2, r3
 8016458:	1d18      	adds	r0, r3, #4
 801645a:	4408      	add	r0, r1
 801645c:	7d26      	ldrb	r6, [r4, #20]
 801645e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016462:	b116      	cbz	r6, 801646a <on_full_input_buffer+0x42>
 8016464:	2600      	movs	r6, #0
 8016466:	f840 6c04 	str.w	r6, [r0, #-4]
 801646a:	2a03      	cmp	r2, #3
 801646c:	d801      	bhi.n	8016472 <on_full_input_buffer+0x4a>
 801646e:	2001      	movs	r0, #1
 8016470:	bd70      	pop	{r4, r5, r6, pc}
 8016472:	3308      	adds	r3, #8
 8016474:	4419      	add	r1, r3
 8016476:	4628      	mov	r0, r5
 8016478:	692b      	ldr	r3, [r5, #16]
 801647a:	3a04      	subs	r2, #4
 801647c:	f7f5 fb16 	bl	800baac <ucdr_init_buffer_origin>
 8016480:	4628      	mov	r0, r5
 8016482:	4903      	ldr	r1, [pc, #12]	@ (8016490 <on_full_input_buffer+0x68>)
 8016484:	4622      	mov	r2, r4
 8016486:	f7f5 faed 	bl	800ba64 <ucdr_set_on_full_buffer_callback>
 801648a:	2000      	movs	r0, #0
 801648c:	bd70      	pop	{r4, r5, r6, pc}
 801648e:	bf00      	nop
 8016490:	08016429 	.word	0x08016429

08016494 <uxr_init_input_reliable_stream>:
 8016494:	b500      	push	{lr}
 8016496:	e9c0 1200 	strd	r1, r2, [r0]
 801649a:	f04f 0e00 	mov.w	lr, #0
 801649e:	9a01      	ldr	r2, [sp, #4]
 80164a0:	8103      	strh	r3, [r0, #8]
 80164a2:	6102      	str	r2, [r0, #16]
 80164a4:	f880 e014 	strb.w	lr, [r0, #20]
 80164a8:	b1d3      	cbz	r3, 80164e0 <uxr_init_input_reliable_stream+0x4c>
 80164aa:	f8c1 e000 	str.w	lr, [r1]
 80164ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80164b2:	f1bc 0f01 	cmp.w	ip, #1
 80164b6:	d913      	bls.n	80164e0 <uxr_init_input_reliable_stream+0x4c>
 80164b8:	2301      	movs	r3, #1
 80164ba:	fbb3 f1fc 	udiv	r1, r3, ip
 80164be:	fb0c 3111 	mls	r1, ip, r1, r3
 80164c2:	b289      	uxth	r1, r1
 80164c4:	6842      	ldr	r2, [r0, #4]
 80164c6:	fbb2 f2fc 	udiv	r2, r2, ip
 80164ca:	fb01 f202 	mul.w	r2, r1, r2
 80164ce:	6801      	ldr	r1, [r0, #0]
 80164d0:	f841 e002 	str.w	lr, [r1, r2]
 80164d4:	3301      	adds	r3, #1
 80164d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80164da:	b29b      	uxth	r3, r3
 80164dc:	459c      	cmp	ip, r3
 80164de:	d8ec      	bhi.n	80164ba <uxr_init_input_reliable_stream+0x26>
 80164e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164e4:	60c3      	str	r3, [r0, #12]
 80164e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80164ea:	bf00      	nop

080164ec <uxr_reset_input_reliable_stream>:
 80164ec:	8901      	ldrh	r1, [r0, #8]
 80164ee:	b1e9      	cbz	r1, 801652c <uxr_reset_input_reliable_stream+0x40>
 80164f0:	f04f 0c00 	mov.w	ip, #0
 80164f4:	b500      	push	{lr}
 80164f6:	4663      	mov	r3, ip
 80164f8:	46e6      	mov	lr, ip
 80164fa:	fbb3 f2f1 	udiv	r2, r3, r1
 80164fe:	fb01 3312 	mls	r3, r1, r2, r3
 8016502:	b29b      	uxth	r3, r3
 8016504:	6842      	ldr	r2, [r0, #4]
 8016506:	fbb2 f2f1 	udiv	r2, r2, r1
 801650a:	fb02 f303 	mul.w	r3, r2, r3
 801650e:	6802      	ldr	r2, [r0, #0]
 8016510:	f842 e003 	str.w	lr, [r2, r3]
 8016514:	f10c 0c01 	add.w	ip, ip, #1
 8016518:	8901      	ldrh	r1, [r0, #8]
 801651a:	fa1f f38c 	uxth.w	r3, ip
 801651e:	4299      	cmp	r1, r3
 8016520:	d8eb      	bhi.n	80164fa <uxr_reset_input_reliable_stream+0xe>
 8016522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016526:	60c3      	str	r3, [r0, #12]
 8016528:	f85d fb04 	ldr.w	pc, [sp], #4
 801652c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016530:	60c3      	str	r3, [r0, #12]
 8016532:	4770      	bx	lr

08016534 <uxr_receive_reliable_message>:
 8016534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016538:	4604      	mov	r4, r0
 801653a:	460d      	mov	r5, r1
 801653c:	8901      	ldrh	r1, [r0, #8]
 801653e:	8980      	ldrh	r0, [r0, #12]
 8016540:	4690      	mov	r8, r2
 8016542:	461f      	mov	r7, r3
 8016544:	f000 fdd2 	bl	80170ec <uxr_seq_num_add>
 8016548:	4629      	mov	r1, r5
 801654a:	4606      	mov	r6, r0
 801654c:	89a0      	ldrh	r0, [r4, #12]
 801654e:	f000 fdd5 	bl	80170fc <uxr_seq_num_cmp>
 8016552:	2800      	cmp	r0, #0
 8016554:	db0a      	blt.n	801656c <uxr_receive_reliable_message+0x38>
 8016556:	2600      	movs	r6, #0
 8016558:	89e0      	ldrh	r0, [r4, #14]
 801655a:	4629      	mov	r1, r5
 801655c:	f000 fdce 	bl	80170fc <uxr_seq_num_cmp>
 8016560:	2800      	cmp	r0, #0
 8016562:	da00      	bge.n	8016566 <uxr_receive_reliable_message+0x32>
 8016564:	81e5      	strh	r5, [r4, #14]
 8016566:	4630      	mov	r0, r6
 8016568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801656c:	4630      	mov	r0, r6
 801656e:	4629      	mov	r1, r5
 8016570:	f000 fdc4 	bl	80170fc <uxr_seq_num_cmp>
 8016574:	2800      	cmp	r0, #0
 8016576:	dbee      	blt.n	8016556 <uxr_receive_reliable_message+0x22>
 8016578:	6923      	ldr	r3, [r4, #16]
 801657a:	4640      	mov	r0, r8
 801657c:	4798      	blx	r3
 801657e:	2101      	movs	r1, #1
 8016580:	4681      	mov	r9, r0
 8016582:	89a0      	ldrh	r0, [r4, #12]
 8016584:	f000 fdb2 	bl	80170ec <uxr_seq_num_add>
 8016588:	f1b9 0f00 	cmp.w	r9, #0
 801658c:	d101      	bne.n	8016592 <uxr_receive_reliable_message+0x5e>
 801658e:	4285      	cmp	r5, r0
 8016590:	d047      	beq.n	8016622 <uxr_receive_reliable_message+0xee>
 8016592:	8922      	ldrh	r2, [r4, #8]
 8016594:	fbb5 f0f2 	udiv	r0, r5, r2
 8016598:	fb02 5010 	mls	r0, r2, r0, r5
 801659c:	b280      	uxth	r0, r0
 801659e:	6863      	ldr	r3, [r4, #4]
 80165a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80165a4:	fb00 f303 	mul.w	r3, r0, r3
 80165a8:	6820      	ldr	r0, [r4, #0]
 80165aa:	3304      	adds	r3, #4
 80165ac:	4418      	add	r0, r3
 80165ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d1cf      	bne.n	8016556 <uxr_receive_reliable_message+0x22>
 80165b6:	4641      	mov	r1, r8
 80165b8:	463a      	mov	r2, r7
 80165ba:	f002 fd86 	bl	80190ca <memcpy>
 80165be:	8921      	ldrh	r1, [r4, #8]
 80165c0:	fbb5 f2f1 	udiv	r2, r5, r1
 80165c4:	fb01 5212 	mls	r2, r1, r2, r5
 80165c8:	b292      	uxth	r2, r2
 80165ca:	6863      	ldr	r3, [r4, #4]
 80165cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80165d0:	fb02 f303 	mul.w	r3, r2, r3
 80165d4:	6822      	ldr	r2, [r4, #0]
 80165d6:	50d7      	str	r7, [r2, r3]
 80165d8:	9a08      	ldr	r2, [sp, #32]
 80165da:	2301      	movs	r3, #1
 80165dc:	7013      	strb	r3, [r2, #0]
 80165de:	f1b9 0f00 	cmp.w	r9, #0
 80165e2:	d0b8      	beq.n	8016556 <uxr_receive_reliable_message+0x22>
 80165e4:	89a6      	ldrh	r6, [r4, #12]
 80165e6:	4630      	mov	r0, r6
 80165e8:	2101      	movs	r1, #1
 80165ea:	f000 fd7f 	bl	80170ec <uxr_seq_num_add>
 80165ee:	8922      	ldrh	r2, [r4, #8]
 80165f0:	6863      	ldr	r3, [r4, #4]
 80165f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80165f6:	4606      	mov	r6, r0
 80165f8:	fbb0 f0f2 	udiv	r0, r0, r2
 80165fc:	fb02 6010 	mls	r0, r2, r0, r6
 8016600:	b280      	uxth	r0, r0
 8016602:	fb00 f303 	mul.w	r3, r0, r3
 8016606:	6820      	ldr	r0, [r4, #0]
 8016608:	3304      	adds	r3, #4
 801660a:	4418      	add	r0, r3
 801660c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d0a0      	beq.n	8016556 <uxr_receive_reliable_message+0x22>
 8016614:	6923      	ldr	r3, [r4, #16]
 8016616:	4798      	blx	r3
 8016618:	2802      	cmp	r0, #2
 801661a:	d008      	beq.n	801662e <uxr_receive_reliable_message+0xfa>
 801661c:	2801      	cmp	r0, #1
 801661e:	d0e2      	beq.n	80165e6 <uxr_receive_reliable_message+0xb2>
 8016620:	e799      	b.n	8016556 <uxr_receive_reliable_message+0x22>
 8016622:	9b08      	ldr	r3, [sp, #32]
 8016624:	81a5      	strh	r5, [r4, #12]
 8016626:	2601      	movs	r6, #1
 8016628:	f883 9000 	strb.w	r9, [r3]
 801662c:	e794      	b.n	8016558 <uxr_receive_reliable_message+0x24>
 801662e:	2601      	movs	r6, #1
 8016630:	e792      	b.n	8016558 <uxr_receive_reliable_message+0x24>
 8016632:	bf00      	nop

08016634 <uxr_next_input_reliable_buffer_available>:
 8016634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016638:	4604      	mov	r4, r0
 801663a:	460f      	mov	r7, r1
 801663c:	8980      	ldrh	r0, [r0, #12]
 801663e:	2101      	movs	r1, #1
 8016640:	4690      	mov	r8, r2
 8016642:	f000 fd53 	bl	80170ec <uxr_seq_num_add>
 8016646:	8922      	ldrh	r2, [r4, #8]
 8016648:	fbb0 f6f2 	udiv	r6, r0, r2
 801664c:	fb02 0616 	mls	r6, r2, r6, r0
 8016650:	b2b6      	uxth	r6, r6
 8016652:	6863      	ldr	r3, [r4, #4]
 8016654:	fbb3 f3f2 	udiv	r3, r3, r2
 8016658:	fb06 f303 	mul.w	r3, r6, r3
 801665c:	6826      	ldr	r6, [r4, #0]
 801665e:	3304      	adds	r3, #4
 8016660:	441e      	add	r6, r3
 8016662:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016666:	f1b9 0f00 	cmp.w	r9, #0
 801666a:	d023      	beq.n	80166b4 <uxr_next_input_reliable_buffer_available+0x80>
 801666c:	6923      	ldr	r3, [r4, #16]
 801666e:	4605      	mov	r5, r0
 8016670:	4630      	mov	r0, r6
 8016672:	4798      	blx	r3
 8016674:	4682      	mov	sl, r0
 8016676:	b300      	cbz	r0, 80166ba <uxr_next_input_reliable_buffer_available+0x86>
 8016678:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801667c:	2101      	movs	r1, #1
 801667e:	4650      	mov	r0, sl
 8016680:	f000 fd34 	bl	80170ec <uxr_seq_num_add>
 8016684:	8921      	ldrh	r1, [r4, #8]
 8016686:	fbb0 f2f1 	udiv	r2, r0, r1
 801668a:	4682      	mov	sl, r0
 801668c:	fb01 0212 	mls	r2, r1, r2, r0
 8016690:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016694:	b292      	uxth	r2, r2
 8016696:	fbb3 f3f1 	udiv	r3, r3, r1
 801669a:	fb02 f303 	mul.w	r3, r2, r3
 801669e:	3304      	adds	r3, #4
 80166a0:	4418      	add	r0, r3
 80166a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80166a6:	b12b      	cbz	r3, 80166b4 <uxr_next_input_reliable_buffer_available+0x80>
 80166a8:	6923      	ldr	r3, [r4, #16]
 80166aa:	4798      	blx	r3
 80166ac:	2802      	cmp	r0, #2
 80166ae:	d01b      	beq.n	80166e8 <uxr_next_input_reliable_buffer_available+0xb4>
 80166b0:	2801      	cmp	r0, #1
 80166b2:	d0e3      	beq.n	801667c <uxr_next_input_reliable_buffer_available+0x48>
 80166b4:	2000      	movs	r0, #0
 80166b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166ba:	464a      	mov	r2, r9
 80166bc:	4631      	mov	r1, r6
 80166be:	4638      	mov	r0, r7
 80166c0:	f7f5 f9fc 	bl	800babc <ucdr_init_buffer>
 80166c4:	8921      	ldrh	r1, [r4, #8]
 80166c6:	fbb5 f2f1 	udiv	r2, r5, r1
 80166ca:	fb01 5212 	mls	r2, r1, r2, r5
 80166ce:	b292      	uxth	r2, r2
 80166d0:	6863      	ldr	r3, [r4, #4]
 80166d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80166d6:	fb02 f303 	mul.w	r3, r2, r3
 80166da:	6822      	ldr	r2, [r4, #0]
 80166dc:	f842 a003 	str.w	sl, [r2, r3]
 80166e0:	2001      	movs	r0, #1
 80166e2:	81a5      	strh	r5, [r4, #12]
 80166e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166e8:	8920      	ldrh	r0, [r4, #8]
 80166ea:	fbb5 f3f0 	udiv	r3, r5, r0
 80166ee:	fb00 5513 	mls	r5, r0, r3, r5
 80166f2:	b2ad      	uxth	r5, r5
 80166f4:	6863      	ldr	r3, [r4, #4]
 80166f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80166fa:	fb03 f505 	mul.w	r5, r3, r5
 80166fe:	6823      	ldr	r3, [r4, #0]
 8016700:	2000      	movs	r0, #0
 8016702:	5158      	str	r0, [r3, r5]
 8016704:	eb06 0108 	add.w	r1, r6, r8
 8016708:	eba9 0208 	sub.w	r2, r9, r8
 801670c:	4638      	mov	r0, r7
 801670e:	f7f5 f9d5 	bl	800babc <ucdr_init_buffer>
 8016712:	4638      	mov	r0, r7
 8016714:	4903      	ldr	r1, [pc, #12]	@ (8016724 <uxr_next_input_reliable_buffer_available+0xf0>)
 8016716:	4622      	mov	r2, r4
 8016718:	f7f5 f9a4 	bl	800ba64 <ucdr_set_on_full_buffer_callback>
 801671c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016720:	2001      	movs	r0, #1
 8016722:	e7c8      	b.n	80166b6 <uxr_next_input_reliable_buffer_available+0x82>
 8016724:	08016429 	.word	0x08016429

08016728 <uxr_process_heartbeat>:
 8016728:	b538      	push	{r3, r4, r5, lr}
 801672a:	4611      	mov	r1, r2
 801672c:	4604      	mov	r4, r0
 801672e:	89c0      	ldrh	r0, [r0, #14]
 8016730:	4615      	mov	r5, r2
 8016732:	f000 fce3 	bl	80170fc <uxr_seq_num_cmp>
 8016736:	2800      	cmp	r0, #0
 8016738:	bfb8      	it	lt
 801673a:	81e5      	strhlt	r5, [r4, #14]
 801673c:	bd38      	pop	{r3, r4, r5, pc}
 801673e:	bf00      	nop

08016740 <uxr_compute_acknack>:
 8016740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016744:	8903      	ldrh	r3, [r0, #8]
 8016746:	8985      	ldrh	r5, [r0, #12]
 8016748:	4604      	mov	r4, r0
 801674a:	460e      	mov	r6, r1
 801674c:	b1d3      	cbz	r3, 8016784 <uxr_compute_acknack+0x44>
 801674e:	4628      	mov	r0, r5
 8016750:	2701      	movs	r7, #1
 8016752:	e003      	b.n	801675c <uxr_compute_acknack+0x1c>
 8016754:	4567      	cmp	r7, ip
 8016756:	d215      	bcs.n	8016784 <uxr_compute_acknack+0x44>
 8016758:	89a0      	ldrh	r0, [r4, #12]
 801675a:	3701      	adds	r7, #1
 801675c:	b2b9      	uxth	r1, r7
 801675e:	f000 fcc5 	bl	80170ec <uxr_seq_num_add>
 8016762:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016766:	fbb0 f3fc 	udiv	r3, r0, ip
 801676a:	fb0c 0313 	mls	r3, ip, r3, r0
 801676e:	b29a      	uxth	r2, r3
 8016770:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016774:	fbb3 f3fc 	udiv	r3, r3, ip
 8016778:	fb02 f303 	mul.w	r3, r2, r3
 801677c:	58cb      	ldr	r3, [r1, r3]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d1e8      	bne.n	8016754 <uxr_compute_acknack+0x14>
 8016782:	4605      	mov	r5, r0
 8016784:	8035      	strh	r5, [r6, #0]
 8016786:	2101      	movs	r1, #1
 8016788:	4628      	mov	r0, r5
 801678a:	89e7      	ldrh	r7, [r4, #14]
 801678c:	f000 fcb2 	bl	80170f4 <uxr_seq_num_sub>
 8016790:	4601      	mov	r1, r0
 8016792:	4638      	mov	r0, r7
 8016794:	f000 fcae 	bl	80170f4 <uxr_seq_num_sub>
 8016798:	4605      	mov	r5, r0
 801679a:	b318      	cbz	r0, 80167e4 <uxr_compute_acknack+0xa4>
 801679c:	f04f 0900 	mov.w	r9, #0
 80167a0:	464f      	mov	r7, r9
 80167a2:	f04f 0801 	mov.w	r8, #1
 80167a6:	fa1f f189 	uxth.w	r1, r9
 80167aa:	8830      	ldrh	r0, [r6, #0]
 80167ac:	f000 fc9e 	bl	80170ec <uxr_seq_num_add>
 80167b0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80167b4:	fbb0 f3fc 	udiv	r3, r0, ip
 80167b8:	e9d4 1200 	ldrd	r1, r2, [r4]
 80167bc:	fb03 001c 	mls	r0, r3, ip, r0
 80167c0:	b283      	uxth	r3, r0
 80167c2:	fbb2 f2fc 	udiv	r2, r2, ip
 80167c6:	fb02 f303 	mul.w	r3, r2, r3
 80167ca:	fa08 f209 	lsl.w	r2, r8, r9
 80167ce:	58cb      	ldr	r3, [r1, r3]
 80167d0:	f109 0901 	add.w	r9, r9, #1
 80167d4:	b90b      	cbnz	r3, 80167da <uxr_compute_acknack+0x9a>
 80167d6:	4317      	orrs	r7, r2
 80167d8:	b2bf      	uxth	r7, r7
 80167da:	454d      	cmp	r5, r9
 80167dc:	d1e3      	bne.n	80167a6 <uxr_compute_acknack+0x66>
 80167de:	4638      	mov	r0, r7
 80167e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167e4:	4607      	mov	r7, r0
 80167e6:	4638      	mov	r0, r7
 80167e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080167ec <uxr_init_output_best_effort_stream>:
 80167ec:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80167f0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80167f4:	6001      	str	r1, [r0, #0]
 80167f6:	7303      	strb	r3, [r0, #12]
 80167f8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80167fc:	4770      	bx	lr
 80167fe:	bf00      	nop

08016800 <uxr_reset_output_best_effort_stream>:
 8016800:	7b02      	ldrb	r2, [r0, #12]
 8016802:	6042      	str	r2, [r0, #4]
 8016804:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016808:	81c3      	strh	r3, [r0, #14]
 801680a:	4770      	bx	lr

0801680c <uxr_prepare_best_effort_buffer_to_write>:
 801680c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801680e:	4604      	mov	r4, r0
 8016810:	b083      	sub	sp, #12
 8016812:	6840      	ldr	r0, [r0, #4]
 8016814:	460d      	mov	r5, r1
 8016816:	4616      	mov	r6, r2
 8016818:	f7f9 fc5a 	bl	80100d0 <uxr_submessage_padding>
 801681c:	6863      	ldr	r3, [r4, #4]
 801681e:	4418      	add	r0, r3
 8016820:	68a3      	ldr	r3, [r4, #8]
 8016822:	1942      	adds	r2, r0, r5
 8016824:	4293      	cmp	r3, r2
 8016826:	bf2c      	ite	cs
 8016828:	2701      	movcs	r7, #1
 801682a:	2700      	movcc	r7, #0
 801682c:	d202      	bcs.n	8016834 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801682e:	4638      	mov	r0, r7
 8016830:	b003      	add	sp, #12
 8016832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016834:	9000      	str	r0, [sp, #0]
 8016836:	6821      	ldr	r1, [r4, #0]
 8016838:	4630      	mov	r0, r6
 801683a:	2300      	movs	r3, #0
 801683c:	f7f5 f92c 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 8016840:	6861      	ldr	r1, [r4, #4]
 8016842:	4638      	mov	r0, r7
 8016844:	4429      	add	r1, r5
 8016846:	6061      	str	r1, [r4, #4]
 8016848:	b003      	add	sp, #12
 801684a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801684c <uxr_prepare_best_effort_buffer_to_send>:
 801684c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016850:	4604      	mov	r4, r0
 8016852:	461d      	mov	r5, r3
 8016854:	6840      	ldr	r0, [r0, #4]
 8016856:	7b23      	ldrb	r3, [r4, #12]
 8016858:	4298      	cmp	r0, r3
 801685a:	bf8c      	ite	hi
 801685c:	2601      	movhi	r6, #1
 801685e:	2600      	movls	r6, #0
 8016860:	d802      	bhi.n	8016868 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8016862:	4630      	mov	r0, r6
 8016864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016868:	4688      	mov	r8, r1
 801686a:	89e0      	ldrh	r0, [r4, #14]
 801686c:	2101      	movs	r1, #1
 801686e:	4617      	mov	r7, r2
 8016870:	f000 fc3c 	bl	80170ec <uxr_seq_num_add>
 8016874:	6823      	ldr	r3, [r4, #0]
 8016876:	81e0      	strh	r0, [r4, #14]
 8016878:	8028      	strh	r0, [r5, #0]
 801687a:	f8c8 3000 	str.w	r3, [r8]
 801687e:	6863      	ldr	r3, [r4, #4]
 8016880:	603b      	str	r3, [r7, #0]
 8016882:	7b23      	ldrb	r3, [r4, #12]
 8016884:	6063      	str	r3, [r4, #4]
 8016886:	4630      	mov	r0, r6
 8016888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801688c <on_full_output_buffer>:
 801688c:	b538      	push	{r3, r4, r5, lr}
 801688e:	6802      	ldr	r2, [r0, #0]
 8016890:	460c      	mov	r4, r1
 8016892:	6809      	ldr	r1, [r1, #0]
 8016894:	8923      	ldrh	r3, [r4, #8]
 8016896:	eba2 0c01 	sub.w	ip, r2, r1
 801689a:	6862      	ldr	r2, [r4, #4]
 801689c:	fbb2 f2f3 	udiv	r2, r2, r3
 80168a0:	fbbc fcf2 	udiv	ip, ip, r2
 80168a4:	f10c 0c01 	add.w	ip, ip, #1
 80168a8:	fa1f fc8c 	uxth.w	ip, ip
 80168ac:	fbbc fef3 	udiv	lr, ip, r3
 80168b0:	fb03 c31e 	mls	r3, r3, lr, ip
 80168b4:	b29b      	uxth	r3, r3
 80168b6:	fb02 f303 	mul.w	r3, r2, r3
 80168ba:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80168be:	58ca      	ldr	r2, [r1, r3]
 80168c0:	4463      	add	r3, ip
 80168c2:	eba2 020c 	sub.w	r2, r2, ip
 80168c6:	3308      	adds	r3, #8
 80168c8:	4605      	mov	r5, r0
 80168ca:	4419      	add	r1, r3
 80168cc:	3a04      	subs	r2, #4
 80168ce:	6903      	ldr	r3, [r0, #16]
 80168d0:	f7f5 f8ec 	bl	800baac <ucdr_init_buffer_origin>
 80168d4:	4628      	mov	r0, r5
 80168d6:	4903      	ldr	r1, [pc, #12]	@ (80168e4 <on_full_output_buffer+0x58>)
 80168d8:	4622      	mov	r2, r4
 80168da:	f7f5 f8c3 	bl	800ba64 <ucdr_set_on_full_buffer_callback>
 80168de:	2000      	movs	r0, #0
 80168e0:	bd38      	pop	{r3, r4, r5, pc}
 80168e2:	bf00      	nop
 80168e4:	0801688d 	.word	0x0801688d

080168e8 <uxr_init_output_reliable_stream>:
 80168e8:	b410      	push	{r4}
 80168ea:	f89d c004 	ldrb.w	ip, [sp, #4]
 80168ee:	8103      	strh	r3, [r0, #8]
 80168f0:	e9c0 1200 	strd	r1, r2, [r0]
 80168f4:	f880 c00c 	strb.w	ip, [r0, #12]
 80168f8:	b1d3      	cbz	r3, 8016930 <uxr_init_output_reliable_stream+0x48>
 80168fa:	f8c1 c000 	str.w	ip, [r1]
 80168fe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016902:	f1bc 0f01 	cmp.w	ip, #1
 8016906:	d913      	bls.n	8016930 <uxr_init_output_reliable_stream+0x48>
 8016908:	2301      	movs	r3, #1
 801690a:	fbb3 f1fc 	udiv	r1, r3, ip
 801690e:	fb0c 3111 	mls	r1, ip, r1, r3
 8016912:	b289      	uxth	r1, r1
 8016914:	6842      	ldr	r2, [r0, #4]
 8016916:	6804      	ldr	r4, [r0, #0]
 8016918:	fbb2 f2fc 	udiv	r2, r2, ip
 801691c:	fb01 f202 	mul.w	r2, r1, r2
 8016920:	7b01      	ldrb	r1, [r0, #12]
 8016922:	50a1      	str	r1, [r4, r2]
 8016924:	3301      	adds	r3, #1
 8016926:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801692a:	b29b      	uxth	r3, r3
 801692c:	459c      	cmp	ip, r3
 801692e:	d8ec      	bhi.n	801690a <uxr_init_output_reliable_stream+0x22>
 8016930:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016934:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016938:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801693c:	4905      	ldr	r1, [pc, #20]	@ (8016954 <uxr_init_output_reliable_stream+0x6c>)
 801693e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016942:	f8c0 100e 	str.w	r1, [r0, #14]
 8016946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801694a:	2300      	movs	r3, #0
 801694c:	8242      	strh	r2, [r0, #18]
 801694e:	8403      	strh	r3, [r0, #32]
 8016950:	4770      	bx	lr
 8016952:	bf00      	nop
 8016954:	ffff0000 	.word	0xffff0000

08016958 <uxr_reset_output_reliable_stream>:
 8016958:	8901      	ldrh	r1, [r0, #8]
 801695a:	b1b1      	cbz	r1, 801698a <uxr_reset_output_reliable_stream+0x32>
 801695c:	f04f 0c00 	mov.w	ip, #0
 8016960:	4663      	mov	r3, ip
 8016962:	fbb3 f2f1 	udiv	r2, r3, r1
 8016966:	fb01 3312 	mls	r3, r1, r2, r3
 801696a:	b29b      	uxth	r3, r3
 801696c:	6842      	ldr	r2, [r0, #4]
 801696e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016972:	6801      	ldr	r1, [r0, #0]
 8016974:	fb02 f303 	mul.w	r3, r2, r3
 8016978:	7b02      	ldrb	r2, [r0, #12]
 801697a:	50ca      	str	r2, [r1, r3]
 801697c:	f10c 0c01 	add.w	ip, ip, #1
 8016980:	8901      	ldrh	r1, [r0, #8]
 8016982:	fa1f f38c 	uxth.w	r3, ip
 8016986:	4299      	cmp	r1, r3
 8016988:	d8eb      	bhi.n	8016962 <uxr_reset_output_reliable_stream+0xa>
 801698a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801698e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016992:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016996:	4904      	ldr	r1, [pc, #16]	@ (80169a8 <uxr_reset_output_reliable_stream+0x50>)
 8016998:	f8c0 100e 	str.w	r1, [r0, #14]
 801699c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80169a0:	2300      	movs	r3, #0
 80169a2:	8242      	strh	r2, [r0, #18]
 80169a4:	8403      	strh	r3, [r0, #32]
 80169a6:	4770      	bx	lr
 80169a8:	ffff0000 	.word	0xffff0000

080169ac <uxr_prepare_reliable_buffer_to_write>:
 80169ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169b0:	4604      	mov	r4, r0
 80169b2:	b091      	sub	sp, #68	@ 0x44
 80169b4:	8900      	ldrh	r0, [r0, #8]
 80169b6:	89e6      	ldrh	r6, [r4, #14]
 80169b8:	6823      	ldr	r3, [r4, #0]
 80169ba:	9204      	str	r2, [sp, #16]
 80169bc:	fbb6 f2f0 	udiv	r2, r6, r0
 80169c0:	fb00 6212 	mls	r2, r0, r2, r6
 80169c4:	b292      	uxth	r2, r2
 80169c6:	6865      	ldr	r5, [r4, #4]
 80169c8:	fbb5 f5f0 	udiv	r5, r5, r0
 80169cc:	fb05 3202 	mla	r2, r5, r2, r3
 80169d0:	3204      	adds	r2, #4
 80169d2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80169d6:	f894 900c 	ldrb.w	r9, [r4, #12]
 80169da:	9203      	str	r2, [sp, #12]
 80169dc:	468b      	mov	fp, r1
 80169de:	1f2f      	subs	r7, r5, #4
 80169e0:	2800      	cmp	r0, #0
 80169e2:	f000 814c 	beq.w	8016c7e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80169e6:	f04f 0c00 	mov.w	ip, #0
 80169ea:	46e2      	mov	sl, ip
 80169ec:	4661      	mov	r1, ip
 80169ee:	fbb1 f2f0 	udiv	r2, r1, r0
 80169f2:	fb00 1212 	mls	r2, r0, r2, r1
 80169f6:	b292      	uxth	r2, r2
 80169f8:	fb05 f202 	mul.w	r2, r5, r2
 80169fc:	f10c 0c01 	add.w	ip, ip, #1
 8016a00:	589a      	ldr	r2, [r3, r2]
 8016a02:	454a      	cmp	r2, r9
 8016a04:	bf08      	it	eq
 8016a06:	f10a 0a01 	addeq.w	sl, sl, #1
 8016a0a:	fa1f f18c 	uxth.w	r1, ip
 8016a0e:	bf08      	it	eq
 8016a10:	fa1f fa8a 	uxtheq.w	sl, sl
 8016a14:	4281      	cmp	r1, r0
 8016a16:	d3ea      	bcc.n	80169ee <uxr_prepare_reliable_buffer_to_write+0x42>
 8016a18:	4640      	mov	r0, r8
 8016a1a:	2104      	movs	r1, #4
 8016a1c:	f8cd a014 	str.w	sl, [sp, #20]
 8016a20:	f7f5 f850 	bl	800bac4 <ucdr_alignment>
 8016a24:	4480      	add	r8, r0
 8016a26:	eb08 020b 	add.w	r2, r8, fp
 8016a2a:	42ba      	cmp	r2, r7
 8016a2c:	f240 80cd 	bls.w	8016bca <uxr_prepare_reliable_buffer_to_write+0x21e>
 8016a30:	7b22      	ldrb	r2, [r4, #12]
 8016a32:	445a      	add	r2, fp
 8016a34:	42ba      	cmp	r2, r7
 8016a36:	f240 80b5 	bls.w	8016ba4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016a3a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8016a3e:	33fc      	adds	r3, #252	@ 0xfc
 8016a40:	b2ba      	uxth	r2, r7
 8016a42:	4413      	add	r3, r2
 8016a44:	b29b      	uxth	r3, r3
 8016a46:	fb0a f903 	mul.w	r9, sl, r3
 8016a4a:	45d9      	cmp	r9, fp
 8016a4c:	9305      	str	r3, [sp, #20]
 8016a4e:	9306      	str	r3, [sp, #24]
 8016a50:	f0c0 80b7 	bcc.w	8016bc2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8016a54:	f108 0304 	add.w	r3, r8, #4
 8016a58:	42bb      	cmp	r3, r7
 8016a5a:	f080 80db 	bcs.w	8016c14 <uxr_prepare_reliable_buffer_to_write+0x268>
 8016a5e:	f1a2 0904 	sub.w	r9, r2, #4
 8016a62:	eba9 0908 	sub.w	r9, r9, r8
 8016a66:	9b05      	ldr	r3, [sp, #20]
 8016a68:	fa1f f989 	uxth.w	r9, r9
 8016a6c:	ebab 0b09 	sub.w	fp, fp, r9
 8016a70:	fbbb f2f3 	udiv	r2, fp, r3
 8016a74:	fb03 b312 	mls	r3, r3, r2, fp
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	f000 80c8 	beq.w	8016c0e <uxr_prepare_reliable_buffer_to_write+0x262>
 8016a7e:	3201      	adds	r2, #1
 8016a80:	b292      	uxth	r2, r2
 8016a82:	9306      	str	r3, [sp, #24]
 8016a84:	4552      	cmp	r2, sl
 8016a86:	f200 809c 	bhi.w	8016bc2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8016a8a:	f10d 0b20 	add.w	fp, sp, #32
 8016a8e:	2a00      	cmp	r2, #0
 8016a90:	d042      	beq.n	8016b18 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8016a92:	f8cd 801c 	str.w	r8, [sp, #28]
 8016a96:	f04f 0a00 	mov.w	sl, #0
 8016a9a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016a9e:	9505      	str	r5, [sp, #20]
 8016aa0:	f10d 0b20 	add.w	fp, sp, #32
 8016aa4:	4615      	mov	r5, r2
 8016aa6:	e000      	b.n	8016aaa <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016aa8:	46c1      	mov	r9, r8
 8016aaa:	8920      	ldrh	r0, [r4, #8]
 8016aac:	fbb6 f2f0 	udiv	r2, r6, r0
 8016ab0:	fb00 6112 	mls	r1, r0, r2, r6
 8016ab4:	b28a      	uxth	r2, r1
 8016ab6:	6863      	ldr	r3, [r4, #4]
 8016ab8:	fbb3 f1f0 	udiv	r1, r3, r0
 8016abc:	6823      	ldr	r3, [r4, #0]
 8016abe:	fb02 f101 	mul.w	r1, r2, r1
 8016ac2:	3104      	adds	r1, #4
 8016ac4:	4419      	add	r1, r3
 8016ac6:	4658      	mov	r0, fp
 8016ac8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016acc:	9200      	str	r2, [sp, #0]
 8016ace:	2300      	movs	r3, #0
 8016ad0:	463a      	mov	r2, r7
 8016ad2:	f7f4 ffe1 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 8016ad6:	464a      	mov	r2, r9
 8016ad8:	2300      	movs	r3, #0
 8016ada:	210d      	movs	r1, #13
 8016adc:	4658      	mov	r0, fp
 8016ade:	f7f9 fab7 	bl	8010050 <uxr_buffer_submessage_header>
 8016ae2:	8921      	ldrh	r1, [r4, #8]
 8016ae4:	fbb6 f2f1 	udiv	r2, r6, r1
 8016ae8:	fb01 6212 	mls	r2, r1, r2, r6
 8016aec:	b292      	uxth	r2, r2
 8016aee:	6863      	ldr	r3, [r4, #4]
 8016af0:	fbb3 f3f1 	udiv	r3, r3, r1
 8016af4:	fb02 f303 	mul.w	r3, r2, r3
 8016af8:	6822      	ldr	r2, [r4, #0]
 8016afa:	4630      	mov	r0, r6
 8016afc:	50d7      	str	r7, [r2, r3]
 8016afe:	2101      	movs	r1, #1
 8016b00:	f000 faf4 	bl	80170ec <uxr_seq_num_add>
 8016b04:	f10a 0a01 	add.w	sl, sl, #1
 8016b08:	fa1f f38a 	uxth.w	r3, sl
 8016b0c:	429d      	cmp	r5, r3
 8016b0e:	4606      	mov	r6, r0
 8016b10:	d8ca      	bhi.n	8016aa8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8016b12:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016b16:	9d05      	ldr	r5, [sp, #20]
 8016b18:	8920      	ldrh	r0, [r4, #8]
 8016b1a:	fbb6 f3f0 	udiv	r3, r6, r0
 8016b1e:	fb00 6313 	mls	r3, r0, r3, r6
 8016b22:	b299      	uxth	r1, r3
 8016b24:	6863      	ldr	r3, [r4, #4]
 8016b26:	fbb3 f3f0 	udiv	r3, r3, r0
 8016b2a:	fb01 f303 	mul.w	r3, r1, r3
 8016b2e:	6821      	ldr	r1, [r4, #0]
 8016b30:	3304      	adds	r3, #4
 8016b32:	4419      	add	r1, r3
 8016b34:	463a      	mov	r2, r7
 8016b36:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016b3a:	9000      	str	r0, [sp, #0]
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	4658      	mov	r0, fp
 8016b40:	f7f4 ffaa 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 8016b44:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016b48:	4658      	mov	r0, fp
 8016b4a:	fa1f f289 	uxth.w	r2, r9
 8016b4e:	2302      	movs	r3, #2
 8016b50:	210d      	movs	r1, #13
 8016b52:	f7f9 fa7d 	bl	8010050 <uxr_buffer_submessage_header>
 8016b56:	9b03      	ldr	r3, [sp, #12]
 8016b58:	8927      	ldrh	r7, [r4, #8]
 8016b5a:	7b20      	ldrb	r0, [r4, #12]
 8016b5c:	f108 0104 	add.w	r1, r8, #4
 8016b60:	440b      	add	r3, r1
 8016b62:	4619      	mov	r1, r3
 8016b64:	fbb6 f3f7 	udiv	r3, r6, r7
 8016b68:	fb07 6313 	mls	r3, r7, r3, r6
 8016b6c:	f1a5 0208 	sub.w	r2, r5, #8
 8016b70:	b29d      	uxth	r5, r3
 8016b72:	3004      	adds	r0, #4
 8016b74:	6863      	ldr	r3, [r4, #4]
 8016b76:	fbb3 f3f7 	udiv	r3, r3, r7
 8016b7a:	fb05 f303 	mul.w	r3, r5, r3
 8016b7e:	6825      	ldr	r5, [r4, #0]
 8016b80:	4448      	add	r0, r9
 8016b82:	50e8      	str	r0, [r5, r3]
 8016b84:	9d04      	ldr	r5, [sp, #16]
 8016b86:	eba2 0208 	sub.w	r2, r2, r8
 8016b8a:	4628      	mov	r0, r5
 8016b8c:	f7f4 ff96 	bl	800babc <ucdr_init_buffer>
 8016b90:	4628      	mov	r0, r5
 8016b92:	493c      	ldr	r1, [pc, #240]	@ (8016c84 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016b94:	4622      	mov	r2, r4
 8016b96:	f7f4 ff65 	bl	800ba64 <ucdr_set_on_full_buffer_callback>
 8016b9a:	2001      	movs	r0, #1
 8016b9c:	81e6      	strh	r6, [r4, #14]
 8016b9e:	b011      	add	sp, #68	@ 0x44
 8016ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ba4:	2101      	movs	r1, #1
 8016ba6:	89e0      	ldrh	r0, [r4, #14]
 8016ba8:	f000 faa0 	bl	80170ec <uxr_seq_num_add>
 8016bac:	8921      	ldrh	r1, [r4, #8]
 8016bae:	4605      	mov	r5, r0
 8016bb0:	8a60      	ldrh	r0, [r4, #18]
 8016bb2:	f000 fa9b 	bl	80170ec <uxr_seq_num_add>
 8016bb6:	4601      	mov	r1, r0
 8016bb8:	4628      	mov	r0, r5
 8016bba:	f000 fa9f 	bl	80170fc <uxr_seq_num_cmp>
 8016bbe:	2800      	cmp	r0, #0
 8016bc0:	dd42      	ble.n	8016c48 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8016bc2:	2000      	movs	r0, #0
 8016bc4:	b011      	add	sp, #68	@ 0x44
 8016bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bca:	8921      	ldrh	r1, [r4, #8]
 8016bcc:	8a60      	ldrh	r0, [r4, #18]
 8016bce:	9205      	str	r2, [sp, #20]
 8016bd0:	f000 fa8c 	bl	80170ec <uxr_seq_num_add>
 8016bd4:	4601      	mov	r1, r0
 8016bd6:	4630      	mov	r0, r6
 8016bd8:	f000 fa90 	bl	80170fc <uxr_seq_num_cmp>
 8016bdc:	2800      	cmp	r0, #0
 8016bde:	9a05      	ldr	r2, [sp, #20]
 8016be0:	dcef      	bgt.n	8016bc2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8016be2:	8927      	ldrh	r7, [r4, #8]
 8016be4:	fbb6 f3f7 	udiv	r3, r6, r7
 8016be8:	fb07 6313 	mls	r3, r7, r3, r6
 8016bec:	b29d      	uxth	r5, r3
 8016bee:	6863      	ldr	r3, [r4, #4]
 8016bf0:	6824      	ldr	r4, [r4, #0]
 8016bf2:	fbb3 f3f7 	udiv	r3, r3, r7
 8016bf6:	fb05 f303 	mul.w	r3, r5, r3
 8016bfa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016bfe:	50e2      	str	r2, [r4, r3]
 8016c00:	2300      	movs	r3, #0
 8016c02:	f8cd 8000 	str.w	r8, [sp]
 8016c06:	f7f4 ff47 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 8016c0a:	2001      	movs	r0, #1
 8016c0c:	e7da      	b.n	8016bc4 <uxr_prepare_reliable_buffer_to_write+0x218>
 8016c0e:	b293      	uxth	r3, r2
 8016c10:	461a      	mov	r2, r3
 8016c12:	e737      	b.n	8016a84 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8016c14:	4630      	mov	r0, r6
 8016c16:	2101      	movs	r1, #1
 8016c18:	9207      	str	r2, [sp, #28]
 8016c1a:	f000 fa67 	bl	80170ec <uxr_seq_num_add>
 8016c1e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016c22:	fbb0 f1fc 	udiv	r1, r0, ip
 8016c26:	fb0c 0111 	mls	r1, ip, r1, r0
 8016c2a:	4606      	mov	r6, r0
 8016c2c:	b288      	uxth	r0, r1
 8016c2e:	6863      	ldr	r3, [r4, #4]
 8016c30:	fbb3 f1fc 	udiv	r1, r3, ip
 8016c34:	6823      	ldr	r3, [r4, #0]
 8016c36:	9a07      	ldr	r2, [sp, #28]
 8016c38:	fb00 f101 	mul.w	r1, r0, r1
 8016c3c:	3104      	adds	r1, #4
 8016c3e:	440b      	add	r3, r1
 8016c40:	9303      	str	r3, [sp, #12]
 8016c42:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8016c46:	e70a      	b.n	8016a5e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016c48:	8921      	ldrh	r1, [r4, #8]
 8016c4a:	fbb5 f3f1 	udiv	r3, r5, r1
 8016c4e:	fb01 5313 	mls	r3, r1, r3, r5
 8016c52:	b29a      	uxth	r2, r3
 8016c54:	6863      	ldr	r3, [r4, #4]
 8016c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8016c5a:	6821      	ldr	r1, [r4, #0]
 8016c5c:	9804      	ldr	r0, [sp, #16]
 8016c5e:	fb02 f303 	mul.w	r3, r2, r3
 8016c62:	3304      	adds	r3, #4
 8016c64:	7b22      	ldrb	r2, [r4, #12]
 8016c66:	4419      	add	r1, r3
 8016c68:	445a      	add	r2, fp
 8016c6a:	f841 2c04 	str.w	r2, [r1, #-4]
 8016c6e:	7b23      	ldrb	r3, [r4, #12]
 8016c70:	9300      	str	r3, [sp, #0]
 8016c72:	2300      	movs	r3, #0
 8016c74:	f7f4 ff10 	bl	800ba98 <ucdr_init_buffer_origin_offset>
 8016c78:	81e5      	strh	r5, [r4, #14]
 8016c7a:	2001      	movs	r0, #1
 8016c7c:	e7a2      	b.n	8016bc4 <uxr_prepare_reliable_buffer_to_write+0x218>
 8016c7e:	4682      	mov	sl, r0
 8016c80:	e6ca      	b.n	8016a18 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8016c82:	bf00      	nop
 8016c84:	0801688d 	.word	0x0801688d

08016c88 <uxr_prepare_next_reliable_buffer_to_send>:
 8016c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	460f      	mov	r7, r1
 8016c8e:	8a00      	ldrh	r0, [r0, #16]
 8016c90:	2101      	movs	r1, #1
 8016c92:	4616      	mov	r6, r2
 8016c94:	461d      	mov	r5, r3
 8016c96:	f000 fa29 	bl	80170ec <uxr_seq_num_add>
 8016c9a:	8028      	strh	r0, [r5, #0]
 8016c9c:	8922      	ldrh	r2, [r4, #8]
 8016c9e:	fbb0 f3f2 	udiv	r3, r0, r2
 8016ca2:	fb02 0c13 	mls	ip, r2, r3, r0
 8016ca6:	fa1f fc8c 	uxth.w	ip, ip
 8016caa:	6863      	ldr	r3, [r4, #4]
 8016cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8016cb0:	fb0c fc03 	mul.w	ip, ip, r3
 8016cb4:	6823      	ldr	r3, [r4, #0]
 8016cb6:	89e1      	ldrh	r1, [r4, #14]
 8016cb8:	f10c 0c04 	add.w	ip, ip, #4
 8016cbc:	4463      	add	r3, ip
 8016cbe:	603b      	str	r3, [r7, #0]
 8016cc0:	6823      	ldr	r3, [r4, #0]
 8016cc2:	449c      	add	ip, r3
 8016cc4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016cc8:	6033      	str	r3, [r6, #0]
 8016cca:	f000 fa17 	bl	80170fc <uxr_seq_num_cmp>
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	dd01      	ble.n	8016cd6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016cd2:	2000      	movs	r0, #0
 8016cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cd6:	7b23      	ldrb	r3, [r4, #12]
 8016cd8:	6832      	ldr	r2, [r6, #0]
 8016cda:	429a      	cmp	r2, r3
 8016cdc:	d9f9      	bls.n	8016cd2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016cde:	8a61      	ldrh	r1, [r4, #18]
 8016ce0:	8a20      	ldrh	r0, [r4, #16]
 8016ce2:	f000 fa07 	bl	80170f4 <uxr_seq_num_sub>
 8016ce6:	8923      	ldrh	r3, [r4, #8]
 8016ce8:	4283      	cmp	r3, r0
 8016cea:	d0f2      	beq.n	8016cd2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016cec:	8828      	ldrh	r0, [r5, #0]
 8016cee:	89e3      	ldrh	r3, [r4, #14]
 8016cf0:	8220      	strh	r0, [r4, #16]
 8016cf2:	4298      	cmp	r0, r3
 8016cf4:	d001      	beq.n	8016cfa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016cf6:	2001      	movs	r0, #1
 8016cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cfa:	2101      	movs	r1, #1
 8016cfc:	f000 f9f6 	bl	80170ec <uxr_seq_num_add>
 8016d00:	81e0      	strh	r0, [r4, #14]
 8016d02:	2001      	movs	r0, #1
 8016d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d06:	bf00      	nop

08016d08 <uxr_update_output_stream_heartbeat_timestamp>:
 8016d08:	b570      	push	{r4, r5, r6, lr}
 8016d0a:	8a01      	ldrh	r1, [r0, #16]
 8016d0c:	4604      	mov	r4, r0
 8016d0e:	8a40      	ldrh	r0, [r0, #18]
 8016d10:	4615      	mov	r5, r2
 8016d12:	461e      	mov	r6, r3
 8016d14:	f000 f9f2 	bl	80170fc <uxr_seq_num_cmp>
 8016d18:	2800      	cmp	r0, #0
 8016d1a:	db07      	blt.n	8016d2c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016d1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016d20:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016d24:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016d28:	2000      	movs	r0, #0
 8016d2a:	bd70      	pop	{r4, r5, r6, pc}
 8016d2c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016d30:	b940      	cbnz	r0, 8016d44 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016d32:	2301      	movs	r3, #1
 8016d34:	f884 3020 	strb.w	r3, [r4, #32]
 8016d38:	3564      	adds	r5, #100	@ 0x64
 8016d3a:	f146 0600 	adc.w	r6, r6, #0
 8016d3e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016d42:	bd70      	pop	{r4, r5, r6, pc}
 8016d44:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016d48:	4295      	cmp	r5, r2
 8016d4a:	eb76 0303 	sbcs.w	r3, r6, r3
 8016d4e:	bfa5      	ittet	ge
 8016d50:	3001      	addge	r0, #1
 8016d52:	f884 0020 	strbge.w	r0, [r4, #32]
 8016d56:	2000      	movlt	r0, #0
 8016d58:	2001      	movge	r0, #1
 8016d5a:	e7ed      	b.n	8016d38 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016d5c <uxr_begin_output_nack_buffer_it>:
 8016d5c:	8a40      	ldrh	r0, [r0, #18]
 8016d5e:	4770      	bx	lr

08016d60 <uxr_next_reliable_nack_buffer_to_send>:
 8016d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d64:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016d68:	b082      	sub	sp, #8
 8016d6a:	f1b8 0f00 	cmp.w	r8, #0
 8016d6e:	d011      	beq.n	8016d94 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016d70:	4604      	mov	r4, r0
 8016d72:	8818      	ldrh	r0, [r3, #0]
 8016d74:	460e      	mov	r6, r1
 8016d76:	4617      	mov	r7, r2
 8016d78:	461d      	mov	r5, r3
 8016d7a:	2101      	movs	r1, #1
 8016d7c:	f000 f9b6 	bl	80170ec <uxr_seq_num_add>
 8016d80:	8028      	strh	r0, [r5, #0]
 8016d82:	8a21      	ldrh	r1, [r4, #16]
 8016d84:	f000 f9ba 	bl	80170fc <uxr_seq_num_cmp>
 8016d88:	2800      	cmp	r0, #0
 8016d8a:	dd07      	ble.n	8016d9c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016d8c:	f04f 0800 	mov.w	r8, #0
 8016d90:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016d94:	4640      	mov	r0, r8
 8016d96:	b002      	add	sp, #8
 8016d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d9c:	8921      	ldrh	r1, [r4, #8]
 8016d9e:	8828      	ldrh	r0, [r5, #0]
 8016da0:	6823      	ldr	r3, [r4, #0]
 8016da2:	fbb0 f2f1 	udiv	r2, r0, r1
 8016da6:	fb01 0c12 	mls	ip, r1, r2, r0
 8016daa:	fa1f f28c 	uxth.w	r2, ip
 8016dae:	9301      	str	r3, [sp, #4]
 8016db0:	6863      	ldr	r3, [r4, #4]
 8016db2:	fbb3 fcf1 	udiv	ip, r3, r1
 8016db6:	9b01      	ldr	r3, [sp, #4]
 8016db8:	fb02 fc0c 	mul.w	ip, r2, ip
 8016dbc:	f10c 0c04 	add.w	ip, ip, #4
 8016dc0:	4463      	add	r3, ip
 8016dc2:	6033      	str	r3, [r6, #0]
 8016dc4:	6823      	ldr	r3, [r4, #0]
 8016dc6:	4463      	add	r3, ip
 8016dc8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016dcc:	603b      	str	r3, [r7, #0]
 8016dce:	7b22      	ldrb	r2, [r4, #12]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d0d2      	beq.n	8016d7a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016dd4:	4640      	mov	r0, r8
 8016dd6:	b002      	add	sp, #8
 8016dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016ddc <uxr_process_acknack>:
 8016ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dde:	4604      	mov	r4, r0
 8016de0:	460e      	mov	r6, r1
 8016de2:	4610      	mov	r0, r2
 8016de4:	2101      	movs	r1, #1
 8016de6:	f000 f985 	bl	80170f4 <uxr_seq_num_sub>
 8016dea:	8a61      	ldrh	r1, [r4, #18]
 8016dec:	f000 f982 	bl	80170f4 <uxr_seq_num_sub>
 8016df0:	b1c0      	cbz	r0, 8016e24 <uxr_process_acknack+0x48>
 8016df2:	4605      	mov	r5, r0
 8016df4:	2700      	movs	r7, #0
 8016df6:	2101      	movs	r1, #1
 8016df8:	8a60      	ldrh	r0, [r4, #18]
 8016dfa:	f000 f977 	bl	80170ec <uxr_seq_num_add>
 8016dfe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e02:	fbb0 f1fc 	udiv	r1, r0, ip
 8016e06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016e0a:	fb0c 0111 	mls	r1, ip, r1, r0
 8016e0e:	b289      	uxth	r1, r1
 8016e10:	3701      	adds	r7, #1
 8016e12:	fbb3 f3fc 	udiv	r3, r3, ip
 8016e16:	fb01 f303 	mul.w	r3, r1, r3
 8016e1a:	42bd      	cmp	r5, r7
 8016e1c:	7b21      	ldrb	r1, [r4, #12]
 8016e1e:	8260      	strh	r0, [r4, #18]
 8016e20:	50d1      	str	r1, [r2, r3]
 8016e22:	d1e8      	bne.n	8016df6 <uxr_process_acknack+0x1a>
 8016e24:	3e00      	subs	r6, #0
 8016e26:	f04f 0300 	mov.w	r3, #0
 8016e2a:	bf18      	it	ne
 8016e2c:	2601      	movne	r6, #1
 8016e2e:	f884 3020 	strb.w	r3, [r4, #32]
 8016e32:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016e38 <uxr_is_output_up_to_date>:
 8016e38:	8a01      	ldrh	r1, [r0, #16]
 8016e3a:	8a40      	ldrh	r0, [r0, #18]
 8016e3c:	b508      	push	{r3, lr}
 8016e3e:	f000 f95d 	bl	80170fc <uxr_seq_num_cmp>
 8016e42:	fab0 f080 	clz	r0, r0
 8016e46:	0940      	lsrs	r0, r0, #5
 8016e48:	bd08      	pop	{r3, pc}
 8016e4a:	bf00      	nop

08016e4c <get_available_free_slots>:
 8016e4c:	8902      	ldrh	r2, [r0, #8]
 8016e4e:	b1da      	cbz	r2, 8016e88 <get_available_free_slots+0x3c>
 8016e50:	b530      	push	{r4, r5, lr}
 8016e52:	2100      	movs	r1, #0
 8016e54:	6843      	ldr	r3, [r0, #4]
 8016e56:	6805      	ldr	r5, [r0, #0]
 8016e58:	7b04      	ldrb	r4, [r0, #12]
 8016e5a:	fbb3 fef2 	udiv	lr, r3, r2
 8016e5e:	4608      	mov	r0, r1
 8016e60:	460b      	mov	r3, r1
 8016e62:	fbb3 fcf2 	udiv	ip, r3, r2
 8016e66:	fb02 331c 	mls	r3, r2, ip, r3
 8016e6a:	b29b      	uxth	r3, r3
 8016e6c:	fb0e f303 	mul.w	r3, lr, r3
 8016e70:	3101      	adds	r1, #1
 8016e72:	f855 c003 	ldr.w	ip, [r5, r3]
 8016e76:	4564      	cmp	r4, ip
 8016e78:	bf08      	it	eq
 8016e7a:	3001      	addeq	r0, #1
 8016e7c:	b28b      	uxth	r3, r1
 8016e7e:	bf08      	it	eq
 8016e80:	b280      	uxtheq	r0, r0
 8016e82:	4293      	cmp	r3, r2
 8016e84:	d3ed      	bcc.n	8016e62 <get_available_free_slots+0x16>
 8016e86:	bd30      	pop	{r4, r5, pc}
 8016e88:	4610      	mov	r0, r2
 8016e8a:	4770      	bx	lr

08016e8c <uxr_buffer_request_data>:
 8016e8c:	b530      	push	{r4, r5, lr}
 8016e8e:	b095      	sub	sp, #84	@ 0x54
 8016e90:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8016e94:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8016e96:	9303      	str	r3, [sp, #12]
 8016e98:	2200      	movs	r2, #0
 8016e9a:	2d00      	cmp	r5, #0
 8016e9c:	bf14      	ite	ne
 8016e9e:	2101      	movne	r1, #1
 8016ea0:	4611      	moveq	r1, r2
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	f88d 301c 	strb.w	r3, [sp, #28]
 8016ea8:	f88d 201d 	strb.w	r2, [sp, #29]
 8016eac:	f88d 201e 	strb.w	r2, [sp, #30]
 8016eb0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8016eb4:	d021      	beq.n	8016efa <uxr_buffer_request_data+0x6e>
 8016eb6:	682a      	ldr	r2, [r5, #0]
 8016eb8:	686b      	ldr	r3, [r5, #4]
 8016eba:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8016ebe:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8016ec2:	2210      	movs	r2, #16
 8016ec4:	2308      	movs	r3, #8
 8016ec6:	2100      	movs	r1, #0
 8016ec8:	e9cd 3100 	strd	r3, r1, [sp]
 8016ecc:	4620      	mov	r0, r4
 8016ece:	9905      	ldr	r1, [sp, #20]
 8016ed0:	ab0c      	add	r3, sp, #48	@ 0x30
 8016ed2:	f7f8 fe1f 	bl	800fb14 <uxr_prepare_stream_to_write_submessage>
 8016ed6:	b918      	cbnz	r0, 8016ee0 <uxr_buffer_request_data+0x54>
 8016ed8:	4604      	mov	r4, r0
 8016eda:	4620      	mov	r0, r4
 8016edc:	b015      	add	sp, #84	@ 0x54
 8016ede:	bd30      	pop	{r4, r5, pc}
 8016ee0:	9904      	ldr	r1, [sp, #16]
 8016ee2:	aa06      	add	r2, sp, #24
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	f7f8 ff4b 	bl	800fd80 <uxr_init_base_object_request>
 8016eea:	a906      	add	r1, sp, #24
 8016eec:	4604      	mov	r4, r0
 8016eee:	a80c      	add	r0, sp, #48	@ 0x30
 8016ef0:	f7fa fa46 	bl	8011380 <uxr_serialize_READ_DATA_Payload>
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	b015      	add	sp, #84	@ 0x54
 8016ef8:	bd30      	pop	{r4, r5, pc}
 8016efa:	2208      	movs	r2, #8
 8016efc:	e7e2      	b.n	8016ec4 <uxr_buffer_request_data+0x38>
 8016efe:	bf00      	nop

08016f00 <uxr_buffer_cancel_data>:
 8016f00:	b510      	push	{r4, lr}
 8016f02:	b094      	sub	sp, #80	@ 0x50
 8016f04:	2300      	movs	r3, #0
 8016f06:	9202      	str	r2, [sp, #8]
 8016f08:	9205      	str	r2, [sp, #20]
 8016f0a:	9301      	str	r3, [sp, #4]
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016f12:	f88d 301e 	strb.w	r3, [sp, #30]
 8016f16:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8016f1a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8016f1e:	2308      	movs	r3, #8
 8016f20:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8016f24:	9300      	str	r3, [sp, #0]
 8016f26:	2210      	movs	r2, #16
 8016f28:	ab0c      	add	r3, sp, #48	@ 0x30
 8016f2a:	4604      	mov	r4, r0
 8016f2c:	9103      	str	r1, [sp, #12]
 8016f2e:	f7f8 fdf1 	bl	800fb14 <uxr_prepare_stream_to_write_submessage>
 8016f32:	b918      	cbnz	r0, 8016f3c <uxr_buffer_cancel_data+0x3c>
 8016f34:	4604      	mov	r4, r0
 8016f36:	4620      	mov	r0, r4
 8016f38:	b014      	add	sp, #80	@ 0x50
 8016f3a:	bd10      	pop	{r4, pc}
 8016f3c:	9905      	ldr	r1, [sp, #20]
 8016f3e:	aa06      	add	r2, sp, #24
 8016f40:	4620      	mov	r0, r4
 8016f42:	f7f8 ff1d 	bl	800fd80 <uxr_init_base_object_request>
 8016f46:	a906      	add	r1, sp, #24
 8016f48:	4604      	mov	r4, r0
 8016f4a:	a80c      	add	r0, sp, #48	@ 0x30
 8016f4c:	f7fa fa18 	bl	8011380 <uxr_serialize_READ_DATA_Payload>
 8016f50:	4620      	mov	r0, r4
 8016f52:	b014      	add	sp, #80	@ 0x50
 8016f54:	bd10      	pop	{r4, pc}
 8016f56:	bf00      	nop

08016f58 <read_submessage_format>:
 8016f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f5c:	b095      	sub	sp, #84	@ 0x54
 8016f5e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8016f62:	b113      	cbz	r3, 8016f6a <read_submessage_format+0x12>
 8016f64:	b015      	add	sp, #84	@ 0x54
 8016f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f6a:	460c      	mov	r4, r1
 8016f6c:	4615      	mov	r5, r2
 8016f6e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016f72:	4607      	mov	r7, r0
 8016f74:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8016f76:	9004      	str	r0, [sp, #16]
 8016f78:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8016f7a:	9005      	str	r0, [sp, #20]
 8016f7c:	1a52      	subs	r2, r2, r1
 8016f7e:	a80c      	add	r0, sp, #48	@ 0x30
 8016f80:	4699      	mov	r9, r3
 8016f82:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8016f86:	f7f4 fd99 	bl	800babc <ucdr_init_buffer>
 8016f8a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016f8e:	a80c      	add	r0, sp, #48	@ 0x30
 8016f90:	f7f4 fd68 	bl	800ba64 <ucdr_set_on_full_buffer_callback>
 8016f94:	69e2      	ldr	r2, [r4, #28]
 8016f96:	b19a      	cbz	r2, 8016fc0 <read_submessage_format+0x68>
 8016f98:	f1b8 0f07 	cmp.w	r8, #7
 8016f9c:	f882 9014 	strb.w	r9, [r2, #20]
 8016fa0:	d040      	beq.n	8017024 <read_submessage_format+0xcc>
 8016fa2:	f1b8 0f08 	cmp.w	r8, #8
 8016fa6:	d02e      	beq.n	8017006 <read_submessage_format+0xae>
 8016fa8:	f1b8 0f06 	cmp.w	r8, #6
 8016fac:	d011      	beq.n	8016fd2 <read_submessage_format+0x7a>
 8016fae:	2301      	movs	r3, #1
 8016fb0:	7513      	strb	r3, [r2, #20]
 8016fb2:	4629      	mov	r1, r5
 8016fb4:	4620      	mov	r0, r4
 8016fb6:	f7f4 fdd1 	bl	800bb5c <ucdr_advance_buffer>
 8016fba:	b015      	add	sp, #84	@ 0x54
 8016fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fc0:	f1b8 0f07 	cmp.w	r8, #7
 8016fc4:	d02e      	beq.n	8017024 <read_submessage_format+0xcc>
 8016fc6:	f1b8 0f08 	cmp.w	r8, #8
 8016fca:	d01c      	beq.n	8017006 <read_submessage_format+0xae>
 8016fcc:	f1b8 0f06 	cmp.w	r8, #6
 8016fd0:	d1ef      	bne.n	8016fb2 <read_submessage_format+0x5a>
 8016fd2:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8016fd6:	f1b8 0f00 	cmp.w	r8, #0
 8016fda:	d011      	beq.n	8017000 <read_submessage_format+0xa8>
 8016fdc:	ab0c      	add	r3, sp, #48	@ 0x30
 8016fde:	e9cd 3500 	strd	r3, r5, [sp]
 8016fe2:	2306      	movs	r3, #6
 8016fe4:	f88d 3016 	strb.w	r3, [sp, #22]
 8016fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016fec:	9302      	str	r3, [sp, #8]
 8016fee:	4632      	mov	r2, r6
 8016ff0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016ff4:	4638      	mov	r0, r7
 8016ff6:	47c0      	blx	r8
 8016ff8:	2301      	movs	r3, #1
 8016ffa:	69e2      	ldr	r2, [r4, #28]
 8016ffc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017000:	2a00      	cmp	r2, #0
 8017002:	d1d4      	bne.n	8016fae <read_submessage_format+0x56>
 8017004:	e7d5      	b.n	8016fb2 <read_submessage_format+0x5a>
 8017006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801700a:	2b00      	cmp	r3, #0
 801700c:	d0f8      	beq.n	8017000 <read_submessage_format+0xa8>
 801700e:	a906      	add	r1, sp, #24
 8017010:	a80c      	add	r0, sp, #48	@ 0x30
 8017012:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8017016:	f7fa fa79 	bl	801150c <uxr_deserialize_SampleIdentity>
 801701a:	b9a0      	cbnz	r0, 8017046 <read_submessage_format+0xee>
 801701c:	69e2      	ldr	r2, [r4, #28]
 801701e:	2a00      	cmp	r2, #0
 8017020:	d1c5      	bne.n	8016fae <read_submessage_format+0x56>
 8017022:	e7c6      	b.n	8016fb2 <read_submessage_format+0x5a>
 8017024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017028:	b13b      	cbz	r3, 801703a <read_submessage_format+0xe2>
 801702a:	a906      	add	r1, sp, #24
 801702c:	a80c      	add	r0, sp, #48	@ 0x30
 801702e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8017032:	f7f9 ff3f 	bl	8010eb4 <uxr_deserialize_BaseObjectRequest>
 8017036:	bb60      	cbnz	r0, 8017092 <read_submessage_format+0x13a>
 8017038:	69e2      	ldr	r2, [r4, #28]
 801703a:	68a3      	ldr	r3, [r4, #8]
 801703c:	442b      	add	r3, r5
 801703e:	60a3      	str	r3, [r4, #8]
 8017040:	2a00      	cmp	r2, #0
 8017042:	d1b4      	bne.n	8016fae <read_submessage_format+0x56>
 8017044:	e7b5      	b.n	8016fb2 <read_submessage_format+0x5a>
 8017046:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801704a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801704c:	1a52      	subs	r2, r2, r1
 801704e:	eba8 0803 	sub.w	r8, r8, r3
 8017052:	a80c      	add	r0, sp, #48	@ 0x30
 8017054:	f7f4 fd32 	bl	800babc <ucdr_init_buffer>
 8017058:	44a8      	add	r8, r5
 801705a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801705e:	a80c      	add	r0, sp, #48	@ 0x30
 8017060:	f7f4 fd00 	bl	800ba64 <ucdr_set_on_full_buffer_callback>
 8017064:	fa1f f888 	uxth.w	r8, r8
 8017068:	ab0c      	add	r3, sp, #48	@ 0x30
 801706a:	9300      	str	r3, [sp, #0]
 801706c:	f8cd 8004 	str.w	r8, [sp, #4]
 8017070:	2108      	movs	r1, #8
 8017072:	f88d 1016 	strb.w	r1, [sp, #22]
 8017076:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801707a:	9102      	str	r1, [sp, #8]
 801707c:	ab06      	add	r3, sp, #24
 801707e:	4632      	mov	r2, r6
 8017080:	9905      	ldr	r1, [sp, #20]
 8017082:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8017086:	4638      	mov	r0, r7
 8017088:	47b0      	blx	r6
 801708a:	2301      	movs	r3, #1
 801708c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017090:	e7c4      	b.n	801701c <read_submessage_format+0xc4>
 8017092:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8017096:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017098:	1a52      	subs	r2, r2, r1
 801709a:	a80c      	add	r0, sp, #48	@ 0x30
 801709c:	eba8 0803 	sub.w	r8, r8, r3
 80170a0:	f7f4 fd0c 	bl	800babc <ucdr_init_buffer>
 80170a4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80170a8:	a80c      	add	r0, sp, #48	@ 0x30
 80170aa:	f7f4 fcdb 	bl	800ba64 <ucdr_set_on_full_buffer_callback>
 80170ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80170b0:	9300      	str	r3, [sp, #0]
 80170b2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80170b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80170ba:	44a8      	add	r8, r5
 80170bc:	fa1f f888 	uxth.w	r8, r8
 80170c0:	f8cd 8004 	str.w	r8, [sp, #4]
 80170c4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80170c8:	2107      	movs	r1, #7
 80170ca:	f88d 1016 	strb.w	r1, [sp, #22]
 80170ce:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80170d2:	9102      	str	r1, [sp, #8]
 80170d4:	4632      	mov	r2, r6
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80170dc:	9905      	ldr	r1, [sp, #20]
 80170de:	4638      	mov	r0, r7
 80170e0:	47b0      	blx	r6
 80170e2:	2301      	movs	r3, #1
 80170e4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80170e8:	e7a6      	b.n	8017038 <read_submessage_format+0xe0>
 80170ea:	bf00      	nop

080170ec <uxr_seq_num_add>:
 80170ec:	4408      	add	r0, r1
 80170ee:	b280      	uxth	r0, r0
 80170f0:	4770      	bx	lr
 80170f2:	bf00      	nop

080170f4 <uxr_seq_num_sub>:
 80170f4:	1a40      	subs	r0, r0, r1
 80170f6:	b280      	uxth	r0, r0
 80170f8:	4770      	bx	lr
 80170fa:	bf00      	nop

080170fc <uxr_seq_num_cmp>:
 80170fc:	4288      	cmp	r0, r1
 80170fe:	d011      	beq.n	8017124 <uxr_seq_num_cmp+0x28>
 8017100:	d309      	bcc.n	8017116 <uxr_seq_num_cmp+0x1a>
 8017102:	4288      	cmp	r0, r1
 8017104:	d910      	bls.n	8017128 <uxr_seq_num_cmp+0x2c>
 8017106:	1a40      	subs	r0, r0, r1
 8017108:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801710c:	bfd4      	ite	le
 801710e:	2001      	movle	r0, #1
 8017110:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8017114:	4770      	bx	lr
 8017116:	1a0b      	subs	r3, r1, r0
 8017118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801711c:	daf1      	bge.n	8017102 <uxr_seq_num_cmp+0x6>
 801711e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017122:	4770      	bx	lr
 8017124:	2000      	movs	r0, #0
 8017126:	4770      	bx	lr
 8017128:	2001      	movs	r0, #1
 801712a:	4770      	bx	lr

0801712c <uxr_init_framing_io>:
 801712c:	2300      	movs	r3, #0
 801712e:	7041      	strb	r1, [r0, #1]
 8017130:	7003      	strb	r3, [r0, #0]
 8017132:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8017134:	4770      	bx	lr
 8017136:	bf00      	nop

08017138 <uxr_write_framed_msg>:
 8017138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713c:	4617      	mov	r7, r2
 801713e:	7842      	ldrb	r2, [r0, #1]
 8017140:	b083      	sub	sp, #12
 8017142:	460e      	mov	r6, r1
 8017144:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8017148:	469a      	mov	sl, r3
 801714a:	2901      	cmp	r1, #1
 801714c:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8017150:	4604      	mov	r4, r0
 8017152:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8017156:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801715a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801715e:	f240 8137 	bls.w	80173d0 <uxr_write_framed_msg+0x298>
 8017162:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8017166:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801716a:	2901      	cmp	r1, #1
 801716c:	f04f 0202 	mov.w	r2, #2
 8017170:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017174:	f240 808f 	bls.w	8017296 <uxr_write_framed_msg+0x15e>
 8017178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801717a:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801717e:	b2dd      	uxtb	r5, r3
 8017180:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017184:	2203      	movs	r2, #3
 8017186:	2901      	cmp	r1, #1
 8017188:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801718c:	f240 809a 	bls.w	80172c4 <uxr_write_framed_msg+0x18c>
 8017190:	18a1      	adds	r1, r4, r2
 8017192:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017194:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8017198:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801719c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80171a0:	3201      	adds	r2, #1
 80171a2:	2801      	cmp	r0, #1
 80171a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80171a8:	f240 80a0 	bls.w	80172ec <uxr_write_framed_msg+0x1b4>
 80171ac:	18a0      	adds	r0, r4, r2
 80171ae:	3201      	adds	r2, #1
 80171b0:	b2d2      	uxtb	r2, r2
 80171b2:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80171b6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	f000 80a9 	beq.w	8017312 <uxr_write_framed_msg+0x1da>
 80171c0:	f04f 0900 	mov.w	r9, #0
 80171c4:	46c8      	mov	r8, r9
 80171c6:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80171ca:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80171ce:	2901      	cmp	r1, #1
 80171d0:	f240 80c3 	bls.w	801735a <uxr_write_framed_msg+0x222>
 80171d4:	2a29      	cmp	r2, #41	@ 0x29
 80171d6:	f200 809f 	bhi.w	8017318 <uxr_write_framed_msg+0x1e0>
 80171da:	18a1      	adds	r1, r4, r2
 80171dc:	3201      	adds	r2, #1
 80171de:	b2d2      	uxtb	r2, r2
 80171e0:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80171e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80171e8:	ea89 0303 	eor.w	r3, r9, r3
 80171ec:	498c      	ldr	r1, [pc, #560]	@ (8017420 <uxr_write_framed_msg+0x2e8>)
 80171ee:	b2db      	uxtb	r3, r3
 80171f0:	f108 0801 	add.w	r8, r8, #1
 80171f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80171f8:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80171fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80171fe:	4543      	cmp	r3, r8
 8017200:	d8e1      	bhi.n	80171c6 <uxr_write_framed_msg+0x8e>
 8017202:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017206:	fa5f f889 	uxtb.w	r8, r9
 801720a:	9301      	str	r3, [sp, #4]
 801720c:	f04f 0900 	mov.w	r9, #0
 8017210:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8017214:	fa5f f18a 	uxtb.w	r1, sl
 8017218:	2901      	cmp	r1, #1
 801721a:	d921      	bls.n	8017260 <uxr_write_framed_msg+0x128>
 801721c:	2a29      	cmp	r2, #41	@ 0x29
 801721e:	f240 80af 	bls.w	8017380 <uxr_write_framed_msg+0x248>
 8017222:	2500      	movs	r5, #0
 8017224:	e000      	b.n	8017228 <uxr_write_framed_msg+0xf0>
 8017226:	b160      	cbz	r0, 8017242 <uxr_write_framed_msg+0x10a>
 8017228:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801722c:	1b52      	subs	r2, r2, r5
 801722e:	465b      	mov	r3, fp
 8017230:	4421      	add	r1, r4
 8017232:	4638      	mov	r0, r7
 8017234:	47b0      	blx	r6
 8017236:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801723a:	4405      	add	r5, r0
 801723c:	4295      	cmp	r5, r2
 801723e:	d3f2      	bcc.n	8017226 <uxr_write_framed_msg+0xee>
 8017240:	d003      	beq.n	801724a <uxr_write_framed_msg+0x112>
 8017242:	2000      	movs	r0, #0
 8017244:	b003      	add	sp, #12
 8017246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801724a:	fa5f f18a 	uxtb.w	r1, sl
 801724e:	f04f 0300 	mov.w	r3, #0
 8017252:	2901      	cmp	r1, #1
 8017254:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017258:	f04f 0200 	mov.w	r2, #0
 801725c:	f200 8090 	bhi.w	8017380 <uxr_write_framed_msg+0x248>
 8017260:	1c51      	adds	r1, r2, #1
 8017262:	b2c9      	uxtb	r1, r1
 8017264:	2929      	cmp	r1, #41	@ 0x29
 8017266:	d8dc      	bhi.n	8017222 <uxr_write_framed_msg+0xea>
 8017268:	18a5      	adds	r5, r4, r2
 801726a:	4421      	add	r1, r4
 801726c:	3202      	adds	r2, #2
 801726e:	f088 0820 	eor.w	r8, r8, #32
 8017272:	4648      	mov	r0, r9
 8017274:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8017278:	b2d2      	uxtb	r2, r2
 801727a:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801727e:	f04f 0901 	mov.w	r9, #1
 8017282:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8017286:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801728a:	2800      	cmp	r0, #0
 801728c:	f040 8085 	bne.w	801739a <uxr_write_framed_msg+0x262>
 8017290:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017294:	e7bc      	b.n	8017210 <uxr_write_framed_msg+0xd8>
 8017296:	4611      	mov	r1, r2
 8017298:	f04f 0c03 	mov.w	ip, #3
 801729c:	2204      	movs	r2, #4
 801729e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80172a0:	4421      	add	r1, r4
 80172a2:	b2dd      	uxtb	r5, r3
 80172a4:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80172a8:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80172ac:	44a4      	add	ip, r4
 80172ae:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80172b2:	f080 0020 	eor.w	r0, r0, #32
 80172b6:	2901      	cmp	r1, #1
 80172b8:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80172bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80172c0:	f63f af66 	bhi.w	8017190 <uxr_write_framed_msg+0x58>
 80172c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80172c6:	18a0      	adds	r0, r4, r2
 80172c8:	f085 0520 	eor.w	r5, r5, #32
 80172cc:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80172d0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80172d4:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80172d8:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80172dc:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80172e0:	3202      	adds	r2, #2
 80172e2:	2801      	cmp	r0, #1
 80172e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80172e8:	f63f af60 	bhi.w	80171ac <uxr_write_framed_msg+0x74>
 80172ec:	1c50      	adds	r0, r2, #1
 80172ee:	18a5      	adds	r5, r4, r2
 80172f0:	fa54 f080 	uxtab	r0, r4, r0
 80172f4:	3202      	adds	r2, #2
 80172f6:	f081 0120 	eor.w	r1, r1, #32
 80172fa:	b2d2      	uxtb	r2, r2
 80172fc:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017300:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8017304:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017308:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801730c:	2b00      	cmp	r3, #0
 801730e:	f47f af57 	bne.w	80171c0 <uxr_write_framed_msg+0x88>
 8017312:	9301      	str	r3, [sp, #4]
 8017314:	4698      	mov	r8, r3
 8017316:	e779      	b.n	801720c <uxr_write_framed_msg+0xd4>
 8017318:	2500      	movs	r5, #0
 801731a:	e001      	b.n	8017320 <uxr_write_framed_msg+0x1e8>
 801731c:	2800      	cmp	r0, #0
 801731e:	d090      	beq.n	8017242 <uxr_write_framed_msg+0x10a>
 8017320:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017324:	1b52      	subs	r2, r2, r5
 8017326:	465b      	mov	r3, fp
 8017328:	4421      	add	r1, r4
 801732a:	4638      	mov	r0, r7
 801732c:	47b0      	blx	r6
 801732e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017332:	4405      	add	r5, r0
 8017334:	4295      	cmp	r5, r2
 8017336:	d3f1      	bcc.n	801731c <uxr_write_framed_msg+0x1e4>
 8017338:	d183      	bne.n	8017242 <uxr_write_framed_msg+0x10a>
 801733a:	f04f 0300 	mov.w	r3, #0
 801733e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017342:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017344:	4543      	cmp	r3, r8
 8017346:	d964      	bls.n	8017412 <uxr_write_framed_msg+0x2da>
 8017348:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801734c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8017350:	2901      	cmp	r1, #1
 8017352:	f04f 0200 	mov.w	r2, #0
 8017356:	f63f af3d 	bhi.w	80171d4 <uxr_write_framed_msg+0x9c>
 801735a:	1c51      	adds	r1, r2, #1
 801735c:	b2c9      	uxtb	r1, r1
 801735e:	2929      	cmp	r1, #41	@ 0x29
 8017360:	d8da      	bhi.n	8017318 <uxr_write_framed_msg+0x1e0>
 8017362:	18a0      	adds	r0, r4, r2
 8017364:	4421      	add	r1, r4
 8017366:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801736a:	3202      	adds	r2, #2
 801736c:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8017370:	b2d2      	uxtb	r2, r2
 8017372:	f083 0020 	eor.w	r0, r3, #32
 8017376:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801737a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801737e:	e733      	b.n	80171e8 <uxr_write_framed_msg+0xb0>
 8017380:	18a1      	adds	r1, r4, r2
 8017382:	3201      	adds	r2, #1
 8017384:	4648      	mov	r0, r9
 8017386:	b2d2      	uxtb	r2, r2
 8017388:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801738c:	f04f 0901 	mov.w	r9, #1
 8017390:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017394:	2800      	cmp	r0, #0
 8017396:	f43f af7b 	beq.w	8017290 <uxr_write_framed_msg+0x158>
 801739a:	2500      	movs	r5, #0
 801739c:	e002      	b.n	80173a4 <uxr_write_framed_msg+0x26c>
 801739e:	2800      	cmp	r0, #0
 80173a0:	f43f af4f 	beq.w	8017242 <uxr_write_framed_msg+0x10a>
 80173a4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80173a8:	1b52      	subs	r2, r2, r5
 80173aa:	465b      	mov	r3, fp
 80173ac:	4421      	add	r1, r4
 80173ae:	4638      	mov	r0, r7
 80173b0:	47b0      	blx	r6
 80173b2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80173b6:	4405      	add	r5, r0
 80173b8:	4295      	cmp	r5, r2
 80173ba:	d3f0      	bcc.n	801739e <uxr_write_framed_msg+0x266>
 80173bc:	f47f af41 	bne.w	8017242 <uxr_write_framed_msg+0x10a>
 80173c0:	2300      	movs	r3, #0
 80173c2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80173c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173c8:	b298      	uxth	r0, r3
 80173ca:	b003      	add	sp, #12
 80173cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173d0:	217d      	movs	r1, #125	@ 0x7d
 80173d2:	f082 0220 	eor.w	r2, r2, #32
 80173d6:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80173da:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80173de:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80173e2:	2901      	cmp	r1, #1
 80173e4:	f04f 0203 	mov.w	r2, #3
 80173e8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80173ec:	d804      	bhi.n	80173f8 <uxr_write_framed_msg+0x2c0>
 80173ee:	4611      	mov	r1, r2
 80173f0:	f04f 0c04 	mov.w	ip, #4
 80173f4:	2205      	movs	r2, #5
 80173f6:	e752      	b.n	801729e <uxr_write_framed_msg+0x166>
 80173f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173fa:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80173fe:	b2dd      	uxtb	r5, r3
 8017400:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017404:	2204      	movs	r2, #4
 8017406:	2901      	cmp	r1, #1
 8017408:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801740c:	f63f aec0 	bhi.w	8017190 <uxr_write_framed_msg+0x58>
 8017410:	e758      	b.n	80172c4 <uxr_write_framed_msg+0x18c>
 8017412:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017416:	fa5f f889 	uxtb.w	r8, r9
 801741a:	9301      	str	r3, [sp, #4]
 801741c:	2200      	movs	r2, #0
 801741e:	e6f5      	b.n	801720c <uxr_write_framed_msg+0xd4>
 8017420:	0801ad5c 	.word	0x0801ad5c

08017424 <uxr_framing_read_transport>:
 8017424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017428:	4604      	mov	r4, r0
 801742a:	b083      	sub	sp, #12
 801742c:	461f      	mov	r7, r3
 801742e:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8017432:	4689      	mov	r9, r1
 8017434:	4692      	mov	sl, r2
 8017436:	f7f8 fe51 	bl	80100dc <uxr_millis>
 801743a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801743e:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8017442:	42b3      	cmp	r3, r6
 8017444:	4680      	mov	r8, r0
 8017446:	d061      	beq.n	801750c <uxr_framing_read_transport+0xe8>
 8017448:	d81c      	bhi.n	8017484 <uxr_framing_read_transport+0x60>
 801744a:	1e75      	subs	r5, r6, #1
 801744c:	1aed      	subs	r5, r5, r3
 801744e:	b2ed      	uxtb	r5, r5
 8017450:	2600      	movs	r6, #0
 8017452:	455d      	cmp	r5, fp
 8017454:	d81f      	bhi.n	8017496 <uxr_framing_read_transport+0x72>
 8017456:	19ab      	adds	r3, r5, r6
 8017458:	455b      	cmp	r3, fp
 801745a:	bf84      	itt	hi
 801745c:	ebab 0605 	subhi.w	r6, fp, r5
 8017460:	b2f6      	uxtbhi	r6, r6
 8017462:	b9ed      	cbnz	r5, 80174a0 <uxr_framing_read_transport+0x7c>
 8017464:	f04f 0b00 	mov.w	fp, #0
 8017468:	f7f8 fe38 	bl	80100dc <uxr_millis>
 801746c:	683b      	ldr	r3, [r7, #0]
 801746e:	eba0 0808 	sub.w	r8, r0, r8
 8017472:	eba3 0308 	sub.w	r3, r3, r8
 8017476:	4658      	mov	r0, fp
 8017478:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801747c:	603b      	str	r3, [r7, #0]
 801747e:	b003      	add	sp, #12
 8017480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017484:	2e00      	cmp	r6, #0
 8017486:	d049      	beq.n	801751c <uxr_framing_read_transport+0xf8>
 8017488:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 801748c:	b2ed      	uxtb	r5, r5
 801748e:	3e01      	subs	r6, #1
 8017490:	455d      	cmp	r5, fp
 8017492:	b2f6      	uxtb	r6, r6
 8017494:	d9df      	bls.n	8017456 <uxr_framing_read_transport+0x32>
 8017496:	fa5f f58b 	uxtb.w	r5, fp
 801749a:	2600      	movs	r6, #0
 801749c:	2d00      	cmp	r5, #0
 801749e:	d0e1      	beq.n	8017464 <uxr_framing_read_transport+0x40>
 80174a0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80174a4:	3102      	adds	r1, #2
 80174a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174a8:	9300      	str	r3, [sp, #0]
 80174aa:	683b      	ldr	r3, [r7, #0]
 80174ac:	4421      	add	r1, r4
 80174ae:	462a      	mov	r2, r5
 80174b0:	4650      	mov	r0, sl
 80174b2:	47c8      	blx	r9
 80174b4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80174b8:	4a1a      	ldr	r2, [pc, #104]	@ (8017524 <uxr_framing_read_transport+0x100>)
 80174ba:	4403      	add	r3, r0
 80174bc:	0859      	lsrs	r1, r3, #1
 80174be:	fba2 2101 	umull	r2, r1, r2, r1
 80174c2:	0889      	lsrs	r1, r1, #2
 80174c4:	222a      	movs	r2, #42	@ 0x2a
 80174c6:	fb02 3111 	mls	r1, r2, r1, r3
 80174ca:	4683      	mov	fp, r0
 80174cc:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80174d0:	2800      	cmp	r0, #0
 80174d2:	d0c7      	beq.n	8017464 <uxr_framing_read_transport+0x40>
 80174d4:	42a8      	cmp	r0, r5
 80174d6:	d1c7      	bne.n	8017468 <uxr_framing_read_transport+0x44>
 80174d8:	2e00      	cmp	r6, #0
 80174da:	d0c5      	beq.n	8017468 <uxr_framing_read_transport+0x44>
 80174dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174de:	9300      	str	r3, [sp, #0]
 80174e0:	3102      	adds	r1, #2
 80174e2:	4632      	mov	r2, r6
 80174e4:	4421      	add	r1, r4
 80174e6:	2300      	movs	r3, #0
 80174e8:	4650      	mov	r0, sl
 80174ea:	47c8      	blx	r9
 80174ec:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80174f0:	4a0c      	ldr	r2, [pc, #48]	@ (8017524 <uxr_framing_read_transport+0x100>)
 80174f2:	180b      	adds	r3, r1, r0
 80174f4:	0859      	lsrs	r1, r3, #1
 80174f6:	fba2 1201 	umull	r1, r2, r2, r1
 80174fa:	0892      	lsrs	r2, r2, #2
 80174fc:	212a      	movs	r1, #42	@ 0x2a
 80174fe:	fb01 3312 	mls	r3, r1, r2, r3
 8017502:	eb00 0b05 	add.w	fp, r0, r5
 8017506:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801750a:	e7ad      	b.n	8017468 <uxr_framing_read_transport+0x44>
 801750c:	2600      	movs	r6, #0
 801750e:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8017512:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8017514:	d9bf      	bls.n	8017496 <uxr_framing_read_transport+0x72>
 8017516:	2102      	movs	r1, #2
 8017518:	2529      	movs	r5, #41	@ 0x29
 801751a:	e7c4      	b.n	80174a6 <uxr_framing_read_transport+0x82>
 801751c:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8017520:	b2ed      	uxtb	r5, r5
 8017522:	e796      	b.n	8017452 <uxr_framing_read_transport+0x2e>
 8017524:	30c30c31 	.word	0x30c30c31

08017528 <uxr_read_framed_msg>:
 8017528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801752c:	461e      	mov	r6, r3
 801752e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8017532:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8017536:	429d      	cmp	r5, r3
 8017538:	b083      	sub	sp, #12
 801753a:	4604      	mov	r4, r0
 801753c:	4688      	mov	r8, r1
 801753e:	4691      	mov	r9, r2
 8017540:	f000 8188 	beq.w	8017854 <uxr_read_framed_msg+0x32c>
 8017544:	7823      	ldrb	r3, [r4, #0]
 8017546:	4dc1      	ldr	r5, [pc, #772]	@ (801784c <uxr_read_framed_msg+0x324>)
 8017548:	4fc1      	ldr	r7, [pc, #772]	@ (8017850 <uxr_read_framed_msg+0x328>)
 801754a:	2b07      	cmp	r3, #7
 801754c:	d8fd      	bhi.n	801754a <uxr_read_framed_msg+0x22>
 801754e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017552:	0115      	.short	0x0115
 8017554:	00d600f6 	.word	0x00d600f6
 8017558:	009000b9 	.word	0x009000b9
 801755c:	0030004d 	.word	0x0030004d
 8017560:	0008      	.short	0x0008
 8017562:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017566:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801756a:	4299      	cmp	r1, r3
 801756c:	f000 814a 	beq.w	8017804 <uxr_read_framed_msg+0x2dc>
 8017570:	18e2      	adds	r2, r4, r3
 8017572:	7892      	ldrb	r2, [r2, #2]
 8017574:	2a7d      	cmp	r2, #125	@ 0x7d
 8017576:	f000 8199 	beq.w	80178ac <uxr_read_framed_msg+0x384>
 801757a:	3301      	adds	r3, #1
 801757c:	0858      	lsrs	r0, r3, #1
 801757e:	fba5 1000 	umull	r1, r0, r5, r0
 8017582:	0880      	lsrs	r0, r0, #2
 8017584:	212a      	movs	r1, #42	@ 0x2a
 8017586:	fb01 3310 	mls	r3, r1, r0, r3
 801758a:	2a7e      	cmp	r2, #126	@ 0x7e
 801758c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017590:	f000 8252 	beq.w	8017a38 <uxr_read_framed_msg+0x510>
 8017594:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8017596:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8017598:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801759c:	b29b      	uxth	r3, r3
 801759e:	2200      	movs	r2, #0
 80175a0:	4299      	cmp	r1, r3
 80175a2:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80175a4:	7022      	strb	r2, [r4, #0]
 80175a6:	f000 8179 	beq.w	801789c <uxr_read_framed_msg+0x374>
 80175aa:	2000      	movs	r0, #0
 80175ac:	b003      	add	sp, #12
 80175ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80175b6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80175ba:	4299      	cmp	r1, r3
 80175bc:	f000 8131 	beq.w	8017822 <uxr_read_framed_msg+0x2fa>
 80175c0:	18e2      	adds	r2, r4, r3
 80175c2:	7890      	ldrb	r0, [r2, #2]
 80175c4:	287d      	cmp	r0, #125	@ 0x7d
 80175c6:	f000 8190 	beq.w	80178ea <uxr_read_framed_msg+0x3c2>
 80175ca:	3301      	adds	r3, #1
 80175cc:	085a      	lsrs	r2, r3, #1
 80175ce:	fba5 1202 	umull	r1, r2, r5, r2
 80175d2:	0892      	lsrs	r2, r2, #2
 80175d4:	212a      	movs	r1, #42	@ 0x2a
 80175d6:	fb01 3312 	mls	r3, r1, r2, r3
 80175da:	287e      	cmp	r0, #126	@ 0x7e
 80175dc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80175e0:	f000 821a 	beq.w	8017a18 <uxr_read_framed_msg+0x4f0>
 80175e4:	2307      	movs	r3, #7
 80175e6:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80175e8:	7023      	strb	r3, [r4, #0]
 80175ea:	e7ae      	b.n	801754a <uxr_read_framed_msg+0x22>
 80175ec:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80175ee:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80175f2:	459e      	cmp	lr, r3
 80175f4:	d938      	bls.n	8017668 <uxr_read_framed_msg+0x140>
 80175f6:	ee07 8a90 	vmov	s15, r8
 80175fa:	212a      	movs	r1, #42	@ 0x2a
 80175fc:	e020      	b.n	8017640 <uxr_read_framed_msg+0x118>
 80175fe:	f89b c002 	ldrb.w	ip, [fp, #2]
 8017602:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8017606:	f000 80d4 	beq.w	80177b2 <uxr_read_framed_msg+0x28a>
 801760a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801760e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017612:	f000 8219 	beq.w	8017a48 <uxr_read_framed_msg+0x520>
 8017616:	f806 c003 	strb.w	ip, [r6, r3]
 801761a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801761e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017620:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017624:	ea8a 000c 	eor.w	r0, sl, ip
 8017628:	b2c0      	uxtb	r0, r0
 801762a:	3301      	adds	r3, #1
 801762c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8017630:	b29b      	uxth	r3, r3
 8017632:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8017636:	4573      	cmp	r3, lr
 8017638:	8663      	strh	r3, [r4, #50]	@ 0x32
 801763a:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801763c:	f080 8120 	bcs.w	8017880 <uxr_read_framed_msg+0x358>
 8017640:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8017644:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017648:	f100 0c01 	add.w	ip, r0, #1
 801764c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017650:	fba5 8202 	umull	r8, r2, r5, r2
 8017654:	0892      	lsrs	r2, r2, #2
 8017656:	4582      	cmp	sl, r0
 8017658:	eb04 0b00 	add.w	fp, r4, r0
 801765c:	fb01 c212 	mls	r2, r1, r2, ip
 8017660:	d1cd      	bne.n	80175fe <uxr_read_framed_msg+0xd6>
 8017662:	ee17 8a90 	vmov	r8, s15
 8017666:	459e      	cmp	lr, r3
 8017668:	f040 8111 	bne.w	801788e <uxr_read_framed_msg+0x366>
 801766c:	2306      	movs	r3, #6
 801766e:	7023      	strb	r3, [r4, #0]
 8017670:	e76b      	b.n	801754a <uxr_read_framed_msg+0x22>
 8017672:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017676:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801767a:	4298      	cmp	r0, r3
 801767c:	f000 80c2 	beq.w	8017804 <uxr_read_framed_msg+0x2dc>
 8017680:	18e2      	adds	r2, r4, r3
 8017682:	7891      	ldrb	r1, [r2, #2]
 8017684:	297d      	cmp	r1, #125	@ 0x7d
 8017686:	f000 814c 	beq.w	8017922 <uxr_read_framed_msg+0x3fa>
 801768a:	3301      	adds	r3, #1
 801768c:	085a      	lsrs	r2, r3, #1
 801768e:	fba5 0202 	umull	r0, r2, r5, r2
 8017692:	0892      	lsrs	r2, r2, #2
 8017694:	202a      	movs	r0, #42	@ 0x2a
 8017696:	fb00 3312 	mls	r3, r0, r2, r3
 801769a:	297e      	cmp	r1, #126	@ 0x7e
 801769c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80176a0:	f000 81ca 	beq.w	8017a38 <uxr_read_framed_msg+0x510>
 80176a4:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80176a6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80176aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80176ac:	b29b      	uxth	r3, r3
 80176ae:	2000      	movs	r0, #0
 80176b0:	428b      	cmp	r3, r1
 80176b2:	8623      	strh	r3, [r4, #48]	@ 0x30
 80176b4:	8660      	strh	r0, [r4, #50]	@ 0x32
 80176b6:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80176b8:	f240 80df 	bls.w	801787a <uxr_read_framed_msg+0x352>
 80176bc:	7020      	strb	r0, [r4, #0]
 80176be:	b003      	add	sp, #12
 80176c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176c4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80176c8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80176cc:	4299      	cmp	r1, r3
 80176ce:	f000 80a8 	beq.w	8017822 <uxr_read_framed_msg+0x2fa>
 80176d2:	18e2      	adds	r2, r4, r3
 80176d4:	7890      	ldrb	r0, [r2, #2]
 80176d6:	287d      	cmp	r0, #125	@ 0x7d
 80176d8:	f000 8164 	beq.w	80179a4 <uxr_read_framed_msg+0x47c>
 80176dc:	3301      	adds	r3, #1
 80176de:	085a      	lsrs	r2, r3, #1
 80176e0:	fba5 1202 	umull	r1, r2, r5, r2
 80176e4:	0892      	lsrs	r2, r2, #2
 80176e6:	212a      	movs	r1, #42	@ 0x2a
 80176e8:	fb01 3312 	mls	r3, r1, r2, r3
 80176ec:	287e      	cmp	r0, #126	@ 0x7e
 80176ee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80176f2:	f000 8191 	beq.w	8017a18 <uxr_read_framed_msg+0x4f0>
 80176f6:	2304      	movs	r3, #4
 80176f8:	8620      	strh	r0, [r4, #48]	@ 0x30
 80176fa:	7023      	strb	r3, [r4, #0]
 80176fc:	e725      	b.n	801754a <uxr_read_framed_msg+0x22>
 80176fe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017702:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017706:	4290      	cmp	r0, r2
 8017708:	f000 80b3 	beq.w	8017872 <uxr_read_framed_msg+0x34a>
 801770c:	18a3      	adds	r3, r4, r2
 801770e:	7899      	ldrb	r1, [r3, #2]
 8017710:	297d      	cmp	r1, #125	@ 0x7d
 8017712:	f000 8164 	beq.w	80179de <uxr_read_framed_msg+0x4b6>
 8017716:	3201      	adds	r2, #1
 8017718:	0850      	lsrs	r0, r2, #1
 801771a:	fba5 3000 	umull	r3, r0, r5, r0
 801771e:	0880      	lsrs	r0, r0, #2
 8017720:	232a      	movs	r3, #42	@ 0x2a
 8017722:	fb03 2210 	mls	r2, r3, r0, r2
 8017726:	297e      	cmp	r1, #126	@ 0x7e
 8017728:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801772c:	f000 8188 	beq.w	8017a40 <uxr_read_framed_msg+0x518>
 8017730:	7863      	ldrb	r3, [r4, #1]
 8017732:	428b      	cmp	r3, r1
 8017734:	bf0c      	ite	eq
 8017736:	2303      	moveq	r3, #3
 8017738:	2300      	movne	r3, #0
 801773a:	7023      	strb	r3, [r4, #0]
 801773c:	e705      	b.n	801754a <uxr_read_framed_msg+0x22>
 801773e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017742:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017746:	2200      	movs	r2, #0
 8017748:	4299      	cmp	r1, r3
 801774a:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801774e:	d06c      	beq.n	801782a <uxr_read_framed_msg+0x302>
 8017750:	18e2      	adds	r2, r4, r3
 8017752:	7890      	ldrb	r0, [r2, #2]
 8017754:	287d      	cmp	r0, #125	@ 0x7d
 8017756:	f000 8101 	beq.w	801795c <uxr_read_framed_msg+0x434>
 801775a:	3301      	adds	r3, #1
 801775c:	085a      	lsrs	r2, r3, #1
 801775e:	fba5 1202 	umull	r1, r2, r5, r2
 8017762:	0892      	lsrs	r2, r2, #2
 8017764:	212a      	movs	r1, #42	@ 0x2a
 8017766:	fb01 3312 	mls	r3, r1, r2, r3
 801776a:	287e      	cmp	r0, #126	@ 0x7e
 801776c:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8017770:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017774:	d059      	beq.n	801782a <uxr_read_framed_msg+0x302>
 8017776:	2302      	movs	r3, #2
 8017778:	7023      	strb	r3, [r4, #0]
 801777a:	e6e6      	b.n	801754a <uxr_read_framed_msg+0x22>
 801777c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017780:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017784:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8017788:	1c51      	adds	r1, r2, #1
 801778a:	084b      	lsrs	r3, r1, #1
 801778c:	fba5 c303 	umull	ip, r3, r5, r3
 8017790:	089b      	lsrs	r3, r3, #2
 8017792:	fb0e 1313 	mls	r3, lr, r3, r1
 8017796:	4592      	cmp	sl, r2
 8017798:	eb04 0002 	add.w	r0, r4, r2
 801779c:	b2da      	uxtb	r2, r3
 801779e:	f43f af04 	beq.w	80175aa <uxr_read_framed_msg+0x82>
 80177a2:	7883      	ldrb	r3, [r0, #2]
 80177a4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80177a8:	2b7e      	cmp	r3, #126	@ 0x7e
 80177aa:	d1ed      	bne.n	8017788 <uxr_read_framed_msg+0x260>
 80177ac:	2301      	movs	r3, #1
 80177ae:	7023      	strb	r3, [r4, #0]
 80177b0:	e6cb      	b.n	801754a <uxr_read_framed_msg+0x22>
 80177b2:	f100 0c01 	add.w	ip, r0, #1
 80177b6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80177ba:	fba5 8202 	umull	r8, r2, r5, r2
 80177be:	0892      	lsrs	r2, r2, #2
 80177c0:	fb01 c212 	mls	r2, r1, r2, ip
 80177c4:	eb04 0c02 	add.w	ip, r4, r2
 80177c8:	b2d2      	uxtb	r2, r2
 80177ca:	4592      	cmp	sl, r2
 80177cc:	f100 0002 	add.w	r0, r0, #2
 80177d0:	f43f af47 	beq.w	8017662 <uxr_read_framed_msg+0x13a>
 80177d4:	0842      	lsrs	r2, r0, #1
 80177d6:	f89c a002 	ldrb.w	sl, [ip, #2]
 80177da:	fba5 8202 	umull	r8, r2, r5, r2
 80177de:	0892      	lsrs	r2, r2, #2
 80177e0:	fb01 0012 	mls	r0, r1, r2, r0
 80177e4:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80177e8:	f08a 0c20 	eor.w	ip, sl, #32
 80177ec:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80177f0:	f47f af11 	bne.w	8017616 <uxr_read_framed_msg+0xee>
 80177f4:	459e      	cmp	lr, r3
 80177f6:	ee17 8a90 	vmov	r8, s15
 80177fa:	f43f af37 	beq.w	801766c <uxr_read_framed_msg+0x144>
 80177fe:	2301      	movs	r3, #1
 8017800:	7023      	strb	r3, [r4, #0]
 8017802:	e6a2      	b.n	801754a <uxr_read_framed_msg+0x22>
 8017804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017806:	9300      	str	r3, [sp, #0]
 8017808:	2301      	movs	r3, #1
 801780a:	9301      	str	r3, [sp, #4]
 801780c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801780e:	464a      	mov	r2, r9
 8017810:	4641      	mov	r1, r8
 8017812:	4620      	mov	r0, r4
 8017814:	f7ff fe06 	bl	8017424 <uxr_framing_read_transport>
 8017818:	2800      	cmp	r0, #0
 801781a:	f43f aec6 	beq.w	80175aa <uxr_read_framed_msg+0x82>
 801781e:	7823      	ldrb	r3, [r4, #0]
 8017820:	e693      	b.n	801754a <uxr_read_framed_msg+0x22>
 8017822:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017824:	9300      	str	r3, [sp, #0]
 8017826:	2302      	movs	r3, #2
 8017828:	e7ef      	b.n	801780a <uxr_read_framed_msg+0x2e2>
 801782a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801782c:	9300      	str	r3, [sp, #0]
 801782e:	2304      	movs	r3, #4
 8017830:	9301      	str	r3, [sp, #4]
 8017832:	464a      	mov	r2, r9
 8017834:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017836:	4641      	mov	r1, r8
 8017838:	4620      	mov	r0, r4
 801783a:	f7ff fdf3 	bl	8017424 <uxr_framing_read_transport>
 801783e:	2800      	cmp	r0, #0
 8017840:	d1ed      	bne.n	801781e <uxr_read_framed_msg+0x2f6>
 8017842:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017846:	2b7e      	cmp	r3, #126	@ 0x7e
 8017848:	d0e9      	beq.n	801781e <uxr_read_framed_msg+0x2f6>
 801784a:	e6ae      	b.n	80175aa <uxr_read_framed_msg+0x82>
 801784c:	30c30c31 	.word	0x30c30c31
 8017850:	0801ad5c 	.word	0x0801ad5c
 8017854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017856:	9300      	str	r3, [sp, #0]
 8017858:	2305      	movs	r3, #5
 801785a:	9301      	str	r3, [sp, #4]
 801785c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801785e:	f7ff fde1 	bl	8017424 <uxr_framing_read_transport>
 8017862:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017866:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801786a:	429a      	cmp	r2, r3
 801786c:	f43f ae9d 	beq.w	80175aa <uxr_read_framed_msg+0x82>
 8017870:	e668      	b.n	8017544 <uxr_read_framed_msg+0x1c>
 8017872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017874:	9300      	str	r3, [sp, #0]
 8017876:	2303      	movs	r3, #3
 8017878:	e7c7      	b.n	801780a <uxr_read_framed_msg+0x2e2>
 801787a:	2305      	movs	r3, #5
 801787c:	7023      	strb	r3, [r4, #0]
 801787e:	e664      	b.n	801754a <uxr_read_framed_msg+0x22>
 8017880:	ee17 8a90 	vmov	r8, s15
 8017884:	f43f aef2 	beq.w	801766c <uxr_read_framed_msg+0x144>
 8017888:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801788c:	d08e      	beq.n	80177ac <uxr_read_framed_msg+0x284>
 801788e:	ebae 0303 	sub.w	r3, lr, r3
 8017892:	3302      	adds	r3, #2
 8017894:	9301      	str	r3, [sp, #4]
 8017896:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017898:	9300      	str	r3, [sp, #0]
 801789a:	e7b7      	b.n	801780c <uxr_read_framed_msg+0x2e4>
 801789c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801789e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80178a2:	7013      	strb	r3, [r2, #0]
 80178a4:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80178a6:	b003      	add	sp, #12
 80178a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178ac:	f103 0c01 	add.w	ip, r3, #1
 80178b0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80178b4:	fba5 0202 	umull	r0, r2, r5, r2
 80178b8:	0892      	lsrs	r2, r2, #2
 80178ba:	202a      	movs	r0, #42	@ 0x2a
 80178bc:	fb00 c212 	mls	r2, r0, r2, ip
 80178c0:	fa5f fc82 	uxtb.w	ip, r2
 80178c4:	4561      	cmp	r1, ip
 80178c6:	d09d      	beq.n	8017804 <uxr_read_framed_msg+0x2dc>
 80178c8:	3302      	adds	r3, #2
 80178ca:	4422      	add	r2, r4
 80178cc:	0859      	lsrs	r1, r3, #1
 80178ce:	7892      	ldrb	r2, [r2, #2]
 80178d0:	fba5 c101 	umull	ip, r1, r5, r1
 80178d4:	0889      	lsrs	r1, r1, #2
 80178d6:	fb00 3311 	mls	r3, r0, r1, r3
 80178da:	2a7e      	cmp	r2, #126	@ 0x7e
 80178dc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80178e0:	f000 80aa 	beq.w	8017a38 <uxr_read_framed_msg+0x510>
 80178e4:	f082 0220 	eor.w	r2, r2, #32
 80178e8:	e654      	b.n	8017594 <uxr_read_framed_msg+0x6c>
 80178ea:	1c58      	adds	r0, r3, #1
 80178ec:	0842      	lsrs	r2, r0, #1
 80178ee:	fba5 c202 	umull	ip, r2, r5, r2
 80178f2:	0892      	lsrs	r2, r2, #2
 80178f4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80178f8:	fb0c 0212 	mls	r2, ip, r2, r0
 80178fc:	b2d0      	uxtb	r0, r2
 80178fe:	4281      	cmp	r1, r0
 8017900:	d08f      	beq.n	8017822 <uxr_read_framed_msg+0x2fa>
 8017902:	4422      	add	r2, r4
 8017904:	3302      	adds	r3, #2
 8017906:	7890      	ldrb	r0, [r2, #2]
 8017908:	085a      	lsrs	r2, r3, #1
 801790a:	fba5 1202 	umull	r1, r2, r5, r2
 801790e:	0892      	lsrs	r2, r2, #2
 8017910:	fb0c 3312 	mls	r3, ip, r2, r3
 8017914:	287e      	cmp	r0, #126	@ 0x7e
 8017916:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801791a:	d07d      	beq.n	8017a18 <uxr_read_framed_msg+0x4f0>
 801791c:	f080 0020 	eor.w	r0, r0, #32
 8017920:	e660      	b.n	80175e4 <uxr_read_framed_msg+0xbc>
 8017922:	1c59      	adds	r1, r3, #1
 8017924:	084a      	lsrs	r2, r1, #1
 8017926:	fba5 c202 	umull	ip, r2, r5, r2
 801792a:	0892      	lsrs	r2, r2, #2
 801792c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017930:	fb0c 1212 	mls	r2, ip, r2, r1
 8017934:	b2d1      	uxtb	r1, r2
 8017936:	4288      	cmp	r0, r1
 8017938:	f43f af64 	beq.w	8017804 <uxr_read_framed_msg+0x2dc>
 801793c:	4422      	add	r2, r4
 801793e:	3302      	adds	r3, #2
 8017940:	7891      	ldrb	r1, [r2, #2]
 8017942:	085a      	lsrs	r2, r3, #1
 8017944:	fba5 0202 	umull	r0, r2, r5, r2
 8017948:	0892      	lsrs	r2, r2, #2
 801794a:	fb0c 3312 	mls	r3, ip, r2, r3
 801794e:	297e      	cmp	r1, #126	@ 0x7e
 8017950:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017954:	d070      	beq.n	8017a38 <uxr_read_framed_msg+0x510>
 8017956:	f081 0120 	eor.w	r1, r1, #32
 801795a:	e6a3      	b.n	80176a4 <uxr_read_framed_msg+0x17c>
 801795c:	f103 0c01 	add.w	ip, r3, #1
 8017960:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017964:	fba5 0202 	umull	r0, r2, r5, r2
 8017968:	0892      	lsrs	r2, r2, #2
 801796a:	202a      	movs	r0, #42	@ 0x2a
 801796c:	fb00 c212 	mls	r2, r0, r2, ip
 8017970:	fa5f fc82 	uxtb.w	ip, r2
 8017974:	4561      	cmp	r1, ip
 8017976:	f43f af58 	beq.w	801782a <uxr_read_framed_msg+0x302>
 801797a:	4422      	add	r2, r4
 801797c:	3302      	adds	r3, #2
 801797e:	7891      	ldrb	r1, [r2, #2]
 8017980:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017984:	085a      	lsrs	r2, r3, #1
 8017986:	fba5 c202 	umull	ip, r2, r5, r2
 801798a:	0892      	lsrs	r2, r2, #2
 801798c:	fb00 3312 	mls	r3, r0, r2, r3
 8017990:	297e      	cmp	r1, #126	@ 0x7e
 8017992:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017996:	f43f af48 	beq.w	801782a <uxr_read_framed_msg+0x302>
 801799a:	f081 0120 	eor.w	r1, r1, #32
 801799e:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80179a2:	e6e8      	b.n	8017776 <uxr_read_framed_msg+0x24e>
 80179a4:	1c58      	adds	r0, r3, #1
 80179a6:	0842      	lsrs	r2, r0, #1
 80179a8:	fba5 c202 	umull	ip, r2, r5, r2
 80179ac:	0892      	lsrs	r2, r2, #2
 80179ae:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80179b2:	fb0c 0212 	mls	r2, ip, r2, r0
 80179b6:	b2d0      	uxtb	r0, r2
 80179b8:	4281      	cmp	r1, r0
 80179ba:	f43f af32 	beq.w	8017822 <uxr_read_framed_msg+0x2fa>
 80179be:	4422      	add	r2, r4
 80179c0:	3302      	adds	r3, #2
 80179c2:	7890      	ldrb	r0, [r2, #2]
 80179c4:	085a      	lsrs	r2, r3, #1
 80179c6:	fba5 1202 	umull	r1, r2, r5, r2
 80179ca:	0892      	lsrs	r2, r2, #2
 80179cc:	fb0c 3312 	mls	r3, ip, r2, r3
 80179d0:	287e      	cmp	r0, #126	@ 0x7e
 80179d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80179d6:	d01f      	beq.n	8017a18 <uxr_read_framed_msg+0x4f0>
 80179d8:	f080 0020 	eor.w	r0, r0, #32
 80179dc:	e68b      	b.n	80176f6 <uxr_read_framed_msg+0x1ce>
 80179de:	1c51      	adds	r1, r2, #1
 80179e0:	084b      	lsrs	r3, r1, #1
 80179e2:	fba5 c303 	umull	ip, r3, r5, r3
 80179e6:	089b      	lsrs	r3, r3, #2
 80179e8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80179ec:	fb0c 1313 	mls	r3, ip, r3, r1
 80179f0:	b2d9      	uxtb	r1, r3
 80179f2:	4288      	cmp	r0, r1
 80179f4:	f43f af3d 	beq.w	8017872 <uxr_read_framed_msg+0x34a>
 80179f8:	3202      	adds	r2, #2
 80179fa:	4423      	add	r3, r4
 80179fc:	0850      	lsrs	r0, r2, #1
 80179fe:	789b      	ldrb	r3, [r3, #2]
 8017a00:	fba5 1000 	umull	r1, r0, r5, r0
 8017a04:	0880      	lsrs	r0, r0, #2
 8017a06:	fb0c 2210 	mls	r2, ip, r0, r2
 8017a0a:	2b7e      	cmp	r3, #126	@ 0x7e
 8017a0c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017a10:	d016      	beq.n	8017a40 <uxr_read_framed_msg+0x518>
 8017a12:	f083 0120 	eor.w	r1, r3, #32
 8017a16:	e68b      	b.n	8017730 <uxr_read_framed_msg+0x208>
 8017a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a1a:	9300      	str	r3, [sp, #0]
 8017a1c:	2302      	movs	r3, #2
 8017a1e:	9301      	str	r3, [sp, #4]
 8017a20:	464a      	mov	r2, r9
 8017a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a24:	4641      	mov	r1, r8
 8017a26:	4620      	mov	r0, r4
 8017a28:	f7ff fcfc 	bl	8017424 <uxr_framing_read_transport>
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	f47f aef6 	bne.w	801781e <uxr_read_framed_msg+0x2f6>
 8017a32:	2301      	movs	r3, #1
 8017a34:	7023      	strb	r3, [r4, #0]
 8017a36:	e588      	b.n	801754a <uxr_read_framed_msg+0x22>
 8017a38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a3a:	9300      	str	r3, [sp, #0]
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	e7ee      	b.n	8017a1e <uxr_read_framed_msg+0x4f6>
 8017a40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a42:	9300      	str	r3, [sp, #0]
 8017a44:	2303      	movs	r3, #3
 8017a46:	e7ea      	b.n	8017a1e <uxr_read_framed_msg+0x4f6>
 8017a48:	ee17 8a90 	vmov	r8, s15
 8017a4c:	e6ae      	b.n	80177ac <uxr_read_framed_msg+0x284>
 8017a4e:	bf00      	nop

08017a50 <rcl_get_default_domain_id>:
 8017a50:	b530      	push	{r4, r5, lr}
 8017a52:	b083      	sub	sp, #12
 8017a54:	2300      	movs	r3, #0
 8017a56:	9300      	str	r3, [sp, #0]
 8017a58:	b1d0      	cbz	r0, 8017a90 <rcl_get_default_domain_id+0x40>
 8017a5a:	4604      	mov	r4, r0
 8017a5c:	4669      	mov	r1, sp
 8017a5e:	4815      	ldr	r0, [pc, #84]	@ (8017ab4 <rcl_get_default_domain_id+0x64>)
 8017a60:	f7fc fc1a 	bl	8014298 <rcutils_get_env>
 8017a64:	4602      	mov	r2, r0
 8017a66:	b110      	cbz	r0, 8017a6e <rcl_get_default_domain_id+0x1e>
 8017a68:	2001      	movs	r0, #1
 8017a6a:	b003      	add	sp, #12
 8017a6c:	bd30      	pop	{r4, r5, pc}
 8017a6e:	9b00      	ldr	r3, [sp, #0]
 8017a70:	b18b      	cbz	r3, 8017a96 <rcl_get_default_domain_id+0x46>
 8017a72:	7818      	ldrb	r0, [r3, #0]
 8017a74:	2800      	cmp	r0, #0
 8017a76:	d0f8      	beq.n	8017a6a <rcl_get_default_domain_id+0x1a>
 8017a78:	a901      	add	r1, sp, #4
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	9201      	str	r2, [sp, #4]
 8017a7e:	f000 ff57 	bl	8018930 <strtoul>
 8017a82:	4605      	mov	r5, r0
 8017a84:	b150      	cbz	r0, 8017a9c <rcl_get_default_domain_id+0x4c>
 8017a86:	1c43      	adds	r3, r0, #1
 8017a88:	d00d      	beq.n	8017aa6 <rcl_get_default_domain_id+0x56>
 8017a8a:	6025      	str	r5, [r4, #0]
 8017a8c:	2000      	movs	r0, #0
 8017a8e:	e7ec      	b.n	8017a6a <rcl_get_default_domain_id+0x1a>
 8017a90:	200b      	movs	r0, #11
 8017a92:	b003      	add	sp, #12
 8017a94:	bd30      	pop	{r4, r5, pc}
 8017a96:	4618      	mov	r0, r3
 8017a98:	b003      	add	sp, #12
 8017a9a:	bd30      	pop	{r4, r5, pc}
 8017a9c:	9b01      	ldr	r3, [sp, #4]
 8017a9e:	781b      	ldrb	r3, [r3, #0]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d0f2      	beq.n	8017a8a <rcl_get_default_domain_id+0x3a>
 8017aa4:	e7e0      	b.n	8017a68 <rcl_get_default_domain_id+0x18>
 8017aa6:	f001 fadb 	bl	8019060 <__errno>
 8017aaa:	6803      	ldr	r3, [r0, #0]
 8017aac:	2b22      	cmp	r3, #34	@ 0x22
 8017aae:	d1ec      	bne.n	8017a8a <rcl_get_default_domain_id+0x3a>
 8017ab0:	e7da      	b.n	8017a68 <rcl_get_default_domain_id+0x18>
 8017ab2:	bf00      	nop
 8017ab4:	0801af5c 	.word	0x0801af5c

08017ab8 <rcl_expand_topic_name>:
 8017ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017abc:	b08b      	sub	sp, #44	@ 0x2c
 8017abe:	9306      	str	r3, [sp, #24]
 8017ac0:	2800      	cmp	r0, #0
 8017ac2:	f000 80ad 	beq.w	8017c20 <rcl_expand_topic_name+0x168>
 8017ac6:	460e      	mov	r6, r1
 8017ac8:	2900      	cmp	r1, #0
 8017aca:	f000 80a9 	beq.w	8017c20 <rcl_expand_topic_name+0x168>
 8017ace:	4617      	mov	r7, r2
 8017ad0:	2a00      	cmp	r2, #0
 8017ad2:	f000 80a5 	beq.w	8017c20 <rcl_expand_topic_name+0x168>
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	f000 80a2 	beq.w	8017c20 <rcl_expand_topic_name+0x168>
 8017adc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	f000 809e 	beq.w	8017c20 <rcl_expand_topic_name+0x168>
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	a909      	add	r1, sp, #36	@ 0x24
 8017ae8:	4680      	mov	r8, r0
 8017aea:	f000 f9fb 	bl	8017ee4 <rcl_validate_topic_name>
 8017aee:	4604      	mov	r4, r0
 8017af0:	2800      	cmp	r0, #0
 8017af2:	f040 8096 	bne.w	8017c22 <rcl_expand_topic_name+0x16a>
 8017af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	f040 809a 	bne.w	8017c32 <rcl_expand_topic_name+0x17a>
 8017afe:	4602      	mov	r2, r0
 8017b00:	a909      	add	r1, sp, #36	@ 0x24
 8017b02:	4630      	mov	r0, r6
 8017b04:	f7fd f826 	bl	8014b54 <rmw_validate_node_name>
 8017b08:	2800      	cmp	r0, #0
 8017b0a:	f040 808e 	bne.w	8017c2a <rcl_expand_topic_name+0x172>
 8017b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b10:	2a00      	cmp	r2, #0
 8017b12:	f040 8093 	bne.w	8017c3c <rcl_expand_topic_name+0x184>
 8017b16:	a909      	add	r1, sp, #36	@ 0x24
 8017b18:	4638      	mov	r0, r7
 8017b1a:	f7fc fffd 	bl	8014b18 <rmw_validate_namespace>
 8017b1e:	2800      	cmp	r0, #0
 8017b20:	f040 8083 	bne.w	8017c2a <rcl_expand_topic_name+0x172>
 8017b24:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017b26:	2c00      	cmp	r4, #0
 8017b28:	f040 80ed 	bne.w	8017d06 <rcl_expand_topic_name+0x24e>
 8017b2c:	217b      	movs	r1, #123	@ 0x7b
 8017b2e:	4640      	mov	r0, r8
 8017b30:	f001 fa0a 	bl	8018f48 <strchr>
 8017b34:	f898 3000 	ldrb.w	r3, [r8]
 8017b38:	2b2f      	cmp	r3, #47	@ 0x2f
 8017b3a:	4605      	mov	r5, r0
 8017b3c:	f000 809e 	beq.w	8017c7c <rcl_expand_topic_name+0x1c4>
 8017b40:	2b7e      	cmp	r3, #126	@ 0x7e
 8017b42:	f040 80a2 	bne.w	8017c8a <rcl_expand_topic_name+0x1d2>
 8017b46:	4638      	mov	r0, r7
 8017b48:	f7e8 fb54 	bl	80001f4 <strlen>
 8017b4c:	4a82      	ldr	r2, [pc, #520]	@ (8017d58 <rcl_expand_topic_name+0x2a0>)
 8017b4e:	4b83      	ldr	r3, [pc, #524]	@ (8017d5c <rcl_expand_topic_name+0x2a4>)
 8017b50:	2801      	cmp	r0, #1
 8017b52:	bf18      	it	ne
 8017b54:	4613      	movne	r3, r2
 8017b56:	9302      	str	r3, [sp, #8]
 8017b58:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017b5a:	9300      	str	r3, [sp, #0]
 8017b5c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017b60:	f108 0301 	add.w	r3, r8, #1
 8017b64:	9305      	str	r3, [sp, #20]
 8017b66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017b6a:	9301      	str	r3, [sp, #4]
 8017b6c:	ab14      	add	r3, sp, #80	@ 0x50
 8017b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017b70:	f7fc fbba 	bl	80142e8 <rcutils_format_string_limit>
 8017b74:	4682      	mov	sl, r0
 8017b76:	2800      	cmp	r0, #0
 8017b78:	f000 80c7 	beq.w	8017d0a <rcl_expand_topic_name+0x252>
 8017b7c:	2d00      	cmp	r5, #0
 8017b7e:	f000 80a2 	beq.w	8017cc6 <rcl_expand_topic_name+0x20e>
 8017b82:	217b      	movs	r1, #123	@ 0x7b
 8017b84:	f001 f9e0 	bl	8018f48 <strchr>
 8017b88:	46d1      	mov	r9, sl
 8017b8a:	4605      	mov	r5, r0
 8017b8c:	9407      	str	r4, [sp, #28]
 8017b8e:	46d3      	mov	fp, sl
 8017b90:	464c      	mov	r4, r9
 8017b92:	2d00      	cmp	r5, #0
 8017b94:	f000 80be 	beq.w	8017d14 <rcl_expand_topic_name+0x25c>
 8017b98:	217d      	movs	r1, #125	@ 0x7d
 8017b9a:	4620      	mov	r0, r4
 8017b9c:	f001 f9d4 	bl	8018f48 <strchr>
 8017ba0:	eba0 0905 	sub.w	r9, r0, r5
 8017ba4:	f109 0a01 	add.w	sl, r9, #1
 8017ba8:	486d      	ldr	r0, [pc, #436]	@ (8017d60 <rcl_expand_topic_name+0x2a8>)
 8017baa:	4652      	mov	r2, sl
 8017bac:	4629      	mov	r1, r5
 8017bae:	f001 f9d8 	bl	8018f62 <strncmp>
 8017bb2:	2800      	cmp	r0, #0
 8017bb4:	d067      	beq.n	8017c86 <rcl_expand_topic_name+0x1ce>
 8017bb6:	486b      	ldr	r0, [pc, #428]	@ (8017d64 <rcl_expand_topic_name+0x2ac>)
 8017bb8:	4652      	mov	r2, sl
 8017bba:	4629      	mov	r1, r5
 8017bbc:	f001 f9d1 	bl	8018f62 <strncmp>
 8017bc0:	b130      	cbz	r0, 8017bd0 <rcl_expand_topic_name+0x118>
 8017bc2:	4869      	ldr	r0, [pc, #420]	@ (8017d68 <rcl_expand_topic_name+0x2b0>)
 8017bc4:	4652      	mov	r2, sl
 8017bc6:	4629      	mov	r1, r5
 8017bc8:	f001 f9cb 	bl	8018f62 <strncmp>
 8017bcc:	2800      	cmp	r0, #0
 8017bce:	d137      	bne.n	8017c40 <rcl_expand_topic_name+0x188>
 8017bd0:	46b9      	mov	r9, r7
 8017bd2:	ab16      	add	r3, sp, #88	@ 0x58
 8017bd4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017bd8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017bdc:	ab14      	add	r3, sp, #80	@ 0x50
 8017bde:	4628      	mov	r0, r5
 8017be0:	cb0c      	ldmia	r3, {r2, r3}
 8017be2:	4651      	mov	r1, sl
 8017be4:	f7fc fcbc 	bl	8014560 <rcutils_strndup>
 8017be8:	4605      	mov	r5, r0
 8017bea:	2800      	cmp	r0, #0
 8017bec:	f000 809c 	beq.w	8017d28 <rcl_expand_topic_name+0x270>
 8017bf0:	464a      	mov	r2, r9
 8017bf2:	4620      	mov	r0, r4
 8017bf4:	ab14      	add	r3, sp, #80	@ 0x50
 8017bf6:	4629      	mov	r1, r5
 8017bf8:	f7fc fbb0 	bl	801435c <rcutils_repl_str>
 8017bfc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017bfe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017c00:	4604      	mov	r4, r0
 8017c02:	4628      	mov	r0, r5
 8017c04:	4798      	blx	r3
 8017c06:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017c08:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017c0a:	4658      	mov	r0, fp
 8017c0c:	4798      	blx	r3
 8017c0e:	2c00      	cmp	r4, #0
 8017c10:	d07b      	beq.n	8017d0a <rcl_expand_topic_name+0x252>
 8017c12:	217b      	movs	r1, #123	@ 0x7b
 8017c14:	4620      	mov	r0, r4
 8017c16:	f001 f997 	bl	8018f48 <strchr>
 8017c1a:	46a3      	mov	fp, r4
 8017c1c:	4605      	mov	r5, r0
 8017c1e:	e7b8      	b.n	8017b92 <rcl_expand_topic_name+0xda>
 8017c20:	240b      	movs	r4, #11
 8017c22:	4620      	mov	r0, r4
 8017c24:	b00b      	add	sp, #44	@ 0x2c
 8017c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c2a:	f7f9 fd93 	bl	8011754 <rcl_convert_rmw_ret_to_rcl_ret>
 8017c2e:	4604      	mov	r4, r0
 8017c30:	e7f7      	b.n	8017c22 <rcl_expand_topic_name+0x16a>
 8017c32:	2467      	movs	r4, #103	@ 0x67
 8017c34:	4620      	mov	r0, r4
 8017c36:	b00b      	add	sp, #44	@ 0x2c
 8017c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c3c:	24c9      	movs	r4, #201	@ 0xc9
 8017c3e:	e7f0      	b.n	8017c22 <rcl_expand_topic_name+0x16a>
 8017c40:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8017c44:	9806      	ldr	r0, [sp, #24]
 8017c46:	1c69      	adds	r1, r5, #1
 8017c48:	f7fc fda4 	bl	8014794 <rcutils_string_map_getn>
 8017c4c:	4681      	mov	r9, r0
 8017c4e:	2800      	cmp	r0, #0
 8017c50:	d1bf      	bne.n	8017bd2 <rcl_expand_topic_name+0x11a>
 8017c52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017c54:	aa16      	add	r2, sp, #88	@ 0x58
 8017c56:	6018      	str	r0, [r3, #0]
 8017c58:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c5a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017c5e:	ab14      	add	r3, sp, #80	@ 0x50
 8017c60:	cb0c      	ldmia	r3, {r2, r3}
 8017c62:	4651      	mov	r1, sl
 8017c64:	4628      	mov	r0, r5
 8017c66:	f7fc fc7b 	bl	8014560 <rcutils_strndup>
 8017c6a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017c6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017c6e:	4798      	blx	r3
 8017c70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017c72:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017c74:	4658      	mov	r0, fp
 8017c76:	2469      	movs	r4, #105	@ 0x69
 8017c78:	4798      	blx	r3
 8017c7a:	e7d2      	b.n	8017c22 <rcl_expand_topic_name+0x16a>
 8017c7c:	2800      	cmp	r0, #0
 8017c7e:	d05b      	beq.n	8017d38 <rcl_expand_topic_name+0x280>
 8017c80:	46c1      	mov	r9, r8
 8017c82:	46a2      	mov	sl, r4
 8017c84:	e782      	b.n	8017b8c <rcl_expand_topic_name+0xd4>
 8017c86:	46b1      	mov	r9, r6
 8017c88:	e7a3      	b.n	8017bd2 <rcl_expand_topic_name+0x11a>
 8017c8a:	2800      	cmp	r0, #0
 8017c8c:	d1f8      	bne.n	8017c80 <rcl_expand_topic_name+0x1c8>
 8017c8e:	4638      	mov	r0, r7
 8017c90:	f7e8 fab0 	bl	80001f4 <strlen>
 8017c94:	4a35      	ldr	r2, [pc, #212]	@ (8017d6c <rcl_expand_topic_name+0x2b4>)
 8017c96:	4b36      	ldr	r3, [pc, #216]	@ (8017d70 <rcl_expand_topic_name+0x2b8>)
 8017c98:	f8cd 8010 	str.w	r8, [sp, #16]
 8017c9c:	2801      	cmp	r0, #1
 8017c9e:	bf18      	it	ne
 8017ca0:	4613      	movne	r3, r2
 8017ca2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017ca6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017caa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017cac:	9703      	str	r7, [sp, #12]
 8017cae:	9200      	str	r2, [sp, #0]
 8017cb0:	ab14      	add	r3, sp, #80	@ 0x50
 8017cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017cb4:	f7fc fb18 	bl	80142e8 <rcutils_format_string_limit>
 8017cb8:	4682      	mov	sl, r0
 8017cba:	4653      	mov	r3, sl
 8017cbc:	b32b      	cbz	r3, 8017d0a <rcl_expand_topic_name+0x252>
 8017cbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017cc0:	f8c3 a000 	str.w	sl, [r3]
 8017cc4:	e7ad      	b.n	8017c22 <rcl_expand_topic_name+0x16a>
 8017cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8017cca:	2b2f      	cmp	r3, #47	@ 0x2f
 8017ccc:	d0f7      	beq.n	8017cbe <rcl_expand_topic_name+0x206>
 8017cce:	4638      	mov	r0, r7
 8017cd0:	f7e8 fa90 	bl	80001f4 <strlen>
 8017cd4:	4a25      	ldr	r2, [pc, #148]	@ (8017d6c <rcl_expand_topic_name+0x2b4>)
 8017cd6:	4b26      	ldr	r3, [pc, #152]	@ (8017d70 <rcl_expand_topic_name+0x2b8>)
 8017cd8:	f8cd a010 	str.w	sl, [sp, #16]
 8017cdc:	2801      	cmp	r0, #1
 8017cde:	bf18      	it	ne
 8017ce0:	4613      	movne	r3, r2
 8017ce2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017ce6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017cea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017cec:	9703      	str	r7, [sp, #12]
 8017cee:	9200      	str	r2, [sp, #0]
 8017cf0:	ab14      	add	r3, sp, #80	@ 0x50
 8017cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017cf4:	f7fc faf8 	bl	80142e8 <rcutils_format_string_limit>
 8017cf8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017cfa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017cfc:	4605      	mov	r5, r0
 8017cfe:	4650      	mov	r0, sl
 8017d00:	4798      	blx	r3
 8017d02:	46aa      	mov	sl, r5
 8017d04:	e7d9      	b.n	8017cba <rcl_expand_topic_name+0x202>
 8017d06:	24ca      	movs	r4, #202	@ 0xca
 8017d08:	e78b      	b.n	8017c22 <rcl_expand_topic_name+0x16a>
 8017d0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	6013      	str	r3, [r2, #0]
 8017d10:	240a      	movs	r4, #10
 8017d12:	e786      	b.n	8017c22 <rcl_expand_topic_name+0x16a>
 8017d14:	465b      	mov	r3, fp
 8017d16:	9c07      	ldr	r4, [sp, #28]
 8017d18:	46da      	mov	sl, fp
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d1d3      	bne.n	8017cc6 <rcl_expand_topic_name+0x20e>
 8017d1e:	f898 3000 	ldrb.w	r3, [r8]
 8017d22:	2b2f      	cmp	r3, #47	@ 0x2f
 8017d24:	d0cb      	beq.n	8017cbe <rcl_expand_topic_name+0x206>
 8017d26:	e7b2      	b.n	8017c8e <rcl_expand_topic_name+0x1d6>
 8017d28:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8017d2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017d2e:	6015      	str	r5, [r2, #0]
 8017d30:	4658      	mov	r0, fp
 8017d32:	4798      	blx	r3
 8017d34:	240a      	movs	r4, #10
 8017d36:	e774      	b.n	8017c22 <rcl_expand_topic_name+0x16a>
 8017d38:	ab17      	add	r3, sp, #92	@ 0x5c
 8017d3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017d3e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017d42:	ab14      	add	r3, sp, #80	@ 0x50
 8017d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017d46:	4640      	mov	r0, r8
 8017d48:	f7fc fbe8 	bl	801451c <rcutils_strdup>
 8017d4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017d4e:	2800      	cmp	r0, #0
 8017d50:	6018      	str	r0, [r3, #0]
 8017d52:	bf08      	it	eq
 8017d54:	240a      	moveq	r4, #10
 8017d56:	e764      	b.n	8017c22 <rcl_expand_topic_name+0x16a>
 8017d58:	0801af6c 	.word	0x0801af6c
 8017d5c:	0801a34c 	.word	0x0801a34c
 8017d60:	0801af74 	.word	0x0801af74
 8017d64:	0801af7c 	.word	0x0801af7c
 8017d68:	0801af84 	.word	0x0801af84
 8017d6c:	0801a6a0 	.word	0x0801a6a0
 8017d70:	0801a35c 	.word	0x0801a35c

08017d74 <rcl_get_default_topic_name_substitutions>:
 8017d74:	2800      	cmp	r0, #0
 8017d76:	bf0c      	ite	eq
 8017d78:	200b      	moveq	r0, #11
 8017d7a:	2000      	movne	r0, #0
 8017d7c:	4770      	bx	lr
 8017d7e:	bf00      	nop

08017d80 <rcl_get_zero_initialized_guard_condition>:
 8017d80:	4a03      	ldr	r2, [pc, #12]	@ (8017d90 <rcl_get_zero_initialized_guard_condition+0x10>)
 8017d82:	4603      	mov	r3, r0
 8017d84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017d88:	e883 0003 	stmia.w	r3, {r0, r1}
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	4770      	bx	lr
 8017d90:	0801af90 	.word	0x0801af90

08017d94 <rcl_guard_condition_init_from_rmw>:
 8017d94:	b082      	sub	sp, #8
 8017d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d9a:	b086      	sub	sp, #24
 8017d9c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017da0:	4604      	mov	r4, r0
 8017da2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017da6:	460e      	mov	r6, r1
 8017da8:	4617      	mov	r7, r2
 8017daa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017dae:	f10d 0e04 	add.w	lr, sp, #4
 8017db2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017db6:	f8dc 3000 	ldr.w	r3, [ip]
 8017dba:	f8ce 3000 	str.w	r3, [lr]
 8017dbe:	a801      	add	r0, sp, #4
 8017dc0:	f7f5 f846 	bl	800ce50 <rcutils_allocator_is_valid>
 8017dc4:	b350      	cbz	r0, 8017e1c <rcl_guard_condition_init_from_rmw+0x88>
 8017dc6:	b34c      	cbz	r4, 8017e1c <rcl_guard_condition_init_from_rmw+0x88>
 8017dc8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017dcc:	f1b8 0f00 	cmp.w	r8, #0
 8017dd0:	d11e      	bne.n	8017e10 <rcl_guard_condition_init_from_rmw+0x7c>
 8017dd2:	b31f      	cbz	r7, 8017e1c <rcl_guard_condition_init_from_rmw+0x88>
 8017dd4:	4638      	mov	r0, r7
 8017dd6:	f7f9 fcdb 	bl	8011790 <rcl_context_is_valid>
 8017dda:	b328      	cbz	r0, 8017e28 <rcl_guard_condition_init_from_rmw+0x94>
 8017ddc:	9b01      	ldr	r3, [sp, #4]
 8017dde:	9905      	ldr	r1, [sp, #20]
 8017de0:	201c      	movs	r0, #28
 8017de2:	4798      	blx	r3
 8017de4:	4605      	mov	r5, r0
 8017de6:	6060      	str	r0, [r4, #4]
 8017de8:	b358      	cbz	r0, 8017e42 <rcl_guard_condition_init_from_rmw+0xae>
 8017dea:	b1fe      	cbz	r6, 8017e2c <rcl_guard_condition_init_from_rmw+0x98>
 8017dec:	6006      	str	r6, [r0, #0]
 8017dee:	f880 8004 	strb.w	r8, [r0, #4]
 8017df2:	ac01      	add	r4, sp, #4
 8017df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017df6:	f105 0c08 	add.w	ip, r5, #8
 8017dfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017dfe:	6823      	ldr	r3, [r4, #0]
 8017e00:	f8cc 3000 	str.w	r3, [ip]
 8017e04:	2000      	movs	r0, #0
 8017e06:	b006      	add	sp, #24
 8017e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e0c:	b002      	add	sp, #8
 8017e0e:	4770      	bx	lr
 8017e10:	2064      	movs	r0, #100	@ 0x64
 8017e12:	b006      	add	sp, #24
 8017e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e18:	b002      	add	sp, #8
 8017e1a:	4770      	bx	lr
 8017e1c:	200b      	movs	r0, #11
 8017e1e:	b006      	add	sp, #24
 8017e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e24:	b002      	add	sp, #8
 8017e26:	4770      	bx	lr
 8017e28:	2065      	movs	r0, #101	@ 0x65
 8017e2a:	e7f2      	b.n	8017e12 <rcl_guard_condition_init_from_rmw+0x7e>
 8017e2c:	6838      	ldr	r0, [r7, #0]
 8017e2e:	3028      	adds	r0, #40	@ 0x28
 8017e30:	f000 fa3a 	bl	80182a8 <rmw_create_guard_condition>
 8017e34:	6028      	str	r0, [r5, #0]
 8017e36:	6865      	ldr	r5, [r4, #4]
 8017e38:	682e      	ldr	r6, [r5, #0]
 8017e3a:	b126      	cbz	r6, 8017e46 <rcl_guard_condition_init_from_rmw+0xb2>
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	712b      	strb	r3, [r5, #4]
 8017e40:	e7d7      	b.n	8017df2 <rcl_guard_condition_init_from_rmw+0x5e>
 8017e42:	200a      	movs	r0, #10
 8017e44:	e7e5      	b.n	8017e12 <rcl_guard_condition_init_from_rmw+0x7e>
 8017e46:	4628      	mov	r0, r5
 8017e48:	9b02      	ldr	r3, [sp, #8]
 8017e4a:	9905      	ldr	r1, [sp, #20]
 8017e4c:	4798      	blx	r3
 8017e4e:	6066      	str	r6, [r4, #4]
 8017e50:	2001      	movs	r0, #1
 8017e52:	e7de      	b.n	8017e12 <rcl_guard_condition_init_from_rmw+0x7e>

08017e54 <rcl_guard_condition_fini>:
 8017e54:	b570      	push	{r4, r5, r6, lr}
 8017e56:	b082      	sub	sp, #8
 8017e58:	b1f0      	cbz	r0, 8017e98 <rcl_guard_condition_fini+0x44>
 8017e5a:	6843      	ldr	r3, [r0, #4]
 8017e5c:	4604      	mov	r4, r0
 8017e5e:	b163      	cbz	r3, 8017e7a <rcl_guard_condition_fini+0x26>
 8017e60:	6818      	ldr	r0, [r3, #0]
 8017e62:	68de      	ldr	r6, [r3, #12]
 8017e64:	6999      	ldr	r1, [r3, #24]
 8017e66:	b160      	cbz	r0, 8017e82 <rcl_guard_condition_fini+0x2e>
 8017e68:	791d      	ldrb	r5, [r3, #4]
 8017e6a:	b965      	cbnz	r5, 8017e86 <rcl_guard_condition_fini+0x32>
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	47b0      	blx	r6
 8017e70:	2300      	movs	r3, #0
 8017e72:	4628      	mov	r0, r5
 8017e74:	6063      	str	r3, [r4, #4]
 8017e76:	b002      	add	sp, #8
 8017e78:	bd70      	pop	{r4, r5, r6, pc}
 8017e7a:	461d      	mov	r5, r3
 8017e7c:	4628      	mov	r0, r5
 8017e7e:	b002      	add	sp, #8
 8017e80:	bd70      	pop	{r4, r5, r6, pc}
 8017e82:	4605      	mov	r5, r0
 8017e84:	e7f2      	b.n	8017e6c <rcl_guard_condition_fini+0x18>
 8017e86:	9101      	str	r1, [sp, #4]
 8017e88:	f000 fa22 	bl	80182d0 <rmw_destroy_guard_condition>
 8017e8c:	1e05      	subs	r5, r0, #0
 8017e8e:	6863      	ldr	r3, [r4, #4]
 8017e90:	9901      	ldr	r1, [sp, #4]
 8017e92:	bf18      	it	ne
 8017e94:	2501      	movne	r5, #1
 8017e96:	e7e9      	b.n	8017e6c <rcl_guard_condition_fini+0x18>
 8017e98:	250b      	movs	r5, #11
 8017e9a:	4628      	mov	r0, r5
 8017e9c:	b002      	add	sp, #8
 8017e9e:	bd70      	pop	{r4, r5, r6, pc}

08017ea0 <rcl_guard_condition_get_default_options>:
 8017ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ea2:	b087      	sub	sp, #28
 8017ea4:	4606      	mov	r6, r0
 8017ea6:	4668      	mov	r0, sp
 8017ea8:	f7f4 ffc4 	bl	800ce34 <rcutils_get_default_allocator>
 8017eac:	4b09      	ldr	r3, [pc, #36]	@ (8017ed4 <rcl_guard_condition_get_default_options+0x34>)
 8017eae:	46ee      	mov	lr, sp
 8017eb0:	469c      	mov	ip, r3
 8017eb2:	461d      	mov	r5, r3
 8017eb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017eb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ebe:	4634      	mov	r4, r6
 8017ec0:	f8de 7000 	ldr.w	r7, [lr]
 8017ec4:	f8cc 7000 	str.w	r7, [ip]
 8017ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017eca:	4630      	mov	r0, r6
 8017ecc:	6027      	str	r7, [r4, #0]
 8017ece:	b007      	add	sp, #28
 8017ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ed2:	bf00      	nop
 8017ed4:	2000e59c 	.word	0x2000e59c

08017ed8 <rcl_guard_condition_get_rmw_handle>:
 8017ed8:	b110      	cbz	r0, 8017ee0 <rcl_guard_condition_get_rmw_handle+0x8>
 8017eda:	6840      	ldr	r0, [r0, #4]
 8017edc:	b100      	cbz	r0, 8017ee0 <rcl_guard_condition_get_rmw_handle+0x8>
 8017ede:	6800      	ldr	r0, [r0, #0]
 8017ee0:	4770      	bx	lr
 8017ee2:	bf00      	nop

08017ee4 <rcl_validate_topic_name>:
 8017ee4:	2800      	cmp	r0, #0
 8017ee6:	d07a      	beq.n	8017fde <rcl_validate_topic_name+0xfa>
 8017ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017eec:	460e      	mov	r6, r1
 8017eee:	2900      	cmp	r1, #0
 8017ef0:	d07c      	beq.n	8017fec <rcl_validate_topic_name+0x108>
 8017ef2:	4617      	mov	r7, r2
 8017ef4:	4605      	mov	r5, r0
 8017ef6:	f7e8 f97d 	bl	80001f4 <strlen>
 8017efa:	b1b0      	cbz	r0, 8017f2a <rcl_validate_topic_name+0x46>
 8017efc:	f895 9000 	ldrb.w	r9, [r5]
 8017f00:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018084 <rcl_validate_topic_name+0x1a0>
 8017f04:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8017f08:	f013 0304 	ands.w	r3, r3, #4
 8017f0c:	d169      	bne.n	8017fe2 <rcl_validate_topic_name+0xfe>
 8017f0e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8017f12:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017f16:	2a2f      	cmp	r2, #47	@ 0x2f
 8017f18:	d10e      	bne.n	8017f38 <rcl_validate_topic_name+0x54>
 8017f1a:	2202      	movs	r2, #2
 8017f1c:	6032      	str	r2, [r6, #0]
 8017f1e:	b36f      	cbz	r7, 8017f7c <rcl_validate_topic_name+0x98>
 8017f20:	f8c7 8000 	str.w	r8, [r7]
 8017f24:	4618      	mov	r0, r3
 8017f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f2a:	2301      	movs	r3, #1
 8017f2c:	6033      	str	r3, [r6, #0]
 8017f2e:	b32f      	cbz	r7, 8017f7c <rcl_validate_topic_name+0x98>
 8017f30:	2000      	movs	r0, #0
 8017f32:	6038      	str	r0, [r7, #0]
 8017f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f38:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017f3c:	461c      	mov	r4, r3
 8017f3e:	4619      	mov	r1, r3
 8017f40:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017f44:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017f48:	f1be 0f09 	cmp.w	lr, #9
 8017f4c:	d919      	bls.n	8017f82 <rcl_validate_topic_name+0x9e>
 8017f4e:	f022 0e20 	bic.w	lr, r2, #32
 8017f52:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017f56:	f1be 0f19 	cmp.w	lr, #25
 8017f5a:	d912      	bls.n	8017f82 <rcl_validate_topic_name+0x9e>
 8017f5c:	2a5f      	cmp	r2, #95	@ 0x5f
 8017f5e:	d019      	beq.n	8017f94 <rcl_validate_topic_name+0xb0>
 8017f60:	2a2f      	cmp	r2, #47	@ 0x2f
 8017f62:	d051      	beq.n	8018008 <rcl_validate_topic_name+0x124>
 8017f64:	2a7e      	cmp	r2, #126	@ 0x7e
 8017f66:	d048      	beq.n	8017ffa <rcl_validate_topic_name+0x116>
 8017f68:	2a7b      	cmp	r2, #123	@ 0x7b
 8017f6a:	d054      	beq.n	8018016 <rcl_validate_topic_name+0x132>
 8017f6c:	2a7d      	cmp	r2, #125	@ 0x7d
 8017f6e:	d161      	bne.n	8018034 <rcl_validate_topic_name+0x150>
 8017f70:	2c00      	cmp	r4, #0
 8017f72:	d155      	bne.n	8018020 <rcl_validate_topic_name+0x13c>
 8017f74:	2305      	movs	r3, #5
 8017f76:	6033      	str	r3, [r6, #0]
 8017f78:	b107      	cbz	r7, 8017f7c <rcl_validate_topic_name+0x98>
 8017f7a:	6039      	str	r1, [r7, #0]
 8017f7c:	2000      	movs	r0, #0
 8017f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f82:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017f86:	0752      	lsls	r2, r2, #29
 8017f88:	d504      	bpl.n	8017f94 <rcl_validate_topic_name+0xb0>
 8017f8a:	b11c      	cbz	r4, 8017f94 <rcl_validate_topic_name+0xb0>
 8017f8c:	b111      	cbz	r1, 8017f94 <rcl_validate_topic_name+0xb0>
 8017f8e:	1e4a      	subs	r2, r1, #1
 8017f90:	429a      	cmp	r2, r3
 8017f92:	d02d      	beq.n	8017ff0 <rcl_validate_topic_name+0x10c>
 8017f94:	3101      	adds	r1, #1
 8017f96:	4288      	cmp	r0, r1
 8017f98:	d1d2      	bne.n	8017f40 <rcl_validate_topic_name+0x5c>
 8017f9a:	2c00      	cmp	r4, #0
 8017f9c:	d145      	bne.n	801802a <rcl_validate_topic_name+0x146>
 8017f9e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8017fa2:	d04f      	beq.n	8018044 <rcl_validate_topic_name+0x160>
 8017fa4:	4620      	mov	r0, r4
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	e006      	b.n	8017fb8 <rcl_validate_topic_name+0xd4>
 8017faa:	428b      	cmp	r3, r1
 8017fac:	f105 0501 	add.w	r5, r5, #1
 8017fb0:	f103 0201 	add.w	r2, r3, #1
 8017fb4:	d236      	bcs.n	8018024 <rcl_validate_topic_name+0x140>
 8017fb6:	4613      	mov	r3, r2
 8017fb8:	4580      	cmp	r8, r0
 8017fba:	f100 0001 	add.w	r0, r0, #1
 8017fbe:	d0f4      	beq.n	8017faa <rcl_validate_topic_name+0xc6>
 8017fc0:	782a      	ldrb	r2, [r5, #0]
 8017fc2:	2a2f      	cmp	r2, #47	@ 0x2f
 8017fc4:	d1f1      	bne.n	8017faa <rcl_validate_topic_name+0xc6>
 8017fc6:	786a      	ldrb	r2, [r5, #1]
 8017fc8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017fcc:	0754      	lsls	r4, r2, #29
 8017fce:	d5ec      	bpl.n	8017faa <rcl_validate_topic_name+0xc6>
 8017fd0:	2204      	movs	r2, #4
 8017fd2:	6032      	str	r2, [r6, #0]
 8017fd4:	2f00      	cmp	r7, #0
 8017fd6:	d0d1      	beq.n	8017f7c <rcl_validate_topic_name+0x98>
 8017fd8:	603b      	str	r3, [r7, #0]
 8017fda:	2000      	movs	r0, #0
 8017fdc:	e7aa      	b.n	8017f34 <rcl_validate_topic_name+0x50>
 8017fde:	200b      	movs	r0, #11
 8017fe0:	4770      	bx	lr
 8017fe2:	2304      	movs	r3, #4
 8017fe4:	6033      	str	r3, [r6, #0]
 8017fe6:	2f00      	cmp	r7, #0
 8017fe8:	d1a2      	bne.n	8017f30 <rcl_validate_topic_name+0x4c>
 8017fea:	e7c7      	b.n	8017f7c <rcl_validate_topic_name+0x98>
 8017fec:	200b      	movs	r0, #11
 8017fee:	e7a1      	b.n	8017f34 <rcl_validate_topic_name+0x50>
 8017ff0:	2309      	movs	r3, #9
 8017ff2:	6033      	str	r3, [r6, #0]
 8017ff4:	2f00      	cmp	r7, #0
 8017ff6:	d1c0      	bne.n	8017f7a <rcl_validate_topic_name+0x96>
 8017ff8:	e7c0      	b.n	8017f7c <rcl_validate_topic_name+0x98>
 8017ffa:	2900      	cmp	r1, #0
 8017ffc:	d0ca      	beq.n	8017f94 <rcl_validate_topic_name+0xb0>
 8017ffe:	2306      	movs	r3, #6
 8018000:	6033      	str	r3, [r6, #0]
 8018002:	2f00      	cmp	r7, #0
 8018004:	d1b9      	bne.n	8017f7a <rcl_validate_topic_name+0x96>
 8018006:	e7b9      	b.n	8017f7c <rcl_validate_topic_name+0x98>
 8018008:	2c00      	cmp	r4, #0
 801800a:	d0c3      	beq.n	8017f94 <rcl_validate_topic_name+0xb0>
 801800c:	2308      	movs	r3, #8
 801800e:	6033      	str	r3, [r6, #0]
 8018010:	2f00      	cmp	r7, #0
 8018012:	d1b2      	bne.n	8017f7a <rcl_validate_topic_name+0x96>
 8018014:	e7b2      	b.n	8017f7c <rcl_validate_topic_name+0x98>
 8018016:	2c00      	cmp	r4, #0
 8018018:	d1f8      	bne.n	801800c <rcl_validate_topic_name+0x128>
 801801a:	460b      	mov	r3, r1
 801801c:	2401      	movs	r4, #1
 801801e:	e7b9      	b.n	8017f94 <rcl_validate_topic_name+0xb0>
 8018020:	2400      	movs	r4, #0
 8018022:	e7b7      	b.n	8017f94 <rcl_validate_topic_name+0xb0>
 8018024:	2000      	movs	r0, #0
 8018026:	6030      	str	r0, [r6, #0]
 8018028:	e784      	b.n	8017f34 <rcl_validate_topic_name+0x50>
 801802a:	2205      	movs	r2, #5
 801802c:	6032      	str	r2, [r6, #0]
 801802e:	2f00      	cmp	r7, #0
 8018030:	d1d2      	bne.n	8017fd8 <rcl_validate_topic_name+0xf4>
 8018032:	e7a3      	b.n	8017f7c <rcl_validate_topic_name+0x98>
 8018034:	2c00      	cmp	r4, #0
 8018036:	bf14      	ite	ne
 8018038:	2308      	movne	r3, #8
 801803a:	2303      	moveq	r3, #3
 801803c:	6033      	str	r3, [r6, #0]
 801803e:	2f00      	cmp	r7, #0
 8018040:	d19b      	bne.n	8017f7a <rcl_validate_topic_name+0x96>
 8018042:	e79b      	b.n	8017f7c <rcl_validate_topic_name+0x98>
 8018044:	2301      	movs	r3, #1
 8018046:	e00a      	b.n	801805e <rcl_validate_topic_name+0x17a>
 8018048:	2c01      	cmp	r4, #1
 801804a:	d013      	beq.n	8018074 <rcl_validate_topic_name+0x190>
 801804c:	4299      	cmp	r1, r3
 801804e:	f104 0401 	add.w	r4, r4, #1
 8018052:	f105 0501 	add.w	r5, r5, #1
 8018056:	f103 0201 	add.w	r2, r3, #1
 801805a:	d9e3      	bls.n	8018024 <rcl_validate_topic_name+0x140>
 801805c:	4613      	mov	r3, r2
 801805e:	45a0      	cmp	r8, r4
 8018060:	d0f4      	beq.n	801804c <rcl_validate_topic_name+0x168>
 8018062:	782a      	ldrb	r2, [r5, #0]
 8018064:	2a2f      	cmp	r2, #47	@ 0x2f
 8018066:	d1ef      	bne.n	8018048 <rcl_validate_topic_name+0x164>
 8018068:	786a      	ldrb	r2, [r5, #1]
 801806a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801806e:	0752      	lsls	r2, r2, #29
 8018070:	d5ec      	bpl.n	801804c <rcl_validate_topic_name+0x168>
 8018072:	e7ad      	b.n	8017fd0 <rcl_validate_topic_name+0xec>
 8018074:	2307      	movs	r3, #7
 8018076:	6033      	str	r3, [r6, #0]
 8018078:	2f00      	cmp	r7, #0
 801807a:	f43f af7f 	beq.w	8017f7c <rcl_validate_topic_name+0x98>
 801807e:	603c      	str	r4, [r7, #0]
 8018080:	2000      	movs	r0, #0
 8018082:	e757      	b.n	8017f34 <rcl_validate_topic_name+0x50>
 8018084:	0801b02c 	.word	0x0801b02c

08018088 <rcutils_string_array_fini>:
 8018088:	b320      	cbz	r0, 80180d4 <rcutils_string_array_fini+0x4c>
 801808a:	b570      	push	{r4, r5, r6, lr}
 801808c:	4604      	mov	r4, r0
 801808e:	6840      	ldr	r0, [r0, #4]
 8018090:	b1d8      	cbz	r0, 80180ca <rcutils_string_array_fini+0x42>
 8018092:	f104 0008 	add.w	r0, r4, #8
 8018096:	f7f4 fedb 	bl	800ce50 <rcutils_allocator_is_valid>
 801809a:	b1b8      	cbz	r0, 80180cc <rcutils_string_array_fini+0x44>
 801809c:	6823      	ldr	r3, [r4, #0]
 801809e:	b1bb      	cbz	r3, 80180d0 <rcutils_string_array_fini+0x48>
 80180a0:	2500      	movs	r5, #0
 80180a2:	6860      	ldr	r0, [r4, #4]
 80180a4:	462e      	mov	r6, r5
 80180a6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80180aa:	68e3      	ldr	r3, [r4, #12]
 80180ac:	69a1      	ldr	r1, [r4, #24]
 80180ae:	4798      	blx	r3
 80180b0:	e9d4 3000 	ldrd	r3, r0, [r4]
 80180b4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80180b8:	3501      	adds	r5, #1
 80180ba:	429d      	cmp	r5, r3
 80180bc:	d3f3      	bcc.n	80180a6 <rcutils_string_array_fini+0x1e>
 80180be:	68e3      	ldr	r3, [r4, #12]
 80180c0:	69a1      	ldr	r1, [r4, #24]
 80180c2:	4798      	blx	r3
 80180c4:	2000      	movs	r0, #0
 80180c6:	e9c4 0000 	strd	r0, r0, [r4]
 80180ca:	bd70      	pop	{r4, r5, r6, pc}
 80180cc:	200b      	movs	r0, #11
 80180ce:	bd70      	pop	{r4, r5, r6, pc}
 80180d0:	6860      	ldr	r0, [r4, #4]
 80180d2:	e7f4      	b.n	80180be <rcutils_string_array_fini+0x36>
 80180d4:	200b      	movs	r0, #11
 80180d6:	4770      	bx	lr

080180d8 <on_status>:
 80180d8:	b082      	sub	sp, #8
 80180da:	b002      	add	sp, #8
 80180dc:	4770      	bx	lr
 80180de:	bf00      	nop

080180e0 <on_topic>:
 80180e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180e4:	4a22      	ldr	r2, [pc, #136]	@ (8018170 <on_topic+0x90>)
 80180e6:	b094      	sub	sp, #80	@ 0x50
 80180e8:	6812      	ldr	r2, [r2, #0]
 80180ea:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80180ec:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80180f0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80180f4:	b3c2      	cbz	r2, 8018168 <on_topic+0x88>
 80180f6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80180fa:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80180fe:	e001      	b.n	8018104 <on_topic+0x24>
 8018100:	6852      	ldr	r2, [r2, #4]
 8018102:	b38a      	cbz	r2, 8018168 <on_topic+0x88>
 8018104:	6894      	ldr	r4, [r2, #8]
 8018106:	8aa3      	ldrh	r3, [r4, #20]
 8018108:	428b      	cmp	r3, r1
 801810a:	d1f9      	bne.n	8018100 <on_topic+0x20>
 801810c:	7da3      	ldrb	r3, [r4, #22]
 801810e:	4283      	cmp	r3, r0
 8018110:	d1f6      	bne.n	8018100 <on_topic+0x20>
 8018112:	2248      	movs	r2, #72	@ 0x48
 8018114:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018118:	4668      	mov	r0, sp
 801811a:	f000 ffd6 	bl	80190ca <memcpy>
 801811e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8018122:	cb0c      	ldmia	r3, {r2, r3}
 8018124:	4620      	mov	r0, r4
 8018126:	f7f5 fac3 	bl	800d6b0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801812a:	4607      	mov	r7, r0
 801812c:	b1e0      	cbz	r0, 8018168 <on_topic+0x88>
 801812e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018132:	4632      	mov	r2, r6
 8018134:	4628      	mov	r0, r5
 8018136:	f108 0110 	add.w	r1, r8, #16
 801813a:	f7f6 fa27 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 801813e:	b930      	cbnz	r0, 801814e <on_topic+0x6e>
 8018140:	480c      	ldr	r0, [pc, #48]	@ (8018174 <on_topic+0x94>)
 8018142:	4639      	mov	r1, r7
 8018144:	b014      	add	sp, #80	@ 0x50
 8018146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801814a:	f7fc bd71 	b.w	8014c30 <put_memory>
 801814e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8018152:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8018156:	f7fd fe99 	bl	8015e8c <rmw_uros_epoch_nanos>
 801815a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801815e:	2305      	movs	r3, #5
 8018160:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018164:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8018168:	b014      	add	sp, #80	@ 0x50
 801816a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801816e:	bf00      	nop
 8018170:	2000e3fc 	.word	0x2000e3fc
 8018174:	2000e3ec 	.word	0x2000e3ec

08018178 <on_request>:
 8018178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801817c:	4823      	ldr	r0, [pc, #140]	@ (801820c <on_request+0x94>)
 801817e:	b094      	sub	sp, #80	@ 0x50
 8018180:	6800      	ldr	r0, [r0, #0]
 8018182:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018184:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018188:	9113      	str	r1, [sp, #76]	@ 0x4c
 801818a:	2800      	cmp	r0, #0
 801818c:	d03b      	beq.n	8018206 <on_request+0x8e>
 801818e:	461d      	mov	r5, r3
 8018190:	e001      	b.n	8018196 <on_request+0x1e>
 8018192:	6840      	ldr	r0, [r0, #4]
 8018194:	b3b8      	cbz	r0, 8018206 <on_request+0x8e>
 8018196:	6884      	ldr	r4, [r0, #8]
 8018198:	8b21      	ldrh	r1, [r4, #24]
 801819a:	4291      	cmp	r1, r2
 801819c:	d1f9      	bne.n	8018192 <on_request+0x1a>
 801819e:	2248      	movs	r2, #72	@ 0x48
 80181a0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80181a4:	4668      	mov	r0, sp
 80181a6:	f000 ff90 	bl	80190ca <memcpy>
 80181aa:	f104 0320 	add.w	r3, r4, #32
 80181ae:	cb0c      	ldmia	r3, {r2, r3}
 80181b0:	4620      	mov	r0, r4
 80181b2:	f7f5 fa7d 	bl	800d6b0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80181b6:	4680      	mov	r8, r0
 80181b8:	b328      	cbz	r0, 8018206 <on_request+0x8e>
 80181ba:	4638      	mov	r0, r7
 80181bc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80181c0:	4632      	mov	r2, r6
 80181c2:	f107 0110 	add.w	r1, r7, #16
 80181c6:	f7f6 f9e1 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 80181ca:	b930      	cbnz	r0, 80181da <on_request+0x62>
 80181cc:	4810      	ldr	r0, [pc, #64]	@ (8018210 <on_request+0x98>)
 80181ce:	4641      	mov	r1, r8
 80181d0:	b014      	add	sp, #80	@ 0x50
 80181d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181d6:	f7fc bd2b 	b.w	8014c30 <put_memory>
 80181da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80181dc:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80181e0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80181e4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80181e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80181ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80181f0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80181f4:	f7fd fe4a 	bl	8015e8c <rmw_uros_epoch_nanos>
 80181f8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80181fc:	2303      	movs	r3, #3
 80181fe:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018202:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018206:	b014      	add	sp, #80	@ 0x50
 8018208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801820c:	2000e3cc 	.word	0x2000e3cc
 8018210:	2000e3ec 	.word	0x2000e3ec

08018214 <on_reply>:
 8018214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018218:	4821      	ldr	r0, [pc, #132]	@ (80182a0 <on_reply+0x8c>)
 801821a:	b094      	sub	sp, #80	@ 0x50
 801821c:	6800      	ldr	r0, [r0, #0]
 801821e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018220:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018224:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018226:	b3b8      	cbz	r0, 8018298 <on_reply+0x84>
 8018228:	461d      	mov	r5, r3
 801822a:	e001      	b.n	8018230 <on_reply+0x1c>
 801822c:	6840      	ldr	r0, [r0, #4]
 801822e:	b398      	cbz	r0, 8018298 <on_reply+0x84>
 8018230:	6884      	ldr	r4, [r0, #8]
 8018232:	8b21      	ldrh	r1, [r4, #24]
 8018234:	4291      	cmp	r1, r2
 8018236:	d1f9      	bne.n	801822c <on_reply+0x18>
 8018238:	2248      	movs	r2, #72	@ 0x48
 801823a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801823e:	4668      	mov	r0, sp
 8018240:	f000 ff43 	bl	80190ca <memcpy>
 8018244:	f104 0320 	add.w	r3, r4, #32
 8018248:	cb0c      	ldmia	r3, {r2, r3}
 801824a:	4620      	mov	r0, r4
 801824c:	f7f5 fa30 	bl	800d6b0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018250:	4680      	mov	r8, r0
 8018252:	b308      	cbz	r0, 8018298 <on_reply+0x84>
 8018254:	4638      	mov	r0, r7
 8018256:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801825a:	4632      	mov	r2, r6
 801825c:	f107 0110 	add.w	r1, r7, #16
 8018260:	f7f6 f994 	bl	800e58c <ucdr_deserialize_array_uint8_t>
 8018264:	b930      	cbnz	r0, 8018274 <on_reply+0x60>
 8018266:	480f      	ldr	r0, [pc, #60]	@ (80182a4 <on_reply+0x90>)
 8018268:	4641      	mov	r1, r8
 801826a:	b014      	add	sp, #80	@ 0x50
 801826c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018270:	f7fc bcde 	b.w	8014c30 <put_memory>
 8018274:	2200      	movs	r2, #0
 8018276:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801827a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801827e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018282:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8018286:	f7fd fe01 	bl	8015e8c <rmw_uros_epoch_nanos>
 801828a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801828e:	2304      	movs	r3, #4
 8018290:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018294:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018298:	b014      	add	sp, #80	@ 0x50
 801829a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801829e:	bf00      	nop
 80182a0:	20009ae0 	.word	0x20009ae0
 80182a4:	2000e3ec 	.word	0x2000e3ec

080182a8 <rmw_create_guard_condition>:
 80182a8:	b538      	push	{r3, r4, r5, lr}
 80182aa:	4605      	mov	r5, r0
 80182ac:	4807      	ldr	r0, [pc, #28]	@ (80182cc <rmw_create_guard_condition+0x24>)
 80182ae:	f7fc fcaf 	bl	8014c10 <get_memory>
 80182b2:	b148      	cbz	r0, 80182c8 <rmw_create_guard_condition+0x20>
 80182b4:	6884      	ldr	r4, [r0, #8]
 80182b6:	2300      	movs	r3, #0
 80182b8:	7423      	strb	r3, [r4, #16]
 80182ba:	61e5      	str	r5, [r4, #28]
 80182bc:	f7fc fd10 	bl	8014ce0 <rmw_get_implementation_identifier>
 80182c0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80182c4:	f104 0014 	add.w	r0, r4, #20
 80182c8:	bd38      	pop	{r3, r4, r5, pc}
 80182ca:	bf00      	nop
 80182cc:	2000e38c 	.word	0x2000e38c

080182d0 <rmw_destroy_guard_condition>:
 80182d0:	b508      	push	{r3, lr}
 80182d2:	4b08      	ldr	r3, [pc, #32]	@ (80182f4 <rmw_destroy_guard_condition+0x24>)
 80182d4:	6819      	ldr	r1, [r3, #0]
 80182d6:	b911      	cbnz	r1, 80182de <rmw_destroy_guard_condition+0xe>
 80182d8:	e00a      	b.n	80182f0 <rmw_destroy_guard_condition+0x20>
 80182da:	6849      	ldr	r1, [r1, #4]
 80182dc:	b141      	cbz	r1, 80182f0 <rmw_destroy_guard_condition+0x20>
 80182de:	688b      	ldr	r3, [r1, #8]
 80182e0:	3314      	adds	r3, #20
 80182e2:	4298      	cmp	r0, r3
 80182e4:	d1f9      	bne.n	80182da <rmw_destroy_guard_condition+0xa>
 80182e6:	4803      	ldr	r0, [pc, #12]	@ (80182f4 <rmw_destroy_guard_condition+0x24>)
 80182e8:	f7fc fca2 	bl	8014c30 <put_memory>
 80182ec:	2000      	movs	r0, #0
 80182ee:	bd08      	pop	{r3, pc}
 80182f0:	2001      	movs	r0, #1
 80182f2:	bd08      	pop	{r3, pc}
 80182f4:	2000e38c 	.word	0x2000e38c

080182f8 <geometry_msgs__msg__Pose__init>:
 80182f8:	b570      	push	{r4, r5, r6, lr}
 80182fa:	4605      	mov	r5, r0
 80182fc:	b1a8      	cbz	r0, 801832a <geometry_msgs__msg__Pose__init+0x32>
 80182fe:	f000 f8cd 	bl	801849c <geometry_msgs__msg__Point__init>
 8018302:	4604      	mov	r4, r0
 8018304:	b140      	cbz	r0, 8018318 <geometry_msgs__msg__Pose__init+0x20>
 8018306:	f105 0618 	add.w	r6, r5, #24
 801830a:	4630      	mov	r0, r6
 801830c:	f7fd fee0 	bl	80160d0 <geometry_msgs__msg__Quaternion__init>
 8018310:	4604      	mov	r4, r0
 8018312:	b168      	cbz	r0, 8018330 <geometry_msgs__msg__Pose__init+0x38>
 8018314:	4620      	mov	r0, r4
 8018316:	bd70      	pop	{r4, r5, r6, pc}
 8018318:	4628      	mov	r0, r5
 801831a:	f000 f8c3 	bl	80184a4 <geometry_msgs__msg__Point__fini>
 801831e:	f105 0018 	add.w	r0, r5, #24
 8018322:	f7fd fee9 	bl	80160f8 <geometry_msgs__msg__Quaternion__fini>
 8018326:	4620      	mov	r0, r4
 8018328:	bd70      	pop	{r4, r5, r6, pc}
 801832a:	4604      	mov	r4, r0
 801832c:	4620      	mov	r0, r4
 801832e:	bd70      	pop	{r4, r5, r6, pc}
 8018330:	4628      	mov	r0, r5
 8018332:	f000 f8b7 	bl	80184a4 <geometry_msgs__msg__Point__fini>
 8018336:	4630      	mov	r0, r6
 8018338:	f7fd fede 	bl	80160f8 <geometry_msgs__msg__Quaternion__fini>
 801833c:	e7ea      	b.n	8018314 <geometry_msgs__msg__Pose__init+0x1c>
 801833e:	bf00      	nop

08018340 <geometry_msgs__msg__Pose__fini>:
 8018340:	b148      	cbz	r0, 8018356 <geometry_msgs__msg__Pose__fini+0x16>
 8018342:	b510      	push	{r4, lr}
 8018344:	4604      	mov	r4, r0
 8018346:	f000 f8ad 	bl	80184a4 <geometry_msgs__msg__Point__fini>
 801834a:	f104 0018 	add.w	r0, r4, #24
 801834e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018352:	f7fd bed1 	b.w	80160f8 <geometry_msgs__msg__Quaternion__fini>
 8018356:	4770      	bx	lr

08018358 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 8018358:	f000 b8a0 	b.w	801849c <geometry_msgs__msg__Point__init>

0801835c <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 801835c:	f000 b8a2 	b.w	80184a4 <geometry_msgs__msg__Point__fini>

08018360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8018360:	4b04      	ldr	r3, [pc, #16]	@ (8018374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8018362:	681a      	ldr	r2, [r3, #0]
 8018364:	b10a      	cbz	r2, 801836a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 8018366:	4803      	ldr	r0, [pc, #12]	@ (8018374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8018368:	4770      	bx	lr
 801836a:	4a03      	ldr	r2, [pc, #12]	@ (8018378 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 801836c:	4801      	ldr	r0, [pc, #4]	@ (8018374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801836e:	6812      	ldr	r2, [r2, #0]
 8018370:	601a      	str	r2, [r3, #0]
 8018372:	4770      	bx	lr
 8018374:	20000a30 	.word	0x20000a30
 8018378:	2000030c 	.word	0x2000030c

0801837c <get_serialized_size_geometry_msgs__msg__Point>:
 801837c:	b1b8      	cbz	r0, 80183ae <get_serialized_size_geometry_msgs__msg__Point+0x32>
 801837e:	b538      	push	{r3, r4, r5, lr}
 8018380:	460d      	mov	r5, r1
 8018382:	4628      	mov	r0, r5
 8018384:	2108      	movs	r1, #8
 8018386:	f7f3 fb9d 	bl	800bac4 <ucdr_alignment>
 801838a:	f105 0308 	add.w	r3, r5, #8
 801838e:	181c      	adds	r4, r3, r0
 8018390:	2108      	movs	r1, #8
 8018392:	4620      	mov	r0, r4
 8018394:	f7f3 fb96 	bl	800bac4 <ucdr_alignment>
 8018398:	3008      	adds	r0, #8
 801839a:	4404      	add	r4, r0
 801839c:	2108      	movs	r1, #8
 801839e:	4620      	mov	r0, r4
 80183a0:	f7f3 fb90 	bl	800bac4 <ucdr_alignment>
 80183a4:	f1c5 0508 	rsb	r5, r5, #8
 80183a8:	4428      	add	r0, r5
 80183aa:	4420      	add	r0, r4
 80183ac:	bd38      	pop	{r3, r4, r5, pc}
 80183ae:	4770      	bx	lr

080183b0 <_Point__cdr_deserialize>:
 80183b0:	b538      	push	{r3, r4, r5, lr}
 80183b2:	460c      	mov	r4, r1
 80183b4:	b171      	cbz	r1, 80183d4 <_Point__cdr_deserialize+0x24>
 80183b6:	4605      	mov	r5, r0
 80183b8:	f7f3 f998 	bl	800b6ec <ucdr_deserialize_double>
 80183bc:	f104 0108 	add.w	r1, r4, #8
 80183c0:	4628      	mov	r0, r5
 80183c2:	f7f3 f993 	bl	800b6ec <ucdr_deserialize_double>
 80183c6:	f104 0110 	add.w	r1, r4, #16
 80183ca:	4628      	mov	r0, r5
 80183cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183d0:	f7f3 b98c 	b.w	800b6ec <ucdr_deserialize_double>
 80183d4:	4608      	mov	r0, r1
 80183d6:	bd38      	pop	{r3, r4, r5, pc}

080183d8 <_Point__cdr_serialize>:
 80183d8:	b198      	cbz	r0, 8018402 <_Point__cdr_serialize+0x2a>
 80183da:	b538      	push	{r3, r4, r5, lr}
 80183dc:	ed90 0b00 	vldr	d0, [r0]
 80183e0:	460d      	mov	r5, r1
 80183e2:	4604      	mov	r4, r0
 80183e4:	4608      	mov	r0, r1
 80183e6:	f7f2 ffdf 	bl	800b3a8 <ucdr_serialize_double>
 80183ea:	ed94 0b02 	vldr	d0, [r4, #8]
 80183ee:	4628      	mov	r0, r5
 80183f0:	f7f2 ffda 	bl	800b3a8 <ucdr_serialize_double>
 80183f4:	ed94 0b04 	vldr	d0, [r4, #16]
 80183f8:	4628      	mov	r0, r5
 80183fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183fe:	f7f2 bfd3 	b.w	800b3a8 <ucdr_serialize_double>
 8018402:	4770      	bx	lr

08018404 <_Point__get_serialized_size>:
 8018404:	b198      	cbz	r0, 801842e <_Point__get_serialized_size+0x2a>
 8018406:	b510      	push	{r4, lr}
 8018408:	2108      	movs	r1, #8
 801840a:	2000      	movs	r0, #0
 801840c:	f7f3 fb5a 	bl	800bac4 <ucdr_alignment>
 8018410:	f100 0408 	add.w	r4, r0, #8
 8018414:	2108      	movs	r1, #8
 8018416:	4620      	mov	r0, r4
 8018418:	f7f3 fb54 	bl	800bac4 <ucdr_alignment>
 801841c:	3008      	adds	r0, #8
 801841e:	4404      	add	r4, r0
 8018420:	2108      	movs	r1, #8
 8018422:	4620      	mov	r0, r4
 8018424:	f7f3 fb4e 	bl	800bac4 <ucdr_alignment>
 8018428:	3008      	adds	r0, #8
 801842a:	4420      	add	r0, r4
 801842c:	bd10      	pop	{r4, pc}
 801842e:	4770      	bx	lr

08018430 <_Point__max_serialized_size>:
 8018430:	b538      	push	{r3, r4, r5, lr}
 8018432:	2108      	movs	r1, #8
 8018434:	2000      	movs	r0, #0
 8018436:	f7f3 fb45 	bl	800bac4 <ucdr_alignment>
 801843a:	f100 0508 	add.w	r5, r0, #8
 801843e:	2108      	movs	r1, #8
 8018440:	4628      	mov	r0, r5
 8018442:	f7f3 fb3f 	bl	800bac4 <ucdr_alignment>
 8018446:	f100 0408 	add.w	r4, r0, #8
 801844a:	442c      	add	r4, r5
 801844c:	2108      	movs	r1, #8
 801844e:	4620      	mov	r0, r4
 8018450:	f7f3 fb38 	bl	800bac4 <ucdr_alignment>
 8018454:	3008      	adds	r0, #8
 8018456:	4420      	add	r0, r4
 8018458:	bd38      	pop	{r3, r4, r5, pc}
 801845a:	bf00      	nop

0801845c <max_serialized_size_geometry_msgs__msg__Point>:
 801845c:	b570      	push	{r4, r5, r6, lr}
 801845e:	2301      	movs	r3, #1
 8018460:	460c      	mov	r4, r1
 8018462:	7003      	strb	r3, [r0, #0]
 8018464:	2108      	movs	r1, #8
 8018466:	4620      	mov	r0, r4
 8018468:	f7f3 fb2c 	bl	800bac4 <ucdr_alignment>
 801846c:	f104 0508 	add.w	r5, r4, #8
 8018470:	1946      	adds	r6, r0, r5
 8018472:	2108      	movs	r1, #8
 8018474:	4630      	mov	r0, r6
 8018476:	f7f3 fb25 	bl	800bac4 <ucdr_alignment>
 801847a:	f100 0508 	add.w	r5, r0, #8
 801847e:	4435      	add	r5, r6
 8018480:	2108      	movs	r1, #8
 8018482:	4628      	mov	r0, r5
 8018484:	f7f3 fb1e 	bl	800bac4 <ucdr_alignment>
 8018488:	f1c4 0408 	rsb	r4, r4, #8
 801848c:	4420      	add	r0, r4
 801848e:	4428      	add	r0, r5
 8018490:	bd70      	pop	{r4, r5, r6, pc}
 8018492:	bf00      	nop

08018494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8018494:	4800      	ldr	r0, [pc, #0]	@ (8018498 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 8018496:	4770      	bx	lr
 8018498:	20000a3c 	.word	0x20000a3c

0801849c <geometry_msgs__msg__Point__init>:
 801849c:	3800      	subs	r0, #0
 801849e:	bf18      	it	ne
 80184a0:	2001      	movne	r0, #1
 80184a2:	4770      	bx	lr

080184a4 <geometry_msgs__msg__Point__fini>:
 80184a4:	4770      	bx	lr
 80184a6:	bf00      	nop

080184a8 <calloc>:
 80184a8:	4b02      	ldr	r3, [pc, #8]	@ (80184b4 <calloc+0xc>)
 80184aa:	460a      	mov	r2, r1
 80184ac:	4601      	mov	r1, r0
 80184ae:	6818      	ldr	r0, [r3, #0]
 80184b0:	f000 b802 	b.w	80184b8 <_calloc_r>
 80184b4:	20000a70 	.word	0x20000a70

080184b8 <_calloc_r>:
 80184b8:	b570      	push	{r4, r5, r6, lr}
 80184ba:	fba1 5402 	umull	r5, r4, r1, r2
 80184be:	b93c      	cbnz	r4, 80184d0 <_calloc_r+0x18>
 80184c0:	4629      	mov	r1, r5
 80184c2:	f000 f899 	bl	80185f8 <_malloc_r>
 80184c6:	4606      	mov	r6, r0
 80184c8:	b928      	cbnz	r0, 80184d6 <_calloc_r+0x1e>
 80184ca:	2600      	movs	r6, #0
 80184cc:	4630      	mov	r0, r6
 80184ce:	bd70      	pop	{r4, r5, r6, pc}
 80184d0:	220c      	movs	r2, #12
 80184d2:	6002      	str	r2, [r0, #0]
 80184d4:	e7f9      	b.n	80184ca <_calloc_r+0x12>
 80184d6:	462a      	mov	r2, r5
 80184d8:	4621      	mov	r1, r4
 80184da:	f000 fd2d 	bl	8018f38 <memset>
 80184de:	e7f5      	b.n	80184cc <_calloc_r+0x14>

080184e0 <exit>:
 80184e0:	b508      	push	{r3, lr}
 80184e2:	4b06      	ldr	r3, [pc, #24]	@ (80184fc <exit+0x1c>)
 80184e4:	4604      	mov	r4, r0
 80184e6:	b113      	cbz	r3, 80184ee <exit+0xe>
 80184e8:	2100      	movs	r1, #0
 80184ea:	f3af 8000 	nop.w
 80184ee:	4b04      	ldr	r3, [pc, #16]	@ (8018500 <exit+0x20>)
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	b103      	cbz	r3, 80184f6 <exit+0x16>
 80184f4:	4798      	blx	r3
 80184f6:	4620      	mov	r0, r4
 80184f8:	f7ea fa8e 	bl	8002a18 <_exit>
 80184fc:	00000000 	.word	0x00000000
 8018500:	2000e6f0 	.word	0x2000e6f0

08018504 <getenv>:
 8018504:	b507      	push	{r0, r1, r2, lr}
 8018506:	4b04      	ldr	r3, [pc, #16]	@ (8018518 <getenv+0x14>)
 8018508:	4601      	mov	r1, r0
 801850a:	aa01      	add	r2, sp, #4
 801850c:	6818      	ldr	r0, [r3, #0]
 801850e:	f000 f805 	bl	801851c <_findenv_r>
 8018512:	b003      	add	sp, #12
 8018514:	f85d fb04 	ldr.w	pc, [sp], #4
 8018518:	20000a70 	.word	0x20000a70

0801851c <_findenv_r>:
 801851c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018520:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8018590 <_findenv_r+0x74>
 8018524:	4606      	mov	r6, r0
 8018526:	4689      	mov	r9, r1
 8018528:	4617      	mov	r7, r2
 801852a:	f000 fdfb 	bl	8019124 <__env_lock>
 801852e:	f8da 4000 	ldr.w	r4, [sl]
 8018532:	b134      	cbz	r4, 8018542 <_findenv_r+0x26>
 8018534:	464b      	mov	r3, r9
 8018536:	4698      	mov	r8, r3
 8018538:	f813 2b01 	ldrb.w	r2, [r3], #1
 801853c:	b13a      	cbz	r2, 801854e <_findenv_r+0x32>
 801853e:	2a3d      	cmp	r2, #61	@ 0x3d
 8018540:	d1f9      	bne.n	8018536 <_findenv_r+0x1a>
 8018542:	4630      	mov	r0, r6
 8018544:	f000 fdf4 	bl	8019130 <__env_unlock>
 8018548:	2000      	movs	r0, #0
 801854a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801854e:	eba8 0809 	sub.w	r8, r8, r9
 8018552:	46a3      	mov	fp, r4
 8018554:	f854 0b04 	ldr.w	r0, [r4], #4
 8018558:	2800      	cmp	r0, #0
 801855a:	d0f2      	beq.n	8018542 <_findenv_r+0x26>
 801855c:	4642      	mov	r2, r8
 801855e:	4649      	mov	r1, r9
 8018560:	f000 fcff 	bl	8018f62 <strncmp>
 8018564:	2800      	cmp	r0, #0
 8018566:	d1f4      	bne.n	8018552 <_findenv_r+0x36>
 8018568:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801856c:	eb03 0508 	add.w	r5, r3, r8
 8018570:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018574:	2b3d      	cmp	r3, #61	@ 0x3d
 8018576:	d1ec      	bne.n	8018552 <_findenv_r+0x36>
 8018578:	f8da 3000 	ldr.w	r3, [sl]
 801857c:	ebab 0303 	sub.w	r3, fp, r3
 8018580:	109b      	asrs	r3, r3, #2
 8018582:	4630      	mov	r0, r6
 8018584:	603b      	str	r3, [r7, #0]
 8018586:	f000 fdd3 	bl	8019130 <__env_unlock>
 801858a:	1c68      	adds	r0, r5, #1
 801858c:	e7dd      	b.n	801854a <_findenv_r+0x2e>
 801858e:	bf00      	nop
 8018590:	20000000 	.word	0x20000000

08018594 <malloc>:
 8018594:	4b02      	ldr	r3, [pc, #8]	@ (80185a0 <malloc+0xc>)
 8018596:	4601      	mov	r1, r0
 8018598:	6818      	ldr	r0, [r3, #0]
 801859a:	f000 b82d 	b.w	80185f8 <_malloc_r>
 801859e:	bf00      	nop
 80185a0:	20000a70 	.word	0x20000a70

080185a4 <free>:
 80185a4:	4b02      	ldr	r3, [pc, #8]	@ (80185b0 <free+0xc>)
 80185a6:	4601      	mov	r1, r0
 80185a8:	6818      	ldr	r0, [r3, #0]
 80185aa:	f000 bdc7 	b.w	801913c <_free_r>
 80185ae:	bf00      	nop
 80185b0:	20000a70 	.word	0x20000a70

080185b4 <sbrk_aligned>:
 80185b4:	b570      	push	{r4, r5, r6, lr}
 80185b6:	4e0f      	ldr	r6, [pc, #60]	@ (80185f4 <sbrk_aligned+0x40>)
 80185b8:	460c      	mov	r4, r1
 80185ba:	6831      	ldr	r1, [r6, #0]
 80185bc:	4605      	mov	r5, r0
 80185be:	b911      	cbnz	r1, 80185c6 <sbrk_aligned+0x12>
 80185c0:	f000 fd2c 	bl	801901c <_sbrk_r>
 80185c4:	6030      	str	r0, [r6, #0]
 80185c6:	4621      	mov	r1, r4
 80185c8:	4628      	mov	r0, r5
 80185ca:	f000 fd27 	bl	801901c <_sbrk_r>
 80185ce:	1c43      	adds	r3, r0, #1
 80185d0:	d103      	bne.n	80185da <sbrk_aligned+0x26>
 80185d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80185d6:	4620      	mov	r0, r4
 80185d8:	bd70      	pop	{r4, r5, r6, pc}
 80185da:	1cc4      	adds	r4, r0, #3
 80185dc:	f024 0403 	bic.w	r4, r4, #3
 80185e0:	42a0      	cmp	r0, r4
 80185e2:	d0f8      	beq.n	80185d6 <sbrk_aligned+0x22>
 80185e4:	1a21      	subs	r1, r4, r0
 80185e6:	4628      	mov	r0, r5
 80185e8:	f000 fd18 	bl	801901c <_sbrk_r>
 80185ec:	3001      	adds	r0, #1
 80185ee:	d1f2      	bne.n	80185d6 <sbrk_aligned+0x22>
 80185f0:	e7ef      	b.n	80185d2 <sbrk_aligned+0x1e>
 80185f2:	bf00      	nop
 80185f4:	2000e5b0 	.word	0x2000e5b0

080185f8 <_malloc_r>:
 80185f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185fc:	1ccd      	adds	r5, r1, #3
 80185fe:	f025 0503 	bic.w	r5, r5, #3
 8018602:	3508      	adds	r5, #8
 8018604:	2d0c      	cmp	r5, #12
 8018606:	bf38      	it	cc
 8018608:	250c      	movcc	r5, #12
 801860a:	2d00      	cmp	r5, #0
 801860c:	4606      	mov	r6, r0
 801860e:	db01      	blt.n	8018614 <_malloc_r+0x1c>
 8018610:	42a9      	cmp	r1, r5
 8018612:	d904      	bls.n	801861e <_malloc_r+0x26>
 8018614:	230c      	movs	r3, #12
 8018616:	6033      	str	r3, [r6, #0]
 8018618:	2000      	movs	r0, #0
 801861a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801861e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80186f4 <_malloc_r+0xfc>
 8018622:	f000 f869 	bl	80186f8 <__malloc_lock>
 8018626:	f8d8 3000 	ldr.w	r3, [r8]
 801862a:	461c      	mov	r4, r3
 801862c:	bb44      	cbnz	r4, 8018680 <_malloc_r+0x88>
 801862e:	4629      	mov	r1, r5
 8018630:	4630      	mov	r0, r6
 8018632:	f7ff ffbf 	bl	80185b4 <sbrk_aligned>
 8018636:	1c43      	adds	r3, r0, #1
 8018638:	4604      	mov	r4, r0
 801863a:	d158      	bne.n	80186ee <_malloc_r+0xf6>
 801863c:	f8d8 4000 	ldr.w	r4, [r8]
 8018640:	4627      	mov	r7, r4
 8018642:	2f00      	cmp	r7, #0
 8018644:	d143      	bne.n	80186ce <_malloc_r+0xd6>
 8018646:	2c00      	cmp	r4, #0
 8018648:	d04b      	beq.n	80186e2 <_malloc_r+0xea>
 801864a:	6823      	ldr	r3, [r4, #0]
 801864c:	4639      	mov	r1, r7
 801864e:	4630      	mov	r0, r6
 8018650:	eb04 0903 	add.w	r9, r4, r3
 8018654:	f000 fce2 	bl	801901c <_sbrk_r>
 8018658:	4581      	cmp	r9, r0
 801865a:	d142      	bne.n	80186e2 <_malloc_r+0xea>
 801865c:	6821      	ldr	r1, [r4, #0]
 801865e:	1a6d      	subs	r5, r5, r1
 8018660:	4629      	mov	r1, r5
 8018662:	4630      	mov	r0, r6
 8018664:	f7ff ffa6 	bl	80185b4 <sbrk_aligned>
 8018668:	3001      	adds	r0, #1
 801866a:	d03a      	beq.n	80186e2 <_malloc_r+0xea>
 801866c:	6823      	ldr	r3, [r4, #0]
 801866e:	442b      	add	r3, r5
 8018670:	6023      	str	r3, [r4, #0]
 8018672:	f8d8 3000 	ldr.w	r3, [r8]
 8018676:	685a      	ldr	r2, [r3, #4]
 8018678:	bb62      	cbnz	r2, 80186d4 <_malloc_r+0xdc>
 801867a:	f8c8 7000 	str.w	r7, [r8]
 801867e:	e00f      	b.n	80186a0 <_malloc_r+0xa8>
 8018680:	6822      	ldr	r2, [r4, #0]
 8018682:	1b52      	subs	r2, r2, r5
 8018684:	d420      	bmi.n	80186c8 <_malloc_r+0xd0>
 8018686:	2a0b      	cmp	r2, #11
 8018688:	d917      	bls.n	80186ba <_malloc_r+0xc2>
 801868a:	1961      	adds	r1, r4, r5
 801868c:	42a3      	cmp	r3, r4
 801868e:	6025      	str	r5, [r4, #0]
 8018690:	bf18      	it	ne
 8018692:	6059      	strne	r1, [r3, #4]
 8018694:	6863      	ldr	r3, [r4, #4]
 8018696:	bf08      	it	eq
 8018698:	f8c8 1000 	streq.w	r1, [r8]
 801869c:	5162      	str	r2, [r4, r5]
 801869e:	604b      	str	r3, [r1, #4]
 80186a0:	4630      	mov	r0, r6
 80186a2:	f000 f82f 	bl	8018704 <__malloc_unlock>
 80186a6:	f104 000b 	add.w	r0, r4, #11
 80186aa:	1d23      	adds	r3, r4, #4
 80186ac:	f020 0007 	bic.w	r0, r0, #7
 80186b0:	1ac2      	subs	r2, r0, r3
 80186b2:	bf1c      	itt	ne
 80186b4:	1a1b      	subne	r3, r3, r0
 80186b6:	50a3      	strne	r3, [r4, r2]
 80186b8:	e7af      	b.n	801861a <_malloc_r+0x22>
 80186ba:	6862      	ldr	r2, [r4, #4]
 80186bc:	42a3      	cmp	r3, r4
 80186be:	bf0c      	ite	eq
 80186c0:	f8c8 2000 	streq.w	r2, [r8]
 80186c4:	605a      	strne	r2, [r3, #4]
 80186c6:	e7eb      	b.n	80186a0 <_malloc_r+0xa8>
 80186c8:	4623      	mov	r3, r4
 80186ca:	6864      	ldr	r4, [r4, #4]
 80186cc:	e7ae      	b.n	801862c <_malloc_r+0x34>
 80186ce:	463c      	mov	r4, r7
 80186d0:	687f      	ldr	r7, [r7, #4]
 80186d2:	e7b6      	b.n	8018642 <_malloc_r+0x4a>
 80186d4:	461a      	mov	r2, r3
 80186d6:	685b      	ldr	r3, [r3, #4]
 80186d8:	42a3      	cmp	r3, r4
 80186da:	d1fb      	bne.n	80186d4 <_malloc_r+0xdc>
 80186dc:	2300      	movs	r3, #0
 80186de:	6053      	str	r3, [r2, #4]
 80186e0:	e7de      	b.n	80186a0 <_malloc_r+0xa8>
 80186e2:	230c      	movs	r3, #12
 80186e4:	6033      	str	r3, [r6, #0]
 80186e6:	4630      	mov	r0, r6
 80186e8:	f000 f80c 	bl	8018704 <__malloc_unlock>
 80186ec:	e794      	b.n	8018618 <_malloc_r+0x20>
 80186ee:	6005      	str	r5, [r0, #0]
 80186f0:	e7d6      	b.n	80186a0 <_malloc_r+0xa8>
 80186f2:	bf00      	nop
 80186f4:	2000e5b4 	.word	0x2000e5b4

080186f8 <__malloc_lock>:
 80186f8:	4801      	ldr	r0, [pc, #4]	@ (8018700 <__malloc_lock+0x8>)
 80186fa:	f000 bcdc 	b.w	80190b6 <__retarget_lock_acquire_recursive>
 80186fe:	bf00      	nop
 8018700:	2000e6f9 	.word	0x2000e6f9

08018704 <__malloc_unlock>:
 8018704:	4801      	ldr	r0, [pc, #4]	@ (801870c <__malloc_unlock+0x8>)
 8018706:	f000 bcd7 	b.w	80190b8 <__retarget_lock_release_recursive>
 801870a:	bf00      	nop
 801870c:	2000e6f9 	.word	0x2000e6f9

08018710 <srand>:
 8018710:	b538      	push	{r3, r4, r5, lr}
 8018712:	4b10      	ldr	r3, [pc, #64]	@ (8018754 <srand+0x44>)
 8018714:	681d      	ldr	r5, [r3, #0]
 8018716:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018718:	4604      	mov	r4, r0
 801871a:	b9b3      	cbnz	r3, 801874a <srand+0x3a>
 801871c:	2018      	movs	r0, #24
 801871e:	f7ff ff39 	bl	8018594 <malloc>
 8018722:	4602      	mov	r2, r0
 8018724:	6328      	str	r0, [r5, #48]	@ 0x30
 8018726:	b920      	cbnz	r0, 8018732 <srand+0x22>
 8018728:	4b0b      	ldr	r3, [pc, #44]	@ (8018758 <srand+0x48>)
 801872a:	480c      	ldr	r0, [pc, #48]	@ (801875c <srand+0x4c>)
 801872c:	2146      	movs	r1, #70	@ 0x46
 801872e:	f000 fcdb 	bl	80190e8 <__assert_func>
 8018732:	490b      	ldr	r1, [pc, #44]	@ (8018760 <srand+0x50>)
 8018734:	4b0b      	ldr	r3, [pc, #44]	@ (8018764 <srand+0x54>)
 8018736:	e9c0 1300 	strd	r1, r3, [r0]
 801873a:	4b0b      	ldr	r3, [pc, #44]	@ (8018768 <srand+0x58>)
 801873c:	6083      	str	r3, [r0, #8]
 801873e:	230b      	movs	r3, #11
 8018740:	8183      	strh	r3, [r0, #12]
 8018742:	2100      	movs	r1, #0
 8018744:	2001      	movs	r0, #1
 8018746:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801874a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801874c:	2200      	movs	r2, #0
 801874e:	611c      	str	r4, [r3, #16]
 8018750:	615a      	str	r2, [r3, #20]
 8018752:	bd38      	pop	{r3, r4, r5, pc}
 8018754:	20000a70 	.word	0x20000a70
 8018758:	0801afbc 	.word	0x0801afbc
 801875c:	0801afd3 	.word	0x0801afd3
 8018760:	abcd330e 	.word	0xabcd330e
 8018764:	e66d1234 	.word	0xe66d1234
 8018768:	0005deec 	.word	0x0005deec

0801876c <rand>:
 801876c:	4b16      	ldr	r3, [pc, #88]	@ (80187c8 <rand+0x5c>)
 801876e:	b510      	push	{r4, lr}
 8018770:	681c      	ldr	r4, [r3, #0]
 8018772:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018774:	b9b3      	cbnz	r3, 80187a4 <rand+0x38>
 8018776:	2018      	movs	r0, #24
 8018778:	f7ff ff0c 	bl	8018594 <malloc>
 801877c:	4602      	mov	r2, r0
 801877e:	6320      	str	r0, [r4, #48]	@ 0x30
 8018780:	b920      	cbnz	r0, 801878c <rand+0x20>
 8018782:	4b12      	ldr	r3, [pc, #72]	@ (80187cc <rand+0x60>)
 8018784:	4812      	ldr	r0, [pc, #72]	@ (80187d0 <rand+0x64>)
 8018786:	2152      	movs	r1, #82	@ 0x52
 8018788:	f000 fcae 	bl	80190e8 <__assert_func>
 801878c:	4911      	ldr	r1, [pc, #68]	@ (80187d4 <rand+0x68>)
 801878e:	4b12      	ldr	r3, [pc, #72]	@ (80187d8 <rand+0x6c>)
 8018790:	e9c0 1300 	strd	r1, r3, [r0]
 8018794:	4b11      	ldr	r3, [pc, #68]	@ (80187dc <rand+0x70>)
 8018796:	6083      	str	r3, [r0, #8]
 8018798:	230b      	movs	r3, #11
 801879a:	8183      	strh	r3, [r0, #12]
 801879c:	2100      	movs	r1, #0
 801879e:	2001      	movs	r0, #1
 80187a0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80187a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80187a6:	480e      	ldr	r0, [pc, #56]	@ (80187e0 <rand+0x74>)
 80187a8:	690b      	ldr	r3, [r1, #16]
 80187aa:	694c      	ldr	r4, [r1, #20]
 80187ac:	4a0d      	ldr	r2, [pc, #52]	@ (80187e4 <rand+0x78>)
 80187ae:	4358      	muls	r0, r3
 80187b0:	fb02 0004 	mla	r0, r2, r4, r0
 80187b4:	fba3 3202 	umull	r3, r2, r3, r2
 80187b8:	3301      	adds	r3, #1
 80187ba:	eb40 0002 	adc.w	r0, r0, r2
 80187be:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80187c2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80187c6:	bd10      	pop	{r4, pc}
 80187c8:	20000a70 	.word	0x20000a70
 80187cc:	0801afbc 	.word	0x0801afbc
 80187d0:	0801afd3 	.word	0x0801afd3
 80187d4:	abcd330e 	.word	0xabcd330e
 80187d8:	e66d1234 	.word	0xe66d1234
 80187dc:	0005deec 	.word	0x0005deec
 80187e0:	5851f42d 	.word	0x5851f42d
 80187e4:	4c957f2d 	.word	0x4c957f2d

080187e8 <realloc>:
 80187e8:	4b02      	ldr	r3, [pc, #8]	@ (80187f4 <realloc+0xc>)
 80187ea:	460a      	mov	r2, r1
 80187ec:	4601      	mov	r1, r0
 80187ee:	6818      	ldr	r0, [r3, #0]
 80187f0:	f000 b802 	b.w	80187f8 <_realloc_r>
 80187f4:	20000a70 	.word	0x20000a70

080187f8 <_realloc_r>:
 80187f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187fc:	4680      	mov	r8, r0
 80187fe:	4615      	mov	r5, r2
 8018800:	460c      	mov	r4, r1
 8018802:	b921      	cbnz	r1, 801880e <_realloc_r+0x16>
 8018804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018808:	4611      	mov	r1, r2
 801880a:	f7ff bef5 	b.w	80185f8 <_malloc_r>
 801880e:	b92a      	cbnz	r2, 801881c <_realloc_r+0x24>
 8018810:	f000 fc94 	bl	801913c <_free_r>
 8018814:	2400      	movs	r4, #0
 8018816:	4620      	mov	r0, r4
 8018818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801881c:	f000 fcd8 	bl	80191d0 <_malloc_usable_size_r>
 8018820:	4285      	cmp	r5, r0
 8018822:	4606      	mov	r6, r0
 8018824:	d802      	bhi.n	801882c <_realloc_r+0x34>
 8018826:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801882a:	d8f4      	bhi.n	8018816 <_realloc_r+0x1e>
 801882c:	4629      	mov	r1, r5
 801882e:	4640      	mov	r0, r8
 8018830:	f7ff fee2 	bl	80185f8 <_malloc_r>
 8018834:	4607      	mov	r7, r0
 8018836:	2800      	cmp	r0, #0
 8018838:	d0ec      	beq.n	8018814 <_realloc_r+0x1c>
 801883a:	42b5      	cmp	r5, r6
 801883c:	462a      	mov	r2, r5
 801883e:	4621      	mov	r1, r4
 8018840:	bf28      	it	cs
 8018842:	4632      	movcs	r2, r6
 8018844:	f000 fc41 	bl	80190ca <memcpy>
 8018848:	4621      	mov	r1, r4
 801884a:	4640      	mov	r0, r8
 801884c:	f000 fc76 	bl	801913c <_free_r>
 8018850:	463c      	mov	r4, r7
 8018852:	e7e0      	b.n	8018816 <_realloc_r+0x1e>

08018854 <_strtoul_l.constprop.0>:
 8018854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018858:	4e34      	ldr	r6, [pc, #208]	@ (801892c <_strtoul_l.constprop.0+0xd8>)
 801885a:	4686      	mov	lr, r0
 801885c:	460d      	mov	r5, r1
 801885e:	4628      	mov	r0, r5
 8018860:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018864:	5d37      	ldrb	r7, [r6, r4]
 8018866:	f017 0708 	ands.w	r7, r7, #8
 801886a:	d1f8      	bne.n	801885e <_strtoul_l.constprop.0+0xa>
 801886c:	2c2d      	cmp	r4, #45	@ 0x2d
 801886e:	d12f      	bne.n	80188d0 <_strtoul_l.constprop.0+0x7c>
 8018870:	782c      	ldrb	r4, [r5, #0]
 8018872:	2701      	movs	r7, #1
 8018874:	1c85      	adds	r5, r0, #2
 8018876:	f033 0010 	bics.w	r0, r3, #16
 801887a:	d109      	bne.n	8018890 <_strtoul_l.constprop.0+0x3c>
 801887c:	2c30      	cmp	r4, #48	@ 0x30
 801887e:	d12c      	bne.n	80188da <_strtoul_l.constprop.0+0x86>
 8018880:	7828      	ldrb	r0, [r5, #0]
 8018882:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018886:	2858      	cmp	r0, #88	@ 0x58
 8018888:	d127      	bne.n	80188da <_strtoul_l.constprop.0+0x86>
 801888a:	786c      	ldrb	r4, [r5, #1]
 801888c:	2310      	movs	r3, #16
 801888e:	3502      	adds	r5, #2
 8018890:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018894:	2600      	movs	r6, #0
 8018896:	fbb8 f8f3 	udiv	r8, r8, r3
 801889a:	fb03 f908 	mul.w	r9, r3, r8
 801889e:	ea6f 0909 	mvn.w	r9, r9
 80188a2:	4630      	mov	r0, r6
 80188a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80188a8:	f1bc 0f09 	cmp.w	ip, #9
 80188ac:	d81c      	bhi.n	80188e8 <_strtoul_l.constprop.0+0x94>
 80188ae:	4664      	mov	r4, ip
 80188b0:	42a3      	cmp	r3, r4
 80188b2:	dd2a      	ble.n	801890a <_strtoul_l.constprop.0+0xb6>
 80188b4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80188b8:	d007      	beq.n	80188ca <_strtoul_l.constprop.0+0x76>
 80188ba:	4580      	cmp	r8, r0
 80188bc:	d322      	bcc.n	8018904 <_strtoul_l.constprop.0+0xb0>
 80188be:	d101      	bne.n	80188c4 <_strtoul_l.constprop.0+0x70>
 80188c0:	45a1      	cmp	r9, r4
 80188c2:	db1f      	blt.n	8018904 <_strtoul_l.constprop.0+0xb0>
 80188c4:	fb00 4003 	mla	r0, r0, r3, r4
 80188c8:	2601      	movs	r6, #1
 80188ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80188ce:	e7e9      	b.n	80188a4 <_strtoul_l.constprop.0+0x50>
 80188d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80188d2:	bf04      	itt	eq
 80188d4:	782c      	ldrbeq	r4, [r5, #0]
 80188d6:	1c85      	addeq	r5, r0, #2
 80188d8:	e7cd      	b.n	8018876 <_strtoul_l.constprop.0+0x22>
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d1d8      	bne.n	8018890 <_strtoul_l.constprop.0+0x3c>
 80188de:	2c30      	cmp	r4, #48	@ 0x30
 80188e0:	bf0c      	ite	eq
 80188e2:	2308      	moveq	r3, #8
 80188e4:	230a      	movne	r3, #10
 80188e6:	e7d3      	b.n	8018890 <_strtoul_l.constprop.0+0x3c>
 80188e8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80188ec:	f1bc 0f19 	cmp.w	ip, #25
 80188f0:	d801      	bhi.n	80188f6 <_strtoul_l.constprop.0+0xa2>
 80188f2:	3c37      	subs	r4, #55	@ 0x37
 80188f4:	e7dc      	b.n	80188b0 <_strtoul_l.constprop.0+0x5c>
 80188f6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80188fa:	f1bc 0f19 	cmp.w	ip, #25
 80188fe:	d804      	bhi.n	801890a <_strtoul_l.constprop.0+0xb6>
 8018900:	3c57      	subs	r4, #87	@ 0x57
 8018902:	e7d5      	b.n	80188b0 <_strtoul_l.constprop.0+0x5c>
 8018904:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8018908:	e7df      	b.n	80188ca <_strtoul_l.constprop.0+0x76>
 801890a:	1c73      	adds	r3, r6, #1
 801890c:	d106      	bne.n	801891c <_strtoul_l.constprop.0+0xc8>
 801890e:	2322      	movs	r3, #34	@ 0x22
 8018910:	f8ce 3000 	str.w	r3, [lr]
 8018914:	4630      	mov	r0, r6
 8018916:	b932      	cbnz	r2, 8018926 <_strtoul_l.constprop.0+0xd2>
 8018918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801891c:	b107      	cbz	r7, 8018920 <_strtoul_l.constprop.0+0xcc>
 801891e:	4240      	negs	r0, r0
 8018920:	2a00      	cmp	r2, #0
 8018922:	d0f9      	beq.n	8018918 <_strtoul_l.constprop.0+0xc4>
 8018924:	b106      	cbz	r6, 8018928 <_strtoul_l.constprop.0+0xd4>
 8018926:	1e69      	subs	r1, r5, #1
 8018928:	6011      	str	r1, [r2, #0]
 801892a:	e7f5      	b.n	8018918 <_strtoul_l.constprop.0+0xc4>
 801892c:	0801b02c 	.word	0x0801b02c

08018930 <strtoul>:
 8018930:	4613      	mov	r3, r2
 8018932:	460a      	mov	r2, r1
 8018934:	4601      	mov	r1, r0
 8018936:	4802      	ldr	r0, [pc, #8]	@ (8018940 <strtoul+0x10>)
 8018938:	6800      	ldr	r0, [r0, #0]
 801893a:	f7ff bf8b 	b.w	8018854 <_strtoul_l.constprop.0>
 801893e:	bf00      	nop
 8018940:	20000a70 	.word	0x20000a70

08018944 <std>:
 8018944:	2300      	movs	r3, #0
 8018946:	b510      	push	{r4, lr}
 8018948:	4604      	mov	r4, r0
 801894a:	e9c0 3300 	strd	r3, r3, [r0]
 801894e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018952:	6083      	str	r3, [r0, #8]
 8018954:	8181      	strh	r1, [r0, #12]
 8018956:	6643      	str	r3, [r0, #100]	@ 0x64
 8018958:	81c2      	strh	r2, [r0, #14]
 801895a:	6183      	str	r3, [r0, #24]
 801895c:	4619      	mov	r1, r3
 801895e:	2208      	movs	r2, #8
 8018960:	305c      	adds	r0, #92	@ 0x5c
 8018962:	f000 fae9 	bl	8018f38 <memset>
 8018966:	4b0d      	ldr	r3, [pc, #52]	@ (801899c <std+0x58>)
 8018968:	6263      	str	r3, [r4, #36]	@ 0x24
 801896a:	4b0d      	ldr	r3, [pc, #52]	@ (80189a0 <std+0x5c>)
 801896c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801896e:	4b0d      	ldr	r3, [pc, #52]	@ (80189a4 <std+0x60>)
 8018970:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018972:	4b0d      	ldr	r3, [pc, #52]	@ (80189a8 <std+0x64>)
 8018974:	6323      	str	r3, [r4, #48]	@ 0x30
 8018976:	4b0d      	ldr	r3, [pc, #52]	@ (80189ac <std+0x68>)
 8018978:	6224      	str	r4, [r4, #32]
 801897a:	429c      	cmp	r4, r3
 801897c:	d006      	beq.n	801898c <std+0x48>
 801897e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018982:	4294      	cmp	r4, r2
 8018984:	d002      	beq.n	801898c <std+0x48>
 8018986:	33d0      	adds	r3, #208	@ 0xd0
 8018988:	429c      	cmp	r4, r3
 801898a:	d105      	bne.n	8018998 <std+0x54>
 801898c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018994:	f000 bb8e 	b.w	80190b4 <__retarget_lock_init_recursive>
 8018998:	bd10      	pop	{r4, pc}
 801899a:	bf00      	nop
 801899c:	08018cc5 	.word	0x08018cc5
 80189a0:	08018ce7 	.word	0x08018ce7
 80189a4:	08018d1f 	.word	0x08018d1f
 80189a8:	08018d43 	.word	0x08018d43
 80189ac:	2000e5b8 	.word	0x2000e5b8

080189b0 <stdio_exit_handler>:
 80189b0:	4a02      	ldr	r2, [pc, #8]	@ (80189bc <stdio_exit_handler+0xc>)
 80189b2:	4903      	ldr	r1, [pc, #12]	@ (80189c0 <stdio_exit_handler+0x10>)
 80189b4:	4803      	ldr	r0, [pc, #12]	@ (80189c4 <stdio_exit_handler+0x14>)
 80189b6:	f000 b869 	b.w	8018a8c <_fwalk_sglue>
 80189ba:	bf00      	nop
 80189bc:	20000a64 	.word	0x20000a64
 80189c0:	08019b39 	.word	0x08019b39
 80189c4:	20000a74 	.word	0x20000a74

080189c8 <cleanup_stdio>:
 80189c8:	6841      	ldr	r1, [r0, #4]
 80189ca:	4b0c      	ldr	r3, [pc, #48]	@ (80189fc <cleanup_stdio+0x34>)
 80189cc:	4299      	cmp	r1, r3
 80189ce:	b510      	push	{r4, lr}
 80189d0:	4604      	mov	r4, r0
 80189d2:	d001      	beq.n	80189d8 <cleanup_stdio+0x10>
 80189d4:	f001 f8b0 	bl	8019b38 <_fflush_r>
 80189d8:	68a1      	ldr	r1, [r4, #8]
 80189da:	4b09      	ldr	r3, [pc, #36]	@ (8018a00 <cleanup_stdio+0x38>)
 80189dc:	4299      	cmp	r1, r3
 80189de:	d002      	beq.n	80189e6 <cleanup_stdio+0x1e>
 80189e0:	4620      	mov	r0, r4
 80189e2:	f001 f8a9 	bl	8019b38 <_fflush_r>
 80189e6:	68e1      	ldr	r1, [r4, #12]
 80189e8:	4b06      	ldr	r3, [pc, #24]	@ (8018a04 <cleanup_stdio+0x3c>)
 80189ea:	4299      	cmp	r1, r3
 80189ec:	d004      	beq.n	80189f8 <cleanup_stdio+0x30>
 80189ee:	4620      	mov	r0, r4
 80189f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189f4:	f001 b8a0 	b.w	8019b38 <_fflush_r>
 80189f8:	bd10      	pop	{r4, pc}
 80189fa:	bf00      	nop
 80189fc:	2000e5b8 	.word	0x2000e5b8
 8018a00:	2000e620 	.word	0x2000e620
 8018a04:	2000e688 	.word	0x2000e688

08018a08 <global_stdio_init.part.0>:
 8018a08:	b510      	push	{r4, lr}
 8018a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8018a38 <global_stdio_init.part.0+0x30>)
 8018a0c:	4c0b      	ldr	r4, [pc, #44]	@ (8018a3c <global_stdio_init.part.0+0x34>)
 8018a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8018a40 <global_stdio_init.part.0+0x38>)
 8018a10:	601a      	str	r2, [r3, #0]
 8018a12:	4620      	mov	r0, r4
 8018a14:	2200      	movs	r2, #0
 8018a16:	2104      	movs	r1, #4
 8018a18:	f7ff ff94 	bl	8018944 <std>
 8018a1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018a20:	2201      	movs	r2, #1
 8018a22:	2109      	movs	r1, #9
 8018a24:	f7ff ff8e 	bl	8018944 <std>
 8018a28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018a2c:	2202      	movs	r2, #2
 8018a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a32:	2112      	movs	r1, #18
 8018a34:	f7ff bf86 	b.w	8018944 <std>
 8018a38:	2000e6f0 	.word	0x2000e6f0
 8018a3c:	2000e5b8 	.word	0x2000e5b8
 8018a40:	080189b1 	.word	0x080189b1

08018a44 <__sfp_lock_acquire>:
 8018a44:	4801      	ldr	r0, [pc, #4]	@ (8018a4c <__sfp_lock_acquire+0x8>)
 8018a46:	f000 bb36 	b.w	80190b6 <__retarget_lock_acquire_recursive>
 8018a4a:	bf00      	nop
 8018a4c:	2000e6fa 	.word	0x2000e6fa

08018a50 <__sfp_lock_release>:
 8018a50:	4801      	ldr	r0, [pc, #4]	@ (8018a58 <__sfp_lock_release+0x8>)
 8018a52:	f000 bb31 	b.w	80190b8 <__retarget_lock_release_recursive>
 8018a56:	bf00      	nop
 8018a58:	2000e6fa 	.word	0x2000e6fa

08018a5c <__sinit>:
 8018a5c:	b510      	push	{r4, lr}
 8018a5e:	4604      	mov	r4, r0
 8018a60:	f7ff fff0 	bl	8018a44 <__sfp_lock_acquire>
 8018a64:	6a23      	ldr	r3, [r4, #32]
 8018a66:	b11b      	cbz	r3, 8018a70 <__sinit+0x14>
 8018a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a6c:	f7ff bff0 	b.w	8018a50 <__sfp_lock_release>
 8018a70:	4b04      	ldr	r3, [pc, #16]	@ (8018a84 <__sinit+0x28>)
 8018a72:	6223      	str	r3, [r4, #32]
 8018a74:	4b04      	ldr	r3, [pc, #16]	@ (8018a88 <__sinit+0x2c>)
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d1f5      	bne.n	8018a68 <__sinit+0xc>
 8018a7c:	f7ff ffc4 	bl	8018a08 <global_stdio_init.part.0>
 8018a80:	e7f2      	b.n	8018a68 <__sinit+0xc>
 8018a82:	bf00      	nop
 8018a84:	080189c9 	.word	0x080189c9
 8018a88:	2000e6f0 	.word	0x2000e6f0

08018a8c <_fwalk_sglue>:
 8018a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a90:	4607      	mov	r7, r0
 8018a92:	4688      	mov	r8, r1
 8018a94:	4614      	mov	r4, r2
 8018a96:	2600      	movs	r6, #0
 8018a98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018a9c:	f1b9 0901 	subs.w	r9, r9, #1
 8018aa0:	d505      	bpl.n	8018aae <_fwalk_sglue+0x22>
 8018aa2:	6824      	ldr	r4, [r4, #0]
 8018aa4:	2c00      	cmp	r4, #0
 8018aa6:	d1f7      	bne.n	8018a98 <_fwalk_sglue+0xc>
 8018aa8:	4630      	mov	r0, r6
 8018aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018aae:	89ab      	ldrh	r3, [r5, #12]
 8018ab0:	2b01      	cmp	r3, #1
 8018ab2:	d907      	bls.n	8018ac4 <_fwalk_sglue+0x38>
 8018ab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018ab8:	3301      	adds	r3, #1
 8018aba:	d003      	beq.n	8018ac4 <_fwalk_sglue+0x38>
 8018abc:	4629      	mov	r1, r5
 8018abe:	4638      	mov	r0, r7
 8018ac0:	47c0      	blx	r8
 8018ac2:	4306      	orrs	r6, r0
 8018ac4:	3568      	adds	r5, #104	@ 0x68
 8018ac6:	e7e9      	b.n	8018a9c <_fwalk_sglue+0x10>

08018ac8 <_fwrite_r>:
 8018ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018acc:	9c08      	ldr	r4, [sp, #32]
 8018ace:	468a      	mov	sl, r1
 8018ad0:	4690      	mov	r8, r2
 8018ad2:	fb02 f903 	mul.w	r9, r2, r3
 8018ad6:	4606      	mov	r6, r0
 8018ad8:	b118      	cbz	r0, 8018ae2 <_fwrite_r+0x1a>
 8018ada:	6a03      	ldr	r3, [r0, #32]
 8018adc:	b90b      	cbnz	r3, 8018ae2 <_fwrite_r+0x1a>
 8018ade:	f7ff ffbd 	bl	8018a5c <__sinit>
 8018ae2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018ae4:	07dd      	lsls	r5, r3, #31
 8018ae6:	d405      	bmi.n	8018af4 <_fwrite_r+0x2c>
 8018ae8:	89a3      	ldrh	r3, [r4, #12]
 8018aea:	0598      	lsls	r0, r3, #22
 8018aec:	d402      	bmi.n	8018af4 <_fwrite_r+0x2c>
 8018aee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018af0:	f000 fae1 	bl	80190b6 <__retarget_lock_acquire_recursive>
 8018af4:	89a3      	ldrh	r3, [r4, #12]
 8018af6:	0719      	lsls	r1, r3, #28
 8018af8:	d516      	bpl.n	8018b28 <_fwrite_r+0x60>
 8018afa:	6923      	ldr	r3, [r4, #16]
 8018afc:	b1a3      	cbz	r3, 8018b28 <_fwrite_r+0x60>
 8018afe:	2500      	movs	r5, #0
 8018b00:	454d      	cmp	r5, r9
 8018b02:	d01f      	beq.n	8018b44 <_fwrite_r+0x7c>
 8018b04:	68a7      	ldr	r7, [r4, #8]
 8018b06:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8018b0a:	3f01      	subs	r7, #1
 8018b0c:	2f00      	cmp	r7, #0
 8018b0e:	60a7      	str	r7, [r4, #8]
 8018b10:	da04      	bge.n	8018b1c <_fwrite_r+0x54>
 8018b12:	69a3      	ldr	r3, [r4, #24]
 8018b14:	429f      	cmp	r7, r3
 8018b16:	db0f      	blt.n	8018b38 <_fwrite_r+0x70>
 8018b18:	290a      	cmp	r1, #10
 8018b1a:	d00d      	beq.n	8018b38 <_fwrite_r+0x70>
 8018b1c:	6823      	ldr	r3, [r4, #0]
 8018b1e:	1c5a      	adds	r2, r3, #1
 8018b20:	6022      	str	r2, [r4, #0]
 8018b22:	7019      	strb	r1, [r3, #0]
 8018b24:	3501      	adds	r5, #1
 8018b26:	e7eb      	b.n	8018b00 <_fwrite_r+0x38>
 8018b28:	4621      	mov	r1, r4
 8018b2a:	4630      	mov	r0, r6
 8018b2c:	f000 f984 	bl	8018e38 <__swsetup_r>
 8018b30:	2800      	cmp	r0, #0
 8018b32:	d0e4      	beq.n	8018afe <_fwrite_r+0x36>
 8018b34:	2500      	movs	r5, #0
 8018b36:	e005      	b.n	8018b44 <_fwrite_r+0x7c>
 8018b38:	4622      	mov	r2, r4
 8018b3a:	4630      	mov	r0, r6
 8018b3c:	f000 f93e 	bl	8018dbc <__swbuf_r>
 8018b40:	3001      	adds	r0, #1
 8018b42:	d1ef      	bne.n	8018b24 <_fwrite_r+0x5c>
 8018b44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018b46:	07da      	lsls	r2, r3, #31
 8018b48:	d405      	bmi.n	8018b56 <_fwrite_r+0x8e>
 8018b4a:	89a3      	ldrh	r3, [r4, #12]
 8018b4c:	059b      	lsls	r3, r3, #22
 8018b4e:	d402      	bmi.n	8018b56 <_fwrite_r+0x8e>
 8018b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018b52:	f000 fab1 	bl	80190b8 <__retarget_lock_release_recursive>
 8018b56:	fbb5 f0f8 	udiv	r0, r5, r8
 8018b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018b60 <fwrite>:
 8018b60:	b507      	push	{r0, r1, r2, lr}
 8018b62:	9300      	str	r3, [sp, #0]
 8018b64:	4613      	mov	r3, r2
 8018b66:	460a      	mov	r2, r1
 8018b68:	4601      	mov	r1, r0
 8018b6a:	4803      	ldr	r0, [pc, #12]	@ (8018b78 <fwrite+0x18>)
 8018b6c:	6800      	ldr	r0, [r0, #0]
 8018b6e:	f7ff ffab 	bl	8018ac8 <_fwrite_r>
 8018b72:	b003      	add	sp, #12
 8018b74:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b78:	20000a70 	.word	0x20000a70

08018b7c <iprintf>:
 8018b7c:	b40f      	push	{r0, r1, r2, r3}
 8018b7e:	b507      	push	{r0, r1, r2, lr}
 8018b80:	4906      	ldr	r1, [pc, #24]	@ (8018b9c <iprintf+0x20>)
 8018b82:	ab04      	add	r3, sp, #16
 8018b84:	6808      	ldr	r0, [r1, #0]
 8018b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b8a:	6881      	ldr	r1, [r0, #8]
 8018b8c:	9301      	str	r3, [sp, #4]
 8018b8e:	f000 fca9 	bl	80194e4 <_vfiprintf_r>
 8018b92:	b003      	add	sp, #12
 8018b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8018b98:	b004      	add	sp, #16
 8018b9a:	4770      	bx	lr
 8018b9c:	20000a70 	.word	0x20000a70

08018ba0 <_puts_r>:
 8018ba0:	6a03      	ldr	r3, [r0, #32]
 8018ba2:	b570      	push	{r4, r5, r6, lr}
 8018ba4:	6884      	ldr	r4, [r0, #8]
 8018ba6:	4605      	mov	r5, r0
 8018ba8:	460e      	mov	r6, r1
 8018baa:	b90b      	cbnz	r3, 8018bb0 <_puts_r+0x10>
 8018bac:	f7ff ff56 	bl	8018a5c <__sinit>
 8018bb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018bb2:	07db      	lsls	r3, r3, #31
 8018bb4:	d405      	bmi.n	8018bc2 <_puts_r+0x22>
 8018bb6:	89a3      	ldrh	r3, [r4, #12]
 8018bb8:	0598      	lsls	r0, r3, #22
 8018bba:	d402      	bmi.n	8018bc2 <_puts_r+0x22>
 8018bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018bbe:	f000 fa7a 	bl	80190b6 <__retarget_lock_acquire_recursive>
 8018bc2:	89a3      	ldrh	r3, [r4, #12]
 8018bc4:	0719      	lsls	r1, r3, #28
 8018bc6:	d502      	bpl.n	8018bce <_puts_r+0x2e>
 8018bc8:	6923      	ldr	r3, [r4, #16]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d135      	bne.n	8018c3a <_puts_r+0x9a>
 8018bce:	4621      	mov	r1, r4
 8018bd0:	4628      	mov	r0, r5
 8018bd2:	f000 f931 	bl	8018e38 <__swsetup_r>
 8018bd6:	b380      	cbz	r0, 8018c3a <_puts_r+0x9a>
 8018bd8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018bdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018bde:	07da      	lsls	r2, r3, #31
 8018be0:	d405      	bmi.n	8018bee <_puts_r+0x4e>
 8018be2:	89a3      	ldrh	r3, [r4, #12]
 8018be4:	059b      	lsls	r3, r3, #22
 8018be6:	d402      	bmi.n	8018bee <_puts_r+0x4e>
 8018be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018bea:	f000 fa65 	bl	80190b8 <__retarget_lock_release_recursive>
 8018bee:	4628      	mov	r0, r5
 8018bf0:	bd70      	pop	{r4, r5, r6, pc}
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	da04      	bge.n	8018c00 <_puts_r+0x60>
 8018bf6:	69a2      	ldr	r2, [r4, #24]
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	dc17      	bgt.n	8018c2c <_puts_r+0x8c>
 8018bfc:	290a      	cmp	r1, #10
 8018bfe:	d015      	beq.n	8018c2c <_puts_r+0x8c>
 8018c00:	6823      	ldr	r3, [r4, #0]
 8018c02:	1c5a      	adds	r2, r3, #1
 8018c04:	6022      	str	r2, [r4, #0]
 8018c06:	7019      	strb	r1, [r3, #0]
 8018c08:	68a3      	ldr	r3, [r4, #8]
 8018c0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018c0e:	3b01      	subs	r3, #1
 8018c10:	60a3      	str	r3, [r4, #8]
 8018c12:	2900      	cmp	r1, #0
 8018c14:	d1ed      	bne.n	8018bf2 <_puts_r+0x52>
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	da11      	bge.n	8018c3e <_puts_r+0x9e>
 8018c1a:	4622      	mov	r2, r4
 8018c1c:	210a      	movs	r1, #10
 8018c1e:	4628      	mov	r0, r5
 8018c20:	f000 f8cc 	bl	8018dbc <__swbuf_r>
 8018c24:	3001      	adds	r0, #1
 8018c26:	d0d7      	beq.n	8018bd8 <_puts_r+0x38>
 8018c28:	250a      	movs	r5, #10
 8018c2a:	e7d7      	b.n	8018bdc <_puts_r+0x3c>
 8018c2c:	4622      	mov	r2, r4
 8018c2e:	4628      	mov	r0, r5
 8018c30:	f000 f8c4 	bl	8018dbc <__swbuf_r>
 8018c34:	3001      	adds	r0, #1
 8018c36:	d1e7      	bne.n	8018c08 <_puts_r+0x68>
 8018c38:	e7ce      	b.n	8018bd8 <_puts_r+0x38>
 8018c3a:	3e01      	subs	r6, #1
 8018c3c:	e7e4      	b.n	8018c08 <_puts_r+0x68>
 8018c3e:	6823      	ldr	r3, [r4, #0]
 8018c40:	1c5a      	adds	r2, r3, #1
 8018c42:	6022      	str	r2, [r4, #0]
 8018c44:	220a      	movs	r2, #10
 8018c46:	701a      	strb	r2, [r3, #0]
 8018c48:	e7ee      	b.n	8018c28 <_puts_r+0x88>
	...

08018c4c <puts>:
 8018c4c:	4b02      	ldr	r3, [pc, #8]	@ (8018c58 <puts+0xc>)
 8018c4e:	4601      	mov	r1, r0
 8018c50:	6818      	ldr	r0, [r3, #0]
 8018c52:	f7ff bfa5 	b.w	8018ba0 <_puts_r>
 8018c56:	bf00      	nop
 8018c58:	20000a70 	.word	0x20000a70

08018c5c <sniprintf>:
 8018c5c:	b40c      	push	{r2, r3}
 8018c5e:	b530      	push	{r4, r5, lr}
 8018c60:	4b17      	ldr	r3, [pc, #92]	@ (8018cc0 <sniprintf+0x64>)
 8018c62:	1e0c      	subs	r4, r1, #0
 8018c64:	681d      	ldr	r5, [r3, #0]
 8018c66:	b09d      	sub	sp, #116	@ 0x74
 8018c68:	da08      	bge.n	8018c7c <sniprintf+0x20>
 8018c6a:	238b      	movs	r3, #139	@ 0x8b
 8018c6c:	602b      	str	r3, [r5, #0]
 8018c6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c72:	b01d      	add	sp, #116	@ 0x74
 8018c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c78:	b002      	add	sp, #8
 8018c7a:	4770      	bx	lr
 8018c7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018c80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018c84:	bf14      	ite	ne
 8018c86:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018c8a:	4623      	moveq	r3, r4
 8018c8c:	9304      	str	r3, [sp, #16]
 8018c8e:	9307      	str	r3, [sp, #28]
 8018c90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018c94:	9002      	str	r0, [sp, #8]
 8018c96:	9006      	str	r0, [sp, #24]
 8018c98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018c9c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018c9e:	ab21      	add	r3, sp, #132	@ 0x84
 8018ca0:	a902      	add	r1, sp, #8
 8018ca2:	4628      	mov	r0, r5
 8018ca4:	9301      	str	r3, [sp, #4]
 8018ca6:	f000 faf7 	bl	8019298 <_svfiprintf_r>
 8018caa:	1c43      	adds	r3, r0, #1
 8018cac:	bfbc      	itt	lt
 8018cae:	238b      	movlt	r3, #139	@ 0x8b
 8018cb0:	602b      	strlt	r3, [r5, #0]
 8018cb2:	2c00      	cmp	r4, #0
 8018cb4:	d0dd      	beq.n	8018c72 <sniprintf+0x16>
 8018cb6:	9b02      	ldr	r3, [sp, #8]
 8018cb8:	2200      	movs	r2, #0
 8018cba:	701a      	strb	r2, [r3, #0]
 8018cbc:	e7d9      	b.n	8018c72 <sniprintf+0x16>
 8018cbe:	bf00      	nop
 8018cc0:	20000a70 	.word	0x20000a70

08018cc4 <__sread>:
 8018cc4:	b510      	push	{r4, lr}
 8018cc6:	460c      	mov	r4, r1
 8018cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ccc:	f000 f994 	bl	8018ff8 <_read_r>
 8018cd0:	2800      	cmp	r0, #0
 8018cd2:	bfab      	itete	ge
 8018cd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8018cd8:	181b      	addge	r3, r3, r0
 8018cda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018cde:	bfac      	ite	ge
 8018ce0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018ce2:	81a3      	strhlt	r3, [r4, #12]
 8018ce4:	bd10      	pop	{r4, pc}

08018ce6 <__swrite>:
 8018ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cea:	461f      	mov	r7, r3
 8018cec:	898b      	ldrh	r3, [r1, #12]
 8018cee:	05db      	lsls	r3, r3, #23
 8018cf0:	4605      	mov	r5, r0
 8018cf2:	460c      	mov	r4, r1
 8018cf4:	4616      	mov	r6, r2
 8018cf6:	d505      	bpl.n	8018d04 <__swrite+0x1e>
 8018cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cfc:	2302      	movs	r3, #2
 8018cfe:	2200      	movs	r2, #0
 8018d00:	f000 f968 	bl	8018fd4 <_lseek_r>
 8018d04:	89a3      	ldrh	r3, [r4, #12]
 8018d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018d0e:	81a3      	strh	r3, [r4, #12]
 8018d10:	4632      	mov	r2, r6
 8018d12:	463b      	mov	r3, r7
 8018d14:	4628      	mov	r0, r5
 8018d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d1a:	f000 b98f 	b.w	801903c <_write_r>

08018d1e <__sseek>:
 8018d1e:	b510      	push	{r4, lr}
 8018d20:	460c      	mov	r4, r1
 8018d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d26:	f000 f955 	bl	8018fd4 <_lseek_r>
 8018d2a:	1c43      	adds	r3, r0, #1
 8018d2c:	89a3      	ldrh	r3, [r4, #12]
 8018d2e:	bf15      	itete	ne
 8018d30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018d32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018d36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018d3a:	81a3      	strheq	r3, [r4, #12]
 8018d3c:	bf18      	it	ne
 8018d3e:	81a3      	strhne	r3, [r4, #12]
 8018d40:	bd10      	pop	{r4, pc}

08018d42 <__sclose>:
 8018d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d46:	f000 b935 	b.w	8018fb4 <_close_r>

08018d4a <_vsniprintf_r>:
 8018d4a:	b530      	push	{r4, r5, lr}
 8018d4c:	4614      	mov	r4, r2
 8018d4e:	2c00      	cmp	r4, #0
 8018d50:	b09b      	sub	sp, #108	@ 0x6c
 8018d52:	4605      	mov	r5, r0
 8018d54:	461a      	mov	r2, r3
 8018d56:	da05      	bge.n	8018d64 <_vsniprintf_r+0x1a>
 8018d58:	238b      	movs	r3, #139	@ 0x8b
 8018d5a:	6003      	str	r3, [r0, #0]
 8018d5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018d60:	b01b      	add	sp, #108	@ 0x6c
 8018d62:	bd30      	pop	{r4, r5, pc}
 8018d64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018d68:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018d6c:	bf14      	ite	ne
 8018d6e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018d72:	4623      	moveq	r3, r4
 8018d74:	9302      	str	r3, [sp, #8]
 8018d76:	9305      	str	r3, [sp, #20]
 8018d78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018d7c:	9100      	str	r1, [sp, #0]
 8018d7e:	9104      	str	r1, [sp, #16]
 8018d80:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018d84:	4669      	mov	r1, sp
 8018d86:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018d88:	f000 fa86 	bl	8019298 <_svfiprintf_r>
 8018d8c:	1c43      	adds	r3, r0, #1
 8018d8e:	bfbc      	itt	lt
 8018d90:	238b      	movlt	r3, #139	@ 0x8b
 8018d92:	602b      	strlt	r3, [r5, #0]
 8018d94:	2c00      	cmp	r4, #0
 8018d96:	d0e3      	beq.n	8018d60 <_vsniprintf_r+0x16>
 8018d98:	9b00      	ldr	r3, [sp, #0]
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	701a      	strb	r2, [r3, #0]
 8018d9e:	e7df      	b.n	8018d60 <_vsniprintf_r+0x16>

08018da0 <vsniprintf>:
 8018da0:	b507      	push	{r0, r1, r2, lr}
 8018da2:	9300      	str	r3, [sp, #0]
 8018da4:	4613      	mov	r3, r2
 8018da6:	460a      	mov	r2, r1
 8018da8:	4601      	mov	r1, r0
 8018daa:	4803      	ldr	r0, [pc, #12]	@ (8018db8 <vsniprintf+0x18>)
 8018dac:	6800      	ldr	r0, [r0, #0]
 8018dae:	f7ff ffcc 	bl	8018d4a <_vsniprintf_r>
 8018db2:	b003      	add	sp, #12
 8018db4:	f85d fb04 	ldr.w	pc, [sp], #4
 8018db8:	20000a70 	.word	0x20000a70

08018dbc <__swbuf_r>:
 8018dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dbe:	460e      	mov	r6, r1
 8018dc0:	4614      	mov	r4, r2
 8018dc2:	4605      	mov	r5, r0
 8018dc4:	b118      	cbz	r0, 8018dce <__swbuf_r+0x12>
 8018dc6:	6a03      	ldr	r3, [r0, #32]
 8018dc8:	b90b      	cbnz	r3, 8018dce <__swbuf_r+0x12>
 8018dca:	f7ff fe47 	bl	8018a5c <__sinit>
 8018dce:	69a3      	ldr	r3, [r4, #24]
 8018dd0:	60a3      	str	r3, [r4, #8]
 8018dd2:	89a3      	ldrh	r3, [r4, #12]
 8018dd4:	071a      	lsls	r2, r3, #28
 8018dd6:	d501      	bpl.n	8018ddc <__swbuf_r+0x20>
 8018dd8:	6923      	ldr	r3, [r4, #16]
 8018dda:	b943      	cbnz	r3, 8018dee <__swbuf_r+0x32>
 8018ddc:	4621      	mov	r1, r4
 8018dde:	4628      	mov	r0, r5
 8018de0:	f000 f82a 	bl	8018e38 <__swsetup_r>
 8018de4:	b118      	cbz	r0, 8018dee <__swbuf_r+0x32>
 8018de6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018dea:	4638      	mov	r0, r7
 8018dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dee:	6823      	ldr	r3, [r4, #0]
 8018df0:	6922      	ldr	r2, [r4, #16]
 8018df2:	1a98      	subs	r0, r3, r2
 8018df4:	6963      	ldr	r3, [r4, #20]
 8018df6:	b2f6      	uxtb	r6, r6
 8018df8:	4283      	cmp	r3, r0
 8018dfa:	4637      	mov	r7, r6
 8018dfc:	dc05      	bgt.n	8018e0a <__swbuf_r+0x4e>
 8018dfe:	4621      	mov	r1, r4
 8018e00:	4628      	mov	r0, r5
 8018e02:	f000 fe99 	bl	8019b38 <_fflush_r>
 8018e06:	2800      	cmp	r0, #0
 8018e08:	d1ed      	bne.n	8018de6 <__swbuf_r+0x2a>
 8018e0a:	68a3      	ldr	r3, [r4, #8]
 8018e0c:	3b01      	subs	r3, #1
 8018e0e:	60a3      	str	r3, [r4, #8]
 8018e10:	6823      	ldr	r3, [r4, #0]
 8018e12:	1c5a      	adds	r2, r3, #1
 8018e14:	6022      	str	r2, [r4, #0]
 8018e16:	701e      	strb	r6, [r3, #0]
 8018e18:	6962      	ldr	r2, [r4, #20]
 8018e1a:	1c43      	adds	r3, r0, #1
 8018e1c:	429a      	cmp	r2, r3
 8018e1e:	d004      	beq.n	8018e2a <__swbuf_r+0x6e>
 8018e20:	89a3      	ldrh	r3, [r4, #12]
 8018e22:	07db      	lsls	r3, r3, #31
 8018e24:	d5e1      	bpl.n	8018dea <__swbuf_r+0x2e>
 8018e26:	2e0a      	cmp	r6, #10
 8018e28:	d1df      	bne.n	8018dea <__swbuf_r+0x2e>
 8018e2a:	4621      	mov	r1, r4
 8018e2c:	4628      	mov	r0, r5
 8018e2e:	f000 fe83 	bl	8019b38 <_fflush_r>
 8018e32:	2800      	cmp	r0, #0
 8018e34:	d0d9      	beq.n	8018dea <__swbuf_r+0x2e>
 8018e36:	e7d6      	b.n	8018de6 <__swbuf_r+0x2a>

08018e38 <__swsetup_r>:
 8018e38:	b538      	push	{r3, r4, r5, lr}
 8018e3a:	4b29      	ldr	r3, [pc, #164]	@ (8018ee0 <__swsetup_r+0xa8>)
 8018e3c:	4605      	mov	r5, r0
 8018e3e:	6818      	ldr	r0, [r3, #0]
 8018e40:	460c      	mov	r4, r1
 8018e42:	b118      	cbz	r0, 8018e4c <__swsetup_r+0x14>
 8018e44:	6a03      	ldr	r3, [r0, #32]
 8018e46:	b90b      	cbnz	r3, 8018e4c <__swsetup_r+0x14>
 8018e48:	f7ff fe08 	bl	8018a5c <__sinit>
 8018e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e50:	0719      	lsls	r1, r3, #28
 8018e52:	d422      	bmi.n	8018e9a <__swsetup_r+0x62>
 8018e54:	06da      	lsls	r2, r3, #27
 8018e56:	d407      	bmi.n	8018e68 <__swsetup_r+0x30>
 8018e58:	2209      	movs	r2, #9
 8018e5a:	602a      	str	r2, [r5, #0]
 8018e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018e60:	81a3      	strh	r3, [r4, #12]
 8018e62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e66:	e033      	b.n	8018ed0 <__swsetup_r+0x98>
 8018e68:	0758      	lsls	r0, r3, #29
 8018e6a:	d512      	bpl.n	8018e92 <__swsetup_r+0x5a>
 8018e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018e6e:	b141      	cbz	r1, 8018e82 <__swsetup_r+0x4a>
 8018e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018e74:	4299      	cmp	r1, r3
 8018e76:	d002      	beq.n	8018e7e <__swsetup_r+0x46>
 8018e78:	4628      	mov	r0, r5
 8018e7a:	f000 f95f 	bl	801913c <_free_r>
 8018e7e:	2300      	movs	r3, #0
 8018e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8018e82:	89a3      	ldrh	r3, [r4, #12]
 8018e84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018e88:	81a3      	strh	r3, [r4, #12]
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	6063      	str	r3, [r4, #4]
 8018e8e:	6923      	ldr	r3, [r4, #16]
 8018e90:	6023      	str	r3, [r4, #0]
 8018e92:	89a3      	ldrh	r3, [r4, #12]
 8018e94:	f043 0308 	orr.w	r3, r3, #8
 8018e98:	81a3      	strh	r3, [r4, #12]
 8018e9a:	6923      	ldr	r3, [r4, #16]
 8018e9c:	b94b      	cbnz	r3, 8018eb2 <__swsetup_r+0x7a>
 8018e9e:	89a3      	ldrh	r3, [r4, #12]
 8018ea0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018ea8:	d003      	beq.n	8018eb2 <__swsetup_r+0x7a>
 8018eaa:	4621      	mov	r1, r4
 8018eac:	4628      	mov	r0, r5
 8018eae:	f000 fea3 	bl	8019bf8 <__smakebuf_r>
 8018eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018eb6:	f013 0201 	ands.w	r2, r3, #1
 8018eba:	d00a      	beq.n	8018ed2 <__swsetup_r+0x9a>
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	60a2      	str	r2, [r4, #8]
 8018ec0:	6962      	ldr	r2, [r4, #20]
 8018ec2:	4252      	negs	r2, r2
 8018ec4:	61a2      	str	r2, [r4, #24]
 8018ec6:	6922      	ldr	r2, [r4, #16]
 8018ec8:	b942      	cbnz	r2, 8018edc <__swsetup_r+0xa4>
 8018eca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018ece:	d1c5      	bne.n	8018e5c <__swsetup_r+0x24>
 8018ed0:	bd38      	pop	{r3, r4, r5, pc}
 8018ed2:	0799      	lsls	r1, r3, #30
 8018ed4:	bf58      	it	pl
 8018ed6:	6962      	ldrpl	r2, [r4, #20]
 8018ed8:	60a2      	str	r2, [r4, #8]
 8018eda:	e7f4      	b.n	8018ec6 <__swsetup_r+0x8e>
 8018edc:	2000      	movs	r0, #0
 8018ede:	e7f7      	b.n	8018ed0 <__swsetup_r+0x98>
 8018ee0:	20000a70 	.word	0x20000a70

08018ee4 <memcmp>:
 8018ee4:	b510      	push	{r4, lr}
 8018ee6:	3901      	subs	r1, #1
 8018ee8:	4402      	add	r2, r0
 8018eea:	4290      	cmp	r0, r2
 8018eec:	d101      	bne.n	8018ef2 <memcmp+0xe>
 8018eee:	2000      	movs	r0, #0
 8018ef0:	e005      	b.n	8018efe <memcmp+0x1a>
 8018ef2:	7803      	ldrb	r3, [r0, #0]
 8018ef4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018ef8:	42a3      	cmp	r3, r4
 8018efa:	d001      	beq.n	8018f00 <memcmp+0x1c>
 8018efc:	1b18      	subs	r0, r3, r4
 8018efe:	bd10      	pop	{r4, pc}
 8018f00:	3001      	adds	r0, #1
 8018f02:	e7f2      	b.n	8018eea <memcmp+0x6>

08018f04 <memmove>:
 8018f04:	4288      	cmp	r0, r1
 8018f06:	b510      	push	{r4, lr}
 8018f08:	eb01 0402 	add.w	r4, r1, r2
 8018f0c:	d902      	bls.n	8018f14 <memmove+0x10>
 8018f0e:	4284      	cmp	r4, r0
 8018f10:	4623      	mov	r3, r4
 8018f12:	d807      	bhi.n	8018f24 <memmove+0x20>
 8018f14:	1e43      	subs	r3, r0, #1
 8018f16:	42a1      	cmp	r1, r4
 8018f18:	d008      	beq.n	8018f2c <memmove+0x28>
 8018f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018f22:	e7f8      	b.n	8018f16 <memmove+0x12>
 8018f24:	4402      	add	r2, r0
 8018f26:	4601      	mov	r1, r0
 8018f28:	428a      	cmp	r2, r1
 8018f2a:	d100      	bne.n	8018f2e <memmove+0x2a>
 8018f2c:	bd10      	pop	{r4, pc}
 8018f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018f36:	e7f7      	b.n	8018f28 <memmove+0x24>

08018f38 <memset>:
 8018f38:	4402      	add	r2, r0
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	4293      	cmp	r3, r2
 8018f3e:	d100      	bne.n	8018f42 <memset+0xa>
 8018f40:	4770      	bx	lr
 8018f42:	f803 1b01 	strb.w	r1, [r3], #1
 8018f46:	e7f9      	b.n	8018f3c <memset+0x4>

08018f48 <strchr>:
 8018f48:	b2c9      	uxtb	r1, r1
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f52:	b112      	cbz	r2, 8018f5a <strchr+0x12>
 8018f54:	428a      	cmp	r2, r1
 8018f56:	d1f9      	bne.n	8018f4c <strchr+0x4>
 8018f58:	4770      	bx	lr
 8018f5a:	2900      	cmp	r1, #0
 8018f5c:	bf18      	it	ne
 8018f5e:	2000      	movne	r0, #0
 8018f60:	4770      	bx	lr

08018f62 <strncmp>:
 8018f62:	b510      	push	{r4, lr}
 8018f64:	b16a      	cbz	r2, 8018f82 <strncmp+0x20>
 8018f66:	3901      	subs	r1, #1
 8018f68:	1884      	adds	r4, r0, r2
 8018f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d103      	bne.n	8018f7e <strncmp+0x1c>
 8018f76:	42a0      	cmp	r0, r4
 8018f78:	d001      	beq.n	8018f7e <strncmp+0x1c>
 8018f7a:	2a00      	cmp	r2, #0
 8018f7c:	d1f5      	bne.n	8018f6a <strncmp+0x8>
 8018f7e:	1ad0      	subs	r0, r2, r3
 8018f80:	bd10      	pop	{r4, pc}
 8018f82:	4610      	mov	r0, r2
 8018f84:	e7fc      	b.n	8018f80 <strncmp+0x1e>

08018f86 <strstr>:
 8018f86:	780a      	ldrb	r2, [r1, #0]
 8018f88:	b570      	push	{r4, r5, r6, lr}
 8018f8a:	b96a      	cbnz	r2, 8018fa8 <strstr+0x22>
 8018f8c:	bd70      	pop	{r4, r5, r6, pc}
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	d109      	bne.n	8018fa6 <strstr+0x20>
 8018f92:	460c      	mov	r4, r1
 8018f94:	4605      	mov	r5, r0
 8018f96:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d0f6      	beq.n	8018f8c <strstr+0x6>
 8018f9e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018fa2:	429e      	cmp	r6, r3
 8018fa4:	d0f7      	beq.n	8018f96 <strstr+0x10>
 8018fa6:	3001      	adds	r0, #1
 8018fa8:	7803      	ldrb	r3, [r0, #0]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d1ef      	bne.n	8018f8e <strstr+0x8>
 8018fae:	4618      	mov	r0, r3
 8018fb0:	e7ec      	b.n	8018f8c <strstr+0x6>
	...

08018fb4 <_close_r>:
 8018fb4:	b538      	push	{r3, r4, r5, lr}
 8018fb6:	4d06      	ldr	r5, [pc, #24]	@ (8018fd0 <_close_r+0x1c>)
 8018fb8:	2300      	movs	r3, #0
 8018fba:	4604      	mov	r4, r0
 8018fbc:	4608      	mov	r0, r1
 8018fbe:	602b      	str	r3, [r5, #0]
 8018fc0:	f7e9 fd6e 	bl	8002aa0 <_close>
 8018fc4:	1c43      	adds	r3, r0, #1
 8018fc6:	d102      	bne.n	8018fce <_close_r+0x1a>
 8018fc8:	682b      	ldr	r3, [r5, #0]
 8018fca:	b103      	cbz	r3, 8018fce <_close_r+0x1a>
 8018fcc:	6023      	str	r3, [r4, #0]
 8018fce:	bd38      	pop	{r3, r4, r5, pc}
 8018fd0:	2000e6f4 	.word	0x2000e6f4

08018fd4 <_lseek_r>:
 8018fd4:	b538      	push	{r3, r4, r5, lr}
 8018fd6:	4d07      	ldr	r5, [pc, #28]	@ (8018ff4 <_lseek_r+0x20>)
 8018fd8:	4604      	mov	r4, r0
 8018fda:	4608      	mov	r0, r1
 8018fdc:	4611      	mov	r1, r2
 8018fde:	2200      	movs	r2, #0
 8018fe0:	602a      	str	r2, [r5, #0]
 8018fe2:	461a      	mov	r2, r3
 8018fe4:	f7e9 fd83 	bl	8002aee <_lseek>
 8018fe8:	1c43      	adds	r3, r0, #1
 8018fea:	d102      	bne.n	8018ff2 <_lseek_r+0x1e>
 8018fec:	682b      	ldr	r3, [r5, #0]
 8018fee:	b103      	cbz	r3, 8018ff2 <_lseek_r+0x1e>
 8018ff0:	6023      	str	r3, [r4, #0]
 8018ff2:	bd38      	pop	{r3, r4, r5, pc}
 8018ff4:	2000e6f4 	.word	0x2000e6f4

08018ff8 <_read_r>:
 8018ff8:	b538      	push	{r3, r4, r5, lr}
 8018ffa:	4d07      	ldr	r5, [pc, #28]	@ (8019018 <_read_r+0x20>)
 8018ffc:	4604      	mov	r4, r0
 8018ffe:	4608      	mov	r0, r1
 8019000:	4611      	mov	r1, r2
 8019002:	2200      	movs	r2, #0
 8019004:	602a      	str	r2, [r5, #0]
 8019006:	461a      	mov	r2, r3
 8019008:	f7e9 fd11 	bl	8002a2e <_read>
 801900c:	1c43      	adds	r3, r0, #1
 801900e:	d102      	bne.n	8019016 <_read_r+0x1e>
 8019010:	682b      	ldr	r3, [r5, #0]
 8019012:	b103      	cbz	r3, 8019016 <_read_r+0x1e>
 8019014:	6023      	str	r3, [r4, #0]
 8019016:	bd38      	pop	{r3, r4, r5, pc}
 8019018:	2000e6f4 	.word	0x2000e6f4

0801901c <_sbrk_r>:
 801901c:	b538      	push	{r3, r4, r5, lr}
 801901e:	4d06      	ldr	r5, [pc, #24]	@ (8019038 <_sbrk_r+0x1c>)
 8019020:	2300      	movs	r3, #0
 8019022:	4604      	mov	r4, r0
 8019024:	4608      	mov	r0, r1
 8019026:	602b      	str	r3, [r5, #0]
 8019028:	f7e9 fd6e 	bl	8002b08 <_sbrk>
 801902c:	1c43      	adds	r3, r0, #1
 801902e:	d102      	bne.n	8019036 <_sbrk_r+0x1a>
 8019030:	682b      	ldr	r3, [r5, #0]
 8019032:	b103      	cbz	r3, 8019036 <_sbrk_r+0x1a>
 8019034:	6023      	str	r3, [r4, #0]
 8019036:	bd38      	pop	{r3, r4, r5, pc}
 8019038:	2000e6f4 	.word	0x2000e6f4

0801903c <_write_r>:
 801903c:	b538      	push	{r3, r4, r5, lr}
 801903e:	4d07      	ldr	r5, [pc, #28]	@ (801905c <_write_r+0x20>)
 8019040:	4604      	mov	r4, r0
 8019042:	4608      	mov	r0, r1
 8019044:	4611      	mov	r1, r2
 8019046:	2200      	movs	r2, #0
 8019048:	602a      	str	r2, [r5, #0]
 801904a:	461a      	mov	r2, r3
 801904c:	f7e9 fd0c 	bl	8002a68 <_write>
 8019050:	1c43      	adds	r3, r0, #1
 8019052:	d102      	bne.n	801905a <_write_r+0x1e>
 8019054:	682b      	ldr	r3, [r5, #0]
 8019056:	b103      	cbz	r3, 801905a <_write_r+0x1e>
 8019058:	6023      	str	r3, [r4, #0]
 801905a:	bd38      	pop	{r3, r4, r5, pc}
 801905c:	2000e6f4 	.word	0x2000e6f4

08019060 <__errno>:
 8019060:	4b01      	ldr	r3, [pc, #4]	@ (8019068 <__errno+0x8>)
 8019062:	6818      	ldr	r0, [r3, #0]
 8019064:	4770      	bx	lr
 8019066:	bf00      	nop
 8019068:	20000a70 	.word	0x20000a70

0801906c <__libc_init_array>:
 801906c:	b570      	push	{r4, r5, r6, lr}
 801906e:	4d0d      	ldr	r5, [pc, #52]	@ (80190a4 <__libc_init_array+0x38>)
 8019070:	4c0d      	ldr	r4, [pc, #52]	@ (80190a8 <__libc_init_array+0x3c>)
 8019072:	1b64      	subs	r4, r4, r5
 8019074:	10a4      	asrs	r4, r4, #2
 8019076:	2600      	movs	r6, #0
 8019078:	42a6      	cmp	r6, r4
 801907a:	d109      	bne.n	8019090 <__libc_init_array+0x24>
 801907c:	4d0b      	ldr	r5, [pc, #44]	@ (80190ac <__libc_init_array+0x40>)
 801907e:	4c0c      	ldr	r4, [pc, #48]	@ (80190b0 <__libc_init_array+0x44>)
 8019080:	f000 fe64 	bl	8019d4c <_init>
 8019084:	1b64      	subs	r4, r4, r5
 8019086:	10a4      	asrs	r4, r4, #2
 8019088:	2600      	movs	r6, #0
 801908a:	42a6      	cmp	r6, r4
 801908c:	d105      	bne.n	801909a <__libc_init_array+0x2e>
 801908e:	bd70      	pop	{r4, r5, r6, pc}
 8019090:	f855 3b04 	ldr.w	r3, [r5], #4
 8019094:	4798      	blx	r3
 8019096:	3601      	adds	r6, #1
 8019098:	e7ee      	b.n	8019078 <__libc_init_array+0xc>
 801909a:	f855 3b04 	ldr.w	r3, [r5], #4
 801909e:	4798      	blx	r3
 80190a0:	3601      	adds	r6, #1
 80190a2:	e7f2      	b.n	801908a <__libc_init_array+0x1e>
 80190a4:	0801b1a4 	.word	0x0801b1a4
 80190a8:	0801b1a4 	.word	0x0801b1a4
 80190ac:	0801b1a4 	.word	0x0801b1a4
 80190b0:	0801b1b4 	.word	0x0801b1b4

080190b4 <__retarget_lock_init_recursive>:
 80190b4:	4770      	bx	lr

080190b6 <__retarget_lock_acquire_recursive>:
 80190b6:	4770      	bx	lr

080190b8 <__retarget_lock_release_recursive>:
 80190b8:	4770      	bx	lr

080190ba <strcpy>:
 80190ba:	4603      	mov	r3, r0
 80190bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80190c0:	f803 2b01 	strb.w	r2, [r3], #1
 80190c4:	2a00      	cmp	r2, #0
 80190c6:	d1f9      	bne.n	80190bc <strcpy+0x2>
 80190c8:	4770      	bx	lr

080190ca <memcpy>:
 80190ca:	440a      	add	r2, r1
 80190cc:	4291      	cmp	r1, r2
 80190ce:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80190d2:	d100      	bne.n	80190d6 <memcpy+0xc>
 80190d4:	4770      	bx	lr
 80190d6:	b510      	push	{r4, lr}
 80190d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80190dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80190e0:	4291      	cmp	r1, r2
 80190e2:	d1f9      	bne.n	80190d8 <memcpy+0xe>
 80190e4:	bd10      	pop	{r4, pc}
	...

080190e8 <__assert_func>:
 80190e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80190ea:	4614      	mov	r4, r2
 80190ec:	461a      	mov	r2, r3
 80190ee:	4b09      	ldr	r3, [pc, #36]	@ (8019114 <__assert_func+0x2c>)
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	4605      	mov	r5, r0
 80190f4:	68d8      	ldr	r0, [r3, #12]
 80190f6:	b954      	cbnz	r4, 801910e <__assert_func+0x26>
 80190f8:	4b07      	ldr	r3, [pc, #28]	@ (8019118 <__assert_func+0x30>)
 80190fa:	461c      	mov	r4, r3
 80190fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019100:	9100      	str	r1, [sp, #0]
 8019102:	462b      	mov	r3, r5
 8019104:	4905      	ldr	r1, [pc, #20]	@ (801911c <__assert_func+0x34>)
 8019106:	f000 fd3f 	bl	8019b88 <fiprintf>
 801910a:	f000 fdd3 	bl	8019cb4 <abort>
 801910e:	4b04      	ldr	r3, [pc, #16]	@ (8019120 <__assert_func+0x38>)
 8019110:	e7f4      	b.n	80190fc <__assert_func+0x14>
 8019112:	bf00      	nop
 8019114:	20000a70 	.word	0x20000a70
 8019118:	0801b167 	.word	0x0801b167
 801911c:	0801b139 	.word	0x0801b139
 8019120:	0801b12c 	.word	0x0801b12c

08019124 <__env_lock>:
 8019124:	4801      	ldr	r0, [pc, #4]	@ (801912c <__env_lock+0x8>)
 8019126:	f7ff bfc6 	b.w	80190b6 <__retarget_lock_acquire_recursive>
 801912a:	bf00      	nop
 801912c:	2000e6f8 	.word	0x2000e6f8

08019130 <__env_unlock>:
 8019130:	4801      	ldr	r0, [pc, #4]	@ (8019138 <__env_unlock+0x8>)
 8019132:	f7ff bfc1 	b.w	80190b8 <__retarget_lock_release_recursive>
 8019136:	bf00      	nop
 8019138:	2000e6f8 	.word	0x2000e6f8

0801913c <_free_r>:
 801913c:	b538      	push	{r3, r4, r5, lr}
 801913e:	4605      	mov	r5, r0
 8019140:	2900      	cmp	r1, #0
 8019142:	d041      	beq.n	80191c8 <_free_r+0x8c>
 8019144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019148:	1f0c      	subs	r4, r1, #4
 801914a:	2b00      	cmp	r3, #0
 801914c:	bfb8      	it	lt
 801914e:	18e4      	addlt	r4, r4, r3
 8019150:	f7ff fad2 	bl	80186f8 <__malloc_lock>
 8019154:	4a1d      	ldr	r2, [pc, #116]	@ (80191cc <_free_r+0x90>)
 8019156:	6813      	ldr	r3, [r2, #0]
 8019158:	b933      	cbnz	r3, 8019168 <_free_r+0x2c>
 801915a:	6063      	str	r3, [r4, #4]
 801915c:	6014      	str	r4, [r2, #0]
 801915e:	4628      	mov	r0, r5
 8019160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019164:	f7ff bace 	b.w	8018704 <__malloc_unlock>
 8019168:	42a3      	cmp	r3, r4
 801916a:	d908      	bls.n	801917e <_free_r+0x42>
 801916c:	6820      	ldr	r0, [r4, #0]
 801916e:	1821      	adds	r1, r4, r0
 8019170:	428b      	cmp	r3, r1
 8019172:	bf01      	itttt	eq
 8019174:	6819      	ldreq	r1, [r3, #0]
 8019176:	685b      	ldreq	r3, [r3, #4]
 8019178:	1809      	addeq	r1, r1, r0
 801917a:	6021      	streq	r1, [r4, #0]
 801917c:	e7ed      	b.n	801915a <_free_r+0x1e>
 801917e:	461a      	mov	r2, r3
 8019180:	685b      	ldr	r3, [r3, #4]
 8019182:	b10b      	cbz	r3, 8019188 <_free_r+0x4c>
 8019184:	42a3      	cmp	r3, r4
 8019186:	d9fa      	bls.n	801917e <_free_r+0x42>
 8019188:	6811      	ldr	r1, [r2, #0]
 801918a:	1850      	adds	r0, r2, r1
 801918c:	42a0      	cmp	r0, r4
 801918e:	d10b      	bne.n	80191a8 <_free_r+0x6c>
 8019190:	6820      	ldr	r0, [r4, #0]
 8019192:	4401      	add	r1, r0
 8019194:	1850      	adds	r0, r2, r1
 8019196:	4283      	cmp	r3, r0
 8019198:	6011      	str	r1, [r2, #0]
 801919a:	d1e0      	bne.n	801915e <_free_r+0x22>
 801919c:	6818      	ldr	r0, [r3, #0]
 801919e:	685b      	ldr	r3, [r3, #4]
 80191a0:	6053      	str	r3, [r2, #4]
 80191a2:	4408      	add	r0, r1
 80191a4:	6010      	str	r0, [r2, #0]
 80191a6:	e7da      	b.n	801915e <_free_r+0x22>
 80191a8:	d902      	bls.n	80191b0 <_free_r+0x74>
 80191aa:	230c      	movs	r3, #12
 80191ac:	602b      	str	r3, [r5, #0]
 80191ae:	e7d6      	b.n	801915e <_free_r+0x22>
 80191b0:	6820      	ldr	r0, [r4, #0]
 80191b2:	1821      	adds	r1, r4, r0
 80191b4:	428b      	cmp	r3, r1
 80191b6:	bf04      	itt	eq
 80191b8:	6819      	ldreq	r1, [r3, #0]
 80191ba:	685b      	ldreq	r3, [r3, #4]
 80191bc:	6063      	str	r3, [r4, #4]
 80191be:	bf04      	itt	eq
 80191c0:	1809      	addeq	r1, r1, r0
 80191c2:	6021      	streq	r1, [r4, #0]
 80191c4:	6054      	str	r4, [r2, #4]
 80191c6:	e7ca      	b.n	801915e <_free_r+0x22>
 80191c8:	bd38      	pop	{r3, r4, r5, pc}
 80191ca:	bf00      	nop
 80191cc:	2000e5b4 	.word	0x2000e5b4

080191d0 <_malloc_usable_size_r>:
 80191d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80191d4:	1f18      	subs	r0, r3, #4
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	bfbc      	itt	lt
 80191da:	580b      	ldrlt	r3, [r1, r0]
 80191dc:	18c0      	addlt	r0, r0, r3
 80191de:	4770      	bx	lr

080191e0 <__ssputs_r>:
 80191e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191e4:	688e      	ldr	r6, [r1, #8]
 80191e6:	461f      	mov	r7, r3
 80191e8:	42be      	cmp	r6, r7
 80191ea:	680b      	ldr	r3, [r1, #0]
 80191ec:	4682      	mov	sl, r0
 80191ee:	460c      	mov	r4, r1
 80191f0:	4690      	mov	r8, r2
 80191f2:	d82d      	bhi.n	8019250 <__ssputs_r+0x70>
 80191f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80191f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80191fc:	d026      	beq.n	801924c <__ssputs_r+0x6c>
 80191fe:	6965      	ldr	r5, [r4, #20]
 8019200:	6909      	ldr	r1, [r1, #16]
 8019202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019206:	eba3 0901 	sub.w	r9, r3, r1
 801920a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801920e:	1c7b      	adds	r3, r7, #1
 8019210:	444b      	add	r3, r9
 8019212:	106d      	asrs	r5, r5, #1
 8019214:	429d      	cmp	r5, r3
 8019216:	bf38      	it	cc
 8019218:	461d      	movcc	r5, r3
 801921a:	0553      	lsls	r3, r2, #21
 801921c:	d527      	bpl.n	801926e <__ssputs_r+0x8e>
 801921e:	4629      	mov	r1, r5
 8019220:	f7ff f9ea 	bl	80185f8 <_malloc_r>
 8019224:	4606      	mov	r6, r0
 8019226:	b360      	cbz	r0, 8019282 <__ssputs_r+0xa2>
 8019228:	6921      	ldr	r1, [r4, #16]
 801922a:	464a      	mov	r2, r9
 801922c:	f7ff ff4d 	bl	80190ca <memcpy>
 8019230:	89a3      	ldrh	r3, [r4, #12]
 8019232:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801923a:	81a3      	strh	r3, [r4, #12]
 801923c:	6126      	str	r6, [r4, #16]
 801923e:	6165      	str	r5, [r4, #20]
 8019240:	444e      	add	r6, r9
 8019242:	eba5 0509 	sub.w	r5, r5, r9
 8019246:	6026      	str	r6, [r4, #0]
 8019248:	60a5      	str	r5, [r4, #8]
 801924a:	463e      	mov	r6, r7
 801924c:	42be      	cmp	r6, r7
 801924e:	d900      	bls.n	8019252 <__ssputs_r+0x72>
 8019250:	463e      	mov	r6, r7
 8019252:	6820      	ldr	r0, [r4, #0]
 8019254:	4632      	mov	r2, r6
 8019256:	4641      	mov	r1, r8
 8019258:	f7ff fe54 	bl	8018f04 <memmove>
 801925c:	68a3      	ldr	r3, [r4, #8]
 801925e:	1b9b      	subs	r3, r3, r6
 8019260:	60a3      	str	r3, [r4, #8]
 8019262:	6823      	ldr	r3, [r4, #0]
 8019264:	4433      	add	r3, r6
 8019266:	6023      	str	r3, [r4, #0]
 8019268:	2000      	movs	r0, #0
 801926a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801926e:	462a      	mov	r2, r5
 8019270:	f7ff fac2 	bl	80187f8 <_realloc_r>
 8019274:	4606      	mov	r6, r0
 8019276:	2800      	cmp	r0, #0
 8019278:	d1e0      	bne.n	801923c <__ssputs_r+0x5c>
 801927a:	6921      	ldr	r1, [r4, #16]
 801927c:	4650      	mov	r0, sl
 801927e:	f7ff ff5d 	bl	801913c <_free_r>
 8019282:	230c      	movs	r3, #12
 8019284:	f8ca 3000 	str.w	r3, [sl]
 8019288:	89a3      	ldrh	r3, [r4, #12]
 801928a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801928e:	81a3      	strh	r3, [r4, #12]
 8019290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019294:	e7e9      	b.n	801926a <__ssputs_r+0x8a>
	...

08019298 <_svfiprintf_r>:
 8019298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801929c:	4698      	mov	r8, r3
 801929e:	898b      	ldrh	r3, [r1, #12]
 80192a0:	061b      	lsls	r3, r3, #24
 80192a2:	b09d      	sub	sp, #116	@ 0x74
 80192a4:	4607      	mov	r7, r0
 80192a6:	460d      	mov	r5, r1
 80192a8:	4614      	mov	r4, r2
 80192aa:	d510      	bpl.n	80192ce <_svfiprintf_r+0x36>
 80192ac:	690b      	ldr	r3, [r1, #16]
 80192ae:	b973      	cbnz	r3, 80192ce <_svfiprintf_r+0x36>
 80192b0:	2140      	movs	r1, #64	@ 0x40
 80192b2:	f7ff f9a1 	bl	80185f8 <_malloc_r>
 80192b6:	6028      	str	r0, [r5, #0]
 80192b8:	6128      	str	r0, [r5, #16]
 80192ba:	b930      	cbnz	r0, 80192ca <_svfiprintf_r+0x32>
 80192bc:	230c      	movs	r3, #12
 80192be:	603b      	str	r3, [r7, #0]
 80192c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80192c4:	b01d      	add	sp, #116	@ 0x74
 80192c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ca:	2340      	movs	r3, #64	@ 0x40
 80192cc:	616b      	str	r3, [r5, #20]
 80192ce:	2300      	movs	r3, #0
 80192d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80192d2:	2320      	movs	r3, #32
 80192d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80192d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80192dc:	2330      	movs	r3, #48	@ 0x30
 80192de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801947c <_svfiprintf_r+0x1e4>
 80192e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80192e6:	f04f 0901 	mov.w	r9, #1
 80192ea:	4623      	mov	r3, r4
 80192ec:	469a      	mov	sl, r3
 80192ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192f2:	b10a      	cbz	r2, 80192f8 <_svfiprintf_r+0x60>
 80192f4:	2a25      	cmp	r2, #37	@ 0x25
 80192f6:	d1f9      	bne.n	80192ec <_svfiprintf_r+0x54>
 80192f8:	ebba 0b04 	subs.w	fp, sl, r4
 80192fc:	d00b      	beq.n	8019316 <_svfiprintf_r+0x7e>
 80192fe:	465b      	mov	r3, fp
 8019300:	4622      	mov	r2, r4
 8019302:	4629      	mov	r1, r5
 8019304:	4638      	mov	r0, r7
 8019306:	f7ff ff6b 	bl	80191e0 <__ssputs_r>
 801930a:	3001      	adds	r0, #1
 801930c:	f000 80a7 	beq.w	801945e <_svfiprintf_r+0x1c6>
 8019310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019312:	445a      	add	r2, fp
 8019314:	9209      	str	r2, [sp, #36]	@ 0x24
 8019316:	f89a 3000 	ldrb.w	r3, [sl]
 801931a:	2b00      	cmp	r3, #0
 801931c:	f000 809f 	beq.w	801945e <_svfiprintf_r+0x1c6>
 8019320:	2300      	movs	r3, #0
 8019322:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801932a:	f10a 0a01 	add.w	sl, sl, #1
 801932e:	9304      	str	r3, [sp, #16]
 8019330:	9307      	str	r3, [sp, #28]
 8019332:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019336:	931a      	str	r3, [sp, #104]	@ 0x68
 8019338:	4654      	mov	r4, sl
 801933a:	2205      	movs	r2, #5
 801933c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019340:	484e      	ldr	r0, [pc, #312]	@ (801947c <_svfiprintf_r+0x1e4>)
 8019342:	f7e6 ff65 	bl	8000210 <memchr>
 8019346:	9a04      	ldr	r2, [sp, #16]
 8019348:	b9d8      	cbnz	r0, 8019382 <_svfiprintf_r+0xea>
 801934a:	06d0      	lsls	r0, r2, #27
 801934c:	bf44      	itt	mi
 801934e:	2320      	movmi	r3, #32
 8019350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019354:	0711      	lsls	r1, r2, #28
 8019356:	bf44      	itt	mi
 8019358:	232b      	movmi	r3, #43	@ 0x2b
 801935a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801935e:	f89a 3000 	ldrb.w	r3, [sl]
 8019362:	2b2a      	cmp	r3, #42	@ 0x2a
 8019364:	d015      	beq.n	8019392 <_svfiprintf_r+0xfa>
 8019366:	9a07      	ldr	r2, [sp, #28]
 8019368:	4654      	mov	r4, sl
 801936a:	2000      	movs	r0, #0
 801936c:	f04f 0c0a 	mov.w	ip, #10
 8019370:	4621      	mov	r1, r4
 8019372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019376:	3b30      	subs	r3, #48	@ 0x30
 8019378:	2b09      	cmp	r3, #9
 801937a:	d94b      	bls.n	8019414 <_svfiprintf_r+0x17c>
 801937c:	b1b0      	cbz	r0, 80193ac <_svfiprintf_r+0x114>
 801937e:	9207      	str	r2, [sp, #28]
 8019380:	e014      	b.n	80193ac <_svfiprintf_r+0x114>
 8019382:	eba0 0308 	sub.w	r3, r0, r8
 8019386:	fa09 f303 	lsl.w	r3, r9, r3
 801938a:	4313      	orrs	r3, r2
 801938c:	9304      	str	r3, [sp, #16]
 801938e:	46a2      	mov	sl, r4
 8019390:	e7d2      	b.n	8019338 <_svfiprintf_r+0xa0>
 8019392:	9b03      	ldr	r3, [sp, #12]
 8019394:	1d19      	adds	r1, r3, #4
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	9103      	str	r1, [sp, #12]
 801939a:	2b00      	cmp	r3, #0
 801939c:	bfbb      	ittet	lt
 801939e:	425b      	neglt	r3, r3
 80193a0:	f042 0202 	orrlt.w	r2, r2, #2
 80193a4:	9307      	strge	r3, [sp, #28]
 80193a6:	9307      	strlt	r3, [sp, #28]
 80193a8:	bfb8      	it	lt
 80193aa:	9204      	strlt	r2, [sp, #16]
 80193ac:	7823      	ldrb	r3, [r4, #0]
 80193ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80193b0:	d10a      	bne.n	80193c8 <_svfiprintf_r+0x130>
 80193b2:	7863      	ldrb	r3, [r4, #1]
 80193b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80193b6:	d132      	bne.n	801941e <_svfiprintf_r+0x186>
 80193b8:	9b03      	ldr	r3, [sp, #12]
 80193ba:	1d1a      	adds	r2, r3, #4
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	9203      	str	r2, [sp, #12]
 80193c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80193c4:	3402      	adds	r4, #2
 80193c6:	9305      	str	r3, [sp, #20]
 80193c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801948c <_svfiprintf_r+0x1f4>
 80193cc:	7821      	ldrb	r1, [r4, #0]
 80193ce:	2203      	movs	r2, #3
 80193d0:	4650      	mov	r0, sl
 80193d2:	f7e6 ff1d 	bl	8000210 <memchr>
 80193d6:	b138      	cbz	r0, 80193e8 <_svfiprintf_r+0x150>
 80193d8:	9b04      	ldr	r3, [sp, #16]
 80193da:	eba0 000a 	sub.w	r0, r0, sl
 80193de:	2240      	movs	r2, #64	@ 0x40
 80193e0:	4082      	lsls	r2, r0
 80193e2:	4313      	orrs	r3, r2
 80193e4:	3401      	adds	r4, #1
 80193e6:	9304      	str	r3, [sp, #16]
 80193e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193ec:	4824      	ldr	r0, [pc, #144]	@ (8019480 <_svfiprintf_r+0x1e8>)
 80193ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80193f2:	2206      	movs	r2, #6
 80193f4:	f7e6 ff0c 	bl	8000210 <memchr>
 80193f8:	2800      	cmp	r0, #0
 80193fa:	d036      	beq.n	801946a <_svfiprintf_r+0x1d2>
 80193fc:	4b21      	ldr	r3, [pc, #132]	@ (8019484 <_svfiprintf_r+0x1ec>)
 80193fe:	bb1b      	cbnz	r3, 8019448 <_svfiprintf_r+0x1b0>
 8019400:	9b03      	ldr	r3, [sp, #12]
 8019402:	3307      	adds	r3, #7
 8019404:	f023 0307 	bic.w	r3, r3, #7
 8019408:	3308      	adds	r3, #8
 801940a:	9303      	str	r3, [sp, #12]
 801940c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801940e:	4433      	add	r3, r6
 8019410:	9309      	str	r3, [sp, #36]	@ 0x24
 8019412:	e76a      	b.n	80192ea <_svfiprintf_r+0x52>
 8019414:	fb0c 3202 	mla	r2, ip, r2, r3
 8019418:	460c      	mov	r4, r1
 801941a:	2001      	movs	r0, #1
 801941c:	e7a8      	b.n	8019370 <_svfiprintf_r+0xd8>
 801941e:	2300      	movs	r3, #0
 8019420:	3401      	adds	r4, #1
 8019422:	9305      	str	r3, [sp, #20]
 8019424:	4619      	mov	r1, r3
 8019426:	f04f 0c0a 	mov.w	ip, #10
 801942a:	4620      	mov	r0, r4
 801942c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019430:	3a30      	subs	r2, #48	@ 0x30
 8019432:	2a09      	cmp	r2, #9
 8019434:	d903      	bls.n	801943e <_svfiprintf_r+0x1a6>
 8019436:	2b00      	cmp	r3, #0
 8019438:	d0c6      	beq.n	80193c8 <_svfiprintf_r+0x130>
 801943a:	9105      	str	r1, [sp, #20]
 801943c:	e7c4      	b.n	80193c8 <_svfiprintf_r+0x130>
 801943e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019442:	4604      	mov	r4, r0
 8019444:	2301      	movs	r3, #1
 8019446:	e7f0      	b.n	801942a <_svfiprintf_r+0x192>
 8019448:	ab03      	add	r3, sp, #12
 801944a:	9300      	str	r3, [sp, #0]
 801944c:	462a      	mov	r2, r5
 801944e:	4b0e      	ldr	r3, [pc, #56]	@ (8019488 <_svfiprintf_r+0x1f0>)
 8019450:	a904      	add	r1, sp, #16
 8019452:	4638      	mov	r0, r7
 8019454:	f3af 8000 	nop.w
 8019458:	1c42      	adds	r2, r0, #1
 801945a:	4606      	mov	r6, r0
 801945c:	d1d6      	bne.n	801940c <_svfiprintf_r+0x174>
 801945e:	89ab      	ldrh	r3, [r5, #12]
 8019460:	065b      	lsls	r3, r3, #25
 8019462:	f53f af2d 	bmi.w	80192c0 <_svfiprintf_r+0x28>
 8019466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019468:	e72c      	b.n	80192c4 <_svfiprintf_r+0x2c>
 801946a:	ab03      	add	r3, sp, #12
 801946c:	9300      	str	r3, [sp, #0]
 801946e:	462a      	mov	r2, r5
 8019470:	4b05      	ldr	r3, [pc, #20]	@ (8019488 <_svfiprintf_r+0x1f0>)
 8019472:	a904      	add	r1, sp, #16
 8019474:	4638      	mov	r0, r7
 8019476:	f000 f9bb 	bl	80197f0 <_printf_i>
 801947a:	e7ed      	b.n	8019458 <_svfiprintf_r+0x1c0>
 801947c:	0801b168 	.word	0x0801b168
 8019480:	0801b172 	.word	0x0801b172
 8019484:	00000000 	.word	0x00000000
 8019488:	080191e1 	.word	0x080191e1
 801948c:	0801b16e 	.word	0x0801b16e

08019490 <__sfputc_r>:
 8019490:	6893      	ldr	r3, [r2, #8]
 8019492:	3b01      	subs	r3, #1
 8019494:	2b00      	cmp	r3, #0
 8019496:	b410      	push	{r4}
 8019498:	6093      	str	r3, [r2, #8]
 801949a:	da08      	bge.n	80194ae <__sfputc_r+0x1e>
 801949c:	6994      	ldr	r4, [r2, #24]
 801949e:	42a3      	cmp	r3, r4
 80194a0:	db01      	blt.n	80194a6 <__sfputc_r+0x16>
 80194a2:	290a      	cmp	r1, #10
 80194a4:	d103      	bne.n	80194ae <__sfputc_r+0x1e>
 80194a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194aa:	f7ff bc87 	b.w	8018dbc <__swbuf_r>
 80194ae:	6813      	ldr	r3, [r2, #0]
 80194b0:	1c58      	adds	r0, r3, #1
 80194b2:	6010      	str	r0, [r2, #0]
 80194b4:	7019      	strb	r1, [r3, #0]
 80194b6:	4608      	mov	r0, r1
 80194b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194bc:	4770      	bx	lr

080194be <__sfputs_r>:
 80194be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194c0:	4606      	mov	r6, r0
 80194c2:	460f      	mov	r7, r1
 80194c4:	4614      	mov	r4, r2
 80194c6:	18d5      	adds	r5, r2, r3
 80194c8:	42ac      	cmp	r4, r5
 80194ca:	d101      	bne.n	80194d0 <__sfputs_r+0x12>
 80194cc:	2000      	movs	r0, #0
 80194ce:	e007      	b.n	80194e0 <__sfputs_r+0x22>
 80194d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194d4:	463a      	mov	r2, r7
 80194d6:	4630      	mov	r0, r6
 80194d8:	f7ff ffda 	bl	8019490 <__sfputc_r>
 80194dc:	1c43      	adds	r3, r0, #1
 80194de:	d1f3      	bne.n	80194c8 <__sfputs_r+0xa>
 80194e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080194e4 <_vfiprintf_r>:
 80194e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e8:	460d      	mov	r5, r1
 80194ea:	b09d      	sub	sp, #116	@ 0x74
 80194ec:	4614      	mov	r4, r2
 80194ee:	4698      	mov	r8, r3
 80194f0:	4606      	mov	r6, r0
 80194f2:	b118      	cbz	r0, 80194fc <_vfiprintf_r+0x18>
 80194f4:	6a03      	ldr	r3, [r0, #32]
 80194f6:	b90b      	cbnz	r3, 80194fc <_vfiprintf_r+0x18>
 80194f8:	f7ff fab0 	bl	8018a5c <__sinit>
 80194fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80194fe:	07d9      	lsls	r1, r3, #31
 8019500:	d405      	bmi.n	801950e <_vfiprintf_r+0x2a>
 8019502:	89ab      	ldrh	r3, [r5, #12]
 8019504:	059a      	lsls	r2, r3, #22
 8019506:	d402      	bmi.n	801950e <_vfiprintf_r+0x2a>
 8019508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801950a:	f7ff fdd4 	bl	80190b6 <__retarget_lock_acquire_recursive>
 801950e:	89ab      	ldrh	r3, [r5, #12]
 8019510:	071b      	lsls	r3, r3, #28
 8019512:	d501      	bpl.n	8019518 <_vfiprintf_r+0x34>
 8019514:	692b      	ldr	r3, [r5, #16]
 8019516:	b99b      	cbnz	r3, 8019540 <_vfiprintf_r+0x5c>
 8019518:	4629      	mov	r1, r5
 801951a:	4630      	mov	r0, r6
 801951c:	f7ff fc8c 	bl	8018e38 <__swsetup_r>
 8019520:	b170      	cbz	r0, 8019540 <_vfiprintf_r+0x5c>
 8019522:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019524:	07dc      	lsls	r4, r3, #31
 8019526:	d504      	bpl.n	8019532 <_vfiprintf_r+0x4e>
 8019528:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801952c:	b01d      	add	sp, #116	@ 0x74
 801952e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019532:	89ab      	ldrh	r3, [r5, #12]
 8019534:	0598      	lsls	r0, r3, #22
 8019536:	d4f7      	bmi.n	8019528 <_vfiprintf_r+0x44>
 8019538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801953a:	f7ff fdbd 	bl	80190b8 <__retarget_lock_release_recursive>
 801953e:	e7f3      	b.n	8019528 <_vfiprintf_r+0x44>
 8019540:	2300      	movs	r3, #0
 8019542:	9309      	str	r3, [sp, #36]	@ 0x24
 8019544:	2320      	movs	r3, #32
 8019546:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801954a:	f8cd 800c 	str.w	r8, [sp, #12]
 801954e:	2330      	movs	r3, #48	@ 0x30
 8019550:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019700 <_vfiprintf_r+0x21c>
 8019554:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019558:	f04f 0901 	mov.w	r9, #1
 801955c:	4623      	mov	r3, r4
 801955e:	469a      	mov	sl, r3
 8019560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019564:	b10a      	cbz	r2, 801956a <_vfiprintf_r+0x86>
 8019566:	2a25      	cmp	r2, #37	@ 0x25
 8019568:	d1f9      	bne.n	801955e <_vfiprintf_r+0x7a>
 801956a:	ebba 0b04 	subs.w	fp, sl, r4
 801956e:	d00b      	beq.n	8019588 <_vfiprintf_r+0xa4>
 8019570:	465b      	mov	r3, fp
 8019572:	4622      	mov	r2, r4
 8019574:	4629      	mov	r1, r5
 8019576:	4630      	mov	r0, r6
 8019578:	f7ff ffa1 	bl	80194be <__sfputs_r>
 801957c:	3001      	adds	r0, #1
 801957e:	f000 80a7 	beq.w	80196d0 <_vfiprintf_r+0x1ec>
 8019582:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019584:	445a      	add	r2, fp
 8019586:	9209      	str	r2, [sp, #36]	@ 0x24
 8019588:	f89a 3000 	ldrb.w	r3, [sl]
 801958c:	2b00      	cmp	r3, #0
 801958e:	f000 809f 	beq.w	80196d0 <_vfiprintf_r+0x1ec>
 8019592:	2300      	movs	r3, #0
 8019594:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801959c:	f10a 0a01 	add.w	sl, sl, #1
 80195a0:	9304      	str	r3, [sp, #16]
 80195a2:	9307      	str	r3, [sp, #28]
 80195a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80195a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80195aa:	4654      	mov	r4, sl
 80195ac:	2205      	movs	r2, #5
 80195ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195b2:	4853      	ldr	r0, [pc, #332]	@ (8019700 <_vfiprintf_r+0x21c>)
 80195b4:	f7e6 fe2c 	bl	8000210 <memchr>
 80195b8:	9a04      	ldr	r2, [sp, #16]
 80195ba:	b9d8      	cbnz	r0, 80195f4 <_vfiprintf_r+0x110>
 80195bc:	06d1      	lsls	r1, r2, #27
 80195be:	bf44      	itt	mi
 80195c0:	2320      	movmi	r3, #32
 80195c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80195c6:	0713      	lsls	r3, r2, #28
 80195c8:	bf44      	itt	mi
 80195ca:	232b      	movmi	r3, #43	@ 0x2b
 80195cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80195d0:	f89a 3000 	ldrb.w	r3, [sl]
 80195d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80195d6:	d015      	beq.n	8019604 <_vfiprintf_r+0x120>
 80195d8:	9a07      	ldr	r2, [sp, #28]
 80195da:	4654      	mov	r4, sl
 80195dc:	2000      	movs	r0, #0
 80195de:	f04f 0c0a 	mov.w	ip, #10
 80195e2:	4621      	mov	r1, r4
 80195e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80195e8:	3b30      	subs	r3, #48	@ 0x30
 80195ea:	2b09      	cmp	r3, #9
 80195ec:	d94b      	bls.n	8019686 <_vfiprintf_r+0x1a2>
 80195ee:	b1b0      	cbz	r0, 801961e <_vfiprintf_r+0x13a>
 80195f0:	9207      	str	r2, [sp, #28]
 80195f2:	e014      	b.n	801961e <_vfiprintf_r+0x13a>
 80195f4:	eba0 0308 	sub.w	r3, r0, r8
 80195f8:	fa09 f303 	lsl.w	r3, r9, r3
 80195fc:	4313      	orrs	r3, r2
 80195fe:	9304      	str	r3, [sp, #16]
 8019600:	46a2      	mov	sl, r4
 8019602:	e7d2      	b.n	80195aa <_vfiprintf_r+0xc6>
 8019604:	9b03      	ldr	r3, [sp, #12]
 8019606:	1d19      	adds	r1, r3, #4
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	9103      	str	r1, [sp, #12]
 801960c:	2b00      	cmp	r3, #0
 801960e:	bfbb      	ittet	lt
 8019610:	425b      	neglt	r3, r3
 8019612:	f042 0202 	orrlt.w	r2, r2, #2
 8019616:	9307      	strge	r3, [sp, #28]
 8019618:	9307      	strlt	r3, [sp, #28]
 801961a:	bfb8      	it	lt
 801961c:	9204      	strlt	r2, [sp, #16]
 801961e:	7823      	ldrb	r3, [r4, #0]
 8019620:	2b2e      	cmp	r3, #46	@ 0x2e
 8019622:	d10a      	bne.n	801963a <_vfiprintf_r+0x156>
 8019624:	7863      	ldrb	r3, [r4, #1]
 8019626:	2b2a      	cmp	r3, #42	@ 0x2a
 8019628:	d132      	bne.n	8019690 <_vfiprintf_r+0x1ac>
 801962a:	9b03      	ldr	r3, [sp, #12]
 801962c:	1d1a      	adds	r2, r3, #4
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	9203      	str	r2, [sp, #12]
 8019632:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019636:	3402      	adds	r4, #2
 8019638:	9305      	str	r3, [sp, #20]
 801963a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019710 <_vfiprintf_r+0x22c>
 801963e:	7821      	ldrb	r1, [r4, #0]
 8019640:	2203      	movs	r2, #3
 8019642:	4650      	mov	r0, sl
 8019644:	f7e6 fde4 	bl	8000210 <memchr>
 8019648:	b138      	cbz	r0, 801965a <_vfiprintf_r+0x176>
 801964a:	9b04      	ldr	r3, [sp, #16]
 801964c:	eba0 000a 	sub.w	r0, r0, sl
 8019650:	2240      	movs	r2, #64	@ 0x40
 8019652:	4082      	lsls	r2, r0
 8019654:	4313      	orrs	r3, r2
 8019656:	3401      	adds	r4, #1
 8019658:	9304      	str	r3, [sp, #16]
 801965a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801965e:	4829      	ldr	r0, [pc, #164]	@ (8019704 <_vfiprintf_r+0x220>)
 8019660:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019664:	2206      	movs	r2, #6
 8019666:	f7e6 fdd3 	bl	8000210 <memchr>
 801966a:	2800      	cmp	r0, #0
 801966c:	d03f      	beq.n	80196ee <_vfiprintf_r+0x20a>
 801966e:	4b26      	ldr	r3, [pc, #152]	@ (8019708 <_vfiprintf_r+0x224>)
 8019670:	bb1b      	cbnz	r3, 80196ba <_vfiprintf_r+0x1d6>
 8019672:	9b03      	ldr	r3, [sp, #12]
 8019674:	3307      	adds	r3, #7
 8019676:	f023 0307 	bic.w	r3, r3, #7
 801967a:	3308      	adds	r3, #8
 801967c:	9303      	str	r3, [sp, #12]
 801967e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019680:	443b      	add	r3, r7
 8019682:	9309      	str	r3, [sp, #36]	@ 0x24
 8019684:	e76a      	b.n	801955c <_vfiprintf_r+0x78>
 8019686:	fb0c 3202 	mla	r2, ip, r2, r3
 801968a:	460c      	mov	r4, r1
 801968c:	2001      	movs	r0, #1
 801968e:	e7a8      	b.n	80195e2 <_vfiprintf_r+0xfe>
 8019690:	2300      	movs	r3, #0
 8019692:	3401      	adds	r4, #1
 8019694:	9305      	str	r3, [sp, #20]
 8019696:	4619      	mov	r1, r3
 8019698:	f04f 0c0a 	mov.w	ip, #10
 801969c:	4620      	mov	r0, r4
 801969e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196a2:	3a30      	subs	r2, #48	@ 0x30
 80196a4:	2a09      	cmp	r2, #9
 80196a6:	d903      	bls.n	80196b0 <_vfiprintf_r+0x1cc>
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d0c6      	beq.n	801963a <_vfiprintf_r+0x156>
 80196ac:	9105      	str	r1, [sp, #20]
 80196ae:	e7c4      	b.n	801963a <_vfiprintf_r+0x156>
 80196b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80196b4:	4604      	mov	r4, r0
 80196b6:	2301      	movs	r3, #1
 80196b8:	e7f0      	b.n	801969c <_vfiprintf_r+0x1b8>
 80196ba:	ab03      	add	r3, sp, #12
 80196bc:	9300      	str	r3, [sp, #0]
 80196be:	462a      	mov	r2, r5
 80196c0:	4b12      	ldr	r3, [pc, #72]	@ (801970c <_vfiprintf_r+0x228>)
 80196c2:	a904      	add	r1, sp, #16
 80196c4:	4630      	mov	r0, r6
 80196c6:	f3af 8000 	nop.w
 80196ca:	4607      	mov	r7, r0
 80196cc:	1c78      	adds	r0, r7, #1
 80196ce:	d1d6      	bne.n	801967e <_vfiprintf_r+0x19a>
 80196d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196d2:	07d9      	lsls	r1, r3, #31
 80196d4:	d405      	bmi.n	80196e2 <_vfiprintf_r+0x1fe>
 80196d6:	89ab      	ldrh	r3, [r5, #12]
 80196d8:	059a      	lsls	r2, r3, #22
 80196da:	d402      	bmi.n	80196e2 <_vfiprintf_r+0x1fe>
 80196dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196de:	f7ff fceb 	bl	80190b8 <__retarget_lock_release_recursive>
 80196e2:	89ab      	ldrh	r3, [r5, #12]
 80196e4:	065b      	lsls	r3, r3, #25
 80196e6:	f53f af1f 	bmi.w	8019528 <_vfiprintf_r+0x44>
 80196ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80196ec:	e71e      	b.n	801952c <_vfiprintf_r+0x48>
 80196ee:	ab03      	add	r3, sp, #12
 80196f0:	9300      	str	r3, [sp, #0]
 80196f2:	462a      	mov	r2, r5
 80196f4:	4b05      	ldr	r3, [pc, #20]	@ (801970c <_vfiprintf_r+0x228>)
 80196f6:	a904      	add	r1, sp, #16
 80196f8:	4630      	mov	r0, r6
 80196fa:	f000 f879 	bl	80197f0 <_printf_i>
 80196fe:	e7e4      	b.n	80196ca <_vfiprintf_r+0x1e6>
 8019700:	0801b168 	.word	0x0801b168
 8019704:	0801b172 	.word	0x0801b172
 8019708:	00000000 	.word	0x00000000
 801970c:	080194bf 	.word	0x080194bf
 8019710:	0801b16e 	.word	0x0801b16e

08019714 <_printf_common>:
 8019714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019718:	4616      	mov	r6, r2
 801971a:	4698      	mov	r8, r3
 801971c:	688a      	ldr	r2, [r1, #8]
 801971e:	690b      	ldr	r3, [r1, #16]
 8019720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019724:	4293      	cmp	r3, r2
 8019726:	bfb8      	it	lt
 8019728:	4613      	movlt	r3, r2
 801972a:	6033      	str	r3, [r6, #0]
 801972c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019730:	4607      	mov	r7, r0
 8019732:	460c      	mov	r4, r1
 8019734:	b10a      	cbz	r2, 801973a <_printf_common+0x26>
 8019736:	3301      	adds	r3, #1
 8019738:	6033      	str	r3, [r6, #0]
 801973a:	6823      	ldr	r3, [r4, #0]
 801973c:	0699      	lsls	r1, r3, #26
 801973e:	bf42      	ittt	mi
 8019740:	6833      	ldrmi	r3, [r6, #0]
 8019742:	3302      	addmi	r3, #2
 8019744:	6033      	strmi	r3, [r6, #0]
 8019746:	6825      	ldr	r5, [r4, #0]
 8019748:	f015 0506 	ands.w	r5, r5, #6
 801974c:	d106      	bne.n	801975c <_printf_common+0x48>
 801974e:	f104 0a19 	add.w	sl, r4, #25
 8019752:	68e3      	ldr	r3, [r4, #12]
 8019754:	6832      	ldr	r2, [r6, #0]
 8019756:	1a9b      	subs	r3, r3, r2
 8019758:	42ab      	cmp	r3, r5
 801975a:	dc26      	bgt.n	80197aa <_printf_common+0x96>
 801975c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019760:	6822      	ldr	r2, [r4, #0]
 8019762:	3b00      	subs	r3, #0
 8019764:	bf18      	it	ne
 8019766:	2301      	movne	r3, #1
 8019768:	0692      	lsls	r2, r2, #26
 801976a:	d42b      	bmi.n	80197c4 <_printf_common+0xb0>
 801976c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019770:	4641      	mov	r1, r8
 8019772:	4638      	mov	r0, r7
 8019774:	47c8      	blx	r9
 8019776:	3001      	adds	r0, #1
 8019778:	d01e      	beq.n	80197b8 <_printf_common+0xa4>
 801977a:	6823      	ldr	r3, [r4, #0]
 801977c:	6922      	ldr	r2, [r4, #16]
 801977e:	f003 0306 	and.w	r3, r3, #6
 8019782:	2b04      	cmp	r3, #4
 8019784:	bf02      	ittt	eq
 8019786:	68e5      	ldreq	r5, [r4, #12]
 8019788:	6833      	ldreq	r3, [r6, #0]
 801978a:	1aed      	subeq	r5, r5, r3
 801978c:	68a3      	ldr	r3, [r4, #8]
 801978e:	bf0c      	ite	eq
 8019790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019794:	2500      	movne	r5, #0
 8019796:	4293      	cmp	r3, r2
 8019798:	bfc4      	itt	gt
 801979a:	1a9b      	subgt	r3, r3, r2
 801979c:	18ed      	addgt	r5, r5, r3
 801979e:	2600      	movs	r6, #0
 80197a0:	341a      	adds	r4, #26
 80197a2:	42b5      	cmp	r5, r6
 80197a4:	d11a      	bne.n	80197dc <_printf_common+0xc8>
 80197a6:	2000      	movs	r0, #0
 80197a8:	e008      	b.n	80197bc <_printf_common+0xa8>
 80197aa:	2301      	movs	r3, #1
 80197ac:	4652      	mov	r2, sl
 80197ae:	4641      	mov	r1, r8
 80197b0:	4638      	mov	r0, r7
 80197b2:	47c8      	blx	r9
 80197b4:	3001      	adds	r0, #1
 80197b6:	d103      	bne.n	80197c0 <_printf_common+0xac>
 80197b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80197bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197c0:	3501      	adds	r5, #1
 80197c2:	e7c6      	b.n	8019752 <_printf_common+0x3e>
 80197c4:	18e1      	adds	r1, r4, r3
 80197c6:	1c5a      	adds	r2, r3, #1
 80197c8:	2030      	movs	r0, #48	@ 0x30
 80197ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80197ce:	4422      	add	r2, r4
 80197d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80197d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80197d8:	3302      	adds	r3, #2
 80197da:	e7c7      	b.n	801976c <_printf_common+0x58>
 80197dc:	2301      	movs	r3, #1
 80197de:	4622      	mov	r2, r4
 80197e0:	4641      	mov	r1, r8
 80197e2:	4638      	mov	r0, r7
 80197e4:	47c8      	blx	r9
 80197e6:	3001      	adds	r0, #1
 80197e8:	d0e6      	beq.n	80197b8 <_printf_common+0xa4>
 80197ea:	3601      	adds	r6, #1
 80197ec:	e7d9      	b.n	80197a2 <_printf_common+0x8e>
	...

080197f0 <_printf_i>:
 80197f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80197f4:	7e0f      	ldrb	r7, [r1, #24]
 80197f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80197f8:	2f78      	cmp	r7, #120	@ 0x78
 80197fa:	4691      	mov	r9, r2
 80197fc:	4680      	mov	r8, r0
 80197fe:	460c      	mov	r4, r1
 8019800:	469a      	mov	sl, r3
 8019802:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019806:	d807      	bhi.n	8019818 <_printf_i+0x28>
 8019808:	2f62      	cmp	r7, #98	@ 0x62
 801980a:	d80a      	bhi.n	8019822 <_printf_i+0x32>
 801980c:	2f00      	cmp	r7, #0
 801980e:	f000 80d2 	beq.w	80199b6 <_printf_i+0x1c6>
 8019812:	2f58      	cmp	r7, #88	@ 0x58
 8019814:	f000 80b9 	beq.w	801998a <_printf_i+0x19a>
 8019818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801981c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019820:	e03a      	b.n	8019898 <_printf_i+0xa8>
 8019822:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019826:	2b15      	cmp	r3, #21
 8019828:	d8f6      	bhi.n	8019818 <_printf_i+0x28>
 801982a:	a101      	add	r1, pc, #4	@ (adr r1, 8019830 <_printf_i+0x40>)
 801982c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019830:	08019889 	.word	0x08019889
 8019834:	0801989d 	.word	0x0801989d
 8019838:	08019819 	.word	0x08019819
 801983c:	08019819 	.word	0x08019819
 8019840:	08019819 	.word	0x08019819
 8019844:	08019819 	.word	0x08019819
 8019848:	0801989d 	.word	0x0801989d
 801984c:	08019819 	.word	0x08019819
 8019850:	08019819 	.word	0x08019819
 8019854:	08019819 	.word	0x08019819
 8019858:	08019819 	.word	0x08019819
 801985c:	0801999d 	.word	0x0801999d
 8019860:	080198c7 	.word	0x080198c7
 8019864:	08019957 	.word	0x08019957
 8019868:	08019819 	.word	0x08019819
 801986c:	08019819 	.word	0x08019819
 8019870:	080199bf 	.word	0x080199bf
 8019874:	08019819 	.word	0x08019819
 8019878:	080198c7 	.word	0x080198c7
 801987c:	08019819 	.word	0x08019819
 8019880:	08019819 	.word	0x08019819
 8019884:	0801995f 	.word	0x0801995f
 8019888:	6833      	ldr	r3, [r6, #0]
 801988a:	1d1a      	adds	r2, r3, #4
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	6032      	str	r2, [r6, #0]
 8019890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019894:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019898:	2301      	movs	r3, #1
 801989a:	e09d      	b.n	80199d8 <_printf_i+0x1e8>
 801989c:	6833      	ldr	r3, [r6, #0]
 801989e:	6820      	ldr	r0, [r4, #0]
 80198a0:	1d19      	adds	r1, r3, #4
 80198a2:	6031      	str	r1, [r6, #0]
 80198a4:	0606      	lsls	r6, r0, #24
 80198a6:	d501      	bpl.n	80198ac <_printf_i+0xbc>
 80198a8:	681d      	ldr	r5, [r3, #0]
 80198aa:	e003      	b.n	80198b4 <_printf_i+0xc4>
 80198ac:	0645      	lsls	r5, r0, #25
 80198ae:	d5fb      	bpl.n	80198a8 <_printf_i+0xb8>
 80198b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80198b4:	2d00      	cmp	r5, #0
 80198b6:	da03      	bge.n	80198c0 <_printf_i+0xd0>
 80198b8:	232d      	movs	r3, #45	@ 0x2d
 80198ba:	426d      	negs	r5, r5
 80198bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80198c0:	4859      	ldr	r0, [pc, #356]	@ (8019a28 <_printf_i+0x238>)
 80198c2:	230a      	movs	r3, #10
 80198c4:	e011      	b.n	80198ea <_printf_i+0xfa>
 80198c6:	6821      	ldr	r1, [r4, #0]
 80198c8:	6833      	ldr	r3, [r6, #0]
 80198ca:	0608      	lsls	r0, r1, #24
 80198cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80198d0:	d402      	bmi.n	80198d8 <_printf_i+0xe8>
 80198d2:	0649      	lsls	r1, r1, #25
 80198d4:	bf48      	it	mi
 80198d6:	b2ad      	uxthmi	r5, r5
 80198d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80198da:	4853      	ldr	r0, [pc, #332]	@ (8019a28 <_printf_i+0x238>)
 80198dc:	6033      	str	r3, [r6, #0]
 80198de:	bf14      	ite	ne
 80198e0:	230a      	movne	r3, #10
 80198e2:	2308      	moveq	r3, #8
 80198e4:	2100      	movs	r1, #0
 80198e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80198ea:	6866      	ldr	r6, [r4, #4]
 80198ec:	60a6      	str	r6, [r4, #8]
 80198ee:	2e00      	cmp	r6, #0
 80198f0:	bfa2      	ittt	ge
 80198f2:	6821      	ldrge	r1, [r4, #0]
 80198f4:	f021 0104 	bicge.w	r1, r1, #4
 80198f8:	6021      	strge	r1, [r4, #0]
 80198fa:	b90d      	cbnz	r5, 8019900 <_printf_i+0x110>
 80198fc:	2e00      	cmp	r6, #0
 80198fe:	d04b      	beq.n	8019998 <_printf_i+0x1a8>
 8019900:	4616      	mov	r6, r2
 8019902:	fbb5 f1f3 	udiv	r1, r5, r3
 8019906:	fb03 5711 	mls	r7, r3, r1, r5
 801990a:	5dc7      	ldrb	r7, [r0, r7]
 801990c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019910:	462f      	mov	r7, r5
 8019912:	42bb      	cmp	r3, r7
 8019914:	460d      	mov	r5, r1
 8019916:	d9f4      	bls.n	8019902 <_printf_i+0x112>
 8019918:	2b08      	cmp	r3, #8
 801991a:	d10b      	bne.n	8019934 <_printf_i+0x144>
 801991c:	6823      	ldr	r3, [r4, #0]
 801991e:	07df      	lsls	r7, r3, #31
 8019920:	d508      	bpl.n	8019934 <_printf_i+0x144>
 8019922:	6923      	ldr	r3, [r4, #16]
 8019924:	6861      	ldr	r1, [r4, #4]
 8019926:	4299      	cmp	r1, r3
 8019928:	bfde      	ittt	le
 801992a:	2330      	movle	r3, #48	@ 0x30
 801992c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019930:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019934:	1b92      	subs	r2, r2, r6
 8019936:	6122      	str	r2, [r4, #16]
 8019938:	f8cd a000 	str.w	sl, [sp]
 801993c:	464b      	mov	r3, r9
 801993e:	aa03      	add	r2, sp, #12
 8019940:	4621      	mov	r1, r4
 8019942:	4640      	mov	r0, r8
 8019944:	f7ff fee6 	bl	8019714 <_printf_common>
 8019948:	3001      	adds	r0, #1
 801994a:	d14a      	bne.n	80199e2 <_printf_i+0x1f2>
 801994c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019950:	b004      	add	sp, #16
 8019952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019956:	6823      	ldr	r3, [r4, #0]
 8019958:	f043 0320 	orr.w	r3, r3, #32
 801995c:	6023      	str	r3, [r4, #0]
 801995e:	4833      	ldr	r0, [pc, #204]	@ (8019a2c <_printf_i+0x23c>)
 8019960:	2778      	movs	r7, #120	@ 0x78
 8019962:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019966:	6823      	ldr	r3, [r4, #0]
 8019968:	6831      	ldr	r1, [r6, #0]
 801996a:	061f      	lsls	r7, r3, #24
 801996c:	f851 5b04 	ldr.w	r5, [r1], #4
 8019970:	d402      	bmi.n	8019978 <_printf_i+0x188>
 8019972:	065f      	lsls	r7, r3, #25
 8019974:	bf48      	it	mi
 8019976:	b2ad      	uxthmi	r5, r5
 8019978:	6031      	str	r1, [r6, #0]
 801997a:	07d9      	lsls	r1, r3, #31
 801997c:	bf44      	itt	mi
 801997e:	f043 0320 	orrmi.w	r3, r3, #32
 8019982:	6023      	strmi	r3, [r4, #0]
 8019984:	b11d      	cbz	r5, 801998e <_printf_i+0x19e>
 8019986:	2310      	movs	r3, #16
 8019988:	e7ac      	b.n	80198e4 <_printf_i+0xf4>
 801998a:	4827      	ldr	r0, [pc, #156]	@ (8019a28 <_printf_i+0x238>)
 801998c:	e7e9      	b.n	8019962 <_printf_i+0x172>
 801998e:	6823      	ldr	r3, [r4, #0]
 8019990:	f023 0320 	bic.w	r3, r3, #32
 8019994:	6023      	str	r3, [r4, #0]
 8019996:	e7f6      	b.n	8019986 <_printf_i+0x196>
 8019998:	4616      	mov	r6, r2
 801999a:	e7bd      	b.n	8019918 <_printf_i+0x128>
 801999c:	6833      	ldr	r3, [r6, #0]
 801999e:	6825      	ldr	r5, [r4, #0]
 80199a0:	6961      	ldr	r1, [r4, #20]
 80199a2:	1d18      	adds	r0, r3, #4
 80199a4:	6030      	str	r0, [r6, #0]
 80199a6:	062e      	lsls	r6, r5, #24
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	d501      	bpl.n	80199b0 <_printf_i+0x1c0>
 80199ac:	6019      	str	r1, [r3, #0]
 80199ae:	e002      	b.n	80199b6 <_printf_i+0x1c6>
 80199b0:	0668      	lsls	r0, r5, #25
 80199b2:	d5fb      	bpl.n	80199ac <_printf_i+0x1bc>
 80199b4:	8019      	strh	r1, [r3, #0]
 80199b6:	2300      	movs	r3, #0
 80199b8:	6123      	str	r3, [r4, #16]
 80199ba:	4616      	mov	r6, r2
 80199bc:	e7bc      	b.n	8019938 <_printf_i+0x148>
 80199be:	6833      	ldr	r3, [r6, #0]
 80199c0:	1d1a      	adds	r2, r3, #4
 80199c2:	6032      	str	r2, [r6, #0]
 80199c4:	681e      	ldr	r6, [r3, #0]
 80199c6:	6862      	ldr	r2, [r4, #4]
 80199c8:	2100      	movs	r1, #0
 80199ca:	4630      	mov	r0, r6
 80199cc:	f7e6 fc20 	bl	8000210 <memchr>
 80199d0:	b108      	cbz	r0, 80199d6 <_printf_i+0x1e6>
 80199d2:	1b80      	subs	r0, r0, r6
 80199d4:	6060      	str	r0, [r4, #4]
 80199d6:	6863      	ldr	r3, [r4, #4]
 80199d8:	6123      	str	r3, [r4, #16]
 80199da:	2300      	movs	r3, #0
 80199dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80199e0:	e7aa      	b.n	8019938 <_printf_i+0x148>
 80199e2:	6923      	ldr	r3, [r4, #16]
 80199e4:	4632      	mov	r2, r6
 80199e6:	4649      	mov	r1, r9
 80199e8:	4640      	mov	r0, r8
 80199ea:	47d0      	blx	sl
 80199ec:	3001      	adds	r0, #1
 80199ee:	d0ad      	beq.n	801994c <_printf_i+0x15c>
 80199f0:	6823      	ldr	r3, [r4, #0]
 80199f2:	079b      	lsls	r3, r3, #30
 80199f4:	d413      	bmi.n	8019a1e <_printf_i+0x22e>
 80199f6:	68e0      	ldr	r0, [r4, #12]
 80199f8:	9b03      	ldr	r3, [sp, #12]
 80199fa:	4298      	cmp	r0, r3
 80199fc:	bfb8      	it	lt
 80199fe:	4618      	movlt	r0, r3
 8019a00:	e7a6      	b.n	8019950 <_printf_i+0x160>
 8019a02:	2301      	movs	r3, #1
 8019a04:	4632      	mov	r2, r6
 8019a06:	4649      	mov	r1, r9
 8019a08:	4640      	mov	r0, r8
 8019a0a:	47d0      	blx	sl
 8019a0c:	3001      	adds	r0, #1
 8019a0e:	d09d      	beq.n	801994c <_printf_i+0x15c>
 8019a10:	3501      	adds	r5, #1
 8019a12:	68e3      	ldr	r3, [r4, #12]
 8019a14:	9903      	ldr	r1, [sp, #12]
 8019a16:	1a5b      	subs	r3, r3, r1
 8019a18:	42ab      	cmp	r3, r5
 8019a1a:	dcf2      	bgt.n	8019a02 <_printf_i+0x212>
 8019a1c:	e7eb      	b.n	80199f6 <_printf_i+0x206>
 8019a1e:	2500      	movs	r5, #0
 8019a20:	f104 0619 	add.w	r6, r4, #25
 8019a24:	e7f5      	b.n	8019a12 <_printf_i+0x222>
 8019a26:	bf00      	nop
 8019a28:	0801b179 	.word	0x0801b179
 8019a2c:	0801b18a 	.word	0x0801b18a

08019a30 <__sflush_r>:
 8019a30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a38:	0716      	lsls	r6, r2, #28
 8019a3a:	4605      	mov	r5, r0
 8019a3c:	460c      	mov	r4, r1
 8019a3e:	d454      	bmi.n	8019aea <__sflush_r+0xba>
 8019a40:	684b      	ldr	r3, [r1, #4]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	dc02      	bgt.n	8019a4c <__sflush_r+0x1c>
 8019a46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	dd48      	ble.n	8019ade <__sflush_r+0xae>
 8019a4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019a4e:	2e00      	cmp	r6, #0
 8019a50:	d045      	beq.n	8019ade <__sflush_r+0xae>
 8019a52:	2300      	movs	r3, #0
 8019a54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019a58:	682f      	ldr	r7, [r5, #0]
 8019a5a:	6a21      	ldr	r1, [r4, #32]
 8019a5c:	602b      	str	r3, [r5, #0]
 8019a5e:	d030      	beq.n	8019ac2 <__sflush_r+0x92>
 8019a60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019a62:	89a3      	ldrh	r3, [r4, #12]
 8019a64:	0759      	lsls	r1, r3, #29
 8019a66:	d505      	bpl.n	8019a74 <__sflush_r+0x44>
 8019a68:	6863      	ldr	r3, [r4, #4]
 8019a6a:	1ad2      	subs	r2, r2, r3
 8019a6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019a6e:	b10b      	cbz	r3, 8019a74 <__sflush_r+0x44>
 8019a70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019a72:	1ad2      	subs	r2, r2, r3
 8019a74:	2300      	movs	r3, #0
 8019a76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019a78:	6a21      	ldr	r1, [r4, #32]
 8019a7a:	4628      	mov	r0, r5
 8019a7c:	47b0      	blx	r6
 8019a7e:	1c43      	adds	r3, r0, #1
 8019a80:	89a3      	ldrh	r3, [r4, #12]
 8019a82:	d106      	bne.n	8019a92 <__sflush_r+0x62>
 8019a84:	6829      	ldr	r1, [r5, #0]
 8019a86:	291d      	cmp	r1, #29
 8019a88:	d82b      	bhi.n	8019ae2 <__sflush_r+0xb2>
 8019a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8019b34 <__sflush_r+0x104>)
 8019a8c:	410a      	asrs	r2, r1
 8019a8e:	07d6      	lsls	r6, r2, #31
 8019a90:	d427      	bmi.n	8019ae2 <__sflush_r+0xb2>
 8019a92:	2200      	movs	r2, #0
 8019a94:	6062      	str	r2, [r4, #4]
 8019a96:	04d9      	lsls	r1, r3, #19
 8019a98:	6922      	ldr	r2, [r4, #16]
 8019a9a:	6022      	str	r2, [r4, #0]
 8019a9c:	d504      	bpl.n	8019aa8 <__sflush_r+0x78>
 8019a9e:	1c42      	adds	r2, r0, #1
 8019aa0:	d101      	bne.n	8019aa6 <__sflush_r+0x76>
 8019aa2:	682b      	ldr	r3, [r5, #0]
 8019aa4:	b903      	cbnz	r3, 8019aa8 <__sflush_r+0x78>
 8019aa6:	6560      	str	r0, [r4, #84]	@ 0x54
 8019aa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019aaa:	602f      	str	r7, [r5, #0]
 8019aac:	b1b9      	cbz	r1, 8019ade <__sflush_r+0xae>
 8019aae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019ab2:	4299      	cmp	r1, r3
 8019ab4:	d002      	beq.n	8019abc <__sflush_r+0x8c>
 8019ab6:	4628      	mov	r0, r5
 8019ab8:	f7ff fb40 	bl	801913c <_free_r>
 8019abc:	2300      	movs	r3, #0
 8019abe:	6363      	str	r3, [r4, #52]	@ 0x34
 8019ac0:	e00d      	b.n	8019ade <__sflush_r+0xae>
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	4628      	mov	r0, r5
 8019ac6:	47b0      	blx	r6
 8019ac8:	4602      	mov	r2, r0
 8019aca:	1c50      	adds	r0, r2, #1
 8019acc:	d1c9      	bne.n	8019a62 <__sflush_r+0x32>
 8019ace:	682b      	ldr	r3, [r5, #0]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d0c6      	beq.n	8019a62 <__sflush_r+0x32>
 8019ad4:	2b1d      	cmp	r3, #29
 8019ad6:	d001      	beq.n	8019adc <__sflush_r+0xac>
 8019ad8:	2b16      	cmp	r3, #22
 8019ada:	d11e      	bne.n	8019b1a <__sflush_r+0xea>
 8019adc:	602f      	str	r7, [r5, #0]
 8019ade:	2000      	movs	r0, #0
 8019ae0:	e022      	b.n	8019b28 <__sflush_r+0xf8>
 8019ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ae6:	b21b      	sxth	r3, r3
 8019ae8:	e01b      	b.n	8019b22 <__sflush_r+0xf2>
 8019aea:	690f      	ldr	r7, [r1, #16]
 8019aec:	2f00      	cmp	r7, #0
 8019aee:	d0f6      	beq.n	8019ade <__sflush_r+0xae>
 8019af0:	0793      	lsls	r3, r2, #30
 8019af2:	680e      	ldr	r6, [r1, #0]
 8019af4:	bf08      	it	eq
 8019af6:	694b      	ldreq	r3, [r1, #20]
 8019af8:	600f      	str	r7, [r1, #0]
 8019afa:	bf18      	it	ne
 8019afc:	2300      	movne	r3, #0
 8019afe:	eba6 0807 	sub.w	r8, r6, r7
 8019b02:	608b      	str	r3, [r1, #8]
 8019b04:	f1b8 0f00 	cmp.w	r8, #0
 8019b08:	dde9      	ble.n	8019ade <__sflush_r+0xae>
 8019b0a:	6a21      	ldr	r1, [r4, #32]
 8019b0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019b0e:	4643      	mov	r3, r8
 8019b10:	463a      	mov	r2, r7
 8019b12:	4628      	mov	r0, r5
 8019b14:	47b0      	blx	r6
 8019b16:	2800      	cmp	r0, #0
 8019b18:	dc08      	bgt.n	8019b2c <__sflush_r+0xfc>
 8019b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b22:	81a3      	strh	r3, [r4, #12]
 8019b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b2c:	4407      	add	r7, r0
 8019b2e:	eba8 0800 	sub.w	r8, r8, r0
 8019b32:	e7e7      	b.n	8019b04 <__sflush_r+0xd4>
 8019b34:	dfbffffe 	.word	0xdfbffffe

08019b38 <_fflush_r>:
 8019b38:	b538      	push	{r3, r4, r5, lr}
 8019b3a:	690b      	ldr	r3, [r1, #16]
 8019b3c:	4605      	mov	r5, r0
 8019b3e:	460c      	mov	r4, r1
 8019b40:	b913      	cbnz	r3, 8019b48 <_fflush_r+0x10>
 8019b42:	2500      	movs	r5, #0
 8019b44:	4628      	mov	r0, r5
 8019b46:	bd38      	pop	{r3, r4, r5, pc}
 8019b48:	b118      	cbz	r0, 8019b52 <_fflush_r+0x1a>
 8019b4a:	6a03      	ldr	r3, [r0, #32]
 8019b4c:	b90b      	cbnz	r3, 8019b52 <_fflush_r+0x1a>
 8019b4e:	f7fe ff85 	bl	8018a5c <__sinit>
 8019b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d0f3      	beq.n	8019b42 <_fflush_r+0xa>
 8019b5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019b5c:	07d0      	lsls	r0, r2, #31
 8019b5e:	d404      	bmi.n	8019b6a <_fflush_r+0x32>
 8019b60:	0599      	lsls	r1, r3, #22
 8019b62:	d402      	bmi.n	8019b6a <_fflush_r+0x32>
 8019b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019b66:	f7ff faa6 	bl	80190b6 <__retarget_lock_acquire_recursive>
 8019b6a:	4628      	mov	r0, r5
 8019b6c:	4621      	mov	r1, r4
 8019b6e:	f7ff ff5f 	bl	8019a30 <__sflush_r>
 8019b72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019b74:	07da      	lsls	r2, r3, #31
 8019b76:	4605      	mov	r5, r0
 8019b78:	d4e4      	bmi.n	8019b44 <_fflush_r+0xc>
 8019b7a:	89a3      	ldrh	r3, [r4, #12]
 8019b7c:	059b      	lsls	r3, r3, #22
 8019b7e:	d4e1      	bmi.n	8019b44 <_fflush_r+0xc>
 8019b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019b82:	f7ff fa99 	bl	80190b8 <__retarget_lock_release_recursive>
 8019b86:	e7dd      	b.n	8019b44 <_fflush_r+0xc>

08019b88 <fiprintf>:
 8019b88:	b40e      	push	{r1, r2, r3}
 8019b8a:	b503      	push	{r0, r1, lr}
 8019b8c:	4601      	mov	r1, r0
 8019b8e:	ab03      	add	r3, sp, #12
 8019b90:	4805      	ldr	r0, [pc, #20]	@ (8019ba8 <fiprintf+0x20>)
 8019b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b96:	6800      	ldr	r0, [r0, #0]
 8019b98:	9301      	str	r3, [sp, #4]
 8019b9a:	f7ff fca3 	bl	80194e4 <_vfiprintf_r>
 8019b9e:	b002      	add	sp, #8
 8019ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ba4:	b003      	add	sp, #12
 8019ba6:	4770      	bx	lr
 8019ba8:	20000a70 	.word	0x20000a70

08019bac <__swhatbuf_r>:
 8019bac:	b570      	push	{r4, r5, r6, lr}
 8019bae:	460c      	mov	r4, r1
 8019bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bb4:	2900      	cmp	r1, #0
 8019bb6:	b096      	sub	sp, #88	@ 0x58
 8019bb8:	4615      	mov	r5, r2
 8019bba:	461e      	mov	r6, r3
 8019bbc:	da0d      	bge.n	8019bda <__swhatbuf_r+0x2e>
 8019bbe:	89a3      	ldrh	r3, [r4, #12]
 8019bc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019bc4:	f04f 0100 	mov.w	r1, #0
 8019bc8:	bf14      	ite	ne
 8019bca:	2340      	movne	r3, #64	@ 0x40
 8019bcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019bd0:	2000      	movs	r0, #0
 8019bd2:	6031      	str	r1, [r6, #0]
 8019bd4:	602b      	str	r3, [r5, #0]
 8019bd6:	b016      	add	sp, #88	@ 0x58
 8019bd8:	bd70      	pop	{r4, r5, r6, pc}
 8019bda:	466a      	mov	r2, sp
 8019bdc:	f000 f848 	bl	8019c70 <_fstat_r>
 8019be0:	2800      	cmp	r0, #0
 8019be2:	dbec      	blt.n	8019bbe <__swhatbuf_r+0x12>
 8019be4:	9901      	ldr	r1, [sp, #4]
 8019be6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019bea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019bee:	4259      	negs	r1, r3
 8019bf0:	4159      	adcs	r1, r3
 8019bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019bf6:	e7eb      	b.n	8019bd0 <__swhatbuf_r+0x24>

08019bf8 <__smakebuf_r>:
 8019bf8:	898b      	ldrh	r3, [r1, #12]
 8019bfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019bfc:	079d      	lsls	r5, r3, #30
 8019bfe:	4606      	mov	r6, r0
 8019c00:	460c      	mov	r4, r1
 8019c02:	d507      	bpl.n	8019c14 <__smakebuf_r+0x1c>
 8019c04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019c08:	6023      	str	r3, [r4, #0]
 8019c0a:	6123      	str	r3, [r4, #16]
 8019c0c:	2301      	movs	r3, #1
 8019c0e:	6163      	str	r3, [r4, #20]
 8019c10:	b003      	add	sp, #12
 8019c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c14:	ab01      	add	r3, sp, #4
 8019c16:	466a      	mov	r2, sp
 8019c18:	f7ff ffc8 	bl	8019bac <__swhatbuf_r>
 8019c1c:	9f00      	ldr	r7, [sp, #0]
 8019c1e:	4605      	mov	r5, r0
 8019c20:	4639      	mov	r1, r7
 8019c22:	4630      	mov	r0, r6
 8019c24:	f7fe fce8 	bl	80185f8 <_malloc_r>
 8019c28:	b948      	cbnz	r0, 8019c3e <__smakebuf_r+0x46>
 8019c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c2e:	059a      	lsls	r2, r3, #22
 8019c30:	d4ee      	bmi.n	8019c10 <__smakebuf_r+0x18>
 8019c32:	f023 0303 	bic.w	r3, r3, #3
 8019c36:	f043 0302 	orr.w	r3, r3, #2
 8019c3a:	81a3      	strh	r3, [r4, #12]
 8019c3c:	e7e2      	b.n	8019c04 <__smakebuf_r+0xc>
 8019c3e:	89a3      	ldrh	r3, [r4, #12]
 8019c40:	6020      	str	r0, [r4, #0]
 8019c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019c46:	81a3      	strh	r3, [r4, #12]
 8019c48:	9b01      	ldr	r3, [sp, #4]
 8019c4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019c4e:	b15b      	cbz	r3, 8019c68 <__smakebuf_r+0x70>
 8019c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c54:	4630      	mov	r0, r6
 8019c56:	f000 f81d 	bl	8019c94 <_isatty_r>
 8019c5a:	b128      	cbz	r0, 8019c68 <__smakebuf_r+0x70>
 8019c5c:	89a3      	ldrh	r3, [r4, #12]
 8019c5e:	f023 0303 	bic.w	r3, r3, #3
 8019c62:	f043 0301 	orr.w	r3, r3, #1
 8019c66:	81a3      	strh	r3, [r4, #12]
 8019c68:	89a3      	ldrh	r3, [r4, #12]
 8019c6a:	431d      	orrs	r5, r3
 8019c6c:	81a5      	strh	r5, [r4, #12]
 8019c6e:	e7cf      	b.n	8019c10 <__smakebuf_r+0x18>

08019c70 <_fstat_r>:
 8019c70:	b538      	push	{r3, r4, r5, lr}
 8019c72:	4d07      	ldr	r5, [pc, #28]	@ (8019c90 <_fstat_r+0x20>)
 8019c74:	2300      	movs	r3, #0
 8019c76:	4604      	mov	r4, r0
 8019c78:	4608      	mov	r0, r1
 8019c7a:	4611      	mov	r1, r2
 8019c7c:	602b      	str	r3, [r5, #0]
 8019c7e:	f7e8 ff1b 	bl	8002ab8 <_fstat>
 8019c82:	1c43      	adds	r3, r0, #1
 8019c84:	d102      	bne.n	8019c8c <_fstat_r+0x1c>
 8019c86:	682b      	ldr	r3, [r5, #0]
 8019c88:	b103      	cbz	r3, 8019c8c <_fstat_r+0x1c>
 8019c8a:	6023      	str	r3, [r4, #0]
 8019c8c:	bd38      	pop	{r3, r4, r5, pc}
 8019c8e:	bf00      	nop
 8019c90:	2000e6f4 	.word	0x2000e6f4

08019c94 <_isatty_r>:
 8019c94:	b538      	push	{r3, r4, r5, lr}
 8019c96:	4d06      	ldr	r5, [pc, #24]	@ (8019cb0 <_isatty_r+0x1c>)
 8019c98:	2300      	movs	r3, #0
 8019c9a:	4604      	mov	r4, r0
 8019c9c:	4608      	mov	r0, r1
 8019c9e:	602b      	str	r3, [r5, #0]
 8019ca0:	f7e8 ff1a 	bl	8002ad8 <_isatty>
 8019ca4:	1c43      	adds	r3, r0, #1
 8019ca6:	d102      	bne.n	8019cae <_isatty_r+0x1a>
 8019ca8:	682b      	ldr	r3, [r5, #0]
 8019caa:	b103      	cbz	r3, 8019cae <_isatty_r+0x1a>
 8019cac:	6023      	str	r3, [r4, #0]
 8019cae:	bd38      	pop	{r3, r4, r5, pc}
 8019cb0:	2000e6f4 	.word	0x2000e6f4

08019cb4 <abort>:
 8019cb4:	b508      	push	{r3, lr}
 8019cb6:	2006      	movs	r0, #6
 8019cb8:	f000 f82c 	bl	8019d14 <raise>
 8019cbc:	2001      	movs	r0, #1
 8019cbe:	f7e8 feab 	bl	8002a18 <_exit>

08019cc2 <_raise_r>:
 8019cc2:	291f      	cmp	r1, #31
 8019cc4:	b538      	push	{r3, r4, r5, lr}
 8019cc6:	4605      	mov	r5, r0
 8019cc8:	460c      	mov	r4, r1
 8019cca:	d904      	bls.n	8019cd6 <_raise_r+0x14>
 8019ccc:	2316      	movs	r3, #22
 8019cce:	6003      	str	r3, [r0, #0]
 8019cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019cd4:	bd38      	pop	{r3, r4, r5, pc}
 8019cd6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019cd8:	b112      	cbz	r2, 8019ce0 <_raise_r+0x1e>
 8019cda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019cde:	b94b      	cbnz	r3, 8019cf4 <_raise_r+0x32>
 8019ce0:	4628      	mov	r0, r5
 8019ce2:	f000 f831 	bl	8019d48 <_getpid_r>
 8019ce6:	4622      	mov	r2, r4
 8019ce8:	4601      	mov	r1, r0
 8019cea:	4628      	mov	r0, r5
 8019cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019cf0:	f000 b818 	b.w	8019d24 <_kill_r>
 8019cf4:	2b01      	cmp	r3, #1
 8019cf6:	d00a      	beq.n	8019d0e <_raise_r+0x4c>
 8019cf8:	1c59      	adds	r1, r3, #1
 8019cfa:	d103      	bne.n	8019d04 <_raise_r+0x42>
 8019cfc:	2316      	movs	r3, #22
 8019cfe:	6003      	str	r3, [r0, #0]
 8019d00:	2001      	movs	r0, #1
 8019d02:	e7e7      	b.n	8019cd4 <_raise_r+0x12>
 8019d04:	2100      	movs	r1, #0
 8019d06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019d0a:	4620      	mov	r0, r4
 8019d0c:	4798      	blx	r3
 8019d0e:	2000      	movs	r0, #0
 8019d10:	e7e0      	b.n	8019cd4 <_raise_r+0x12>
	...

08019d14 <raise>:
 8019d14:	4b02      	ldr	r3, [pc, #8]	@ (8019d20 <raise+0xc>)
 8019d16:	4601      	mov	r1, r0
 8019d18:	6818      	ldr	r0, [r3, #0]
 8019d1a:	f7ff bfd2 	b.w	8019cc2 <_raise_r>
 8019d1e:	bf00      	nop
 8019d20:	20000a70 	.word	0x20000a70

08019d24 <_kill_r>:
 8019d24:	b538      	push	{r3, r4, r5, lr}
 8019d26:	4d07      	ldr	r5, [pc, #28]	@ (8019d44 <_kill_r+0x20>)
 8019d28:	2300      	movs	r3, #0
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	4608      	mov	r0, r1
 8019d2e:	4611      	mov	r1, r2
 8019d30:	602b      	str	r3, [r5, #0]
 8019d32:	f7e8 fe61 	bl	80029f8 <_kill>
 8019d36:	1c43      	adds	r3, r0, #1
 8019d38:	d102      	bne.n	8019d40 <_kill_r+0x1c>
 8019d3a:	682b      	ldr	r3, [r5, #0]
 8019d3c:	b103      	cbz	r3, 8019d40 <_kill_r+0x1c>
 8019d3e:	6023      	str	r3, [r4, #0]
 8019d40:	bd38      	pop	{r3, r4, r5, pc}
 8019d42:	bf00      	nop
 8019d44:	2000e6f4 	.word	0x2000e6f4

08019d48 <_getpid_r>:
 8019d48:	f7e8 be4e 	b.w	80029e8 <_getpid>

08019d4c <_init>:
 8019d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d4e:	bf00      	nop
 8019d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d52:	bc08      	pop	{r3}
 8019d54:	469e      	mov	lr, r3
 8019d56:	4770      	bx	lr

08019d58 <_fini>:
 8019d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d5a:	bf00      	nop
 8019d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d5e:	bc08      	pop	{r3}
 8019d60:	469e      	mov	lr, r3
 8019d62:	4770      	bx	lr
