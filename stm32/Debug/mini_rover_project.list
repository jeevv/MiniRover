
mini_rover_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001926c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001330  08019410  08019410  0001a410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a740  0801a740  0001c720  2**0
                  CONTENTS
  4 .ARM          00000008  0801a740  0801a740  0001b740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a748  0801a748  0001c720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801a748  0801a748  0001b748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a758  0801a758  0001b758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000720  20000000  0801a75c  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc3c  20000720  0801ae7c  0001c720  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000e35c  0801ae7c  0001d35c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c720  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd17  00000000  00000000  0001c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e74  00000000  00000000  00039467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0003d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001362  00000000  00000000  0003ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008c36  00000000  00000000  0003ff12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc22  00000000  00000000  00048b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7025  00000000  00000000  0006676a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0010d78f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a20  00000000  00000000  0010d808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00115228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000720 	.word	0x20000720
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080193f4 	.word	0x080193f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000724 	.word	0x20000724
 80001dc:	080193f4 	.word	0x080193f4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ldivmod>:
 8000bec:	b97b      	cbnz	r3, 8000c0e <__aeabi_ldivmod+0x22>
 8000bee:	b972      	cbnz	r2, 8000c0e <__aeabi_ldivmod+0x22>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bfbe      	ittt	lt
 8000bf4:	2000      	movlt	r0, #0
 8000bf6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bfa:	e006      	blt.n	8000c0a <__aeabi_ldivmod+0x1e>
 8000bfc:	bf08      	it	eq
 8000bfe:	2800      	cmpeq	r0, #0
 8000c00:	bf1c      	itt	ne
 8000c02:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c06:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0a:	f000 b9b5 	b.w	8000f78 <__aeabi_idiv0>
 8000c0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c16:	2900      	cmp	r1, #0
 8000c18:	db09      	blt.n	8000c2e <__aeabi_ldivmod+0x42>
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db1a      	blt.n	8000c54 <__aeabi_ldivmod+0x68>
 8000c1e:	f000 f84d 	bl	8000cbc <__udivmoddi4>
 8000c22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db1b      	blt.n	8000c70 <__aeabi_ldivmod+0x84>
 8000c38:	f000 f840 	bl	8000cbc <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4240      	negs	r0, r0
 8000c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	4770      	bx	lr
 8000c54:	4252      	negs	r2, r2
 8000c56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5a:	f000 f82f 	bl	8000cbc <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4240      	negs	r0, r0
 8000c6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f821 	bl	8000cbc <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	f000 b96a 	b.w	8000f78 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9d08      	ldr	r5, [sp, #32]
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14e      	bne.n	8000d66 <__udivmoddi4+0xaa>
 8000cc8:	4694      	mov	ip, r2
 8000cca:	458c      	cmp	ip, r1
 8000ccc:	4686      	mov	lr, r0
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	d962      	bls.n	8000d9a <__udivmoddi4+0xde>
 8000cd4:	b14a      	cbz	r2, 8000cea <__udivmoddi4+0x2e>
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	4319      	orrs	r1, r3
 8000ce6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f f68c 	uxth.w	r6, ip
 8000cf2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb04 f106 	mul.w	r1, r4, r6
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x64>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d12:	f080 8112 	bcs.w	8000f3a <__udivmoddi4+0x27e>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 810f 	bls.w	8000f3a <__udivmoddi4+0x27e>
 8000d1c:	3c02      	subs	r4, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a59      	subs	r1, r3, r1
 8000d22:	fa1f f38e 	uxth.w	r3, lr
 8000d26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb00 f606 	mul.w	r6, r0, r6
 8000d36:	429e      	cmp	r6, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x94>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d42:	f080 80fc 	bcs.w	8000f3e <__udivmoddi4+0x282>
 8000d46:	429e      	cmp	r6, r3
 8000d48:	f240 80f9 	bls.w	8000f3e <__udivmoddi4+0x282>
 8000d4c:	4463      	add	r3, ip
 8000d4e:	3802      	subs	r0, #2
 8000d50:	1b9b      	subs	r3, r3, r6
 8000d52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d56:	2100      	movs	r1, #0
 8000d58:	b11d      	cbz	r5, 8000d62 <__udivmoddi4+0xa6>
 8000d5a:	40d3      	lsrs	r3, r2
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d905      	bls.n	8000d76 <__udivmoddi4+0xba>
 8000d6a:	b10d      	cbz	r5, 8000d70 <__udivmoddi4+0xb4>
 8000d6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	4608      	mov	r0, r1
 8000d74:	e7f5      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d76:	fab3 f183 	clz	r1, r3
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d146      	bne.n	8000e0c <__udivmoddi4+0x150>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xcc>
 8000d82:	4290      	cmp	r0, r2
 8000d84:	f0c0 80f0 	bcc.w	8000f68 <__udivmoddi4+0x2ac>
 8000d88:	1a86      	subs	r6, r0, r2
 8000d8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d0e6      	beq.n	8000d62 <__udivmoddi4+0xa6>
 8000d94:	e9c5 6300 	strd	r6, r3, [r5]
 8000d98:	e7e3      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	f040 8090 	bne.w	8000ec0 <__udivmoddi4+0x204>
 8000da0:	eba1 040c 	sub.w	r4, r1, ip
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	2101      	movs	r1, #1
 8000dae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dbe:	fb07 f006 	mul.w	r0, r7, r6
 8000dc2:	4298      	cmp	r0, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x11c>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x11a>
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	f200 80cd 	bhi.w	8000f70 <__udivmoddi4+0x2b4>
 8000dd6:	4626      	mov	r6, r4
 8000dd8:	1a1c      	subs	r4, r3, r0
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000de2:	fb08 4410 	mls	r4, r8, r0, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb00 f707 	mul.w	r7, r0, r7
 8000dee:	429f      	cmp	r7, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x148>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x146>
 8000dfc:	429f      	cmp	r7, r3
 8000dfe:	f200 80b0 	bhi.w	8000f62 <__udivmoddi4+0x2a6>
 8000e02:	4620      	mov	r0, r4
 8000e04:	1bdb      	subs	r3, r3, r7
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0x9c>
 8000e0c:	f1c1 0620 	rsb	r6, r1, #32
 8000e10:	408b      	lsls	r3, r1
 8000e12:	fa22 f706 	lsr.w	r7, r2, r6
 8000e16:	431f      	orrs	r7, r3
 8000e18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e20:	ea43 030c 	orr.w	r3, r3, ip
 8000e24:	40f4      	lsrs	r4, r6
 8000e26:	fa00 f801 	lsl.w	r8, r0, r1
 8000e2a:	0c38      	lsrs	r0, r7, #16
 8000e2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e30:	fbb4 fef0 	udiv	lr, r4, r0
 8000e34:	fa1f fc87 	uxth.w	ip, r7
 8000e38:	fb00 441e 	mls	r4, r0, lr, r4
 8000e3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e40:	fb0e f90c 	mul.w	r9, lr, ip
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	d90a      	bls.n	8000e62 <__udivmoddi4+0x1a6>
 8000e4c:	193c      	adds	r4, r7, r4
 8000e4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e52:	f080 8084 	bcs.w	8000f5e <__udivmoddi4+0x2a2>
 8000e56:	45a1      	cmp	r9, r4
 8000e58:	f240 8081 	bls.w	8000f5e <__udivmoddi4+0x2a2>
 8000e5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e60:	443c      	add	r4, r7
 8000e62:	eba4 0409 	sub.w	r4, r4, r9
 8000e66:	fa1f f983 	uxth.w	r9, r3
 8000e6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e7a:	45a4      	cmp	ip, r4
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x1d2>
 8000e7e:	193c      	adds	r4, r7, r4
 8000e80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e84:	d267      	bcs.n	8000f56 <__udivmoddi4+0x29a>
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d965      	bls.n	8000f56 <__udivmoddi4+0x29a>
 8000e8a:	3b02      	subs	r3, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e92:	fba0 9302 	umull	r9, r3, r0, r2
 8000e96:	eba4 040c 	sub.w	r4, r4, ip
 8000e9a:	429c      	cmp	r4, r3
 8000e9c:	46ce      	mov	lr, r9
 8000e9e:	469c      	mov	ip, r3
 8000ea0:	d351      	bcc.n	8000f46 <__udivmoddi4+0x28a>
 8000ea2:	d04e      	beq.n	8000f42 <__udivmoddi4+0x286>
 8000ea4:	b155      	cbz	r5, 8000ebc <__udivmoddi4+0x200>
 8000ea6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000eae:	fa04 f606 	lsl.w	r6, r4, r6
 8000eb2:	40cb      	lsrs	r3, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	40cc      	lsrs	r4, r1
 8000eb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	e750      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000ec0:	f1c2 0320 	rsb	r3, r2, #32
 8000ec4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ed0:	4094      	lsls	r4, r2
 8000ed2:	430c      	orrs	r4, r1
 8000ed4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000edc:	fa1f f78c 	uxth.w	r7, ip
 8000ee0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee8:	0c23      	lsrs	r3, r4, #16
 8000eea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eee:	fb00 f107 	mul.w	r1, r0, r7
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x24c>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efe:	d22c      	bcs.n	8000f5a <__udivmoddi4+0x29e>
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d92a      	bls.n	8000f5a <__udivmoddi4+0x29e>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f10:	fb08 3311 	mls	r3, r8, r1, r3
 8000f14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f18:	fb01 f307 	mul.w	r3, r1, r7
 8000f1c:	42a3      	cmp	r3, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x276>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f28:	d213      	bcs.n	8000f52 <__udivmoddi4+0x296>
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	d911      	bls.n	8000f52 <__udivmoddi4+0x296>
 8000f2e:	3902      	subs	r1, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	1ae4      	subs	r4, r4, r3
 8000f34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f38:	e739      	b.n	8000dae <__udivmoddi4+0xf2>
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	e6f0      	b.n	8000d20 <__udivmoddi4+0x64>
 8000f3e:	4608      	mov	r0, r1
 8000f40:	e706      	b.n	8000d50 <__udivmoddi4+0x94>
 8000f42:	45c8      	cmp	r8, r9
 8000f44:	d2ae      	bcs.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4e:	3801      	subs	r0, #1
 8000f50:	e7a8      	b.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f52:	4631      	mov	r1, r6
 8000f54:	e7ed      	b.n	8000f32 <__udivmoddi4+0x276>
 8000f56:	4603      	mov	r3, r0
 8000f58:	e799      	b.n	8000e8e <__udivmoddi4+0x1d2>
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e7d4      	b.n	8000f08 <__udivmoddi4+0x24c>
 8000f5e:	46d6      	mov	lr, sl
 8000f60:	e77f      	b.n	8000e62 <__udivmoddi4+0x1a6>
 8000f62:	4463      	add	r3, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e74d      	b.n	8000e04 <__udivmoddi4+0x148>
 8000f68:	4606      	mov	r6, r0
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	e70f      	b.n	8000d90 <__udivmoddi4+0xd4>
 8000f70:	3e02      	subs	r6, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	e730      	b.n	8000dd8 <__udivmoddi4+0x11c>
 8000f76:	bf00      	nop

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f88:	f007 fbfc 	bl	8008784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f94:	f000 f986 	bl	80012a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f98:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f040 8090 	bne.w	80010c6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01e      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fac:	2208      	movs	r2, #8
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d015      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f023 0307 	bic.w	r3, r3, #7
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fd6:	f383 8811 	msr	BASEPRI, r3
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	e7fd      	b.n	8000fe6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d06a      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
 8000ff0:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d865      	bhi.n	80010c6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ffa:	4b42      	ldr	r3, [pc, #264]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8000ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000ffe:	4b41      	ldr	r3, [pc, #260]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001004:	e004      	b.n	8001010 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d903      	bls.n	8001022 <pvPortMallocMicroROS+0xa6>
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f1      	bne.n	8001006 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001028:	429a      	cmp	r2, r3
 800102a:	d04c      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2208      	movs	r2, #8
 8001032:	4413      	add	r3, r2
 8001034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1ad2      	subs	r2, r2, r3
 8001046:	2308      	movs	r3, #8
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	429a      	cmp	r2, r3
 800104c:	d920      	bls.n	8001090 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800104e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001064:	f383 8811 	msr	BASEPRI, r3
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	613b      	str	r3, [r7, #16]
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1ad2      	subs	r2, r2, r3
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800108a:	69b8      	ldr	r0, [r7, #24]
 800108c:	f000 f96c 	bl	8001368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 800109c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d203      	bcs.n	80010b2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010c6:	f007 fb6b 	bl	80087a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	60fb      	str	r3, [r7, #12]
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80010ec:	69fb      	ldr	r3, [r7, #28]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20004344 	.word	0x20004344
 80010fc:	20004350 	.word	0x20004350
 8001100:	20004348 	.word	0x20004348
 8001104:	2000433c 	.word	0x2000433c
 8001108:	2000434c 	.word	0x2000434c

0800110c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d04a      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800111e:	2308      	movs	r3, #8
 8001120:	425b      	negs	r3, r3
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <vPortFreeMicroROS+0x46>
	__asm volatile
 800113a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	60fb      	str	r3, [r7, #12]
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <vPortFreeMicroROS+0x66>
	__asm volatile
 800115a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115e:	f383 8811 	msr	BASEPRI, r3
 8001162:	f3bf 8f6f 	isb	sy
 8001166:	f3bf 8f4f 	dsb	sy
 800116a:	60bb      	str	r3, [r7, #8]
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	e7fd      	b.n	800116e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d019      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d115      	bne.n	80011b4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001198:	f007 faf4 	bl	8008784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011aa:	6938      	ldr	r0, [r7, #16]
 80011ac:	f000 f8dc 	bl	8001368 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011b0:	f007 faf6 	bl	80087a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20004350 	.word	0x20004350
 80011c0:	20004348 	.word	0x20004348

080011c4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011d0:	2308      	movs	r3, #8
 80011d2:	425b      	negs	r3, r3
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4413      	add	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <getBlockSize+0x38>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

	return count;
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20004350 	.word	0x20004350

08001200 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800120a:	f007 fabb 	bl	8008784 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f7ff feb4 	bl	8000f7c <pvPortMallocMicroROS>
 8001214:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d017      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d014      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffce 	bl	80011c4 <getBlockSize>
 8001228:	4603      	mov	r3, r0
 800122a:	2208      	movs	r2, #8
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d201      	bcs.n	800123c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f017 fa96 	bl	8018772 <memcpy>

		vPortFreeMicroROS(pv);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff60 	bl	800110c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800124c:	f007 faa8 	bl	80087a0 <xTaskResumeAll>

	return newmem;
 8001250:	68bb      	ldr	r3, [r7, #8]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001264:	f007 fa8e 	bl	8008784 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff fe82 	bl	8000f7c <pvPortMallocMicroROS>
 8001278:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800127e:	e004      	b.n	800128a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	613a      	str	r2, [r7, #16]
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	1e5a      	subs	r2, r3, #1
 800128e:	617a      	str	r2, [r7, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f5      	bne.n	8001280 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001294:	f007 fa84 	bl	80087a0 <xTaskResumeAll>
  	return mem;
 8001298:	68fb      	ldr	r3, [r7, #12]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b0:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <prvHeapInit+0xac>)
 80012b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00c      	beq.n	80012d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3307      	adds	r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 0307 	bic.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <prvHeapInit+0xac>)
 80012d4:	4413      	add	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <prvHeapInit+0xb0>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <prvHeapInit+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f0:	2208      	movs	r2, #8
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f023 0307 	bic.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a15      	ldr	r2, [pc, #84]	@ (8001358 <prvHeapInit+0xb4>)
 8001304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <prvHeapInit+0xb4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <prvHeapInit+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	1ad2      	subs	r2, r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <prvHeapInit+0xb4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <prvHeapInit+0xb8>)
 8001332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <prvHeapInit+0xbc>)
 800133a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <prvHeapInit+0xc0>)
 800133e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	2000073c 	.word	0x2000073c
 8001354:	2000433c 	.word	0x2000433c
 8001358:	20004344 	.word	0x20004344
 800135c:	2000434c 	.word	0x2000434c
 8001360:	20004348 	.word	0x20004348
 8001364:	20004350 	.word	0x20004350

08001368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <prvInsertBlockIntoFreeList+0xac>)
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e002      	b.n	800137c <prvInsertBlockIntoFreeList+0x14>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d8f7      	bhi.n	8001376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	4413      	add	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d108      	bne.n	80013aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	441a      	add	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	441a      	add	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d118      	bne.n	80013f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d00d      	beq.n	80013e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e008      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e003      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d002      	beq.n	8001406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2000433c 	.word	0x2000433c
 8001418:	20004344 	.word	0x20004344
 800141c:	00000000 	.word	0x00000000

08001420 <subscription_cmd_vel_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void subscription_cmd_vel_callback(const void * msgin)
{
 8001420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001424:	b088      	sub	sp, #32
 8001426:	af00      	add	r7, sp, #0
 8001428:	6178      	str	r0, [r7, #20]
	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist *)msgin;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	61fb      	str	r3, [r7, #28]

	LeftWheelVelocity = msg->linear.x - msg->angular.z*Length;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800143a:	a3a7      	add	r3, pc, #668	@ (adr r3, 80016d8 <subscription_cmd_vel_callback+0x2b8>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f8f2 	bl	8000628 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe ff34 	bl	80002b8 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	49a8      	ldr	r1, [pc, #672]	@ (80016f8 <subscription_cmd_vel_callback+0x2d8>)
 8001456:	e9c1 2300 	strd	r2, r3, [r1]
	RightWheelVelocity = msg->linear.x + msg->angular.z*Length;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001466:	a39c      	add	r3, pc, #624	@ (adr r3, 80016d8 <subscription_cmd_vel_callback+0x2b8>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f8dc 	bl	8000628 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe ff20 	bl	80002bc <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	499e      	ldr	r1, [pc, #632]	@ (80016fc <subscription_cmd_vel_callback+0x2dc>)
 8001482:	e9c1 2300 	strd	r2, r3, [r1]

	//w of motor in rpm
	LeftMotorSpeed = (int)(LeftWheelVelocity/WheelRadius) * 60/6.2831;
 8001486:	4b9c      	ldr	r3, [pc, #624]	@ (80016f8 <subscription_cmd_vel_callback+0x2d8>)
 8001488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148c:	a394      	add	r3, pc, #592	@ (adr r3, 80016e0 <subscription_cmd_vel_callback+0x2c0>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f9f3 	bl	800087c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fb5d 	bl	8000b5c <__aeabi_d2iz>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f851 	bl	8000554 <__aeabi_i2d>
 80014b2:	a38d      	add	r3, pc, #564	@ (adr r3, 80016e8 <subscription_cmd_vel_callback+0x2c8>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f9e0 	bl	800087c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	498f      	ldr	r1, [pc, #572]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 80014c2:	e9c1 2300 	strd	r2, r3, [r1]
	RightMotorSpeed = (int)(RightWheelVelocity/WheelRadius) * 60/6.2831;
 80014c6:	4b8d      	ldr	r3, [pc, #564]	@ (80016fc <subscription_cmd_vel_callback+0x2dc>)
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	a384      	add	r3, pc, #528	@ (adr r3, 80016e0 <subscription_cmd_vel_callback+0x2c0>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f9d3 	bl	800087c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb3d 	bl	8000b5c <__aeabi_d2iz>
 80014e2:	4602      	mov	r2, r0
 80014e4:	4613      	mov	r3, r2
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f831 	bl	8000554 <__aeabi_i2d>
 80014f2:	a37d      	add	r3, pc, #500	@ (adr r3, 80016e8 <subscription_cmd_vel_callback+0x2c8>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f9c0 	bl	800087c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4980      	ldr	r1, [pc, #512]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 8001502:	e9c1 2300 	strd	r2, r3, [r1]
	//PWM2 Left motor PB1
	//PWM1 Left motor PB0

	// Fix the going beyond 1000 value in the ROS code

	if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)	//front
 8001506:	4b7e      	ldr	r3, [pc, #504]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 8001508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f7ff fb0e 	bl	8000b34 <__aeabi_dcmpge>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d03c      	beq.n	8001598 <subscription_cmd_vel_callback+0x178>
 800151e:	4b78      	ldr	r3, [pc, #480]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 8001520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b77      	ldr	r3, [pc, #476]	@ (8001708 <subscription_cmd_vel_callback+0x2e8>)
 800152a:	f7ff faf9 	bl	8000b20 <__aeabi_dcmple>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d031      	beq.n	8001598 <subscription_cmd_vel_callback+0x178>
 8001534:	4b73      	ldr	r3, [pc, #460]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 8001536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f7ff faf7 	bl	8000b34 <__aeabi_dcmpge>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d025      	beq.n	8001598 <subscription_cmd_vel_callback+0x178>
 800154c:	4b6d      	ldr	r3, [pc, #436]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 800154e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b6c      	ldr	r3, [pc, #432]	@ (8001708 <subscription_cmd_vel_callback+0x2e8>)
 8001558:	f7ff fae2 	bl	8000b20 <__aeabi_dcmple>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d01a      	beq.n	8001598 <subscription_cmd_vel_callback+0x178>
	{
 		TIM3->CCR1 = LeftMotorSpeed;
 8001562:	4b67      	ldr	r3, [pc, #412]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	4c68      	ldr	r4, [pc, #416]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb1d 	bl	8000bac <__aeabi_d2uiz>
 8001572:	4603      	mov	r3, r0
 8001574:	6363      	str	r3, [r4, #52]	@ 0x34
		TIM3->CCR2 = 0;
 8001576:	4b65      	ldr	r3, [pc, #404]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 8001578:	2200      	movs	r2, #0
 800157a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = RightMotorSpeed;
 800157c:	4b61      	ldr	r3, [pc, #388]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	4c62      	ldr	r4, [pc, #392]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fb10 	bl	8000bac <__aeabi_d2uiz>
 800158c:	4603      	mov	r3, r0
 800158e:	63e3      	str	r3, [r4, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 8001590:	4b5e      	ldr	r3, [pc, #376]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 8001592:	2200      	movs	r2, #0
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
 8001596:	e114      	b.n	80017c2 <subscription_cmd_vel_callback+0x3a2>
	}
	else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)	//back
 8001598:	4b59      	ldr	r3, [pc, #356]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 800159a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	f7ff fabb 	bl	8000b20 <__aeabi_dcmple>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d044      	beq.n	800163a <subscription_cmd_vel_callback+0x21a>
 80015b0:	4b53      	ldr	r3, [pc, #332]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 80015b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015b6:	a34e      	add	r3, pc, #312	@ (adr r3, 80016f0 <subscription_cmd_vel_callback+0x2d0>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7ff faba 	bl	8000b34 <__aeabi_dcmpge>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d039      	beq.n	800163a <subscription_cmd_vel_callback+0x21a>
 80015c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f7ff faa4 	bl	8000b20 <__aeabi_dcmple>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d02d      	beq.n	800163a <subscription_cmd_vel_callback+0x21a>
 80015de:	4b49      	ldr	r3, [pc, #292]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 80015e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e4:	a342      	add	r3, pc, #264	@ (adr r3, 80016f0 <subscription_cmd_vel_callback+0x2d0>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff faa3 	bl	8000b34 <__aeabi_dcmpge>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d022      	beq.n	800163a <subscription_cmd_vel_callback+0x21a>
	{
		TIM3->CCR1 = 0;
 80015f4:	4b45      	ldr	r3, [pc, #276]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = -LeftMotorSpeed;
 80015fa:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	4c40      	ldr	r4, [pc, #256]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 800160a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800160e:	f7ff facd 	bl	8000bac <__aeabi_d2uiz>
 8001612:	4603      	mov	r3, r0
 8001614:	63a3      	str	r3, [r4, #56]	@ 0x38
		TIM3->CCR3 = 0;
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 8001618:	2200      	movs	r2, #0
 800161a:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = -RightMotorSpeed;
 800161c:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	603a      	str	r2, [r7, #0]
 8001624:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4c38      	ldr	r4, [pc, #224]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 800162c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001630:	f7ff fabc 	bl	8000bac <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	6423      	str	r3, [r4, #64]	@ 0x40
 8001638:	e0c3      	b.n	80017c2 <subscription_cmd_vel_callback+0x3a2>
	}
	else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)		//left
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 800163c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	f7ff fa6a 	bl	8000b20 <__aeabi_dcmple>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d05e      	beq.n	8001710 <subscription_cmd_vel_callback+0x2f0>
 8001652:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 8001654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001658:	a325      	add	r3, pc, #148	@ (adr r3, 80016f0 <subscription_cmd_vel_callback+0x2d0>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff fa69 	bl	8000b34 <__aeabi_dcmpge>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d053      	beq.n	8001710 <subscription_cmd_vel_callback+0x2f0>
 8001668:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 800166a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	f7ff fa5d 	bl	8000b34 <__aeabi_dcmpge>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d047      	beq.n	8001710 <subscription_cmd_vel_callback+0x2f0>
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 8001682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <subscription_cmd_vel_callback+0x2e8>)
 800168c:	f7ff fa48 	bl	8000b20 <__aeabi_dcmple>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d03c      	beq.n	8001710 <subscription_cmd_vel_callback+0x2f0>
	{
		TIM3->CCR1 = -LeftMotorSpeed;
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <subscription_cmd_vel_callback+0x2e0>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	4692      	mov	sl, r2
 800169e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80016a2:	4c1a      	ldr	r4, [pc, #104]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 80016a4:	4650      	mov	r0, sl
 80016a6:	4659      	mov	r1, fp
 80016a8:	f7ff fa80 	bl	8000bac <__aeabi_d2uiz>
 80016ac:	4603      	mov	r3, r0
 80016ae:	6363      	str	r3, [r4, #52]	@ 0x34
		TIM3->CCR2 = 0;
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 0;
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = RightMotorSpeed;
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <subscription_cmd_vel_callback+0x2e4>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	4c12      	ldr	r4, [pc, #72]	@ (800170c <subscription_cmd_vel_callback+0x2ec>)
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff fa70 	bl	8000bac <__aeabi_d2uiz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	6423      	str	r3, [r4, #64]	@ 0x40
 80016d0:	e077      	b.n	80017c2 <subscription_cmd_vel_callback+0x3a2>
 80016d2:	bf00      	nop
 80016d4:	f3af 8000 	nop.w
 80016d8:	cccccccd 	.word	0xcccccccd
 80016dc:	3fcccccc 	.word	0x3fcccccc
 80016e0:	1eb851ec 	.word	0x1eb851ec
 80016e4:	3fb1eb85 	.word	0x3fb1eb85
 80016e8:	f765fd8b 	.word	0xf765fd8b
 80016ec:	401921e4 	.word	0x401921e4
 80016f0:	00000000 	.word	0x00000000
 80016f4:	c08f4000 	.word	0xc08f4000
 80016f8:	20004508 	.word	0x20004508
 80016fc:	20004510 	.word	0x20004510
 8001700:	20004518 	.word	0x20004518
 8001704:	20004520 	.word	0x20004520
 8001708:	408f4000 	.word	0x408f4000
 800170c:	40000400 	.word	0x40000400
	}
	else if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)		//right
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <subscription_cmd_vel_callback+0x3b8>)
 8001712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	f7ff fa09 	bl	8000b34 <__aeabi_dcmpge>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03f      	beq.n	80017a8 <subscription_cmd_vel_callback+0x388>
 8001728:	4b2b      	ldr	r3, [pc, #172]	@ (80017d8 <subscription_cmd_vel_callback+0x3b8>)
 800172a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <subscription_cmd_vel_callback+0x3bc>)
 8001734:	f7ff f9f4 	bl	8000b20 <__aeabi_dcmple>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d034      	beq.n	80017a8 <subscription_cmd_vel_callback+0x388>
 800173e:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <subscription_cmd_vel_callback+0x3c0>)
 8001740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	f7ff f9e8 	bl	8000b20 <__aeabi_dcmple>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d028      	beq.n	80017a8 <subscription_cmd_vel_callback+0x388>
 8001756:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <subscription_cmd_vel_callback+0x3c0>)
 8001758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800175c:	a31c      	add	r3, pc, #112	@ (adr r3, 80017d0 <subscription_cmd_vel_callback+0x3b0>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7ff f9e7 	bl	8000b34 <__aeabi_dcmpge>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01d      	beq.n	80017a8 <subscription_cmd_vel_callback+0x388>
	{
		TIM3->CCR1 = 0;
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = LeftMotorSpeed;
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <subscription_cmd_vel_callback+0x3b8>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	4c1a      	ldr	r4, [pc, #104]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa15 	bl	8000bac <__aeabi_d2uiz>
 8001782:	4603      	mov	r3, r0
 8001784:	63a3      	str	r3, [r4, #56]	@ 0x38
		TIM3->CCR3 = -RightMotorSpeed;
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <subscription_cmd_vel_callback+0x3c0>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	4690      	mov	r8, r2
 800178e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001792:	4c14      	ldr	r4, [pc, #80]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 8001794:	4640      	mov	r0, r8
 8001796:	4649      	mov	r1, r9
 8001798:	f7ff fa08 	bl	8000bac <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	63e3      	str	r3, [r4, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 80017a0:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017a6:	e00c      	b.n	80017c2 <subscription_cmd_vel_callback+0x3a2>
	}
	else
	{
		TIM3->CCR1 = 0;
 80017a8:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 0;
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 0;
 80017b4:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <subscription_cmd_vel_callback+0x3c4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	641a      	str	r2, [r3, #64]	@ 0x40
	}

}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017cc:	f3af 8000 	nop.w
 80017d0:	00000000 	.word	0x00000000
 80017d4:	c08f4000 	.word	0xc08f4000
 80017d8:	20004518 	.word	0x20004518
 80017dc:	408f4000 	.word	0x408f4000
 80017e0:	20004520 	.word	0x20004520
 80017e4:	40000400 	.word	0x40000400

080017e8 <HAL_GPIO_EXTI_Callback>:

// Interrupts for the wheel encoders
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
	//PA0 LeftWheelEncoderChannelA  PE11 LeftWheelEncoderChannelB
	if (GPIO_Pin == GPIO_PIN_0)
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d11b      	bne.n	8001830 <HAL_GPIO_EXTI_Callback+0x48>
	{
//		LeftWheelEncoder++;
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 1) LeftWheelEncoder++;
 80017f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017fc:	481d      	ldr	r0, [pc, #116]	@ (8001874 <HAL_GPIO_EXTI_Callback+0x8c>)
 80017fe:	f002 f8f9 	bl	80039f4 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_GPIO_EXTI_Callback+0x2c>
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x90>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	4a1a      	ldr	r2, [pc, #104]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x90>)
 8001810:	6013      	str	r3, [r2, #0]
	{
//		RightWheelEncoder++;
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0) RightWheelEncoder++;
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1) RightWheelEncoder--;
	}
}
 8001812:	e02b      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 0) LeftWheelEncoder--;
 8001814:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001818:	4816      	ldr	r0, [pc, #88]	@ (8001874 <HAL_GPIO_EXTI_Callback+0x8c>)
 800181a:	f002 f8eb 	bl	80039f4 <HAL_GPIO_ReadPin>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d123      	bne.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x90>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	4a13      	ldr	r2, [pc, #76]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x90>)
 800182c:	6013      	str	r3, [r2, #0]
}
 800182e:	e01d      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
	else if (GPIO_Pin == GPIO_PIN_1)
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d11a      	bne.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0) RightWheelEncoder++;
 8001836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800183a:	480e      	ldr	r0, [pc, #56]	@ (8001874 <HAL_GPIO_EXTI_Callback+0x8c>)
 800183c:	f002 f8da 	bl	80039f4 <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <HAL_GPIO_EXTI_Callback+0x6a>
 8001846:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <HAL_GPIO_EXTI_Callback+0x94>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	4a0b      	ldr	r2, [pc, #44]	@ (800187c <HAL_GPIO_EXTI_Callback+0x94>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	e00c      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1) RightWheelEncoder--;
 8001852:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001856:	4807      	ldr	r0, [pc, #28]	@ (8001874 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001858:	f002 f8cc 	bl	80039f4 <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d104      	bne.n	800186c <HAL_GPIO_EXTI_Callback+0x84>
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_GPIO_EXTI_Callback+0x94>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3b01      	subs	r3, #1
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <HAL_GPIO_EXTI_Callback+0x94>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	200044fc 	.word	0x200044fc
 800187c:	20004500 	.word	0x20004500

08001880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001884:	f001 f9ac 	bl	8002be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001888:	f000 f830 	bl	80018ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188c:	f000 f9ae 	bl	8001bec <MX_GPIO_Init>
  MX_DMA_Init();
 8001890:	f000 f984 	bl	8001b9c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001894:	f000 f958 	bl	8001b48 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001898:	f000 f8be 	bl	8001a18 <MX_TIM3_Init>
  MX_I2C1_Init();
 800189c:	f000 f88e 	bl	80019bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80018a0:	2100      	movs	r1, #0
 80018a2:	480e      	ldr	r0, [pc, #56]	@ (80018dc <main+0x5c>)
 80018a4:	f003 fe3a 	bl	800551c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80018a8:	2104      	movs	r1, #4
 80018aa:	480c      	ldr	r0, [pc, #48]	@ (80018dc <main+0x5c>)
 80018ac:	f003 fe36 	bl	800551c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80018b0:	2108      	movs	r1, #8
 80018b2:	480a      	ldr	r0, [pc, #40]	@ (80018dc <main+0x5c>)
 80018b4:	f003 fe32 	bl	800551c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80018b8:	210c      	movs	r1, #12
 80018ba:	4808      	ldr	r0, [pc, #32]	@ (80018dc <main+0x5c>)
 80018bc:	f003 fe2e 	bl	800551c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018c0:	f005 fe42 	bl	8007548 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018c4:	4a06      	ldr	r2, [pc, #24]	@ (80018e0 <main+0x60>)
 80018c6:	2100      	movs	r1, #0
 80018c8:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <main+0x64>)
 80018ca:	f005 fe87 	bl	80075dc <osThreadNew>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <main+0x68>)
 80018d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018d4:	f005 fe5c 	bl	8007590 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <main+0x58>
 80018dc:	200043a8 	.word	0x200043a8
 80018e0:	080194f0 	.word	0x080194f0
 80018e4:	08001d31 	.word	0x08001d31
 80018e8:	200044f8 	.word	0x200044f8

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b094      	sub	sp, #80	@ 0x50
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2230      	movs	r2, #48	@ 0x30
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f016 fe70 	bl	80185e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	4b27      	ldr	r3, [pc, #156]	@ (80019b4 <SystemClock_Config+0xc8>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	4a26      	ldr	r2, [pc, #152]	@ (80019b4 <SystemClock_Config+0xc8>)
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001920:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <SystemClock_Config+0xc8>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <SystemClock_Config+0xcc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a20      	ldr	r2, [pc, #128]	@ (80019b8 <SystemClock_Config+0xcc>)
 8001936:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <SystemClock_Config+0xcc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001948:	2301      	movs	r3, #1
 800194a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800194c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001952:	2302      	movs	r3, #2
 8001954:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001956:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800195a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800195c:	2304      	movs	r3, #4
 800195e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001960:	23c0      	movs	r3, #192	@ 0xc0
 8001962:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001964:	2304      	movs	r3, #4
 8001966:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001968:	2308      	movs	r3, #8
 800196a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4618      	mov	r0, r3
 8001972:	f003 f893 	bl	8004a9c <HAL_RCC_OscConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800197c:	f000 fc1a 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001980:	230f      	movs	r3, #15
 8001982:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001984:	2302      	movs	r3, #2
 8001986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800198c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	2103      	movs	r1, #3
 800199c:	4618      	mov	r0, r3
 800199e:	f003 faf5 	bl	8004f8c <HAL_RCC_ClockConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019a8:	f000 fc04 	bl	80021b4 <Error_Handler>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3750      	adds	r7, #80	@ 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000

080019bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019c2:	4a13      	ldr	r2, [pc, #76]	@ (8001a10 <MX_I2C1_Init+0x54>)
 80019c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019c8:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <MX_I2C1_Init+0x58>)
 80019ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ec:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f2:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f8:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <MX_I2C1_Init+0x50>)
 80019fa:	f002 f82b 	bl	8003a54 <HAL_I2C_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a04:	f000 fbd6 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20004354 	.word	0x20004354
 8001a10:	40005400 	.word	0x40005400
 8001a14:	000186a0 	.word	0x000186a0

08001a18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08e      	sub	sp, #56	@ 0x38
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	f107 0320 	add.w	r3, r7, #32
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
 8001a44:	615a      	str	r2, [r3, #20]
 8001a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a48:	4b3d      	ldr	r3, [pc, #244]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b44 <MX_TIM3_Init+0x12c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a50:	2209      	movs	r2, #9
 8001a52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a54:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a5a:	4b39      	ldr	r3, [pc, #228]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a62:	4b37      	ldr	r3, [pc, #220]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a68:	4b35      	ldr	r3, [pc, #212]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a6a:	2280      	movs	r2, #128	@ 0x80
 8001a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a6e:	4834      	ldr	r0, [pc, #208]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a70:	f003 fcac 	bl	80053cc <HAL_TIM_Base_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a7a:	f000 fb9b 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	482d      	ldr	r0, [pc, #180]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a8c:	f003 feb8 	bl	8005800 <HAL_TIM_ConfigClockSource>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a96:	f000 fb8d 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a9a:	4829      	ldr	r0, [pc, #164]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001a9c:	f003 fce5 	bl	800546a <HAL_TIM_PWM_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aa6:	f000 fb85 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4821      	ldr	r0, [pc, #132]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001aba:	f004 fa41 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ac4:	f000 fb76 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac8:	2360      	movs	r3, #96	@ 0x60
 8001aca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	4619      	mov	r1, r3
 8001ade:	4818      	ldr	r0, [pc, #96]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001ae0:	f003 fdcc 	bl	800567c <HAL_TIM_PWM_ConfigChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001aea:	f000 fb63 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2204      	movs	r2, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001af6:	f003 fdc1 	bl	800567c <HAL_TIM_PWM_ConfigChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b00:	f000 fb58 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2208      	movs	r2, #8
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001b0c:	f003 fdb6 	bl	800567c <HAL_TIM_PWM_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001b16:	f000 fb4d 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4807      	ldr	r0, [pc, #28]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001b22:	f003 fdab 	bl	800567c <HAL_TIM_PWM_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001b2c:	f000 fb42 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b30:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <MX_TIM3_Init+0x128>)
 8001b32:	f000 fd3f 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 8001b36:	bf00      	nop
 8001b38:	3738      	adds	r7, #56	@ 0x38
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200043a8 	.word	0x200043a8
 8001b44:	40000400 	.word	0x40000400

08001b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b80:	f004 fa4c 	bl	800601c <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b8a:	f000 fb13 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200043f0 	.word	0x200043f0
 8001b98:	40004400 	.word	0x40004400

08001b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <MX_DMA_Init+0x4c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a0f      	ldr	r2, [pc, #60]	@ (8001be8 <MX_DMA_Init+0x4c>)
 8001bac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <MX_DMA_Init+0x4c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2105      	movs	r1, #5
 8001bc2:	2010      	movs	r0, #16
 8001bc4:	f001 f959 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bc8:	2010      	movs	r0, #16
 8001bca:	f001 f972 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2105      	movs	r1, #5
 8001bd2:	2011      	movs	r0, #17
 8001bd4:	f001 f951 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001bd8:	2011      	movs	r0, #17
 8001bda:	f001 f96a 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	@ 0x30
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	4b46      	ldr	r3, [pc, #280]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a45      	ldr	r2, [pc, #276]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b43      	ldr	r3, [pc, #268]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	4b3f      	ldr	r3, [pc, #252]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a3e      	ldr	r2, [pc, #248]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a37      	ldr	r2, [pc, #220]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b35      	ldr	r3, [pc, #212]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b31      	ldr	r3, [pc, #196]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a30      	ldr	r2, [pc, #192]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b2e      	ldr	r3, [pc, #184]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b2a      	ldr	r3, [pc, #168]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a29      	ldr	r2, [pc, #164]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a22      	ldr	r2, [pc, #136]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <MX_GPIO_Init+0x134>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001caa:	2303      	movs	r3, #3
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4819      	ldr	r0, [pc, #100]	@ (8001d24 <MX_GPIO_Init+0x138>)
 8001cc0:	f001 fd14 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cc4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4813      	ldr	r0, [pc, #76]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001cda:	f001 fd07 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cde:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480e      	ldr	r0, [pc, #56]	@ (8001d2c <MX_GPIO_Init+0x140>)
 8001cf4:	f001 fcfa 	bl	80036ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2105      	movs	r1, #5
 8001cfc:	2006      	movs	r0, #6
 8001cfe:	f001 f8bc 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d02:	2006      	movs	r0, #6
 8001d04:	f001 f8d5 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2105      	movs	r1, #5
 8001d0c:	2007      	movs	r0, #7
 8001d0e:	f001 f8b4 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d12:	2007      	movs	r0, #7
 8001d14:	f001 f8cd 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d18:	bf00      	nop
 8001d1a:	3730      	adds	r7, #48	@ 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40020c00 	.word	0x40020c00

08001d30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	f5ad 7d32 	sub.w	sp, sp, #712	@ 0x2c8
 8001d36:	af04      	add	r7, sp, #16
 8001d38:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d3c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001d40:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	// Initialisation of MPU6050
	// Checking if sensor returns 0x68 to confirm correct functioning

	uint8_t check = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	uint8_t data = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 329e 	strb.w	r3, [r7, #670]	@ 0x29e
	HAL_I2C_Mem_Read (&hi2c1, MPU_ADDRESS,MPU_REG_AVAILABLE,1, &check, 1, 1000);
 8001d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d52:	9302      	str	r3, [sp, #8]
 8001d54:	2301      	movs	r3, #1
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	f207 239f 	addw	r3, r7, #671	@ 0x29f
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2301      	movs	r3, #1
 8001d60:	2275      	movs	r2, #117	@ 0x75
 8001d62:	2168      	movs	r1, #104	@ 0x68
 8001d64:	48d0      	ldr	r0, [pc, #832]	@ (80020a8 <StartDefaultTask+0x378>)
 8001d66:	f002 f8b3 	bl	8003ed0 <HAL_I2C_Mem_Read>

	if (check!=0x68)
 8001d6a:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8001d6e:	2b68      	cmp	r3, #104	@ 0x68
 8001d70:	d002      	beq.n	8001d78 <StartDefaultTask+0x48>
	{
		printf("MPU6050 connected incorrectly\n");
 8001d72:	48ce      	ldr	r0, [pc, #824]	@ (80020ac <StartDefaultTask+0x37c>)
 8001d74:	f016 fabe 	bl	80182f4 <puts>
	}

	// Writing zeros to the register to wake up the sensor and
	// set clock frequency to 8 MHz

	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, MPU_REG_PWR_MGMT_1, 1,&data, 1, 1000);
 8001d78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7c:	9302      	str	r3, [sp, #8]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	f207 239e 	addw	r3, r7, #670	@ 0x29e
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	226b      	movs	r2, #107	@ 0x6b
 8001d8c:	2168      	movs	r1, #104	@ 0x68
 8001d8e:	48c6      	ldr	r0, [pc, #792]	@ (80020a8 <StartDefaultTask+0x378>)
 8001d90:	f001 ffa4 	bl	8003cdc <HAL_I2C_Mem_Write>

	// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
	data = 0x07;
 8001d94:	2307      	movs	r3, #7
 8001d96:	f887 329e 	strb.w	r3, [r7, #670]	@ 0x29e
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, MPU_REG_SMPL_RT_DIV	, 1, &data, 1, 1000);
 8001d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	2301      	movs	r3, #1
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	f207 239e 	addw	r3, r7, #670	@ 0x29e
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2301      	movs	r3, #1
 8001dac:	2219      	movs	r2, #25
 8001dae:	2168      	movs	r1, #104	@ 0x68
 8001db0:	48bd      	ldr	r0, [pc, #756]	@ (80020a8 <StartDefaultTask+0x378>)
 8001db2:	f001 ff93 	bl	8003cdc <HAL_I2C_Mem_Write>

	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 8001db6:	4bbe      	ldr	r3, [pc, #760]	@ (80020b0 <StartDefaultTask+0x380>)
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	4bbe      	ldr	r3, [pc, #760]	@ (80020b4 <StartDefaultTask+0x384>)
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	4bbe      	ldr	r3, [pc, #760]	@ (80020b8 <StartDefaultTask+0x388>)
 8001dc0:	4abe      	ldr	r2, [pc, #760]	@ (80020bc <StartDefaultTask+0x38c>)
 8001dc2:	49bf      	ldr	r1, [pc, #764]	@ (80020c0 <StartDefaultTask+0x390>)
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f00a ff13 	bl	800cbf0 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	 rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001dca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f00a fe40 	bl	800ca54 <rcutils_get_zero_initialized_allocator>
	 freeRTOS_allocator.allocate = microros_allocate;
 8001dd4:	4bbb      	ldr	r3, [pc, #748]	@ (80020c4 <StartDefaultTask+0x394>)
 8001dd6:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
	 freeRTOS_allocator.deallocate = microros_deallocate;
 8001dda:	4bbb      	ldr	r3, [pc, #748]	@ (80020c8 <StartDefaultTask+0x398>)
 8001ddc:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
	 freeRTOS_allocator.reallocate = microros_reallocate;
 8001de0:	4bba      	ldr	r3, [pc, #744]	@ (80020cc <StartDefaultTask+0x39c>)
 8001de2:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
	 freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001de6:	4bba      	ldr	r3, [pc, #744]	@ (80020d0 <StartDefaultTask+0x3a0>)
 8001de8:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294

	 if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001dec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001df0:	4618      	mov	r0, r3
 8001df2:	f00a fe3d 	bl	800ca70 <rcutils_set_default_allocator>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f083 0301 	eor.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <StartDefaultTask+0xdc>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001e02:	f240 214e 	movw	r1, #590	@ 0x24e
 8001e06:	48b3      	ldr	r0, [pc, #716]	@ (80020d4 <StartDefaultTask+0x3a4>)
 8001e08:	f016 fa0c 	bl	8018224 <iprintf>
	  geometry_msgs__msg__Twist sub_cmd_vel_msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8001e0c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001e10:	f5a3 7400 	sub.w	r4, r3, #512	@ 0x200
 8001e14:	463b      	mov	r3, r7
 8001e16:	4618      	mov	r0, r3
 8001e18:	f00a fe48 	bl	800caac <rcutils_get_default_allocator>
 8001e1c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001e20:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8001e24:	461d      	mov	r5, r3
 8001e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2a:	682b      	ldr	r3, [r5, #0]
 8001e2c:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001e2e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001e32:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f00a fd15 	bl	800c868 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "stm32_microros", "", &support);
 8001e3e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001e42:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8001e46:	4aa4      	ldr	r2, [pc, #656]	@ (80020d8 <StartDefaultTask+0x3a8>)
 8001e48:	49a4      	ldr	r1, [pc, #656]	@ (80020dc <StartDefaultTask+0x3ac>)
 8001e4a:	f00a fd57 	bl	800c8fc <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001e4e:	f00b fda1 	bl	800d994 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>
 8001e52:	4602      	mov	r2, r0
 8001e54:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001e58:	f507 7021 	add.w	r0, r7, #644	@ 0x284
 8001e5c:	4ba0      	ldr	r3, [pc, #640]	@ (80020e0 <StartDefaultTask+0x3b0>)
 8001e5e:	f00a fd89 	bl	800c974 <rclc_publisher_init_default>
	    &publisher1,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
	    "lwheel");

	  rclc_publisher_init_default(
 8001e62:	f00b fd97 	bl	800d994 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>
 8001e66:	4602      	mov	r2, r0
 8001e68:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001e6c:	f507 7020 	add.w	r0, r7, #640	@ 0x280
 8001e70:	4b9c      	ldr	r3, [pc, #624]	@ (80020e4 <StartDefaultTask+0x3b4>)
 8001e72:	f00a fd7f 	bl	800c974 <rclc_publisher_init_default>
	  	&publisher2,
	  	&node,
	  	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
	  	"rwheel");

	  rclc_publisher_init_default(
 8001e76:	f00b fc15 	bl	800d6a4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001e80:	f507 701f 	add.w	r0, r7, #636	@ 0x27c
 8001e84:	4b98      	ldr	r3, [pc, #608]	@ (80020e8 <StartDefaultTask+0x3b8>)
 8001e86:	f00a fd75 	bl	800c974 <rclc_publisher_init_default>
	  	ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
	  	"Imu");

	  // create subscriber

	  rclc_subscription_init_default(
 8001e8a:	f008 f905 	bl	800a098 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001e94:	f507 701e 	add.w	r0, r7, #632	@ 0x278
 8001e98:	4b94      	ldr	r3, [pc, #592]	@ (80020ec <StartDefaultTask+0x3bc>)
 8001e9a:	f00a fd9f 	bl	800c9dc <rclc_subscription_init_default>
	  	     &node,
	  	     ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  	     "cmd_vel");

	  // create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001e9e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001ea2:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f00a fa0a 	bl	800c2c0 <rclc_executor_get_zero_initialized_executor>
	  rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001eac:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001eb0:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8001eb4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001eb8:	2202      	movs	r2, #2
 8001eba:	f00a fa0d 	bl	800c2d8 <rclc_executor_init>
	  rclc_executor_add_subscription(&executor, &subscriber_cmd_vel, &sub_cmd_vel_msg, &subscription_cmd_vel_callback, ON_NEW_DATA);
 8001ebe:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8001ec2:	f507 711e 	add.w	r1, r7, #632	@ 0x278
 8001ec6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	4b88      	ldr	r3, [pc, #544]	@ (80020f0 <StartDefaultTask+0x3c0>)
 8001ed0:	f00a fa72 	bl	800c3b8 <rclc_executor_add_subscription>
		// Reading values using IMU

		// Reading 6 elements of 1 byte each
		// x, y, z values occupy 16 bits each, divided into two registers for
		// higher and lower bytes
		uint8_t rec_data[6] = {0,0,0,0,0,0};
 8001ed4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001ed8:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001edc:	4a85      	ldr	r2, [pc, #532]	@ (80020f4 <StartDefaultTask+0x3c4>)
 8001ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee2:	6018      	str	r0, [r3, #0]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	8019      	strh	r1, [r3, #0]
		HAL_I2C_Mem_Read (&hi2c1, MPU_ADDRESS, MPU_REG_ACC_X_H, 1, rec_data, 6, 1000);
 8001ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	2306      	movs	r3, #6
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	223b      	movs	r2, #59	@ 0x3b
 8001efc:	2168      	movs	r1, #104	@ 0x68
 8001efe:	486a      	ldr	r0, [pc, #424]	@ (80020a8 <StartDefaultTask+0x378>)
 8001f00:	f001 ffe6 	bl	8003ed0 <HAL_I2C_Mem_Read>

		// Converting two separate 8-bit values into a single 16-bit value
		int16_t accel_x_raw = (int16_t)(rec_data[0] << 8 | rec_data [1]);
 8001f04:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f08:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f16:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001f1a:	785b      	ldrb	r3, [r3, #1]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6
		int16_t accel_y_raw = (int16_t)(rec_data[2] << 8 | rec_data [3]);
 8001f24:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f28:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001f2c:	789b      	ldrb	r3, [r3, #2]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	b21a      	sxth	r2, r3
 8001f32:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f36:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001f3a:	78db      	ldrb	r3, [r3, #3]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4
		int16_t accel_z_raw = (int16_t)(rec_data[4] << 8 | rec_data [5]);
 8001f44:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f48:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001f4c:	791b      	ldrb	r3, [r3, #4]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f56:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001f5a:	795b      	ldrb	r3, [r3, #5]
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8a7 32b2 	strh.w	r3, [r7, #690]	@ 0x2b2

		// Dividing by 16384 to obtain actual value and storing it in Imu message
		imu_data.linear_acceleration.x = (double) accel_x_raw/16384.0;
 8001f64:	f9b7 32b6 	ldrsh.w	r3, [r7, #694]	@ 0x2b6
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe faf3 	bl	8000554 <__aeabi_i2d>
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	4b61      	ldr	r3, [pc, #388]	@ (80020f8 <StartDefaultTask+0x3c8>)
 8001f74:	f7fe fc82 	bl	800087c <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8001f80:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8001f84:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
		imu_data.linear_acceleration.y = (double) accel_y_raw/16384.0;
 8001f88:	f9b7 32b4 	ldrsh.w	r3, [r7, #692]	@ 0x2b4
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fae1 	bl	8000554 <__aeabi_i2d>
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	4b58      	ldr	r3, [pc, #352]	@ (80020f8 <StartDefaultTask+0x3c8>)
 8001f98:	f7fe fc70 	bl	800087c <__aeabi_ddiv>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8001fa4:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8001fa8:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
		imu_data.linear_acceleration.z = (double) accel_z_raw/16384.0;
 8001fac:	f9b7 32b2 	ldrsh.w	r3, [r7, #690]	@ 0x2b2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe facf 	bl	8000554 <__aeabi_i2d>
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	4b4f      	ldr	r3, [pc, #316]	@ (80020f8 <StartDefaultTask+0x3c8>)
 8001fbc:	f7fe fc5e 	bl	800087c <__aeabi_ddiv>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8001fc8:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8001fcc:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

		// Doing the same for the gyroscope values
		HAL_I2C_Mem_Read (&hi2c1, MPU_ADDRESS, MPU_REG_GYRO_X_H, 1, rec_data, 6, 1000);
 8001fd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd4:	9302      	str	r3, [sp, #8]
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	f107 0320 	add.w	r3, r7, #32
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	2243      	movs	r2, #67	@ 0x43
 8001fe4:	2168      	movs	r1, #104	@ 0x68
 8001fe6:	4830      	ldr	r0, [pc, #192]	@ (80020a8 <StartDefaultTask+0x378>)
 8001fe8:	f001 ff72 	bl	8003ed0 <HAL_I2C_Mem_Read>

		int16_t gyro_x_raw = (int16_t)(rec_data[0] << 8 | rec_data [1]);
 8001fec:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001ff0:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	b21a      	sxth	r2, r3
 8001ffa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001ffe:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	f8a7 32b0 	strh.w	r3, [r7, #688]	@ 0x2b0
		int16_t gyro_y_raw  = (int16_t)(rec_data[2] << 8 | rec_data [3]);
 800200c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002010:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002014:	789b      	ldrb	r3, [r3, #2]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b21a      	sxth	r2, r3
 800201a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800201e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002022:	78db      	ldrb	r3, [r3, #3]
 8002024:	b21b      	sxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	f8a7 32ae 	strh.w	r3, [r7, #686]	@ 0x2ae
		int16_t gyro_z_raw  = (int16_t)(rec_data[4] << 8 | rec_data [5]);
 800202c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002030:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002034:	791b      	ldrb	r3, [r3, #4]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	b21a      	sxth	r2, r3
 800203a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800203e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002042:	795b      	ldrb	r3, [r3, #5]
 8002044:	b21b      	sxth	r3, r3
 8002046:	4313      	orrs	r3, r2
 8002048:	f8a7 32ac 	strh.w	r3, [r7, #684]	@ 0x2ac

		// Dividing by 131.0 to obtain actual values and storing in Imu message
		imu_data.angular_velocity.x = (double) gyro_x_raw/131.0;
 800204c:	f9b7 32b0 	ldrsh.w	r3, [r7, #688]	@ 0x2b0
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa7f 	bl	8000554 <__aeabi_i2d>
 8002056:	a312      	add	r3, pc, #72	@ (adr r3, 80020a0 <StartDefaultTask+0x370>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe fc0e 	bl	800087c <__aeabi_ddiv>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002068:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 800206c:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
		imu_data.angular_velocity.y = (double) gyro_y_raw/131.0;
 8002070:	f9b7 32ae 	ldrsh.w	r3, [r7, #686]	@ 0x2ae
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fa6d 	bl	8000554 <__aeabi_i2d>
 800207a:	a309      	add	r3, pc, #36	@ (adr r3, 80020a0 <StartDefaultTask+0x370>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fbfc 	bl	800087c <__aeabi_ddiv>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 800208c:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8002090:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		imu_data.angular_velocity.z = (double) gyro_z_raw/131.0;
 8002094:	f9b7 32ac 	ldrsh.w	r3, [r7, #684]	@ 0x2ac
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fa5b 	bl	8000554 <__aeabi_i2d>
 800209e:	e02d      	b.n	80020fc <StartDefaultTask+0x3cc>
 80020a0:	00000000 	.word	0x00000000
 80020a4:	40606000 	.word	0x40606000
 80020a8:	20004354 	.word	0x20004354
 80020ac:	0801941c 	.word	0x0801941c
 80020b0:	08002ae5 	.word	0x08002ae5
 80020b4:	08002a7d 	.word	0x08002a7d
 80020b8:	08002a5d 	.word	0x08002a5d
 80020bc:	08002a31 	.word	0x08002a31
 80020c0:	200043f0 	.word	0x200043f0
 80020c4:	080021c1 	.word	0x080021c1
 80020c8:	08002205 	.word	0x08002205
 80020cc:	0800223d 	.word	0x0800223d
 80020d0:	080022a9 	.word	0x080022a9
 80020d4:	0801943c 	.word	0x0801943c
 80020d8:	08019464 	.word	0x08019464
 80020dc:	08019468 	.word	0x08019468
 80020e0:	08019478 	.word	0x08019478
 80020e4:	08019480 	.word	0x08019480
 80020e8:	08019488 	.word	0x08019488
 80020ec:	0801948c 	.word	0x0801948c
 80020f0:	08001421 	.word	0x08001421
 80020f4:	080194b0 	.word	0x080194b0
 80020f8:	40d00000 	.word	0x40d00000
 80020fc:	a32b      	add	r3, pc, #172	@ (adr r3, 80021ac <StartDefaultTask+0x47c>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe fbbb 	bl	800087c <__aeabi_ddiv>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 800210e:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8002112:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

		msg1.data = LeftWheelEncoder;
 8002116:	4b22      	ldr	r3, [pc, #136]	@ (80021a0 <StartDefaultTask+0x470>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b21b      	sxth	r3, r3
 800211c:	f8a7 3274 	strh.w	r3, [r7, #628]	@ 0x274
		msg2.data = RightWheelEncoder;
 8002120:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <StartDefaultTask+0x474>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b21b      	sxth	r3, r3
 8002126:	f8a7 3270 	strh.w	r3, [r7, #624]	@ 0x270

	    rcl_ret_t ret1 = rcl_publish(&publisher1, &msg1, NULL);
 800212a:	f507 711d 	add.w	r1, r7, #628	@ 0x274
 800212e:	f507 7321 	add.w	r3, r7, #644	@ 0x284
 8002132:	2200      	movs	r2, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f009 fd35 	bl	800bba4 <rcl_publish>
 800213a:	f8c7 02a8 	str.w	r0, [r7, #680]	@ 0x2a8
	    rcl_ret_t ret2 = rcl_publish(&publisher2, &msg2, NULL);
 800213e:	f507 711c 	add.w	r1, r7, #624	@ 0x270
 8002142:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002146:	2200      	movs	r2, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f009 fd2b 	bl	800bba4 <rcl_publish>
 800214e:	f8c7 02a4 	str.w	r0, [r7, #676]	@ 0x2a4
	    rcl_ret_t ret3 = rcl_publish(&imu_publisher, &imu_data, NULL);
 8002152:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8002156:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 800215a:	2200      	movs	r2, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f009 fd21 	bl	800bba4 <rcl_publish>
 8002162:	f8c7 02a0 	str.w	r0, [r7, #672]	@ 0x2a0

	    // waits for 1000ns for ros data, theres no data it continues,
	    // if there is data then it executes subscription callback
	    rclc_executor_spin_some(&executor, 1000);
 8002166:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800216a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	4608      	mov	r0, r1
 8002174:	f00a fb40 	bl	800c7f8 <rclc_executor_spin_some>

	    if ((ret1 | ret2 | ret3) != RCL_RET_OK)
 8002178:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 800217c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8002180:	431a      	orrs	r2, r3
 8002182:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8002186:	4313      	orrs	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <StartDefaultTask+0x466>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 800218c:	f240 21b5 	movw	r1, #693	@ 0x2b5
 8002190:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <StartDefaultTask+0x478>)
 8002192:	f016 f847 	bl	8018224 <iprintf>
	    }
	    osDelay(10);
 8002196:	200a      	movs	r0, #10
 8002198:	f005 fab2 	bl	8007700 <osDelay>
	  {
 800219c:	e69a      	b.n	8001ed4 <StartDefaultTask+0x1a4>
 800219e:	bf00      	nop
 80021a0:	200044fc 	.word	0x200044fc
 80021a4:	20004500 	.word	0x20004500
 80021a8:	08019494 	.word	0x08019494
 80021ac:	00000000 	.word	0x00000000
 80021b0:	40606000 	.word	0x40606000

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <Error_Handler+0x8>

080021c0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <microros_allocate+0x3c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <microros_allocate+0x3c>)
 80021d8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <microros_allocate+0x40>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <microros_allocate+0x40>)
 80021e8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe fec6 	bl	8000f7c <pvPortMallocMicroROS>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20004528 	.word	0x20004528
 8002200:	2000452c 	.word	0x2000452c

08002204 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00c      	beq.n	800222e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7fe ffd5 	bl	80011c4 <getBlockSize>
 800221a:	4603      	mov	r3, r0
 800221c:	4a06      	ldr	r2, [pc, #24]	@ (8002238 <microros_deallocate+0x34>)
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	461a      	mov	r2, r3
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <microros_deallocate+0x34>)
 8002226:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe ff6f 	bl	800110c <vPortFreeMicroROS>
  }
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	2000452c 	.word	0x2000452c

0800223c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <microros_reallocate+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4413      	add	r3, r2
 8002252:	461a      	mov	r2, r3
 8002254:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <microros_reallocate+0x64>)
 8002256:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <microros_reallocate+0x68>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4413      	add	r3, r2
 8002262:	461a      	mov	r2, r3
 8002264:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <microros_reallocate+0x68>)
 8002266:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d104      	bne.n	8002278 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800226e:	68b8      	ldr	r0, [r7, #8]
 8002270:	f7fe fe84 	bl	8000f7c <pvPortMallocMicroROS>
 8002274:	4603      	mov	r3, r0
 8002276:	e00e      	b.n	8002296 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7fe ffa3 	bl	80011c4 <getBlockSize>
 800227e:	4603      	mov	r3, r0
 8002280:	4a08      	ldr	r2, [pc, #32]	@ (80022a4 <microros_reallocate+0x68>)
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	461a      	mov	r2, r3
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <microros_reallocate+0x68>)
 800228a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f7fe ffb6 	bl	8001200 <pvPortReallocMicroROS>
 8002294:	4603      	mov	r3, r0
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20004528 	.word	0x20004528
 80022a4:	2000452c 	.word	0x2000452c

080022a8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	4a0c      	ldr	r2, [pc, #48]	@ (80022f0 <microros_zero_allocate+0x48>)
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <microros_zero_allocate+0x48>)
 80022c6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	4a08      	ldr	r2, [pc, #32]	@ (80022f4 <microros_zero_allocate+0x4c>)
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <microros_zero_allocate+0x4c>)
 80022da:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7fe ffbb 	bl	800125a <pvPortCallocMicroROS>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20004528 	.word	0x20004528
 80022f4:	2000452c 	.word	0x2000452c

080022f8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80022f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800230a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800230e:	a320      	add	r3, pc, #128	@ (adr r3, 8002390 <UTILS_NanosecondsToTimespec+0x98>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fe fc6a 	bl	8000bec <__aeabi_ldivmod>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002322:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002326:	a31a      	add	r3, pc, #104	@ (adr r3, 8002390 <UTILS_NanosecondsToTimespec+0x98>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f7fe fc5e 	bl	8000bec <__aeabi_ldivmod>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	da20      	bge.n	800237e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a11      	ldr	r2, [pc, #68]	@ (8002388 <UTILS_NanosecondsToTimespec+0x90>)
 8002342:	fb82 1203 	smull	r1, r2, r2, r3
 8002346:	1712      	asrs	r2, r2, #28
 8002348:	17db      	asrs	r3, r3, #31
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	6979      	ldr	r1, [r7, #20]
 8002358:	17c8      	asrs	r0, r1, #31
 800235a:	460c      	mov	r4, r1
 800235c:	4605      	mov	r5, r0
 800235e:	ebb2 0804 	subs.w	r8, r2, r4
 8002362:	eb63 0905 	sbc.w	r9, r3, r5
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	4906      	ldr	r1, [pc, #24]	@ (800238c <UTILS_NanosecondsToTimespec+0x94>)
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	441a      	add	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]
    }
}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002388:	44b82fa1 	.word	0x44b82fa1
 800238c:	3b9aca00 	.word	0x3b9aca00
 8002390:	3b9aca00 	.word	0x3b9aca00
 8002394:	00000000 	.word	0x00000000

08002398 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800239c:	b08e      	sub	sp, #56	@ 0x38
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80023a2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80023a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80023a8:	2300      	movs	r3, #0
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80023ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023be:	4618      	mov	r0, r3
 80023c0:	f006 fc6a 	bl	8008c98 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80023c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c6:	17da      	asrs	r2, r3, #31
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	61fa      	str	r2, [r7, #28]
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	69b9      	ldr	r1, [r7, #24]
 80023d6:	000b      	movs	r3, r1
 80023d8:	2200      	movs	r2, #0
 80023da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80023de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e0:	2200      	movs	r2, #0
 80023e2:	461c      	mov	r4, r3
 80023e4:	4615      	mov	r5, r2
 80023e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023ea:	1911      	adds	r1, r2, r4
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	416b      	adcs	r3, r5
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80023fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	f04f 0400 	mov.w	r4, #0
 8002406:	f04f 0500 	mov.w	r5, #0
 800240a:	015d      	lsls	r5, r3, #5
 800240c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002410:	0154      	lsls	r4, r2, #5
 8002412:	4622      	mov	r2, r4
 8002414:	462b      	mov	r3, r5
 8002416:	ebb2 0800 	subs.w	r8, r2, r0
 800241a:	eb63 0901 	sbc.w	r9, r3, r1
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800242a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800242e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002432:	4690      	mov	r8, r2
 8002434:	4699      	mov	r9, r3
 8002436:	eb18 0a00 	adds.w	sl, r8, r0
 800243a:	eb49 0b01 	adc.w	fp, r9, r1
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800244a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800244e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002452:	ebb2 040a 	subs.w	r4, r2, sl
 8002456:	603c      	str	r4, [r7, #0]
 8002458:	eb63 030b 	sbc.w	r3, r3, fp
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002462:	4623      	mov	r3, r4
 8002464:	181b      	adds	r3, r3, r0
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	462b      	mov	r3, r5
 800246a:	eb41 0303 	adc.w	r3, r1, r3
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002476:	f7ff ff3f 	bl	80022f8 <UTILS_NanosecondsToTimespec>

    return 0;
 800247a:	2300      	movs	r3, #0
 800247c:	4618      	mov	r0, r3
 800247e:	3738      	adds	r7, #56	@ 0x38
 8002480:	46bd      	mov	sp, r7
 8002482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_MspInit+0x54>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	4a11      	ldr	r2, [pc, #68]	@ (80024dc <HAL_MspInit+0x54>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800249c:	6453      	str	r3, [r2, #68]	@ 0x44
 800249e:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_MspInit+0x54>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_MspInit+0x54>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_MspInit+0x54>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <HAL_MspInit+0x54>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	210f      	movs	r1, #15
 80024ca:	f06f 0001 	mvn.w	r0, #1
 80024ce:	f000 fcd4 	bl	8002e7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800

080024e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a19      	ldr	r2, [pc, #100]	@ (8002564 <HAL_I2C_MspInit+0x84>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d12b      	bne.n	800255a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <HAL_I2C_MspInit+0x88>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	4a17      	ldr	r2, [pc, #92]	@ (8002568 <HAL_I2C_MspInit+0x88>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6313      	str	r3, [r2, #48]	@ 0x30
 8002512:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <HAL_I2C_MspInit+0x88>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800251e:	23c0      	movs	r3, #192	@ 0xc0
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002522:	2312      	movs	r3, #18
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800252e:	2304      	movs	r3, #4
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	480c      	ldr	r0, [pc, #48]	@ (800256c <HAL_I2C_MspInit+0x8c>)
 800253a:	f001 f8d7 	bl	80036ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_I2C_MspInit+0x88>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	4a08      	ldr	r2, [pc, #32]	@ (8002568 <HAL_I2C_MspInit+0x88>)
 8002548:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800254c:	6413      	str	r3, [r2, #64]	@ 0x40
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_I2C_MspInit+0x88>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800255a:	bf00      	nop
 800255c:	3728      	adds	r7, #40	@ 0x28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40005400 	.word	0x40005400
 8002568:	40023800 	.word	0x40023800
 800256c:	40020400 	.word	0x40020400

08002570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0b      	ldr	r2, [pc, #44]	@ (80025ac <HAL_TIM_Base_MspInit+0x3c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10d      	bne.n	800259e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_TIM_Base_MspInit+0x40>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	4a09      	ldr	r2, [pc, #36]	@ (80025b0 <HAL_TIM_Base_MspInit+0x40>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	6413      	str	r3, [r2, #64]	@ 0x40
 8002592:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <HAL_TIM_Base_MspInit+0x40>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	@ 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a21      	ldr	r2, [pc, #132]	@ (8002658 <HAL_TIM_MspPostInit+0xa4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d13b      	bne.n	800264e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	4b20      	ldr	r3, [pc, #128]	@ (800265c <HAL_TIM_MspPostInit+0xa8>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <HAL_TIM_MspPostInit+0xa8>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e6:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <HAL_TIM_MspPostInit+0xa8>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b19      	ldr	r3, [pc, #100]	@ (800265c <HAL_TIM_MspPostInit+0xa8>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	4a18      	ldr	r2, [pc, #96]	@ (800265c <HAL_TIM_MspPostInit+0xa8>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6313      	str	r3, [r2, #48]	@ 0x30
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <HAL_TIM_MspPostInit+0xa8>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800260e:	23c0      	movs	r3, #192	@ 0xc0
 8002610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800261e:	2302      	movs	r3, #2
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	480d      	ldr	r0, [pc, #52]	@ (8002660 <HAL_TIM_MspPostInit+0xac>)
 800262a:	f001 f85f 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800262e:	2303      	movs	r3, #3
 8002630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800263e:	2302      	movs	r3, #2
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	4806      	ldr	r0, [pc, #24]	@ (8002664 <HAL_TIM_MspPostInit+0xb0>)
 800264a:	f001 f84f 	bl	80036ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	@ 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40000400 	.word	0x40000400
 800265c:	40023800 	.word	0x40023800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400

08002668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a4d      	ldr	r2, [pc, #308]	@ (80027bc <HAL_UART_MspInit+0x154>)
 8002686:	4293      	cmp	r3, r2
 8002688:	f040 8093 	bne.w	80027b2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	4b4b      	ldr	r3, [pc, #300]	@ (80027c0 <HAL_UART_MspInit+0x158>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	4a4a      	ldr	r2, [pc, #296]	@ (80027c0 <HAL_UART_MspInit+0x158>)
 8002696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800269a:	6413      	str	r3, [r2, #64]	@ 0x40
 800269c:	4b48      	ldr	r3, [pc, #288]	@ (80027c0 <HAL_UART_MspInit+0x158>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	4b44      	ldr	r3, [pc, #272]	@ (80027c0 <HAL_UART_MspInit+0x158>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b0:	4a43      	ldr	r2, [pc, #268]	@ (80027c0 <HAL_UART_MspInit+0x158>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b8:	4b41      	ldr	r3, [pc, #260]	@ (80027c0 <HAL_UART_MspInit+0x158>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026c4:	230c      	movs	r3, #12
 80026c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d4:	2307      	movs	r3, #7
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	4839      	ldr	r0, [pc, #228]	@ (80027c4 <HAL_UART_MspInit+0x15c>)
 80026e0:	f001 f804 	bl	80036ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80026e4:	4b38      	ldr	r3, [pc, #224]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 80026e6:	4a39      	ldr	r2, [pc, #228]	@ (80027cc <HAL_UART_MspInit+0x164>)
 80026e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80026ea:	4b37      	ldr	r3, [pc, #220]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 80026ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026f2:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f8:	4b33      	ldr	r3, [pc, #204]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026fe:	4b32      	ldr	r3, [pc, #200]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 8002700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002704:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002706:	4b30      	ldr	r3, [pc, #192]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800270c:	4b2e      	ldr	r3, [pc, #184]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002712:	4b2d      	ldr	r3, [pc, #180]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 8002714:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002718:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800271a:	4b2b      	ldr	r3, [pc, #172]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 800271c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002720:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002722:	4b29      	ldr	r3, [pc, #164]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 8002724:	2200      	movs	r2, #0
 8002726:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002728:	4827      	ldr	r0, [pc, #156]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 800272a:	f000 fbdd 	bl	8002ee8 <HAL_DMA_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002734:	f7ff fd3e 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a23      	ldr	r2, [pc, #140]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 800273c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800273e:	4a22      	ldr	r2, [pc, #136]	@ (80027c8 <HAL_UART_MspInit+0x160>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002744:	4b22      	ldr	r3, [pc, #136]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 8002746:	4a23      	ldr	r2, [pc, #140]	@ (80027d4 <HAL_UART_MspInit+0x16c>)
 8002748:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800274a:	4b21      	ldr	r3, [pc, #132]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 800274c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002750:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002752:	4b1f      	ldr	r3, [pc, #124]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 8002754:	2240      	movs	r2, #64	@ 0x40
 8002756:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002758:	4b1d      	ldr	r3, [pc, #116]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800275e:	4b1c      	ldr	r3, [pc, #112]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 8002760:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002764:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002766:	4b1a      	ldr	r3, [pc, #104]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800276c:	4b18      	ldr	r3, [pc, #96]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 800276e:	2200      	movs	r2, #0
 8002770:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002772:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 8002774:	2200      	movs	r2, #0
 8002776:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002778:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 800277a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800277e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002780:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 8002782:	2200      	movs	r2, #0
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002786:	4812      	ldr	r0, [pc, #72]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 8002788:	f000 fbae 	bl	8002ee8 <HAL_DMA_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002792:	f7ff fd0f 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 800279a:	639a      	str	r2, [r3, #56]	@ 0x38
 800279c:	4a0c      	ldr	r2, [pc, #48]	@ (80027d0 <HAL_UART_MspInit+0x168>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2105      	movs	r1, #5
 80027a6:	2026      	movs	r0, #38	@ 0x26
 80027a8:	f000 fb67 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027ac:	2026      	movs	r0, #38	@ 0x26
 80027ae:	f000 fb80 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	@ 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40004400 	.word	0x40004400
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	20004438 	.word	0x20004438
 80027cc:	40026088 	.word	0x40026088
 80027d0:	20004498 	.word	0x20004498
 80027d4:	400260a0 	.word	0x400260a0

080027d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <NMI_Handler+0x4>

080027e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <HardFault_Handler+0x4>

080027e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <MemManage_Handler+0x4>

080027f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <BusFault_Handler+0x4>

080027f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <UsageFault_Handler+0x4>

08002800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002812:	f000 fa37 	bl	8002c84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002816:	f006 fbc3 	bl	8008fa0 <xTaskGetSchedulerState>
 800281a:	4603      	mov	r3, r0
 800281c:	2b01      	cmp	r3, #1
 800281e:	d001      	beq.n	8002824 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002820:	f007 f9ba 	bl	8009b98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}

08002828 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800282c:	2001      	movs	r0, #1
 800282e:	f001 f8f9 	bl	8003a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}

08002836 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800283a:	2002      	movs	r0, #2
 800283c:	f001 f8f2 	bl	8003a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002848:	4802      	ldr	r0, [pc, #8]	@ (8002854 <DMA1_Stream5_IRQHandler+0x10>)
 800284a:	f000 fce5 	bl	8003218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20004438 	.word	0x20004438

08002858 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800285c:	4802      	ldr	r0, [pc, #8]	@ (8002868 <DMA1_Stream6_IRQHandler+0x10>)
 800285e:	f000 fcdb 	bl	8003218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20004498 	.word	0x20004498

0800286c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002870:	4802      	ldr	r0, [pc, #8]	@ (800287c <USART2_IRQHandler+0x10>)
 8002872:	f003 fd37 	bl	80062e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200043f0 	.word	0x200043f0

08002880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return 1;
 8002884:	2301      	movs	r3, #1
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_kill>:

int _kill(int pid, int sig)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800289a:	f015 ff35 	bl	8018708 <__errno>
 800289e:	4603      	mov	r3, r0
 80028a0:	2216      	movs	r2, #22
 80028a2:	601a      	str	r2, [r3, #0]
  return -1;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_exit>:

void _exit (int status)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ffe7 	bl	8002890 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028c2:	bf00      	nop
 80028c4:	e7fd      	b.n	80028c2 <_exit+0x12>

080028c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e00a      	b.n	80028ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d8:	f3af 8000 	nop.w
 80028dc:	4601      	mov	r1, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	60ba      	str	r2, [r7, #8]
 80028e4:	b2ca      	uxtb	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	3301      	adds	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	dbf0      	blt.n	80028d8 <_read+0x12>
  }

  return len;
 80028f6:	687b      	ldr	r3, [r7, #4]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	e009      	b.n	8002926 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	60ba      	str	r2, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	dbf1      	blt.n	8002912 <_write+0x12>
  }
  return len;
 800292e:	687b      	ldr	r3, [r7, #4]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_close>:

int _close(int file)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002960:	605a      	str	r2, [r3, #4]
  return 0;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_isatty>:

int _isatty(int file)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002978:	2301      	movs	r3, #1
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a8:	4a14      	ldr	r2, [pc, #80]	@ (80029fc <_sbrk+0x5c>)
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <_sbrk+0x60>)
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b4:	4b13      	ldr	r3, [pc, #76]	@ (8002a04 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029bc:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <_sbrk+0x64>)
 80029be:	4a12      	ldr	r2, [pc, #72]	@ (8002a08 <_sbrk+0x68>)
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029c2:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <_sbrk+0x64>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d207      	bcs.n	80029e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d0:	f015 fe9a 	bl	8018708 <__errno>
 80029d4:	4603      	mov	r3, r0
 80029d6:	220c      	movs	r2, #12
 80029d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029de:	e009      	b.n	80029f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e6:	4b07      	ldr	r3, [pc, #28]	@ (8002a04 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a05      	ldr	r2, [pc, #20]	@ (8002a04 <_sbrk+0x64>)
 80029f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20020000 	.word	0x20020000
 8002a00:	00000400 	.word	0x00000400
 8002a04:	20004534 	.word	0x20004534
 8002a08:	2000e360 	.word	0x2000e360

08002a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <SystemInit+0x20>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a16:	4a05      	ldr	r2, [pc, #20]	@ (8002a2c <SystemInit+0x20>)
 8002a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a3e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002a40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a44:	4904      	ldr	r1, [pc, #16]	@ (8002a58 <cubemx_transport_open+0x28>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f003 fba8 	bl	800619c <HAL_UART_Receive_DMA>
    return true;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20004538 	.word	0x20004538

08002a5c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a6a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f003 fbba 	bl	80061e6 <HAL_UART_DMAStop>
    return true;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a90:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d11c      	bne.n	8002ad8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f003 fb08 	bl	80060bc <HAL_UART_Transmit_DMA>
 8002aac:	4603      	mov	r3, r0
 8002aae:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002ab0:	e002      	b.n	8002ab8 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f004 fe24 	bl	8007700 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <cubemx_transport_write+0x4e>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d1f3      	bne.n	8002ab2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <cubemx_transport_write+0x58>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	e002      	b.n	8002ada <cubemx_transport_write+0x5e>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002ad8:	2300      	movs	r3, #0
    }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002af8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002afe:	b672      	cpsid	i
}
 8002b00:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <cubemx_transport_read+0x9c>)
 8002b10:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b12:	b662      	cpsie	i
}
 8002b14:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f004 fdef 	bl	8007700 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002b22:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <cubemx_transport_read+0xa0>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <cubemx_transport_read+0x9c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d103      	bne.n	8002b36 <cubemx_transport_read+0x52>
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	dbe3      	blt.n	8002afe <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002b3a:	e011      	b.n	8002b60 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <cubemx_transport_read+0xa0>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	440b      	add	r3, r1
 8002b46:	4910      	ldr	r1, [pc, #64]	@ (8002b88 <cubemx_transport_read+0xa4>)
 8002b48:	5c8a      	ldrb	r2, [r1, r2]
 8002b4a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <cubemx_transport_read+0xa0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b56:	4a0b      	ldr	r2, [pc, #44]	@ (8002b84 <cubemx_transport_read+0xa0>)
 8002b58:	6013      	str	r3, [r2, #0]
        wrote++;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002b60:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <cubemx_transport_read+0xa0>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <cubemx_transport_read+0x9c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d003      	beq.n	8002b74 <cubemx_transport_read+0x90>
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d3e3      	bcc.n	8002b3c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002b74:	69bb      	ldr	r3, [r7, #24]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20004d3c 	.word	0x20004d3c
 8002b84:	20004d38 	.word	0x20004d38
 8002b88:	20004538 	.word	0x20004538

08002b8c <Reset_Handler>:
 8002b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bc4 <LoopFillZerobss+0xe>
 8002b90:	f7ff ff3c 	bl	8002a0c <SystemInit>
 8002b94:	480c      	ldr	r0, [pc, #48]	@ (8002bc8 <LoopFillZerobss+0x12>)
 8002b96:	490d      	ldr	r1, [pc, #52]	@ (8002bcc <LoopFillZerobss+0x16>)
 8002b98:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd0 <LoopFillZerobss+0x1a>)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e002      	b.n	8002ba4 <LoopCopyDataInit>

08002b9e <CopyDataInit>:
 8002b9e:	58d4      	ldr	r4, [r2, r3]
 8002ba0:	50c4      	str	r4, [r0, r3]
 8002ba2:	3304      	adds	r3, #4

08002ba4 <LoopCopyDataInit>:
 8002ba4:	18c4      	adds	r4, r0, r3
 8002ba6:	428c      	cmp	r4, r1
 8002ba8:	d3f9      	bcc.n	8002b9e <CopyDataInit>
 8002baa:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <LoopFillZerobss+0x1e>)
 8002bac:	4c0a      	ldr	r4, [pc, #40]	@ (8002bd8 <LoopFillZerobss+0x22>)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e001      	b.n	8002bb6 <LoopFillZerobss>

08002bb2 <FillZerobss>:
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	3204      	adds	r2, #4

08002bb6 <LoopFillZerobss>:
 8002bb6:	42a2      	cmp	r2, r4
 8002bb8:	d3fb      	bcc.n	8002bb2 <FillZerobss>
 8002bba:	f015 fdab 	bl	8018714 <__libc_init_array>
 8002bbe:	f7fe fe5f 	bl	8001880 <main>
 8002bc2:	4770      	bx	lr
 8002bc4:	20020000 	.word	0x20020000
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	20000720 	.word	0x20000720
 8002bd0:	0801a75c 	.word	0x0801a75c
 8002bd4:	20000720 	.word	0x20000720
 8002bd8:	2000e35c 	.word	0x2000e35c

08002bdc <ADC_IRQHandler>:
 8002bdc:	e7fe      	b.n	8002bdc <ADC_IRQHandler>
	...

08002be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <HAL_Init+0x40>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c20 <HAL_Init+0x40>)
 8002bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <HAL_Init+0x40>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <HAL_Init+0x40>)
 8002bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bfc:	4b08      	ldr	r3, [pc, #32]	@ (8002c20 <HAL_Init+0x40>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <HAL_Init+0x40>)
 8002c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c08:	2003      	movs	r0, #3
 8002c0a:	f000 f92b 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f000 f808 	bl	8002c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c14:	f7ff fc38 	bl	8002488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00

08002c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c2c:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_InitTick+0x54>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <HAL_InitTick+0x58>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4619      	mov	r1, r3
 8002c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f943 	bl	8002ece <HAL_SYSTICK_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00e      	b.n	8002c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b0f      	cmp	r3, #15
 8002c56:	d80a      	bhi.n	8002c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c60:	f000 f90b 	bl	8002e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c64:	4a06      	ldr	r2, [pc, #24]	@ (8002c80 <HAL_InitTick+0x5c>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e000      	b.n	8002c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	2000000c 	.word	0x2000000c
 8002c80:	20000008 	.word	0x20000008

08002c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c88:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_IncTick+0x20>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_IncTick+0x24>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <HAL_IncTick+0x24>)
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	2000000c 	.word	0x2000000c
 8002ca8:	20004d40 	.word	0x20004d40

08002cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <HAL_GetTick+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20004d40 	.word	0x20004d40

08002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	@ (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	@ (8002d60 <__NVIC_EnableIRQ+0x38>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	@ (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	@ (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	@ 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	@ 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e44:	f7ff ff8e 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff29 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff3e 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff8e 	bl	8002db8 <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5d 	bl	8002d64 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff31 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffa2 	bl	8002e20 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff feda 	bl	8002cac <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e099      	b.n	8003038 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f24:	e00f      	b.n	8002f46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f26:	f7ff fec1 	bl	8002cac <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d908      	bls.n	8002f46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e078      	b.n	8003038 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e8      	bne.n	8002f26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4b38      	ldr	r3, [pc, #224]	@ (8003040 <HAL_DMA_Init+0x158>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0307 	bic.w	r3, r3, #7
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d117      	bne.n	800300a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fb01 	bl	80035f4 <DMA_CheckFifoParam>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2240      	movs	r2, #64	@ 0x40
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003006:	2301      	movs	r3, #1
 8003008:	e016      	b.n	8003038 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fab8 	bl	8003588 <DMA_CalcBaseAndBitshift>
 8003018:	4603      	mov	r3, r0
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	223f      	movs	r2, #63	@ 0x3f
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	f010803f 	.word	0xf010803f

08003044 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_DMA_Start_IT+0x26>
 8003066:	2302      	movs	r3, #2
 8003068:	e040      	b.n	80030ec <HAL_DMA_Start_IT+0xa8>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d12f      	bne.n	80030de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fa4a 	bl	800352c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309c:	223f      	movs	r2, #63	@ 0x3f
 800309e:	409a      	lsls	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0216 	orr.w	r2, r2, #22
 80030b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0208 	orr.w	r2, r2, #8
 80030ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e005      	b.n	80030ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
 80030e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003100:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003102:	f7ff fdd3 	bl	8002cac <HAL_GetTick>
 8003106:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d008      	beq.n	8003126 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2280      	movs	r2, #128	@ 0x80
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e052      	b.n	80031cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0216 	bic.w	r2, r2, #22
 8003134:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003144:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_DMA_Abort+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0208 	bic.w	r2, r2, #8
 8003164:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003176:	e013      	b.n	80031a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003178:	f7ff fd98 	bl	8002cac <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b05      	cmp	r3, #5
 8003184:	d90c      	bls.n	80031a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2203      	movs	r2, #3
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e015      	b.n	80031cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e4      	bne.n	8003178 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b2:	223f      	movs	r2, #63	@ 0x3f
 80031b4:	409a      	lsls	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d004      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2280      	movs	r2, #128	@ 0x80
 80031ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e00c      	b.n	800320c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2205      	movs	r2, #5
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003224:	4b8e      	ldr	r3, [pc, #568]	@ (8003460 <HAL_DMA_IRQHandler+0x248>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a8e      	ldr	r2, [pc, #568]	@ (8003464 <HAL_DMA_IRQHandler+0x24c>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0a9b      	lsrs	r3, r3, #10
 8003230:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003236:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003242:	2208      	movs	r2, #8
 8003244:	409a      	lsls	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01a      	beq.n	8003284 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0204 	bic.w	r2, r2, #4
 800326a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003270:	2208      	movs	r2, #8
 8003272:	409a      	lsls	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003288:	2201      	movs	r2, #1
 800328a:	409a      	lsls	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d012      	beq.n	80032ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a6:	2201      	movs	r2, #1
 80032a8:	409a      	lsls	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b2:	f043 0202 	orr.w	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032be:	2204      	movs	r2, #4
 80032c0:	409a      	lsls	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d012      	beq.n	80032f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	2204      	movs	r2, #4
 80032de:	409a      	lsls	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e8:	f043 0204 	orr.w	r2, r3, #4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f4:	2210      	movs	r2, #16
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d043      	beq.n	8003388 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d03c      	beq.n	8003388 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003312:	2210      	movs	r2, #16
 8003314:	409a      	lsls	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d018      	beq.n	800335a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d108      	bne.n	8003348 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d024      	beq.n	8003388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
 8003346:	e01f      	b.n	8003388 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
 8003358:	e016      	b.n	8003388 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0208 	bic.w	r2, r2, #8
 8003376:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	2220      	movs	r2, #32
 800338e:	409a      	lsls	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 808f 	beq.w	80034b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8087 	beq.w	80034b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ae:	2220      	movs	r2, #32
 80033b0:	409a      	lsls	r2, r3
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b05      	cmp	r3, #5
 80033c0:	d136      	bne.n	8003430 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0216 	bic.w	r2, r2, #22
 80033d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <HAL_DMA_IRQHandler+0x1da>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0208 	bic.w	r2, r2, #8
 8003400:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003406:	223f      	movs	r2, #63	@ 0x3f
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003422:	2b00      	cmp	r3, #0
 8003424:	d07e      	beq.n	8003524 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
        }
        return;
 800342e:	e079      	b.n	8003524 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01d      	beq.n	800347a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003450:	2b00      	cmp	r3, #0
 8003452:	d031      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
 800345c:	e02c      	b.n	80034b8 <HAL_DMA_IRQHandler+0x2a0>
 800345e:	bf00      	nop
 8003460:	20000004 	.word	0x20000004
 8003464:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d023      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
 8003478:	e01e      	b.n	80034b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10f      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0210 	bic.w	r2, r2, #16
 8003496:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d032      	beq.n	8003526 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d022      	beq.n	8003512 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2205      	movs	r2, #5
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3301      	adds	r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d307      	bcc.n	8003500 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f2      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x2cc>
 80034fe:	e000      	b.n	8003502 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003500:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
 8003522:	e000      	b.n	8003526 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003524:	bf00      	nop
    }
  }
}
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003548:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b40      	cmp	r3, #64	@ 0x40
 8003558:	d108      	bne.n	800356c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800356a:	e007      	b.n	800357c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	3b10      	subs	r3, #16
 8003598:	4a14      	ldr	r2, [pc, #80]	@ (80035ec <DMA_CalcBaseAndBitshift+0x64>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035a2:	4a13      	ldr	r2, [pc, #76]	@ (80035f0 <DMA_CalcBaseAndBitshift+0x68>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d909      	bls.n	80035ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035be:	f023 0303 	bic.w	r3, r3, #3
 80035c2:	1d1a      	adds	r2, r3, #4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80035c8:	e007      	b.n	80035da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	aaaaaaab 	.word	0xaaaaaaab
 80035f0:	0801952c 	.word	0x0801952c

080035f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d11f      	bne.n	800364e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d856      	bhi.n	80036c2 <DMA_CheckFifoParam+0xce>
 8003614:	a201      	add	r2, pc, #4	@ (adr r2, 800361c <DMA_CheckFifoParam+0x28>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	0800362d 	.word	0x0800362d
 8003620:	0800363f 	.word	0x0800363f
 8003624:	0800362d 	.word	0x0800362d
 8003628:	080036c3 	.word	0x080036c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d046      	beq.n	80036c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363c:	e043      	b.n	80036c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003646:	d140      	bne.n	80036ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800364c:	e03d      	b.n	80036ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003656:	d121      	bne.n	800369c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b03      	cmp	r3, #3
 800365c:	d837      	bhi.n	80036ce <DMA_CheckFifoParam+0xda>
 800365e:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <DMA_CheckFifoParam+0x70>)
 8003660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003664:	08003675 	.word	0x08003675
 8003668:	0800367b 	.word	0x0800367b
 800366c:	08003675 	.word	0x08003675
 8003670:	0800368d 	.word	0x0800368d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e030      	b.n	80036dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d025      	beq.n	80036d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800368a:	e022      	b.n	80036d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003690:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003694:	d11f      	bne.n	80036d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800369a:	e01c      	b.n	80036d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d903      	bls.n	80036aa <DMA_CheckFifoParam+0xb6>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d003      	beq.n	80036b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036a8:	e018      	b.n	80036dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      break;
 80036ae:	e015      	b.n	80036dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00e      	beq.n	80036da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      break;
 80036c0:	e00b      	b.n	80036da <DMA_CheckFifoParam+0xe6>
      break;
 80036c2:	bf00      	nop
 80036c4:	e00a      	b.n	80036dc <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
 80036c8:	e008      	b.n	80036dc <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
 80036cc:	e006      	b.n	80036dc <DMA_CheckFifoParam+0xe8>
      break;
 80036ce:	bf00      	nop
 80036d0:	e004      	b.n	80036dc <DMA_CheckFifoParam+0xe8>
      break;
 80036d2:	bf00      	nop
 80036d4:	e002      	b.n	80036dc <DMA_CheckFifoParam+0xe8>
      break;   
 80036d6:	bf00      	nop
 80036d8:	e000      	b.n	80036dc <DMA_CheckFifoParam+0xe8>
      break;
 80036da:	bf00      	nop
    }
  } 
  
  return status; 
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	@ 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	e159      	b.n	80039bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003708:	2201      	movs	r2, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	429a      	cmp	r2, r3
 8003722:	f040 8148 	bne.w	80039b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d005      	beq.n	800373e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373a:	2b02      	cmp	r3, #2
 800373c:	d130      	bne.n	80037a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003774:	2201      	movs	r2, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 0201 	and.w	r2, r3, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d017      	beq.n	80037dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d123      	bne.n	8003830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	08da      	lsrs	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3208      	adds	r2, #8
 80037f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	220f      	movs	r2, #15
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	08da      	lsrs	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3208      	adds	r2, #8
 800382a:	69b9      	ldr	r1, [r7, #24]
 800382c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2203      	movs	r2, #3
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0203 	and.w	r2, r3, #3
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80a2 	beq.w	80039b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	4b57      	ldr	r3, [pc, #348]	@ (80039d4 <HAL_GPIO_Init+0x2e8>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	4a56      	ldr	r2, [pc, #344]	@ (80039d4 <HAL_GPIO_Init+0x2e8>)
 800387c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003880:	6453      	str	r3, [r2, #68]	@ 0x44
 8003882:	4b54      	ldr	r3, [pc, #336]	@ (80039d4 <HAL_GPIO_Init+0x2e8>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800388e:	4a52      	ldr	r2, [pc, #328]	@ (80039d8 <HAL_GPIO_Init+0x2ec>)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	3302      	adds	r3, #2
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	220f      	movs	r2, #15
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a49      	ldr	r2, [pc, #292]	@ (80039dc <HAL_GPIO_Init+0x2f0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d019      	beq.n	80038ee <HAL_GPIO_Init+0x202>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a48      	ldr	r2, [pc, #288]	@ (80039e0 <HAL_GPIO_Init+0x2f4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_GPIO_Init+0x1fe>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a47      	ldr	r2, [pc, #284]	@ (80039e4 <HAL_GPIO_Init+0x2f8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00d      	beq.n	80038e6 <HAL_GPIO_Init+0x1fa>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a46      	ldr	r2, [pc, #280]	@ (80039e8 <HAL_GPIO_Init+0x2fc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <HAL_GPIO_Init+0x1f6>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a45      	ldr	r2, [pc, #276]	@ (80039ec <HAL_GPIO_Init+0x300>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <HAL_GPIO_Init+0x1f2>
 80038da:	2304      	movs	r3, #4
 80038dc:	e008      	b.n	80038f0 <HAL_GPIO_Init+0x204>
 80038de:	2307      	movs	r3, #7
 80038e0:	e006      	b.n	80038f0 <HAL_GPIO_Init+0x204>
 80038e2:	2303      	movs	r3, #3
 80038e4:	e004      	b.n	80038f0 <HAL_GPIO_Init+0x204>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e002      	b.n	80038f0 <HAL_GPIO_Init+0x204>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_GPIO_Init+0x204>
 80038ee:	2300      	movs	r3, #0
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	f002 0203 	and.w	r2, r2, #3
 80038f6:	0092      	lsls	r2, r2, #2
 80038f8:	4093      	lsls	r3, r2
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003900:	4935      	ldr	r1, [pc, #212]	@ (80039d8 <HAL_GPIO_Init+0x2ec>)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	3302      	adds	r3, #2
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800390e:	4b38      	ldr	r3, [pc, #224]	@ (80039f0 <HAL_GPIO_Init+0x304>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003932:	4a2f      	ldr	r2, [pc, #188]	@ (80039f0 <HAL_GPIO_Init+0x304>)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003938:	4b2d      	ldr	r3, [pc, #180]	@ (80039f0 <HAL_GPIO_Init+0x304>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800395c:	4a24      	ldr	r2, [pc, #144]	@ (80039f0 <HAL_GPIO_Init+0x304>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003962:	4b23      	ldr	r3, [pc, #140]	@ (80039f0 <HAL_GPIO_Init+0x304>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003986:	4a1a      	ldr	r2, [pc, #104]	@ (80039f0 <HAL_GPIO_Init+0x304>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800398c:	4b18      	ldr	r3, [pc, #96]	@ (80039f0 <HAL_GPIO_Init+0x304>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039b0:	4a0f      	ldr	r2, [pc, #60]	@ (80039f0 <HAL_GPIO_Init+0x304>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3301      	adds	r3, #1
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b0f      	cmp	r3, #15
 80039c0:	f67f aea2 	bls.w	8003708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3724      	adds	r7, #36	@ 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40013800 	.word	0x40013800
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40020400 	.word	0x40020400
 80039e4:	40020800 	.word	0x40020800
 80039e8:	40020c00 	.word	0x40020c00
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40013c00 	.word	0x40013c00

080039f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	887b      	ldrh	r3, [r7, #2]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e001      	b.n	8003a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a2e:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a3a:	4a05      	ldr	r2, [pc, #20]	@ (8003a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd fed0 	bl	80017e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40013c00 	.word	0x40013c00

08003a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e12b      	b.n	8003cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fe fd30 	bl	80024e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	@ 0x24
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f001 fc60 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a81      	ldr	r2, [pc, #516]	@ (8003cc8 <HAL_I2C_Init+0x274>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d807      	bhi.n	8003ad8 <HAL_I2C_Init+0x84>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a80      	ldr	r2, [pc, #512]	@ (8003ccc <HAL_I2C_Init+0x278>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	bf94      	ite	ls
 8003ad0:	2301      	movls	r3, #1
 8003ad2:	2300      	movhi	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e006      	b.n	8003ae6 <HAL_I2C_Init+0x92>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a7d      	ldr	r2, [pc, #500]	@ (8003cd0 <HAL_I2C_Init+0x27c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bf94      	ite	ls
 8003ae0:	2301      	movls	r3, #1
 8003ae2:	2300      	movhi	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0e7      	b.n	8003cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4a78      	ldr	r2, [pc, #480]	@ (8003cd4 <HAL_I2C_Init+0x280>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0c9b      	lsrs	r3, r3, #18
 8003af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a6a      	ldr	r2, [pc, #424]	@ (8003cc8 <HAL_I2C_Init+0x274>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d802      	bhi.n	8003b28 <HAL_I2C_Init+0xd4>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	3301      	adds	r3, #1
 8003b26:	e009      	b.n	8003b3c <HAL_I2C_Init+0xe8>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	4a69      	ldr	r2, [pc, #420]	@ (8003cd8 <HAL_I2C_Init+0x284>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	495c      	ldr	r1, [pc, #368]	@ (8003cc8 <HAL_I2C_Init+0x274>)
 8003b58:	428b      	cmp	r3, r1
 8003b5a:	d819      	bhi.n	8003b90 <HAL_I2C_Init+0x13c>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e59      	subs	r1, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b6a:	1c59      	adds	r1, r3, #1
 8003b6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b70:	400b      	ands	r3, r1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_I2C_Init+0x138>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1e59      	subs	r1, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8a:	e051      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e04f      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <HAL_I2C_Init+0x168>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e012      	b.n	8003be2 <HAL_I2C_Init+0x18e>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	0099      	lsls	r1, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Init+0x196>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e022      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10e      	bne.n	8003c10 <HAL_I2C_Init+0x1bc>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1e58      	subs	r0, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	440b      	add	r3, r1
 8003c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c0e:	e00f      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e58      	subs	r0, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	0099      	lsls	r1, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6809      	ldr	r1, [r1, #0]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6911      	ldr	r1, [r2, #16]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68d2      	ldr	r2, [r2, #12]
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	000186a0 	.word	0x000186a0
 8003ccc:	001e847f 	.word	0x001e847f
 8003cd0:	003d08ff 	.word	0x003d08ff
 8003cd4:	431bde83 	.word	0x431bde83
 8003cd8:	10624dd3 	.word	0x10624dd3

08003cdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	817b      	strh	r3, [r7, #10]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	813b      	strh	r3, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf6:	f7fe ffd9 	bl	8002cac <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	f040 80d9 	bne.w	8003ebc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2319      	movs	r3, #25
 8003d10:	2201      	movs	r2, #1
 8003d12:	496d      	ldr	r1, [pc, #436]	@ (8003ec8 <HAL_I2C_Mem_Write+0x1ec>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fc8b 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
 8003d22:	e0cc      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2C_Mem_Write+0x56>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0c5      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d007      	beq.n	8003d58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2221      	movs	r2, #33	@ 0x21
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2240      	movs	r2, #64	@ 0x40
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a3a      	ldr	r2, [r7, #32]
 8003d82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a4d      	ldr	r2, [pc, #308]	@ (8003ecc <HAL_I2C_Mem_Write+0x1f0>)
 8003d98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d9a:	88f8      	ldrh	r0, [r7, #6]
 8003d9c:	893a      	ldrh	r2, [r7, #8]
 8003d9e:	8979      	ldrh	r1, [r7, #10]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	4603      	mov	r3, r0
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fac2 	bl	8004334 <I2C_RequestMemoryWrite>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d052      	beq.n	8003e5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e081      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fd50 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d107      	bne.n	8003de2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e06b      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d11b      	bne.n	8003e5c <HAL_I2C_Mem_Write+0x180>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d017      	beq.n	8003e5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1aa      	bne.n	8003dba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fd43 	bl	80048f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00d      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d107      	bne.n	8003e8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e016      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	00100002 	.word	0x00100002
 8003ecc:	ffff0000 	.word	0xffff0000

08003ed0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08c      	sub	sp, #48	@ 0x30
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	4608      	mov	r0, r1
 8003eda:	4611      	mov	r1, r2
 8003edc:	461a      	mov	r2, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	817b      	strh	r3, [r7, #10]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	813b      	strh	r3, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eea:	f7fe fedf 	bl	8002cac <HAL_GetTick>
 8003eee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	f040 8214 	bne.w	8004326 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	2319      	movs	r3, #25
 8003f04:	2201      	movs	r2, #1
 8003f06:	497b      	ldr	r1, [pc, #492]	@ (80040f4 <HAL_I2C_Mem_Read+0x224>)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fb91 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
 8003f16:	e207      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_I2C_Mem_Read+0x56>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e200      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d007      	beq.n	8003f4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2222      	movs	r2, #34	@ 0x22
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2240      	movs	r2, #64	@ 0x40
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80040f8 <HAL_I2C_Mem_Read+0x228>)
 8003f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f8e:	88f8      	ldrh	r0, [r7, #6]
 8003f90:	893a      	ldrh	r2, [r7, #8]
 8003f92:	8979      	ldrh	r1, [r7, #10]
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fa5e 	bl	8004460 <I2C_RequestMemoryRead>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1bc      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d113      	bne.n	8003fde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	623b      	str	r3, [r7, #32]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	623b      	str	r3, [r7, #32]
 8003fca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e190      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d11b      	bne.n	800401e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e170      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004022:	2b02      	cmp	r3, #2
 8004024:	d11b      	bne.n	800405e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004034:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	e150      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004074:	e144      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	2b03      	cmp	r3, #3
 800407c:	f200 80f1 	bhi.w	8004262 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004084:	2b01      	cmp	r3, #1
 8004086:	d123      	bne.n	80040d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fc79 	bl	8004984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e145      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040ce:	e117      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d14e      	bne.n	8004176 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040de:	2200      	movs	r2, #0
 80040e0:	4906      	ldr	r1, [pc, #24]	@ (80040fc <HAL_I2C_Mem_Read+0x22c>)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 faa4 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e11a      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
 80040f2:	bf00      	nop
 80040f4:	00100002 	.word	0x00100002
 80040f8:	ffff0000 	.word	0xffff0000
 80040fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800410e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004174:	e0c4      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417c:	2200      	movs	r2, #0
 800417e:	496c      	ldr	r1, [pc, #432]	@ (8004330 <HAL_I2C_Mem_Read+0x460>)
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fa55 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0cb      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d8:	2200      	movs	r2, #0
 80041da:	4955      	ldr	r1, [pc, #340]	@ (8004330 <HAL_I2C_Mem_Read+0x460>)
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fa27 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e09d      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004260:	e04e      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004264:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 fb8c 	bl	8004984 <I2C_WaitOnRXNEFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e058      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d124      	bne.n	8004300 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d107      	bne.n	80042ce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042cc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	f47f aeb6 	bne.w	8004076 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e000      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
  }
}
 8004328:	4618      	mov	r0, r3
 800432a:	3728      	adds	r7, #40	@ 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	00010004 	.word	0x00010004

08004334 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800435c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2200      	movs	r2, #0
 8004366:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f960 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004384:	d103      	bne.n	800438e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800438c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e05f      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004392:	897b      	ldrh	r3, [r7, #10]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	492d      	ldr	r1, [pc, #180]	@ (800445c <I2C_RequestMemoryWrite+0x128>)
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f9bb 	bl	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e04c      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d0:	6a39      	ldr	r1, [r7, #32]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fa46 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d107      	bne.n	80043f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e02b      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]
 800440a:	e021      	b.n	8004450 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800440c:	893b      	ldrh	r3, [r7, #8]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	b29b      	uxth	r3, r3
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441c:	6a39      	ldr	r1, [r7, #32]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fa20 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	2b04      	cmp	r3, #4
 8004430:	d107      	bne.n	8004442 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e005      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004446:	893b      	ldrh	r3, [r7, #8]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	00010002 	.word	0x00010002

08004460 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	4608      	mov	r0, r1
 800446a:	4611      	mov	r1, r2
 800446c:	461a      	mov	r2, r3
 800446e:	4603      	mov	r3, r0
 8004470:	817b      	strh	r3, [r7, #10]
 8004472:	460b      	mov	r3, r1
 8004474:	813b      	strh	r3, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004488:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004498:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f8c2 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c0:	d103      	bne.n	80044ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0aa      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ce:	897b      	ldrh	r3, [r7, #10]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	6a3a      	ldr	r2, [r7, #32]
 80044e2:	4952      	ldr	r1, [pc, #328]	@ (800462c <I2C_RequestMemoryRead+0x1cc>)
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f91d 	bl	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e097      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450c:	6a39      	ldr	r1, [r7, #32]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f9a8 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	2b04      	cmp	r3, #4
 8004520:	d107      	bne.n	8004532 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004530:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e076      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d105      	bne.n	8004548 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800453c:	893b      	ldrh	r3, [r7, #8]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	611a      	str	r2, [r3, #16]
 8004546:	e021      	b.n	800458c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004548:	893b      	ldrh	r3, [r7, #8]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	b29b      	uxth	r3, r3
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004558:	6a39      	ldr	r1, [r7, #32]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f982 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	2b04      	cmp	r3, #4
 800456c:	d107      	bne.n	800457e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800457c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e050      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004582:	893b      	ldrh	r3, [r7, #8]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800458e:	6a39      	ldr	r1, [r7, #32]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f967 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d107      	bne.n	80045b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e035      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f82b 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ee:	d103      	bne.n	80045f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e013      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045fc:	897b      	ldrh	r3, [r7, #10]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	6a3a      	ldr	r2, [r7, #32]
 8004610:	4906      	ldr	r1, [pc, #24]	@ (800462c <I2C_RequestMemoryRead+0x1cc>)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f886 	bl	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	00010002 	.word	0x00010002

08004630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004640:	e048      	b.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004648:	d044      	beq.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464a:	f7fe fb2f 	bl	8002cac <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d302      	bcc.n	8004660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d139      	bne.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d10d      	bne.n	8004686 <I2C_WaitOnFlagUntilTimeout+0x56>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	43da      	mvns	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	e00c      	b.n	80046a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	43da      	mvns	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4013      	ands	r3, r2
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d116      	bne.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e023      	b.n	800471c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d10d      	bne.n	80046fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	43da      	mvns	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4013      	ands	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	e00c      	b.n	8004714 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	43da      	mvns	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	d093      	beq.n	8004642 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004732:	e071      	b.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004742:	d123      	bne.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004752:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800475c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	f043 0204 	orr.w	r2, r3, #4
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e067      	b.n	800485c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004792:	d041      	beq.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004794:	f7fe fa8a 	bl	8002cac <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d136      	bne.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d10c      	bne.n	80047ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	43da      	mvns	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4013      	ands	r3, r2
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e00b      	b.n	80047e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	43da      	mvns	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004804:	f043 0220 	orr.w	r2, r3, #32
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e021      	b.n	800485c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	0c1b      	lsrs	r3, r3, #16
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10c      	bne.n	800483c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	43da      	mvns	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4013      	ands	r3, r2
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e00b      	b.n	8004854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	43da      	mvns	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	bf14      	ite	ne
 800484e:	2301      	movne	r3, #1
 8004850:	2300      	moveq	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f af6d 	bne.w	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004870:	e034      	b.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f8e3 	bl	8004a3e <I2C_IsAcknowledgeFailed>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e034      	b.n	80048ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004888:	d028      	beq.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7fe fa0f 	bl	8002cac <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11d      	bne.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048aa:	2b80      	cmp	r3, #128	@ 0x80
 80048ac:	d016      	beq.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e007      	b.n	80048ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e6:	2b80      	cmp	r3, #128	@ 0x80
 80048e8:	d1c3      	bne.n	8004872 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004900:	e034      	b.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f89b 	bl	8004a3e <I2C_IsAcknowledgeFailed>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e034      	b.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004918:	d028      	beq.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491a:	f7fe f9c7 	bl	8002cac <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	429a      	cmp	r2, r3
 8004928:	d302      	bcc.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11d      	bne.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b04      	cmp	r3, #4
 800493c:	d016      	beq.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e007      	b.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b04      	cmp	r3, #4
 8004978:	d1c3      	bne.n	8004902 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004990:	e049      	b.n	8004a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b10      	cmp	r3, #16
 800499e:	d119      	bne.n	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e030      	b.n	8004a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d4:	f7fe f96a 	bl	8002cac <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d11d      	bne.n	8004a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d016      	beq.n	8004a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e007      	b.n	8004a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a30:	2b40      	cmp	r3, #64	@ 0x40
 8004a32:	d1ae      	bne.n	8004992 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a54:	d11b      	bne.n	8004a8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f043 0204 	orr.w	r2, r3, #4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e267      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d075      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aba:	4b88      	ldr	r3, [pc, #544]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac6:	4b85      	ldr	r3, [pc, #532]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d112      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad2:	4b82      	ldr	r3, [pc, #520]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05b      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d157      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e242      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b00:	d106      	bne.n	8004b10 <HAL_RCC_OscConfig+0x74>
 8004b02:	4b76      	ldr	r3, [pc, #472]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a75      	ldr	r2, [pc, #468]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e01d      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x98>
 8004b1a:	4b70      	ldr	r3, [pc, #448]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a6f      	ldr	r2, [pc, #444]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b6d      	ldr	r3, [pc, #436]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a6c      	ldr	r2, [pc, #432]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b34:	4b69      	ldr	r3, [pc, #420]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a68      	ldr	r2, [pc, #416]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b66      	ldr	r3, [pc, #408]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a65      	ldr	r2, [pc, #404]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fe f8aa 	bl	8002cac <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fe f8a6 	bl	8002cac <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	@ 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e207      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fe f896 	bl	8002cac <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fe f892 	bl	8002cac <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	@ 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e1f3      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	4b51      	ldr	r3, [pc, #324]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d063      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bbe:	4b47      	ldr	r3, [pc, #284]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d11c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bca:	4b44      	ldr	r3, [pc, #272]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d116      	bne.n	8004c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd6:	4b41      	ldr	r3, [pc, #260]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_RCC_OscConfig+0x152>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e1c7      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	4b3b      	ldr	r3, [pc, #236]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4937      	ldr	r1, [pc, #220]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	e03a      	b.n	8004c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0c:	4b34      	ldr	r3, [pc, #208]	@ (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7fe f84b 	bl	8002cac <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c1a:	f7fe f847 	bl	8002cac <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1a8      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c38:	4b28      	ldr	r3, [pc, #160]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4925      	ldr	r1, [pc, #148]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	600b      	str	r3, [r1, #0]
 8004c4c:	e015      	b.n	8004c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fe f82a 	bl	8002cac <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5c:	f7fe f826 	bl	8002cac <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e187      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d036      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ce4 <HAL_RCC_OscConfig+0x248>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c94:	f7fe f80a 	bl	8002cac <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7fe f806 	bl	8002cac <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e167      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x200>
 8004cba:	e01b      	b.n	8004cf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbc:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <HAL_RCC_OscConfig+0x248>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc2:	f7fd fff3 	bl	8002cac <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc8:	e00e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cca:	f7fd ffef 	bl	8002cac <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d907      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e150      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	42470000 	.word	0x42470000
 8004ce4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	4b88      	ldr	r3, [pc, #544]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ea      	bne.n	8004cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8097 	beq.w	8004e30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d06:	4b81      	ldr	r3, [pc, #516]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	4b7d      	ldr	r3, [pc, #500]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d22:	4b7a      	ldr	r3, [pc, #488]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d32:	4b77      	ldr	r3, [pc, #476]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d118      	bne.n	8004d70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3e:	4b74      	ldr	r3, [pc, #464]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a73      	ldr	r2, [pc, #460]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4a:	f7fd ffaf 	bl	8002cac <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d52:	f7fd ffab 	bl	8002cac <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e10c      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	4b6a      	ldr	r3, [pc, #424]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x2ea>
 8004d78:	4b64      	ldr	r3, [pc, #400]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7c:	4a63      	ldr	r2, [pc, #396]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d84:	e01c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x324>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x30c>
 8004d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	4a5e      	ldr	r2, [pc, #376]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d94:	f043 0304 	orr.w	r3, r3, #4
 8004d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d9a:	4b5c      	ldr	r3, [pc, #368]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0x324>
 8004da8:	4b58      	ldr	r3, [pc, #352]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	4a57      	ldr	r2, [pc, #348]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db4:	4b55      	ldr	r3, [pc, #340]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db8:	4a54      	ldr	r2, [pc, #336]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004dba:	f023 0304 	bic.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d015      	beq.n	8004df4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fd ff70 	bl	8002cac <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd0:	f7fd ff6c 	bl	8002cac <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0cb      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	4b49      	ldr	r3, [pc, #292]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0ee      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x334>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df4:	f7fd ff5a 	bl	8002cac <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fd ff56 	bl	8002cac <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0b5      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e12:	4b3e      	ldr	r3, [pc, #248]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1ee      	bne.n	8004dfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d105      	bne.n	8004e30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e24:	4b39      	ldr	r3, [pc, #228]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	4a38      	ldr	r2, [pc, #224]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80a1 	beq.w	8004f7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e3a:	4b34      	ldr	r3, [pc, #208]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d05c      	beq.n	8004f00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d141      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4e:	4b31      	ldr	r3, [pc, #196]	@ (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fd ff2a 	bl	8002cac <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fd ff26 	bl	8002cac <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e087      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	019b      	lsls	r3, r3, #6
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	3b01      	subs	r3, #1
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9c:	061b      	lsls	r3, r3, #24
 8004e9e:	491b      	ldr	r1, [pc, #108]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fd feff 	bl	8002cac <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fd fefb 	bl	8002cac <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e05c      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec4:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x416>
 8004ed0:	e054      	b.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b10      	ldr	r3, [pc, #64]	@ (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fd fee8 	bl	8002cac <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fd fee4 	bl	8002cac <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e045      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef2:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x444>
 8004efe:	e03d      	b.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e038      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40007000 	.word	0x40007000
 8004f14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f18:	4b1b      	ldr	r3, [pc, #108]	@ (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d028      	beq.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d121      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d11a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f48:	4013      	ands	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d111      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	3b01      	subs	r3, #1
 8004f62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800

08004f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0cc      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b68      	ldr	r3, [pc, #416]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d90c      	bls.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b65      	ldr	r3, [pc, #404]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b63      	ldr	r3, [pc, #396]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0b8      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe0:	4b59      	ldr	r3, [pc, #356]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a58      	ldr	r2, [pc, #352]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff8:	4b53      	ldr	r3, [pc, #332]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b50      	ldr	r3, [pc, #320]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	494d      	ldr	r1, [pc, #308]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d044      	beq.n	80050ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	4b47      	ldr	r3, [pc, #284]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d119      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d003      	beq.n	800504a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005046:	2b03      	cmp	r3, #3
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504a:	4b3f      	ldr	r3, [pc, #252]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e06f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505a:	4b3b      	ldr	r3, [pc, #236]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e067      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800506a:	4b37      	ldr	r3, [pc, #220]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4934      	ldr	r1, [pc, #208]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800507c:	f7fd fe16 	bl	8002cac <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005082:	e00a      	b.n	800509a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005084:	f7fd fe12 	bl	8002cac <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e04f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	4b2b      	ldr	r3, [pc, #172]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 020c 	and.w	r2, r3, #12
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1eb      	bne.n	8005084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ac:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d20c      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b22      	ldr	r3, [pc, #136]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b20      	ldr	r3, [pc, #128]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e032      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e0:	4b19      	ldr	r3, [pc, #100]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4916      	ldr	r1, [pc, #88]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050fe:	4b12      	ldr	r3, [pc, #72]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	490e      	ldr	r1, [pc, #56]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005112:	f000 f821 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8005116:	4602      	mov	r2, r0
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	490a      	ldr	r1, [pc, #40]	@ (800514c <HAL_RCC_ClockConfig+0x1c0>)
 8005124:	5ccb      	ldrb	r3, [r1, r3]
 8005126:	fa22 f303 	lsr.w	r3, r2, r3
 800512a:	4a09      	ldr	r2, [pc, #36]	@ (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800512e:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fd fd76 	bl	8002c24 <HAL_InitTick>

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023c00 	.word	0x40023c00
 8005148:	40023800 	.word	0x40023800
 800514c:	08019514 	.word	0x08019514
 8005150:	20000004 	.word	0x20000004
 8005154:	20000008 	.word	0x20000008

08005158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b094      	sub	sp, #80	@ 0x50
 800515e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	647b      	str	r3, [r7, #68]	@ 0x44
 8005164:	2300      	movs	r3, #0
 8005166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005168:	2300      	movs	r3, #0
 800516a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005170:	4b79      	ldr	r3, [pc, #484]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b08      	cmp	r3, #8
 800517a:	d00d      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0x40>
 800517c:	2b08      	cmp	r3, #8
 800517e:	f200 80e1 	bhi.w	8005344 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x34>
 8005186:	2b04      	cmp	r3, #4
 8005188:	d003      	beq.n	8005192 <HAL_RCC_GetSysClockFreq+0x3a>
 800518a:	e0db      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800518c:	4b73      	ldr	r3, [pc, #460]	@ (800535c <HAL_RCC_GetSysClockFreq+0x204>)
 800518e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005190:	e0db      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005192:	4b73      	ldr	r3, [pc, #460]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x208>)
 8005194:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005196:	e0d8      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005198:	4b6f      	ldr	r3, [pc, #444]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d063      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	099b      	lsrs	r3, r3, #6
 80051b4:	2200      	movs	r2, #0
 80051b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051c2:	2300      	movs	r3, #0
 80051c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051ca:	4622      	mov	r2, r4
 80051cc:	462b      	mov	r3, r5
 80051ce:	f04f 0000 	mov.w	r0, #0
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	0159      	lsls	r1, r3, #5
 80051d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051dc:	0150      	lsls	r0, r2, #5
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4621      	mov	r1, r4
 80051e4:	1a51      	subs	r1, r2, r1
 80051e6:	6139      	str	r1, [r7, #16]
 80051e8:	4629      	mov	r1, r5
 80051ea:	eb63 0301 	sbc.w	r3, r3, r1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051fc:	4659      	mov	r1, fp
 80051fe:	018b      	lsls	r3, r1, #6
 8005200:	4651      	mov	r1, sl
 8005202:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005206:	4651      	mov	r1, sl
 8005208:	018a      	lsls	r2, r1, #6
 800520a:	4651      	mov	r1, sl
 800520c:	ebb2 0801 	subs.w	r8, r2, r1
 8005210:	4659      	mov	r1, fp
 8005212:	eb63 0901 	sbc.w	r9, r3, r1
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800522a:	4690      	mov	r8, r2
 800522c:	4699      	mov	r9, r3
 800522e:	4623      	mov	r3, r4
 8005230:	eb18 0303 	adds.w	r3, r8, r3
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	462b      	mov	r3, r5
 8005238:	eb49 0303 	adc.w	r3, r9, r3
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800524a:	4629      	mov	r1, r5
 800524c:	024b      	lsls	r3, r1, #9
 800524e:	4621      	mov	r1, r4
 8005250:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005254:	4621      	mov	r1, r4
 8005256:	024a      	lsls	r2, r1, #9
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800525e:	2200      	movs	r2, #0
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005262:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005264:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005268:	f7fb fd10 	bl	8000c8c <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005274:	e058      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005276:	4b38      	ldr	r3, [pc, #224]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	2200      	movs	r2, #0
 800527e:	4618      	mov	r0, r3
 8005280:	4611      	mov	r1, r2
 8005282:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005286:	623b      	str	r3, [r7, #32]
 8005288:	2300      	movs	r3, #0
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
 800528c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005290:	4642      	mov	r2, r8
 8005292:	464b      	mov	r3, r9
 8005294:	f04f 0000 	mov.w	r0, #0
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	0159      	lsls	r1, r3, #5
 800529e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a2:	0150      	lsls	r0, r2, #5
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4641      	mov	r1, r8
 80052aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80052ae:	4649      	mov	r1, r9
 80052b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052c8:	ebb2 040a 	subs.w	r4, r2, sl
 80052cc:	eb63 050b 	sbc.w	r5, r3, fp
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	00eb      	lsls	r3, r5, #3
 80052da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052de:	00e2      	lsls	r2, r4, #3
 80052e0:	4614      	mov	r4, r2
 80052e2:	461d      	mov	r5, r3
 80052e4:	4643      	mov	r3, r8
 80052e6:	18e3      	adds	r3, r4, r3
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	464b      	mov	r3, r9
 80052ec:	eb45 0303 	adc.w	r3, r5, r3
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052fe:	4629      	mov	r1, r5
 8005300:	028b      	lsls	r3, r1, #10
 8005302:	4621      	mov	r1, r4
 8005304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005308:	4621      	mov	r1, r4
 800530a:	028a      	lsls	r2, r1, #10
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005312:	2200      	movs	r2, #0
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	61fa      	str	r2, [r7, #28]
 8005318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800531c:	f7fb fcb6 	bl	8000c8c <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4613      	mov	r3, r2
 8005326:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005328:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	3301      	adds	r3, #1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005338:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800533a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005342:	e002      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <HAL_RCC_GetSysClockFreq+0x204>)
 8005346:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800534a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800534c:	4618      	mov	r0, r3
 800534e:	3750      	adds	r7, #80	@ 0x50
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005356:	bf00      	nop
 8005358:	40023800 	.word	0x40023800
 800535c:	00f42400 	.word	0x00f42400
 8005360:	007a1200 	.word	0x007a1200

08005364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005368:	4b03      	ldr	r3, [pc, #12]	@ (8005378 <HAL_RCC_GetHCLKFreq+0x14>)
 800536a:	681b      	ldr	r3, [r3, #0]
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000004 	.word	0x20000004

0800537c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005380:	f7ff fff0 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	@ (800539c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0a9b      	lsrs	r3, r3, #10
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	@ (80053a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	08019524 	.word	0x08019524

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053a8:	f7ff ffdc 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0b5b      	lsrs	r3, r3, #13
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	@ (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	08019524 	.word	0x08019524

080053cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e041      	b.n	8005462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fd f8bc 	bl	8002570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3304      	adds	r3, #4
 8005408:	4619      	mov	r1, r3
 800540a:	4610      	mov	r0, r2
 800540c:	f000 fac0 	bl	8005990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e041      	b.n	8005500 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f839 	bl	8005508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f000 fa71 	bl	8005990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <HAL_TIM_PWM_Start+0x24>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e022      	b.n	8005586 <HAL_TIM_PWM_Start+0x6a>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d109      	bne.n	800555a <HAL_TIM_PWM_Start+0x3e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b01      	cmp	r3, #1
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	e015      	b.n	8005586 <HAL_TIM_PWM_Start+0x6a>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d109      	bne.n	8005574 <HAL_TIM_PWM_Start+0x58>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e008      	b.n	8005586 <HAL_TIM_PWM_Start+0x6a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e068      	b.n	8005660 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <HAL_TIM_PWM_Start+0x82>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800559c:	e013      	b.n	80055c6 <HAL_TIM_PWM_Start+0xaa>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PWM_Start+0x92>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055ac:	e00b      	b.n	80055c6 <HAL_TIM_PWM_Start+0xaa>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start+0xa2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055bc:	e003      	b.n	80055c6 <HAL_TIM_PWM_Start+0xaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fc90 	bl	8005ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a23      	ldr	r2, [pc, #140]	@ (8005668 <HAL_TIM_PWM_Start+0x14c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d107      	bne.n	80055ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005668 <HAL_TIM_PWM_Start+0x14c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_TIM_PWM_Start+0x10e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005600:	d013      	beq.n	800562a <HAL_TIM_PWM_Start+0x10e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a19      	ldr	r2, [pc, #100]	@ (800566c <HAL_TIM_PWM_Start+0x150>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_TIM_PWM_Start+0x10e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a17      	ldr	r2, [pc, #92]	@ (8005670 <HAL_TIM_PWM_Start+0x154>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_TIM_PWM_Start+0x10e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a16      	ldr	r2, [pc, #88]	@ (8005674 <HAL_TIM_PWM_Start+0x158>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIM_PWM_Start+0x10e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a14      	ldr	r2, [pc, #80]	@ (8005678 <HAL_TIM_PWM_Start+0x15c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d111      	bne.n	800564e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d010      	beq.n	800565e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564c:	e007      	b.n	800565e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40010000 	.word	0x40010000
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40014000 	.word	0x40014000

0800567c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005696:	2302      	movs	r3, #2
 8005698:	e0ae      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	f200 809f 	bhi.w	80057e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056aa:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056e5 	.word	0x080056e5
 80056b4:	080057e9 	.word	0x080057e9
 80056b8:	080057e9 	.word	0x080057e9
 80056bc:	080057e9 	.word	0x080057e9
 80056c0:	08005725 	.word	0x08005725
 80056c4:	080057e9 	.word	0x080057e9
 80056c8:	080057e9 	.word	0x080057e9
 80056cc:	080057e9 	.word	0x080057e9
 80056d0:	08005767 	.word	0x08005767
 80056d4:	080057e9 	.word	0x080057e9
 80056d8:	080057e9 	.word	0x080057e9
 80056dc:	080057e9 	.word	0x080057e9
 80056e0:	080057a7 	.word	0x080057a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 f9dc 	bl	8005aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0208 	orr.w	r2, r2, #8
 80056fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0204 	bic.w	r2, r2, #4
 800570e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6999      	ldr	r1, [r3, #24]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	619a      	str	r2, [r3, #24]
      break;
 8005722:	e064      	b.n	80057ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fa22 	bl	8005b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800573e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800574e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6999      	ldr	r1, [r3, #24]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	021a      	lsls	r2, r3, #8
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	619a      	str	r2, [r3, #24]
      break;
 8005764:	e043      	b.n	80057ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fa6d 	bl	8005c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0208 	orr.w	r2, r2, #8
 8005780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0204 	bic.w	r2, r2, #4
 8005790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69d9      	ldr	r1, [r3, #28]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	61da      	str	r2, [r3, #28]
      break;
 80057a4:	e023      	b.n	80057ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fab7 	bl	8005d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69d9      	ldr	r1, [r3, #28]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	021a      	lsls	r2, r3, #8
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	61da      	str	r2, [r3, #28]
      break;
 80057e6:	e002      	b.n	80057ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	75fb      	strb	r3, [r7, #23]
      break;
 80057ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_TIM_ConfigClockSource+0x1c>
 8005818:	2302      	movs	r3, #2
 800581a:	e0b4      	b.n	8005986 <HAL_TIM_ConfigClockSource+0x186>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800583a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005854:	d03e      	beq.n	80058d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585a:	f200 8087 	bhi.w	800596c <HAL_TIM_ConfigClockSource+0x16c>
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005862:	f000 8086 	beq.w	8005972 <HAL_TIM_ConfigClockSource+0x172>
 8005866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586a:	d87f      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x16c>
 800586c:	2b70      	cmp	r3, #112	@ 0x70
 800586e:	d01a      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005870:	2b70      	cmp	r3, #112	@ 0x70
 8005872:	d87b      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b60      	cmp	r3, #96	@ 0x60
 8005876:	d050      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x11a>
 8005878:	2b60      	cmp	r3, #96	@ 0x60
 800587a:	d877      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b50      	cmp	r3, #80	@ 0x50
 800587e:	d03c      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0xfa>
 8005880:	2b50      	cmp	r3, #80	@ 0x50
 8005882:	d873      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b40      	cmp	r3, #64	@ 0x40
 8005886:	d058      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x13a>
 8005888:	2b40      	cmp	r3, #64	@ 0x40
 800588a:	d86f      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b30      	cmp	r3, #48	@ 0x30
 800588e:	d064      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x15a>
 8005890:	2b30      	cmp	r3, #48	@ 0x30
 8005892:	d86b      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b20      	cmp	r3, #32
 8005896:	d060      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x15a>
 8005898:	2b20      	cmp	r3, #32
 800589a:	d867      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d05c      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x15a>
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d05a      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x15a>
 80058a4:	e062      	b.n	800596c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058b6:	f000 fafd 	bl	8005eb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	609a      	str	r2, [r3, #8]
      break;
 80058d2:	e04f      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058e4:	f000 fae6 	bl	8005eb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058f6:	609a      	str	r2, [r3, #8]
      break;
 80058f8:	e03c      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005906:	461a      	mov	r2, r3
 8005908:	f000 fa5a 	bl	8005dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2150      	movs	r1, #80	@ 0x50
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fab3 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 8005918:	e02c      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005926:	461a      	mov	r2, r3
 8005928:	f000 fa79 	bl	8005e1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2160      	movs	r1, #96	@ 0x60
 8005932:	4618      	mov	r0, r3
 8005934:	f000 faa3 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 8005938:	e01c      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	461a      	mov	r2, r3
 8005948:	f000 fa3a 	bl	8005dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2140      	movs	r1, #64	@ 0x40
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fa93 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 8005958:	e00c      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f000 fa8a 	bl	8005e7e <TIM_ITRx_SetConfig>
      break;
 800596a:	e003      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      break;
 8005970:	e000      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005984:	7bfb      	ldrb	r3, [r7, #15]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3a      	ldr	r2, [pc, #232]	@ (8005a8c <TIM_Base_SetConfig+0xfc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00f      	beq.n	80059c8 <TIM_Base_SetConfig+0x38>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ae:	d00b      	beq.n	80059c8 <TIM_Base_SetConfig+0x38>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a37      	ldr	r2, [pc, #220]	@ (8005a90 <TIM_Base_SetConfig+0x100>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d007      	beq.n	80059c8 <TIM_Base_SetConfig+0x38>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a36      	ldr	r2, [pc, #216]	@ (8005a94 <TIM_Base_SetConfig+0x104>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_Base_SetConfig+0x38>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a35      	ldr	r2, [pc, #212]	@ (8005a98 <TIM_Base_SetConfig+0x108>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d108      	bne.n	80059da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2b      	ldr	r2, [pc, #172]	@ (8005a8c <TIM_Base_SetConfig+0xfc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01b      	beq.n	8005a1a <TIM_Base_SetConfig+0x8a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e8:	d017      	beq.n	8005a1a <TIM_Base_SetConfig+0x8a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a28      	ldr	r2, [pc, #160]	@ (8005a90 <TIM_Base_SetConfig+0x100>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <TIM_Base_SetConfig+0x8a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a27      	ldr	r2, [pc, #156]	@ (8005a94 <TIM_Base_SetConfig+0x104>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00f      	beq.n	8005a1a <TIM_Base_SetConfig+0x8a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a26      	ldr	r2, [pc, #152]	@ (8005a98 <TIM_Base_SetConfig+0x108>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00b      	beq.n	8005a1a <TIM_Base_SetConfig+0x8a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a25      	ldr	r2, [pc, #148]	@ (8005a9c <TIM_Base_SetConfig+0x10c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <TIM_Base_SetConfig+0x8a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a24      	ldr	r2, [pc, #144]	@ (8005aa0 <TIM_Base_SetConfig+0x110>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_Base_SetConfig+0x8a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a23      	ldr	r2, [pc, #140]	@ (8005aa4 <TIM_Base_SetConfig+0x114>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d108      	bne.n	8005a2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a0e      	ldr	r2, [pc, #56]	@ (8005a8c <TIM_Base_SetConfig+0xfc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d103      	bne.n	8005a60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f023 0201 	bic.w	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	611a      	str	r2, [r3, #16]
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800

08005aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f023 0201 	bic.w	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0303 	bic.w	r3, r3, #3
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 0302 	bic.w	r3, r3, #2
 8005af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b70 <TIM_OC1_SetConfig+0xc8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d10c      	bne.n	8005b1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0308 	bic.w	r3, r3, #8
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f023 0304 	bic.w	r3, r3, #4
 8005b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a13      	ldr	r2, [pc, #76]	@ (8005b70 <TIM_OC1_SetConfig+0xc8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d111      	bne.n	8005b4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	40010000 	.word	0x40010000

08005b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f023 0210 	bic.w	r2, r3, #16
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0320 	bic.w	r3, r3, #32
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	@ (8005c48 <TIM_OC2_SetConfig+0xd4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10d      	bne.n	8005bf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a15      	ldr	r2, [pc, #84]	@ (8005c48 <TIM_OC2_SetConfig+0xd4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d113      	bne.n	8005c20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000

08005c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d1c <TIM_OC3_SetConfig+0xd0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d10d      	bne.n	8005cc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a14      	ldr	r2, [pc, #80]	@ (8005d1c <TIM_OC3_SetConfig+0xd0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d113      	bne.n	8005cf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	621a      	str	r2, [r3, #32]
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	40010000 	.word	0x40010000

08005d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	031b      	lsls	r3, r3, #12
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a10      	ldr	r2, [pc, #64]	@ (8005dbc <TIM_OC4_SetConfig+0x9c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d109      	bne.n	8005d94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	019b      	lsls	r3, r3, #6
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40010000 	.word	0x40010000

08005dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f023 0201 	bic.w	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f023 030a 	bic.w	r3, r3, #10
 8005dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f023 0210 	bic.w	r2, r3, #16
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	031b      	lsls	r3, r3, #12
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f043 0307 	orr.w	r3, r3, #7
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	609a      	str	r2, [r3, #8]
}
 8005ea8:	bf00      	nop
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	021a      	lsls	r2, r3, #8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	609a      	str	r2, [r3, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2201      	movs	r2, #1
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	43db      	mvns	r3, r3
 8005f16:	401a      	ands	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e050      	b.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1c      	ldr	r2, [pc, #112]	@ (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d018      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa4:	d013      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a18      	ldr	r2, [pc, #96]	@ (800600c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00e      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a16      	ldr	r2, [pc, #88]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d009      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a15      	ldr	r2, [pc, #84]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a13      	ldr	r2, [pc, #76]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10c      	bne.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40010000 	.word	0x40010000
 800600c:	40000400 	.word	0x40000400
 8006010:	40000800 	.word	0x40000800
 8006014:	40000c00 	.word	0x40000c00
 8006018:	40014000 	.word	0x40014000

0800601c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e042      	b.n	80060b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fc fb10 	bl	8002668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2224      	movs	r2, #36	@ 0x24
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800605e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 ffc9 	bl	8006ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695a      	ldr	r2, [r3, #20]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08c      	sub	sp, #48	@ 0x30
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	4613      	mov	r3, r2
 80060c8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d156      	bne.n	8006184 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_UART_Transmit_DMA+0x26>
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e04f      	b.n	8006186 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	88fa      	ldrh	r2, [r7, #6]
 80060f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2221      	movs	r2, #33	@ 0x21
 8006102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610a:	4a21      	ldr	r2, [pc, #132]	@ (8006190 <HAL_UART_Transmit_DMA+0xd4>)
 800610c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006112:	4a20      	ldr	r2, [pc, #128]	@ (8006194 <HAL_UART_Transmit_DMA+0xd8>)
 8006114:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611a:	4a1f      	ldr	r2, [pc, #124]	@ (8006198 <HAL_UART_Transmit_DMA+0xdc>)
 800611c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006122:	2200      	movs	r2, #0
 8006124:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006126:	f107 0308 	add.w	r3, r7, #8
 800612a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006132:	6819      	ldr	r1, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3304      	adds	r3, #4
 800613a:	461a      	mov	r2, r3
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	f7fc ff81 	bl	8003044 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800614a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3314      	adds	r3, #20
 8006152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	617b      	str	r3, [r7, #20]
   return(result);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800616c:	627a      	str	r2, [r7, #36]	@ 0x24
 800616e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	6a39      	ldr	r1, [r7, #32]
 8006172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006174:	e841 2300 	strex	r3, r2, [r1]
 8006178:	61fb      	str	r3, [r7, #28]
   return(result);
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e5      	bne.n	800614c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
  }
}
 8006186:	4618      	mov	r0, r3
 8006188:	3730      	adds	r7, #48	@ 0x30
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	08006885 	.word	0x08006885
 8006194:	0800691f 	.word	0x0800691f
 8006198:	08006aa3 	.word	0x08006aa3

0800619c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d112      	bne.n	80061dc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_UART_Receive_DMA+0x26>
 80061bc:	88fb      	ldrh	r3, [r7, #6]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e00b      	b.n	80061de <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	461a      	mov	r2, r3
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fcb0 	bl	8006b38 <UART_Start_Receive_DMA>
 80061d8:	4603      	mov	r3, r0
 80061da:	e000      	b.n	80061de <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b090      	sub	sp, #64	@ 0x40
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061fc:	2b80      	cmp	r3, #128	@ 0x80
 80061fe:	bf0c      	ite	eq
 8006200:	2301      	moveq	r3, #1
 8006202:	2300      	movne	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b21      	cmp	r3, #33	@ 0x21
 8006212:	d128      	bne.n	8006266 <HAL_UART_DMAStop+0x80>
 8006214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d025      	beq.n	8006266 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	623b      	str	r3, [r7, #32]
   return(result);
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006230:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3314      	adds	r3, #20
 8006238:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800623a:	633a      	str	r2, [r7, #48]	@ 0x30
 800623c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e5      	bne.n	800621a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006252:	2b00      	cmp	r3, #0
 8006254:	d004      	beq.n	8006260 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625a:	4618      	mov	r0, r3
 800625c:	f7fc ff4a 	bl	80030f4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fd03 	bl	8006c6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006270:	2b40      	cmp	r3, #64	@ 0x40
 8006272:	bf0c      	ite	eq
 8006274:	2301      	moveq	r3, #1
 8006276:	2300      	movne	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b22      	cmp	r3, #34	@ 0x22
 8006286:	d128      	bne.n	80062da <HAL_UART_DMAStop+0xf4>
 8006288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d025      	beq.n	80062da <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3314      	adds	r3, #20
 8006294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	60fb      	str	r3, [r7, #12]
   return(result);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3314      	adds	r3, #20
 80062ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062ae:	61fa      	str	r2, [r7, #28]
 80062b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	69b9      	ldr	r1, [r7, #24]
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	617b      	str	r3, [r7, #20]
   return(result);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e5      	bne.n	800628e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fc ff10 	bl	80030f4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fcf1 	bl	8006cbc <UART_EndRxTransfer>
  }

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3740      	adds	r7, #64	@ 0x40
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b0ba      	sub	sp, #232	@ 0xe8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800630a:	2300      	movs	r3, #0
 800630c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006310:	2300      	movs	r3, #0
 8006312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10f      	bne.n	800634a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <HAL_UART_IRQHandler+0x66>
 8006336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fd99 	bl	8006e7a <UART_Receive_IT>
      return;
 8006348:	e25b      	b.n	8006802 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800634a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80de 	beq.w	8006510 <HAL_UART_IRQHandler+0x22c>
 8006354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d106      	bne.n	800636e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006364:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80d1 	beq.w	8006510 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <HAL_UART_IRQHandler+0xae>
 800637a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800637e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638a:	f043 0201 	orr.w	r2, r3, #1
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <HAL_UART_IRQHandler+0xd2>
 800639e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ae:	f043 0202 	orr.w	r2, r3, #2
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <HAL_UART_IRQHandler+0xf6>
 80063c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d2:	f043 0204 	orr.w	r2, r3, #4
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d011      	beq.n	800640a <HAL_UART_IRQHandler+0x126>
 80063e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d105      	bne.n	80063fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006402:	f043 0208 	orr.w	r2, r3, #8
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 81f2 	beq.w	80067f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_UART_IRQHandler+0x14e>
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fd24 	bl	8006e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643c:	2b40      	cmp	r3, #64	@ 0x40
 800643e:	bf0c      	ite	eq
 8006440:	2301      	moveq	r3, #1
 8006442:	2300      	movne	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <HAL_UART_IRQHandler+0x17a>
 8006456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d04f      	beq.n	80064fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fc2c 	bl	8006cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	d141      	bne.n	80064f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006488:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800648c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3314      	adds	r3, #20
 800649a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800649e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1d9      	bne.n	8006472 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d013      	beq.n	80064ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ca:	4a7e      	ldr	r2, [pc, #504]	@ (80066c4 <HAL_UART_IRQHandler+0x3e0>)
 80064cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fc fe7e 	bl	80031d4 <HAL_DMA_Abort_IT>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d016      	beq.n	800650c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	e00e      	b.n	800650c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9b2 	bl	8006858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	e00a      	b.n	800650c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9ae 	bl	8006858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fc:	e006      	b.n	800650c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9aa 	bl	8006858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800650a:	e175      	b.n	80067f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650c:	bf00      	nop
    return;
 800650e:	e173      	b.n	80067f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006514:	2b01      	cmp	r3, #1
 8006516:	f040 814f 	bne.w	80067b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8148 	beq.w	80067b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8141 	beq.w	80067b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006536:	2300      	movs	r3, #0
 8006538:	60bb      	str	r3, [r7, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006556:	2b40      	cmp	r3, #64	@ 0x40
 8006558:	f040 80b6 	bne.w	80066c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006568:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 8145 	beq.w	80067fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800657a:	429a      	cmp	r2, r3
 800657c:	f080 813e 	bcs.w	80067fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006586:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006592:	f000 8088 	beq.w	80066a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1d9      	bne.n	8006596 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3314      	adds	r3, #20
 80065e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3314      	adds	r3, #20
 8006602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006606:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800660a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800660e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e1      	bne.n	80065e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3314      	adds	r3, #20
 8006624:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800662e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3314      	adds	r3, #20
 800663e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006642:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006644:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006648:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e3      	bne.n	800661e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	330c      	adds	r3, #12
 800666a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006676:	f023 0310 	bic.w	r3, r3, #16
 800667a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	330c      	adds	r3, #12
 8006684:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006688:	65ba      	str	r2, [r7, #88]	@ 0x58
 800668a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800668e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e3      	bne.n	8006664 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fc fd27 	bl	80030f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f8d5 	bl	800686c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066c2:	e09b      	b.n	80067fc <HAL_UART_IRQHandler+0x518>
 80066c4:	08006d83 	.word	0x08006d83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 808e 	beq.w	8006800 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 8089 	beq.w	8006800 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006704:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006712:	647a      	str	r2, [r7, #68]	@ 0x44
 8006714:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006718:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e3      	bne.n	80066ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3314      	adds	r3, #20
 800672c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	623b      	str	r3, [r7, #32]
   return(result);
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	f023 0301 	bic.w	r3, r3, #1
 800673c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3314      	adds	r3, #20
 8006746:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800674a:	633a      	str	r2, [r7, #48]	@ 0x30
 800674c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e3      	bne.n	8006726 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	330c      	adds	r3, #12
 8006772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	60fb      	str	r3, [r7, #12]
   return(result);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0310 	bic.w	r3, r3, #16
 8006782:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	330c      	adds	r3, #12
 800678c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006790:	61fa      	str	r2, [r7, #28]
 8006792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	69b9      	ldr	r1, [r7, #24]
 8006796:	69fa      	ldr	r2, [r7, #28]
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	617b      	str	r3, [r7, #20]
   return(result);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e3      	bne.n	800676c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f85b 	bl	800686c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067b6:	e023      	b.n	8006800 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <HAL_UART_IRQHandler+0x4f4>
 80067c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 faea 	bl	8006daa <UART_Transmit_IT>
    return;
 80067d6:	e014      	b.n	8006802 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00e      	beq.n	8006802 <HAL_UART_IRQHandler+0x51e>
 80067e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fb2a 	bl	8006e4a <UART_EndTransmit_IT>
    return;
 80067f6:	e004      	b.n	8006802 <HAL_UART_IRQHandler+0x51e>
    return;
 80067f8:	bf00      	nop
 80067fa:	e002      	b.n	8006802 <HAL_UART_IRQHandler+0x51e>
      return;
 80067fc:	bf00      	nop
 80067fe:	e000      	b.n	8006802 <HAL_UART_IRQHandler+0x51e>
      return;
 8006800:	bf00      	nop
  }
}
 8006802:	37e8      	adds	r7, #232	@ 0xe8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b090      	sub	sp, #64	@ 0x40
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d137      	bne.n	8006910 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80068a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a2:	2200      	movs	r2, #0
 80068a4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3314      	adds	r3, #20
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	623b      	str	r3, [r7, #32]
   return(result);
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3314      	adds	r3, #20
 80068c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80068c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e5      	bne.n	80068a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068fa:	61fa      	str	r2, [r7, #28]
 80068fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	69b9      	ldr	r1, [r7, #24]
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	617b      	str	r3, [r7, #20]
   return(result);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e5      	bne.n	80068da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800690e:	e002      	b.n	8006916 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006910:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006912:	f7ff ff79 	bl	8006808 <HAL_UART_TxCpltCallback>
}
 8006916:	bf00      	nop
 8006918:	3740      	adds	r7, #64	@ 0x40
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff ff75 	bl	800681c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b09c      	sub	sp, #112	@ 0x70
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006946:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006952:	2b00      	cmp	r3, #0
 8006954:	d172      	bne.n	8006a3c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006958:	2200      	movs	r2, #0
 800695a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800695c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	330c      	adds	r3, #12
 8006962:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800696c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800696e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006972:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	330c      	adds	r3, #12
 800697a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800697c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800697e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006982:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800698a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e5      	bne.n	800695c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3314      	adds	r3, #20
 8006996:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80069a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3314      	adds	r3, #20
 80069ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80069b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80069b2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e5      	bne.n	8006990 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3314      	adds	r3, #20
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	623b      	str	r3, [r7, #32]
   return(result);
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069da:	663b      	str	r3, [r7, #96]	@ 0x60
 80069dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3314      	adds	r3, #20
 80069e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80069e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80069e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e5      	bne.n	80069c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d119      	bne.n	8006a3c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0310 	bic.w	r3, r3, #16
 8006a1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a28:	61fa      	str	r2, [r7, #28]
 8006a2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	69b9      	ldr	r1, [r7, #24]
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	617b      	str	r3, [r7, #20]
   return(result);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e5      	bne.n	8006a08 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a3e:	2200      	movs	r2, #0
 8006a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d106      	bne.n	8006a58 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a52:	f7ff ff0b 	bl	800686c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a56:	e002      	b.n	8006a5e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006a58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a5a:	f7ff fee9 	bl	8006830 <HAL_UART_RxCpltCallback>
}
 8006a5e:	bf00      	nop
 8006a60:	3770      	adds	r7, #112	@ 0x70
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d108      	bne.n	8006a94 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f7ff feed 	bl	800686c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a92:	e002      	b.n	8006a9a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff fed5 	bl	8006844 <HAL_UART_RxHalfCpltCallback>
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006abe:	2b80      	cmp	r3, #128	@ 0x80
 8006ac0:	bf0c      	ite	eq
 8006ac2:	2301      	moveq	r3, #1
 8006ac4:	2300      	movne	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b21      	cmp	r3, #33	@ 0x21
 8006ad4:	d108      	bne.n	8006ae8 <UART_DMAError+0x46>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006ae2:	68b8      	ldr	r0, [r7, #8]
 8006ae4:	f000 f8c2 	bl	8006c6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af2:	2b40      	cmp	r3, #64	@ 0x40
 8006af4:	bf0c      	ite	eq
 8006af6:	2301      	moveq	r3, #1
 8006af8:	2300      	movne	r3, #0
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b22      	cmp	r3, #34	@ 0x22
 8006b08:	d108      	bne.n	8006b1c <UART_DMAError+0x7a>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006b16:	68b8      	ldr	r0, [r7, #8]
 8006b18:	f000 f8d0 	bl	8006cbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b20:	f043 0210 	orr.w	r2, r3, #16
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b28:	68b8      	ldr	r0, [r7, #8]
 8006b2a:	f7ff fe95 	bl	8006858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b098      	sub	sp, #96	@ 0x60
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2222      	movs	r2, #34	@ 0x22
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b64:	4a3e      	ldr	r2, [pc, #248]	@ (8006c60 <UART_Start_Receive_DMA+0x128>)
 8006b66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6c:	4a3d      	ldr	r2, [pc, #244]	@ (8006c64 <UART_Start_Receive_DMA+0x12c>)
 8006b6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b74:	4a3c      	ldr	r2, [pc, #240]	@ (8006c68 <UART_Start_Receive_DMA+0x130>)
 8006b76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006b80:	f107 0308 	add.w	r3, r7, #8
 8006b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4619      	mov	r1, r3
 8006b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	88fb      	ldrh	r3, [r7, #6]
 8006b98:	f7fc fa54 	bl	8003044 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d019      	beq.n	8006bee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3314      	adds	r3, #20
 8006bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3314      	adds	r3, #20
 8006c0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c0e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006c10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3314      	adds	r3, #20
 8006c28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	617b      	str	r3, [r7, #20]
   return(result);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c38:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3314      	adds	r3, #20
 8006c40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c42:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	6a39      	ldr	r1, [r7, #32]
 8006c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e5      	bne.n	8006c22 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3760      	adds	r7, #96	@ 0x60
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	0800693b 	.word	0x0800693b
 8006c64:	08006a67 	.word	0x08006a67
 8006c68:	08006aa3 	.word	0x08006aa3

08006c6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b089      	sub	sp, #36	@ 0x24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	330c      	adds	r3, #12
 8006c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	330c      	adds	r3, #12
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	61ba      	str	r2, [r7, #24]
 8006c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6979      	ldr	r1, [r7, #20]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e5      	bne.n	8006c74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006cb0:	bf00      	nop
 8006cb2:	3724      	adds	r7, #36	@ 0x24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b095      	sub	sp, #84	@ 0x54
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ce4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e5      	bne.n	8006cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3314      	adds	r3, #20
 8006cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3314      	adds	r3, #20
 8006d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e5      	bne.n	8006cf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d119      	bne.n	8006d68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f023 0310 	bic.w	r3, r3, #16
 8006d4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d54:	61ba      	str	r2, [r7, #24]
 8006d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6979      	ldr	r1, [r7, #20]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	613b      	str	r3, [r7, #16]
   return(result);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e5      	bne.n	8006d34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d76:	bf00      	nop
 8006d78:	3754      	adds	r7, #84	@ 0x54
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff fd5b 	bl	8006858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b21      	cmp	r3, #33	@ 0x21
 8006dbc:	d13e      	bne.n	8006e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc6:	d114      	bne.n	8006df2 <UART_Transmit_IT+0x48>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d110      	bne.n	8006df2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	1c9a      	adds	r2, r3, #2
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	621a      	str	r2, [r3, #32]
 8006df0:	e008      	b.n	8006e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	1c59      	adds	r1, r3, #1
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6211      	str	r1, [r2, #32]
 8006dfc:	781a      	ldrb	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	4619      	mov	r1, r3
 8006e12:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10f      	bne.n	8006e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e000      	b.n	8006e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e3c:	2302      	movs	r3, #2
  }
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fccc 	bl	8006808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b08c      	sub	sp, #48	@ 0x30
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b22      	cmp	r3, #34	@ 0x22
 8006e8c:	f040 80ae 	bne.w	8006fec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e98:	d117      	bne.n	8006eca <UART_Receive_IT+0x50>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d113      	bne.n	8006eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec2:	1c9a      	adds	r2, r3, #2
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ec8:	e026      	b.n	8006f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006edc:	d007      	beq.n	8006eee <UART_Receive_IT+0x74>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <UART_Receive_IT+0x82>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	e008      	b.n	8006f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4619      	mov	r1, r3
 8006f26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d15d      	bne.n	8006fe8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0220 	bic.w	r2, r2, #32
 8006f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695a      	ldr	r2, [r3, #20]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0201 	bic.w	r2, r2, #1
 8006f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d135      	bne.n	8006fde <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	613b      	str	r3, [r7, #16]
   return(result);
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f023 0310 	bic.w	r3, r3, #16
 8006f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	330c      	adds	r3, #12
 8006f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f98:	623a      	str	r2, [r7, #32]
 8006f9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	69f9      	ldr	r1, [r7, #28]
 8006f9e:	6a3a      	ldr	r2, [r7, #32]
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e5      	bne.n	8006f78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0310 	and.w	r3, r3, #16
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	d10a      	bne.n	8006fd0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fc48 	bl	800686c <HAL_UARTEx_RxEventCallback>
 8006fdc:	e002      	b.n	8006fe4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fc26 	bl	8006830 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e002      	b.n	8006fee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e000      	b.n	8006fee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006fec:	2302      	movs	r3, #2
  }
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3730      	adds	r7, #48	@ 0x30
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ffc:	b0c0      	sub	sp, #256	@ 0x100
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007014:	68d9      	ldr	r1, [r3, #12]
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	ea40 0301 	orr.w	r3, r0, r1
 8007020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	431a      	orrs	r2, r3
 8007030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	431a      	orrs	r2, r3
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007050:	f021 010c 	bic.w	r1, r1, #12
 8007054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800705e:	430b      	orrs	r3, r1
 8007060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800706e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007072:	6999      	ldr	r1, [r3, #24]
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	ea40 0301 	orr.w	r3, r0, r1
 800707e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b8f      	ldr	r3, [pc, #572]	@ (80072c4 <UART_SetConfig+0x2cc>)
 8007088:	429a      	cmp	r2, r3
 800708a:	d005      	beq.n	8007098 <UART_SetConfig+0xa0>
 800708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b8d      	ldr	r3, [pc, #564]	@ (80072c8 <UART_SetConfig+0x2d0>)
 8007094:	429a      	cmp	r2, r3
 8007096:	d104      	bne.n	80070a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007098:	f7fe f984 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 800709c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80070a0:	e003      	b.n	80070aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070a2:	f7fe f96b 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 80070a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070b4:	f040 810c 	bne.w	80072d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070bc:	2200      	movs	r2, #0
 80070be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80070c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80070ca:	4622      	mov	r2, r4
 80070cc:	462b      	mov	r3, r5
 80070ce:	1891      	adds	r1, r2, r2
 80070d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80070d2:	415b      	adcs	r3, r3
 80070d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80070da:	4621      	mov	r1, r4
 80070dc:	eb12 0801 	adds.w	r8, r2, r1
 80070e0:	4629      	mov	r1, r5
 80070e2:	eb43 0901 	adc.w	r9, r3, r1
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070fa:	4690      	mov	r8, r2
 80070fc:	4699      	mov	r9, r3
 80070fe:	4623      	mov	r3, r4
 8007100:	eb18 0303 	adds.w	r3, r8, r3
 8007104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007108:	462b      	mov	r3, r5
 800710a:	eb49 0303 	adc.w	r3, r9, r3
 800710e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800711e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007126:	460b      	mov	r3, r1
 8007128:	18db      	adds	r3, r3, r3
 800712a:	653b      	str	r3, [r7, #80]	@ 0x50
 800712c:	4613      	mov	r3, r2
 800712e:	eb42 0303 	adc.w	r3, r2, r3
 8007132:	657b      	str	r3, [r7, #84]	@ 0x54
 8007134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800713c:	f7f9 fda6 	bl	8000c8c <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4b61      	ldr	r3, [pc, #388]	@ (80072cc <UART_SetConfig+0x2d4>)
 8007146:	fba3 2302 	umull	r2, r3, r3, r2
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	011c      	lsls	r4, r3, #4
 800714e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007152:	2200      	movs	r2, #0
 8007154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007158:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800715c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007160:	4642      	mov	r2, r8
 8007162:	464b      	mov	r3, r9
 8007164:	1891      	adds	r1, r2, r2
 8007166:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007168:	415b      	adcs	r3, r3
 800716a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800716c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007170:	4641      	mov	r1, r8
 8007172:	eb12 0a01 	adds.w	sl, r2, r1
 8007176:	4649      	mov	r1, r9
 8007178:	eb43 0b01 	adc.w	fp, r3, r1
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800718c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007190:	4692      	mov	sl, r2
 8007192:	469b      	mov	fp, r3
 8007194:	4643      	mov	r3, r8
 8007196:	eb1a 0303 	adds.w	r3, sl, r3
 800719a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800719e:	464b      	mov	r3, r9
 80071a0:	eb4b 0303 	adc.w	r3, fp, r3
 80071a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80071b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80071bc:	460b      	mov	r3, r1
 80071be:	18db      	adds	r3, r3, r3
 80071c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071c2:	4613      	mov	r3, r2
 80071c4:	eb42 0303 	adc.w	r3, r2, r3
 80071c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80071ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80071d2:	f7f9 fd5b 	bl	8000c8c <__aeabi_uldivmod>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	4b3b      	ldr	r3, [pc, #236]	@ (80072cc <UART_SetConfig+0x2d4>)
 80071de:	fba3 2301 	umull	r2, r3, r3, r1
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	2264      	movs	r2, #100	@ 0x64
 80071e6:	fb02 f303 	mul.w	r3, r2, r3
 80071ea:	1acb      	subs	r3, r1, r3
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80071f2:	4b36      	ldr	r3, [pc, #216]	@ (80072cc <UART_SetConfig+0x2d4>)
 80071f4:	fba3 2302 	umull	r2, r3, r3, r2
 80071f8:	095b      	lsrs	r3, r3, #5
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007200:	441c      	add	r4, r3
 8007202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007206:	2200      	movs	r2, #0
 8007208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800720c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007214:	4642      	mov	r2, r8
 8007216:	464b      	mov	r3, r9
 8007218:	1891      	adds	r1, r2, r2
 800721a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800721c:	415b      	adcs	r3, r3
 800721e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007224:	4641      	mov	r1, r8
 8007226:	1851      	adds	r1, r2, r1
 8007228:	6339      	str	r1, [r7, #48]	@ 0x30
 800722a:	4649      	mov	r1, r9
 800722c:	414b      	adcs	r3, r1
 800722e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007230:	f04f 0200 	mov.w	r2, #0
 8007234:	f04f 0300 	mov.w	r3, #0
 8007238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800723c:	4659      	mov	r1, fp
 800723e:	00cb      	lsls	r3, r1, #3
 8007240:	4651      	mov	r1, sl
 8007242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007246:	4651      	mov	r1, sl
 8007248:	00ca      	lsls	r2, r1, #3
 800724a:	4610      	mov	r0, r2
 800724c:	4619      	mov	r1, r3
 800724e:	4603      	mov	r3, r0
 8007250:	4642      	mov	r2, r8
 8007252:	189b      	adds	r3, r3, r2
 8007254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007258:	464b      	mov	r3, r9
 800725a:	460a      	mov	r2, r1
 800725c:	eb42 0303 	adc.w	r3, r2, r3
 8007260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007270:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007278:	460b      	mov	r3, r1
 800727a:	18db      	adds	r3, r3, r3
 800727c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800727e:	4613      	mov	r3, r2
 8007280:	eb42 0303 	adc.w	r3, r2, r3
 8007284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800728a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800728e:	f7f9 fcfd 	bl	8000c8c <__aeabi_uldivmod>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <UART_SetConfig+0x2d4>)
 8007298:	fba3 1302 	umull	r1, r3, r3, r2
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	2164      	movs	r1, #100	@ 0x64
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	3332      	adds	r3, #50	@ 0x32
 80072aa:	4a08      	ldr	r2, [pc, #32]	@ (80072cc <UART_SetConfig+0x2d4>)
 80072ac:	fba2 2303 	umull	r2, r3, r2, r3
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	f003 0207 	and.w	r2, r3, #7
 80072b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4422      	add	r2, r4
 80072be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072c0:	e106      	b.n	80074d0 <UART_SetConfig+0x4d8>
 80072c2:	bf00      	nop
 80072c4:	40011000 	.word	0x40011000
 80072c8:	40011400 	.word	0x40011400
 80072cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80072de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80072e2:	4642      	mov	r2, r8
 80072e4:	464b      	mov	r3, r9
 80072e6:	1891      	adds	r1, r2, r2
 80072e8:	6239      	str	r1, [r7, #32]
 80072ea:	415b      	adcs	r3, r3
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072f2:	4641      	mov	r1, r8
 80072f4:	1854      	adds	r4, r2, r1
 80072f6:	4649      	mov	r1, r9
 80072f8:	eb43 0501 	adc.w	r5, r3, r1
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	00eb      	lsls	r3, r5, #3
 8007306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800730a:	00e2      	lsls	r2, r4, #3
 800730c:	4614      	mov	r4, r2
 800730e:	461d      	mov	r5, r3
 8007310:	4643      	mov	r3, r8
 8007312:	18e3      	adds	r3, r4, r3
 8007314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007318:	464b      	mov	r3, r9
 800731a:	eb45 0303 	adc.w	r3, r5, r3
 800731e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800732e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800733e:	4629      	mov	r1, r5
 8007340:	008b      	lsls	r3, r1, #2
 8007342:	4621      	mov	r1, r4
 8007344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007348:	4621      	mov	r1, r4
 800734a:	008a      	lsls	r2, r1, #2
 800734c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007350:	f7f9 fc9c 	bl	8000c8c <__aeabi_uldivmod>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4b60      	ldr	r3, [pc, #384]	@ (80074dc <UART_SetConfig+0x4e4>)
 800735a:	fba3 2302 	umull	r2, r3, r3, r2
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	011c      	lsls	r4, r3, #4
 8007362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007366:	2200      	movs	r2, #0
 8007368:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800736c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007374:	4642      	mov	r2, r8
 8007376:	464b      	mov	r3, r9
 8007378:	1891      	adds	r1, r2, r2
 800737a:	61b9      	str	r1, [r7, #24]
 800737c:	415b      	adcs	r3, r3
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007384:	4641      	mov	r1, r8
 8007386:	1851      	adds	r1, r2, r1
 8007388:	6139      	str	r1, [r7, #16]
 800738a:	4649      	mov	r1, r9
 800738c:	414b      	adcs	r3, r1
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 0300 	mov.w	r3, #0
 8007398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800739c:	4659      	mov	r1, fp
 800739e:	00cb      	lsls	r3, r1, #3
 80073a0:	4651      	mov	r1, sl
 80073a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073a6:	4651      	mov	r1, sl
 80073a8:	00ca      	lsls	r2, r1, #3
 80073aa:	4610      	mov	r0, r2
 80073ac:	4619      	mov	r1, r3
 80073ae:	4603      	mov	r3, r0
 80073b0:	4642      	mov	r2, r8
 80073b2:	189b      	adds	r3, r3, r2
 80073b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073b8:	464b      	mov	r3, r9
 80073ba:	460a      	mov	r2, r1
 80073bc:	eb42 0303 	adc.w	r3, r2, r3
 80073c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80073dc:	4649      	mov	r1, r9
 80073de:	008b      	lsls	r3, r1, #2
 80073e0:	4641      	mov	r1, r8
 80073e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073e6:	4641      	mov	r1, r8
 80073e8:	008a      	lsls	r2, r1, #2
 80073ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80073ee:	f7f9 fc4d 	bl	8000c8c <__aeabi_uldivmod>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	4b38      	ldr	r3, [pc, #224]	@ (80074dc <UART_SetConfig+0x4e4>)
 80073fa:	fba3 2301 	umull	r2, r3, r3, r1
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	2264      	movs	r2, #100	@ 0x64
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	1acb      	subs	r3, r1, r3
 8007408:	011b      	lsls	r3, r3, #4
 800740a:	3332      	adds	r3, #50	@ 0x32
 800740c:	4a33      	ldr	r2, [pc, #204]	@ (80074dc <UART_SetConfig+0x4e4>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007418:	441c      	add	r4, r3
 800741a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800741e:	2200      	movs	r2, #0
 8007420:	673b      	str	r3, [r7, #112]	@ 0x70
 8007422:	677a      	str	r2, [r7, #116]	@ 0x74
 8007424:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007428:	4642      	mov	r2, r8
 800742a:	464b      	mov	r3, r9
 800742c:	1891      	adds	r1, r2, r2
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	415b      	adcs	r3, r3
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007438:	4641      	mov	r1, r8
 800743a:	1851      	adds	r1, r2, r1
 800743c:	6039      	str	r1, [r7, #0]
 800743e:	4649      	mov	r1, r9
 8007440:	414b      	adcs	r3, r1
 8007442:	607b      	str	r3, [r7, #4]
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007450:	4659      	mov	r1, fp
 8007452:	00cb      	lsls	r3, r1, #3
 8007454:	4651      	mov	r1, sl
 8007456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800745a:	4651      	mov	r1, sl
 800745c:	00ca      	lsls	r2, r1, #3
 800745e:	4610      	mov	r0, r2
 8007460:	4619      	mov	r1, r3
 8007462:	4603      	mov	r3, r0
 8007464:	4642      	mov	r2, r8
 8007466:	189b      	adds	r3, r3, r2
 8007468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800746a:	464b      	mov	r3, r9
 800746c:	460a      	mov	r2, r1
 800746e:	eb42 0303 	adc.w	r3, r2, r3
 8007472:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	663b      	str	r3, [r7, #96]	@ 0x60
 800747e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	f04f 0300 	mov.w	r3, #0
 8007488:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800748c:	4649      	mov	r1, r9
 800748e:	008b      	lsls	r3, r1, #2
 8007490:	4641      	mov	r1, r8
 8007492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007496:	4641      	mov	r1, r8
 8007498:	008a      	lsls	r2, r1, #2
 800749a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800749e:	f7f9 fbf5 	bl	8000c8c <__aeabi_uldivmod>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4b0d      	ldr	r3, [pc, #52]	@ (80074dc <UART_SetConfig+0x4e4>)
 80074a8:	fba3 1302 	umull	r1, r3, r3, r2
 80074ac:	095b      	lsrs	r3, r3, #5
 80074ae:	2164      	movs	r1, #100	@ 0x64
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	3332      	adds	r3, #50	@ 0x32
 80074ba:	4a08      	ldr	r2, [pc, #32]	@ (80074dc <UART_SetConfig+0x4e4>)
 80074bc:	fba2 2303 	umull	r2, r3, r2, r3
 80074c0:	095b      	lsrs	r3, r3, #5
 80074c2:	f003 020f 	and.w	r2, r3, #15
 80074c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4422      	add	r2, r4
 80074ce:	609a      	str	r2, [r3, #8]
}
 80074d0:	bf00      	nop
 80074d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80074d6:	46bd      	mov	sp, r7
 80074d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074dc:	51eb851f 	.word	0x51eb851f

080074e0 <__NVIC_SetPriority>:
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	6039      	str	r1, [r7, #0]
 80074ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	db0a      	blt.n	800750a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	490c      	ldr	r1, [pc, #48]	@ (800752c <__NVIC_SetPriority+0x4c>)
 80074fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074fe:	0112      	lsls	r2, r2, #4
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	440b      	add	r3, r1
 8007504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007508:	e00a      	b.n	8007520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	b2da      	uxtb	r2, r3
 800750e:	4908      	ldr	r1, [pc, #32]	@ (8007530 <__NVIC_SetPriority+0x50>)
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	3b04      	subs	r3, #4
 8007518:	0112      	lsls	r2, r2, #4
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	440b      	add	r3, r1
 800751e:	761a      	strb	r2, [r3, #24]
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	e000e100 	.word	0xe000e100
 8007530:	e000ed00 	.word	0xe000ed00

08007534 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007538:	2100      	movs	r1, #0
 800753a:	f06f 0004 	mvn.w	r0, #4
 800753e:	f7ff ffcf 	bl	80074e0 <__NVIC_SetPriority>
#endif
}
 8007542:	bf00      	nop
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754e:	f3ef 8305 	mrs	r3, IPSR
 8007552:	603b      	str	r3, [r7, #0]
  return(result);
 8007554:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800755a:	f06f 0305 	mvn.w	r3, #5
 800755e:	607b      	str	r3, [r7, #4]
 8007560:	e00c      	b.n	800757c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007562:	4b0a      	ldr	r3, [pc, #40]	@ (800758c <osKernelInitialize+0x44>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d105      	bne.n	8007576 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800756a:	4b08      	ldr	r3, [pc, #32]	@ (800758c <osKernelInitialize+0x44>)
 800756c:	2201      	movs	r2, #1
 800756e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007570:	2300      	movs	r3, #0
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	e002      	b.n	800757c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800757a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800757c:	687b      	ldr	r3, [r7, #4]
}
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	20004d44 	.word	0x20004d44

08007590 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007596:	f3ef 8305 	mrs	r3, IPSR
 800759a:	603b      	str	r3, [r7, #0]
  return(result);
 800759c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80075a2:	f06f 0305 	mvn.w	r3, #5
 80075a6:	607b      	str	r3, [r7, #4]
 80075a8:	e010      	b.n	80075cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80075aa:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <osKernelStart+0x48>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d109      	bne.n	80075c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80075b2:	f7ff ffbf 	bl	8007534 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80075b6:	4b08      	ldr	r3, [pc, #32]	@ (80075d8 <osKernelStart+0x48>)
 80075b8:	2202      	movs	r2, #2
 80075ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80075bc:	f001 f87a 	bl	80086b4 <vTaskStartScheduler>
      stat = osOK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	607b      	str	r3, [r7, #4]
 80075c4:	e002      	b.n	80075cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80075c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80075cc:	687b      	ldr	r3, [r7, #4]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20004d44 	.word	0x20004d44

080075dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08e      	sub	sp, #56	@ 0x38
 80075e0:	af04      	add	r7, sp, #16
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ec:	f3ef 8305 	mrs	r3, IPSR
 80075f0:	617b      	str	r3, [r7, #20]
  return(result);
 80075f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d17e      	bne.n	80076f6 <osThreadNew+0x11a>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d07b      	beq.n	80076f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80075fe:	2380      	movs	r3, #128	@ 0x80
 8007600:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007602:	2318      	movs	r3, #24
 8007604:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800760a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800760e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d045      	beq.n	80076a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <osThreadNew+0x48>
        name = attr->name;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d008      	beq.n	800764a <osThreadNew+0x6e>
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	2b38      	cmp	r3, #56	@ 0x38
 800763c:	d805      	bhi.n	800764a <osThreadNew+0x6e>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <osThreadNew+0x72>
        return (NULL);
 800764a:	2300      	movs	r3, #0
 800764c:	e054      	b.n	80076f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	089b      	lsrs	r3, r3, #2
 800765c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00e      	beq.n	8007684 <osThreadNew+0xa8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	2b5b      	cmp	r3, #91	@ 0x5b
 800766c:	d90a      	bls.n	8007684 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007672:	2b00      	cmp	r3, #0
 8007674:	d006      	beq.n	8007684 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <osThreadNew+0xa8>
        mem = 1;
 800767e:	2301      	movs	r3, #1
 8007680:	61bb      	str	r3, [r7, #24]
 8007682:	e010      	b.n	80076a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10c      	bne.n	80076a6 <osThreadNew+0xca>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d108      	bne.n	80076a6 <osThreadNew+0xca>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d104      	bne.n	80076a6 <osThreadNew+0xca>
          mem = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	e001      	b.n	80076a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d110      	bne.n	80076ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076b4:	9202      	str	r2, [sp, #8]
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6a3a      	ldr	r2, [r7, #32]
 80076c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 fe1a 	bl	80082fc <xTaskCreateStatic>
 80076c8:	4603      	mov	r3, r0
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	e013      	b.n	80076f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d110      	bne.n	80076f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	f107 0310 	add.w	r3, r7, #16
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 fe68 	bl	80083bc <xTaskCreate>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d001      	beq.n	80076f6 <osThreadNew+0x11a>
            hTask = NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076f6:	693b      	ldr	r3, [r7, #16]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3728      	adds	r7, #40	@ 0x28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007708:	f3ef 8305 	mrs	r3, IPSR
 800770c:	60bb      	str	r3, [r7, #8]
  return(result);
 800770e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <osDelay+0x1c>
    stat = osErrorISR;
 8007714:	f06f 0305 	mvn.w	r3, #5
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	e007      	b.n	800772c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 ff8e 	bl	8008648 <vTaskDelay>
    }
  }

  return (stat);
 800772c:	68fb      	ldr	r3, [r7, #12]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4a07      	ldr	r2, [pc, #28]	@ (8007764 <vApplicationGetIdleTaskMemory+0x2c>)
 8007748:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4a06      	ldr	r2, [pc, #24]	@ (8007768 <vApplicationGetIdleTaskMemory+0x30>)
 800774e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2280      	movs	r2, #128	@ 0x80
 8007754:	601a      	str	r2, [r3, #0]
}
 8007756:	bf00      	nop
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	20004d48 	.word	0x20004d48
 8007768:	20004da4 	.word	0x20004da4

0800776c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a07      	ldr	r2, [pc, #28]	@ (8007798 <vApplicationGetTimerTaskMemory+0x2c>)
 800777c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4a06      	ldr	r2, [pc, #24]	@ (800779c <vApplicationGetTimerTaskMemory+0x30>)
 8007782:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800778a:	601a      	str	r2, [r3, #0]
}
 800778c:	bf00      	nop
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	20004fa4 	.word	0x20004fa4
 800779c:	20005000 	.word	0x20005000

080077a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f103 0208 	add.w	r2, r3, #8
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f103 0208 	add.w	r2, r3, #8
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f103 0208 	add.w	r2, r3, #8
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007858:	d103      	bne.n	8007862 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	e00c      	b.n	800787c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3308      	adds	r3, #8
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	e002      	b.n	8007870 <vListInsert+0x2e>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	429a      	cmp	r2, r3
 800787a:	d2f6      	bcs.n	800786a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	601a      	str	r2, [r3, #0]
}
 80078a8:	bf00      	nop
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6892      	ldr	r2, [r2, #8]
 80078ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6852      	ldr	r2, [r2, #4]
 80078d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d103      	bne.n	80078e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	1e5a      	subs	r2, r3, #1
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10b      	bne.n	8007934 <xQueueGenericReset+0x2c>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60bb      	str	r3, [r7, #8]
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	e7fd      	b.n	8007930 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007934:	f002 f8a0 	bl	8009a78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007940:	68f9      	ldr	r1, [r7, #12]
 8007942:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	441a      	add	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007964:	3b01      	subs	r3, #1
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800796a:	fb01 f303 	mul.w	r3, r1, r3
 800796e:	441a      	add	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	22ff      	movs	r2, #255	@ 0xff
 8007978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	22ff      	movs	r2, #255	@ 0xff
 8007980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d114      	bne.n	80079b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01a      	beq.n	80079c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3310      	adds	r3, #16
 8007996:	4618      	mov	r0, r3
 8007998:	f001 f91a 	bl	8008bd0 <xTaskRemoveFromEventList>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d012      	beq.n	80079c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079a2:	4b0d      	ldr	r3, [pc, #52]	@ (80079d8 <xQueueGenericReset+0xd0>)
 80079a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	e009      	b.n	80079c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3310      	adds	r3, #16
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff fef1 	bl	80077a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3324      	adds	r3, #36	@ 0x24
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff feec 	bl	80077a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079c8:	f002 f888 	bl	8009adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079cc:	2301      	movs	r3, #1
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	e000ed04 	.word	0xe000ed04

080079dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08e      	sub	sp, #56	@ 0x38
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10b      	bne.n	8007a08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	e7fd      	b.n	8007a04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10b      	bne.n	8007a26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	e7fd      	b.n	8007a22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <xQueueGenericCreateStatic+0x56>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <xQueueGenericCreateStatic+0x5a>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <xQueueGenericCreateStatic+0x5c>
 8007a36:	2300      	movs	r3, #0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10b      	bne.n	8007a54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	623b      	str	r3, [r7, #32]
}
 8007a4e:	bf00      	nop
 8007a50:	bf00      	nop
 8007a52:	e7fd      	b.n	8007a50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d102      	bne.n	8007a60 <xQueueGenericCreateStatic+0x84>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <xQueueGenericCreateStatic+0x88>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <xQueueGenericCreateStatic+0x8a>
 8007a64:	2300      	movs	r3, #0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10b      	bne.n	8007a82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	61fb      	str	r3, [r7, #28]
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	e7fd      	b.n	8007a7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a82:	2350      	movs	r3, #80	@ 0x50
 8007a84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2b50      	cmp	r3, #80	@ 0x50
 8007a8a:	d00b      	beq.n	8007aa4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	61bb      	str	r3, [r7, #24]
}
 8007a9e:	bf00      	nop
 8007aa0:	bf00      	nop
 8007aa2:	e7fd      	b.n	8007aa0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007aa4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00d      	beq.n	8007acc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ab8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	68b9      	ldr	r1, [r7, #8]
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 f805 	bl	8007ad6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3730      	adds	r7, #48	@ 0x30
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	607a      	str	r2, [r7, #4]
 8007ae2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d103      	bne.n	8007af2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	e002      	b.n	8007af8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b04:	2101      	movs	r1, #1
 8007b06:	69b8      	ldr	r0, [r7, #24]
 8007b08:	f7ff fefe 	bl	8007908 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08e      	sub	sp, #56	@ 0x38
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10b      	bne.n	8007b50 <xQueueGenericSend+0x34>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b4a:	bf00      	nop
 8007b4c:	bf00      	nop
 8007b4e:	e7fd      	b.n	8007b4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <xQueueGenericSend+0x42>
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <xQueueGenericSend+0x46>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <xQueueGenericSend+0x48>
 8007b62:	2300      	movs	r3, #0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10b      	bne.n	8007b80 <xQueueGenericSend+0x64>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b7a:	bf00      	nop
 8007b7c:	bf00      	nop
 8007b7e:	e7fd      	b.n	8007b7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d103      	bne.n	8007b8e <xQueueGenericSend+0x72>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <xQueueGenericSend+0x76>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <xQueueGenericSend+0x78>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10b      	bne.n	8007bb0 <xQueueGenericSend+0x94>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	623b      	str	r3, [r7, #32]
}
 8007baa:	bf00      	nop
 8007bac:	bf00      	nop
 8007bae:	e7fd      	b.n	8007bac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bb0:	f001 f9f6 	bl	8008fa0 <xTaskGetSchedulerState>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <xQueueGenericSend+0xa4>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <xQueueGenericSend+0xa8>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e000      	b.n	8007bc6 <xQueueGenericSend+0xaa>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10b      	bne.n	8007be2 <xQueueGenericSend+0xc6>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	61fb      	str	r3, [r7, #28]
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	e7fd      	b.n	8007bde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007be2:	f001 ff49 	bl	8009a78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d302      	bcc.n	8007bf8 <xQueueGenericSend+0xdc>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d129      	bne.n	8007c4c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bfe:	f000 fa0f 	bl	8008020 <prvCopyDataToQueue>
 8007c02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d010      	beq.n	8007c2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	3324      	adds	r3, #36	@ 0x24
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 ffdd 	bl	8008bd0 <xTaskRemoveFromEventList>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d013      	beq.n	8007c44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8007d1c <xQueueGenericSend+0x200>)
 8007c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	e00a      	b.n	8007c44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c34:	4b39      	ldr	r3, [pc, #228]	@ (8007d1c <xQueueGenericSend+0x200>)
 8007c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c44:	f001 ff4a 	bl	8009adc <vPortExitCritical>
				return pdPASS;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e063      	b.n	8007d14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d103      	bne.n	8007c5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c52:	f001 ff43 	bl	8009adc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e05c      	b.n	8007d14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d106      	bne.n	8007c6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c60:	f107 0314 	add.w	r3, r7, #20
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 f83f 	bl	8008ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c6e:	f001 ff35 	bl	8009adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c72:	f000 fd87 	bl	8008784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c76:	f001 feff 	bl	8009a78 <vPortEnterCritical>
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c80:	b25b      	sxtb	r3, r3
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c86:	d103      	bne.n	8007c90 <xQueueGenericSend+0x174>
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c96:	b25b      	sxtb	r3, r3
 8007c98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c9c:	d103      	bne.n	8007ca6 <xQueueGenericSend+0x18a>
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ca6:	f001 ff19 	bl	8009adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007caa:	1d3a      	adds	r2, r7, #4
 8007cac:	f107 0314 	add.w	r3, r7, #20
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 f82e 	bl	8008d14 <xTaskCheckForTimeOut>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d124      	bne.n	8007d08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cc0:	f000 faa6 	bl	8008210 <prvIsQueueFull>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d018      	beq.n	8007cfc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	3310      	adds	r3, #16
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 ff2a 	bl	8008b2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cda:	f000 fa31 	bl	8008140 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007cde:	f000 fd5f 	bl	80087a0 <xTaskResumeAll>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f47f af7c 	bne.w	8007be2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007cea:	4b0c      	ldr	r3, [pc, #48]	@ (8007d1c <xQueueGenericSend+0x200>)
 8007cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	e772      	b.n	8007be2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007cfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cfe:	f000 fa1f 	bl	8008140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d02:	f000 fd4d 	bl	80087a0 <xTaskResumeAll>
 8007d06:	e76c      	b.n	8007be2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d0a:	f000 fa19 	bl	8008140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d0e:	f000 fd47 	bl	80087a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3738      	adds	r7, #56	@ 0x38
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	e000ed04 	.word	0xe000ed04

08007d20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b090      	sub	sp, #64	@ 0x40
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10b      	bne.n	8007d50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d4a:	bf00      	nop
 8007d4c:	bf00      	nop
 8007d4e:	e7fd      	b.n	8007d4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d103      	bne.n	8007d5e <xQueueGenericSendFromISR+0x3e>
 8007d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <xQueueGenericSendFromISR+0x42>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e000      	b.n	8007d64 <xQueueGenericSendFromISR+0x44>
 8007d62:	2300      	movs	r3, #0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10b      	bne.n	8007d80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	e7fd      	b.n	8007d7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d103      	bne.n	8007d8e <xQueueGenericSendFromISR+0x6e>
 8007d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <xQueueGenericSendFromISR+0x72>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e000      	b.n	8007d94 <xQueueGenericSendFromISR+0x74>
 8007d92:	2300      	movs	r3, #0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10b      	bne.n	8007db0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	623b      	str	r3, [r7, #32]
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	e7fd      	b.n	8007dac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007db0:	f001 ff42 	bl	8009c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007db4:	f3ef 8211 	mrs	r2, BASEPRI
 8007db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	61fa      	str	r2, [r7, #28]
 8007dca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007dcc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d302      	bcc.n	8007de2 <xQueueGenericSendFromISR+0xc2>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d12f      	bne.n	8007e42 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007de8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007df8:	f000 f912 	bl	8008020 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007dfc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e04:	d112      	bne.n	8007e2c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d016      	beq.n	8007e3c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e10:	3324      	adds	r3, #36	@ 0x24
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fedc 	bl	8008bd0 <xTaskRemoveFromEventList>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e007      	b.n	8007e3c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007e30:	3301      	adds	r3, #1
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	b25a      	sxtb	r2, r3
 8007e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007e40:	e001      	b.n	8007e46 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e48:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3740      	adds	r7, #64	@ 0x40
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08c      	sub	sp, #48	@ 0x30
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10b      	bne.n	8007e8e <xQueueReceive+0x32>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	623b      	str	r3, [r7, #32]
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	e7fd      	b.n	8007e8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d103      	bne.n	8007e9c <xQueueReceive+0x40>
 8007e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <xQueueReceive+0x44>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <xQueueReceive+0x46>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10b      	bne.n	8007ebe <xQueueReceive+0x62>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	61fb      	str	r3, [r7, #28]
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	e7fd      	b.n	8007eba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ebe:	f001 f86f 	bl	8008fa0 <xTaskGetSchedulerState>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <xQueueReceive+0x72>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <xQueueReceive+0x76>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <xQueueReceive+0x78>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10b      	bne.n	8007ef0 <xQueueReceive+0x94>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	61bb      	str	r3, [r7, #24]
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ef0:	f001 fdc2 	bl	8009a78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01f      	beq.n	8007f40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f00:	68b9      	ldr	r1, [r7, #8]
 8007f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f04:	f000 f8f6 	bl	80080f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	1e5a      	subs	r2, r3, #1
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00f      	beq.n	8007f38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	3310      	adds	r3, #16
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fe57 	bl	8008bd0 <xTaskRemoveFromEventList>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d007      	beq.n	8007f38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f28:	4b3c      	ldr	r3, [pc, #240]	@ (800801c <xQueueReceive+0x1c0>)
 8007f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f38:	f001 fdd0 	bl	8009adc <vPortExitCritical>
				return pdPASS;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e069      	b.n	8008014 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f46:	f001 fdc9 	bl	8009adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e062      	b.n	8008014 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f54:	f107 0310 	add.w	r3, r7, #16
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fec5 	bl	8008ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f62:	f001 fdbb 	bl	8009adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f66:	f000 fc0d 	bl	8008784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f6a:	f001 fd85 	bl	8009a78 <vPortEnterCritical>
 8007f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f74:	b25b      	sxtb	r3, r3
 8007f76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f7a:	d103      	bne.n	8007f84 <xQueueReceive+0x128>
 8007f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f8a:	b25b      	sxtb	r3, r3
 8007f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f90:	d103      	bne.n	8007f9a <xQueueReceive+0x13e>
 8007f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f9a:	f001 fd9f 	bl	8009adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f9e:	1d3a      	adds	r2, r7, #4
 8007fa0:	f107 0310 	add.w	r3, r7, #16
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 feb4 	bl	8008d14 <xTaskCheckForTimeOut>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d123      	bne.n	8007ffa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fb4:	f000 f916 	bl	80081e4 <prvIsQueueEmpty>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d017      	beq.n	8007fee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc0:	3324      	adds	r3, #36	@ 0x24
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fdb0 	bl	8008b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fce:	f000 f8b7 	bl	8008140 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fd2:	f000 fbe5 	bl	80087a0 <xTaskResumeAll>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d189      	bne.n	8007ef0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800801c <xQueueReceive+0x1c0>)
 8007fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	e780      	b.n	8007ef0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ff0:	f000 f8a6 	bl	8008140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ff4:	f000 fbd4 	bl	80087a0 <xTaskResumeAll>
 8007ff8:	e77a      	b.n	8007ef0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ffc:	f000 f8a0 	bl	8008140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008000:	f000 fbce 	bl	80087a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008006:	f000 f8ed 	bl	80081e4 <prvIsQueueEmpty>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	f43f af6f 	beq.w	8007ef0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008012:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008014:	4618      	mov	r0, r3
 8008016:	3730      	adds	r7, #48	@ 0x30
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	e000ed04 	.word	0xe000ed04

08008020 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008034:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10d      	bne.n	800805a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d14d      	bne.n	80080e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 ffc6 	bl	8008fdc <xTaskPriorityDisinherit>
 8008050:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	609a      	str	r2, [r3, #8]
 8008058:	e043      	b.n	80080e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d119      	bne.n	8008094 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6858      	ldr	r0, [r3, #4]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008068:	461a      	mov	r2, r3
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	f010 fb81 	bl	8018772 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008078:	441a      	add	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	429a      	cmp	r2, r3
 8008088:	d32b      	bcc.n	80080e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	605a      	str	r2, [r3, #4]
 8008092:	e026      	b.n	80080e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68d8      	ldr	r0, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	461a      	mov	r2, r3
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	f010 fb67 	bl	8018772 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ac:	425b      	negs	r3, r3
 80080ae:	441a      	add	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d207      	bcs.n	80080d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c8:	425b      	negs	r3, r3
 80080ca:	441a      	add	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d105      	bne.n	80080e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	3b01      	subs	r3, #1
 80080e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80080ea:	697b      	ldr	r3, [r7, #20]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d018      	beq.n	8008138 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810e:	441a      	add	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	429a      	cmp	r2, r3
 800811e:	d303      	bcc.n	8008128 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68d9      	ldr	r1, [r3, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008130:	461a      	mov	r2, r3
 8008132:	6838      	ldr	r0, [r7, #0]
 8008134:	f010 fb1d 	bl	8018772 <memcpy>
	}
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008148:	f001 fc96 	bl	8009a78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008152:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008154:	e011      	b.n	800817a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815a:	2b00      	cmp	r3, #0
 800815c:	d012      	beq.n	8008184 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3324      	adds	r3, #36	@ 0x24
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fd34 	bl	8008bd0 <xTaskRemoveFromEventList>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800816e:	f000 fe35 	bl	8008ddc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	3b01      	subs	r3, #1
 8008176:	b2db      	uxtb	r3, r3
 8008178:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800817a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800817e:	2b00      	cmp	r3, #0
 8008180:	dce9      	bgt.n	8008156 <prvUnlockQueue+0x16>
 8008182:	e000      	b.n	8008186 <prvUnlockQueue+0x46>
					break;
 8008184:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	22ff      	movs	r2, #255	@ 0xff
 800818a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800818e:	f001 fca5 	bl	8009adc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008192:	f001 fc71 	bl	8009a78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800819c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800819e:	e011      	b.n	80081c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d012      	beq.n	80081ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3310      	adds	r3, #16
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fd0f 	bl	8008bd0 <xTaskRemoveFromEventList>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081b8:	f000 fe10 	bl	8008ddc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	3b01      	subs	r3, #1
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dce9      	bgt.n	80081a0 <prvUnlockQueue+0x60>
 80081cc:	e000      	b.n	80081d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	22ff      	movs	r2, #255	@ 0xff
 80081d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80081d8:	f001 fc80 	bl	8009adc <vPortExitCritical>
}
 80081dc:	bf00      	nop
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081ec:	f001 fc44 	bl	8009a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e001      	b.n	8008202 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008202:	f001 fc6b 	bl	8009adc <vPortExitCritical>

	return xReturn;
 8008206:	68fb      	ldr	r3, [r7, #12]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008218:	f001 fc2e 	bl	8009a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008224:	429a      	cmp	r2, r3
 8008226:	d102      	bne.n	800822e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	e001      	b.n	8008232 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008232:	f001 fc53 	bl	8009adc <vPortExitCritical>

	return xReturn;
 8008236:	68fb      	ldr	r3, [r7, #12]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	e014      	b.n	800827a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008250:	4a0f      	ldr	r2, [pc, #60]	@ (8008290 <vQueueAddToRegistry+0x50>)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10b      	bne.n	8008274 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800825c:	490c      	ldr	r1, [pc, #48]	@ (8008290 <vQueueAddToRegistry+0x50>)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008266:	4a0a      	ldr	r2, [pc, #40]	@ (8008290 <vQueueAddToRegistry+0x50>)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	4413      	add	r3, r2
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008272:	e006      	b.n	8008282 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b07      	cmp	r3, #7
 800827e:	d9e7      	bls.n	8008250 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20005400 	.word	0x20005400

08008294 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082a4:	f001 fbe8 	bl	8009a78 <vPortEnterCritical>
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082ae:	b25b      	sxtb	r3, r3
 80082b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082b4:	d103      	bne.n	80082be <vQueueWaitForMessageRestricted+0x2a>
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082c4:	b25b      	sxtb	r3, r3
 80082c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082ca:	d103      	bne.n	80082d4 <vQueueWaitForMessageRestricted+0x40>
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082d4:	f001 fc02 	bl	8009adc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d106      	bne.n	80082ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	3324      	adds	r3, #36	@ 0x24
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fc45 	bl	8008b78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082ee:	6978      	ldr	r0, [r7, #20]
 80082f0:	f7ff ff26 	bl	8008140 <prvUnlockQueue>
	}
 80082f4:	bf00      	nop
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08e      	sub	sp, #56	@ 0x38
 8008300:	af04      	add	r7, sp, #16
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800830a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10b      	bne.n	8008328 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	623b      	str	r3, [r7, #32]
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	e7fd      	b.n	8008324 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10b      	bne.n	8008346 <xTaskCreateStatic+0x4a>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	61fb      	str	r3, [r7, #28]
}
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	e7fd      	b.n	8008342 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008346:	235c      	movs	r3, #92	@ 0x5c
 8008348:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2b5c      	cmp	r3, #92	@ 0x5c
 800834e:	d00b      	beq.n	8008368 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	61bb      	str	r3, [r7, #24]
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008368:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800836a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01e      	beq.n	80083ae <xTaskCreateStatic+0xb2>
 8008370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008372:	2b00      	cmp	r3, #0
 8008374:	d01b      	beq.n	80083ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008378:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800837e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	2202      	movs	r2, #2
 8008384:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008388:	2300      	movs	r3, #0
 800838a:	9303      	str	r3, [sp, #12]
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	9302      	str	r3, [sp, #8]
 8008390:	f107 0314 	add.w	r3, r7, #20
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f850 	bl	8008446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80083a8:	f000 f8de 	bl	8008568 <prvAddNewTaskToReadyList>
 80083ac:	e001      	b.n	80083b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083b2:	697b      	ldr	r3, [r7, #20]
	}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3728      	adds	r7, #40	@ 0x28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08c      	sub	sp, #48	@ 0x30
 80083c0:	af04      	add	r7, sp, #16
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	603b      	str	r3, [r7, #0]
 80083c8:	4613      	mov	r3, r2
 80083ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fc73 	bl	8009cbc <pvPortMalloc>
 80083d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00e      	beq.n	80083fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083de:	205c      	movs	r0, #92	@ 0x5c
 80083e0:	f001 fc6c 	bl	8009cbc <pvPortMalloc>
 80083e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80083f2:	e005      	b.n	8008400 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083f4:	6978      	ldr	r0, [r7, #20]
 80083f6:	f001 fd2f 	bl	8009e58 <vPortFree>
 80083fa:	e001      	b.n	8008400 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d017      	beq.n	8008436 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800840e:	88fa      	ldrh	r2, [r7, #6]
 8008410:	2300      	movs	r3, #0
 8008412:	9303      	str	r3, [sp, #12]
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	9302      	str	r3, [sp, #8]
 8008418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841a:	9301      	str	r3, [sp, #4]
 800841c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68b9      	ldr	r1, [r7, #8]
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f80e 	bl	8008446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800842a:	69f8      	ldr	r0, [r7, #28]
 800842c:	f000 f89c 	bl	8008568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008430:	2301      	movs	r3, #1
 8008432:	61bb      	str	r3, [r7, #24]
 8008434:	e002      	b.n	800843c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800843a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800843c:	69bb      	ldr	r3, [r7, #24]
	}
 800843e:	4618      	mov	r0, r3
 8008440:	3720      	adds	r7, #32
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b088      	sub	sp, #32
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	607a      	str	r2, [r7, #4]
 8008452:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	461a      	mov	r2, r3
 800845e:	21a5      	movs	r1, #165	@ 0xa5
 8008460:	f010 f8be 	bl	80185e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800846e:	3b01      	subs	r3, #1
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f023 0307 	bic.w	r3, r3, #7
 800847c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	f003 0307 	and.w	r3, r3, #7
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00b      	beq.n	80084a0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	617b      	str	r3, [r7, #20]
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01f      	beq.n	80084e6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]
 80084aa:	e012      	b.n	80084d2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	4413      	add	r3, r2
 80084b2:	7819      	ldrb	r1, [r3, #0]
 80084b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	4413      	add	r3, r2
 80084ba:	3334      	adds	r3, #52	@ 0x34
 80084bc:	460a      	mov	r2, r1
 80084be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	4413      	add	r3, r2
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d006      	beq.n	80084da <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	3301      	adds	r3, #1
 80084d0:	61fb      	str	r3, [r7, #28]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	2b0f      	cmp	r3, #15
 80084d6:	d9e9      	bls.n	80084ac <prvInitialiseNewTask+0x66>
 80084d8:	e000      	b.n	80084dc <prvInitialiseNewTask+0x96>
			{
				break;
 80084da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80084e4:	e003      	b.n	80084ee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f0:	2b37      	cmp	r3, #55	@ 0x37
 80084f2:	d901      	bls.n	80084f8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084f4:	2337      	movs	r3, #55	@ 0x37
 80084f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008502:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008506:	2200      	movs	r2, #0
 8008508:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	3304      	adds	r3, #4
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff f966 	bl	80077e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008516:	3318      	adds	r3, #24
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff f961 	bl	80077e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800851e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008522:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008526:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008532:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008536:	2200      	movs	r2, #0
 8008538:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	68f9      	ldr	r1, [r7, #12]
 8008546:	69b8      	ldr	r0, [r7, #24]
 8008548:	f001 f966 	bl	8009818 <pxPortInitialiseStack>
 800854c:	4602      	mov	r2, r0
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800855c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800855e:	bf00      	nop
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008570:	f001 fa82 	bl	8009a78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008574:	4b2d      	ldr	r3, [pc, #180]	@ (800862c <prvAddNewTaskToReadyList+0xc4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3301      	adds	r3, #1
 800857a:	4a2c      	ldr	r2, [pc, #176]	@ (800862c <prvAddNewTaskToReadyList+0xc4>)
 800857c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800857e:	4b2c      	ldr	r3, [pc, #176]	@ (8008630 <prvAddNewTaskToReadyList+0xc8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d109      	bne.n	800859a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008586:	4a2a      	ldr	r2, [pc, #168]	@ (8008630 <prvAddNewTaskToReadyList+0xc8>)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800858c:	4b27      	ldr	r3, [pc, #156]	@ (800862c <prvAddNewTaskToReadyList+0xc4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d110      	bne.n	80085b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008594:	f000 fc46 	bl	8008e24 <prvInitialiseTaskLists>
 8008598:	e00d      	b.n	80085b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800859a:	4b26      	ldr	r3, [pc, #152]	@ (8008634 <prvAddNewTaskToReadyList+0xcc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d109      	bne.n	80085b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085a2:	4b23      	ldr	r3, [pc, #140]	@ (8008630 <prvAddNewTaskToReadyList+0xc8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d802      	bhi.n	80085b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085b0:	4a1f      	ldr	r2, [pc, #124]	@ (8008630 <prvAddNewTaskToReadyList+0xc8>)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085b6:	4b20      	ldr	r3, [pc, #128]	@ (8008638 <prvAddNewTaskToReadyList+0xd0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3301      	adds	r3, #1
 80085bc:	4a1e      	ldr	r2, [pc, #120]	@ (8008638 <prvAddNewTaskToReadyList+0xd0>)
 80085be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008638 <prvAddNewTaskToReadyList+0xd0>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085cc:	4b1b      	ldr	r3, [pc, #108]	@ (800863c <prvAddNewTaskToReadyList+0xd4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d903      	bls.n	80085dc <prvAddNewTaskToReadyList+0x74>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d8:	4a18      	ldr	r2, [pc, #96]	@ (800863c <prvAddNewTaskToReadyList+0xd4>)
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4a15      	ldr	r2, [pc, #84]	@ (8008640 <prvAddNewTaskToReadyList+0xd8>)
 80085ea:	441a      	add	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f7ff f901 	bl	80077fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085f8:	f001 fa70 	bl	8009adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008634 <prvAddNewTaskToReadyList+0xcc>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00e      	beq.n	8008622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008604:	4b0a      	ldr	r3, [pc, #40]	@ (8008630 <prvAddNewTaskToReadyList+0xc8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860e:	429a      	cmp	r2, r3
 8008610:	d207      	bcs.n	8008622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008612:	4b0c      	ldr	r3, [pc, #48]	@ (8008644 <prvAddNewTaskToReadyList+0xdc>)
 8008614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20005914 	.word	0x20005914
 8008630:	20005440 	.word	0x20005440
 8008634:	20005920 	.word	0x20005920
 8008638:	20005930 	.word	0x20005930
 800863c:	2000591c 	.word	0x2000591c
 8008640:	20005444 	.word	0x20005444
 8008644:	e000ed04 	.word	0xe000ed04

08008648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008650:	2300      	movs	r3, #0
 8008652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d018      	beq.n	800868c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800865a:	4b14      	ldr	r3, [pc, #80]	@ (80086ac <vTaskDelay+0x64>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00b      	beq.n	800867a <vTaskDelay+0x32>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	60bb      	str	r3, [r7, #8]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800867a:	f000 f883 	bl	8008784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800867e:	2100      	movs	r1, #0
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fd1b 	bl	80090bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008686:	f000 f88b 	bl	80087a0 <xTaskResumeAll>
 800868a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d107      	bne.n	80086a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008692:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <vTaskDelay+0x68>)
 8008694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	2000593c 	.word	0x2000593c
 80086b0:	e000ed04 	.word	0xe000ed04

080086b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08a      	sub	sp, #40	@ 0x28
 80086b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086be:	2300      	movs	r3, #0
 80086c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086c2:	463a      	mov	r2, r7
 80086c4:	1d39      	adds	r1, r7, #4
 80086c6:	f107 0308 	add.w	r3, r7, #8
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff f834 	bl	8007738 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	9202      	str	r2, [sp, #8]
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	2300      	movs	r3, #0
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	2300      	movs	r3, #0
 80086e0:	460a      	mov	r2, r1
 80086e2:	4922      	ldr	r1, [pc, #136]	@ (800876c <vTaskStartScheduler+0xb8>)
 80086e4:	4822      	ldr	r0, [pc, #136]	@ (8008770 <vTaskStartScheduler+0xbc>)
 80086e6:	f7ff fe09 	bl	80082fc <xTaskCreateStatic>
 80086ea:	4603      	mov	r3, r0
 80086ec:	4a21      	ldr	r2, [pc, #132]	@ (8008774 <vTaskStartScheduler+0xc0>)
 80086ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086f0:	4b20      	ldr	r3, [pc, #128]	@ (8008774 <vTaskStartScheduler+0xc0>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086f8:	2301      	movs	r3, #1
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	e001      	b.n	8008702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086fe:	2300      	movs	r3, #0
 8008700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d102      	bne.n	800870e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008708:	f000 fd2c 	bl	8009164 <xTimerCreateTimerTask>
 800870c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d116      	bne.n	8008742 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	613b      	str	r3, [r7, #16]
}
 8008726:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008728:	4b13      	ldr	r3, [pc, #76]	@ (8008778 <vTaskStartScheduler+0xc4>)
 800872a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800872e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008730:	4b12      	ldr	r3, [pc, #72]	@ (800877c <vTaskStartScheduler+0xc8>)
 8008732:	2201      	movs	r2, #1
 8008734:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008736:	4b12      	ldr	r3, [pc, #72]	@ (8008780 <vTaskStartScheduler+0xcc>)
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800873c:	f001 f8f8 	bl	8009930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008740:	e00f      	b.n	8008762 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008748:	d10b      	bne.n	8008762 <vTaskStartScheduler+0xae>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	60fb      	str	r3, [r7, #12]
}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	e7fd      	b.n	800875e <vTaskStartScheduler+0xaa>
}
 8008762:	bf00      	nop
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	080194b8 	.word	0x080194b8
 8008770:	08008df5 	.word	0x08008df5
 8008774:	20005938 	.word	0x20005938
 8008778:	20005934 	.word	0x20005934
 800877c:	20005920 	.word	0x20005920
 8008780:	20005918 	.word	0x20005918

08008784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008788:	4b04      	ldr	r3, [pc, #16]	@ (800879c <vTaskSuspendAll+0x18>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3301      	adds	r3, #1
 800878e:	4a03      	ldr	r2, [pc, #12]	@ (800879c <vTaskSuspendAll+0x18>)
 8008790:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008792:	bf00      	nop
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	2000593c 	.word	0x2000593c

080087a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087aa:	2300      	movs	r3, #0
 80087ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087ae:	4b42      	ldr	r3, [pc, #264]	@ (80088b8 <xTaskResumeAll+0x118>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <xTaskResumeAll+0x2e>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	603b      	str	r3, [r7, #0]
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	e7fd      	b.n	80087ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087ce:	f001 f953 	bl	8009a78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087d2:	4b39      	ldr	r3, [pc, #228]	@ (80088b8 <xTaskResumeAll+0x118>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	4a37      	ldr	r2, [pc, #220]	@ (80088b8 <xTaskResumeAll+0x118>)
 80087da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087dc:	4b36      	ldr	r3, [pc, #216]	@ (80088b8 <xTaskResumeAll+0x118>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d162      	bne.n	80088aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087e4:	4b35      	ldr	r3, [pc, #212]	@ (80088bc <xTaskResumeAll+0x11c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d05e      	beq.n	80088aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087ec:	e02f      	b.n	800884e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ee:	4b34      	ldr	r3, [pc, #208]	@ (80088c0 <xTaskResumeAll+0x120>)
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3318      	adds	r3, #24
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff f85a 	bl	80078b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3304      	adds	r3, #4
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff f855 	bl	80078b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800880e:	4b2d      	ldr	r3, [pc, #180]	@ (80088c4 <xTaskResumeAll+0x124>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d903      	bls.n	800881e <xTaskResumeAll+0x7e>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881a:	4a2a      	ldr	r2, [pc, #168]	@ (80088c4 <xTaskResumeAll+0x124>)
 800881c:	6013      	str	r3, [r2, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4a27      	ldr	r2, [pc, #156]	@ (80088c8 <xTaskResumeAll+0x128>)
 800882c:	441a      	add	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3304      	adds	r3, #4
 8008832:	4619      	mov	r1, r3
 8008834:	4610      	mov	r0, r2
 8008836:	f7fe ffe0 	bl	80077fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800883e:	4b23      	ldr	r3, [pc, #140]	@ (80088cc <xTaskResumeAll+0x12c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008844:	429a      	cmp	r2, r3
 8008846:	d302      	bcc.n	800884e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008848:	4b21      	ldr	r3, [pc, #132]	@ (80088d0 <xTaskResumeAll+0x130>)
 800884a:	2201      	movs	r2, #1
 800884c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800884e:	4b1c      	ldr	r3, [pc, #112]	@ (80088c0 <xTaskResumeAll+0x120>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1cb      	bne.n	80087ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800885c:	f000 fb80 	bl	8008f60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008860:	4b1c      	ldr	r3, [pc, #112]	@ (80088d4 <xTaskResumeAll+0x134>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d010      	beq.n	800888e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800886c:	f000 f846 	bl	80088fc <xTaskIncrementTick>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008876:	4b16      	ldr	r3, [pc, #88]	@ (80088d0 <xTaskResumeAll+0x130>)
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3b01      	subs	r3, #1
 8008880:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1f1      	bne.n	800886c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008888:	4b12      	ldr	r3, [pc, #72]	@ (80088d4 <xTaskResumeAll+0x134>)
 800888a:	2200      	movs	r2, #0
 800888c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800888e:	4b10      	ldr	r3, [pc, #64]	@ (80088d0 <xTaskResumeAll+0x130>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008896:	2301      	movs	r3, #1
 8008898:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800889a:	4b0f      	ldr	r3, [pc, #60]	@ (80088d8 <xTaskResumeAll+0x138>)
 800889c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088aa:	f001 f917 	bl	8009adc <vPortExitCritical>

	return xAlreadyYielded;
 80088ae:	68bb      	ldr	r3, [r7, #8]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	2000593c 	.word	0x2000593c
 80088bc:	20005914 	.word	0x20005914
 80088c0:	200058d4 	.word	0x200058d4
 80088c4:	2000591c 	.word	0x2000591c
 80088c8:	20005444 	.word	0x20005444
 80088cc:	20005440 	.word	0x20005440
 80088d0:	20005928 	.word	0x20005928
 80088d4:	20005924 	.word	0x20005924
 80088d8:	e000ed04 	.word	0xe000ed04

080088dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088e2:	4b05      	ldr	r3, [pc, #20]	@ (80088f8 <xTaskGetTickCount+0x1c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088e8:	687b      	ldr	r3, [r7, #4]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	20005918 	.word	0x20005918

080088fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008902:	2300      	movs	r3, #0
 8008904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008906:	4b4f      	ldr	r3, [pc, #316]	@ (8008a44 <xTaskIncrementTick+0x148>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f040 8090 	bne.w	8008a30 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008910:	4b4d      	ldr	r3, [pc, #308]	@ (8008a48 <xTaskIncrementTick+0x14c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008918:	4a4b      	ldr	r2, [pc, #300]	@ (8008a48 <xTaskIncrementTick+0x14c>)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d121      	bne.n	8008968 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008924:	4b49      	ldr	r3, [pc, #292]	@ (8008a4c <xTaskIncrementTick+0x150>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00b      	beq.n	8008946 <xTaskIncrementTick+0x4a>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	603b      	str	r3, [r7, #0]
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	e7fd      	b.n	8008942 <xTaskIncrementTick+0x46>
 8008946:	4b41      	ldr	r3, [pc, #260]	@ (8008a4c <xTaskIncrementTick+0x150>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	4b40      	ldr	r3, [pc, #256]	@ (8008a50 <xTaskIncrementTick+0x154>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a3e      	ldr	r2, [pc, #248]	@ (8008a4c <xTaskIncrementTick+0x150>)
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	4a3e      	ldr	r2, [pc, #248]	@ (8008a50 <xTaskIncrementTick+0x154>)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a54 <xTaskIncrementTick+0x158>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3301      	adds	r3, #1
 8008960:	4a3c      	ldr	r2, [pc, #240]	@ (8008a54 <xTaskIncrementTick+0x158>)
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	f000 fafc 	bl	8008f60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008968:	4b3b      	ldr	r3, [pc, #236]	@ (8008a58 <xTaskIncrementTick+0x15c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	429a      	cmp	r2, r3
 8008970:	d349      	bcc.n	8008a06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008972:	4b36      	ldr	r3, [pc, #216]	@ (8008a4c <xTaskIncrementTick+0x150>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d104      	bne.n	8008986 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800897c:	4b36      	ldr	r3, [pc, #216]	@ (8008a58 <xTaskIncrementTick+0x15c>)
 800897e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008982:	601a      	str	r2, [r3, #0]
					break;
 8008984:	e03f      	b.n	8008a06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008986:	4b31      	ldr	r3, [pc, #196]	@ (8008a4c <xTaskIncrementTick+0x150>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d203      	bcs.n	80089a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800899e:	4a2e      	ldr	r2, [pc, #184]	@ (8008a58 <xTaskIncrementTick+0x15c>)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089a4:	e02f      	b.n	8008a06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	3304      	adds	r3, #4
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe ff82 	bl	80078b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d004      	beq.n	80089c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	3318      	adds	r3, #24
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe ff79 	bl	80078b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c6:	4b25      	ldr	r3, [pc, #148]	@ (8008a5c <xTaskIncrementTick+0x160>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d903      	bls.n	80089d6 <xTaskIncrementTick+0xda>
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d2:	4a22      	ldr	r2, [pc, #136]	@ (8008a5c <xTaskIncrementTick+0x160>)
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008a60 <xTaskIncrementTick+0x164>)
 80089e4:	441a      	add	r2, r3
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4619      	mov	r1, r3
 80089ec:	4610      	mov	r0, r2
 80089ee:	f7fe ff04 	bl	80077fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a64 <xTaskIncrementTick+0x168>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d3b8      	bcc.n	8008972 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008a00:	2301      	movs	r3, #1
 8008a02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a04:	e7b5      	b.n	8008972 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a06:	4b17      	ldr	r3, [pc, #92]	@ (8008a64 <xTaskIncrementTick+0x168>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a0c:	4914      	ldr	r1, [pc, #80]	@ (8008a60 <xTaskIncrementTick+0x164>)
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	440b      	add	r3, r1
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d901      	bls.n	8008a22 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a22:	4b11      	ldr	r3, [pc, #68]	@ (8008a68 <xTaskIncrementTick+0x16c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d007      	beq.n	8008a3a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	e004      	b.n	8008a3a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a30:	4b0e      	ldr	r3, [pc, #56]	@ (8008a6c <xTaskIncrementTick+0x170>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3301      	adds	r3, #1
 8008a36:	4a0d      	ldr	r2, [pc, #52]	@ (8008a6c <xTaskIncrementTick+0x170>)
 8008a38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a3a:	697b      	ldr	r3, [r7, #20]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	2000593c 	.word	0x2000593c
 8008a48:	20005918 	.word	0x20005918
 8008a4c:	200058cc 	.word	0x200058cc
 8008a50:	200058d0 	.word	0x200058d0
 8008a54:	2000592c 	.word	0x2000592c
 8008a58:	20005934 	.word	0x20005934
 8008a5c:	2000591c 	.word	0x2000591c
 8008a60:	20005444 	.word	0x20005444
 8008a64:	20005440 	.word	0x20005440
 8008a68:	20005928 	.word	0x20005928
 8008a6c:	20005924 	.word	0x20005924

08008a70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a76:	4b28      	ldr	r3, [pc, #160]	@ (8008b18 <vTaskSwitchContext+0xa8>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a7e:	4b27      	ldr	r3, [pc, #156]	@ (8008b1c <vTaskSwitchContext+0xac>)
 8008a80:	2201      	movs	r2, #1
 8008a82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a84:	e042      	b.n	8008b0c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008a86:	4b25      	ldr	r3, [pc, #148]	@ (8008b1c <vTaskSwitchContext+0xac>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a8c:	4b24      	ldr	r3, [pc, #144]	@ (8008b20 <vTaskSwitchContext+0xb0>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	e011      	b.n	8008ab8 <vTaskSwitchContext+0x48>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <vTaskSwitchContext+0x42>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	607b      	str	r3, [r7, #4]
}
 8008aac:	bf00      	nop
 8008aae:	bf00      	nop
 8008ab0:	e7fd      	b.n	8008aae <vTaskSwitchContext+0x3e>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	491a      	ldr	r1, [pc, #104]	@ (8008b24 <vTaskSwitchContext+0xb4>)
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4613      	mov	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	440b      	add	r3, r1
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0e3      	beq.n	8008a94 <vTaskSwitchContext+0x24>
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4a13      	ldr	r2, [pc, #76]	@ (8008b24 <vTaskSwitchContext+0xb4>)
 8008ad8:	4413      	add	r3, r2
 8008ada:	60bb      	str	r3, [r7, #8]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	605a      	str	r2, [r3, #4]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	3308      	adds	r3, #8
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d104      	bne.n	8008afc <vTaskSwitchContext+0x8c>
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	605a      	str	r2, [r3, #4]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	4a09      	ldr	r2, [pc, #36]	@ (8008b28 <vTaskSwitchContext+0xb8>)
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	4a06      	ldr	r2, [pc, #24]	@ (8008b20 <vTaskSwitchContext+0xb0>)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6013      	str	r3, [r2, #0]
}
 8008b0c:	bf00      	nop
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	2000593c 	.word	0x2000593c
 8008b1c:	20005928 	.word	0x20005928
 8008b20:	2000591c 	.word	0x2000591c
 8008b24:	20005444 	.word	0x20005444
 8008b28:	20005440 	.word	0x20005440

08008b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10b      	bne.n	8008b54 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	60fb      	str	r3, [r7, #12]
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	e7fd      	b.n	8008b50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b54:	4b07      	ldr	r3, [pc, #28]	@ (8008b74 <vTaskPlaceOnEventList+0x48>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3318      	adds	r3, #24
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7fe fe70 	bl	8007842 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b62:	2101      	movs	r1, #1
 8008b64:	6838      	ldr	r0, [r7, #0]
 8008b66:	f000 faa9 	bl	80090bc <prvAddCurrentTaskToDelayedList>
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20005440 	.word	0x20005440

08008b78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10b      	bne.n	8008ba2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	617b      	str	r3, [r7, #20]
}
 8008b9c:	bf00      	nop
 8008b9e:	bf00      	nop
 8008ba0:	e7fd      	b.n	8008b9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bcc <vTaskPlaceOnEventListRestricted+0x54>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3318      	adds	r3, #24
 8008ba8:	4619      	mov	r1, r3
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f7fe fe25 	bl	80077fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008bb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	68b8      	ldr	r0, [r7, #8]
 8008bc0:	f000 fa7c 	bl	80090bc <prvAddCurrentTaskToDelayedList>
	}
 8008bc4:	bf00      	nop
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20005440 	.word	0x20005440

08008bd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10b      	bne.n	8008bfe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	60fb      	str	r3, [r7, #12]
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	e7fd      	b.n	8008bfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	3318      	adds	r3, #24
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe fe56 	bl	80078b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c08:	4b1d      	ldr	r3, [pc, #116]	@ (8008c80 <xTaskRemoveFromEventList+0xb0>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d11d      	bne.n	8008c4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	3304      	adds	r3, #4
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fe fe4d 	bl	80078b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c1e:	4b19      	ldr	r3, [pc, #100]	@ (8008c84 <xTaskRemoveFromEventList+0xb4>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d903      	bls.n	8008c2e <xTaskRemoveFromEventList+0x5e>
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2a:	4a16      	ldr	r2, [pc, #88]	@ (8008c84 <xTaskRemoveFromEventList+0xb4>)
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4a13      	ldr	r2, [pc, #76]	@ (8008c88 <xTaskRemoveFromEventList+0xb8>)
 8008c3c:	441a      	add	r2, r3
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f7fe fdd8 	bl	80077fa <vListInsertEnd>
 8008c4a:	e005      	b.n	8008c58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	3318      	adds	r3, #24
 8008c50:	4619      	mov	r1, r3
 8008c52:	480e      	ldr	r0, [pc, #56]	@ (8008c8c <xTaskRemoveFromEventList+0xbc>)
 8008c54:	f7fe fdd1 	bl	80077fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c90 <xTaskRemoveFromEventList+0xc0>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d905      	bls.n	8008c72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c66:	2301      	movs	r3, #1
 8008c68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c94 <xTaskRemoveFromEventList+0xc4>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	e001      	b.n	8008c76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008c72:	2300      	movs	r3, #0
 8008c74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c76:	697b      	ldr	r3, [r7, #20]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	2000593c 	.word	0x2000593c
 8008c84:	2000591c 	.word	0x2000591c
 8008c88:	20005444 	.word	0x20005444
 8008c8c:	200058d4 	.word	0x200058d4
 8008c90:	20005440 	.word	0x20005440
 8008c94:	20005928 	.word	0x20005928

08008c98 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10b      	bne.n	8008cbe <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	60fb      	str	r3, [r7, #12]
}
 8008cb8:	bf00      	nop
 8008cba:	bf00      	nop
 8008cbc:	e7fd      	b.n	8008cba <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008cbe:	f000 fedb 	bl	8009a78 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cc2:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <vTaskSetTimeOutState+0x48>)
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008cca:	4b06      	ldr	r3, [pc, #24]	@ (8008ce4 <vTaskSetTimeOutState+0x4c>)
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008cd2:	f000 ff03 	bl	8009adc <vPortExitCritical>
}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	2000592c 	.word	0x2000592c
 8008ce4:	20005918 	.word	0x20005918

08008ce8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cf0:	4b06      	ldr	r3, [pc, #24]	@ (8008d0c <vTaskInternalSetTimeOutState+0x24>)
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cf8:	4b05      	ldr	r3, [pc, #20]	@ (8008d10 <vTaskInternalSetTimeOutState+0x28>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	605a      	str	r2, [r3, #4]
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	2000592c 	.word	0x2000592c
 8008d10:	20005918 	.word	0x20005918

08008d14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10b      	bne.n	8008d3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	613b      	str	r3, [r7, #16]
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	e7fd      	b.n	8008d38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10b      	bne.n	8008d5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	60fb      	str	r3, [r7, #12]
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	e7fd      	b.n	8008d56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008d5a:	f000 fe8d 	bl	8009a78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd4 <xTaskCheckForTimeOut+0xc0>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d76:	d102      	bne.n	8008d7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61fb      	str	r3, [r7, #28]
 8008d7c:	e023      	b.n	8008dc6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4b15      	ldr	r3, [pc, #84]	@ (8008dd8 <xTaskCheckForTimeOut+0xc4>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d007      	beq.n	8008d9a <xTaskCheckForTimeOut+0x86>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d302      	bcc.n	8008d9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d94:	2301      	movs	r3, #1
 8008d96:	61fb      	str	r3, [r7, #28]
 8008d98:	e015      	b.n	8008dc6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d20b      	bcs.n	8008dbc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	1ad2      	subs	r2, r2, r3
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff ff99 	bl	8008ce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	61fb      	str	r3, [r7, #28]
 8008dba:	e004      	b.n	8008dc6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008dc6:	f000 fe89 	bl	8009adc <vPortExitCritical>

	return xReturn;
 8008dca:	69fb      	ldr	r3, [r7, #28]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3720      	adds	r7, #32
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20005918 	.word	0x20005918
 8008dd8:	2000592c 	.word	0x2000592c

08008ddc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008de0:	4b03      	ldr	r3, [pc, #12]	@ (8008df0 <vTaskMissedYield+0x14>)
 8008de2:	2201      	movs	r2, #1
 8008de4:	601a      	str	r2, [r3, #0]
}
 8008de6:	bf00      	nop
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	20005928 	.word	0x20005928

08008df4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dfc:	f000 f852 	bl	8008ea4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e00:	4b06      	ldr	r3, [pc, #24]	@ (8008e1c <prvIdleTask+0x28>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d9f9      	bls.n	8008dfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e08:	4b05      	ldr	r3, [pc, #20]	@ (8008e20 <prvIdleTask+0x2c>)
 8008e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e18:	e7f0      	b.n	8008dfc <prvIdleTask+0x8>
 8008e1a:	bf00      	nop
 8008e1c:	20005444 	.word	0x20005444
 8008e20:	e000ed04 	.word	0xe000ed04

08008e24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	607b      	str	r3, [r7, #4]
 8008e2e:	e00c      	b.n	8008e4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	4613      	mov	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4a12      	ldr	r2, [pc, #72]	@ (8008e84 <prvInitialiseTaskLists+0x60>)
 8008e3c:	4413      	add	r3, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe fcae 	bl	80077a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3301      	adds	r3, #1
 8008e48:	607b      	str	r3, [r7, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b37      	cmp	r3, #55	@ 0x37
 8008e4e:	d9ef      	bls.n	8008e30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e50:	480d      	ldr	r0, [pc, #52]	@ (8008e88 <prvInitialiseTaskLists+0x64>)
 8008e52:	f7fe fca5 	bl	80077a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e56:	480d      	ldr	r0, [pc, #52]	@ (8008e8c <prvInitialiseTaskLists+0x68>)
 8008e58:	f7fe fca2 	bl	80077a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e5c:	480c      	ldr	r0, [pc, #48]	@ (8008e90 <prvInitialiseTaskLists+0x6c>)
 8008e5e:	f7fe fc9f 	bl	80077a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e62:	480c      	ldr	r0, [pc, #48]	@ (8008e94 <prvInitialiseTaskLists+0x70>)
 8008e64:	f7fe fc9c 	bl	80077a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e68:	480b      	ldr	r0, [pc, #44]	@ (8008e98 <prvInitialiseTaskLists+0x74>)
 8008e6a:	f7fe fc99 	bl	80077a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e9c <prvInitialiseTaskLists+0x78>)
 8008e70:	4a05      	ldr	r2, [pc, #20]	@ (8008e88 <prvInitialiseTaskLists+0x64>)
 8008e72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e74:	4b0a      	ldr	r3, [pc, #40]	@ (8008ea0 <prvInitialiseTaskLists+0x7c>)
 8008e76:	4a05      	ldr	r2, [pc, #20]	@ (8008e8c <prvInitialiseTaskLists+0x68>)
 8008e78:	601a      	str	r2, [r3, #0]
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20005444 	.word	0x20005444
 8008e88:	200058a4 	.word	0x200058a4
 8008e8c:	200058b8 	.word	0x200058b8
 8008e90:	200058d4 	.word	0x200058d4
 8008e94:	200058e8 	.word	0x200058e8
 8008e98:	20005900 	.word	0x20005900
 8008e9c:	200058cc 	.word	0x200058cc
 8008ea0:	200058d0 	.word	0x200058d0

08008ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eaa:	e019      	b.n	8008ee0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008eac:	f000 fde4 	bl	8009a78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb0:	4b10      	ldr	r3, [pc, #64]	@ (8008ef4 <prvCheckTasksWaitingTermination+0x50>)
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe fcf9 	bl	80078b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef8 <prvCheckTasksWaitingTermination+0x54>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8008ef8 <prvCheckTasksWaitingTermination+0x54>)
 8008eca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8008efc <prvCheckTasksWaitingTermination+0x58>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8008efc <prvCheckTasksWaitingTermination+0x58>)
 8008ed4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ed6:	f000 fe01 	bl	8009adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f810 	bl	8008f00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ee0:	4b06      	ldr	r3, [pc, #24]	@ (8008efc <prvCheckTasksWaitingTermination+0x58>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e1      	bne.n	8008eac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	200058e8 	.word	0x200058e8
 8008ef8:	20005914 	.word	0x20005914
 8008efc:	200058fc 	.word	0x200058fc

08008f00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d108      	bne.n	8008f24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 ff9e 	bl	8009e58 <vPortFree>
				vPortFree( pxTCB );
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 ff9b 	bl	8009e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f22:	e019      	b.n	8008f58 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d103      	bne.n	8008f36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 ff92 	bl	8009e58 <vPortFree>
	}
 8008f34:	e010      	b.n	8008f58 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d00b      	beq.n	8008f58 <prvDeleteTCB+0x58>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	60fb      	str	r3, [r7, #12]
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	e7fd      	b.n	8008f54 <prvDeleteTCB+0x54>
	}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f66:	4b0c      	ldr	r3, [pc, #48]	@ (8008f98 <prvResetNextTaskUnblockTime+0x38>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d104      	bne.n	8008f7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f70:	4b0a      	ldr	r3, [pc, #40]	@ (8008f9c <prvResetNextTaskUnblockTime+0x3c>)
 8008f72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f78:	e008      	b.n	8008f8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f7a:	4b07      	ldr	r3, [pc, #28]	@ (8008f98 <prvResetNextTaskUnblockTime+0x38>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	4a04      	ldr	r2, [pc, #16]	@ (8008f9c <prvResetNextTaskUnblockTime+0x3c>)
 8008f8a:	6013      	str	r3, [r2, #0]
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	200058cc 	.word	0x200058cc
 8008f9c:	20005934 	.word	0x20005934

08008fa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd4 <xTaskGetSchedulerState+0x34>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d102      	bne.n	8008fb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	607b      	str	r3, [r7, #4]
 8008fb2:	e008      	b.n	8008fc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fb4:	4b08      	ldr	r3, [pc, #32]	@ (8008fd8 <xTaskGetSchedulerState+0x38>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d102      	bne.n	8008fc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	607b      	str	r3, [r7, #4]
 8008fc0:	e001      	b.n	8008fc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fc6:	687b      	ldr	r3, [r7, #4]
	}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	20005920 	.word	0x20005920
 8008fd8:	2000593c 	.word	0x2000593c

08008fdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d058      	beq.n	80090a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80090b0 <xTaskPriorityDisinherit+0xd4>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d00b      	beq.n	8009014 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	60fb      	str	r3, [r7, #12]
}
 800900e:	bf00      	nop
 8009010:	bf00      	nop
 8009012:	e7fd      	b.n	8009010 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10b      	bne.n	8009034 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	60bb      	str	r3, [r7, #8]
}
 800902e:	bf00      	nop
 8009030:	bf00      	nop
 8009032:	e7fd      	b.n	8009030 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009038:	1e5a      	subs	r2, r3, #1
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009046:	429a      	cmp	r2, r3
 8009048:	d02c      	beq.n	80090a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800904e:	2b00      	cmp	r3, #0
 8009050:	d128      	bne.n	80090a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3304      	adds	r3, #4
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe fc2c 	bl	80078b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009068:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009074:	4b0f      	ldr	r3, [pc, #60]	@ (80090b4 <xTaskPriorityDisinherit+0xd8>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d903      	bls.n	8009084 <xTaskPriorityDisinherit+0xa8>
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009080:	4a0c      	ldr	r2, [pc, #48]	@ (80090b4 <xTaskPriorityDisinherit+0xd8>)
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009088:	4613      	mov	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4a09      	ldr	r2, [pc, #36]	@ (80090b8 <xTaskPriorityDisinherit+0xdc>)
 8009092:	441a      	add	r2, r3
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	3304      	adds	r3, #4
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f7fe fbad 	bl	80077fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090a0:	2301      	movs	r3, #1
 80090a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090a4:	697b      	ldr	r3, [r7, #20]
	}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20005440 	.word	0x20005440
 80090b4:	2000591c 	.word	0x2000591c
 80090b8:	20005444 	.word	0x20005444

080090bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090c6:	4b21      	ldr	r3, [pc, #132]	@ (800914c <prvAddCurrentTaskToDelayedList+0x90>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090cc:	4b20      	ldr	r3, [pc, #128]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fbee 	bl	80078b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090de:	d10a      	bne.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4819      	ldr	r0, [pc, #100]	@ (8009154 <prvAddCurrentTaskToDelayedList+0x98>)
 80090f0:	f7fe fb83 	bl	80077fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090f4:	e026      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4413      	add	r3, r2
 80090fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090fe:	4b14      	ldr	r3, [pc, #80]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	429a      	cmp	r2, r3
 800910c:	d209      	bcs.n	8009122 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800910e:	4b12      	ldr	r3, [pc, #72]	@ (8009158 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b0f      	ldr	r3, [pc, #60]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3304      	adds	r3, #4
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7fe fb91 	bl	8007842 <vListInsert>
}
 8009120:	e010      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009122:	4b0e      	ldr	r3, [pc, #56]	@ (800915c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	4b0a      	ldr	r3, [pc, #40]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe fb87 	bl	8007842 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009134:	4b0a      	ldr	r3, [pc, #40]	@ (8009160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	d202      	bcs.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800913e:	4a08      	ldr	r2, [pc, #32]	@ (8009160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6013      	str	r3, [r2, #0]
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	20005918 	.word	0x20005918
 8009150:	20005440 	.word	0x20005440
 8009154:	20005900 	.word	0x20005900
 8009158:	200058d0 	.word	0x200058d0
 800915c:	200058cc 	.word	0x200058cc
 8009160:	20005934 	.word	0x20005934

08009164 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08a      	sub	sp, #40	@ 0x28
 8009168:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800916e:	f000 fb13 	bl	8009798 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009172:	4b1d      	ldr	r3, [pc, #116]	@ (80091e8 <xTimerCreateTimerTask+0x84>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d021      	beq.n	80091be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009182:	1d3a      	adds	r2, r7, #4
 8009184:	f107 0108 	add.w	r1, r7, #8
 8009188:	f107 030c 	add.w	r3, r7, #12
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe faed 	bl	800776c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	9202      	str	r2, [sp, #8]
 800919a:	9301      	str	r3, [sp, #4]
 800919c:	2302      	movs	r3, #2
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	2300      	movs	r3, #0
 80091a2:	460a      	mov	r2, r1
 80091a4:	4911      	ldr	r1, [pc, #68]	@ (80091ec <xTimerCreateTimerTask+0x88>)
 80091a6:	4812      	ldr	r0, [pc, #72]	@ (80091f0 <xTimerCreateTimerTask+0x8c>)
 80091a8:	f7ff f8a8 	bl	80082fc <xTaskCreateStatic>
 80091ac:	4603      	mov	r3, r0
 80091ae:	4a11      	ldr	r2, [pc, #68]	@ (80091f4 <xTimerCreateTimerTask+0x90>)
 80091b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091b2:	4b10      	ldr	r3, [pc, #64]	@ (80091f4 <xTimerCreateTimerTask+0x90>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091ba:	2301      	movs	r3, #1
 80091bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10b      	bne.n	80091dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80091c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	613b      	str	r3, [r7, #16]
}
 80091d6:	bf00      	nop
 80091d8:	bf00      	nop
 80091da:	e7fd      	b.n	80091d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80091dc:	697b      	ldr	r3, [r7, #20]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20005970 	.word	0x20005970
 80091ec:	080194c0 	.word	0x080194c0
 80091f0:	08009331 	.word	0x08009331
 80091f4:	20005974 	.word	0x20005974

080091f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08a      	sub	sp, #40	@ 0x28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009206:	2300      	movs	r3, #0
 8009208:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10b      	bne.n	8009228 <xTimerGenericCommand+0x30>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	623b      	str	r3, [r7, #32]
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	e7fd      	b.n	8009224 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009228:	4b19      	ldr	r3, [pc, #100]	@ (8009290 <xTimerGenericCommand+0x98>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d02a      	beq.n	8009286 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b05      	cmp	r3, #5
 8009240:	dc18      	bgt.n	8009274 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009242:	f7ff fead 	bl	8008fa0 <xTaskGetSchedulerState>
 8009246:	4603      	mov	r3, r0
 8009248:	2b02      	cmp	r3, #2
 800924a:	d109      	bne.n	8009260 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800924c:	4b10      	ldr	r3, [pc, #64]	@ (8009290 <xTimerGenericCommand+0x98>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	f107 0110 	add.w	r1, r7, #16
 8009254:	2300      	movs	r3, #0
 8009256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009258:	f7fe fc60 	bl	8007b1c <xQueueGenericSend>
 800925c:	6278      	str	r0, [r7, #36]	@ 0x24
 800925e:	e012      	b.n	8009286 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009260:	4b0b      	ldr	r3, [pc, #44]	@ (8009290 <xTimerGenericCommand+0x98>)
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	f107 0110 	add.w	r1, r7, #16
 8009268:	2300      	movs	r3, #0
 800926a:	2200      	movs	r2, #0
 800926c:	f7fe fc56 	bl	8007b1c <xQueueGenericSend>
 8009270:	6278      	str	r0, [r7, #36]	@ 0x24
 8009272:	e008      	b.n	8009286 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009274:	4b06      	ldr	r3, [pc, #24]	@ (8009290 <xTimerGenericCommand+0x98>)
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	f107 0110 	add.w	r1, r7, #16
 800927c:	2300      	movs	r3, #0
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	f7fe fd4e 	bl	8007d20 <xQueueGenericSendFromISR>
 8009284:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009288:	4618      	mov	r0, r3
 800928a:	3728      	adds	r7, #40	@ 0x28
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20005970 	.word	0x20005970

08009294 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af02      	add	r7, sp, #8
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929e:	4b23      	ldr	r3, [pc, #140]	@ (800932c <prvProcessExpiredTimer+0x98>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fb01 	bl	80078b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d023      	beq.n	8009308 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	18d1      	adds	r1, r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	6978      	ldr	r0, [r7, #20]
 80092ce:	f000 f8d5 	bl	800947c <prvInsertTimerInActiveList>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d020      	beq.n	800931a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092d8:	2300      	movs	r3, #0
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	2300      	movs	r3, #0
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	2100      	movs	r1, #0
 80092e2:	6978      	ldr	r0, [r7, #20]
 80092e4:	f7ff ff88 	bl	80091f8 <xTimerGenericCommand>
 80092e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d114      	bne.n	800931a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	60fb      	str	r3, [r7, #12]
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	e7fd      	b.n	8009304 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800930e:	f023 0301 	bic.w	r3, r3, #1
 8009312:	b2da      	uxtb	r2, r3
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	4798      	blx	r3
}
 8009322:	bf00      	nop
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20005968 	.word	0x20005968

08009330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009338:	f107 0308 	add.w	r3, r7, #8
 800933c:	4618      	mov	r0, r3
 800933e:	f000 f859 	bl	80093f4 <prvGetNextExpireTime>
 8009342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	4619      	mov	r1, r3
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 f805 	bl	8009358 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800934e:	f000 f8d7 	bl	8009500 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009352:	bf00      	nop
 8009354:	e7f0      	b.n	8009338 <prvTimerTask+0x8>
	...

08009358 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009362:	f7ff fa0f 	bl	8008784 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009366:	f107 0308 	add.w	r3, r7, #8
 800936a:	4618      	mov	r0, r3
 800936c:	f000 f866 	bl	800943c <prvSampleTimeNow>
 8009370:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d130      	bne.n	80093da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <prvProcessTimerOrBlockTask+0x3c>
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	429a      	cmp	r2, r3
 8009384:	d806      	bhi.n	8009394 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009386:	f7ff fa0b 	bl	80087a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff ff81 	bl	8009294 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009392:	e024      	b.n	80093de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d008      	beq.n	80093ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800939a:	4b13      	ldr	r3, [pc, #76]	@ (80093e8 <prvProcessTimerOrBlockTask+0x90>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <prvProcessTimerOrBlockTask+0x50>
 80093a4:	2301      	movs	r3, #1
 80093a6:	e000      	b.n	80093aa <prvProcessTimerOrBlockTask+0x52>
 80093a8:	2300      	movs	r3, #0
 80093aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093ac:	4b0f      	ldr	r3, [pc, #60]	@ (80093ec <prvProcessTimerOrBlockTask+0x94>)
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	4619      	mov	r1, r3
 80093ba:	f7fe ff6b 	bl	8008294 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093be:	f7ff f9ef 	bl	80087a0 <xTaskResumeAll>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093c8:	4b09      	ldr	r3, [pc, #36]	@ (80093f0 <prvProcessTimerOrBlockTask+0x98>)
 80093ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	f3bf 8f6f 	isb	sy
}
 80093d8:	e001      	b.n	80093de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093da:	f7ff f9e1 	bl	80087a0 <xTaskResumeAll>
}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	2000596c 	.word	0x2000596c
 80093ec:	20005970 	.word	0x20005970
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009438 <prvGetNextExpireTime+0x44>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <prvGetNextExpireTime+0x16>
 8009406:	2201      	movs	r2, #1
 8009408:	e000      	b.n	800940c <prvGetNextExpireTime+0x18>
 800940a:	2200      	movs	r2, #0
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d105      	bne.n	8009424 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009418:	4b07      	ldr	r3, [pc, #28]	@ (8009438 <prvGetNextExpireTime+0x44>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	e001      	b.n	8009428 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009428:	68fb      	ldr	r3, [r7, #12]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20005968 	.word	0x20005968

0800943c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009444:	f7ff fa4a 	bl	80088dc <xTaskGetTickCount>
 8009448:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800944a:	4b0b      	ldr	r3, [pc, #44]	@ (8009478 <prvSampleTimeNow+0x3c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	429a      	cmp	r2, r3
 8009452:	d205      	bcs.n	8009460 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009454:	f000 f93a 	bl	80096cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	e002      	b.n	8009466 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009466:	4a04      	ldr	r2, [pc, #16]	@ (8009478 <prvSampleTimeNow+0x3c>)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800946c:	68fb      	ldr	r3, [r7, #12]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20005978 	.word	0x20005978

0800947c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
 8009488:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800948a:	2300      	movs	r3, #0
 800948c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d812      	bhi.n	80094c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	1ad2      	subs	r2, r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d302      	bcc.n	80094b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094b0:	2301      	movs	r3, #1
 80094b2:	617b      	str	r3, [r7, #20]
 80094b4:	e01b      	b.n	80094ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094b6:	4b10      	ldr	r3, [pc, #64]	@ (80094f8 <prvInsertTimerInActiveList+0x7c>)
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3304      	adds	r3, #4
 80094be:	4619      	mov	r1, r3
 80094c0:	4610      	mov	r0, r2
 80094c2:	f7fe f9be 	bl	8007842 <vListInsert>
 80094c6:	e012      	b.n	80094ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d206      	bcs.n	80094de <prvInsertTimerInActiveList+0x62>
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d302      	bcc.n	80094de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094d8:	2301      	movs	r3, #1
 80094da:	617b      	str	r3, [r7, #20]
 80094dc:	e007      	b.n	80094ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094de:	4b07      	ldr	r3, [pc, #28]	@ (80094fc <prvInsertTimerInActiveList+0x80>)
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3304      	adds	r3, #4
 80094e6:	4619      	mov	r1, r3
 80094e8:	4610      	mov	r0, r2
 80094ea:	f7fe f9aa 	bl	8007842 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094ee:	697b      	ldr	r3, [r7, #20]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	2000596c 	.word	0x2000596c
 80094fc:	20005968 	.word	0x20005968

08009500 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08e      	sub	sp, #56	@ 0x38
 8009504:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009506:	e0ce      	b.n	80096a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	da19      	bge.n	8009542 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800950e:	1d3b      	adds	r3, r7, #4
 8009510:	3304      	adds	r3, #4
 8009512:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10b      	bne.n	8009532 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	61fb      	str	r3, [r7, #28]
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	e7fd      	b.n	800952e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009538:	6850      	ldr	r0, [r2, #4]
 800953a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800953c:	6892      	ldr	r2, [r2, #8]
 800953e:	4611      	mov	r1, r2
 8009540:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	f2c0 80ae 	blt.w	80096a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800954e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009558:	3304      	adds	r3, #4
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe f9aa 	bl	80078b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009560:	463b      	mov	r3, r7
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff ff6a 	bl	800943c <prvSampleTimeNow>
 8009568:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b09      	cmp	r3, #9
 800956e:	f200 8097 	bhi.w	80096a0 <prvProcessReceivedCommands+0x1a0>
 8009572:	a201      	add	r2, pc, #4	@ (adr r2, 8009578 <prvProcessReceivedCommands+0x78>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	080095a1 	.word	0x080095a1
 800957c:	080095a1 	.word	0x080095a1
 8009580:	080095a1 	.word	0x080095a1
 8009584:	08009617 	.word	0x08009617
 8009588:	0800962b 	.word	0x0800962b
 800958c:	08009677 	.word	0x08009677
 8009590:	080095a1 	.word	0x080095a1
 8009594:	080095a1 	.word	0x080095a1
 8009598:	08009617 	.word	0x08009617
 800959c:	0800962b 	.word	0x0800962b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095a6:	f043 0301 	orr.w	r3, r3, #1
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	18d1      	adds	r1, r2, r3
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095c0:	f7ff ff5c 	bl	800947c <prvInsertTimerInActiveList>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d06c      	beq.n	80096a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d061      	beq.n	80096a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	441a      	add	r2, r3
 80095e8:	2300      	movs	r3, #0
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	2300      	movs	r3, #0
 80095ee:	2100      	movs	r1, #0
 80095f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095f2:	f7ff fe01 	bl	80091f8 <xTimerGenericCommand>
 80095f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d152      	bne.n	80096a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	61bb      	str	r3, [r7, #24]
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	e7fd      	b.n	8009612 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800961c:	f023 0301 	bic.w	r3, r3, #1
 8009620:	b2da      	uxtb	r2, r3
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009628:	e03d      	b.n	80096a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800962a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	b2da      	uxtb	r2, r3
 8009636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009638:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009640:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10b      	bne.n	8009662 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	617b      	str	r3, [r7, #20]
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	e7fd      	b.n	800965e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009664:	699a      	ldr	r2, [r3, #24]
 8009666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009668:	18d1      	adds	r1, r2, r3
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800966e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009670:	f7ff ff04 	bl	800947c <prvInsertTimerInActiveList>
					break;
 8009674:	e017      	b.n	80096a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d103      	bne.n	800968c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009686:	f000 fbe7 	bl	8009e58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800968a:	e00c      	b.n	80096a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800968c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009692:	f023 0301 	bic.w	r3, r3, #1
 8009696:	b2da      	uxtb	r2, r3
 8009698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800969e:	e002      	b.n	80096a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80096a0:	bf00      	nop
 80096a2:	e000      	b.n	80096a6 <prvProcessReceivedCommands+0x1a6>
					break;
 80096a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096a6:	4b08      	ldr	r3, [pc, #32]	@ (80096c8 <prvProcessReceivedCommands+0x1c8>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	1d39      	adds	r1, r7, #4
 80096ac:	2200      	movs	r2, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fbd4 	bl	8007e5c <xQueueReceive>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f47f af26 	bne.w	8009508 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	3730      	adds	r7, #48	@ 0x30
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20005970 	.word	0x20005970

080096cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096d2:	e049      	b.n	8009768 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096d4:	4b2e      	ldr	r3, [pc, #184]	@ (8009790 <prvSwitchTimerLists+0xc4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096de:	4b2c      	ldr	r3, [pc, #176]	@ (8009790 <prvSwitchTimerLists+0xc4>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3304      	adds	r3, #4
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe f8e1 	bl	80078b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d02f      	beq.n	8009768 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	4413      	add	r3, r2
 8009710:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	429a      	cmp	r2, r3
 8009718:	d90e      	bls.n	8009738 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009726:	4b1a      	ldr	r3, [pc, #104]	@ (8009790 <prvSwitchTimerLists+0xc4>)
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3304      	adds	r3, #4
 800972e:	4619      	mov	r1, r3
 8009730:	4610      	mov	r0, r2
 8009732:	f7fe f886 	bl	8007842 <vListInsert>
 8009736:	e017      	b.n	8009768 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009738:	2300      	movs	r3, #0
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	2300      	movs	r3, #0
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	2100      	movs	r1, #0
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff fd58 	bl	80091f8 <xTimerGenericCommand>
 8009748:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10b      	bne.n	8009768 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	603b      	str	r3, [r7, #0]
}
 8009762:	bf00      	nop
 8009764:	bf00      	nop
 8009766:	e7fd      	b.n	8009764 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009768:	4b09      	ldr	r3, [pc, #36]	@ (8009790 <prvSwitchTimerLists+0xc4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1b0      	bne.n	80096d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009772:	4b07      	ldr	r3, [pc, #28]	@ (8009790 <prvSwitchTimerLists+0xc4>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009778:	4b06      	ldr	r3, [pc, #24]	@ (8009794 <prvSwitchTimerLists+0xc8>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a04      	ldr	r2, [pc, #16]	@ (8009790 <prvSwitchTimerLists+0xc4>)
 800977e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009780:	4a04      	ldr	r2, [pc, #16]	@ (8009794 <prvSwitchTimerLists+0xc8>)
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	6013      	str	r3, [r2, #0]
}
 8009786:	bf00      	nop
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20005968 	.word	0x20005968
 8009794:	2000596c 	.word	0x2000596c

08009798 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800979e:	f000 f96b 	bl	8009a78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097a2:	4b15      	ldr	r3, [pc, #84]	@ (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d120      	bne.n	80097ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097aa:	4814      	ldr	r0, [pc, #80]	@ (80097fc <prvCheckForValidListAndQueue+0x64>)
 80097ac:	f7fd fff8 	bl	80077a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097b0:	4813      	ldr	r0, [pc, #76]	@ (8009800 <prvCheckForValidListAndQueue+0x68>)
 80097b2:	f7fd fff5 	bl	80077a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097b6:	4b13      	ldr	r3, [pc, #76]	@ (8009804 <prvCheckForValidListAndQueue+0x6c>)
 80097b8:	4a10      	ldr	r2, [pc, #64]	@ (80097fc <prvCheckForValidListAndQueue+0x64>)
 80097ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097bc:	4b12      	ldr	r3, [pc, #72]	@ (8009808 <prvCheckForValidListAndQueue+0x70>)
 80097be:	4a10      	ldr	r2, [pc, #64]	@ (8009800 <prvCheckForValidListAndQueue+0x68>)
 80097c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097c2:	2300      	movs	r3, #0
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	4b11      	ldr	r3, [pc, #68]	@ (800980c <prvCheckForValidListAndQueue+0x74>)
 80097c8:	4a11      	ldr	r2, [pc, #68]	@ (8009810 <prvCheckForValidListAndQueue+0x78>)
 80097ca:	2110      	movs	r1, #16
 80097cc:	200a      	movs	r0, #10
 80097ce:	f7fe f905 	bl	80079dc <xQueueGenericCreateStatic>
 80097d2:	4603      	mov	r3, r0
 80097d4:	4a08      	ldr	r2, [pc, #32]	@ (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097d8:	4b07      	ldr	r3, [pc, #28]	@ (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097e0:	4b05      	ldr	r3, [pc, #20]	@ (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	490b      	ldr	r1, [pc, #44]	@ (8009814 <prvCheckForValidListAndQueue+0x7c>)
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fd2a 	bl	8008240 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097ec:	f000 f976 	bl	8009adc <vPortExitCritical>
}
 80097f0:	bf00      	nop
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20005970 	.word	0x20005970
 80097fc:	20005940 	.word	0x20005940
 8009800:	20005954 	.word	0x20005954
 8009804:	20005968 	.word	0x20005968
 8009808:	2000596c 	.word	0x2000596c
 800980c:	20005a1c 	.word	0x20005a1c
 8009810:	2000597c 	.word	0x2000597c
 8009814:	080194c8 	.word	0x080194c8

08009818 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3b04      	subs	r3, #4
 8009828:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3b04      	subs	r3, #4
 8009836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f023 0201 	bic.w	r2, r3, #1
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3b04      	subs	r3, #4
 8009846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009848:	4a0c      	ldr	r2, [pc, #48]	@ (800987c <pxPortInitialiseStack+0x64>)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3b14      	subs	r3, #20
 8009852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3b04      	subs	r3, #4
 800985e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f06f 0202 	mvn.w	r2, #2
 8009866:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3b20      	subs	r3, #32
 800986c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800986e:	68fb      	ldr	r3, [r7, #12]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	08009881 	.word	0x08009881

08009880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800988a:	4b13      	ldr	r3, [pc, #76]	@ (80098d8 <prvTaskExitError+0x58>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009892:	d00b      	beq.n	80098ac <prvTaskExitError+0x2c>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	60fb      	str	r3, [r7, #12]
}
 80098a6:	bf00      	nop
 80098a8:	bf00      	nop
 80098aa:	e7fd      	b.n	80098a8 <prvTaskExitError+0x28>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	60bb      	str	r3, [r7, #8]
}
 80098be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098c0:	bf00      	nop
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d0fc      	beq.n	80098c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	20000010 	.word	0x20000010
 80098dc:	00000000 	.word	0x00000000

080098e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098e0:	4b07      	ldr	r3, [pc, #28]	@ (8009900 <pxCurrentTCBConst2>)
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	6808      	ldr	r0, [r1, #0]
 80098e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	f380 8809 	msr	PSP, r0
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f380 8811 	msr	BASEPRI, r0
 80098fa:	4770      	bx	lr
 80098fc:	f3af 8000 	nop.w

08009900 <pxCurrentTCBConst2>:
 8009900:	20005440 	.word	0x20005440
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop

08009908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009908:	4808      	ldr	r0, [pc, #32]	@ (800992c <prvPortStartFirstTask+0x24>)
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	6800      	ldr	r0, [r0, #0]
 800990e:	f380 8808 	msr	MSP, r0
 8009912:	f04f 0000 	mov.w	r0, #0
 8009916:	f380 8814 	msr	CONTROL, r0
 800991a:	b662      	cpsie	i
 800991c:	b661      	cpsie	f
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	df00      	svc	0
 8009928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800992a:	bf00      	nop
 800992c:	e000ed08 	.word	0xe000ed08

08009930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009936:	4b47      	ldr	r3, [pc, #284]	@ (8009a54 <xPortStartScheduler+0x124>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a47      	ldr	r2, [pc, #284]	@ (8009a58 <xPortStartScheduler+0x128>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d10b      	bne.n	8009958 <xPortStartScheduler+0x28>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	613b      	str	r3, [r7, #16]
}
 8009952:	bf00      	nop
 8009954:	bf00      	nop
 8009956:	e7fd      	b.n	8009954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009958:	4b3e      	ldr	r3, [pc, #248]	@ (8009a54 <xPortStartScheduler+0x124>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a5c <xPortStartScheduler+0x12c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d10b      	bne.n	800997a <xPortStartScheduler+0x4a>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	60fb      	str	r3, [r7, #12]
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop
 8009978:	e7fd      	b.n	8009976 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800997a:	4b39      	ldr	r3, [pc, #228]	@ (8009a60 <xPortStartScheduler+0x130>)
 800997c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	22ff      	movs	r2, #255	@ 0xff
 800998a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	b2db      	uxtb	r3, r3
 8009992:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800999c:	b2da      	uxtb	r2, r3
 800999e:	4b31      	ldr	r3, [pc, #196]	@ (8009a64 <xPortStartScheduler+0x134>)
 80099a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099a2:	4b31      	ldr	r3, [pc, #196]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099a4:	2207      	movs	r2, #7
 80099a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099a8:	e009      	b.n	80099be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80099aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099be:	78fb      	ldrb	r3, [r7, #3]
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099c6:	2b80      	cmp	r3, #128	@ 0x80
 80099c8:	d0ef      	beq.n	80099aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099ca:	4b27      	ldr	r3, [pc, #156]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f1c3 0307 	rsb	r3, r3, #7
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d00b      	beq.n	80099ee <xPortStartScheduler+0xbe>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	60bb      	str	r3, [r7, #8]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	021b      	lsls	r3, r3, #8
 80099f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a00:	4a19      	ldr	r2, [pc, #100]	@ (8009a68 <xPortStartScheduler+0x138>)
 8009a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a0c:	4b17      	ldr	r3, [pc, #92]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a16      	ldr	r2, [pc, #88]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a18:	4b14      	ldr	r3, [pc, #80]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a13      	ldr	r2, [pc, #76]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a24:	f000 f8da 	bl	8009bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a28:	4b11      	ldr	r3, [pc, #68]	@ (8009a70 <xPortStartScheduler+0x140>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a2e:	f000 f8f9 	bl	8009c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a32:	4b10      	ldr	r3, [pc, #64]	@ (8009a74 <xPortStartScheduler+0x144>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a0f      	ldr	r2, [pc, #60]	@ (8009a74 <xPortStartScheduler+0x144>)
 8009a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a3e:	f7ff ff63 	bl	8009908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a42:	f7ff f815 	bl	8008a70 <vTaskSwitchContext>
	prvTaskExitError();
 8009a46:	f7ff ff1b 	bl	8009880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	e000ed00 	.word	0xe000ed00
 8009a58:	410fc271 	.word	0x410fc271
 8009a5c:	410fc270 	.word	0x410fc270
 8009a60:	e000e400 	.word	0xe000e400
 8009a64:	20005a6c 	.word	0x20005a6c
 8009a68:	20005a70 	.word	0x20005a70
 8009a6c:	e000ed20 	.word	0xe000ed20
 8009a70:	20000010 	.word	0x20000010
 8009a74:	e000ef34 	.word	0xe000ef34

08009a78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	607b      	str	r3, [r7, #4]
}
 8009a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a92:	4b10      	ldr	r3, [pc, #64]	@ (8009ad4 <vPortEnterCritical+0x5c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3301      	adds	r3, #1
 8009a98:	4a0e      	ldr	r2, [pc, #56]	@ (8009ad4 <vPortEnterCritical+0x5c>)
 8009a9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad4 <vPortEnterCritical+0x5c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d110      	bne.n	8009ac6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <vPortEnterCritical+0x60>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00b      	beq.n	8009ac6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	603b      	str	r3, [r7, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	e7fd      	b.n	8009ac2 <vPortEnterCritical+0x4a>
	}
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20000010 	.word	0x20000010
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ae2:	4b12      	ldr	r3, [pc, #72]	@ (8009b2c <vPortExitCritical+0x50>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <vPortExitCritical+0x26>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	607b      	str	r3, [r7, #4]
}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	e7fd      	b.n	8009afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b02:	4b0a      	ldr	r3, [pc, #40]	@ (8009b2c <vPortExitCritical+0x50>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	4a08      	ldr	r2, [pc, #32]	@ (8009b2c <vPortExitCritical+0x50>)
 8009b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b0c:	4b07      	ldr	r3, [pc, #28]	@ (8009b2c <vPortExitCritical+0x50>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d105      	bne.n	8009b20 <vPortExitCritical+0x44>
 8009b14:	2300      	movs	r3, #0
 8009b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f383 8811 	msr	BASEPRI, r3
}
 8009b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	20000010 	.word	0x20000010

08009b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b30:	f3ef 8009 	mrs	r0, PSP
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	4b15      	ldr	r3, [pc, #84]	@ (8009b90 <pxCurrentTCBConst>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	f01e 0f10 	tst.w	lr, #16
 8009b40:	bf08      	it	eq
 8009b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	6010      	str	r0, [r2, #0]
 8009b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009b54:	f380 8811 	msr	BASEPRI, r0
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f7fe ff86 	bl	8008a70 <vTaskSwitchContext>
 8009b64:	f04f 0000 	mov.w	r0, #0
 8009b68:	f380 8811 	msr	BASEPRI, r0
 8009b6c:	bc09      	pop	{r0, r3}
 8009b6e:	6819      	ldr	r1, [r3, #0]
 8009b70:	6808      	ldr	r0, [r1, #0]
 8009b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b76:	f01e 0f10 	tst.w	lr, #16
 8009b7a:	bf08      	it	eq
 8009b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b80:	f380 8809 	msr	PSP, r0
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	f3af 8000 	nop.w

08009b90 <pxCurrentTCBConst>:
 8009b90:	20005440 	.word	0x20005440
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop

08009b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	607b      	str	r3, [r7, #4]
}
 8009bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bb2:	f7fe fea3 	bl	80088fc <xTaskIncrementTick>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bbc:	4b06      	ldr	r3, [pc, #24]	@ (8009bd8 <xPortSysTickHandler+0x40>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	f383 8811 	msr	BASEPRI, r3
}
 8009bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009be0:	4b0b      	ldr	r3, [pc, #44]	@ (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009be6:	4b0b      	ldr	r3, [pc, #44]	@ (8009c14 <vPortSetupTimerInterrupt+0x38>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bec:	4b0a      	ldr	r3, [pc, #40]	@ (8009c18 <vPortSetupTimerInterrupt+0x3c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8009c1c <vPortSetupTimerInterrupt+0x40>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	099b      	lsrs	r3, r3, #6
 8009bf8:	4a09      	ldr	r2, [pc, #36]	@ (8009c20 <vPortSetupTimerInterrupt+0x44>)
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bfe:	4b04      	ldr	r3, [pc, #16]	@ (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009c00:	2207      	movs	r2, #7
 8009c02:	601a      	str	r2, [r3, #0]
}
 8009c04:	bf00      	nop
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	e000e010 	.word	0xe000e010
 8009c14:	e000e018 	.word	0xe000e018
 8009c18:	20000004 	.word	0x20000004
 8009c1c:	10624dd3 	.word	0x10624dd3
 8009c20:	e000e014 	.word	0xe000e014

08009c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c34 <vPortEnableVFP+0x10>
 8009c28:	6801      	ldr	r1, [r0, #0]
 8009c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c2e:	6001      	str	r1, [r0, #0]
 8009c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c32:	bf00      	nop
 8009c34:	e000ed88 	.word	0xe000ed88

08009c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c3e:	f3ef 8305 	mrs	r3, IPSR
 8009c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	d915      	bls.n	8009c76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c4a:	4a18      	ldr	r2, [pc, #96]	@ (8009cac <vPortValidateInterruptPriority+0x74>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c54:	4b16      	ldr	r3, [pc, #88]	@ (8009cb0 <vPortValidateInterruptPriority+0x78>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	7afa      	ldrb	r2, [r7, #11]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d20b      	bcs.n	8009c76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	607b      	str	r3, [r7, #4]
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	e7fd      	b.n	8009c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c76:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb4 <vPortValidateInterruptPriority+0x7c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009cb8 <vPortValidateInterruptPriority+0x80>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d90b      	bls.n	8009c9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	603b      	str	r3, [r7, #0]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <vPortValidateInterruptPriority+0x62>
	}
 8009c9e:	bf00      	nop
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	e000e3f0 	.word	0xe000e3f0
 8009cb0:	20005a6c 	.word	0x20005a6c
 8009cb4:	e000ed0c 	.word	0xe000ed0c
 8009cb8:	20005a70 	.word	0x20005a70

08009cbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08a      	sub	sp, #40	@ 0x28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009cc8:	f7fe fd5c 	bl	8008784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8009e40 <pvPortMalloc+0x184>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009cd4:	f000 f924 	bl	8009f20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8009e44 <pvPortMalloc+0x188>)
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4013      	ands	r3, r2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f040 8095 	bne.w	8009e10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01e      	beq.n	8009d2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009cec:	2208      	movs	r2, #8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d015      	beq.n	8009d2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f023 0307 	bic.w	r3, r3, #7
 8009d04:	3308      	adds	r3, #8
 8009d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f003 0307 	and.w	r3, r3, #7
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00b      	beq.n	8009d2a <pvPortMalloc+0x6e>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	617b      	str	r3, [r7, #20]
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	e7fd      	b.n	8009d26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d06f      	beq.n	8009e10 <pvPortMalloc+0x154>
 8009d30:	4b45      	ldr	r3, [pc, #276]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d86a      	bhi.n	8009e10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d3a:	4b44      	ldr	r3, [pc, #272]	@ (8009e4c <pvPortMalloc+0x190>)
 8009d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d3e:	4b43      	ldr	r3, [pc, #268]	@ (8009e4c <pvPortMalloc+0x190>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d44:	e004      	b.n	8009d50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d903      	bls.n	8009d62 <pvPortMalloc+0xa6>
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1f1      	bne.n	8009d46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d62:	4b37      	ldr	r3, [pc, #220]	@ (8009e40 <pvPortMalloc+0x184>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d051      	beq.n	8009e10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2208      	movs	r2, #8
 8009d72:	4413      	add	r3, r2
 8009d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	1ad2      	subs	r2, r2, r3
 8009d86:	2308      	movs	r3, #8
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d920      	bls.n	8009dd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4413      	add	r3, r2
 8009d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f003 0307 	and.w	r3, r3, #7
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00b      	beq.n	8009db8 <pvPortMalloc+0xfc>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	e7fd      	b.n	8009db4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	1ad2      	subs	r2, r2, r3
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009dca:	69b8      	ldr	r0, [r7, #24]
 8009dcc:	f000 f90a 	bl	8009fe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	4a1b      	ldr	r2, [pc, #108]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009dde:	4b1a      	ldr	r3, [pc, #104]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e50 <pvPortMalloc+0x194>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d203      	bcs.n	8009df2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009dea:	4b17      	ldr	r3, [pc, #92]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a18      	ldr	r2, [pc, #96]	@ (8009e50 <pvPortMalloc+0x194>)
 8009df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	4b13      	ldr	r3, [pc, #76]	@ (8009e44 <pvPortMalloc+0x188>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e06:	4b13      	ldr	r3, [pc, #76]	@ (8009e54 <pvPortMalloc+0x198>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	4a11      	ldr	r2, [pc, #68]	@ (8009e54 <pvPortMalloc+0x198>)
 8009e0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e10:	f7fe fcc6 	bl	80087a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <pvPortMalloc+0x17a>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	60fb      	str	r3, [r7, #12]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <pvPortMalloc+0x176>
	return pvReturn;
 8009e36:	69fb      	ldr	r3, [r7, #28]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3728      	adds	r7, #40	@ 0x28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	2000967c 	.word	0x2000967c
 8009e44:	20009690 	.word	0x20009690
 8009e48:	20009680 	.word	0x20009680
 8009e4c:	20009674 	.word	0x20009674
 8009e50:	20009684 	.word	0x20009684
 8009e54:	20009688 	.word	0x20009688

08009e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d04f      	beq.n	8009f0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e6a:	2308      	movs	r3, #8
 8009e6c:	425b      	negs	r3, r3
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	4413      	add	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	4b25      	ldr	r3, [pc, #148]	@ (8009f14 <vPortFree+0xbc>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4013      	ands	r3, r2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10b      	bne.n	8009e9e <vPortFree+0x46>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	60fb      	str	r3, [r7, #12]
}
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
 8009e9c:	e7fd      	b.n	8009e9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00b      	beq.n	8009ebe <vPortFree+0x66>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	60bb      	str	r3, [r7, #8]
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	e7fd      	b.n	8009eba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	4b14      	ldr	r3, [pc, #80]	@ (8009f14 <vPortFree+0xbc>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01e      	beq.n	8009f0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d11a      	bne.n	8009f0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8009f14 <vPortFree+0xbc>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	43db      	mvns	r3, r3
 8009ede:	401a      	ands	r2, r3
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ee4:	f7fe fc4e 	bl	8008784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	4b0a      	ldr	r3, [pc, #40]	@ (8009f18 <vPortFree+0xc0>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	4a09      	ldr	r2, [pc, #36]	@ (8009f18 <vPortFree+0xc0>)
 8009ef4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ef6:	6938      	ldr	r0, [r7, #16]
 8009ef8:	f000 f874 	bl	8009fe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009efc:	4b07      	ldr	r3, [pc, #28]	@ (8009f1c <vPortFree+0xc4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3301      	adds	r3, #1
 8009f02:	4a06      	ldr	r2, [pc, #24]	@ (8009f1c <vPortFree+0xc4>)
 8009f04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f06:	f7fe fc4b 	bl	80087a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f0a:	bf00      	nop
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20009690 	.word	0x20009690
 8009f18:	20009680 	.word	0x20009680
 8009f1c:	2000968c 	.word	0x2000968c

08009f20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009f2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f2c:	4b27      	ldr	r3, [pc, #156]	@ (8009fcc <prvHeapInit+0xac>)
 8009f2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00c      	beq.n	8009f54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3307      	adds	r3, #7
 8009f3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 0307 	bic.w	r3, r3, #7
 8009f46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009fcc <prvHeapInit+0xac>)
 8009f50:	4413      	add	r3, r2
 8009f52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f58:	4a1d      	ldr	r2, [pc, #116]	@ (8009fd0 <prvHeapInit+0xb0>)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009fd0 <prvHeapInit+0xb0>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	4413      	add	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f6c:	2208      	movs	r2, #8
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	1a9b      	subs	r3, r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4a15      	ldr	r2, [pc, #84]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009f80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f82:	4b14      	ldr	r3, [pc, #80]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2200      	movs	r2, #0
 8009f88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f8a:	4b12      	ldr	r3, [pc, #72]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	1ad2      	subs	r2, r2, r3
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	4a0a      	ldr	r2, [pc, #40]	@ (8009fd8 <prvHeapInit+0xb8>)
 8009fae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	4a09      	ldr	r2, [pc, #36]	@ (8009fdc <prvHeapInit+0xbc>)
 8009fb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fb8:	4b09      	ldr	r3, [pc, #36]	@ (8009fe0 <prvHeapInit+0xc0>)
 8009fba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009fbe:	601a      	str	r2, [r3, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	20005a74 	.word	0x20005a74
 8009fd0:	20009674 	.word	0x20009674
 8009fd4:	2000967c 	.word	0x2000967c
 8009fd8:	20009684 	.word	0x20009684
 8009fdc:	20009680 	.word	0x20009680
 8009fe0:	20009690 	.word	0x20009690

08009fe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fec:	4b28      	ldr	r3, [pc, #160]	@ (800a090 <prvInsertBlockIntoFreeList+0xac>)
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	e002      	b.n	8009ff8 <prvInsertBlockIntoFreeList+0x14>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d8f7      	bhi.n	8009ff2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	4413      	add	r3, r2
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d108      	bne.n	800a026 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	441a      	add	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	441a      	add	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d118      	bne.n	800a06c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	4b15      	ldr	r3, [pc, #84]	@ (800a094 <prvInsertBlockIntoFreeList+0xb0>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d00d      	beq.n	800a062 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	441a      	add	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	e008      	b.n	800a074 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a062:	4b0c      	ldr	r3, [pc, #48]	@ (800a094 <prvInsertBlockIntoFreeList+0xb0>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	e003      	b.n	800a074 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d002      	beq.n	800a082 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a082:	bf00      	nop
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	20009674 	.word	0x20009674
 800a094:	2000967c 	.word	0x2000967c

0800a098 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a098:	4b04      	ldr	r3, [pc, #16]	@ (800a0ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	b10a      	cbz	r2, 800a0a2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a09e:	4803      	ldr	r0, [pc, #12]	@ (800a0ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a0a0:	4770      	bx	lr
 800a0a2:	4a03      	ldr	r2, [pc, #12]	@ (800a0b0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a0a4:	4801      	ldr	r0, [pc, #4]	@ (800a0ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a0a6:	6812      	ldr	r2, [r2, #0]
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	4770      	bx	lr
 800a0ac:	2000001c 	.word	0x2000001c
 800a0b0:	200001d0 	.word	0x200001d0

0800a0b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a0b4:	4a02      	ldr	r2, [pc, #8]	@ (800a0c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a0b6:	4b03      	ldr	r3, [pc, #12]	@ (800a0c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a0b8:	6812      	ldr	r2, [r2, #0]
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	200001d0 	.word	0x200001d0
 800a0c4:	2000001c 	.word	0x2000001c

0800a0c8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a0c8:	f003 bde4 	b.w	800dc94 <geometry_msgs__msg__Twist__init>

0800a0cc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a0cc:	f003 be06 	b.w	800dcdc <geometry_msgs__msg__Twist__fini>

0800a0d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	f000 f819 	bl	800a108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a0d6:	4c07      	ldr	r4, [pc, #28]	@ (800a0f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a0d8:	60e0      	str	r0, [r4, #12]
 800a0da:	f000 f815 	bl	800a108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a0de:	4b06      	ldr	r3, [pc, #24]	@ (800a0f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a0e0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	b10a      	cbz	r2, 800a0ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a0e6:	4804      	ldr	r0, [pc, #16]	@ (800a0f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	4a04      	ldr	r2, [pc, #16]	@ (800a0fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a0ec:	4802      	ldr	r0, [pc, #8]	@ (800a0f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a0ee:	6812      	ldr	r2, [r2, #0]
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	bd10      	pop	{r4, pc}
 800a0f4:	20000028 	.word	0x20000028
 800a0f8:	200000a0 	.word	0x200000a0
 800a0fc:	200001d4 	.word	0x200001d4

0800a100 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a100:	f003 bdf8 	b.w	800dcf4 <geometry_msgs__msg__Vector3__init>

0800a104 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a104:	f003 bdfa 	b.w	800dcfc <geometry_msgs__msg__Vector3__fini>

0800a108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a108:	4b04      	ldr	r3, [pc, #16]	@ (800a11c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	b10a      	cbz	r2, 800a112 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a10e:	4803      	ldr	r0, [pc, #12]	@ (800a11c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a110:	4770      	bx	lr
 800a112:	4a03      	ldr	r2, [pc, #12]	@ (800a120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a114:	4801      	ldr	r0, [pc, #4]	@ (800a11c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a116:	6812      	ldr	r2, [r2, #0]
 800a118:	601a      	str	r2, [r3, #0]
 800a11a:	4770      	bx	lr
 800a11c:	20000160 	.word	0x20000160
 800a120:	200001d4 	.word	0x200001d4

0800a124 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	4604      	mov	r4, r0
 800a128:	b148      	cbz	r0, 800a13e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a12a:	460d      	mov	r5, r1
 800a12c:	f000 f860 	bl	800a1f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a130:	4606      	mov	r6, r0
 800a132:	1829      	adds	r1, r5, r0
 800a134:	f104 0018 	add.w	r0, r4, #24
 800a138:	f000 f85a 	bl	800a1f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a13c:	4430      	add	r0, r6
 800a13e:	bd70      	pop	{r4, r5, r6, pc}

0800a140 <_Twist__cdr_deserialize>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	460c      	mov	r4, r1
 800a144:	b189      	cbz	r1, 800a16a <_Twist__cdr_deserialize+0x2a>
 800a146:	4605      	mov	r5, r0
 800a148:	f000 f8de 	bl	800a308 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a14c:	6843      	ldr	r3, [r0, #4]
 800a14e:	4621      	mov	r1, r4
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	4628      	mov	r0, r5
 800a154:	4798      	blx	r3
 800a156:	f000 f8d7 	bl	800a308 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a15a:	6843      	ldr	r3, [r0, #4]
 800a15c:	f104 0118 	add.w	r1, r4, #24
 800a160:	4628      	mov	r0, r5
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a168:	4718      	bx	r3
 800a16a:	4608      	mov	r0, r1
 800a16c:	bd70      	pop	{r4, r5, r6, pc}
 800a16e:	bf00      	nop

0800a170 <_Twist__cdr_serialize>:
 800a170:	b510      	push	{r4, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	9101      	str	r1, [sp, #4]
 800a176:	b190      	cbz	r0, 800a19e <_Twist__cdr_serialize+0x2e>
 800a178:	4604      	mov	r4, r0
 800a17a:	f000 f8c5 	bl	800a308 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a17e:	6843      	ldr	r3, [r0, #4]
 800a180:	9901      	ldr	r1, [sp, #4]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	4620      	mov	r0, r4
 800a186:	4798      	blx	r3
 800a188:	f000 f8be 	bl	800a308 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a18c:	6843      	ldr	r3, [r0, #4]
 800a18e:	9901      	ldr	r1, [sp, #4]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f104 0018 	add.w	r0, r4, #24
 800a196:	b002      	add	sp, #8
 800a198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a19c:	4718      	bx	r3
 800a19e:	b002      	add	sp, #8
 800a1a0:	bd10      	pop	{r4, pc}
 800a1a2:	bf00      	nop

0800a1a4 <_Twist__get_serialized_size>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	b148      	cbz	r0, 800a1be <_Twist__get_serialized_size+0x1a>
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	f000 f820 	bl	800a1f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	f104 0018 	add.w	r0, r4, #24
 800a1b8:	f000 f81a 	bl	800a1f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a1bc:	4428      	add	r0, r5
 800a1be:	bd38      	pop	{r3, r4, r5, pc}

0800a1c0 <_Twist__max_serialized_size>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	f10d 0007 	add.w	r0, sp, #7
 800a1cc:	f88d 3007 	strb.w	r3, [sp, #7]
 800a1d0:	f000 f87e 	bl	800a2d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	4601      	mov	r1, r0
 800a1d8:	f10d 0007 	add.w	r0, sp, #7
 800a1dc:	f000 f878 	bl	800a2d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a1e0:	4420      	add	r0, r4
 800a1e2:	b002      	add	sp, #8
 800a1e4:	bd10      	pop	{r4, pc}
 800a1e6:	bf00      	nop

0800a1e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a1e8:	4800      	ldr	r0, [pc, #0]	@ (800a1ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a1ea:	4770      	bx	lr
 800a1ec:	2000016c 	.word	0x2000016c

0800a1f0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a1f0:	b1b8      	cbz	r0, 800a222 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a1f2:	b538      	push	{r3, r4, r5, lr}
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	2108      	movs	r1, #8
 800a1fa:	f001 fb9d 	bl	800b938 <ucdr_alignment>
 800a1fe:	f105 0308 	add.w	r3, r5, #8
 800a202:	181c      	adds	r4, r3, r0
 800a204:	2108      	movs	r1, #8
 800a206:	4620      	mov	r0, r4
 800a208:	f001 fb96 	bl	800b938 <ucdr_alignment>
 800a20c:	3008      	adds	r0, #8
 800a20e:	4404      	add	r4, r0
 800a210:	2108      	movs	r1, #8
 800a212:	4620      	mov	r0, r4
 800a214:	f001 fb90 	bl	800b938 <ucdr_alignment>
 800a218:	f1c5 0508 	rsb	r5, r5, #8
 800a21c:	4428      	add	r0, r5
 800a21e:	4420      	add	r0, r4
 800a220:	bd38      	pop	{r3, r4, r5, pc}
 800a222:	4770      	bx	lr

0800a224 <_Vector3__cdr_deserialize>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	460c      	mov	r4, r1
 800a228:	b171      	cbz	r1, 800a248 <_Vector3__cdr_deserialize+0x24>
 800a22a:	4605      	mov	r5, r0
 800a22c:	f001 f998 	bl	800b560 <ucdr_deserialize_double>
 800a230:	f104 0108 	add.w	r1, r4, #8
 800a234:	4628      	mov	r0, r5
 800a236:	f001 f993 	bl	800b560 <ucdr_deserialize_double>
 800a23a:	f104 0110 	add.w	r1, r4, #16
 800a23e:	4628      	mov	r0, r5
 800a240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a244:	f001 b98c 	b.w	800b560 <ucdr_deserialize_double>
 800a248:	4608      	mov	r0, r1
 800a24a:	bd38      	pop	{r3, r4, r5, pc}

0800a24c <_Vector3__cdr_serialize>:
 800a24c:	b198      	cbz	r0, 800a276 <_Vector3__cdr_serialize+0x2a>
 800a24e:	b538      	push	{r3, r4, r5, lr}
 800a250:	ed90 0b00 	vldr	d0, [r0]
 800a254:	460d      	mov	r5, r1
 800a256:	4604      	mov	r4, r0
 800a258:	4608      	mov	r0, r1
 800a25a:	f000 ffdf 	bl	800b21c <ucdr_serialize_double>
 800a25e:	ed94 0b02 	vldr	d0, [r4, #8]
 800a262:	4628      	mov	r0, r5
 800a264:	f000 ffda 	bl	800b21c <ucdr_serialize_double>
 800a268:	ed94 0b04 	vldr	d0, [r4, #16]
 800a26c:	4628      	mov	r0, r5
 800a26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a272:	f000 bfd3 	b.w	800b21c <ucdr_serialize_double>
 800a276:	4770      	bx	lr

0800a278 <_Vector3__get_serialized_size>:
 800a278:	b198      	cbz	r0, 800a2a2 <_Vector3__get_serialized_size+0x2a>
 800a27a:	b510      	push	{r4, lr}
 800a27c:	2108      	movs	r1, #8
 800a27e:	2000      	movs	r0, #0
 800a280:	f001 fb5a 	bl	800b938 <ucdr_alignment>
 800a284:	f100 0408 	add.w	r4, r0, #8
 800a288:	2108      	movs	r1, #8
 800a28a:	4620      	mov	r0, r4
 800a28c:	f001 fb54 	bl	800b938 <ucdr_alignment>
 800a290:	3008      	adds	r0, #8
 800a292:	4404      	add	r4, r0
 800a294:	2108      	movs	r1, #8
 800a296:	4620      	mov	r0, r4
 800a298:	f001 fb4e 	bl	800b938 <ucdr_alignment>
 800a29c:	3008      	adds	r0, #8
 800a29e:	4420      	add	r0, r4
 800a2a0:	bd10      	pop	{r4, pc}
 800a2a2:	4770      	bx	lr

0800a2a4 <_Vector3__max_serialized_size>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	2108      	movs	r1, #8
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	f001 fb45 	bl	800b938 <ucdr_alignment>
 800a2ae:	f100 0508 	add.w	r5, r0, #8
 800a2b2:	2108      	movs	r1, #8
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	f001 fb3f 	bl	800b938 <ucdr_alignment>
 800a2ba:	f100 0408 	add.w	r4, r0, #8
 800a2be:	442c      	add	r4, r5
 800a2c0:	2108      	movs	r1, #8
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f001 fb38 	bl	800b938 <ucdr_alignment>
 800a2c8:	3008      	adds	r0, #8
 800a2ca:	4420      	add	r0, r4
 800a2cc:	bd38      	pop	{r3, r4, r5, pc}
 800a2ce:	bf00      	nop

0800a2d0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	7003      	strb	r3, [r0, #0]
 800a2d8:	2108      	movs	r1, #8
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f001 fb2c 	bl	800b938 <ucdr_alignment>
 800a2e0:	f104 0508 	add.w	r5, r4, #8
 800a2e4:	1946      	adds	r6, r0, r5
 800a2e6:	2108      	movs	r1, #8
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	f001 fb25 	bl	800b938 <ucdr_alignment>
 800a2ee:	f100 0508 	add.w	r5, r0, #8
 800a2f2:	4435      	add	r5, r6
 800a2f4:	2108      	movs	r1, #8
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f001 fb1e 	bl	800b938 <ucdr_alignment>
 800a2fc:	f1c4 0408 	rsb	r4, r4, #8
 800a300:	4420      	add	r0, r4
 800a302:	4428      	add	r0, r5
 800a304:	bd70      	pop	{r4, r5, r6, pc}
 800a306:	bf00      	nop

0800a308 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a308:	4800      	ldr	r0, [pc, #0]	@ (800a30c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a30a:	4770      	bx	lr
 800a30c:	20000194 	.word	0x20000194

0800a310 <ucdr_serialize_bool>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	460d      	mov	r5, r1
 800a314:	2101      	movs	r1, #1
 800a316:	4604      	mov	r4, r0
 800a318:	f001 fac2 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a31c:	b148      	cbz	r0, 800a332 <ucdr_serialize_bool+0x22>
 800a31e:	68a3      	ldr	r3, [r4, #8]
 800a320:	701d      	strb	r5, [r3, #0]
 800a322:	68a2      	ldr	r2, [r4, #8]
 800a324:	6923      	ldr	r3, [r4, #16]
 800a326:	2101      	movs	r1, #1
 800a328:	440a      	add	r2, r1
 800a32a:	440b      	add	r3, r1
 800a32c:	60a2      	str	r2, [r4, #8]
 800a32e:	6123      	str	r3, [r4, #16]
 800a330:	7561      	strb	r1, [r4, #21]
 800a332:	7da0      	ldrb	r0, [r4, #22]
 800a334:	f080 0001 	eor.w	r0, r0, #1
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	bf00      	nop

0800a33c <ucdr_deserialize_bool>:
 800a33c:	b538      	push	{r3, r4, r5, lr}
 800a33e:	460d      	mov	r5, r1
 800a340:	2101      	movs	r1, #1
 800a342:	4604      	mov	r4, r0
 800a344:	f001 faac 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a348:	b160      	cbz	r0, 800a364 <ucdr_deserialize_bool+0x28>
 800a34a:	68a2      	ldr	r2, [r4, #8]
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a352:	3900      	subs	r1, #0
 800a354:	bf18      	it	ne
 800a356:	2101      	movne	r1, #1
 800a358:	7029      	strb	r1, [r5, #0]
 800a35a:	3301      	adds	r3, #1
 800a35c:	2101      	movs	r1, #1
 800a35e:	60a2      	str	r2, [r4, #8]
 800a360:	6123      	str	r3, [r4, #16]
 800a362:	7561      	strb	r1, [r4, #21]
 800a364:	7da0      	ldrb	r0, [r4, #22]
 800a366:	f080 0001 	eor.w	r0, r0, #1
 800a36a:	bd38      	pop	{r3, r4, r5, pc}

0800a36c <ucdr_serialize_uint8_t>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	460d      	mov	r5, r1
 800a370:	2101      	movs	r1, #1
 800a372:	4604      	mov	r4, r0
 800a374:	f001 fa94 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a378:	b148      	cbz	r0, 800a38e <ucdr_serialize_uint8_t+0x22>
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	701d      	strb	r5, [r3, #0]
 800a37e:	68a2      	ldr	r2, [r4, #8]
 800a380:	6923      	ldr	r3, [r4, #16]
 800a382:	2101      	movs	r1, #1
 800a384:	440a      	add	r2, r1
 800a386:	440b      	add	r3, r1
 800a388:	60a2      	str	r2, [r4, #8]
 800a38a:	6123      	str	r3, [r4, #16]
 800a38c:	7561      	strb	r1, [r4, #21]
 800a38e:	7da0      	ldrb	r0, [r4, #22]
 800a390:	f080 0001 	eor.w	r0, r0, #1
 800a394:	bd38      	pop	{r3, r4, r5, pc}
 800a396:	bf00      	nop

0800a398 <ucdr_deserialize_uint8_t>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	460d      	mov	r5, r1
 800a39c:	2101      	movs	r1, #1
 800a39e:	4604      	mov	r4, r0
 800a3a0:	f001 fa7e 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a3a4:	b150      	cbz	r0, 800a3bc <ucdr_deserialize_uint8_t+0x24>
 800a3a6:	68a3      	ldr	r3, [r4, #8]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	702b      	strb	r3, [r5, #0]
 800a3ac:	68a2      	ldr	r2, [r4, #8]
 800a3ae:	6923      	ldr	r3, [r4, #16]
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	440a      	add	r2, r1
 800a3b4:	440b      	add	r3, r1
 800a3b6:	60a2      	str	r2, [r4, #8]
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	7561      	strb	r1, [r4, #21]
 800a3bc:	7da0      	ldrb	r0, [r4, #22]
 800a3be:	f080 0001 	eor.w	r0, r0, #1
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}

0800a3c4 <ucdr_serialize_uint16_t>:
 800a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	2102      	movs	r1, #2
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a3d4:	f001 fab8 	bl	800b948 <ucdr_buffer_alignment>
 800a3d8:	4601      	mov	r1, r0
 800a3da:	4620      	mov	r0, r4
 800a3dc:	7d67      	ldrb	r7, [r4, #21]
 800a3de:	f001 faf7 	bl	800b9d0 <ucdr_advance_buffer>
 800a3e2:	2102      	movs	r1, #2
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f001 fa4f 	bl	800b888 <ucdr_check_buffer_available_for>
 800a3ea:	bb78      	cbnz	r0, 800a44c <ucdr_serialize_uint16_t+0x88>
 800a3ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a3f0:	42ab      	cmp	r3, r5
 800a3f2:	d926      	bls.n	800a442 <ucdr_serialize_uint16_t+0x7e>
 800a3f4:	1b5e      	subs	r6, r3, r5
 800a3f6:	60a3      	str	r3, [r4, #8]
 800a3f8:	6923      	ldr	r3, [r4, #16]
 800a3fa:	f1c6 0802 	rsb	r8, r6, #2
 800a3fe:	4433      	add	r3, r6
 800a400:	6123      	str	r3, [r4, #16]
 800a402:	4641      	mov	r1, r8
 800a404:	4620      	mov	r0, r4
 800a406:	f001 fa4b 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d03b      	beq.n	800a486 <ucdr_serialize_uint16_t+0xc2>
 800a40e:	7d23      	ldrb	r3, [r4, #20]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d04a      	beq.n	800a4aa <ucdr_serialize_uint16_t+0xe6>
 800a414:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a418:	702b      	strb	r3, [r5, #0]
 800a41a:	2e00      	cmp	r6, #0
 800a41c:	d040      	beq.n	800a4a0 <ucdr_serialize_uint16_t+0xdc>
 800a41e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a422:	706b      	strb	r3, [r5, #1]
 800a424:	6923      	ldr	r3, [r4, #16]
 800a426:	68a2      	ldr	r2, [r4, #8]
 800a428:	7da0      	ldrb	r0, [r4, #22]
 800a42a:	3302      	adds	r3, #2
 800a42c:	1b9e      	subs	r6, r3, r6
 800a42e:	4442      	add	r2, r8
 800a430:	2302      	movs	r3, #2
 800a432:	f080 0001 	eor.w	r0, r0, #1
 800a436:	60a2      	str	r2, [r4, #8]
 800a438:	6126      	str	r6, [r4, #16]
 800a43a:	7563      	strb	r3, [r4, #21]
 800a43c:	b002      	add	sp, #8
 800a43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a442:	2102      	movs	r1, #2
 800a444:	4620      	mov	r0, r4
 800a446:	f001 fa2b 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a44a:	b190      	cbz	r0, 800a472 <ucdr_serialize_uint16_t+0xae>
 800a44c:	7d23      	ldrb	r3, [r4, #20]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	68a3      	ldr	r3, [r4, #8]
 800a452:	d014      	beq.n	800a47e <ucdr_serialize_uint16_t+0xba>
 800a454:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a458:	701a      	strb	r2, [r3, #0]
 800a45a:	68a3      	ldr	r3, [r4, #8]
 800a45c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a460:	705a      	strb	r2, [r3, #1]
 800a462:	68a2      	ldr	r2, [r4, #8]
 800a464:	6923      	ldr	r3, [r4, #16]
 800a466:	3202      	adds	r2, #2
 800a468:	3302      	adds	r3, #2
 800a46a:	2102      	movs	r1, #2
 800a46c:	60a2      	str	r2, [r4, #8]
 800a46e:	6123      	str	r3, [r4, #16]
 800a470:	7561      	strb	r1, [r4, #21]
 800a472:	7da0      	ldrb	r0, [r4, #22]
 800a474:	f080 0001 	eor.w	r0, r0, #1
 800a478:	b002      	add	sp, #8
 800a47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a47e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a482:	801a      	strh	r2, [r3, #0]
 800a484:	e7ed      	b.n	800a462 <ucdr_serialize_uint16_t+0x9e>
 800a486:	68a2      	ldr	r2, [r4, #8]
 800a488:	6923      	ldr	r3, [r4, #16]
 800a48a:	7da0      	ldrb	r0, [r4, #22]
 800a48c:	7567      	strb	r7, [r4, #21]
 800a48e:	1b92      	subs	r2, r2, r6
 800a490:	1b9b      	subs	r3, r3, r6
 800a492:	f080 0001 	eor.w	r0, r0, #1
 800a496:	60a2      	str	r2, [r4, #8]
 800a498:	6123      	str	r3, [r4, #16]
 800a49a:	b002      	add	sp, #8
 800a49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a0:	68a3      	ldr	r3, [r4, #8]
 800a4a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4a6:	701a      	strb	r2, [r3, #0]
 800a4a8:	e7bc      	b.n	800a424 <ucdr_serialize_uint16_t+0x60>
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f10d 0506 	add.w	r5, sp, #6
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	4632      	mov	r2, r6
 800a4b4:	f00e f95d 	bl	8018772 <memcpy>
 800a4b8:	68a0      	ldr	r0, [r4, #8]
 800a4ba:	4642      	mov	r2, r8
 800a4bc:	19a9      	adds	r1, r5, r6
 800a4be:	f00e f958 	bl	8018772 <memcpy>
 800a4c2:	e7af      	b.n	800a424 <ucdr_serialize_uint16_t+0x60>

0800a4c4 <ucdr_serialize_endian_uint16_t>:
 800a4c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	2102      	movs	r1, #2
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a4d4:	f001 fa38 	bl	800b948 <ucdr_buffer_alignment>
 800a4d8:	4601      	mov	r1, r0
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a4e0:	f001 fa76 	bl	800b9d0 <ucdr_advance_buffer>
 800a4e4:	2102      	movs	r1, #2
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f001 f9ce 	bl	800b888 <ucdr_check_buffer_available_for>
 800a4ec:	bb70      	cbnz	r0, 800a54c <ucdr_serialize_endian_uint16_t+0x88>
 800a4ee:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a4f2:	42be      	cmp	r6, r7
 800a4f4:	d925      	bls.n	800a542 <ucdr_serialize_endian_uint16_t+0x7e>
 800a4f6:	6923      	ldr	r3, [r4, #16]
 800a4f8:	60a6      	str	r6, [r4, #8]
 800a4fa:	1bf6      	subs	r6, r6, r7
 800a4fc:	4433      	add	r3, r6
 800a4fe:	f1c6 0902 	rsb	r9, r6, #2
 800a502:	6123      	str	r3, [r4, #16]
 800a504:	4649      	mov	r1, r9
 800a506:	4620      	mov	r0, r4
 800a508:	f001 f9ca 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d039      	beq.n	800a584 <ucdr_serialize_endian_uint16_t+0xc0>
 800a510:	2d01      	cmp	r5, #1
 800a512:	d04a      	beq.n	800a5aa <ucdr_serialize_endian_uint16_t+0xe6>
 800a514:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a518:	703b      	strb	r3, [r7, #0]
 800a51a:	2e00      	cmp	r6, #0
 800a51c:	d040      	beq.n	800a5a0 <ucdr_serialize_endian_uint16_t+0xdc>
 800a51e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a522:	707b      	strb	r3, [r7, #1]
 800a524:	6923      	ldr	r3, [r4, #16]
 800a526:	68a2      	ldr	r2, [r4, #8]
 800a528:	7da0      	ldrb	r0, [r4, #22]
 800a52a:	3302      	adds	r3, #2
 800a52c:	444a      	add	r2, r9
 800a52e:	1b9b      	subs	r3, r3, r6
 800a530:	2102      	movs	r1, #2
 800a532:	f080 0001 	eor.w	r0, r0, #1
 800a536:	60a2      	str	r2, [r4, #8]
 800a538:	6123      	str	r3, [r4, #16]
 800a53a:	7561      	strb	r1, [r4, #21]
 800a53c:	b003      	add	sp, #12
 800a53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a542:	2102      	movs	r1, #2
 800a544:	4620      	mov	r0, r4
 800a546:	f001 f9ab 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a54a:	b188      	cbz	r0, 800a570 <ucdr_serialize_endian_uint16_t+0xac>
 800a54c:	2d01      	cmp	r5, #1
 800a54e:	68a3      	ldr	r3, [r4, #8]
 800a550:	d014      	beq.n	800a57c <ucdr_serialize_endian_uint16_t+0xb8>
 800a552:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a556:	701a      	strb	r2, [r3, #0]
 800a558:	68a3      	ldr	r3, [r4, #8]
 800a55a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a55e:	705a      	strb	r2, [r3, #1]
 800a560:	68a2      	ldr	r2, [r4, #8]
 800a562:	6923      	ldr	r3, [r4, #16]
 800a564:	3202      	adds	r2, #2
 800a566:	3302      	adds	r3, #2
 800a568:	2102      	movs	r1, #2
 800a56a:	60a2      	str	r2, [r4, #8]
 800a56c:	6123      	str	r3, [r4, #16]
 800a56e:	7561      	strb	r1, [r4, #21]
 800a570:	7da0      	ldrb	r0, [r4, #22]
 800a572:	f080 0001 	eor.w	r0, r0, #1
 800a576:	b003      	add	sp, #12
 800a578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a57c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a580:	801a      	strh	r2, [r3, #0]
 800a582:	e7ed      	b.n	800a560 <ucdr_serialize_endian_uint16_t+0x9c>
 800a584:	68a2      	ldr	r2, [r4, #8]
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	7da0      	ldrb	r0, [r4, #22]
 800a58a:	f884 8015 	strb.w	r8, [r4, #21]
 800a58e:	1b92      	subs	r2, r2, r6
 800a590:	1b9b      	subs	r3, r3, r6
 800a592:	f080 0001 	eor.w	r0, r0, #1
 800a596:	60a2      	str	r2, [r4, #8]
 800a598:	6123      	str	r3, [r4, #16]
 800a59a:	b003      	add	sp, #12
 800a59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5a0:	68a3      	ldr	r3, [r4, #8]
 800a5a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a5a6:	701a      	strb	r2, [r3, #0]
 800a5a8:	e7bc      	b.n	800a524 <ucdr_serialize_endian_uint16_t+0x60>
 800a5aa:	f10d 0506 	add.w	r5, sp, #6
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	f00e f8dd 	bl	8018772 <memcpy>
 800a5b8:	68a0      	ldr	r0, [r4, #8]
 800a5ba:	464a      	mov	r2, r9
 800a5bc:	19a9      	adds	r1, r5, r6
 800a5be:	f00e f8d8 	bl	8018772 <memcpy>
 800a5c2:	e7af      	b.n	800a524 <ucdr_serialize_endian_uint16_t+0x60>

0800a5c4 <ucdr_deserialize_uint16_t>:
 800a5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c8:	460d      	mov	r5, r1
 800a5ca:	2102      	movs	r1, #2
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	f001 f9bb 	bl	800b948 <ucdr_buffer_alignment>
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a5da:	f001 f9f9 	bl	800b9d0 <ucdr_advance_buffer>
 800a5de:	2102      	movs	r1, #2
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f001 f951 	bl	800b888 <ucdr_check_buffer_available_for>
 800a5e6:	bb60      	cbnz	r0, 800a642 <ucdr_deserialize_uint16_t+0x7e>
 800a5e8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a5ec:	42be      	cmp	r6, r7
 800a5ee:	d923      	bls.n	800a638 <ucdr_deserialize_uint16_t+0x74>
 800a5f0:	6923      	ldr	r3, [r4, #16]
 800a5f2:	60a6      	str	r6, [r4, #8]
 800a5f4:	1bf6      	subs	r6, r6, r7
 800a5f6:	4433      	add	r3, r6
 800a5f8:	f1c6 0902 	rsb	r9, r6, #2
 800a5fc:	6123      	str	r3, [r4, #16]
 800a5fe:	4649      	mov	r1, r9
 800a600:	4620      	mov	r0, r4
 800a602:	f001 f94d 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a606:	2800      	cmp	r0, #0
 800a608:	d034      	beq.n	800a674 <ucdr_deserialize_uint16_t+0xb0>
 800a60a:	7d23      	ldrb	r3, [r4, #20]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d042      	beq.n	800a696 <ucdr_deserialize_uint16_t+0xd2>
 800a610:	787b      	ldrb	r3, [r7, #1]
 800a612:	702b      	strb	r3, [r5, #0]
 800a614:	2e00      	cmp	r6, #0
 800a616:	d03a      	beq.n	800a68e <ucdr_deserialize_uint16_t+0xca>
 800a618:	783b      	ldrb	r3, [r7, #0]
 800a61a:	706b      	strb	r3, [r5, #1]
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	68a2      	ldr	r2, [r4, #8]
 800a620:	7da0      	ldrb	r0, [r4, #22]
 800a622:	2102      	movs	r1, #2
 800a624:	3302      	adds	r3, #2
 800a626:	444a      	add	r2, r9
 800a628:	1b9b      	subs	r3, r3, r6
 800a62a:	7561      	strb	r1, [r4, #21]
 800a62c:	60a2      	str	r2, [r4, #8]
 800a62e:	6123      	str	r3, [r4, #16]
 800a630:	f080 0001 	eor.w	r0, r0, #1
 800a634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a638:	2102      	movs	r1, #2
 800a63a:	4620      	mov	r0, r4
 800a63c:	f001 f930 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a640:	b180      	cbz	r0, 800a664 <ucdr_deserialize_uint16_t+0xa0>
 800a642:	7d23      	ldrb	r3, [r4, #20]
 800a644:	2b01      	cmp	r3, #1
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	d011      	beq.n	800a66e <ucdr_deserialize_uint16_t+0xaa>
 800a64a:	785b      	ldrb	r3, [r3, #1]
 800a64c:	702b      	strb	r3, [r5, #0]
 800a64e:	68a3      	ldr	r3, [r4, #8]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	706b      	strb	r3, [r5, #1]
 800a654:	68a2      	ldr	r2, [r4, #8]
 800a656:	6923      	ldr	r3, [r4, #16]
 800a658:	3202      	adds	r2, #2
 800a65a:	3302      	adds	r3, #2
 800a65c:	2102      	movs	r1, #2
 800a65e:	60a2      	str	r2, [r4, #8]
 800a660:	6123      	str	r3, [r4, #16]
 800a662:	7561      	strb	r1, [r4, #21]
 800a664:	7da0      	ldrb	r0, [r4, #22]
 800a666:	f080 0001 	eor.w	r0, r0, #1
 800a66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	802b      	strh	r3, [r5, #0]
 800a672:	e7ef      	b.n	800a654 <ucdr_deserialize_uint16_t+0x90>
 800a674:	68a2      	ldr	r2, [r4, #8]
 800a676:	6923      	ldr	r3, [r4, #16]
 800a678:	7da0      	ldrb	r0, [r4, #22]
 800a67a:	f884 8015 	strb.w	r8, [r4, #21]
 800a67e:	1b92      	subs	r2, r2, r6
 800a680:	1b9b      	subs	r3, r3, r6
 800a682:	60a2      	str	r2, [r4, #8]
 800a684:	6123      	str	r3, [r4, #16]
 800a686:	f080 0001 	eor.w	r0, r0, #1
 800a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68e:	68a3      	ldr	r3, [r4, #8]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	706b      	strb	r3, [r5, #1]
 800a694:	e7c2      	b.n	800a61c <ucdr_deserialize_uint16_t+0x58>
 800a696:	4639      	mov	r1, r7
 800a698:	4632      	mov	r2, r6
 800a69a:	4628      	mov	r0, r5
 800a69c:	f00e f869 	bl	8018772 <memcpy>
 800a6a0:	68a1      	ldr	r1, [r4, #8]
 800a6a2:	464a      	mov	r2, r9
 800a6a4:	19a8      	adds	r0, r5, r6
 800a6a6:	f00e f864 	bl	8018772 <memcpy>
 800a6aa:	e7b7      	b.n	800a61c <ucdr_deserialize_uint16_t+0x58>

0800a6ac <ucdr_deserialize_endian_uint16_t>:
 800a6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b0:	460e      	mov	r6, r1
 800a6b2:	2102      	movs	r1, #2
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	4615      	mov	r5, r2
 800a6b8:	f001 f946 	bl	800b948 <ucdr_buffer_alignment>
 800a6bc:	4601      	mov	r1, r0
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a6c4:	f001 f984 	bl	800b9d0 <ucdr_advance_buffer>
 800a6c8:	2102      	movs	r1, #2
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f001 f8dc 	bl	800b888 <ucdr_check_buffer_available_for>
 800a6d0:	bb70      	cbnz	r0, 800a730 <ucdr_deserialize_endian_uint16_t+0x84>
 800a6d2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a6d6:	4547      	cmp	r7, r8
 800a6d8:	d925      	bls.n	800a726 <ucdr_deserialize_endian_uint16_t+0x7a>
 800a6da:	6923      	ldr	r3, [r4, #16]
 800a6dc:	60a7      	str	r7, [r4, #8]
 800a6de:	eba7 0708 	sub.w	r7, r7, r8
 800a6e2:	443b      	add	r3, r7
 800a6e4:	f1c7 0a02 	rsb	sl, r7, #2
 800a6e8:	6123      	str	r3, [r4, #16]
 800a6ea:	4651      	mov	r1, sl
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f001 f8d7 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d034      	beq.n	800a760 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a6f6:	2e01      	cmp	r6, #1
 800a6f8:	d043      	beq.n	800a782 <ucdr_deserialize_endian_uint16_t+0xd6>
 800a6fa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a6fe:	702b      	strb	r3, [r5, #0]
 800a700:	2f00      	cmp	r7, #0
 800a702:	d03a      	beq.n	800a77a <ucdr_deserialize_endian_uint16_t+0xce>
 800a704:	f898 3000 	ldrb.w	r3, [r8]
 800a708:	706b      	strb	r3, [r5, #1]
 800a70a:	6923      	ldr	r3, [r4, #16]
 800a70c:	68a2      	ldr	r2, [r4, #8]
 800a70e:	7da0      	ldrb	r0, [r4, #22]
 800a710:	2102      	movs	r1, #2
 800a712:	3302      	adds	r3, #2
 800a714:	4452      	add	r2, sl
 800a716:	1bdb      	subs	r3, r3, r7
 800a718:	7561      	strb	r1, [r4, #21]
 800a71a:	60a2      	str	r2, [r4, #8]
 800a71c:	6123      	str	r3, [r4, #16]
 800a71e:	f080 0001 	eor.w	r0, r0, #1
 800a722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a726:	2102      	movs	r1, #2
 800a728:	4620      	mov	r0, r4
 800a72a:	f001 f8b9 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a72e:	b178      	cbz	r0, 800a750 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a730:	2e01      	cmp	r6, #1
 800a732:	68a3      	ldr	r3, [r4, #8]
 800a734:	d011      	beq.n	800a75a <ucdr_deserialize_endian_uint16_t+0xae>
 800a736:	785b      	ldrb	r3, [r3, #1]
 800a738:	702b      	strb	r3, [r5, #0]
 800a73a:	68a3      	ldr	r3, [r4, #8]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	706b      	strb	r3, [r5, #1]
 800a740:	68a2      	ldr	r2, [r4, #8]
 800a742:	6923      	ldr	r3, [r4, #16]
 800a744:	3202      	adds	r2, #2
 800a746:	3302      	adds	r3, #2
 800a748:	2102      	movs	r1, #2
 800a74a:	60a2      	str	r2, [r4, #8]
 800a74c:	6123      	str	r3, [r4, #16]
 800a74e:	7561      	strb	r1, [r4, #21]
 800a750:	7da0      	ldrb	r0, [r4, #22]
 800a752:	f080 0001 	eor.w	r0, r0, #1
 800a756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	802b      	strh	r3, [r5, #0]
 800a75e:	e7ef      	b.n	800a740 <ucdr_deserialize_endian_uint16_t+0x94>
 800a760:	68a2      	ldr	r2, [r4, #8]
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	7da0      	ldrb	r0, [r4, #22]
 800a766:	f884 9015 	strb.w	r9, [r4, #21]
 800a76a:	1bd2      	subs	r2, r2, r7
 800a76c:	1bdb      	subs	r3, r3, r7
 800a76e:	60a2      	str	r2, [r4, #8]
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	f080 0001 	eor.w	r0, r0, #1
 800a776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77a:	68a3      	ldr	r3, [r4, #8]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	706b      	strb	r3, [r5, #1]
 800a780:	e7c3      	b.n	800a70a <ucdr_deserialize_endian_uint16_t+0x5e>
 800a782:	4641      	mov	r1, r8
 800a784:	463a      	mov	r2, r7
 800a786:	4628      	mov	r0, r5
 800a788:	f00d fff3 	bl	8018772 <memcpy>
 800a78c:	68a1      	ldr	r1, [r4, #8]
 800a78e:	4652      	mov	r2, sl
 800a790:	19e8      	adds	r0, r5, r7
 800a792:	f00d ffee 	bl	8018772 <memcpy>
 800a796:	e7b8      	b.n	800a70a <ucdr_deserialize_endian_uint16_t+0x5e>

0800a798 <ucdr_serialize_uint32_t>:
 800a798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	4604      	mov	r4, r0
 800a7a0:	9101      	str	r1, [sp, #4]
 800a7a2:	2104      	movs	r1, #4
 800a7a4:	f001 f8d0 	bl	800b948 <ucdr_buffer_alignment>
 800a7a8:	4601      	mov	r1, r0
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	7d67      	ldrb	r7, [r4, #21]
 800a7ae:	f001 f90f 	bl	800b9d0 <ucdr_advance_buffer>
 800a7b2:	2104      	movs	r1, #4
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f001 f867 	bl	800b888 <ucdr_check_buffer_available_for>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d139      	bne.n	800a832 <ucdr_serialize_uint32_t+0x9a>
 800a7be:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a7c2:	42ab      	cmp	r3, r5
 800a7c4:	d930      	bls.n	800a828 <ucdr_serialize_uint32_t+0x90>
 800a7c6:	1b5e      	subs	r6, r3, r5
 800a7c8:	60a3      	str	r3, [r4, #8]
 800a7ca:	6923      	ldr	r3, [r4, #16]
 800a7cc:	f1c6 0804 	rsb	r8, r6, #4
 800a7d0:	4433      	add	r3, r6
 800a7d2:	6123      	str	r3, [r4, #16]
 800a7d4:	4641      	mov	r1, r8
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f001 f862 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d04c      	beq.n	800a87a <ucdr_serialize_uint32_t+0xe2>
 800a7e0:	7d23      	ldrb	r3, [r4, #20]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d063      	beq.n	800a8ae <ucdr_serialize_uint32_t+0x116>
 800a7e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a7ea:	702b      	strb	r3, [r5, #0]
 800a7ec:	2e00      	cmp	r6, #0
 800a7ee:	d051      	beq.n	800a894 <ucdr_serialize_uint32_t+0xfc>
 800a7f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a7f4:	706b      	strb	r3, [r5, #1]
 800a7f6:	2e01      	cmp	r6, #1
 800a7f8:	d050      	beq.n	800a89c <ucdr_serialize_uint32_t+0x104>
 800a7fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a7fe:	70ab      	strb	r3, [r5, #2]
 800a800:	2e02      	cmp	r6, #2
 800a802:	d04f      	beq.n	800a8a4 <ucdr_serialize_uint32_t+0x10c>
 800a804:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a808:	70eb      	strb	r3, [r5, #3]
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	68a2      	ldr	r2, [r4, #8]
 800a80e:	7da0      	ldrb	r0, [r4, #22]
 800a810:	3304      	adds	r3, #4
 800a812:	1b9e      	subs	r6, r3, r6
 800a814:	4442      	add	r2, r8
 800a816:	2304      	movs	r3, #4
 800a818:	f080 0001 	eor.w	r0, r0, #1
 800a81c:	60a2      	str	r2, [r4, #8]
 800a81e:	6126      	str	r6, [r4, #16]
 800a820:	7563      	strb	r3, [r4, #21]
 800a822:	b002      	add	sp, #8
 800a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a828:	2104      	movs	r1, #4
 800a82a:	4620      	mov	r0, r4
 800a82c:	f001 f838 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a830:	b1d0      	cbz	r0, 800a868 <ucdr_serialize_uint32_t+0xd0>
 800a832:	7d23      	ldrb	r3, [r4, #20]
 800a834:	2b01      	cmp	r3, #1
 800a836:	68a3      	ldr	r3, [r4, #8]
 800a838:	d01c      	beq.n	800a874 <ucdr_serialize_uint32_t+0xdc>
 800a83a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a83e:	701a      	strb	r2, [r3, #0]
 800a840:	68a3      	ldr	r3, [r4, #8]
 800a842:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a846:	705a      	strb	r2, [r3, #1]
 800a848:	68a3      	ldr	r3, [r4, #8]
 800a84a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a84e:	709a      	strb	r2, [r3, #2]
 800a850:	68a3      	ldr	r3, [r4, #8]
 800a852:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a856:	70da      	strb	r2, [r3, #3]
 800a858:	68a2      	ldr	r2, [r4, #8]
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	3204      	adds	r2, #4
 800a85e:	3304      	adds	r3, #4
 800a860:	2104      	movs	r1, #4
 800a862:	60a2      	str	r2, [r4, #8]
 800a864:	6123      	str	r3, [r4, #16]
 800a866:	7561      	strb	r1, [r4, #21]
 800a868:	7da0      	ldrb	r0, [r4, #22]
 800a86a:	f080 0001 	eor.w	r0, r0, #1
 800a86e:	b002      	add	sp, #8
 800a870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a874:	9a01      	ldr	r2, [sp, #4]
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	e7ee      	b.n	800a858 <ucdr_serialize_uint32_t+0xc0>
 800a87a:	68a2      	ldr	r2, [r4, #8]
 800a87c:	6923      	ldr	r3, [r4, #16]
 800a87e:	7da0      	ldrb	r0, [r4, #22]
 800a880:	7567      	strb	r7, [r4, #21]
 800a882:	1b92      	subs	r2, r2, r6
 800a884:	1b9b      	subs	r3, r3, r6
 800a886:	f080 0001 	eor.w	r0, r0, #1
 800a88a:	60a2      	str	r2, [r4, #8]
 800a88c:	6123      	str	r3, [r4, #16]
 800a88e:	b002      	add	sp, #8
 800a890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a894:	68a3      	ldr	r3, [r4, #8]
 800a896:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a89a:	701a      	strb	r2, [r3, #0]
 800a89c:	68a3      	ldr	r3, [r4, #8]
 800a89e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a8a2:	701a      	strb	r2, [r3, #0]
 800a8a4:	68a3      	ldr	r3, [r4, #8]
 800a8a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a8aa:	701a      	strb	r2, [r3, #0]
 800a8ac:	e7ad      	b.n	800a80a <ucdr_serialize_uint32_t+0x72>
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	ad01      	add	r5, sp, #4
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	f00d ff5c 	bl	8018772 <memcpy>
 800a8ba:	68a0      	ldr	r0, [r4, #8]
 800a8bc:	4642      	mov	r2, r8
 800a8be:	19a9      	adds	r1, r5, r6
 800a8c0:	f00d ff57 	bl	8018772 <memcpy>
 800a8c4:	e7a1      	b.n	800a80a <ucdr_serialize_uint32_t+0x72>
 800a8c6:	bf00      	nop

0800a8c8 <ucdr_serialize_endian_uint32_t>:
 800a8c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8cc:	b083      	sub	sp, #12
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	2104      	movs	r1, #4
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	9201      	str	r2, [sp, #4]
 800a8d6:	f001 f837 	bl	800b948 <ucdr_buffer_alignment>
 800a8da:	4601      	mov	r1, r0
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a8e2:	f001 f875 	bl	800b9d0 <ucdr_advance_buffer>
 800a8e6:	2104      	movs	r1, #4
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 ffcd 	bl	800b888 <ucdr_check_buffer_available_for>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d138      	bne.n	800a964 <ucdr_serialize_endian_uint32_t+0x9c>
 800a8f2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a8f6:	42b7      	cmp	r7, r6
 800a8f8:	d92f      	bls.n	800a95a <ucdr_serialize_endian_uint32_t+0x92>
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	60a7      	str	r7, [r4, #8]
 800a8fe:	1bbf      	subs	r7, r7, r6
 800a900:	443b      	add	r3, r7
 800a902:	f1c7 0904 	rsb	r9, r7, #4
 800a906:	6123      	str	r3, [r4, #16]
 800a908:	4649      	mov	r1, r9
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 ffc8 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a910:	2800      	cmp	r0, #0
 800a912:	d04a      	beq.n	800a9aa <ucdr_serialize_endian_uint32_t+0xe2>
 800a914:	2d01      	cmp	r5, #1
 800a916:	d063      	beq.n	800a9e0 <ucdr_serialize_endian_uint32_t+0x118>
 800a918:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a91c:	7033      	strb	r3, [r6, #0]
 800a91e:	2f00      	cmp	r7, #0
 800a920:	d051      	beq.n	800a9c6 <ucdr_serialize_endian_uint32_t+0xfe>
 800a922:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a926:	7073      	strb	r3, [r6, #1]
 800a928:	2f01      	cmp	r7, #1
 800a92a:	d050      	beq.n	800a9ce <ucdr_serialize_endian_uint32_t+0x106>
 800a92c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a930:	70b3      	strb	r3, [r6, #2]
 800a932:	2f02      	cmp	r7, #2
 800a934:	d04f      	beq.n	800a9d6 <ucdr_serialize_endian_uint32_t+0x10e>
 800a936:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a93a:	70f3      	strb	r3, [r6, #3]
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	68a2      	ldr	r2, [r4, #8]
 800a940:	7da0      	ldrb	r0, [r4, #22]
 800a942:	3304      	adds	r3, #4
 800a944:	444a      	add	r2, r9
 800a946:	1bdb      	subs	r3, r3, r7
 800a948:	2104      	movs	r1, #4
 800a94a:	f080 0001 	eor.w	r0, r0, #1
 800a94e:	60a2      	str	r2, [r4, #8]
 800a950:	6123      	str	r3, [r4, #16]
 800a952:	7561      	strb	r1, [r4, #21]
 800a954:	b003      	add	sp, #12
 800a956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a95a:	2104      	movs	r1, #4
 800a95c:	4620      	mov	r0, r4
 800a95e:	f000 ff9f 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800a962:	b1c8      	cbz	r0, 800a998 <ucdr_serialize_endian_uint32_t+0xd0>
 800a964:	2d01      	cmp	r5, #1
 800a966:	68a3      	ldr	r3, [r4, #8]
 800a968:	d01c      	beq.n	800a9a4 <ucdr_serialize_endian_uint32_t+0xdc>
 800a96a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a96e:	701a      	strb	r2, [r3, #0]
 800a970:	68a3      	ldr	r3, [r4, #8]
 800a972:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a976:	705a      	strb	r2, [r3, #1]
 800a978:	68a3      	ldr	r3, [r4, #8]
 800a97a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a97e:	709a      	strb	r2, [r3, #2]
 800a980:	68a3      	ldr	r3, [r4, #8]
 800a982:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a986:	70da      	strb	r2, [r3, #3]
 800a988:	68a2      	ldr	r2, [r4, #8]
 800a98a:	6923      	ldr	r3, [r4, #16]
 800a98c:	3204      	adds	r2, #4
 800a98e:	3304      	adds	r3, #4
 800a990:	2104      	movs	r1, #4
 800a992:	60a2      	str	r2, [r4, #8]
 800a994:	6123      	str	r3, [r4, #16]
 800a996:	7561      	strb	r1, [r4, #21]
 800a998:	7da0      	ldrb	r0, [r4, #22]
 800a99a:	f080 0001 	eor.w	r0, r0, #1
 800a99e:	b003      	add	sp, #12
 800a9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9a4:	9a01      	ldr	r2, [sp, #4]
 800a9a6:	601a      	str	r2, [r3, #0]
 800a9a8:	e7ee      	b.n	800a988 <ucdr_serialize_endian_uint32_t+0xc0>
 800a9aa:	68a2      	ldr	r2, [r4, #8]
 800a9ac:	6923      	ldr	r3, [r4, #16]
 800a9ae:	7da0      	ldrb	r0, [r4, #22]
 800a9b0:	f884 8015 	strb.w	r8, [r4, #21]
 800a9b4:	1bd2      	subs	r2, r2, r7
 800a9b6:	1bdb      	subs	r3, r3, r7
 800a9b8:	f080 0001 	eor.w	r0, r0, #1
 800a9bc:	60a2      	str	r2, [r4, #8]
 800a9be:	6123      	str	r3, [r4, #16]
 800a9c0:	b003      	add	sp, #12
 800a9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9c6:	68a3      	ldr	r3, [r4, #8]
 800a9c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a9dc:	701a      	strb	r2, [r3, #0]
 800a9de:	e7ad      	b.n	800a93c <ucdr_serialize_endian_uint32_t+0x74>
 800a9e0:	ad01      	add	r5, sp, #4
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	463a      	mov	r2, r7
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f00d fec3 	bl	8018772 <memcpy>
 800a9ec:	68a0      	ldr	r0, [r4, #8]
 800a9ee:	464a      	mov	r2, r9
 800a9f0:	19e9      	adds	r1, r5, r7
 800a9f2:	f00d febe 	bl	8018772 <memcpy>
 800a9f6:	e7a1      	b.n	800a93c <ucdr_serialize_endian_uint32_t+0x74>

0800a9f8 <ucdr_deserialize_uint32_t>:
 800a9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9fc:	460d      	mov	r5, r1
 800a9fe:	2104      	movs	r1, #4
 800aa00:	4604      	mov	r4, r0
 800aa02:	f000 ffa1 	bl	800b948 <ucdr_buffer_alignment>
 800aa06:	4601      	mov	r1, r0
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa0e:	f000 ffdf 	bl	800b9d0 <ucdr_advance_buffer>
 800aa12:	2104      	movs	r1, #4
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 ff37 	bl	800b888 <ucdr_check_buffer_available_for>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	d138      	bne.n	800aa90 <ucdr_deserialize_uint32_t+0x98>
 800aa1e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800aa22:	42b7      	cmp	r7, r6
 800aa24:	d92f      	bls.n	800aa86 <ucdr_deserialize_uint32_t+0x8e>
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	60a7      	str	r7, [r4, #8]
 800aa2a:	1bbf      	subs	r7, r7, r6
 800aa2c:	443b      	add	r3, r7
 800aa2e:	f1c7 0904 	rsb	r9, r7, #4
 800aa32:	6123      	str	r3, [r4, #16]
 800aa34:	4649      	mov	r1, r9
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 ff32 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d046      	beq.n	800aace <ucdr_deserialize_uint32_t+0xd6>
 800aa40:	7d23      	ldrb	r3, [r4, #20]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d05c      	beq.n	800ab00 <ucdr_deserialize_uint32_t+0x108>
 800aa46:	78f3      	ldrb	r3, [r6, #3]
 800aa48:	702b      	strb	r3, [r5, #0]
 800aa4a:	2f00      	cmp	r7, #0
 800aa4c:	d04c      	beq.n	800aae8 <ucdr_deserialize_uint32_t+0xf0>
 800aa4e:	78b3      	ldrb	r3, [r6, #2]
 800aa50:	706b      	strb	r3, [r5, #1]
 800aa52:	2f01      	cmp	r7, #1
 800aa54:	f105 0302 	add.w	r3, r5, #2
 800aa58:	d04a      	beq.n	800aaf0 <ucdr_deserialize_uint32_t+0xf8>
 800aa5a:	7873      	ldrb	r3, [r6, #1]
 800aa5c:	70ab      	strb	r3, [r5, #2]
 800aa5e:	2f02      	cmp	r7, #2
 800aa60:	f105 0303 	add.w	r3, r5, #3
 800aa64:	d048      	beq.n	800aaf8 <ucdr_deserialize_uint32_t+0x100>
 800aa66:	7833      	ldrb	r3, [r6, #0]
 800aa68:	70eb      	strb	r3, [r5, #3]
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	68a2      	ldr	r2, [r4, #8]
 800aa6e:	7da0      	ldrb	r0, [r4, #22]
 800aa70:	2104      	movs	r1, #4
 800aa72:	3304      	adds	r3, #4
 800aa74:	444a      	add	r2, r9
 800aa76:	1bdb      	subs	r3, r3, r7
 800aa78:	7561      	strb	r1, [r4, #21]
 800aa7a:	60a2      	str	r2, [r4, #8]
 800aa7c:	6123      	str	r3, [r4, #16]
 800aa7e:	f080 0001 	eor.w	r0, r0, #1
 800aa82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa86:	2104      	movs	r1, #4
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f000 ff09 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800aa8e:	b1b0      	cbz	r0, 800aabe <ucdr_deserialize_uint32_t+0xc6>
 800aa90:	7d23      	ldrb	r3, [r4, #20]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	68a3      	ldr	r3, [r4, #8]
 800aa96:	d017      	beq.n	800aac8 <ucdr_deserialize_uint32_t+0xd0>
 800aa98:	78db      	ldrb	r3, [r3, #3]
 800aa9a:	702b      	strb	r3, [r5, #0]
 800aa9c:	68a3      	ldr	r3, [r4, #8]
 800aa9e:	789b      	ldrb	r3, [r3, #2]
 800aaa0:	706b      	strb	r3, [r5, #1]
 800aaa2:	68a3      	ldr	r3, [r4, #8]
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	70ab      	strb	r3, [r5, #2]
 800aaa8:	68a3      	ldr	r3, [r4, #8]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	70eb      	strb	r3, [r5, #3]
 800aaae:	68a2      	ldr	r2, [r4, #8]
 800aab0:	6923      	ldr	r3, [r4, #16]
 800aab2:	3204      	adds	r2, #4
 800aab4:	3304      	adds	r3, #4
 800aab6:	2104      	movs	r1, #4
 800aab8:	60a2      	str	r2, [r4, #8]
 800aaba:	6123      	str	r3, [r4, #16]
 800aabc:	7561      	strb	r1, [r4, #21]
 800aabe:	7da0      	ldrb	r0, [r4, #22]
 800aac0:	f080 0001 	eor.w	r0, r0, #1
 800aac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	e7ef      	b.n	800aaae <ucdr_deserialize_uint32_t+0xb6>
 800aace:	68a2      	ldr	r2, [r4, #8]
 800aad0:	6923      	ldr	r3, [r4, #16]
 800aad2:	7da0      	ldrb	r0, [r4, #22]
 800aad4:	f884 8015 	strb.w	r8, [r4, #21]
 800aad8:	1bd2      	subs	r2, r2, r7
 800aada:	1bdb      	subs	r3, r3, r7
 800aadc:	60a2      	str	r2, [r4, #8]
 800aade:	6123      	str	r3, [r4, #16]
 800aae0:	f080 0001 	eor.w	r0, r0, #1
 800aae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aae8:	68a3      	ldr	r3, [r4, #8]
 800aaea:	789b      	ldrb	r3, [r3, #2]
 800aaec:	706b      	strb	r3, [r5, #1]
 800aaee:	1cab      	adds	r3, r5, #2
 800aaf0:	68a2      	ldr	r2, [r4, #8]
 800aaf2:	7852      	ldrb	r2, [r2, #1]
 800aaf4:	f803 2b01 	strb.w	r2, [r3], #1
 800aaf8:	68a2      	ldr	r2, [r4, #8]
 800aafa:	7812      	ldrb	r2, [r2, #0]
 800aafc:	701a      	strb	r2, [r3, #0]
 800aafe:	e7b4      	b.n	800aa6a <ucdr_deserialize_uint32_t+0x72>
 800ab00:	4631      	mov	r1, r6
 800ab02:	463a      	mov	r2, r7
 800ab04:	4628      	mov	r0, r5
 800ab06:	f00d fe34 	bl	8018772 <memcpy>
 800ab0a:	68a1      	ldr	r1, [r4, #8]
 800ab0c:	464a      	mov	r2, r9
 800ab0e:	19e8      	adds	r0, r5, r7
 800ab10:	f00d fe2f 	bl	8018772 <memcpy>
 800ab14:	e7a9      	b.n	800aa6a <ucdr_deserialize_uint32_t+0x72>
 800ab16:	bf00      	nop

0800ab18 <ucdr_deserialize_endian_uint32_t>:
 800ab18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab1c:	460e      	mov	r6, r1
 800ab1e:	2104      	movs	r1, #4
 800ab20:	4604      	mov	r4, r0
 800ab22:	4615      	mov	r5, r2
 800ab24:	f000 ff10 	bl	800b948 <ucdr_buffer_alignment>
 800ab28:	4601      	mov	r1, r0
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ab30:	f000 ff4e 	bl	800b9d0 <ucdr_advance_buffer>
 800ab34:	2104      	movs	r1, #4
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 fea6 	bl	800b888 <ucdr_check_buffer_available_for>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d13c      	bne.n	800abba <ucdr_deserialize_endian_uint32_t+0xa2>
 800ab40:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ab44:	42bb      	cmp	r3, r7
 800ab46:	d933      	bls.n	800abb0 <ucdr_deserialize_endian_uint32_t+0x98>
 800ab48:	eba3 0807 	sub.w	r8, r3, r7
 800ab4c:	60a3      	str	r3, [r4, #8]
 800ab4e:	6923      	ldr	r3, [r4, #16]
 800ab50:	f1c8 0a04 	rsb	sl, r8, #4
 800ab54:	4443      	add	r3, r8
 800ab56:	6123      	str	r3, [r4, #16]
 800ab58:	4651      	mov	r1, sl
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f000 fea0 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d048      	beq.n	800abf6 <ucdr_deserialize_endian_uint32_t+0xde>
 800ab64:	2e01      	cmp	r6, #1
 800ab66:	d061      	beq.n	800ac2c <ucdr_deserialize_endian_uint32_t+0x114>
 800ab68:	78fb      	ldrb	r3, [r7, #3]
 800ab6a:	702b      	strb	r3, [r5, #0]
 800ab6c:	f1b8 0f00 	cmp.w	r8, #0
 800ab70:	d050      	beq.n	800ac14 <ucdr_deserialize_endian_uint32_t+0xfc>
 800ab72:	78bb      	ldrb	r3, [r7, #2]
 800ab74:	706b      	strb	r3, [r5, #1]
 800ab76:	f1b8 0f01 	cmp.w	r8, #1
 800ab7a:	f105 0302 	add.w	r3, r5, #2
 800ab7e:	d04d      	beq.n	800ac1c <ucdr_deserialize_endian_uint32_t+0x104>
 800ab80:	787b      	ldrb	r3, [r7, #1]
 800ab82:	70ab      	strb	r3, [r5, #2]
 800ab84:	f1b8 0f02 	cmp.w	r8, #2
 800ab88:	f105 0303 	add.w	r3, r5, #3
 800ab8c:	d04a      	beq.n	800ac24 <ucdr_deserialize_endian_uint32_t+0x10c>
 800ab8e:	783b      	ldrb	r3, [r7, #0]
 800ab90:	70eb      	strb	r3, [r5, #3]
 800ab92:	6923      	ldr	r3, [r4, #16]
 800ab94:	68a2      	ldr	r2, [r4, #8]
 800ab96:	7da0      	ldrb	r0, [r4, #22]
 800ab98:	2104      	movs	r1, #4
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	4452      	add	r2, sl
 800ab9e:	eba3 0308 	sub.w	r3, r3, r8
 800aba2:	7561      	strb	r1, [r4, #21]
 800aba4:	60a2      	str	r2, [r4, #8]
 800aba6:	6123      	str	r3, [r4, #16]
 800aba8:	f080 0001 	eor.w	r0, r0, #1
 800abac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb0:	2104      	movs	r1, #4
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 fe74 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800abb8:	b1a8      	cbz	r0, 800abe6 <ucdr_deserialize_endian_uint32_t+0xce>
 800abba:	2e01      	cmp	r6, #1
 800abbc:	68a3      	ldr	r3, [r4, #8]
 800abbe:	d017      	beq.n	800abf0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800abc0:	78db      	ldrb	r3, [r3, #3]
 800abc2:	702b      	strb	r3, [r5, #0]
 800abc4:	68a3      	ldr	r3, [r4, #8]
 800abc6:	789b      	ldrb	r3, [r3, #2]
 800abc8:	706b      	strb	r3, [r5, #1]
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	785b      	ldrb	r3, [r3, #1]
 800abce:	70ab      	strb	r3, [r5, #2]
 800abd0:	68a3      	ldr	r3, [r4, #8]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	70eb      	strb	r3, [r5, #3]
 800abd6:	68a2      	ldr	r2, [r4, #8]
 800abd8:	6923      	ldr	r3, [r4, #16]
 800abda:	3204      	adds	r2, #4
 800abdc:	3304      	adds	r3, #4
 800abde:	2104      	movs	r1, #4
 800abe0:	60a2      	str	r2, [r4, #8]
 800abe2:	6123      	str	r3, [r4, #16]
 800abe4:	7561      	strb	r1, [r4, #21]
 800abe6:	7da0      	ldrb	r0, [r4, #22]
 800abe8:	f080 0001 	eor.w	r0, r0, #1
 800abec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	602b      	str	r3, [r5, #0]
 800abf4:	e7ef      	b.n	800abd6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800abf6:	68a2      	ldr	r2, [r4, #8]
 800abf8:	6923      	ldr	r3, [r4, #16]
 800abfa:	7da0      	ldrb	r0, [r4, #22]
 800abfc:	f884 9015 	strb.w	r9, [r4, #21]
 800ac00:	eba2 0208 	sub.w	r2, r2, r8
 800ac04:	eba3 0308 	sub.w	r3, r3, r8
 800ac08:	60a2      	str	r2, [r4, #8]
 800ac0a:	6123      	str	r3, [r4, #16]
 800ac0c:	f080 0001 	eor.w	r0, r0, #1
 800ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac14:	68a3      	ldr	r3, [r4, #8]
 800ac16:	789b      	ldrb	r3, [r3, #2]
 800ac18:	706b      	strb	r3, [r5, #1]
 800ac1a:	1cab      	adds	r3, r5, #2
 800ac1c:	68a2      	ldr	r2, [r4, #8]
 800ac1e:	7852      	ldrb	r2, [r2, #1]
 800ac20:	f803 2b01 	strb.w	r2, [r3], #1
 800ac24:	68a2      	ldr	r2, [r4, #8]
 800ac26:	7812      	ldrb	r2, [r2, #0]
 800ac28:	701a      	strb	r2, [r3, #0]
 800ac2a:	e7b2      	b.n	800ab92 <ucdr_deserialize_endian_uint32_t+0x7a>
 800ac2c:	4639      	mov	r1, r7
 800ac2e:	4642      	mov	r2, r8
 800ac30:	4628      	mov	r0, r5
 800ac32:	f00d fd9e 	bl	8018772 <memcpy>
 800ac36:	68a1      	ldr	r1, [r4, #8]
 800ac38:	4652      	mov	r2, sl
 800ac3a:	eb05 0008 	add.w	r0, r5, r8
 800ac3e:	f00d fd98 	bl	8018772 <memcpy>
 800ac42:	e7a6      	b.n	800ab92 <ucdr_deserialize_endian_uint32_t+0x7a>

0800ac44 <ucdr_serialize_uint64_t>:
 800ac44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac48:	2108      	movs	r1, #8
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	e9cd 2300 	strd	r2, r3, [sp]
 800ac52:	f000 fe79 	bl	800b948 <ucdr_buffer_alignment>
 800ac56:	4601      	mov	r1, r0
 800ac58:	4620      	mov	r0, r4
 800ac5a:	7d67      	ldrb	r7, [r4, #21]
 800ac5c:	f000 feb8 	bl	800b9d0 <ucdr_advance_buffer>
 800ac60:	2108      	movs	r1, #8
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 fe10 	bl	800b888 <ucdr_check_buffer_available_for>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d14e      	bne.n	800ad0a <ucdr_serialize_uint64_t+0xc6>
 800ac6c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ac70:	42ab      	cmp	r3, r5
 800ac72:	d945      	bls.n	800ad00 <ucdr_serialize_uint64_t+0xbc>
 800ac74:	1b5e      	subs	r6, r3, r5
 800ac76:	60a3      	str	r3, [r4, #8]
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	f1c6 0808 	rsb	r8, r6, #8
 800ac7e:	4433      	add	r3, r6
 800ac80:	6123      	str	r3, [r4, #16]
 800ac82:	4641      	mov	r1, r8
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 fe0b 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d074      	beq.n	800ad78 <ucdr_serialize_uint64_t+0x134>
 800ac8e:	7d23      	ldrb	r3, [r4, #20]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	f000 809b 	beq.w	800adcc <ucdr_serialize_uint64_t+0x188>
 800ac96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ac9a:	702b      	strb	r3, [r5, #0]
 800ac9c:	2e00      	cmp	r6, #0
 800ac9e:	d078      	beq.n	800ad92 <ucdr_serialize_uint64_t+0x14e>
 800aca0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aca4:	706b      	strb	r3, [r5, #1]
 800aca6:	2e01      	cmp	r6, #1
 800aca8:	d077      	beq.n	800ad9a <ucdr_serialize_uint64_t+0x156>
 800acaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800acae:	70ab      	strb	r3, [r5, #2]
 800acb0:	2e02      	cmp	r6, #2
 800acb2:	d076      	beq.n	800ada2 <ucdr_serialize_uint64_t+0x15e>
 800acb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800acb8:	70eb      	strb	r3, [r5, #3]
 800acba:	2e03      	cmp	r6, #3
 800acbc:	d075      	beq.n	800adaa <ucdr_serialize_uint64_t+0x166>
 800acbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800acc2:	712b      	strb	r3, [r5, #4]
 800acc4:	2e04      	cmp	r6, #4
 800acc6:	d074      	beq.n	800adb2 <ucdr_serialize_uint64_t+0x16e>
 800acc8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800accc:	716b      	strb	r3, [r5, #5]
 800acce:	2e05      	cmp	r6, #5
 800acd0:	d073      	beq.n	800adba <ucdr_serialize_uint64_t+0x176>
 800acd2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800acd6:	71ab      	strb	r3, [r5, #6]
 800acd8:	2e06      	cmp	r6, #6
 800acda:	d072      	beq.n	800adc2 <ucdr_serialize_uint64_t+0x17e>
 800acdc:	f89d 3000 	ldrb.w	r3, [sp]
 800ace0:	71eb      	strb	r3, [r5, #7]
 800ace2:	6923      	ldr	r3, [r4, #16]
 800ace4:	68a2      	ldr	r2, [r4, #8]
 800ace6:	7da0      	ldrb	r0, [r4, #22]
 800ace8:	3308      	adds	r3, #8
 800acea:	1b9e      	subs	r6, r3, r6
 800acec:	4442      	add	r2, r8
 800acee:	2308      	movs	r3, #8
 800acf0:	f080 0001 	eor.w	r0, r0, #1
 800acf4:	60a2      	str	r2, [r4, #8]
 800acf6:	6126      	str	r6, [r4, #16]
 800acf8:	7563      	strb	r3, [r4, #21]
 800acfa:	b002      	add	sp, #8
 800acfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad00:	2108      	movs	r1, #8
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fdcc 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800ad08:	b350      	cbz	r0, 800ad60 <ucdr_serialize_uint64_t+0x11c>
 800ad0a:	7d23      	ldrb	r3, [r4, #20]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d02d      	beq.n	800ad6c <ucdr_serialize_uint64_t+0x128>
 800ad10:	68a3      	ldr	r3, [r4, #8]
 800ad12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ad16:	701a      	strb	r2, [r3, #0]
 800ad18:	68a3      	ldr	r3, [r4, #8]
 800ad1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad1e:	705a      	strb	r2, [r3, #1]
 800ad20:	68a3      	ldr	r3, [r4, #8]
 800ad22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad26:	709a      	strb	r2, [r3, #2]
 800ad28:	68a3      	ldr	r3, [r4, #8]
 800ad2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad2e:	70da      	strb	r2, [r3, #3]
 800ad30:	68a3      	ldr	r3, [r4, #8]
 800ad32:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ad36:	711a      	strb	r2, [r3, #4]
 800ad38:	68a3      	ldr	r3, [r4, #8]
 800ad3a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ad3e:	715a      	strb	r2, [r3, #5]
 800ad40:	68a3      	ldr	r3, [r4, #8]
 800ad42:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ad46:	719a      	strb	r2, [r3, #6]
 800ad48:	68a3      	ldr	r3, [r4, #8]
 800ad4a:	f89d 2000 	ldrb.w	r2, [sp]
 800ad4e:	71da      	strb	r2, [r3, #7]
 800ad50:	68a2      	ldr	r2, [r4, #8]
 800ad52:	6923      	ldr	r3, [r4, #16]
 800ad54:	3208      	adds	r2, #8
 800ad56:	3308      	adds	r3, #8
 800ad58:	2108      	movs	r1, #8
 800ad5a:	60a2      	str	r2, [r4, #8]
 800ad5c:	6123      	str	r3, [r4, #16]
 800ad5e:	7561      	strb	r1, [r4, #21]
 800ad60:	7da0      	ldrb	r0, [r4, #22]
 800ad62:	f080 0001 	eor.w	r0, r0, #1
 800ad66:	b002      	add	sp, #8
 800ad68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad6c:	466b      	mov	r3, sp
 800ad6e:	cb03      	ldmia	r3!, {r0, r1}
 800ad70:	68a3      	ldr	r3, [r4, #8]
 800ad72:	6018      	str	r0, [r3, #0]
 800ad74:	6059      	str	r1, [r3, #4]
 800ad76:	e7eb      	b.n	800ad50 <ucdr_serialize_uint64_t+0x10c>
 800ad78:	68a2      	ldr	r2, [r4, #8]
 800ad7a:	6923      	ldr	r3, [r4, #16]
 800ad7c:	7da0      	ldrb	r0, [r4, #22]
 800ad7e:	7567      	strb	r7, [r4, #21]
 800ad80:	1b92      	subs	r2, r2, r6
 800ad82:	1b9b      	subs	r3, r3, r6
 800ad84:	f080 0001 	eor.w	r0, r0, #1
 800ad88:	60a2      	str	r2, [r4, #8]
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	b002      	add	sp, #8
 800ad8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad92:	68a3      	ldr	r3, [r4, #8]
 800ad94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad98:	701a      	strb	r2, [r3, #0]
 800ad9a:	68a3      	ldr	r3, [r4, #8]
 800ad9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ada0:	701a      	strb	r2, [r3, #0]
 800ada2:	68a3      	ldr	r3, [r4, #8]
 800ada4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ada8:	701a      	strb	r2, [r3, #0]
 800adaa:	68a3      	ldr	r3, [r4, #8]
 800adac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800adb0:	701a      	strb	r2, [r3, #0]
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	68a3      	ldr	r3, [r4, #8]
 800adbc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	68a3      	ldr	r3, [r4, #8]
 800adc4:	f89d 2000 	ldrb.w	r2, [sp]
 800adc8:	701a      	strb	r2, [r3, #0]
 800adca:	e78a      	b.n	800ace2 <ucdr_serialize_uint64_t+0x9e>
 800adcc:	4628      	mov	r0, r5
 800adce:	466d      	mov	r5, sp
 800add0:	4629      	mov	r1, r5
 800add2:	4632      	mov	r2, r6
 800add4:	f00d fccd 	bl	8018772 <memcpy>
 800add8:	68a0      	ldr	r0, [r4, #8]
 800adda:	4642      	mov	r2, r8
 800addc:	19a9      	adds	r1, r5, r6
 800adde:	f00d fcc8 	bl	8018772 <memcpy>
 800ade2:	e77e      	b.n	800ace2 <ucdr_serialize_uint64_t+0x9e>

0800ade4 <ucdr_serialize_int16_t>:
 800ade4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade8:	b082      	sub	sp, #8
 800adea:	460b      	mov	r3, r1
 800adec:	2102      	movs	r1, #2
 800adee:	4604      	mov	r4, r0
 800adf0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800adf4:	f000 fda8 	bl	800b948 <ucdr_buffer_alignment>
 800adf8:	4601      	mov	r1, r0
 800adfa:	4620      	mov	r0, r4
 800adfc:	7d67      	ldrb	r7, [r4, #21]
 800adfe:	f000 fde7 	bl	800b9d0 <ucdr_advance_buffer>
 800ae02:	2102      	movs	r1, #2
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 fd3f 	bl	800b888 <ucdr_check_buffer_available_for>
 800ae0a:	bb78      	cbnz	r0, 800ae6c <ucdr_serialize_int16_t+0x88>
 800ae0c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ae10:	42ab      	cmp	r3, r5
 800ae12:	d926      	bls.n	800ae62 <ucdr_serialize_int16_t+0x7e>
 800ae14:	1b5e      	subs	r6, r3, r5
 800ae16:	60a3      	str	r3, [r4, #8]
 800ae18:	6923      	ldr	r3, [r4, #16]
 800ae1a:	f1c6 0802 	rsb	r8, r6, #2
 800ae1e:	4433      	add	r3, r6
 800ae20:	6123      	str	r3, [r4, #16]
 800ae22:	4641      	mov	r1, r8
 800ae24:	4620      	mov	r0, r4
 800ae26:	f000 fd3b 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d03b      	beq.n	800aea6 <ucdr_serialize_int16_t+0xc2>
 800ae2e:	7d23      	ldrb	r3, [r4, #20]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d04a      	beq.n	800aeca <ucdr_serialize_int16_t+0xe6>
 800ae34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae38:	702b      	strb	r3, [r5, #0]
 800ae3a:	2e00      	cmp	r6, #0
 800ae3c:	d040      	beq.n	800aec0 <ucdr_serialize_int16_t+0xdc>
 800ae3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae42:	706b      	strb	r3, [r5, #1]
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	68a2      	ldr	r2, [r4, #8]
 800ae48:	7da0      	ldrb	r0, [r4, #22]
 800ae4a:	3302      	adds	r3, #2
 800ae4c:	1b9e      	subs	r6, r3, r6
 800ae4e:	4442      	add	r2, r8
 800ae50:	2302      	movs	r3, #2
 800ae52:	f080 0001 	eor.w	r0, r0, #1
 800ae56:	60a2      	str	r2, [r4, #8]
 800ae58:	6126      	str	r6, [r4, #16]
 800ae5a:	7563      	strb	r3, [r4, #21]
 800ae5c:	b002      	add	sp, #8
 800ae5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae62:	2102      	movs	r1, #2
 800ae64:	4620      	mov	r0, r4
 800ae66:	f000 fd1b 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800ae6a:	b190      	cbz	r0, 800ae92 <ucdr_serialize_int16_t+0xae>
 800ae6c:	7d23      	ldrb	r3, [r4, #20]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	68a3      	ldr	r3, [r4, #8]
 800ae72:	d014      	beq.n	800ae9e <ucdr_serialize_int16_t+0xba>
 800ae74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	68a3      	ldr	r3, [r4, #8]
 800ae7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae80:	705a      	strb	r2, [r3, #1]
 800ae82:	68a2      	ldr	r2, [r4, #8]
 800ae84:	6923      	ldr	r3, [r4, #16]
 800ae86:	3202      	adds	r2, #2
 800ae88:	3302      	adds	r3, #2
 800ae8a:	2102      	movs	r1, #2
 800ae8c:	60a2      	str	r2, [r4, #8]
 800ae8e:	6123      	str	r3, [r4, #16]
 800ae90:	7561      	strb	r1, [r4, #21]
 800ae92:	7da0      	ldrb	r0, [r4, #22]
 800ae94:	f080 0001 	eor.w	r0, r0, #1
 800ae98:	b002      	add	sp, #8
 800ae9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aea2:	801a      	strh	r2, [r3, #0]
 800aea4:	e7ed      	b.n	800ae82 <ucdr_serialize_int16_t+0x9e>
 800aea6:	68a2      	ldr	r2, [r4, #8]
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	7da0      	ldrb	r0, [r4, #22]
 800aeac:	7567      	strb	r7, [r4, #21]
 800aeae:	1b92      	subs	r2, r2, r6
 800aeb0:	1b9b      	subs	r3, r3, r6
 800aeb2:	f080 0001 	eor.w	r0, r0, #1
 800aeb6:	60a2      	str	r2, [r4, #8]
 800aeb8:	6123      	str	r3, [r4, #16]
 800aeba:	b002      	add	sp, #8
 800aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec0:	68a3      	ldr	r3, [r4, #8]
 800aec2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aec6:	701a      	strb	r2, [r3, #0]
 800aec8:	e7bc      	b.n	800ae44 <ucdr_serialize_int16_t+0x60>
 800aeca:	4628      	mov	r0, r5
 800aecc:	f10d 0506 	add.w	r5, sp, #6
 800aed0:	4629      	mov	r1, r5
 800aed2:	4632      	mov	r2, r6
 800aed4:	f00d fc4d 	bl	8018772 <memcpy>
 800aed8:	68a0      	ldr	r0, [r4, #8]
 800aeda:	4642      	mov	r2, r8
 800aedc:	19a9      	adds	r1, r5, r6
 800aede:	f00d fc48 	bl	8018772 <memcpy>
 800aee2:	e7af      	b.n	800ae44 <ucdr_serialize_int16_t+0x60>

0800aee4 <ucdr_deserialize_int16_t>:
 800aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee8:	460d      	mov	r5, r1
 800aeea:	2102      	movs	r1, #2
 800aeec:	4604      	mov	r4, r0
 800aeee:	f000 fd2b 	bl	800b948 <ucdr_buffer_alignment>
 800aef2:	4601      	mov	r1, r0
 800aef4:	4620      	mov	r0, r4
 800aef6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aefa:	f000 fd69 	bl	800b9d0 <ucdr_advance_buffer>
 800aefe:	2102      	movs	r1, #2
 800af00:	4620      	mov	r0, r4
 800af02:	f000 fcc1 	bl	800b888 <ucdr_check_buffer_available_for>
 800af06:	bb60      	cbnz	r0, 800af62 <ucdr_deserialize_int16_t+0x7e>
 800af08:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800af0c:	42be      	cmp	r6, r7
 800af0e:	d923      	bls.n	800af58 <ucdr_deserialize_int16_t+0x74>
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	60a6      	str	r6, [r4, #8]
 800af14:	1bf6      	subs	r6, r6, r7
 800af16:	4433      	add	r3, r6
 800af18:	f1c6 0902 	rsb	r9, r6, #2
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	4649      	mov	r1, r9
 800af20:	4620      	mov	r0, r4
 800af22:	f000 fcbd 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800af26:	2800      	cmp	r0, #0
 800af28:	d034      	beq.n	800af94 <ucdr_deserialize_int16_t+0xb0>
 800af2a:	7d23      	ldrb	r3, [r4, #20]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d042      	beq.n	800afb6 <ucdr_deserialize_int16_t+0xd2>
 800af30:	787b      	ldrb	r3, [r7, #1]
 800af32:	702b      	strb	r3, [r5, #0]
 800af34:	2e00      	cmp	r6, #0
 800af36:	d03a      	beq.n	800afae <ucdr_deserialize_int16_t+0xca>
 800af38:	783b      	ldrb	r3, [r7, #0]
 800af3a:	706b      	strb	r3, [r5, #1]
 800af3c:	6923      	ldr	r3, [r4, #16]
 800af3e:	68a2      	ldr	r2, [r4, #8]
 800af40:	7da0      	ldrb	r0, [r4, #22]
 800af42:	2102      	movs	r1, #2
 800af44:	3302      	adds	r3, #2
 800af46:	444a      	add	r2, r9
 800af48:	1b9b      	subs	r3, r3, r6
 800af4a:	7561      	strb	r1, [r4, #21]
 800af4c:	60a2      	str	r2, [r4, #8]
 800af4e:	6123      	str	r3, [r4, #16]
 800af50:	f080 0001 	eor.w	r0, r0, #1
 800af54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af58:	2102      	movs	r1, #2
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 fca0 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800af60:	b180      	cbz	r0, 800af84 <ucdr_deserialize_int16_t+0xa0>
 800af62:	7d23      	ldrb	r3, [r4, #20]
 800af64:	2b01      	cmp	r3, #1
 800af66:	68a3      	ldr	r3, [r4, #8]
 800af68:	d011      	beq.n	800af8e <ucdr_deserialize_int16_t+0xaa>
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	702b      	strb	r3, [r5, #0]
 800af6e:	68a3      	ldr	r3, [r4, #8]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	706b      	strb	r3, [r5, #1]
 800af74:	68a2      	ldr	r2, [r4, #8]
 800af76:	6923      	ldr	r3, [r4, #16]
 800af78:	3202      	adds	r2, #2
 800af7a:	3302      	adds	r3, #2
 800af7c:	2102      	movs	r1, #2
 800af7e:	60a2      	str	r2, [r4, #8]
 800af80:	6123      	str	r3, [r4, #16]
 800af82:	7561      	strb	r1, [r4, #21]
 800af84:	7da0      	ldrb	r0, [r4, #22]
 800af86:	f080 0001 	eor.w	r0, r0, #1
 800af8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	802b      	strh	r3, [r5, #0]
 800af92:	e7ef      	b.n	800af74 <ucdr_deserialize_int16_t+0x90>
 800af94:	68a2      	ldr	r2, [r4, #8]
 800af96:	6923      	ldr	r3, [r4, #16]
 800af98:	7da0      	ldrb	r0, [r4, #22]
 800af9a:	f884 8015 	strb.w	r8, [r4, #21]
 800af9e:	1b92      	subs	r2, r2, r6
 800afa0:	1b9b      	subs	r3, r3, r6
 800afa2:	60a2      	str	r2, [r4, #8]
 800afa4:	6123      	str	r3, [r4, #16]
 800afa6:	f080 0001 	eor.w	r0, r0, #1
 800afaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	706b      	strb	r3, [r5, #1]
 800afb4:	e7c2      	b.n	800af3c <ucdr_deserialize_int16_t+0x58>
 800afb6:	4639      	mov	r1, r7
 800afb8:	4632      	mov	r2, r6
 800afba:	4628      	mov	r0, r5
 800afbc:	f00d fbd9 	bl	8018772 <memcpy>
 800afc0:	68a1      	ldr	r1, [r4, #8]
 800afc2:	464a      	mov	r2, r9
 800afc4:	19a8      	adds	r0, r5, r6
 800afc6:	f00d fbd4 	bl	8018772 <memcpy>
 800afca:	e7b7      	b.n	800af3c <ucdr_deserialize_int16_t+0x58>

0800afcc <ucdr_serialize_int32_t>:
 800afcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd0:	b082      	sub	sp, #8
 800afd2:	4604      	mov	r4, r0
 800afd4:	9101      	str	r1, [sp, #4]
 800afd6:	2104      	movs	r1, #4
 800afd8:	f000 fcb6 	bl	800b948 <ucdr_buffer_alignment>
 800afdc:	4601      	mov	r1, r0
 800afde:	4620      	mov	r0, r4
 800afe0:	7d67      	ldrb	r7, [r4, #21]
 800afe2:	f000 fcf5 	bl	800b9d0 <ucdr_advance_buffer>
 800afe6:	2104      	movs	r1, #4
 800afe8:	4620      	mov	r0, r4
 800afea:	f000 fc4d 	bl	800b888 <ucdr_check_buffer_available_for>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d139      	bne.n	800b066 <ucdr_serialize_int32_t+0x9a>
 800aff2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800aff6:	42ab      	cmp	r3, r5
 800aff8:	d930      	bls.n	800b05c <ucdr_serialize_int32_t+0x90>
 800affa:	1b5e      	subs	r6, r3, r5
 800affc:	60a3      	str	r3, [r4, #8]
 800affe:	6923      	ldr	r3, [r4, #16]
 800b000:	f1c6 0804 	rsb	r8, r6, #4
 800b004:	4433      	add	r3, r6
 800b006:	6123      	str	r3, [r4, #16]
 800b008:	4641      	mov	r1, r8
 800b00a:	4620      	mov	r0, r4
 800b00c:	f000 fc48 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b010:	2800      	cmp	r0, #0
 800b012:	d04c      	beq.n	800b0ae <ucdr_serialize_int32_t+0xe2>
 800b014:	7d23      	ldrb	r3, [r4, #20]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d063      	beq.n	800b0e2 <ucdr_serialize_int32_t+0x116>
 800b01a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b01e:	702b      	strb	r3, [r5, #0]
 800b020:	2e00      	cmp	r6, #0
 800b022:	d051      	beq.n	800b0c8 <ucdr_serialize_int32_t+0xfc>
 800b024:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b028:	706b      	strb	r3, [r5, #1]
 800b02a:	2e01      	cmp	r6, #1
 800b02c:	d050      	beq.n	800b0d0 <ucdr_serialize_int32_t+0x104>
 800b02e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b032:	70ab      	strb	r3, [r5, #2]
 800b034:	2e02      	cmp	r6, #2
 800b036:	d04f      	beq.n	800b0d8 <ucdr_serialize_int32_t+0x10c>
 800b038:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b03c:	70eb      	strb	r3, [r5, #3]
 800b03e:	6923      	ldr	r3, [r4, #16]
 800b040:	68a2      	ldr	r2, [r4, #8]
 800b042:	7da0      	ldrb	r0, [r4, #22]
 800b044:	3304      	adds	r3, #4
 800b046:	1b9e      	subs	r6, r3, r6
 800b048:	4442      	add	r2, r8
 800b04a:	2304      	movs	r3, #4
 800b04c:	f080 0001 	eor.w	r0, r0, #1
 800b050:	60a2      	str	r2, [r4, #8]
 800b052:	6126      	str	r6, [r4, #16]
 800b054:	7563      	strb	r3, [r4, #21]
 800b056:	b002      	add	sp, #8
 800b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b05c:	2104      	movs	r1, #4
 800b05e:	4620      	mov	r0, r4
 800b060:	f000 fc1e 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b064:	b1d0      	cbz	r0, 800b09c <ucdr_serialize_int32_t+0xd0>
 800b066:	7d23      	ldrb	r3, [r4, #20]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	68a3      	ldr	r3, [r4, #8]
 800b06c:	d01c      	beq.n	800b0a8 <ucdr_serialize_int32_t+0xdc>
 800b06e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b072:	701a      	strb	r2, [r3, #0]
 800b074:	68a3      	ldr	r3, [r4, #8]
 800b076:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b07a:	705a      	strb	r2, [r3, #1]
 800b07c:	68a3      	ldr	r3, [r4, #8]
 800b07e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b082:	709a      	strb	r2, [r3, #2]
 800b084:	68a3      	ldr	r3, [r4, #8]
 800b086:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b08a:	70da      	strb	r2, [r3, #3]
 800b08c:	68a2      	ldr	r2, [r4, #8]
 800b08e:	6923      	ldr	r3, [r4, #16]
 800b090:	3204      	adds	r2, #4
 800b092:	3304      	adds	r3, #4
 800b094:	2104      	movs	r1, #4
 800b096:	60a2      	str	r2, [r4, #8]
 800b098:	6123      	str	r3, [r4, #16]
 800b09a:	7561      	strb	r1, [r4, #21]
 800b09c:	7da0      	ldrb	r0, [r4, #22]
 800b09e:	f080 0001 	eor.w	r0, r0, #1
 800b0a2:	b002      	add	sp, #8
 800b0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a8:	9a01      	ldr	r2, [sp, #4]
 800b0aa:	601a      	str	r2, [r3, #0]
 800b0ac:	e7ee      	b.n	800b08c <ucdr_serialize_int32_t+0xc0>
 800b0ae:	68a2      	ldr	r2, [r4, #8]
 800b0b0:	6923      	ldr	r3, [r4, #16]
 800b0b2:	7da0      	ldrb	r0, [r4, #22]
 800b0b4:	7567      	strb	r7, [r4, #21]
 800b0b6:	1b92      	subs	r2, r2, r6
 800b0b8:	1b9b      	subs	r3, r3, r6
 800b0ba:	f080 0001 	eor.w	r0, r0, #1
 800b0be:	60a2      	str	r2, [r4, #8]
 800b0c0:	6123      	str	r3, [r4, #16]
 800b0c2:	b002      	add	sp, #8
 800b0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c8:	68a3      	ldr	r3, [r4, #8]
 800b0ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0ce:	701a      	strb	r2, [r3, #0]
 800b0d0:	68a3      	ldr	r3, [r4, #8]
 800b0d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b0d6:	701a      	strb	r2, [r3, #0]
 800b0d8:	68a3      	ldr	r3, [r4, #8]
 800b0da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b0de:	701a      	strb	r2, [r3, #0]
 800b0e0:	e7ad      	b.n	800b03e <ucdr_serialize_int32_t+0x72>
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	ad01      	add	r5, sp, #4
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	f00d fb42 	bl	8018772 <memcpy>
 800b0ee:	68a0      	ldr	r0, [r4, #8]
 800b0f0:	4642      	mov	r2, r8
 800b0f2:	19a9      	adds	r1, r5, r6
 800b0f4:	f00d fb3d 	bl	8018772 <memcpy>
 800b0f8:	e7a1      	b.n	800b03e <ucdr_serialize_int32_t+0x72>
 800b0fa:	bf00      	nop

0800b0fc <ucdr_deserialize_int32_t>:
 800b0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b100:	460d      	mov	r5, r1
 800b102:	2104      	movs	r1, #4
 800b104:	4604      	mov	r4, r0
 800b106:	f000 fc1f 	bl	800b948 <ucdr_buffer_alignment>
 800b10a:	4601      	mov	r1, r0
 800b10c:	4620      	mov	r0, r4
 800b10e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b112:	f000 fc5d 	bl	800b9d0 <ucdr_advance_buffer>
 800b116:	2104      	movs	r1, #4
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 fbb5 	bl	800b888 <ucdr_check_buffer_available_for>
 800b11e:	2800      	cmp	r0, #0
 800b120:	d138      	bne.n	800b194 <ucdr_deserialize_int32_t+0x98>
 800b122:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b126:	42b7      	cmp	r7, r6
 800b128:	d92f      	bls.n	800b18a <ucdr_deserialize_int32_t+0x8e>
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	60a7      	str	r7, [r4, #8]
 800b12e:	1bbf      	subs	r7, r7, r6
 800b130:	443b      	add	r3, r7
 800b132:	f1c7 0904 	rsb	r9, r7, #4
 800b136:	6123      	str	r3, [r4, #16]
 800b138:	4649      	mov	r1, r9
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 fbb0 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b140:	2800      	cmp	r0, #0
 800b142:	d046      	beq.n	800b1d2 <ucdr_deserialize_int32_t+0xd6>
 800b144:	7d23      	ldrb	r3, [r4, #20]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d05c      	beq.n	800b204 <ucdr_deserialize_int32_t+0x108>
 800b14a:	78f3      	ldrb	r3, [r6, #3]
 800b14c:	702b      	strb	r3, [r5, #0]
 800b14e:	2f00      	cmp	r7, #0
 800b150:	d04c      	beq.n	800b1ec <ucdr_deserialize_int32_t+0xf0>
 800b152:	78b3      	ldrb	r3, [r6, #2]
 800b154:	706b      	strb	r3, [r5, #1]
 800b156:	2f01      	cmp	r7, #1
 800b158:	f105 0302 	add.w	r3, r5, #2
 800b15c:	d04a      	beq.n	800b1f4 <ucdr_deserialize_int32_t+0xf8>
 800b15e:	7873      	ldrb	r3, [r6, #1]
 800b160:	70ab      	strb	r3, [r5, #2]
 800b162:	2f02      	cmp	r7, #2
 800b164:	f105 0303 	add.w	r3, r5, #3
 800b168:	d048      	beq.n	800b1fc <ucdr_deserialize_int32_t+0x100>
 800b16a:	7833      	ldrb	r3, [r6, #0]
 800b16c:	70eb      	strb	r3, [r5, #3]
 800b16e:	6923      	ldr	r3, [r4, #16]
 800b170:	68a2      	ldr	r2, [r4, #8]
 800b172:	7da0      	ldrb	r0, [r4, #22]
 800b174:	2104      	movs	r1, #4
 800b176:	3304      	adds	r3, #4
 800b178:	444a      	add	r2, r9
 800b17a:	1bdb      	subs	r3, r3, r7
 800b17c:	7561      	strb	r1, [r4, #21]
 800b17e:	60a2      	str	r2, [r4, #8]
 800b180:	6123      	str	r3, [r4, #16]
 800b182:	f080 0001 	eor.w	r0, r0, #1
 800b186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b18a:	2104      	movs	r1, #4
 800b18c:	4620      	mov	r0, r4
 800b18e:	f000 fb87 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b192:	b1b0      	cbz	r0, 800b1c2 <ucdr_deserialize_int32_t+0xc6>
 800b194:	7d23      	ldrb	r3, [r4, #20]
 800b196:	2b01      	cmp	r3, #1
 800b198:	68a3      	ldr	r3, [r4, #8]
 800b19a:	d017      	beq.n	800b1cc <ucdr_deserialize_int32_t+0xd0>
 800b19c:	78db      	ldrb	r3, [r3, #3]
 800b19e:	702b      	strb	r3, [r5, #0]
 800b1a0:	68a3      	ldr	r3, [r4, #8]
 800b1a2:	789b      	ldrb	r3, [r3, #2]
 800b1a4:	706b      	strb	r3, [r5, #1]
 800b1a6:	68a3      	ldr	r3, [r4, #8]
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	70ab      	strb	r3, [r5, #2]
 800b1ac:	68a3      	ldr	r3, [r4, #8]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	70eb      	strb	r3, [r5, #3]
 800b1b2:	68a2      	ldr	r2, [r4, #8]
 800b1b4:	6923      	ldr	r3, [r4, #16]
 800b1b6:	3204      	adds	r2, #4
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	2104      	movs	r1, #4
 800b1bc:	60a2      	str	r2, [r4, #8]
 800b1be:	6123      	str	r3, [r4, #16]
 800b1c0:	7561      	strb	r1, [r4, #21]
 800b1c2:	7da0      	ldrb	r0, [r4, #22]
 800b1c4:	f080 0001 	eor.w	r0, r0, #1
 800b1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	602b      	str	r3, [r5, #0]
 800b1d0:	e7ef      	b.n	800b1b2 <ucdr_deserialize_int32_t+0xb6>
 800b1d2:	68a2      	ldr	r2, [r4, #8]
 800b1d4:	6923      	ldr	r3, [r4, #16]
 800b1d6:	7da0      	ldrb	r0, [r4, #22]
 800b1d8:	f884 8015 	strb.w	r8, [r4, #21]
 800b1dc:	1bd2      	subs	r2, r2, r7
 800b1de:	1bdb      	subs	r3, r3, r7
 800b1e0:	60a2      	str	r2, [r4, #8]
 800b1e2:	6123      	str	r3, [r4, #16]
 800b1e4:	f080 0001 	eor.w	r0, r0, #1
 800b1e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ec:	68a3      	ldr	r3, [r4, #8]
 800b1ee:	789b      	ldrb	r3, [r3, #2]
 800b1f0:	706b      	strb	r3, [r5, #1]
 800b1f2:	1cab      	adds	r3, r5, #2
 800b1f4:	68a2      	ldr	r2, [r4, #8]
 800b1f6:	7852      	ldrb	r2, [r2, #1]
 800b1f8:	f803 2b01 	strb.w	r2, [r3], #1
 800b1fc:	68a2      	ldr	r2, [r4, #8]
 800b1fe:	7812      	ldrb	r2, [r2, #0]
 800b200:	701a      	strb	r2, [r3, #0]
 800b202:	e7b4      	b.n	800b16e <ucdr_deserialize_int32_t+0x72>
 800b204:	4631      	mov	r1, r6
 800b206:	463a      	mov	r2, r7
 800b208:	4628      	mov	r0, r5
 800b20a:	f00d fab2 	bl	8018772 <memcpy>
 800b20e:	68a1      	ldr	r1, [r4, #8]
 800b210:	464a      	mov	r2, r9
 800b212:	19e8      	adds	r0, r5, r7
 800b214:	f00d faad 	bl	8018772 <memcpy>
 800b218:	e7a9      	b.n	800b16e <ucdr_deserialize_int32_t+0x72>
 800b21a:	bf00      	nop

0800b21c <ucdr_serialize_double>:
 800b21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b220:	2108      	movs	r1, #8
 800b222:	b082      	sub	sp, #8
 800b224:	4604      	mov	r4, r0
 800b226:	ed8d 0b00 	vstr	d0, [sp]
 800b22a:	f000 fb8d 	bl	800b948 <ucdr_buffer_alignment>
 800b22e:	4601      	mov	r1, r0
 800b230:	4620      	mov	r0, r4
 800b232:	7d67      	ldrb	r7, [r4, #21]
 800b234:	f000 fbcc 	bl	800b9d0 <ucdr_advance_buffer>
 800b238:	2108      	movs	r1, #8
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 fb24 	bl	800b888 <ucdr_check_buffer_available_for>
 800b240:	2800      	cmp	r0, #0
 800b242:	d14e      	bne.n	800b2e2 <ucdr_serialize_double+0xc6>
 800b244:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b248:	42ab      	cmp	r3, r5
 800b24a:	d945      	bls.n	800b2d8 <ucdr_serialize_double+0xbc>
 800b24c:	1b5e      	subs	r6, r3, r5
 800b24e:	60a3      	str	r3, [r4, #8]
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	f1c6 0808 	rsb	r8, r6, #8
 800b256:	4433      	add	r3, r6
 800b258:	6123      	str	r3, [r4, #16]
 800b25a:	4641      	mov	r1, r8
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fb1f 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b262:	2800      	cmp	r0, #0
 800b264:	d074      	beq.n	800b350 <ucdr_serialize_double+0x134>
 800b266:	7d23      	ldrb	r3, [r4, #20]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	f000 809b 	beq.w	800b3a4 <ucdr_serialize_double+0x188>
 800b26e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b272:	702b      	strb	r3, [r5, #0]
 800b274:	2e00      	cmp	r6, #0
 800b276:	d078      	beq.n	800b36a <ucdr_serialize_double+0x14e>
 800b278:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b27c:	706b      	strb	r3, [r5, #1]
 800b27e:	2e01      	cmp	r6, #1
 800b280:	d077      	beq.n	800b372 <ucdr_serialize_double+0x156>
 800b282:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b286:	70ab      	strb	r3, [r5, #2]
 800b288:	2e02      	cmp	r6, #2
 800b28a:	d076      	beq.n	800b37a <ucdr_serialize_double+0x15e>
 800b28c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b290:	70eb      	strb	r3, [r5, #3]
 800b292:	2e03      	cmp	r6, #3
 800b294:	d075      	beq.n	800b382 <ucdr_serialize_double+0x166>
 800b296:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b29a:	712b      	strb	r3, [r5, #4]
 800b29c:	2e04      	cmp	r6, #4
 800b29e:	d074      	beq.n	800b38a <ucdr_serialize_double+0x16e>
 800b2a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b2a4:	716b      	strb	r3, [r5, #5]
 800b2a6:	2e05      	cmp	r6, #5
 800b2a8:	d073      	beq.n	800b392 <ucdr_serialize_double+0x176>
 800b2aa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b2ae:	71ab      	strb	r3, [r5, #6]
 800b2b0:	2e06      	cmp	r6, #6
 800b2b2:	d072      	beq.n	800b39a <ucdr_serialize_double+0x17e>
 800b2b4:	f89d 3000 	ldrb.w	r3, [sp]
 800b2b8:	71eb      	strb	r3, [r5, #7]
 800b2ba:	6923      	ldr	r3, [r4, #16]
 800b2bc:	68a2      	ldr	r2, [r4, #8]
 800b2be:	7da0      	ldrb	r0, [r4, #22]
 800b2c0:	3308      	adds	r3, #8
 800b2c2:	1b9e      	subs	r6, r3, r6
 800b2c4:	4442      	add	r2, r8
 800b2c6:	2308      	movs	r3, #8
 800b2c8:	f080 0001 	eor.w	r0, r0, #1
 800b2cc:	60a2      	str	r2, [r4, #8]
 800b2ce:	6126      	str	r6, [r4, #16]
 800b2d0:	7563      	strb	r3, [r4, #21]
 800b2d2:	b002      	add	sp, #8
 800b2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d8:	2108      	movs	r1, #8
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 fae0 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b2e0:	b350      	cbz	r0, 800b338 <ucdr_serialize_double+0x11c>
 800b2e2:	7d23      	ldrb	r3, [r4, #20]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d02d      	beq.n	800b344 <ucdr_serialize_double+0x128>
 800b2e8:	68a3      	ldr	r3, [r4, #8]
 800b2ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b2ee:	701a      	strb	r2, [r3, #0]
 800b2f0:	68a3      	ldr	r3, [r4, #8]
 800b2f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2f6:	705a      	strb	r2, [r3, #1]
 800b2f8:	68a3      	ldr	r3, [r4, #8]
 800b2fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b2fe:	709a      	strb	r2, [r3, #2]
 800b300:	68a3      	ldr	r3, [r4, #8]
 800b302:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b306:	70da      	strb	r2, [r3, #3]
 800b308:	68a3      	ldr	r3, [r4, #8]
 800b30a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b30e:	711a      	strb	r2, [r3, #4]
 800b310:	68a3      	ldr	r3, [r4, #8]
 800b312:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b316:	715a      	strb	r2, [r3, #5]
 800b318:	68a3      	ldr	r3, [r4, #8]
 800b31a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b31e:	719a      	strb	r2, [r3, #6]
 800b320:	68a3      	ldr	r3, [r4, #8]
 800b322:	f89d 2000 	ldrb.w	r2, [sp]
 800b326:	71da      	strb	r2, [r3, #7]
 800b328:	68a2      	ldr	r2, [r4, #8]
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	3208      	adds	r2, #8
 800b32e:	3308      	adds	r3, #8
 800b330:	2108      	movs	r1, #8
 800b332:	60a2      	str	r2, [r4, #8]
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	7561      	strb	r1, [r4, #21]
 800b338:	7da0      	ldrb	r0, [r4, #22]
 800b33a:	f080 0001 	eor.w	r0, r0, #1
 800b33e:	b002      	add	sp, #8
 800b340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b344:	466b      	mov	r3, sp
 800b346:	cb03      	ldmia	r3!, {r0, r1}
 800b348:	68a3      	ldr	r3, [r4, #8]
 800b34a:	6018      	str	r0, [r3, #0]
 800b34c:	6059      	str	r1, [r3, #4]
 800b34e:	e7eb      	b.n	800b328 <ucdr_serialize_double+0x10c>
 800b350:	68a2      	ldr	r2, [r4, #8]
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	7da0      	ldrb	r0, [r4, #22]
 800b356:	7567      	strb	r7, [r4, #21]
 800b358:	1b92      	subs	r2, r2, r6
 800b35a:	1b9b      	subs	r3, r3, r6
 800b35c:	f080 0001 	eor.w	r0, r0, #1
 800b360:	60a2      	str	r2, [r4, #8]
 800b362:	6123      	str	r3, [r4, #16]
 800b364:	b002      	add	sp, #8
 800b366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b370:	701a      	strb	r2, [r3, #0]
 800b372:	68a3      	ldr	r3, [r4, #8]
 800b374:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b378:	701a      	strb	r2, [r3, #0]
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b380:	701a      	strb	r2, [r3, #0]
 800b382:	68a3      	ldr	r3, [r4, #8]
 800b384:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	68a3      	ldr	r3, [r4, #8]
 800b38c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b390:	701a      	strb	r2, [r3, #0]
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b398:	701a      	strb	r2, [r3, #0]
 800b39a:	68a3      	ldr	r3, [r4, #8]
 800b39c:	f89d 2000 	ldrb.w	r2, [sp]
 800b3a0:	701a      	strb	r2, [r3, #0]
 800b3a2:	e78a      	b.n	800b2ba <ucdr_serialize_double+0x9e>
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	466d      	mov	r5, sp
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	f00d f9e1 	bl	8018772 <memcpy>
 800b3b0:	68a0      	ldr	r0, [r4, #8]
 800b3b2:	4642      	mov	r2, r8
 800b3b4:	19a9      	adds	r1, r5, r6
 800b3b6:	f00d f9dc 	bl	8018772 <memcpy>
 800b3ba:	e77e      	b.n	800b2ba <ucdr_serialize_double+0x9e>

0800b3bc <ucdr_serialize_endian_double>:
 800b3bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3c0:	460e      	mov	r6, r1
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	2108      	movs	r1, #8
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	ed8d 0b00 	vstr	d0, [sp]
 800b3cc:	f000 fabc 	bl	800b948 <ucdr_buffer_alignment>
 800b3d0:	4601      	mov	r1, r0
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b3d8:	f000 fafa 	bl	800b9d0 <ucdr_advance_buffer>
 800b3dc:	2108      	movs	r1, #8
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f000 fa52 	bl	800b888 <ucdr_check_buffer_available_for>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d14d      	bne.n	800b484 <ucdr_serialize_endian_double+0xc8>
 800b3e8:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800b3ec:	42bd      	cmp	r5, r7
 800b3ee:	d944      	bls.n	800b47a <ucdr_serialize_endian_double+0xbe>
 800b3f0:	6923      	ldr	r3, [r4, #16]
 800b3f2:	60a5      	str	r5, [r4, #8]
 800b3f4:	1bed      	subs	r5, r5, r7
 800b3f6:	442b      	add	r3, r5
 800b3f8:	f1c5 0908 	rsb	r9, r5, #8
 800b3fc:	6123      	str	r3, [r4, #16]
 800b3fe:	4649      	mov	r1, r9
 800b400:	4620      	mov	r0, r4
 800b402:	f000 fa4d 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b406:	2800      	cmp	r0, #0
 800b408:	d072      	beq.n	800b4f0 <ucdr_serialize_endian_double+0x134>
 800b40a:	2e01      	cmp	r6, #1
 800b40c:	f000 809b 	beq.w	800b546 <ucdr_serialize_endian_double+0x18a>
 800b410:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b414:	703b      	strb	r3, [r7, #0]
 800b416:	2d00      	cmp	r5, #0
 800b418:	d078      	beq.n	800b50c <ucdr_serialize_endian_double+0x150>
 800b41a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b41e:	707b      	strb	r3, [r7, #1]
 800b420:	2d01      	cmp	r5, #1
 800b422:	d077      	beq.n	800b514 <ucdr_serialize_endian_double+0x158>
 800b424:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b428:	70bb      	strb	r3, [r7, #2]
 800b42a:	2d02      	cmp	r5, #2
 800b42c:	d076      	beq.n	800b51c <ucdr_serialize_endian_double+0x160>
 800b42e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b432:	70fb      	strb	r3, [r7, #3]
 800b434:	2d03      	cmp	r5, #3
 800b436:	d075      	beq.n	800b524 <ucdr_serialize_endian_double+0x168>
 800b438:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b43c:	713b      	strb	r3, [r7, #4]
 800b43e:	2d04      	cmp	r5, #4
 800b440:	d074      	beq.n	800b52c <ucdr_serialize_endian_double+0x170>
 800b442:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b446:	717b      	strb	r3, [r7, #5]
 800b448:	2d05      	cmp	r5, #5
 800b44a:	d073      	beq.n	800b534 <ucdr_serialize_endian_double+0x178>
 800b44c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b450:	71bb      	strb	r3, [r7, #6]
 800b452:	2d06      	cmp	r5, #6
 800b454:	d072      	beq.n	800b53c <ucdr_serialize_endian_double+0x180>
 800b456:	f89d 3000 	ldrb.w	r3, [sp]
 800b45a:	71fb      	strb	r3, [r7, #7]
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	68a2      	ldr	r2, [r4, #8]
 800b460:	7da0      	ldrb	r0, [r4, #22]
 800b462:	3308      	adds	r3, #8
 800b464:	1b5d      	subs	r5, r3, r5
 800b466:	444a      	add	r2, r9
 800b468:	2308      	movs	r3, #8
 800b46a:	f080 0001 	eor.w	r0, r0, #1
 800b46e:	60a2      	str	r2, [r4, #8]
 800b470:	6125      	str	r5, [r4, #16]
 800b472:	7563      	strb	r3, [r4, #21]
 800b474:	b003      	add	sp, #12
 800b476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b47a:	2108      	movs	r1, #8
 800b47c:	4620      	mov	r0, r4
 800b47e:	f000 fa0f 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b482:	b348      	cbz	r0, 800b4d8 <ucdr_serialize_endian_double+0x11c>
 800b484:	2e01      	cmp	r6, #1
 800b486:	d02d      	beq.n	800b4e4 <ucdr_serialize_endian_double+0x128>
 800b488:	68a3      	ldr	r3, [r4, #8]
 800b48a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b48e:	701a      	strb	r2, [r3, #0]
 800b490:	68a3      	ldr	r3, [r4, #8]
 800b492:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b496:	705a      	strb	r2, [r3, #1]
 800b498:	68a3      	ldr	r3, [r4, #8]
 800b49a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b49e:	709a      	strb	r2, [r3, #2]
 800b4a0:	68a3      	ldr	r3, [r4, #8]
 800b4a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b4a6:	70da      	strb	r2, [r3, #3]
 800b4a8:	68a3      	ldr	r3, [r4, #8]
 800b4aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b4ae:	711a      	strb	r2, [r3, #4]
 800b4b0:	68a3      	ldr	r3, [r4, #8]
 800b4b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b4b6:	715a      	strb	r2, [r3, #5]
 800b4b8:	68a3      	ldr	r3, [r4, #8]
 800b4ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b4be:	719a      	strb	r2, [r3, #6]
 800b4c0:	68a3      	ldr	r3, [r4, #8]
 800b4c2:	f89d 2000 	ldrb.w	r2, [sp]
 800b4c6:	71da      	strb	r2, [r3, #7]
 800b4c8:	68a2      	ldr	r2, [r4, #8]
 800b4ca:	6923      	ldr	r3, [r4, #16]
 800b4cc:	3208      	adds	r2, #8
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	2108      	movs	r1, #8
 800b4d2:	60a2      	str	r2, [r4, #8]
 800b4d4:	6123      	str	r3, [r4, #16]
 800b4d6:	7561      	strb	r1, [r4, #21]
 800b4d8:	7da0      	ldrb	r0, [r4, #22]
 800b4da:	f080 0001 	eor.w	r0, r0, #1
 800b4de:	b003      	add	sp, #12
 800b4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4e4:	466b      	mov	r3, sp
 800b4e6:	cb03      	ldmia	r3!, {r0, r1}
 800b4e8:	68a3      	ldr	r3, [r4, #8]
 800b4ea:	6018      	str	r0, [r3, #0]
 800b4ec:	6059      	str	r1, [r3, #4]
 800b4ee:	e7eb      	b.n	800b4c8 <ucdr_serialize_endian_double+0x10c>
 800b4f0:	68a2      	ldr	r2, [r4, #8]
 800b4f2:	6923      	ldr	r3, [r4, #16]
 800b4f4:	7da0      	ldrb	r0, [r4, #22]
 800b4f6:	f884 8015 	strb.w	r8, [r4, #21]
 800b4fa:	1b52      	subs	r2, r2, r5
 800b4fc:	1b5b      	subs	r3, r3, r5
 800b4fe:	f080 0001 	eor.w	r0, r0, #1
 800b502:	60a2      	str	r2, [r4, #8]
 800b504:	6123      	str	r3, [r4, #16]
 800b506:	b003      	add	sp, #12
 800b508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b50c:	68a3      	ldr	r3, [r4, #8]
 800b50e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b512:	701a      	strb	r2, [r3, #0]
 800b514:	68a3      	ldr	r3, [r4, #8]
 800b516:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b51a:	701a      	strb	r2, [r3, #0]
 800b51c:	68a3      	ldr	r3, [r4, #8]
 800b51e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b522:	701a      	strb	r2, [r3, #0]
 800b524:	68a3      	ldr	r3, [r4, #8]
 800b526:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	68a3      	ldr	r3, [r4, #8]
 800b52e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b532:	701a      	strb	r2, [r3, #0]
 800b534:	68a3      	ldr	r3, [r4, #8]
 800b536:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b53a:	701a      	strb	r2, [r3, #0]
 800b53c:	68a3      	ldr	r3, [r4, #8]
 800b53e:	f89d 2000 	ldrb.w	r2, [sp]
 800b542:	701a      	strb	r2, [r3, #0]
 800b544:	e78a      	b.n	800b45c <ucdr_serialize_endian_double+0xa0>
 800b546:	466e      	mov	r6, sp
 800b548:	4631      	mov	r1, r6
 800b54a:	462a      	mov	r2, r5
 800b54c:	4638      	mov	r0, r7
 800b54e:	f00d f910 	bl	8018772 <memcpy>
 800b552:	68a0      	ldr	r0, [r4, #8]
 800b554:	464a      	mov	r2, r9
 800b556:	1971      	adds	r1, r6, r5
 800b558:	f00d f90b 	bl	8018772 <memcpy>
 800b55c:	e77e      	b.n	800b45c <ucdr_serialize_endian_double+0xa0>
 800b55e:	bf00      	nop

0800b560 <ucdr_deserialize_double>:
 800b560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b564:	460d      	mov	r5, r1
 800b566:	2108      	movs	r1, #8
 800b568:	4604      	mov	r4, r0
 800b56a:	f000 f9ed 	bl	800b948 <ucdr_buffer_alignment>
 800b56e:	4601      	mov	r1, r0
 800b570:	4620      	mov	r0, r4
 800b572:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b576:	f000 fa2b 	bl	800b9d0 <ucdr_advance_buffer>
 800b57a:	2108      	movs	r1, #8
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 f983 	bl	800b888 <ucdr_check_buffer_available_for>
 800b582:	2800      	cmp	r0, #0
 800b584:	d151      	bne.n	800b62a <ucdr_deserialize_double+0xca>
 800b586:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b58a:	42be      	cmp	r6, r7
 800b58c:	d948      	bls.n	800b620 <ucdr_deserialize_double+0xc0>
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	60a6      	str	r6, [r4, #8]
 800b592:	1bf6      	subs	r6, r6, r7
 800b594:	4433      	add	r3, r6
 800b596:	f1c6 0808 	rsb	r8, r6, #8
 800b59a:	6123      	str	r3, [r4, #16]
 800b59c:	4641      	mov	r1, r8
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 f97e 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d06d      	beq.n	800b684 <ucdr_deserialize_double+0x124>
 800b5a8:	7d23      	ldrb	r3, [r4, #20]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	f000 8093 	beq.w	800b6d6 <ucdr_deserialize_double+0x176>
 800b5b0:	79fb      	ldrb	r3, [r7, #7]
 800b5b2:	702b      	strb	r3, [r5, #0]
 800b5b4:	2e00      	cmp	r6, #0
 800b5b6:	d072      	beq.n	800b69e <ucdr_deserialize_double+0x13e>
 800b5b8:	79bb      	ldrb	r3, [r7, #6]
 800b5ba:	706b      	strb	r3, [r5, #1]
 800b5bc:	2e01      	cmp	r6, #1
 800b5be:	f105 0302 	add.w	r3, r5, #2
 800b5c2:	d070      	beq.n	800b6a6 <ucdr_deserialize_double+0x146>
 800b5c4:	797b      	ldrb	r3, [r7, #5]
 800b5c6:	70ab      	strb	r3, [r5, #2]
 800b5c8:	2e02      	cmp	r6, #2
 800b5ca:	f105 0303 	add.w	r3, r5, #3
 800b5ce:	d06e      	beq.n	800b6ae <ucdr_deserialize_double+0x14e>
 800b5d0:	793b      	ldrb	r3, [r7, #4]
 800b5d2:	70eb      	strb	r3, [r5, #3]
 800b5d4:	2e03      	cmp	r6, #3
 800b5d6:	f105 0304 	add.w	r3, r5, #4
 800b5da:	d06c      	beq.n	800b6b6 <ucdr_deserialize_double+0x156>
 800b5dc:	78fb      	ldrb	r3, [r7, #3]
 800b5de:	712b      	strb	r3, [r5, #4]
 800b5e0:	2e04      	cmp	r6, #4
 800b5e2:	f105 0305 	add.w	r3, r5, #5
 800b5e6:	d06a      	beq.n	800b6be <ucdr_deserialize_double+0x15e>
 800b5e8:	78bb      	ldrb	r3, [r7, #2]
 800b5ea:	716b      	strb	r3, [r5, #5]
 800b5ec:	2e05      	cmp	r6, #5
 800b5ee:	f105 0306 	add.w	r3, r5, #6
 800b5f2:	d068      	beq.n	800b6c6 <ucdr_deserialize_double+0x166>
 800b5f4:	787b      	ldrb	r3, [r7, #1]
 800b5f6:	71ab      	strb	r3, [r5, #6]
 800b5f8:	2e06      	cmp	r6, #6
 800b5fa:	f105 0307 	add.w	r3, r5, #7
 800b5fe:	d066      	beq.n	800b6ce <ucdr_deserialize_double+0x16e>
 800b600:	783b      	ldrb	r3, [r7, #0]
 800b602:	71eb      	strb	r3, [r5, #7]
 800b604:	6923      	ldr	r3, [r4, #16]
 800b606:	68a2      	ldr	r2, [r4, #8]
 800b608:	7da0      	ldrb	r0, [r4, #22]
 800b60a:	3308      	adds	r3, #8
 800b60c:	1b9e      	subs	r6, r3, r6
 800b60e:	2308      	movs	r3, #8
 800b610:	4442      	add	r2, r8
 800b612:	7563      	strb	r3, [r4, #21]
 800b614:	60a2      	str	r2, [r4, #8]
 800b616:	6126      	str	r6, [r4, #16]
 800b618:	f080 0001 	eor.w	r0, r0, #1
 800b61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b620:	2108      	movs	r1, #8
 800b622:	4620      	mov	r0, r4
 800b624:	f000 f93c 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b628:	b310      	cbz	r0, 800b670 <ucdr_deserialize_double+0x110>
 800b62a:	7d23      	ldrb	r3, [r4, #20]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	68a3      	ldr	r3, [r4, #8]
 800b630:	d023      	beq.n	800b67a <ucdr_deserialize_double+0x11a>
 800b632:	79db      	ldrb	r3, [r3, #7]
 800b634:	702b      	strb	r3, [r5, #0]
 800b636:	68a3      	ldr	r3, [r4, #8]
 800b638:	799b      	ldrb	r3, [r3, #6]
 800b63a:	706b      	strb	r3, [r5, #1]
 800b63c:	68a3      	ldr	r3, [r4, #8]
 800b63e:	795b      	ldrb	r3, [r3, #5]
 800b640:	70ab      	strb	r3, [r5, #2]
 800b642:	68a3      	ldr	r3, [r4, #8]
 800b644:	791b      	ldrb	r3, [r3, #4]
 800b646:	70eb      	strb	r3, [r5, #3]
 800b648:	68a3      	ldr	r3, [r4, #8]
 800b64a:	78db      	ldrb	r3, [r3, #3]
 800b64c:	712b      	strb	r3, [r5, #4]
 800b64e:	68a3      	ldr	r3, [r4, #8]
 800b650:	789b      	ldrb	r3, [r3, #2]
 800b652:	716b      	strb	r3, [r5, #5]
 800b654:	68a3      	ldr	r3, [r4, #8]
 800b656:	785b      	ldrb	r3, [r3, #1]
 800b658:	71ab      	strb	r3, [r5, #6]
 800b65a:	68a3      	ldr	r3, [r4, #8]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	71eb      	strb	r3, [r5, #7]
 800b660:	68a2      	ldr	r2, [r4, #8]
 800b662:	6923      	ldr	r3, [r4, #16]
 800b664:	3208      	adds	r2, #8
 800b666:	3308      	adds	r3, #8
 800b668:	2108      	movs	r1, #8
 800b66a:	60a2      	str	r2, [r4, #8]
 800b66c:	6123      	str	r3, [r4, #16]
 800b66e:	7561      	strb	r1, [r4, #21]
 800b670:	7da0      	ldrb	r0, [r4, #22]
 800b672:	f080 0001 	eor.w	r0, r0, #1
 800b676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	606b      	str	r3, [r5, #4]
 800b680:	602a      	str	r2, [r5, #0]
 800b682:	e7ed      	b.n	800b660 <ucdr_deserialize_double+0x100>
 800b684:	68a2      	ldr	r2, [r4, #8]
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	7da0      	ldrb	r0, [r4, #22]
 800b68a:	f884 9015 	strb.w	r9, [r4, #21]
 800b68e:	1b92      	subs	r2, r2, r6
 800b690:	1b9b      	subs	r3, r3, r6
 800b692:	60a2      	str	r2, [r4, #8]
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	f080 0001 	eor.w	r0, r0, #1
 800b69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	799b      	ldrb	r3, [r3, #6]
 800b6a2:	706b      	strb	r3, [r5, #1]
 800b6a4:	1cab      	adds	r3, r5, #2
 800b6a6:	68a2      	ldr	r2, [r4, #8]
 800b6a8:	7952      	ldrb	r2, [r2, #5]
 800b6aa:	f803 2b01 	strb.w	r2, [r3], #1
 800b6ae:	68a2      	ldr	r2, [r4, #8]
 800b6b0:	7912      	ldrb	r2, [r2, #4]
 800b6b2:	f803 2b01 	strb.w	r2, [r3], #1
 800b6b6:	68a2      	ldr	r2, [r4, #8]
 800b6b8:	78d2      	ldrb	r2, [r2, #3]
 800b6ba:	f803 2b01 	strb.w	r2, [r3], #1
 800b6be:	68a2      	ldr	r2, [r4, #8]
 800b6c0:	7892      	ldrb	r2, [r2, #2]
 800b6c2:	f803 2b01 	strb.w	r2, [r3], #1
 800b6c6:	68a2      	ldr	r2, [r4, #8]
 800b6c8:	7852      	ldrb	r2, [r2, #1]
 800b6ca:	f803 2b01 	strb.w	r2, [r3], #1
 800b6ce:	68a2      	ldr	r2, [r4, #8]
 800b6d0:	7812      	ldrb	r2, [r2, #0]
 800b6d2:	701a      	strb	r2, [r3, #0]
 800b6d4:	e796      	b.n	800b604 <ucdr_deserialize_double+0xa4>
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	4632      	mov	r2, r6
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f00d f849 	bl	8018772 <memcpy>
 800b6e0:	68a1      	ldr	r1, [r4, #8]
 800b6e2:	4642      	mov	r2, r8
 800b6e4:	19a8      	adds	r0, r5, r6
 800b6e6:	f00d f844 	bl	8018772 <memcpy>
 800b6ea:	e78b      	b.n	800b604 <ucdr_deserialize_double+0xa4>

0800b6ec <ucdr_deserialize_endian_double>:
 800b6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f0:	460f      	mov	r7, r1
 800b6f2:	2108      	movs	r1, #8
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	4615      	mov	r5, r2
 800b6f8:	f000 f926 	bl	800b948 <ucdr_buffer_alignment>
 800b6fc:	4601      	mov	r1, r0
 800b6fe:	4620      	mov	r0, r4
 800b700:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b704:	f000 f964 	bl	800b9d0 <ucdr_advance_buffer>
 800b708:	2108      	movs	r1, #8
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 f8bc 	bl	800b888 <ucdr_check_buffer_available_for>
 800b710:	2800      	cmp	r0, #0
 800b712:	d159      	bne.n	800b7c8 <ucdr_deserialize_endian_double+0xdc>
 800b714:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800b718:	4546      	cmp	r6, r8
 800b71a:	d950      	bls.n	800b7be <ucdr_deserialize_endian_double+0xd2>
 800b71c:	6923      	ldr	r3, [r4, #16]
 800b71e:	60a6      	str	r6, [r4, #8]
 800b720:	eba6 0608 	sub.w	r6, r6, r8
 800b724:	4433      	add	r3, r6
 800b726:	f1c6 0a08 	rsb	sl, r6, #8
 800b72a:	6123      	str	r3, [r4, #16]
 800b72c:	4651      	mov	r1, sl
 800b72e:	4620      	mov	r0, r4
 800b730:	f000 f8b6 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b734:	2800      	cmp	r0, #0
 800b736:	d073      	beq.n	800b820 <ucdr_deserialize_endian_double+0x134>
 800b738:	2f01      	cmp	r7, #1
 800b73a:	f000 809a 	beq.w	800b872 <ucdr_deserialize_endian_double+0x186>
 800b73e:	f898 3007 	ldrb.w	r3, [r8, #7]
 800b742:	702b      	strb	r3, [r5, #0]
 800b744:	2e00      	cmp	r6, #0
 800b746:	d078      	beq.n	800b83a <ucdr_deserialize_endian_double+0x14e>
 800b748:	f898 3006 	ldrb.w	r3, [r8, #6]
 800b74c:	706b      	strb	r3, [r5, #1]
 800b74e:	2e01      	cmp	r6, #1
 800b750:	f105 0302 	add.w	r3, r5, #2
 800b754:	d075      	beq.n	800b842 <ucdr_deserialize_endian_double+0x156>
 800b756:	f898 3005 	ldrb.w	r3, [r8, #5]
 800b75a:	70ab      	strb	r3, [r5, #2]
 800b75c:	2e02      	cmp	r6, #2
 800b75e:	f105 0303 	add.w	r3, r5, #3
 800b762:	d072      	beq.n	800b84a <ucdr_deserialize_endian_double+0x15e>
 800b764:	f898 3004 	ldrb.w	r3, [r8, #4]
 800b768:	70eb      	strb	r3, [r5, #3]
 800b76a:	2e03      	cmp	r6, #3
 800b76c:	f105 0304 	add.w	r3, r5, #4
 800b770:	d06f      	beq.n	800b852 <ucdr_deserialize_endian_double+0x166>
 800b772:	f898 3003 	ldrb.w	r3, [r8, #3]
 800b776:	712b      	strb	r3, [r5, #4]
 800b778:	2e04      	cmp	r6, #4
 800b77a:	f105 0305 	add.w	r3, r5, #5
 800b77e:	d06c      	beq.n	800b85a <ucdr_deserialize_endian_double+0x16e>
 800b780:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b784:	716b      	strb	r3, [r5, #5]
 800b786:	2e05      	cmp	r6, #5
 800b788:	f105 0306 	add.w	r3, r5, #6
 800b78c:	d069      	beq.n	800b862 <ucdr_deserialize_endian_double+0x176>
 800b78e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b792:	71ab      	strb	r3, [r5, #6]
 800b794:	2e06      	cmp	r6, #6
 800b796:	f105 0307 	add.w	r3, r5, #7
 800b79a:	d066      	beq.n	800b86a <ucdr_deserialize_endian_double+0x17e>
 800b79c:	f898 3000 	ldrb.w	r3, [r8]
 800b7a0:	71eb      	strb	r3, [r5, #7]
 800b7a2:	6923      	ldr	r3, [r4, #16]
 800b7a4:	68a2      	ldr	r2, [r4, #8]
 800b7a6:	7da0      	ldrb	r0, [r4, #22]
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	1b9e      	subs	r6, r3, r6
 800b7ac:	2308      	movs	r3, #8
 800b7ae:	4452      	add	r2, sl
 800b7b0:	7563      	strb	r3, [r4, #21]
 800b7b2:	60a2      	str	r2, [r4, #8]
 800b7b4:	6126      	str	r6, [r4, #16]
 800b7b6:	f080 0001 	eor.w	r0, r0, #1
 800b7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7be:	2108      	movs	r1, #8
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f000 f86d 	bl	800b8a0 <ucdr_check_final_buffer_behavior>
 800b7c6:	b308      	cbz	r0, 800b80c <ucdr_deserialize_endian_double+0x120>
 800b7c8:	2f01      	cmp	r7, #1
 800b7ca:	68a3      	ldr	r3, [r4, #8]
 800b7cc:	d023      	beq.n	800b816 <ucdr_deserialize_endian_double+0x12a>
 800b7ce:	79db      	ldrb	r3, [r3, #7]
 800b7d0:	702b      	strb	r3, [r5, #0]
 800b7d2:	68a3      	ldr	r3, [r4, #8]
 800b7d4:	799b      	ldrb	r3, [r3, #6]
 800b7d6:	706b      	strb	r3, [r5, #1]
 800b7d8:	68a3      	ldr	r3, [r4, #8]
 800b7da:	795b      	ldrb	r3, [r3, #5]
 800b7dc:	70ab      	strb	r3, [r5, #2]
 800b7de:	68a3      	ldr	r3, [r4, #8]
 800b7e0:	791b      	ldrb	r3, [r3, #4]
 800b7e2:	70eb      	strb	r3, [r5, #3]
 800b7e4:	68a3      	ldr	r3, [r4, #8]
 800b7e6:	78db      	ldrb	r3, [r3, #3]
 800b7e8:	712b      	strb	r3, [r5, #4]
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	789b      	ldrb	r3, [r3, #2]
 800b7ee:	716b      	strb	r3, [r5, #5]
 800b7f0:	68a3      	ldr	r3, [r4, #8]
 800b7f2:	785b      	ldrb	r3, [r3, #1]
 800b7f4:	71ab      	strb	r3, [r5, #6]
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	71eb      	strb	r3, [r5, #7]
 800b7fc:	68a2      	ldr	r2, [r4, #8]
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	3208      	adds	r2, #8
 800b802:	3308      	adds	r3, #8
 800b804:	2108      	movs	r1, #8
 800b806:	60a2      	str	r2, [r4, #8]
 800b808:	6123      	str	r3, [r4, #16]
 800b80a:	7561      	strb	r1, [r4, #21]
 800b80c:	7da0      	ldrb	r0, [r4, #22]
 800b80e:	f080 0001 	eor.w	r0, r0, #1
 800b812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	606b      	str	r3, [r5, #4]
 800b81c:	602a      	str	r2, [r5, #0]
 800b81e:	e7ed      	b.n	800b7fc <ucdr_deserialize_endian_double+0x110>
 800b820:	68a2      	ldr	r2, [r4, #8]
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	7da0      	ldrb	r0, [r4, #22]
 800b826:	f884 9015 	strb.w	r9, [r4, #21]
 800b82a:	1b92      	subs	r2, r2, r6
 800b82c:	1b9b      	subs	r3, r3, r6
 800b82e:	60a2      	str	r2, [r4, #8]
 800b830:	6123      	str	r3, [r4, #16]
 800b832:	f080 0001 	eor.w	r0, r0, #1
 800b836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b83a:	68a3      	ldr	r3, [r4, #8]
 800b83c:	799b      	ldrb	r3, [r3, #6]
 800b83e:	706b      	strb	r3, [r5, #1]
 800b840:	1cab      	adds	r3, r5, #2
 800b842:	68a2      	ldr	r2, [r4, #8]
 800b844:	7952      	ldrb	r2, [r2, #5]
 800b846:	f803 2b01 	strb.w	r2, [r3], #1
 800b84a:	68a2      	ldr	r2, [r4, #8]
 800b84c:	7912      	ldrb	r2, [r2, #4]
 800b84e:	f803 2b01 	strb.w	r2, [r3], #1
 800b852:	68a2      	ldr	r2, [r4, #8]
 800b854:	78d2      	ldrb	r2, [r2, #3]
 800b856:	f803 2b01 	strb.w	r2, [r3], #1
 800b85a:	68a2      	ldr	r2, [r4, #8]
 800b85c:	7892      	ldrb	r2, [r2, #2]
 800b85e:	f803 2b01 	strb.w	r2, [r3], #1
 800b862:	68a2      	ldr	r2, [r4, #8]
 800b864:	7852      	ldrb	r2, [r2, #1]
 800b866:	f803 2b01 	strb.w	r2, [r3], #1
 800b86a:	68a2      	ldr	r2, [r4, #8]
 800b86c:	7812      	ldrb	r2, [r2, #0]
 800b86e:	701a      	strb	r2, [r3, #0]
 800b870:	e797      	b.n	800b7a2 <ucdr_deserialize_endian_double+0xb6>
 800b872:	4641      	mov	r1, r8
 800b874:	4632      	mov	r2, r6
 800b876:	4628      	mov	r0, r5
 800b878:	f00c ff7b 	bl	8018772 <memcpy>
 800b87c:	68a1      	ldr	r1, [r4, #8]
 800b87e:	4652      	mov	r2, sl
 800b880:	19a8      	adds	r0, r5, r6
 800b882:	f00c ff76 	bl	8018772 <memcpy>
 800b886:	e78c      	b.n	800b7a2 <ucdr_deserialize_endian_double+0xb6>

0800b888 <ucdr_check_buffer_available_for>:
 800b888:	7d83      	ldrb	r3, [r0, #22]
 800b88a:	b93b      	cbnz	r3, 800b89c <ucdr_check_buffer_available_for+0x14>
 800b88c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b890:	4419      	add	r1, r3
 800b892:	4288      	cmp	r0, r1
 800b894:	bf34      	ite	cc
 800b896:	2000      	movcc	r0, #0
 800b898:	2001      	movcs	r0, #1
 800b89a:	4770      	bx	lr
 800b89c:	2000      	movs	r0, #0
 800b89e:	4770      	bx	lr

0800b8a0 <ucdr_check_final_buffer_behavior>:
 800b8a0:	7d83      	ldrb	r3, [r0, #22]
 800b8a2:	b943      	cbnz	r3, 800b8b6 <ucdr_check_final_buffer_behavior+0x16>
 800b8a4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b8a8:	4291      	cmp	r1, r2
 800b8aa:	b510      	push	{r4, lr}
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	d205      	bcs.n	800b8bc <ucdr_check_final_buffer_behavior+0x1c>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	bd10      	pop	{r4, pc}
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	4770      	bx	lr
 800b8bc:	6982      	ldr	r2, [r0, #24]
 800b8be:	b13a      	cbz	r2, 800b8d0 <ucdr_check_final_buffer_behavior+0x30>
 800b8c0:	69c1      	ldr	r1, [r0, #28]
 800b8c2:	4790      	blx	r2
 800b8c4:	f080 0301 	eor.w	r3, r0, #1
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	75a0      	strb	r0, [r4, #22]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	bd10      	pop	{r4, pc}
 800b8d0:	2001      	movs	r0, #1
 800b8d2:	75a0      	strb	r0, [r4, #22]
 800b8d4:	e7fa      	b.n	800b8cc <ucdr_check_final_buffer_behavior+0x2c>
 800b8d6:	bf00      	nop

0800b8d8 <ucdr_set_on_full_buffer_callback>:
 800b8d8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop

0800b8e0 <ucdr_init_buffer_origin_offset_endian>:
 800b8e0:	b410      	push	{r4}
 800b8e2:	9c01      	ldr	r4, [sp, #4]
 800b8e4:	6001      	str	r1, [r0, #0]
 800b8e6:	440a      	add	r2, r1
 800b8e8:	6042      	str	r2, [r0, #4]
 800b8ea:	190a      	adds	r2, r1, r4
 800b8ec:	441c      	add	r4, r3
 800b8ee:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800b8f2:	6082      	str	r2, [r0, #8]
 800b8f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b8f8:	7503      	strb	r3, [r0, #20]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800b900:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b904:	7542      	strb	r2, [r0, #21]
 800b906:	7582      	strb	r2, [r0, #22]
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop

0800b90c <ucdr_init_buffer_origin_offset>:
 800b90c:	b510      	push	{r4, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	9c04      	ldr	r4, [sp, #16]
 800b912:	9400      	str	r4, [sp, #0]
 800b914:	2401      	movs	r4, #1
 800b916:	9401      	str	r4, [sp, #4]
 800b918:	f7ff ffe2 	bl	800b8e0 <ucdr_init_buffer_origin_offset_endian>
 800b91c:	b002      	add	sp, #8
 800b91e:	bd10      	pop	{r4, pc}

0800b920 <ucdr_init_buffer_origin>:
 800b920:	b510      	push	{r4, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	2400      	movs	r4, #0
 800b926:	9400      	str	r4, [sp, #0]
 800b928:	f7ff fff0 	bl	800b90c <ucdr_init_buffer_origin_offset>
 800b92c:	b002      	add	sp, #8
 800b92e:	bd10      	pop	{r4, pc}

0800b930 <ucdr_init_buffer>:
 800b930:	2300      	movs	r3, #0
 800b932:	f7ff bff5 	b.w	800b920 <ucdr_init_buffer_origin>
 800b936:	bf00      	nop

0800b938 <ucdr_alignment>:
 800b938:	fbb0 f3f1 	udiv	r3, r0, r1
 800b93c:	fb03 0011 	mls	r0, r3, r1, r0
 800b940:	1a08      	subs	r0, r1, r0
 800b942:	3901      	subs	r1, #1
 800b944:	4008      	ands	r0, r1
 800b946:	4770      	bx	lr

0800b948 <ucdr_buffer_alignment>:
 800b948:	7d43      	ldrb	r3, [r0, #21]
 800b94a:	428b      	cmp	r3, r1
 800b94c:	d208      	bcs.n	800b960 <ucdr_buffer_alignment+0x18>
 800b94e:	6900      	ldr	r0, [r0, #16]
 800b950:	fbb0 f3f1 	udiv	r3, r0, r1
 800b954:	fb01 0013 	mls	r0, r1, r3, r0
 800b958:	1a08      	subs	r0, r1, r0
 800b95a:	3901      	subs	r1, #1
 800b95c:	4008      	ands	r0, r1
 800b95e:	4770      	bx	lr
 800b960:	2000      	movs	r0, #0
 800b962:	4770      	bx	lr

0800b964 <ucdr_align_to>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	4604      	mov	r4, r0
 800b968:	460d      	mov	r5, r1
 800b96a:	f7ff ffed 	bl	800b948 <ucdr_buffer_alignment>
 800b96e:	68a3      	ldr	r3, [r4, #8]
 800b970:	6921      	ldr	r1, [r4, #16]
 800b972:	7565      	strb	r5, [r4, #21]
 800b974:	181a      	adds	r2, r3, r0
 800b976:	6863      	ldr	r3, [r4, #4]
 800b978:	4293      	cmp	r3, r2
 800b97a:	4408      	add	r0, r1
 800b97c:	bf28      	it	cs
 800b97e:	4613      	movcs	r3, r2
 800b980:	6120      	str	r0, [r4, #16]
 800b982:	60a3      	str	r3, [r4, #8]
 800b984:	bd38      	pop	{r3, r4, r5, pc}
 800b986:	bf00      	nop

0800b988 <ucdr_buffer_length>:
 800b988:	6882      	ldr	r2, [r0, #8]
 800b98a:	6800      	ldr	r0, [r0, #0]
 800b98c:	1a10      	subs	r0, r2, r0
 800b98e:	4770      	bx	lr

0800b990 <ucdr_buffer_remaining>:
 800b990:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b994:	1a10      	subs	r0, r2, r0
 800b996:	4770      	bx	lr

0800b998 <ucdr_check_final_buffer_behavior_array>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	7d83      	ldrb	r3, [r0, #22]
 800b99c:	b963      	cbnz	r3, 800b9b8 <ucdr_check_final_buffer_behavior_array+0x20>
 800b99e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	d308      	bcc.n	800b9bc <ucdr_check_final_buffer_behavior_array+0x24>
 800b9aa:	b139      	cbz	r1, 800b9bc <ucdr_check_final_buffer_behavior_array+0x24>
 800b9ac:	6983      	ldr	r3, [r0, #24]
 800b9ae:	b163      	cbz	r3, 800b9ca <ucdr_check_final_buffer_behavior_array+0x32>
 800b9b0:	69c1      	ldr	r1, [r0, #28]
 800b9b2:	4798      	blx	r3
 800b9b4:	75a0      	strb	r0, [r4, #22]
 800b9b6:	b108      	cbz	r0, 800b9bc <ucdr_check_final_buffer_behavior_array+0x24>
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f7ff ffe7 	bl	800b990 <ucdr_buffer_remaining>
 800b9c2:	42a8      	cmp	r0, r5
 800b9c4:	bf28      	it	cs
 800b9c6:	4628      	movcs	r0, r5
 800b9c8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	7583      	strb	r3, [r0, #22]
 800b9ce:	e7f3      	b.n	800b9b8 <ucdr_check_final_buffer_behavior_array+0x20>

0800b9d0 <ucdr_advance_buffer>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	460d      	mov	r5, r1
 800b9d6:	f7ff ff57 	bl	800b888 <ucdr_check_buffer_available_for>
 800b9da:	b178      	cbz	r0, 800b9fc <ucdr_advance_buffer+0x2c>
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	68a2      	ldr	r2, [r4, #8]
 800b9e0:	442b      	add	r3, r5
 800b9e2:	6123      	str	r3, [r4, #16]
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	442a      	add	r2, r5
 800b9e8:	7563      	strb	r3, [r4, #21]
 800b9ea:	60a2      	str	r2, [r4, #8]
 800b9ec:	bd38      	pop	{r3, r4, r5, pc}
 800b9ee:	68a2      	ldr	r2, [r4, #8]
 800b9f0:	6923      	ldr	r3, [r4, #16]
 800b9f2:	4402      	add	r2, r0
 800b9f4:	4403      	add	r3, r0
 800b9f6:	1a2d      	subs	r5, r5, r0
 800b9f8:	60a2      	str	r2, [r4, #8]
 800b9fa:	6123      	str	r3, [r4, #16]
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4620      	mov	r0, r4
 800ba02:	f7ff ffc9 	bl	800b998 <ucdr_check_final_buffer_behavior_array>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d1f1      	bne.n	800b9ee <ucdr_advance_buffer+0x1e>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	7563      	strb	r3, [r4, #21]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}

0800ba10 <rcl_get_zero_initialized_publisher>:
 800ba10:	4b01      	ldr	r3, [pc, #4]	@ (800ba18 <rcl_get_zero_initialized_publisher+0x8>)
 800ba12:	6818      	ldr	r0, [r3, #0]
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	080196f4 	.word	0x080196f4

0800ba1c <rcl_publisher_init>:
 800ba1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba20:	b088      	sub	sp, #32
 800ba22:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ba24:	2d00      	cmp	r5, #0
 800ba26:	d069      	beq.n	800bafc <rcl_publisher_init+0xe0>
 800ba28:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	4648      	mov	r0, r9
 800ba30:	460e      	mov	r6, r1
 800ba32:	4690      	mov	r8, r2
 800ba34:	461f      	mov	r7, r3
 800ba36:	f001 f847 	bl	800cac8 <rcutils_allocator_is_valid>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d05e      	beq.n	800bafc <rcl_publisher_init+0xe0>
 800ba3e:	2c00      	cmp	r4, #0
 800ba40:	d05c      	beq.n	800bafc <rcl_publisher_init+0xe0>
 800ba42:	f8d4 a000 	ldr.w	sl, [r4]
 800ba46:	f1ba 0f00 	cmp.w	sl, #0
 800ba4a:	d004      	beq.n	800ba56 <rcl_publisher_init+0x3a>
 800ba4c:	2764      	movs	r7, #100	@ 0x64
 800ba4e:	4638      	mov	r0, r7
 800ba50:	b008      	add	sp, #32
 800ba52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba56:	4630      	mov	r0, r6
 800ba58:	f005 ff54 	bl	8011904 <rcl_node_is_valid>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d052      	beq.n	800bb06 <rcl_publisher_init+0xea>
 800ba60:	f1b8 0f00 	cmp.w	r8, #0
 800ba64:	d04a      	beq.n	800bafc <rcl_publisher_init+0xe0>
 800ba66:	2f00      	cmp	r7, #0
 800ba68:	d048      	beq.n	800bafc <rcl_publisher_init+0xe0>
 800ba6a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ba6e:	aa07      	add	r2, sp, #28
 800ba70:	9205      	str	r2, [sp, #20]
 800ba72:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800ba76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ba7e:	f8cd a01c 	str.w	sl, [sp, #28]
 800ba82:	4639      	mov	r1, r7
 800ba84:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f005 ff8f 	bl	80119ac <rcl_node_resolve_name>
 800ba8e:	4607      	mov	r7, r0
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d14f      	bne.n	800bb34 <rcl_publisher_init+0x118>
 800ba94:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800ba96:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ba98:	20c8      	movs	r0, #200	@ 0xc8
 800ba9a:	4798      	blx	r3
 800ba9c:	6020      	str	r0, [r4, #0]
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d04e      	beq.n	800bb40 <rcl_publisher_init+0x124>
 800baa2:	4630      	mov	r0, r6
 800baa4:	f005 ff50 	bl	8011948 <rcl_node_get_rmw_handle>
 800baa8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	9a07      	ldr	r2, [sp, #28]
 800bab0:	6827      	ldr	r7, [r4, #0]
 800bab2:	462b      	mov	r3, r5
 800bab4:	4641      	mov	r1, r8
 800bab6:	f001 f915 	bl	800cce4 <rmw_create_publisher>
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800bac0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bac4:	b370      	cbz	r0, 800bb24 <rcl_publisher_init+0x108>
 800bac6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800baca:	f001 f9e9 	bl	800cea0 <rmw_publisher_get_actual_qos>
 800bace:	6823      	ldr	r3, [r4, #0]
 800bad0:	4607      	mov	r7, r0
 800bad2:	b9d0      	cbnz	r0, 800bb0a <rcl_publisher_init+0xee>
 800bad4:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800bad8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800badc:	4629      	mov	r1, r5
 800bade:	2270      	movs	r2, #112	@ 0x70
 800bae0:	4618      	mov	r0, r3
 800bae2:	f00c fe46 	bl	8018772 <memcpy>
 800bae6:	6832      	ldr	r2, [r6, #0]
 800bae8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800baec:	9807      	ldr	r0, [sp, #28]
 800baee:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800baf0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800baf2:	4798      	blx	r3
 800baf4:	4638      	mov	r0, r7
 800baf6:	b008      	add	sp, #32
 800baf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafc:	270b      	movs	r7, #11
 800bafe:	4638      	mov	r0, r7
 800bb00:	b008      	add	sp, #32
 800bb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb06:	27c8      	movs	r7, #200	@ 0xc8
 800bb08:	e7a1      	b.n	800ba4e <rcl_publisher_init+0x32>
 800bb0a:	b18b      	cbz	r3, 800bb30 <rcl_publisher_init+0x114>
 800bb0c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bb10:	b142      	cbz	r2, 800bb24 <rcl_publisher_init+0x108>
 800bb12:	4630      	mov	r0, r6
 800bb14:	f005 ff18 	bl	8011948 <rcl_node_get_rmw_handle>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800bb1e:	f001 f9cf 	bl	800cec0 <rmw_destroy_publisher>
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800bb26:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bb28:	4618      	mov	r0, r3
 800bb2a:	4790      	blx	r2
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	2701      	movs	r7, #1
 800bb32:	e7db      	b.n	800baec <rcl_publisher_init+0xd0>
 800bb34:	2867      	cmp	r0, #103	@ 0x67
 800bb36:	d0d9      	beq.n	800baec <rcl_publisher_init+0xd0>
 800bb38:	2869      	cmp	r0, #105	@ 0x69
 800bb3a:	d003      	beq.n	800bb44 <rcl_publisher_init+0x128>
 800bb3c:	280a      	cmp	r0, #10
 800bb3e:	d1f7      	bne.n	800bb30 <rcl_publisher_init+0x114>
 800bb40:	270a      	movs	r7, #10
 800bb42:	e7d3      	b.n	800baec <rcl_publisher_init+0xd0>
 800bb44:	2767      	movs	r7, #103	@ 0x67
 800bb46:	e7d1      	b.n	800baec <rcl_publisher_init+0xd0>

0800bb48 <rcl_publisher_get_default_options>:
 800bb48:	b570      	push	{r4, r5, r6, lr}
 800bb4a:	4d14      	ldr	r5, [pc, #80]	@ (800bb9c <rcl_publisher_get_default_options+0x54>)
 800bb4c:	4914      	ldr	r1, [pc, #80]	@ (800bba0 <rcl_publisher_get_default_options+0x58>)
 800bb4e:	b088      	sub	sp, #32
 800bb50:	4604      	mov	r4, r0
 800bb52:	2250      	movs	r2, #80	@ 0x50
 800bb54:	4628      	mov	r0, r5
 800bb56:	f00c fe0c 	bl	8018772 <memcpy>
 800bb5a:	a802      	add	r0, sp, #8
 800bb5c:	f000 ffa6 	bl	800caac <rcutils_get_default_allocator>
 800bb60:	f10d 0c08 	add.w	ip, sp, #8
 800bb64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb68:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800bb6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bb70:	466e      	mov	r6, sp
 800bb72:	f8dc 3000 	ldr.w	r3, [ip]
 800bb76:	f8ce 3000 	str.w	r3, [lr]
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f001 f834 	bl	800cbe8 <rmw_get_default_publisher_options>
 800bb80:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bb84:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bb88:	e883 0003 	stmia.w	r3, {r0, r1}
 800bb8c:	2270      	movs	r2, #112	@ 0x70
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4620      	mov	r0, r4
 800bb92:	f00c fdee 	bl	8018772 <memcpy>
 800bb96:	4620      	mov	r0, r4
 800bb98:	b008      	add	sp, #32
 800bb9a:	bd70      	pop	{r4, r5, r6, pc}
 800bb9c:	20009698 	.word	0x20009698
 800bba0:	080196f8 	.word	0x080196f8

0800bba4 <rcl_publish>:
 800bba4:	b1f8      	cbz	r0, 800bbe6 <rcl_publish+0x42>
 800bba6:	6803      	ldr	r3, [r0, #0]
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	4604      	mov	r4, r0
 800bbac:	b1b3      	cbz	r3, 800bbdc <rcl_publish+0x38>
 800bbae:	4616      	mov	r6, r2
 800bbb0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bbb4:	b192      	cbz	r2, 800bbdc <rcl_publish+0x38>
 800bbb6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bbba:	460d      	mov	r5, r1
 800bbbc:	f005 fac8 	bl	8011150 <rcl_context_is_valid>
 800bbc0:	b160      	cbz	r0, 800bbdc <rcl_publish+0x38>
 800bbc2:	6823      	ldr	r3, [r4, #0]
 800bbc4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bbc8:	b140      	cbz	r0, 800bbdc <rcl_publish+0x38>
 800bbca:	b155      	cbz	r5, 800bbe2 <rcl_publish+0x3e>
 800bbcc:	4632      	mov	r2, r6
 800bbce:	4629      	mov	r1, r5
 800bbd0:	f001 f828 	bl	800cc24 <rmw_publish>
 800bbd4:	3800      	subs	r0, #0
 800bbd6:	bf18      	it	ne
 800bbd8:	2001      	movne	r0, #1
 800bbda:	bd70      	pop	{r4, r5, r6, pc}
 800bbdc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bbe0:	bd70      	pop	{r4, r5, r6, pc}
 800bbe2:	200b      	movs	r0, #11
 800bbe4:	bd70      	pop	{r4, r5, r6, pc}
 800bbe6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bbea:	4770      	bx	lr

0800bbec <rcl_publisher_is_valid>:
 800bbec:	b1a0      	cbz	r0, 800bc18 <rcl_publisher_is_valid+0x2c>
 800bbee:	6803      	ldr	r3, [r0, #0]
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	b173      	cbz	r3, 800bc14 <rcl_publisher_is_valid+0x28>
 800bbf6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bbfa:	b15a      	cbz	r2, 800bc14 <rcl_publisher_is_valid+0x28>
 800bbfc:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bc00:	f005 faa6 	bl	8011150 <rcl_context_is_valid>
 800bc04:	b130      	cbz	r0, 800bc14 <rcl_publisher_is_valid+0x28>
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bc0c:	3800      	subs	r0, #0
 800bc0e:	bf18      	it	ne
 800bc10:	2001      	movne	r0, #1
 800bc12:	bd10      	pop	{r4, pc}
 800bc14:	2000      	movs	r0, #0
 800bc16:	bd10      	pop	{r4, pc}
 800bc18:	2000      	movs	r0, #0
 800bc1a:	4770      	bx	lr

0800bc1c <rcl_publisher_is_valid_except_context>:
 800bc1c:	b130      	cbz	r0, 800bc2c <rcl_publisher_is_valid_except_context+0x10>
 800bc1e:	6800      	ldr	r0, [r0, #0]
 800bc20:	b120      	cbz	r0, 800bc2c <rcl_publisher_is_valid_except_context+0x10>
 800bc22:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800bc26:	3800      	subs	r0, #0
 800bc28:	bf18      	it	ne
 800bc2a:	2001      	movne	r0, #1
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop

0800bc30 <_rclc_check_for_new_data>:
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d046      	beq.n	800bcc2 <_rclc_check_for_new_data+0x92>
 800bc34:	b510      	push	{r4, lr}
 800bc36:	7802      	ldrb	r2, [r0, #0]
 800bc38:	b084      	sub	sp, #16
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2a0a      	cmp	r2, #10
 800bc3e:	d842      	bhi.n	800bcc6 <_rclc_check_for_new_data+0x96>
 800bc40:	e8df f002 	tbb	[pc, r2]
 800bc44:	14181212 	.word	0x14181212
 800bc48:	06060614 	.word	0x06060614
 800bc4c:	2e1a      	.short	0x2e1a
 800bc4e:	16          	.byte	0x16
 800bc4f:	00          	.byte	0x00
 800bc50:	6a0a      	ldr	r2, [r1, #32]
 800bc52:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bc54:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bc58:	2000      	movs	r0, #0
 800bc5a:	1a12      	subs	r2, r2, r0
 800bc5c:	bf18      	it	ne
 800bc5e:	2201      	movne	r2, #1
 800bc60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800bc64:	b004      	add	sp, #16
 800bc66:	bd10      	pop	{r4, pc}
 800bc68:	680a      	ldr	r2, [r1, #0]
 800bc6a:	e7f2      	b.n	800bc52 <_rclc_check_for_new_data+0x22>
 800bc6c:	698a      	ldr	r2, [r1, #24]
 800bc6e:	e7f0      	b.n	800bc52 <_rclc_check_for_new_data+0x22>
 800bc70:	688a      	ldr	r2, [r1, #8]
 800bc72:	e7ee      	b.n	800bc52 <_rclc_check_for_new_data+0x22>
 800bc74:	690a      	ldr	r2, [r1, #16]
 800bc76:	e7ec      	b.n	800bc52 <_rclc_check_for_new_data+0x22>
 800bc78:	685c      	ldr	r4, [r3, #4]
 800bc7a:	4608      	mov	r0, r1
 800bc7c:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800bc80:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800bc84:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800bc88:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800bc92:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800bc96:	f104 0110 	add.w	r1, r4, #16
 800bc9a:	f007 fb55 	bl	8013348 <rcl_action_client_wait_set_get_entities_ready>
 800bc9e:	e7e1      	b.n	800bc64 <_rclc_check_for_new_data+0x34>
 800bca0:	685c      	ldr	r4, [r3, #4]
 800bca2:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800bca6:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800bcaa:	e9cd 3200 	strd	r3, r2, [sp]
 800bcae:	4608      	mov	r0, r1
 800bcb0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800bcb4:	f104 0220 	add.w	r2, r4, #32
 800bcb8:	f104 0110 	add.w	r1, r4, #16
 800bcbc:	f007 fd5c 	bl	8013778 <rcl_action_server_wait_set_get_entities_ready>
 800bcc0:	e7d0      	b.n	800bc64 <_rclc_check_for_new_data+0x34>
 800bcc2:	200b      	movs	r0, #11
 800bcc4:	4770      	bx	lr
 800bcc6:	2001      	movs	r0, #1
 800bcc8:	e7cc      	b.n	800bc64 <_rclc_check_for_new_data+0x34>
 800bcca:	bf00      	nop

0800bccc <_rclc_take_new_data>:
 800bccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcce:	b09b      	sub	sp, #108	@ 0x6c
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	f000 8088 	beq.w	800bde6 <_rclc_take_new_data+0x11a>
 800bcd6:	7803      	ldrb	r3, [r0, #0]
 800bcd8:	4604      	mov	r4, r0
 800bcda:	2b0a      	cmp	r3, #10
 800bcdc:	f200 8167 	bhi.w	800bfae <_rclc_take_new_data+0x2e2>
 800bce0:	e8df f003 	tbb	[pc, r3]
 800bce4:	44152d2d 	.word	0x44152d2d
 800bce8:	19191944 	.word	0x19191944
 800bcec:	065a      	.short	0x065a
 800bcee:	15          	.byte	0x15
 800bcef:	00          	.byte	0x00
 800bcf0:	6840      	ldr	r0, [r0, #4]
 800bcf2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f040 80b2 	bne.w	800be60 <_rclc_take_new_data+0x194>
 800bcfc:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f040 80e4 	bne.w	800bece <_rclc_take_new_data+0x202>
 800bd06:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d16f      	bne.n	800bdee <_rclc_take_new_data+0x122>
 800bd0e:	2500      	movs	r5, #0
 800bd10:	4628      	mov	r0, r5
 800bd12:	b01b      	add	sp, #108	@ 0x6c
 800bd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd16:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bd18:	6a0b      	ldr	r3, [r1, #32]
 800bd1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d0f5      	beq.n	800bd0e <_rclc_take_new_data+0x42>
 800bd22:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bd26:	f104 0110 	add.w	r1, r4, #16
 800bd2a:	f005 ffe9 	bl	8011d00 <rcl_take_request>
 800bd2e:	4605      	mov	r5, r0
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d0ec      	beq.n	800bd0e <_rclc_take_new_data+0x42>
 800bd34:	f240 2359 	movw	r3, #601	@ 0x259
 800bd38:	4298      	cmp	r0, r3
 800bd3a:	d013      	beq.n	800bd64 <_rclc_take_new_data+0x98>
 800bd3c:	e029      	b.n	800bd92 <_rclc_take_new_data+0xc6>
 800bd3e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bd40:	680b      	ldr	r3, [r1, #0]
 800bd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0e1      	beq.n	800bd0e <_rclc_take_new_data+0x42>
 800bd4a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	aa0a      	add	r2, sp, #40	@ 0x28
 800bd52:	f006 f913 	bl	8011f7c <rcl_take>
 800bd56:	4605      	mov	r5, r0
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d0d9      	beq.n	800bd10 <_rclc_take_new_data+0x44>
 800bd5c:	f240 1391 	movw	r3, #401	@ 0x191
 800bd60:	4298      	cmp	r0, r3
 800bd62:	d116      	bne.n	800bd92 <_rclc_take_new_data+0xc6>
 800bd64:	2300      	movs	r3, #0
 800bd66:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800bd6a:	e7d1      	b.n	800bd10 <_rclc_take_new_data+0x44>
 800bd6c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bd6e:	698b      	ldr	r3, [r1, #24]
 800bd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d0ca      	beq.n	800bd0e <_rclc_take_new_data+0x42>
 800bd78:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bd7c:	f104 0110 	add.w	r1, r4, #16
 800bd80:	f005 f976 	bl	8011070 <rcl_take_response>
 800bd84:	4605      	mov	r5, r0
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d0c1      	beq.n	800bd0e <_rclc_take_new_data+0x42>
 800bd8a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bd8e:	4298      	cmp	r0, r3
 800bd90:	d0be      	beq.n	800bd10 <_rclc_take_new_data+0x44>
 800bd92:	f000 febd 	bl	800cb10 <rcutils_reset_error>
 800bd96:	e7bb      	b.n	800bd10 <_rclc_take_new_data+0x44>
 800bd98:	6840      	ldr	r0, [r0, #4]
 800bd9a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d17d      	bne.n	800be9e <_rclc_take_new_data+0x1d2>
 800bda2:	69c3      	ldr	r3, [r0, #28]
 800bda4:	b11b      	cbz	r3, 800bdae <_rclc_take_new_data+0xe2>
 800bda6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d144      	bne.n	800be38 <_rclc_take_new_data+0x16c>
 800bdae:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f040 80ac 	bne.w	800bf10 <_rclc_take_new_data+0x244>
 800bdb8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d0a6      	beq.n	800bd0e <_rclc_take_new_data+0x42>
 800bdc0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800bdc2:	a90a      	add	r1, sp, #40	@ 0x28
 800bdc4:	3010      	adds	r0, #16
 800bdc6:	f007 f997 	bl	80130f8 <rcl_action_take_result_response>
 800bdca:	4605      	mov	r5, r0
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d1e0      	bne.n	800bd92 <_rclc_take_new_data+0xc6>
 800bdd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bdd4:	6860      	ldr	r0, [r4, #4]
 800bdd6:	f007 fdf3 	bl	80139c0 <rclc_action_find_handle_by_result_request_sequence_number>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d098      	beq.n	800bd10 <_rclc_take_new_data+0x44>
 800bdde:	2301      	movs	r3, #1
 800bde0:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800bde4:	e794      	b.n	800bd10 <_rclc_take_new_data+0x44>
 800bde6:	250b      	movs	r5, #11
 800bde8:	4628      	mov	r0, r5
 800bdea:	b01b      	add	sp, #108	@ 0x6c
 800bdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdee:	ae04      	add	r6, sp, #16
 800bdf0:	aa0a      	add	r2, sp, #40	@ 0x28
 800bdf2:	3010      	adds	r0, #16
 800bdf4:	4631      	mov	r1, r6
 800bdf6:	f007 fbf3 	bl	80135e0 <rcl_action_take_cancel_request>
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d1c8      	bne.n	800bd92 <_rclc_take_new_data+0xc6>
 800be00:	6860      	ldr	r0, [r4, #4]
 800be02:	a90a      	add	r1, sp, #40	@ 0x28
 800be04:	f007 fd9a 	bl	801393c <rclc_action_find_goal_handle_by_uuid>
 800be08:	4607      	mov	r7, r0
 800be0a:	2800      	cmp	r0, #0
 800be0c:	f000 80bb 	beq.w	800bf86 <_rclc_take_new_data+0x2ba>
 800be10:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800be14:	2101      	movs	r1, #1
 800be16:	f007 fd1b 	bl	8013850 <rcl_action_transition_goal_state>
 800be1a:	2803      	cmp	r0, #3
 800be1c:	4684      	mov	ip, r0
 800be1e:	f040 80a7 	bne.w	800bf70 <_rclc_take_new_data+0x2a4>
 800be22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800be24:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800be28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be2a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800be2e:	e884 0003 	stmia.w	r4, {r0, r1}
 800be32:	f887 c008 	strb.w	ip, [r7, #8]
 800be36:	e76b      	b.n	800bd10 <_rclc_take_new_data+0x44>
 800be38:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800be3a:	3010      	adds	r0, #16
 800be3c:	f007 f9dc 	bl	80131f8 <rcl_action_take_feedback>
 800be40:	4605      	mov	r5, r0
 800be42:	2800      	cmp	r0, #0
 800be44:	d1a5      	bne.n	800bd92 <_rclc_take_new_data+0xc6>
 800be46:	6860      	ldr	r0, [r4, #4]
 800be48:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800be4a:	f007 fd77 	bl	801393c <rclc_action_find_goal_handle_by_uuid>
 800be4e:	4603      	mov	r3, r0
 800be50:	2800      	cmp	r0, #0
 800be52:	f000 80a3 	beq.w	800bf9c <_rclc_take_new_data+0x2d0>
 800be56:	2201      	movs	r2, #1
 800be58:	6860      	ldr	r0, [r4, #4]
 800be5a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800be5e:	e7a6      	b.n	800bdae <_rclc_take_new_data+0xe2>
 800be60:	f007 fd46 	bl	80138f0 <rclc_action_take_goal_handle>
 800be64:	4606      	mov	r6, r0
 800be66:	6860      	ldr	r0, [r4, #4]
 800be68:	2e00      	cmp	r6, #0
 800be6a:	f43f af47 	beq.w	800bcfc <_rclc_take_new_data+0x30>
 800be6e:	6070      	str	r0, [r6, #4]
 800be70:	69f2      	ldr	r2, [r6, #28]
 800be72:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800be76:	3010      	adds	r0, #16
 800be78:	f007 fafa 	bl	8013470 <rcl_action_take_goal_request>
 800be7c:	4605      	mov	r5, r0
 800be7e:	2800      	cmp	r0, #0
 800be80:	f040 808e 	bne.w	800bfa0 <_rclc_take_new_data+0x2d4>
 800be84:	69f7      	ldr	r7, [r6, #28]
 800be86:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800be88:	7235      	strb	r5, [r6, #8]
 800be8a:	f8c6 0009 	str.w	r0, [r6, #9]
 800be8e:	f8c6 100d 	str.w	r1, [r6, #13]
 800be92:	6860      	ldr	r0, [r4, #4]
 800be94:	f8c6 2011 	str.w	r2, [r6, #17]
 800be98:	f8c6 3015 	str.w	r3, [r6, #21]
 800be9c:	e72e      	b.n	800bcfc <_rclc_take_new_data+0x30>
 800be9e:	aa04      	add	r2, sp, #16
 800bea0:	a90a      	add	r1, sp, #40	@ 0x28
 800bea2:	3010      	adds	r0, #16
 800bea4:	f007 f8b0 	bl	8013008 <rcl_action_take_goal_response>
 800bea8:	4605      	mov	r5, r0
 800beaa:	2800      	cmp	r0, #0
 800beac:	f47f af71 	bne.w	800bd92 <_rclc_take_new_data+0xc6>
 800beb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800beb4:	6860      	ldr	r0, [r4, #4]
 800beb6:	f007 fd71 	bl	801399c <rclc_action_find_handle_by_goal_request_sequence_number>
 800beba:	b130      	cbz	r0, 800beca <_rclc_take_new_data+0x1fe>
 800bebc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800bec0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800bec4:	2201      	movs	r2, #1
 800bec6:	f880 2020 	strb.w	r2, [r0, #32]
 800beca:	6860      	ldr	r0, [r4, #4]
 800becc:	e769      	b.n	800bda2 <_rclc_take_new_data+0xd6>
 800bece:	aa04      	add	r2, sp, #16
 800bed0:	3010      	adds	r0, #16
 800bed2:	a90a      	add	r1, sp, #40	@ 0x28
 800bed4:	f007 fb44 	bl	8013560 <rcl_action_take_result_request>
 800bed8:	4605      	mov	r5, r0
 800beda:	2800      	cmp	r0, #0
 800bedc:	f47f af59 	bne.w	800bd92 <_rclc_take_new_data+0xc6>
 800bee0:	6860      	ldr	r0, [r4, #4]
 800bee2:	a904      	add	r1, sp, #16
 800bee4:	f007 fd2a 	bl	801393c <rclc_action_find_goal_handle_by_uuid>
 800bee8:	4607      	mov	r7, r0
 800beea:	b160      	cbz	r0, 800bf06 <_rclc_take_new_data+0x23a>
 800beec:	ad0a      	add	r5, sp, #40	@ 0x28
 800beee:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800bef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bef4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bef6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800befa:	f04f 0c02 	mov.w	ip, #2
 800befe:	e886 0003 	stmia.w	r6, {r0, r1}
 800bf02:	f887 c008 	strb.w	ip, [r7, #8]
 800bf06:	6860      	ldr	r0, [r4, #4]
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800bf0e:	e6fa      	b.n	800bd06 <_rclc_take_new_data+0x3a>
 800bf10:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800bf14:	a90a      	add	r1, sp, #40	@ 0x28
 800bf16:	3010      	adds	r0, #16
 800bf18:	f007 f92e 	bl	8013178 <rcl_action_take_cancel_response>
 800bf1c:	4605      	mov	r5, r0
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	f47f af37 	bne.w	800bd92 <_rclc_take_new_data+0xc6>
 800bf24:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf28:	6860      	ldr	r0, [r4, #4]
 800bf2a:	f007 fd5b 	bl	80139e4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800bf2e:	4606      	mov	r6, r0
 800bf30:	6860      	ldr	r0, [r4, #4]
 800bf32:	2e00      	cmp	r6, #0
 800bf34:	f43f af40 	beq.w	800bdb8 <_rclc_take_new_data+0xec>
 800bf38:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bf3a:	2701      	movs	r7, #1
 800bf3c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f43f af3a 	beq.w	800bdb8 <_rclc_take_new_data+0xec>
 800bf44:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bf46:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800bf4a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bf4e:	f007 fcf5 	bl	801393c <rclc_action_find_goal_handle_by_uuid>
 800bf52:	b138      	cbz	r0, 800bf64 <_rclc_take_new_data+0x298>
 800bf54:	6860      	ldr	r0, [r4, #4]
 800bf56:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bf58:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800bf5c:	3501      	adds	r5, #1
 800bf5e:	42ab      	cmp	r3, r5
 800bf60:	d8f0      	bhi.n	800bf44 <_rclc_take_new_data+0x278>
 800bf62:	e729      	b.n	800bdb8 <_rclc_take_new_data+0xec>
 800bf64:	6860      	ldr	r0, [r4, #4]
 800bf66:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bf68:	3501      	adds	r5, #1
 800bf6a:	42ab      	cmp	r3, r5
 800bf6c:	d8ea      	bhi.n	800bf44 <_rclc_take_new_data+0x278>
 800bf6e:	e723      	b.n	800bdb8 <_rclc_take_new_data+0xec>
 800bf70:	ab06      	add	r3, sp, #24
 800bf72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf74:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bf78:	2103      	movs	r1, #3
 800bf7a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800bf7e:	6860      	ldr	r0, [r4, #4]
 800bf80:	f007 fda6 	bl	8013ad0 <rclc_action_server_goal_cancel_reject>
 800bf84:	e6c4      	b.n	800bd10 <_rclc_take_new_data+0x44>
 800bf86:	ab06      	add	r3, sp, #24
 800bf88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf8a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bf8e:	2102      	movs	r1, #2
 800bf90:	e896 000c 	ldmia.w	r6, {r2, r3}
 800bf94:	6860      	ldr	r0, [r4, #4]
 800bf96:	f007 fd9b 	bl	8013ad0 <rclc_action_server_goal_cancel_reject>
 800bf9a:	e6b9      	b.n	800bd10 <_rclc_take_new_data+0x44>
 800bf9c:	6860      	ldr	r0, [r4, #4]
 800bf9e:	e706      	b.n	800bdae <_rclc_take_new_data+0xe2>
 800bfa0:	6860      	ldr	r0, [r4, #4]
 800bfa2:	4631      	mov	r1, r6
 800bfa4:	f007 fcb4 	bl	8013910 <rclc_action_remove_used_goal_handle>
 800bfa8:	f000 fdb2 	bl	800cb10 <rcutils_reset_error>
 800bfac:	e6b0      	b.n	800bd10 <_rclc_take_new_data+0x44>
 800bfae:	2501      	movs	r5, #1
 800bfb0:	e6ae      	b.n	800bd10 <_rclc_take_new_data+0x44>
 800bfb2:	bf00      	nop

0800bfb4 <_rclc_execute.part.0>:
 800bfb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfb6:	7803      	ldrb	r3, [r0, #0]
 800bfb8:	b087      	sub	sp, #28
 800bfba:	4604      	mov	r4, r0
 800bfbc:	2b0a      	cmp	r3, #10
 800bfbe:	f200 8136 	bhi.w	800c22e <_rclc_execute.part.0+0x27a>
 800bfc2:	e8df f003 	tbb	[pc, r3]
 800bfc6:	435e      	.short	0x435e
 800bfc8:	06a1664f 	.word	0x06a1664f
 800bfcc:	6c1e0606 	.word	0x6c1e0606
 800bfd0:	59          	.byte	0x59
 800bfd1:	00          	.byte	0x00
 800bfd2:	2b06      	cmp	r3, #6
 800bfd4:	f000 8122 	beq.w	800c21c <_rclc_execute.part.0+0x268>
 800bfd8:	2b07      	cmp	r3, #7
 800bfda:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bfdc:	f040 8118 	bne.w	800c210 <_rclc_execute.part.0+0x25c>
 800bfe0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800bfe4:	6880      	ldr	r0, [r0, #8]
 800bfe6:	4798      	blx	r3
 800bfe8:	f104 0110 	add.w	r1, r4, #16
 800bfec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bfee:	6860      	ldr	r0, [r4, #4]
 800bff0:	f005 fec6 	bl	8011d80 <rcl_send_response>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d033      	beq.n	800c060 <_rclc_execute.part.0+0xac>
 800bff8:	9005      	str	r0, [sp, #20]
 800bffa:	f000 fd89 	bl	800cb10 <rcutils_reset_error>
 800bffe:	9805      	ldr	r0, [sp, #20]
 800c000:	e02e      	b.n	800c060 <_rclc_execute.part.0+0xac>
 800c002:	6840      	ldr	r0, [r0, #4]
 800c004:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 8086 	beq.w	800c11a <_rclc_execute.part.0+0x166>
 800c00e:	2600      	movs	r6, #0
 800c010:	2701      	movs	r7, #1
 800c012:	e004      	b.n	800c01e <_rclc_execute.part.0+0x6a>
 800c014:	f007 fc46 	bl	80138a4 <rclc_action_send_result_request>
 800c018:	b998      	cbnz	r0, 800c042 <_rclc_execute.part.0+0x8e>
 800c01a:	722f      	strb	r7, [r5, #8]
 800c01c:	6860      	ldr	r0, [r4, #4]
 800c01e:	f007 fcf3 	bl	8013a08 <rclc_action_find_first_handle_with_goal_response>
 800c022:	4605      	mov	r5, r0
 800c024:	2800      	cmp	r0, #0
 800c026:	d077      	beq.n	800c118 <_rclc_execute.part.0+0x164>
 800c028:	6863      	ldr	r3, [r4, #4]
 800c02a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c02c:	699b      	ldr	r3, [r3, #24]
 800c02e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c032:	f885 6020 	strb.w	r6, [r5, #32]
 800c036:	4798      	blx	r3
 800c038:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c03c:	4628      	mov	r0, r5
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1e8      	bne.n	800c014 <_rclc_execute.part.0+0x60>
 800c042:	6860      	ldr	r0, [r4, #4]
 800c044:	4629      	mov	r1, r5
 800c046:	f007 fc63 	bl	8013910 <rclc_action_remove_used_goal_handle>
 800c04a:	e7e7      	b.n	800c01c <_rclc_execute.part.0+0x68>
 800c04c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c050:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c054:	2d00      	cmp	r5, #0
 800c056:	f000 80c9 	beq.w	800c1ec <_rclc_execute.part.0+0x238>
 800c05a:	6880      	ldr	r0, [r0, #8]
 800c05c:	4798      	blx	r3
 800c05e:	2000      	movs	r0, #0
 800c060:	b007      	add	sp, #28
 800c062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c064:	6840      	ldr	r0, [r0, #4]
 800c066:	f006 f88d 	bl	8012184 <rcl_timer_call>
 800c06a:	f240 3321 	movw	r3, #801	@ 0x321
 800c06e:	4298      	cmp	r0, r3
 800c070:	d004      	beq.n	800c07c <_rclc_execute.part.0+0xc8>
 800c072:	2800      	cmp	r0, #0
 800c074:	d0f4      	beq.n	800c060 <_rclc_execute.part.0+0xac>
 800c076:	e7bf      	b.n	800bff8 <_rclc_execute.part.0+0x44>
 800c078:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c07a:	4798      	blx	r3
 800c07c:	2000      	movs	r0, #0
 800c07e:	b007      	add	sp, #28
 800c080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c082:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c086:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c088:	b925      	cbnz	r5, 800c094 <_rclc_execute.part.0+0xe0>
 800c08a:	4628      	mov	r0, r5
 800c08c:	4798      	blx	r3
 800c08e:	4628      	mov	r0, r5
 800c090:	e7e6      	b.n	800c060 <_rclc_execute.part.0+0xac>
 800c092:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c094:	68a0      	ldr	r0, [r4, #8]
 800c096:	4798      	blx	r3
 800c098:	2000      	movs	r0, #0
 800c09a:	b007      	add	sp, #28
 800c09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c09e:	6840      	ldr	r0, [r0, #4]
 800c0a0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c0a4:	bb3b      	cbnz	r3, 800c0f6 <_rclc_execute.part.0+0x142>
 800c0a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d07b      	beq.n	800c1a6 <_rclc_execute.part.0+0x1f2>
 800c0ae:	f640 0634 	movw	r6, #2100	@ 0x834
 800c0b2:	2701      	movs	r7, #1
 800c0b4:	e007      	b.n	800c0c6 <_rclc_execute.part.0+0x112>
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f007 fcbe 	bl	8013a38 <rclc_action_server_response_goal_request>
 800c0bc:	6860      	ldr	r0, [r4, #4]
 800c0be:	4629      	mov	r1, r5
 800c0c0:	f007 fc26 	bl	8013910 <rclc_action_remove_used_goal_handle>
 800c0c4:	6860      	ldr	r0, [r4, #4]
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	f007 fc50 	bl	801396c <rclc_action_find_first_handle_by_status>
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d066      	beq.n	800c1a0 <_rclc_execute.part.0+0x1ec>
 800c0d2:	6863      	ldr	r3, [r4, #4]
 800c0d4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	4798      	blx	r3
 800c0da:	42b0      	cmp	r0, r6
 800c0dc:	f04f 0100 	mov.w	r1, #0
 800c0e0:	d1e9      	bne.n	800c0b6 <_rclc_execute.part.0+0x102>
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f007 fca7 	bl	8013a38 <rclc_action_server_response_goal_request>
 800c0ea:	722f      	strb	r7, [r5, #8]
 800c0ec:	e7ea      	b.n	800c0c4 <_rclc_execute.part.0+0x110>
 800c0ee:	6848      	ldr	r0, [r1, #4]
 800c0f0:	f007 fc0e 	bl	8013910 <rclc_action_remove_used_goal_handle>
 800c0f4:	6860      	ldr	r0, [r4, #4]
 800c0f6:	f007 fc45 	bl	8013984 <rclc_action_find_first_terminated_handle>
 800c0fa:	4601      	mov	r1, r0
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d1f6      	bne.n	800c0ee <_rclc_execute.part.0+0x13a>
 800c100:	6860      	ldr	r0, [r4, #4]
 800c102:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c106:	e7ce      	b.n	800c0a6 <_rclc_execute.part.0+0xf2>
 800c108:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c10a:	6880      	ldr	r0, [r0, #8]
 800c10c:	f104 0110 	add.w	r1, r4, #16
 800c110:	4798      	blx	r3
 800c112:	2000      	movs	r0, #0
 800c114:	b007      	add	sp, #28
 800c116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c118:	6860      	ldr	r0, [r4, #4]
 800c11a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c11e:	b18b      	cbz	r3, 800c144 <_rclc_execute.part.0+0x190>
 800c120:	68c5      	ldr	r5, [r0, #12]
 800c122:	b32d      	cbz	r5, 800c170 <_rclc_execute.part.0+0x1bc>
 800c124:	2600      	movs	r6, #0
 800c126:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c12a:	b143      	cbz	r3, 800c13e <_rclc_execute.part.0+0x18a>
 800c12c:	69c3      	ldr	r3, [r0, #28]
 800c12e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c132:	b123      	cbz	r3, 800c13e <_rclc_execute.part.0+0x18a>
 800c134:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c136:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c138:	4628      	mov	r0, r5
 800c13a:	4798      	blx	r3
 800c13c:	6860      	ldr	r0, [r4, #4]
 800c13e:	682d      	ldr	r5, [r5, #0]
 800c140:	2d00      	cmp	r5, #0
 800c142:	d1f0      	bne.n	800c126 <_rclc_execute.part.0+0x172>
 800c144:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c148:	b193      	cbz	r3, 800c170 <_rclc_execute.part.0+0x1bc>
 800c14a:	68c5      	ldr	r5, [r0, #12]
 800c14c:	b185      	cbz	r5, 800c170 <_rclc_execute.part.0+0x1bc>
 800c14e:	2600      	movs	r6, #0
 800c150:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c154:	b14b      	cbz	r3, 800c16a <_rclc_execute.part.0+0x1b6>
 800c156:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c158:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c15c:	b12b      	cbz	r3, 800c16a <_rclc_execute.part.0+0x1b6>
 800c15e:	4628      	mov	r0, r5
 800c160:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c164:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c166:	4798      	blx	r3
 800c168:	6860      	ldr	r0, [r4, #4]
 800c16a:	682d      	ldr	r5, [r5, #0]
 800c16c:	2d00      	cmp	r5, #0
 800c16e:	d1ef      	bne.n	800c150 <_rclc_execute.part.0+0x19c>
 800c170:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c174:	2b00      	cmp	r3, #0
 800c176:	d081      	beq.n	800c07c <_rclc_execute.part.0+0xc8>
 800c178:	2700      	movs	r7, #0
 800c17a:	e00b      	b.n	800c194 <_rclc_execute.part.0+0x1e0>
 800c17c:	6863      	ldr	r3, [r4, #4]
 800c17e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c180:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c182:	6a1e      	ldr	r6, [r3, #32]
 800c184:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c188:	47b0      	blx	r6
 800c18a:	6860      	ldr	r0, [r4, #4]
 800c18c:	4629      	mov	r1, r5
 800c18e:	f007 fbbf 	bl	8013910 <rclc_action_remove_used_goal_handle>
 800c192:	6860      	ldr	r0, [r4, #4]
 800c194:	f007 fc44 	bl	8013a20 <rclc_action_find_first_handle_with_result_response>
 800c198:	4605      	mov	r5, r0
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d1ee      	bne.n	800c17c <_rclc_execute.part.0+0x1c8>
 800c19e:	e76d      	b.n	800c07c <_rclc_execute.part.0+0xc8>
 800c1a0:	6860      	ldr	r0, [r4, #4]
 800c1a2:	f880 5020 	strb.w	r5, [r0, #32]
 800c1a6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	f43f af66 	beq.w	800c07c <_rclc_execute.part.0+0xc8>
 800c1b0:	68c5      	ldr	r5, [r0, #12]
 800c1b2:	b1b5      	cbz	r5, 800c1e2 <_rclc_execute.part.0+0x22e>
 800c1b4:	2602      	movs	r6, #2
 800c1b6:	e001      	b.n	800c1bc <_rclc_execute.part.0+0x208>
 800c1b8:	682d      	ldr	r5, [r5, #0]
 800c1ba:	b195      	cbz	r5, 800c1e2 <_rclc_execute.part.0+0x22e>
 800c1bc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d1f9      	bne.n	800c1b8 <_rclc_execute.part.0+0x204>
 800c1c4:	69c3      	ldr	r3, [r0, #28]
 800c1c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	4798      	blx	r3
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c1d8:	b163      	cbz	r3, 800c1f4 <_rclc_execute.part.0+0x240>
 800c1da:	f007 fc4d 	bl	8013a78 <rclc_action_server_goal_cancel_accept>
 800c1de:	6860      	ldr	r0, [r4, #4]
 800c1e0:	e7ea      	b.n	800c1b8 <_rclc_execute.part.0+0x204>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	e739      	b.n	800c060 <_rclc_execute.part.0+0xac>
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	4798      	blx	r3
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	e735      	b.n	800c060 <_rclc_execute.part.0+0xac>
 800c1f4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c1f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c1fa:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c1fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c202:	6860      	ldr	r0, [r4, #4]
 800c204:	2101      	movs	r1, #1
 800c206:	f007 fc63 	bl	8013ad0 <rclc_action_server_goal_cancel_reject>
 800c20a:	722e      	strb	r6, [r5, #8]
 800c20c:	6860      	ldr	r0, [r4, #4]
 800c20e:	e7d3      	b.n	800c1b8 <_rclc_execute.part.0+0x204>
 800c210:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c212:	6880      	ldr	r0, [r0, #8]
 800c214:	4798      	blx	r3
 800c216:	f104 0110 	add.w	r1, r4, #16
 800c21a:	e6e7      	b.n	800bfec <_rclc_execute.part.0+0x38>
 800c21c:	f100 0110 	add.w	r1, r0, #16
 800c220:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c222:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c224:	6880      	ldr	r0, [r0, #8]
 800c226:	9105      	str	r1, [sp, #20]
 800c228:	4798      	blx	r3
 800c22a:	9905      	ldr	r1, [sp, #20]
 800c22c:	e6de      	b.n	800bfec <_rclc_execute.part.0+0x38>
 800c22e:	2001      	movs	r0, #1
 800c230:	e716      	b.n	800c060 <_rclc_execute.part.0+0xac>
 800c232:	bf00      	nop

0800c234 <rclc_executor_trigger_any>:
 800c234:	2800      	cmp	r0, #0
 800c236:	d03f      	beq.n	800c2b8 <rclc_executor_trigger_any+0x84>
 800c238:	2900      	cmp	r1, #0
 800c23a:	d03e      	beq.n	800c2ba <rclc_executor_trigger_any+0x86>
 800c23c:	4603      	mov	r3, r0
 800c23e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c242:	2200      	movs	r2, #0
 800c244:	2800      	cmp	r0, #0
 800c246:	d037      	beq.n	800c2b8 <rclc_executor_trigger_any+0x84>
 800c248:	b430      	push	{r4, r5}
 800c24a:	f893 c000 	ldrb.w	ip, [r3]
 800c24e:	f1bc 0f08 	cmp.w	ip, #8
 800c252:	d11e      	bne.n	800c292 <rclc_executor_trigger_any+0x5e>
 800c254:	685c      	ldr	r4, [r3, #4]
 800c256:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c258:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c25c:	d105      	bne.n	800c26a <rclc_executor_trigger_any+0x36>
 800c25e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c262:	b910      	cbnz	r0, 800c26a <rclc_executor_trigger_any+0x36>
 800c264:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c268:	b128      	cbz	r0, 800c276 <rclc_executor_trigger_any+0x42>
 800c26a:	bc30      	pop	{r4, r5}
 800c26c:	4770      	bx	lr
 800c26e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c272:	2800      	cmp	r0, #0
 800c274:	d1f9      	bne.n	800c26a <rclc_executor_trigger_any+0x36>
 800c276:	3201      	adds	r2, #1
 800c278:	4291      	cmp	r1, r2
 800c27a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c27e:	d018      	beq.n	800c2b2 <rclc_executor_trigger_any+0x7e>
 800c280:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c284:	2800      	cmp	r0, #0
 800c286:	d0f0      	beq.n	800c26a <rclc_executor_trigger_any+0x36>
 800c288:	f893 c000 	ldrb.w	ip, [r3]
 800c28c:	f1bc 0f08 	cmp.w	ip, #8
 800c290:	d0e0      	beq.n	800c254 <rclc_executor_trigger_any+0x20>
 800c292:	f1bc 0f09 	cmp.w	ip, #9
 800c296:	d1ea      	bne.n	800c26e <rclc_executor_trigger_any+0x3a>
 800c298:	685c      	ldr	r4, [r3, #4]
 800c29a:	6a25      	ldr	r5, [r4, #32]
 800c29c:	2d00      	cmp	r5, #0
 800c29e:	d1e4      	bne.n	800c26a <rclc_executor_trigger_any+0x36>
 800c2a0:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d1e0      	bne.n	800c26a <rclc_executor_trigger_any+0x36>
 800c2a8:	3201      	adds	r2, #1
 800c2aa:	4291      	cmp	r1, r2
 800c2ac:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c2b0:	d1e6      	bne.n	800c280 <rclc_executor_trigger_any+0x4c>
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	bc30      	pop	{r4, r5}
 800c2b6:	4770      	bx	lr
 800c2b8:	4770      	bx	lr
 800c2ba:	4608      	mov	r0, r1
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop

0800c2c0 <rclc_executor_get_zero_initialized_executor>:
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	4903      	ldr	r1, [pc, #12]	@ (800c2d0 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	2288      	movs	r2, #136	@ 0x88
 800c2c8:	f00c fa53 	bl	8018772 <memcpy>
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	bd10      	pop	{r4, pc}
 800c2d0:	08019748 	.word	0x08019748
 800c2d4:	00000000 	.word	0x00000000

0800c2d8 <rclc_executor_init>:
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d05f      	beq.n	800c39c <rclc_executor_init+0xc4>
 800c2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e0:	460c      	mov	r4, r1
 800c2e2:	b0b0      	sub	sp, #192	@ 0xc0
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	d051      	beq.n	800c38c <rclc_executor_init+0xb4>
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	4616      	mov	r6, r2
 800c2ee:	461f      	mov	r7, r3
 800c2f0:	f000 fbea 	bl	800cac8 <rcutils_allocator_is_valid>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d049      	beq.n	800c38c <rclc_executor_init+0xb4>
 800c2f8:	2e00      	cmp	r6, #0
 800c2fa:	d047      	beq.n	800c38c <rclc_executor_init+0xb4>
 800c2fc:	492c      	ldr	r1, [pc, #176]	@ (800c3b0 <rclc_executor_init+0xd8>)
 800c2fe:	2288      	movs	r2, #136	@ 0x88
 800c300:	a80e      	add	r0, sp, #56	@ 0x38
 800c302:	f00c fa36 	bl	8018772 <memcpy>
 800c306:	a90e      	add	r1, sp, #56	@ 0x38
 800c308:	2288      	movs	r2, #136	@ 0x88
 800c30a:	4628      	mov	r0, r5
 800c30c:	f00c fa31 	bl	8018772 <memcpy>
 800c310:	602c      	str	r4, [r5, #0]
 800c312:	4668      	mov	r0, sp
 800c314:	60ae      	str	r6, [r5, #8]
 800c316:	466c      	mov	r4, sp
 800c318:	f006 f8a6 	bl	8012468 <rcl_get_zero_initialized_wait_set>
 800c31c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c31e:	f105 0c14 	add.w	ip, r5, #20
 800c322:	f8d7 8000 	ldr.w	r8, [r7]
 800c326:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c32a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c32c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c332:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c336:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c3a8 <rclc_executor_init+0xd0>
 800c33a:	6823      	ldr	r3, [r4, #0]
 800c33c:	f8cc 3000 	str.w	r3, [ip]
 800c340:	6939      	ldr	r1, [r7, #16]
 800c342:	612f      	str	r7, [r5, #16]
 800c344:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c348:	01b0      	lsls	r0, r6, #6
 800c34a:	47c0      	blx	r8
 800c34c:	6068      	str	r0, [r5, #4]
 800c34e:	b338      	cbz	r0, 800c3a0 <rclc_executor_init+0xc8>
 800c350:	2400      	movs	r4, #0
 800c352:	e000      	b.n	800c356 <rclc_executor_init+0x7e>
 800c354:	6868      	ldr	r0, [r5, #4]
 800c356:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c35a:	4631      	mov	r1, r6
 800c35c:	3401      	adds	r4, #1
 800c35e:	f000 fa6b 	bl	800c838 <rclc_executor_handle_init>
 800c362:	42a6      	cmp	r6, r4
 800c364:	d1f6      	bne.n	800c354 <rclc_executor_init+0x7c>
 800c366:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c36a:	f000 fa5b 	bl	800c824 <rclc_executor_handle_counters_zero_init>
 800c36e:	4a11      	ldr	r2, [pc, #68]	@ (800c3b4 <rclc_executor_init+0xdc>)
 800c370:	686b      	ldr	r3, [r5, #4]
 800c372:	2000      	movs	r0, #0
 800c374:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c378:	b163      	cbz	r3, 800c394 <rclc_executor_init+0xbc>
 800c37a:	692b      	ldr	r3, [r5, #16]
 800c37c:	b153      	cbz	r3, 800c394 <rclc_executor_init+0xbc>
 800c37e:	68ab      	ldr	r3, [r5, #8]
 800c380:	b143      	cbz	r3, 800c394 <rclc_executor_init+0xbc>
 800c382:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c386:	b030      	add	sp, #192	@ 0xc0
 800c388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c38c:	200b      	movs	r0, #11
 800c38e:	b030      	add	sp, #192	@ 0xc0
 800c390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c394:	4618      	mov	r0, r3
 800c396:	b030      	add	sp, #192	@ 0xc0
 800c398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c39c:	200b      	movs	r0, #11
 800c39e:	4770      	bx	lr
 800c3a0:	200a      	movs	r0, #10
 800c3a2:	e7f4      	b.n	800c38e <rclc_executor_init+0xb6>
 800c3a4:	f3af 8000 	nop.w
 800c3a8:	3b9aca00 	.word	0x3b9aca00
 800c3ac:	00000000 	.word	0x00000000
 800c3b0:	08019748 	.word	0x08019748
 800c3b4:	0800c235 	.word	0x0800c235

0800c3b8 <rclc_executor_add_subscription>:
 800c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ba:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c3be:	b338      	cbz	r0, 800c410 <rclc_executor_add_subscription+0x58>
 800c3c0:	b331      	cbz	r1, 800c410 <rclc_executor_add_subscription+0x58>
 800c3c2:	b32a      	cbz	r2, 800c410 <rclc_executor_add_subscription+0x58>
 800c3c4:	b323      	cbz	r3, 800c410 <rclc_executor_add_subscription+0x58>
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c3cc:	42a8      	cmp	r0, r5
 800c3ce:	d301      	bcc.n	800c3d4 <rclc_executor_add_subscription+0x1c>
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3d4:	6866      	ldr	r6, [r4, #4]
 800c3d6:	0187      	lsls	r7, r0, #6
 800c3d8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c3dc:	2500      	movs	r5, #0
 800c3de:	55f5      	strb	r5, [r6, r7]
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c3e6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	f104 0514 	add.w	r5, r4, #20
 800c3f0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c3f4:	f88c e001 	strb.w	lr, [ip, #1]
 800c3f8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c3fc:	60e0      	str	r0, [r4, #12]
 800c3fe:	4628      	mov	r0, r5
 800c400:	f006 f846 	bl	8012490 <rcl_wait_set_is_valid>
 800c404:	b930      	cbnz	r0, 800c414 <rclc_executor_add_subscription+0x5c>
 800c406:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c408:	3301      	adds	r3, #1
 800c40a:	2000      	movs	r0, #0
 800c40c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c410:	200b      	movs	r0, #11
 800c412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c414:	4628      	mov	r0, r5
 800c416:	f006 f841 	bl	801249c <rcl_wait_set_fini>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d0f3      	beq.n	800c406 <rclc_executor_add_subscription+0x4e>
 800c41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c420 <rclc_executor_prepare>:
 800c420:	2800      	cmp	r0, #0
 800c422:	d044      	beq.n	800c4ae <rclc_executor_prepare+0x8e>
 800c424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c426:	f100 0514 	add.w	r5, r0, #20
 800c42a:	b09b      	sub	sp, #108	@ 0x6c
 800c42c:	4604      	mov	r4, r0
 800c42e:	4628      	mov	r0, r5
 800c430:	f006 f82e 	bl	8012490 <rcl_wait_set_is_valid>
 800c434:	b110      	cbz	r0, 800c43c <rclc_executor_prepare+0x1c>
 800c436:	2000      	movs	r0, #0
 800c438:	b01b      	add	sp, #108	@ 0x6c
 800c43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c43c:	4628      	mov	r0, r5
 800c43e:	f006 f82d 	bl	801249c <rcl_wait_set_fini>
 800c442:	2800      	cmp	r0, #0
 800c444:	d130      	bne.n	800c4a8 <rclc_executor_prepare+0x88>
 800c446:	a80c      	add	r0, sp, #48	@ 0x30
 800c448:	f006 f80e 	bl	8012468 <rcl_get_zero_initialized_wait_set>
 800c44c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c450:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c454:	46ae      	mov	lr, r5
 800c456:	6927      	ldr	r7, [r4, #16]
 800c458:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c45c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c460:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c464:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c468:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c46c:	f8dc 3000 	ldr.w	r3, [ip]
 800c470:	f8ce 3000 	str.w	r3, [lr]
 800c474:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c476:	ae04      	add	r6, sp, #16
 800c478:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	6822      	ldr	r2, [r4, #0]
 800c47e:	6033      	str	r3, [r6, #0]
 800c480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c482:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c484:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c488:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c48c:	e9cd 2100 	strd	r2, r1, [sp]
 800c490:	4628      	mov	r0, r5
 800c492:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c494:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c496:	f006 faff 	bl	8012a98 <rcl_wait_set_init>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d0cc      	beq.n	800c438 <rclc_executor_prepare+0x18>
 800c49e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c4a0:	f000 fb36 	bl	800cb10 <rcutils_reset_error>
 800c4a4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c4a6:	e7c7      	b.n	800c438 <rclc_executor_prepare+0x18>
 800c4a8:	f000 fb32 	bl	800cb10 <rcutils_reset_error>
 800c4ac:	e7cb      	b.n	800c446 <rclc_executor_prepare+0x26>
 800c4ae:	200b      	movs	r0, #11
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop

0800c4b4 <rclc_executor_spin_some.part.0>:
 800c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	f100 0614 	add.w	r6, r0, #20
 800c4bc:	b083      	sub	sp, #12
 800c4be:	4691      	mov	r9, r2
 800c4c0:	4698      	mov	r8, r3
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	f7ff ffac 	bl	800c420 <rclc_executor_prepare>
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	f006 f8b3 	bl	8012634 <rcl_wait_set_clear>
 800c4ce:	4607      	mov	r7, r0
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	f040 80ed 	bne.w	800c6b0 <rclc_executor_spin_some.part.0+0x1fc>
 800c4d6:	68ab      	ldr	r3, [r5, #8]
 800c4d8:	4604      	mov	r4, r0
 800c4da:	b303      	cbz	r3, 800c51e <rclc_executor_spin_some.part.0+0x6a>
 800c4dc:	6869      	ldr	r1, [r5, #4]
 800c4de:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c4e2:	01a2      	lsls	r2, r4, #6
 800c4e4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c4e8:	b1cb      	cbz	r3, 800c51e <rclc_executor_spin_some.part.0+0x6a>
 800c4ea:	5c8b      	ldrb	r3, [r1, r2]
 800c4ec:	2b0a      	cmp	r3, #10
 800c4ee:	f200 80d8 	bhi.w	800c6a2 <rclc_executor_spin_some.part.0+0x1ee>
 800c4f2:	e8df f003 	tbb	[pc, r3]
 800c4f6:	9c9c      	.short	0x9c9c
 800c4f8:	068c8ca7 	.word	0x068c8ca7
 800c4fc:	bdc90606 	.word	0xbdc90606
 800c500:	b2          	.byte	0xb2
 800c501:	00          	.byte	0x00
 800c502:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c506:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c50a:	4630      	mov	r0, r6
 800c50c:	f006 fbda 	bl	8012cc4 <rcl_wait_set_add_service>
 800c510:	2800      	cmp	r0, #0
 800c512:	f040 8086 	bne.w	800c622 <rclc_executor_spin_some.part.0+0x16e>
 800c516:	68ab      	ldr	r3, [r5, #8]
 800c518:	3401      	adds	r4, #1
 800c51a:	429c      	cmp	r4, r3
 800c51c:	d3de      	bcc.n	800c4dc <rclc_executor_spin_some.part.0+0x28>
 800c51e:	4643      	mov	r3, r8
 800c520:	464a      	mov	r2, r9
 800c522:	4630      	mov	r0, r6
 800c524:	f006 fbfc 	bl	8012d20 <rcl_wait>
 800c528:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 80c7 	beq.w	800c6c0 <rclc_executor_spin_some.part.0+0x20c>
 800c532:	2b01      	cmp	r3, #1
 800c534:	f040 80b5 	bne.w	800c6a2 <rclc_executor_spin_some.part.0+0x1ee>
 800c538:	68ab      	ldr	r3, [r5, #8]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 8159 	beq.w	800c7f2 <rclc_executor_spin_some.part.0+0x33e>
 800c540:	2400      	movs	r4, #0
 800c542:	46a0      	mov	r8, r4
 800c544:	f240 1991 	movw	r9, #401	@ 0x191
 800c548:	e00a      	b.n	800c560 <rclc_executor_spin_some.part.0+0xac>
 800c54a:	f7ff fb71 	bl	800bc30 <_rclc_check_for_new_data>
 800c54e:	4604      	mov	r4, r0
 800c550:	b110      	cbz	r0, 800c558 <rclc_executor_spin_some.part.0+0xa4>
 800c552:	4548      	cmp	r0, r9
 800c554:	f040 80b2 	bne.w	800c6bc <rclc_executor_spin_some.part.0+0x208>
 800c558:	68ab      	ldr	r3, [r5, #8]
 800c55a:	4598      	cmp	r8, r3
 800c55c:	f080 8126 	bcs.w	800c7ac <rclc_executor_spin_some.part.0+0x2f8>
 800c560:	686a      	ldr	r2, [r5, #4]
 800c562:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c566:	4631      	mov	r1, r6
 800c568:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c56c:	f108 0801 	add.w	r8, r8, #1
 800c570:	f1bc 0f00 	cmp.w	ip, #0
 800c574:	d1e9      	bne.n	800c54a <rclc_executor_spin_some.part.0+0x96>
 800c576:	4619      	mov	r1, r3
 800c578:	4610      	mov	r0, r2
 800c57a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c57e:	4798      	blx	r3
 800c580:	2800      	cmp	r0, #0
 800c582:	f000 809b 	beq.w	800c6bc <rclc_executor_spin_some.part.0+0x208>
 800c586:	68ab      	ldr	r3, [r5, #8]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 8097 	beq.w	800c6bc <rclc_executor_spin_some.part.0+0x208>
 800c58e:	f04f 0800 	mov.w	r8, #0
 800c592:	f240 1991 	movw	r9, #401	@ 0x191
 800c596:	e009      	b.n	800c5ac <rclc_executor_spin_some.part.0+0xf8>
 800c598:	f7ff fb98 	bl	800bccc <_rclc_take_new_data>
 800c59c:	4604      	mov	r4, r0
 800c59e:	b110      	cbz	r0, 800c5a6 <rclc_executor_spin_some.part.0+0xf2>
 800c5a0:	4548      	cmp	r0, r9
 800c5a2:	f040 808b 	bne.w	800c6bc <rclc_executor_spin_some.part.0+0x208>
 800c5a6:	68ab      	ldr	r3, [r5, #8]
 800c5a8:	4598      	cmp	r8, r3
 800c5aa:	d209      	bcs.n	800c5c0 <rclc_executor_spin_some.part.0+0x10c>
 800c5ac:	6868      	ldr	r0, [r5, #4]
 800c5ae:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c5b2:	4631      	mov	r1, r6
 800c5b4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c5b8:	f108 0801 	add.w	r8, r8, #1
 800c5bc:	2a00      	cmp	r2, #0
 800c5be:	d1eb      	bne.n	800c598 <rclc_executor_spin_some.part.0+0xe4>
 800c5c0:	2600      	movs	r6, #0
 800c5c2:	b97b      	cbnz	r3, 800c5e4 <rclc_executor_spin_some.part.0+0x130>
 800c5c4:	e07a      	b.n	800c6bc <rclc_executor_spin_some.part.0+0x208>
 800c5c6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c5ca:	2a08      	cmp	r2, #8
 800c5cc:	f000 80fd 	beq.w	800c7ca <rclc_executor_spin_some.part.0+0x316>
 800c5d0:	2a09      	cmp	r2, #9
 800c5d2:	f000 80ef 	beq.w	800c7b4 <rclc_executor_spin_some.part.0+0x300>
 800c5d6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c5da:	b98a      	cbnz	r2, 800c600 <rclc_executor_spin_some.part.0+0x14c>
 800c5dc:	3601      	adds	r6, #1
 800c5de:	429e      	cmp	r6, r3
 800c5e0:	d262      	bcs.n	800c6a8 <rclc_executor_spin_some.part.0+0x1f4>
 800c5e2:	2400      	movs	r4, #0
 800c5e4:	686a      	ldr	r2, [r5, #4]
 800c5e6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c5ea:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c5ee:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c5f2:	2900      	cmp	r1, #0
 800c5f4:	d062      	beq.n	800c6bc <rclc_executor_spin_some.part.0+0x208>
 800c5f6:	7841      	ldrb	r1, [r0, #1]
 800c5f8:	2900      	cmp	r1, #0
 800c5fa:	d0e4      	beq.n	800c5c6 <rclc_executor_spin_some.part.0+0x112>
 800c5fc:	2901      	cmp	r1, #1
 800c5fe:	d1ed      	bne.n	800c5dc <rclc_executor_spin_some.part.0+0x128>
 800c600:	f7ff fcd8 	bl	800bfb4 <_rclc_execute.part.0>
 800c604:	2800      	cmp	r0, #0
 800c606:	f040 80b6 	bne.w	800c776 <rclc_executor_spin_some.part.0+0x2c2>
 800c60a:	68ab      	ldr	r3, [r5, #8]
 800c60c:	e7e6      	b.n	800c5dc <rclc_executor_spin_some.part.0+0x128>
 800c60e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c612:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c616:	4630      	mov	r0, r6
 800c618:	f006 fb28 	bl	8012c6c <rcl_wait_set_add_client>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	f43f af7a 	beq.w	800c516 <rclc_executor_spin_some.part.0+0x62>
 800c622:	9001      	str	r0, [sp, #4]
 800c624:	f000 fa74 	bl	800cb10 <rcutils_reset_error>
 800c628:	9801      	ldr	r0, [sp, #4]
 800c62a:	4607      	mov	r7, r0
 800c62c:	e03c      	b.n	800c6a8 <rclc_executor_spin_some.part.0+0x1f4>
 800c62e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c632:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c636:	4630      	mov	r0, r6
 800c638:	f005 ffd0 	bl	80125dc <rcl_wait_set_add_subscription>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	f43f af6a 	beq.w	800c516 <rclc_executor_spin_some.part.0+0x62>
 800c642:	e7ee      	b.n	800c622 <rclc_executor_spin_some.part.0+0x16e>
 800c644:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c648:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c64c:	4630      	mov	r0, r6
 800c64e:	f006 fadd 	bl	8012c0c <rcl_wait_set_add_timer>
 800c652:	2800      	cmp	r0, #0
 800c654:	f43f af5f 	beq.w	800c516 <rclc_executor_spin_some.part.0+0x62>
 800c658:	e7e3      	b.n	800c622 <rclc_executor_spin_some.part.0+0x16e>
 800c65a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c65e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c662:	4630      	mov	r0, r6
 800c664:	f006 faa6 	bl	8012bb4 <rcl_wait_set_add_guard_condition>
 800c668:	2800      	cmp	r0, #0
 800c66a:	f43f af54 	beq.w	800c516 <rclc_executor_spin_some.part.0+0x62>
 800c66e:	e7d8      	b.n	800c622 <rclc_executor_spin_some.part.0+0x16e>
 800c670:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c674:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c678:	3110      	adds	r1, #16
 800c67a:	4630      	mov	r0, r6
 800c67c:	f007 f828 	bl	80136d0 <rcl_action_wait_set_add_action_server>
 800c680:	2800      	cmp	r0, #0
 800c682:	f43f af48 	beq.w	800c516 <rclc_executor_spin_some.part.0+0x62>
 800c686:	e7cc      	b.n	800c622 <rclc_executor_spin_some.part.0+0x16e>
 800c688:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c68c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c690:	3110      	adds	r1, #16
 800c692:	2300      	movs	r3, #0
 800c694:	4630      	mov	r0, r6
 800c696:	f006 fdf3 	bl	8013280 <rcl_action_wait_set_add_action_client>
 800c69a:	2800      	cmp	r0, #0
 800c69c:	f43f af3b 	beq.w	800c516 <rclc_executor_spin_some.part.0+0x62>
 800c6a0:	e7bf      	b.n	800c622 <rclc_executor_spin_some.part.0+0x16e>
 800c6a2:	f000 fa35 	bl	800cb10 <rcutils_reset_error>
 800c6a6:	2701      	movs	r7, #1
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	b003      	add	sp, #12
 800c6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b0:	f000 fa2e 	bl	800cb10 <rcutils_reset_error>
 800c6b4:	4638      	mov	r0, r7
 800c6b6:	b003      	add	sp, #12
 800c6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6bc:	4627      	mov	r7, r4
 800c6be:	e7f3      	b.n	800c6a8 <rclc_executor_spin_some.part.0+0x1f4>
 800c6c0:	68ab      	ldr	r3, [r5, #8]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 8092 	beq.w	800c7ec <rclc_executor_spin_some.part.0+0x338>
 800c6c8:	2400      	movs	r4, #0
 800c6ca:	46a0      	mov	r8, r4
 800c6cc:	f240 1991 	movw	r9, #401	@ 0x191
 800c6d0:	e008      	b.n	800c6e4 <rclc_executor_spin_some.part.0+0x230>
 800c6d2:	f7ff faad 	bl	800bc30 <_rclc_check_for_new_data>
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	b108      	cbz	r0, 800c6de <rclc_executor_spin_some.part.0+0x22a>
 800c6da:	4548      	cmp	r0, r9
 800c6dc:	d1ee      	bne.n	800c6bc <rclc_executor_spin_some.part.0+0x208>
 800c6de:	68ab      	ldr	r3, [r5, #8]
 800c6e0:	4598      	cmp	r8, r3
 800c6e2:	d265      	bcs.n	800c7b0 <rclc_executor_spin_some.part.0+0x2fc>
 800c6e4:	686a      	ldr	r2, [r5, #4]
 800c6e6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c6f0:	f108 0801 	add.w	r8, r8, #1
 800c6f4:	f1bc 0f00 	cmp.w	ip, #0
 800c6f8:	d1eb      	bne.n	800c6d2 <rclc_executor_spin_some.part.0+0x21e>
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c702:	4798      	blx	r3
 800c704:	2800      	cmp	r0, #0
 800c706:	d0d9      	beq.n	800c6bc <rclc_executor_spin_some.part.0+0x208>
 800c708:	68ab      	ldr	r3, [r5, #8]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d0d6      	beq.n	800c6bc <rclc_executor_spin_some.part.0+0x208>
 800c70e:	f04f 0800 	mov.w	r8, #0
 800c712:	f240 1991 	movw	r9, #401	@ 0x191
 800c716:	f240 2a59 	movw	sl, #601	@ 0x259
 800c71a:	e00e      	b.n	800c73a <rclc_executor_spin_some.part.0+0x286>
 800c71c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800c720:	2b08      	cmp	r3, #8
 800c722:	d033      	beq.n	800c78c <rclc_executor_spin_some.part.0+0x2d8>
 800c724:	2b09      	cmp	r3, #9
 800c726:	d028      	beq.n	800c77a <rclc_executor_spin_some.part.0+0x2c6>
 800c728:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800c72c:	b9fb      	cbnz	r3, 800c76e <rclc_executor_spin_some.part.0+0x2ba>
 800c72e:	68ab      	ldr	r3, [r5, #8]
 800c730:	f108 0801 	add.w	r8, r8, #1
 800c734:	4598      	cmp	r8, r3
 800c736:	d2b7      	bcs.n	800c6a8 <rclc_executor_spin_some.part.0+0x1f4>
 800c738:	2400      	movs	r4, #0
 800c73a:	6868      	ldr	r0, [r5, #4]
 800c73c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c740:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800c744:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d0b7      	beq.n	800c6bc <rclc_executor_spin_some.part.0+0x208>
 800c74c:	4631      	mov	r1, r6
 800c74e:	f7ff fabd 	bl	800bccc <_rclc_take_new_data>
 800c752:	b118      	cbz	r0, 800c75c <rclc_executor_spin_some.part.0+0x2a8>
 800c754:	4548      	cmp	r0, r9
 800c756:	d001      	beq.n	800c75c <rclc_executor_spin_some.part.0+0x2a8>
 800c758:	4550      	cmp	r0, sl
 800c75a:	d10c      	bne.n	800c776 <rclc_executor_spin_some.part.0+0x2c2>
 800c75c:	686b      	ldr	r3, [r5, #4]
 800c75e:	eb13 000b 	adds.w	r0, r3, fp
 800c762:	d021      	beq.n	800c7a8 <rclc_executor_spin_some.part.0+0x2f4>
 800c764:	7842      	ldrb	r2, [r0, #1]
 800c766:	2a00      	cmp	r2, #0
 800c768:	d0d8      	beq.n	800c71c <rclc_executor_spin_some.part.0+0x268>
 800c76a:	2a01      	cmp	r2, #1
 800c76c:	d1df      	bne.n	800c72e <rclc_executor_spin_some.part.0+0x27a>
 800c76e:	f7ff fc21 	bl	800bfb4 <_rclc_execute.part.0>
 800c772:	2800      	cmp	r0, #0
 800c774:	d0db      	beq.n	800c72e <rclc_executor_spin_some.part.0+0x27a>
 800c776:	4607      	mov	r7, r0
 800c778:	e796      	b.n	800c6a8 <rclc_executor_spin_some.part.0+0x1f4>
 800c77a:	6843      	ldr	r3, [r0, #4]
 800c77c:	6a1a      	ldr	r2, [r3, #32]
 800c77e:	2a00      	cmp	r2, #0
 800c780:	d1f5      	bne.n	800c76e <rclc_executor_spin_some.part.0+0x2ba>
 800c782:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c786:	2b00      	cmp	r3, #0
 800c788:	d0d1      	beq.n	800c72e <rclc_executor_spin_some.part.0+0x27a>
 800c78a:	e7f0      	b.n	800c76e <rclc_executor_spin_some.part.0+0x2ba>
 800c78c:	6843      	ldr	r3, [r0, #4]
 800c78e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c790:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c794:	d1eb      	bne.n	800c76e <rclc_executor_spin_some.part.0+0x2ba>
 800c796:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c79a:	2a00      	cmp	r2, #0
 800c79c:	d1e7      	bne.n	800c76e <rclc_executor_spin_some.part.0+0x2ba>
 800c79e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d0c3      	beq.n	800c72e <rclc_executor_spin_some.part.0+0x27a>
 800c7a6:	e7e2      	b.n	800c76e <rclc_executor_spin_some.part.0+0x2ba>
 800c7a8:	270b      	movs	r7, #11
 800c7aa:	e77d      	b.n	800c6a8 <rclc_executor_spin_some.part.0+0x1f4>
 800c7ac:	686a      	ldr	r2, [r5, #4]
 800c7ae:	e6e2      	b.n	800c576 <rclc_executor_spin_some.part.0+0xc2>
 800c7b0:	686a      	ldr	r2, [r5, #4]
 800c7b2:	e7a2      	b.n	800c6fa <rclc_executor_spin_some.part.0+0x246>
 800c7b4:	6842      	ldr	r2, [r0, #4]
 800c7b6:	6a11      	ldr	r1, [r2, #32]
 800c7b8:	2900      	cmp	r1, #0
 800c7ba:	f47f af21 	bne.w	800c600 <rclc_executor_spin_some.part.0+0x14c>
 800c7be:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800c7c2:	2a00      	cmp	r2, #0
 800c7c4:	f43f af0a 	beq.w	800c5dc <rclc_executor_spin_some.part.0+0x128>
 800c7c8:	e71a      	b.n	800c600 <rclc_executor_spin_some.part.0+0x14c>
 800c7ca:	6842      	ldr	r2, [r0, #4]
 800c7cc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800c7ce:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800c7d2:	f47f af15 	bne.w	800c600 <rclc_executor_spin_some.part.0+0x14c>
 800c7d6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800c7da:	2900      	cmp	r1, #0
 800c7dc:	f47f af10 	bne.w	800c600 <rclc_executor_spin_some.part.0+0x14c>
 800c7e0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800c7e4:	2a00      	cmp	r2, #0
 800c7e6:	f43f aef9 	beq.w	800c5dc <rclc_executor_spin_some.part.0+0x128>
 800c7ea:	e709      	b.n	800c600 <rclc_executor_spin_some.part.0+0x14c>
 800c7ec:	686a      	ldr	r2, [r5, #4]
 800c7ee:	461c      	mov	r4, r3
 800c7f0:	e783      	b.n	800c6fa <rclc_executor_spin_some.part.0+0x246>
 800c7f2:	686a      	ldr	r2, [r5, #4]
 800c7f4:	461c      	mov	r4, r3
 800c7f6:	e6be      	b.n	800c576 <rclc_executor_spin_some.part.0+0xc2>

0800c7f8 <rclc_executor_spin_some>:
 800c7f8:	b190      	cbz	r0, 800c820 <rclc_executor_spin_some+0x28>
 800c7fa:	b570      	push	{r4, r5, r6, lr}
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	6800      	ldr	r0, [r0, #0]
 800c800:	4616      	mov	r6, r2
 800c802:	461d      	mov	r5, r3
 800c804:	f004 fca4 	bl	8011150 <rcl_context_is_valid>
 800c808:	b130      	cbz	r0, 800c818 <rclc_executor_spin_some+0x20>
 800c80a:	4632      	mov	r2, r6
 800c80c:	462b      	mov	r3, r5
 800c80e:	4620      	mov	r0, r4
 800c810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c814:	f7ff be4e 	b.w	800c4b4 <rclc_executor_spin_some.part.0>
 800c818:	f000 f97a 	bl	800cb10 <rcutils_reset_error>
 800c81c:	2001      	movs	r0, #1
 800c81e:	bd70      	pop	{r4, r5, r6, pc}
 800c820:	200b      	movs	r0, #11
 800c822:	4770      	bx	lr

0800c824 <rclc_executor_handle_counters_zero_init>:
 800c824:	b130      	cbz	r0, 800c834 <rclc_executor_handle_counters_zero_init+0x10>
 800c826:	b508      	push	{r3, lr}
 800c828:	2220      	movs	r2, #32
 800c82a:	2100      	movs	r1, #0
 800c82c:	f00b fed8 	bl	80185e0 <memset>
 800c830:	2000      	movs	r0, #0
 800c832:	bd08      	pop	{r3, pc}
 800c834:	200b      	movs	r0, #11
 800c836:	4770      	bx	lr

0800c838 <rclc_executor_handle_init>:
 800c838:	b168      	cbz	r0, 800c856 <rclc_executor_handle_init+0x1e>
 800c83a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800c860 <rclc_executor_handle_init+0x28>
 800c83e:	2300      	movs	r3, #0
 800c840:	220b      	movs	r2, #11
 800c842:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800c846:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800c84a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800c84e:	8002      	strh	r2, [r0, #0]
 800c850:	8703      	strh	r3, [r0, #56]	@ 0x38
 800c852:	4618      	mov	r0, r3
 800c854:	4770      	bx	lr
 800c856:	200b      	movs	r0, #11
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	f3af 8000 	nop.w
	...

0800c868 <rclc_support_init>:
 800c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86c:	b086      	sub	sp, #24
 800c86e:	b3b8      	cbz	r0, 800c8e0 <rclc_support_init+0x78>
 800c870:	461c      	mov	r4, r3
 800c872:	b3ab      	cbz	r3, 800c8e0 <rclc_support_init+0x78>
 800c874:	460f      	mov	r7, r1
 800c876:	4690      	mov	r8, r2
 800c878:	4606      	mov	r6, r0
 800c87a:	f004 fdd3 	bl	8011424 <rcl_get_zero_initialized_init_options>
 800c87e:	f104 030c 	add.w	r3, r4, #12
 800c882:	9005      	str	r0, [sp, #20]
 800c884:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c888:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c88c:	a805      	add	r0, sp, #20
 800c88e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c892:	f004 fdc9 	bl	8011428 <rcl_init_options_init>
 800c896:	4605      	mov	r5, r0
 800c898:	b9e0      	cbnz	r0, 800c8d4 <rclc_support_init+0x6c>
 800c89a:	ad02      	add	r5, sp, #8
 800c89c:	4628      	mov	r0, r5
 800c89e:	f004 fc4d 	bl	801113c <rcl_get_zero_initialized_context>
 800c8a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c8a6:	4633      	mov	r3, r6
 800c8a8:	e886 0003 	stmia.w	r6, {r0, r1}
 800c8ac:	aa05      	add	r2, sp, #20
 800c8ae:	4641      	mov	r1, r8
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	f004 fcb3 	bl	801121c <rcl_init>
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	b9b8      	cbnz	r0, 800c8ea <rclc_support_init+0x82>
 800c8ba:	60b4      	str	r4, [r6, #8]
 800c8bc:	4622      	mov	r2, r4
 800c8be:	f106 010c 	add.w	r1, r6, #12
 800c8c2:	2003      	movs	r0, #3
 800c8c4:	f005 fbda 	bl	801207c <rcl_clock_init>
 800c8c8:	4605      	mov	r5, r0
 800c8ca:	b970      	cbnz	r0, 800c8ea <rclc_support_init+0x82>
 800c8cc:	a805      	add	r0, sp, #20
 800c8ce:	f004 fe11 	bl	80114f4 <rcl_init_options_fini>
 800c8d2:	b108      	cbz	r0, 800c8d8 <rclc_support_init+0x70>
 800c8d4:	f000 f91c 	bl	800cb10 <rcutils_reset_error>
 800c8d8:	4628      	mov	r0, r5
 800c8da:	b006      	add	sp, #24
 800c8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e0:	250b      	movs	r5, #11
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	b006      	add	sp, #24
 800c8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ea:	f000 f911 	bl	800cb10 <rcutils_reset_error>
 800c8ee:	a805      	add	r0, sp, #20
 800c8f0:	f004 fe00 	bl	80114f4 <rcl_init_options_fini>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d0ef      	beq.n	800c8d8 <rclc_support_init+0x70>
 800c8f8:	e7ec      	b.n	800c8d4 <rclc_support_init+0x6c>
 800c8fa:	bf00      	nop

0800c8fc <rclc_node_init_default>:
 800c8fc:	b3b8      	cbz	r0, 800c96e <rclc_node_init_default+0x72>
 800c8fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c902:	460d      	mov	r5, r1
 800c904:	b0a1      	sub	sp, #132	@ 0x84
 800c906:	b329      	cbz	r1, 800c954 <rclc_node_init_default+0x58>
 800c908:	4616      	mov	r6, r2
 800c90a:	b31a      	cbz	r2, 800c954 <rclc_node_init_default+0x58>
 800c90c:	461f      	mov	r7, r3
 800c90e:	b30b      	cbz	r3, 800c954 <rclc_node_init_default+0x58>
 800c910:	f10d 0810 	add.w	r8, sp, #16
 800c914:	4604      	mov	r4, r0
 800c916:	4640      	mov	r0, r8
 800c918:	f004 fea4 	bl	8011664 <rcl_get_zero_initialized_node>
 800c91c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c920:	f10d 0918 	add.w	r9, sp, #24
 800c924:	e884 0003 	stmia.w	r4, {r0, r1}
 800c928:	4648      	mov	r0, r9
 800c92a:	f005 f813 	bl	8011954 <rcl_node_get_default_options>
 800c92e:	4640      	mov	r0, r8
 800c930:	f004 fe98 	bl	8011664 <rcl_get_zero_initialized_node>
 800c934:	f8cd 9000 	str.w	r9, [sp]
 800c938:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c93c:	463b      	mov	r3, r7
 800c93e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c942:	4632      	mov	r2, r6
 800c944:	4629      	mov	r1, r5
 800c946:	4620      	mov	r0, r4
 800c948:	f004 fe96 	bl	8011678 <rcl_node_init>
 800c94c:	b930      	cbnz	r0, 800c95c <rclc_node_init_default+0x60>
 800c94e:	b021      	add	sp, #132	@ 0x84
 800c950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c954:	200b      	movs	r0, #11
 800c956:	b021      	add	sp, #132	@ 0x84
 800c958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c95c:	9003      	str	r0, [sp, #12]
 800c95e:	f000 f8d7 	bl	800cb10 <rcutils_reset_error>
 800c962:	f000 f8d5 	bl	800cb10 <rcutils_reset_error>
 800c966:	9803      	ldr	r0, [sp, #12]
 800c968:	b021      	add	sp, #132	@ 0x84
 800c96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c96e:	200b      	movs	r0, #11
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop

0800c974 <rclc_publisher_init_default>:
 800c974:	b368      	cbz	r0, 800c9d2 <rclc_publisher_init_default+0x5e>
 800c976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c97a:	460d      	mov	r5, r1
 800c97c:	b0a0      	sub	sp, #128	@ 0x80
 800c97e:	b321      	cbz	r1, 800c9ca <rclc_publisher_init_default+0x56>
 800c980:	4616      	mov	r6, r2
 800c982:	b312      	cbz	r2, 800c9ca <rclc_publisher_init_default+0x56>
 800c984:	461f      	mov	r7, r3
 800c986:	b303      	cbz	r3, 800c9ca <rclc_publisher_init_default+0x56>
 800c988:	4604      	mov	r4, r0
 800c98a:	f7ff f841 	bl	800ba10 <rcl_get_zero_initialized_publisher>
 800c98e:	f10d 0810 	add.w	r8, sp, #16
 800c992:	6020      	str	r0, [r4, #0]
 800c994:	4640      	mov	r0, r8
 800c996:	f7ff f8d7 	bl	800bb48 <rcl_publisher_get_default_options>
 800c99a:	490f      	ldr	r1, [pc, #60]	@ (800c9d8 <rclc_publisher_init_default+0x64>)
 800c99c:	2250      	movs	r2, #80	@ 0x50
 800c99e:	4640      	mov	r0, r8
 800c9a0:	f00b fee7 	bl	8018772 <memcpy>
 800c9a4:	f8cd 8000 	str.w	r8, [sp]
 800c9a8:	463b      	mov	r3, r7
 800c9aa:	4632      	mov	r2, r6
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f7ff f834 	bl	800ba1c <rcl_publisher_init>
 800c9b4:	b910      	cbnz	r0, 800c9bc <rclc_publisher_init_default+0x48>
 800c9b6:	b020      	add	sp, #128	@ 0x80
 800c9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9bc:	9003      	str	r0, [sp, #12]
 800c9be:	f000 f8a7 	bl	800cb10 <rcutils_reset_error>
 800c9c2:	9803      	ldr	r0, [sp, #12]
 800c9c4:	b020      	add	sp, #128	@ 0x80
 800c9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ca:	200b      	movs	r0, #11
 800c9cc:	b020      	add	sp, #128	@ 0x80
 800c9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d2:	200b      	movs	r0, #11
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	080197d0 	.word	0x080197d0

0800c9dc <rclc_subscription_init_default>:
 800c9dc:	b368      	cbz	r0, 800ca3a <rclc_subscription_init_default+0x5e>
 800c9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e2:	460d      	mov	r5, r1
 800c9e4:	b0a0      	sub	sp, #128	@ 0x80
 800c9e6:	b321      	cbz	r1, 800ca32 <rclc_subscription_init_default+0x56>
 800c9e8:	4616      	mov	r6, r2
 800c9ea:	b312      	cbz	r2, 800ca32 <rclc_subscription_init_default+0x56>
 800c9ec:	461f      	mov	r7, r3
 800c9ee:	b303      	cbz	r3, 800ca32 <rclc_subscription_init_default+0x56>
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	f005 f9e7 	bl	8011dc4 <rcl_get_zero_initialized_subscription>
 800c9f6:	f10d 0810 	add.w	r8, sp, #16
 800c9fa:	6020      	str	r0, [r4, #0]
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	f005 fa8f 	bl	8011f20 <rcl_subscription_get_default_options>
 800ca02:	490f      	ldr	r1, [pc, #60]	@ (800ca40 <rclc_subscription_init_default+0x64>)
 800ca04:	2250      	movs	r2, #80	@ 0x50
 800ca06:	4640      	mov	r0, r8
 800ca08:	f00b feb3 	bl	8018772 <memcpy>
 800ca0c:	f8cd 8000 	str.w	r8, [sp]
 800ca10:	463b      	mov	r3, r7
 800ca12:	4632      	mov	r2, r6
 800ca14:	4629      	mov	r1, r5
 800ca16:	4620      	mov	r0, r4
 800ca18:	f005 f9da 	bl	8011dd0 <rcl_subscription_init>
 800ca1c:	b910      	cbnz	r0, 800ca24 <rclc_subscription_init_default+0x48>
 800ca1e:	b020      	add	sp, #128	@ 0x80
 800ca20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca24:	9003      	str	r0, [sp, #12]
 800ca26:	f000 f873 	bl	800cb10 <rcutils_reset_error>
 800ca2a:	9803      	ldr	r0, [sp, #12]
 800ca2c:	b020      	add	sp, #128	@ 0x80
 800ca2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca32:	200b      	movs	r0, #11
 800ca34:	b020      	add	sp, #128	@ 0x80
 800ca36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca3a:	200b      	movs	r0, #11
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	08019820 	.word	0x08019820

0800ca44 <__default_zero_allocate>:
 800ca44:	f00b b884 	b.w	8017b50 <calloc>

0800ca48 <__default_reallocate>:
 800ca48:	f00b ba22 	b.w	8017e90 <realloc>

0800ca4c <__default_deallocate>:
 800ca4c:	f00b b8fe 	b.w	8017c4c <free>

0800ca50 <__default_allocate>:
 800ca50:	f00b b8f4 	b.w	8017c3c <malloc>

0800ca54 <rcutils_get_zero_initialized_allocator>:
 800ca54:	b510      	push	{r4, lr}
 800ca56:	4c05      	ldr	r4, [pc, #20]	@ (800ca6c <rcutils_get_zero_initialized_allocator+0x18>)
 800ca58:	4686      	mov	lr, r0
 800ca5a:	4684      	mov	ip, r0
 800ca5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	f8cc 3000 	str.w	r3, [ip]
 800ca68:	4670      	mov	r0, lr
 800ca6a:	bd10      	pop	{r4, pc}
 800ca6c:	08019870 	.word	0x08019870

0800ca70 <rcutils_set_default_allocator>:
 800ca70:	b1a8      	cbz	r0, 800ca9e <rcutils_set_default_allocator+0x2e>
 800ca72:	6802      	ldr	r2, [r0, #0]
 800ca74:	b1a2      	cbz	r2, 800caa0 <rcutils_set_default_allocator+0x30>
 800ca76:	6841      	ldr	r1, [r0, #4]
 800ca78:	b1a1      	cbz	r1, 800caa4 <rcutils_set_default_allocator+0x34>
 800ca7a:	b410      	push	{r4}
 800ca7c:	68c4      	ldr	r4, [r0, #12]
 800ca7e:	b164      	cbz	r4, 800ca9a <rcutils_set_default_allocator+0x2a>
 800ca80:	6880      	ldr	r0, [r0, #8]
 800ca82:	b138      	cbz	r0, 800ca94 <rcutils_set_default_allocator+0x24>
 800ca84:	4b08      	ldr	r3, [pc, #32]	@ (800caa8 <rcutils_set_default_allocator+0x38>)
 800ca86:	601a      	str	r2, [r3, #0]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ca8e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ca92:	2001      	movs	r0, #1
 800ca94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	e7fa      	b.n	800ca94 <rcutils_set_default_allocator+0x24>
 800ca9e:	4770      	bx	lr
 800caa0:	4610      	mov	r0, r2
 800caa2:	4770      	bx	lr
 800caa4:	4608      	mov	r0, r1
 800caa6:	4770      	bx	lr
 800caa8:	200001bc 	.word	0x200001bc

0800caac <rcutils_get_default_allocator>:
 800caac:	b510      	push	{r4, lr}
 800caae:	4c05      	ldr	r4, [pc, #20]	@ (800cac4 <rcutils_get_default_allocator+0x18>)
 800cab0:	4686      	mov	lr, r0
 800cab2:	4684      	mov	ip, r0
 800cab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cab6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	f8cc 3000 	str.w	r3, [ip]
 800cac0:	4670      	mov	r0, lr
 800cac2:	bd10      	pop	{r4, pc}
 800cac4:	200001bc 	.word	0x200001bc

0800cac8 <rcutils_allocator_is_valid>:
 800cac8:	b158      	cbz	r0, 800cae2 <rcutils_allocator_is_valid+0x1a>
 800caca:	6803      	ldr	r3, [r0, #0]
 800cacc:	b143      	cbz	r3, 800cae0 <rcutils_allocator_is_valid+0x18>
 800cace:	6843      	ldr	r3, [r0, #4]
 800cad0:	b133      	cbz	r3, 800cae0 <rcutils_allocator_is_valid+0x18>
 800cad2:	68c3      	ldr	r3, [r0, #12]
 800cad4:	b123      	cbz	r3, 800cae0 <rcutils_allocator_is_valid+0x18>
 800cad6:	6880      	ldr	r0, [r0, #8]
 800cad8:	3800      	subs	r0, #0
 800cada:	bf18      	it	ne
 800cadc:	2001      	movne	r0, #1
 800cade:	4770      	bx	lr
 800cae0:	4618      	mov	r0, r3
 800cae2:	4770      	bx	lr

0800cae4 <rcutils_get_error_string>:
 800cae4:	4b06      	ldr	r3, [pc, #24]	@ (800cb00 <rcutils_get_error_string+0x1c>)
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	b13b      	cbz	r3, 800cafa <rcutils_get_error_string+0x16>
 800caea:	4b06      	ldr	r3, [pc, #24]	@ (800cb04 <rcutils_get_error_string+0x20>)
 800caec:	781a      	ldrb	r2, [r3, #0]
 800caee:	b90a      	cbnz	r2, 800caf4 <rcutils_get_error_string+0x10>
 800caf0:	2201      	movs	r2, #1
 800caf2:	701a      	strb	r2, [r3, #0]
 800caf4:	4b04      	ldr	r3, [pc, #16]	@ (800cb08 <rcutils_get_error_string+0x24>)
 800caf6:	7818      	ldrb	r0, [r3, #0]
 800caf8:	4770      	bx	lr
 800cafa:	4b04      	ldr	r3, [pc, #16]	@ (800cb0c <rcutils_get_error_string+0x28>)
 800cafc:	7818      	ldrb	r0, [r3, #0]
 800cafe:	4770      	bx	lr
 800cb00:	20009708 	.word	0x20009708
 800cb04:	20009721 	.word	0x20009721
 800cb08:	20009720 	.word	0x20009720
 800cb0c:	08019884 	.word	0x08019884

0800cb10 <rcutils_reset_error>:
 800cb10:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800cb30 <rcutils_reset_error+0x20>
 800cb14:	4a08      	ldr	r2, [pc, #32]	@ (800cb38 <rcutils_reset_error+0x28>)
 800cb16:	4809      	ldr	r0, [pc, #36]	@ (800cb3c <rcutils_reset_error+0x2c>)
 800cb18:	4909      	ldr	r1, [pc, #36]	@ (800cb40 <rcutils_reset_error+0x30>)
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	8013      	strh	r3, [r2, #0]
 800cb1e:	ed82 7b02 	vstr	d7, [r2, #8]
 800cb22:	4a08      	ldr	r2, [pc, #32]	@ (800cb44 <rcutils_reset_error+0x34>)
 800cb24:	7003      	strb	r3, [r0, #0]
 800cb26:	700b      	strb	r3, [r1, #0]
 800cb28:	7013      	strb	r3, [r2, #0]
 800cb2a:	4770      	bx	lr
 800cb2c:	f3af 8000 	nop.w
	...
 800cb38:	20009710 	.word	0x20009710
 800cb3c:	20009721 	.word	0x20009721
 800cb40:	20009720 	.word	0x20009720
 800cb44:	20009708 	.word	0x20009708

0800cb48 <rcutils_system_time_now>:
 800cb48:	b308      	cbz	r0, 800cb8e <rcutils_system_time_now+0x46>
 800cb4a:	b570      	push	{r4, r5, r6, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	4604      	mov	r4, r0
 800cb50:	4669      	mov	r1, sp
 800cb52:	2001      	movs	r0, #1
 800cb54:	f7f5 fc20 	bl	8002398 <clock_gettime>
 800cb58:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cb5c:	2d00      	cmp	r5, #0
 800cb5e:	db13      	blt.n	800cb88 <rcutils_system_time_now+0x40>
 800cb60:	9902      	ldr	r1, [sp, #8]
 800cb62:	2900      	cmp	r1, #0
 800cb64:	db0d      	blt.n	800cb82 <rcutils_system_time_now+0x3a>
 800cb66:	4e0b      	ldr	r6, [pc, #44]	@ (800cb94 <rcutils_system_time_now+0x4c>)
 800cb68:	fba3 3206 	umull	r3, r2, r3, r6
 800cb6c:	185b      	adds	r3, r3, r1
 800cb6e:	fb06 2205 	mla	r2, r6, r5, r2
 800cb72:	f04f 0000 	mov.w	r0, #0
 800cb76:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cb7a:	e9c4 3200 	strd	r3, r2, [r4]
 800cb7e:	b004      	add	sp, #16
 800cb80:	bd70      	pop	{r4, r5, r6, pc}
 800cb82:	ea53 0205 	orrs.w	r2, r3, r5
 800cb86:	d1ee      	bne.n	800cb66 <rcutils_system_time_now+0x1e>
 800cb88:	2002      	movs	r0, #2
 800cb8a:	b004      	add	sp, #16
 800cb8c:	bd70      	pop	{r4, r5, r6, pc}
 800cb8e:	200b      	movs	r0, #11
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	3b9aca00 	.word	0x3b9aca00

0800cb98 <rcutils_steady_time_now>:
 800cb98:	b308      	cbz	r0, 800cbde <rcutils_steady_time_now+0x46>
 800cb9a:	b570      	push	{r4, r5, r6, lr}
 800cb9c:	b084      	sub	sp, #16
 800cb9e:	4604      	mov	r4, r0
 800cba0:	4669      	mov	r1, sp
 800cba2:	2000      	movs	r0, #0
 800cba4:	f7f5 fbf8 	bl	8002398 <clock_gettime>
 800cba8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	db13      	blt.n	800cbd8 <rcutils_steady_time_now+0x40>
 800cbb0:	9902      	ldr	r1, [sp, #8]
 800cbb2:	2900      	cmp	r1, #0
 800cbb4:	db0d      	blt.n	800cbd2 <rcutils_steady_time_now+0x3a>
 800cbb6:	4e0b      	ldr	r6, [pc, #44]	@ (800cbe4 <rcutils_steady_time_now+0x4c>)
 800cbb8:	fba3 3206 	umull	r3, r2, r3, r6
 800cbbc:	185b      	adds	r3, r3, r1
 800cbbe:	fb06 2205 	mla	r2, r6, r5, r2
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cbca:	e9c4 3200 	strd	r3, r2, [r4]
 800cbce:	b004      	add	sp, #16
 800cbd0:	bd70      	pop	{r4, r5, r6, pc}
 800cbd2:	ea53 0205 	orrs.w	r2, r3, r5
 800cbd6:	d1ee      	bne.n	800cbb6 <rcutils_steady_time_now+0x1e>
 800cbd8:	2002      	movs	r0, #2
 800cbda:	b004      	add	sp, #16
 800cbdc:	bd70      	pop	{r4, r5, r6, pc}
 800cbde:	200b      	movs	r0, #11
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	3b9aca00 	.word	0x3b9aca00

0800cbe8 <rmw_get_default_publisher_options>:
 800cbe8:	2200      	movs	r2, #0
 800cbea:	6002      	str	r2, [r0, #0]
 800cbec:	7102      	strb	r2, [r0, #4]
 800cbee:	4770      	bx	lr

0800cbf0 <rmw_uros_set_custom_transport>:
 800cbf0:	b470      	push	{r4, r5, r6}
 800cbf2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800cbf6:	b162      	cbz	r2, 800cc12 <rmw_uros_set_custom_transport+0x22>
 800cbf8:	b15b      	cbz	r3, 800cc12 <rmw_uros_set_custom_transport+0x22>
 800cbfa:	b155      	cbz	r5, 800cc12 <rmw_uros_set_custom_transport+0x22>
 800cbfc:	b14e      	cbz	r6, 800cc12 <rmw_uros_set_custom_transport+0x22>
 800cbfe:	4c06      	ldr	r4, [pc, #24]	@ (800cc18 <rmw_uros_set_custom_transport+0x28>)
 800cc00:	7020      	strb	r0, [r4, #0]
 800cc02:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800cc06:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cc0a:	6166      	str	r6, [r4, #20]
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	bc70      	pop	{r4, r5, r6}
 800cc10:	4770      	bx	lr
 800cc12:	200b      	movs	r0, #11
 800cc14:	bc70      	pop	{r4, r5, r6}
 800cc16:	4770      	bx	lr
 800cc18:	20009724 	.word	0x20009724

0800cc1c <flush_session>:
 800cc1c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800cc1e:	f002 ba77 	b.w	800f110 <uxr_run_session_until_confirm_delivery>
 800cc22:	bf00      	nop

0800cc24 <rmw_publish>:
 800cc24:	2800      	cmp	r0, #0
 800cc26:	d053      	beq.n	800ccd0 <rmw_publish+0xac>
 800cc28:	b570      	push	{r4, r5, r6, lr}
 800cc2a:	460d      	mov	r5, r1
 800cc2c:	b08e      	sub	sp, #56	@ 0x38
 800cc2e:	2900      	cmp	r1, #0
 800cc30:	d04b      	beq.n	800ccca <rmw_publish+0xa6>
 800cc32:	4604      	mov	r4, r0
 800cc34:	6800      	ldr	r0, [r0, #0]
 800cc36:	f000 fced 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d045      	beq.n	800ccca <rmw_publish+0xa6>
 800cc3e:	6866      	ldr	r6, [r4, #4]
 800cc40:	2e00      	cmp	r6, #0
 800cc42:	d042      	beq.n	800ccca <rmw_publish+0xa6>
 800cc44:	69b4      	ldr	r4, [r6, #24]
 800cc46:	4628      	mov	r0, r5
 800cc48:	6923      	ldr	r3, [r4, #16]
 800cc4a:	4798      	blx	r3
 800cc4c:	69f3      	ldr	r3, [r6, #28]
 800cc4e:	9005      	str	r0, [sp, #20]
 800cc50:	b113      	cbz	r3, 800cc58 <rmw_publish+0x34>
 800cc52:	a805      	add	r0, sp, #20
 800cc54:	4798      	blx	r3
 800cc56:	9805      	ldr	r0, [sp, #20]
 800cc58:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	9000      	str	r0, [sp, #0]
 800cc60:	6972      	ldr	r2, [r6, #20]
 800cc62:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cc64:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cc68:	ab06      	add	r3, sp, #24
 800cc6a:	f003 f83d 	bl	800fce8 <uxr_prepare_output_stream>
 800cc6e:	b1d8      	cbz	r0, 800cca8 <rmw_publish+0x84>
 800cc70:	68a3      	ldr	r3, [r4, #8]
 800cc72:	a906      	add	r1, sp, #24
 800cc74:	4628      	mov	r0, r5
 800cc76:	4798      	blx	r3
 800cc78:	6a33      	ldr	r3, [r6, #32]
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	b10b      	cbz	r3, 800cc82 <rmw_publish+0x5e>
 800cc7e:	a806      	add	r0, sp, #24
 800cc80:	4798      	blx	r3
 800cc82:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cc8c:	d022      	beq.n	800ccd4 <rmw_publish+0xb0>
 800cc8e:	6918      	ldr	r0, [r3, #16]
 800cc90:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800cc92:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc96:	f002 fa3b 	bl	800f110 <uxr_run_session_until_confirm_delivery>
 800cc9a:	4020      	ands	r0, r4
 800cc9c:	b2c4      	uxtb	r4, r0
 800cc9e:	f084 0001 	eor.w	r0, r4, #1
 800cca2:	b2c0      	uxtb	r0, r0
 800cca4:	b00e      	add	sp, #56	@ 0x38
 800cca6:	bd70      	pop	{r4, r5, r6, pc}
 800cca8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ccac:	6918      	ldr	r0, [r3, #16]
 800ccae:	9b05      	ldr	r3, [sp, #20]
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	4b0b      	ldr	r3, [pc, #44]	@ (800cce0 <rmw_publish+0xbc>)
 800ccb4:	9301      	str	r3, [sp, #4]
 800ccb6:	9602      	str	r6, [sp, #8]
 800ccb8:	6972      	ldr	r2, [r6, #20]
 800ccba:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ccbc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ccc0:	ab06      	add	r3, sp, #24
 800ccc2:	f003 f841 	bl	800fd48 <uxr_prepare_output_stream_fragmented>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d1d2      	bne.n	800cc70 <rmw_publish+0x4c>
 800ccca:	2001      	movs	r0, #1
 800cccc:	b00e      	add	sp, #56	@ 0x38
 800ccce:	bd70      	pop	{r4, r5, r6, pc}
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	4770      	bx	lr
 800ccd4:	6918      	ldr	r0, [r3, #16]
 800ccd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ccda:	f001 fe59 	bl	800e990 <uxr_flash_output_streams>
 800ccde:	e7de      	b.n	800cc9e <rmw_publish+0x7a>
 800cce0:	0800cc1d 	.word	0x0800cc1d

0800cce4 <rmw_create_publisher>:
 800cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	b087      	sub	sp, #28
 800ccea:	2800      	cmp	r0, #0
 800ccec:	f000 80cc 	beq.w	800ce88 <rmw_create_publisher+0x1a4>
 800ccf0:	460e      	mov	r6, r1
 800ccf2:	2900      	cmp	r1, #0
 800ccf4:	f000 80c8 	beq.w	800ce88 <rmw_create_publisher+0x1a4>
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	6800      	ldr	r0, [r0, #0]
 800ccfc:	4615      	mov	r5, r2
 800ccfe:	4698      	mov	r8, r3
 800cd00:	f000 fc88 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	f000 80bf 	beq.w	800ce88 <rmw_create_publisher+0x1a4>
 800cd0a:	2d00      	cmp	r5, #0
 800cd0c:	f000 80bc 	beq.w	800ce88 <rmw_create_publisher+0x1a4>
 800cd10:	782b      	ldrb	r3, [r5, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f000 80b8 	beq.w	800ce88 <rmw_create_publisher+0x1a4>
 800cd18:	f1b8 0f00 	cmp.w	r8, #0
 800cd1c:	f000 80b4 	beq.w	800ce88 <rmw_create_publisher+0x1a4>
 800cd20:	485c      	ldr	r0, [pc, #368]	@ (800ce94 <rmw_create_publisher+0x1b0>)
 800cd22:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cd26:	f007 fc53 	bl	80145d0 <get_memory>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	f000 80ac 	beq.w	800ce88 <rmw_create_publisher+0x1a4>
 800cd30:	6884      	ldr	r4, [r0, #8]
 800cd32:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800cd36:	f007 fcb3 	bl	80146a0 <rmw_get_implementation_identifier>
 800cd3a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800cd3e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800cd42:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800cd46:	4628      	mov	r0, r5
 800cd48:	f7f3 fa54 	bl	80001f4 <strlen>
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	283c      	cmp	r0, #60	@ 0x3c
 800cd50:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800cd54:	f200 8091 	bhi.w	800ce7a <rmw_create_publisher+0x196>
 800cd58:	4a4f      	ldr	r2, [pc, #316]	@ (800ce98 <rmw_create_publisher+0x1b4>)
 800cd5a:	462b      	mov	r3, r5
 800cd5c:	213c      	movs	r1, #60	@ 0x3c
 800cd5e:	4650      	mov	r0, sl
 800cd60:	f00b fad0 	bl	8018304 <sniprintf>
 800cd64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cd68:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800cd6a:	4641      	mov	r1, r8
 800cd6c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800cd70:	2250      	movs	r2, #80	@ 0x50
 800cd72:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cd76:	f00b fcfc 	bl	8018772 <memcpy>
 800cd7a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800cd7e:	4947      	ldr	r1, [pc, #284]	@ (800ce9c <rmw_create_publisher+0x1b8>)
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd86:	bf0c      	ite	eq
 800cd88:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800cd8c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800cd90:	67a3      	str	r3, [r4, #120]	@ 0x78
 800cd92:	2300      	movs	r3, #0
 800cd94:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f000 fc49 	bl	800d630 <get_message_typesupport_handle>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d06b      	beq.n	800ce7a <rmw_create_publisher+0x196>
 800cda2:	6842      	ldr	r2, [r0, #4]
 800cda4:	61a2      	str	r2, [r4, #24]
 800cda6:	2a00      	cmp	r2, #0
 800cda8:	d067      	beq.n	800ce7a <rmw_create_publisher+0x196>
 800cdaa:	4629      	mov	r1, r5
 800cdac:	4643      	mov	r3, r8
 800cdae:	4648      	mov	r0, r9
 800cdb0:	f007 fedc 	bl	8014b6c <create_topic>
 800cdb4:	6260      	str	r0, [r4, #36]	@ 0x24
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d063      	beq.n	800ce82 <rmw_create_publisher+0x19e>
 800cdba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cdbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cdc2:	2103      	movs	r1, #3
 800cdc4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800cdc8:	1c42      	adds	r2, r0, #1
 800cdca:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800cdce:	f001 fc91 	bl	800e6f4 <uxr_object_id>
 800cdd2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800cdd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cdda:	6120      	str	r0, [r4, #16]
 800cddc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800cde0:	6910      	ldr	r0, [r2, #16]
 800cde2:	2506      	movs	r5, #6
 800cde4:	9500      	str	r5, [sp, #0]
 800cde6:	6819      	ldr	r1, [r3, #0]
 800cde8:	6922      	ldr	r2, [r4, #16]
 800cdea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800cdee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cdf2:	f001 fb31 	bl	800e458 <uxr_buffer_create_publisher_bin>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cdfc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ce00:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ce04:	f000 fb86 	bl	800d514 <run_xrce_session>
 800ce08:	b3b8      	cbz	r0, 800ce7a <rmw_create_publisher+0x196>
 800ce0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce12:	2105      	movs	r1, #5
 800ce14:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ce18:	1c42      	adds	r2, r0, #1
 800ce1a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ce1e:	f001 fc69 	bl	800e6f4 <uxr_object_id>
 800ce22:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ce26:	6160      	str	r0, [r4, #20]
 800ce28:	691e      	ldr	r6, [r3, #16]
 800ce2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce2e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800ce32:	f10d 0a10 	add.w	sl, sp, #16
 800ce36:	4641      	mov	r1, r8
 800ce38:	4650      	mov	r0, sl
 800ce3a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800ce3e:	f000 fb85 	bl	800d54c <convert_qos_profile>
 800ce42:	9503      	str	r5, [sp, #12]
 800ce44:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ce48:	9001      	str	r0, [sp, #4]
 800ce4a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ce4e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800ce58:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ce5c:	f8d8 1000 	ldr.w	r1, [r8]
 800ce60:	4630      	mov	r0, r6
 800ce62:	f001 fb59 	bl	800e518 <uxr_buffer_create_datawriter_bin>
 800ce66:	4602      	mov	r2, r0
 800ce68:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ce6c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ce70:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ce74:	f000 fb4e 	bl	800d514 <run_xrce_session>
 800ce78:	b938      	cbnz	r0, 800ce8a <rmw_create_publisher+0x1a6>
 800ce7a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ce7c:	b108      	cbz	r0, 800ce82 <rmw_create_publisher+0x19e>
 800ce7e:	f000 fa47 	bl	800d310 <rmw_uxrce_fini_topic_memory>
 800ce82:	4638      	mov	r0, r7
 800ce84:	f000 f9ec 	bl	800d260 <rmw_uxrce_fini_publisher_memory>
 800ce88:	2700      	movs	r7, #0
 800ce8a:	4638      	mov	r0, r7
 800ce8c:	b007      	add	sp, #28
 800ce8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce92:	bf00      	nop
 800ce94:	2000e01c 	.word	0x2000e01c
 800ce98:	08019898 	.word	0x08019898
 800ce9c:	08019628 	.word	0x08019628

0800cea0 <rmw_publisher_get_actual_qos>:
 800cea0:	b150      	cbz	r0, 800ceb8 <rmw_publisher_get_actual_qos+0x18>
 800cea2:	b508      	push	{r3, lr}
 800cea4:	460b      	mov	r3, r1
 800cea6:	b149      	cbz	r1, 800cebc <rmw_publisher_get_actual_qos+0x1c>
 800cea8:	6841      	ldr	r1, [r0, #4]
 800ceaa:	2250      	movs	r2, #80	@ 0x50
 800ceac:	3128      	adds	r1, #40	@ 0x28
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f00b fc5f 	bl	8018772 <memcpy>
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	bd08      	pop	{r3, pc}
 800ceb8:	200b      	movs	r0, #11
 800ceba:	4770      	bx	lr
 800cebc:	200b      	movs	r0, #11
 800cebe:	bd08      	pop	{r3, pc}

0800cec0 <rmw_destroy_publisher>:
 800cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec2:	b128      	cbz	r0, 800ced0 <rmw_destroy_publisher+0x10>
 800cec4:	4604      	mov	r4, r0
 800cec6:	6800      	ldr	r0, [r0, #0]
 800cec8:	460d      	mov	r5, r1
 800ceca:	f000 fba3 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 800cece:	b910      	cbnz	r0, 800ced6 <rmw_destroy_publisher+0x16>
 800ced0:	2401      	movs	r4, #1
 800ced2:	4620      	mov	r0, r4
 800ced4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ced6:	6863      	ldr	r3, [r4, #4]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d0f9      	beq.n	800ced0 <rmw_destroy_publisher+0x10>
 800cedc:	2d00      	cmp	r5, #0
 800cede:	d0f7      	beq.n	800ced0 <rmw_destroy_publisher+0x10>
 800cee0:	6828      	ldr	r0, [r5, #0]
 800cee2:	f000 fb97 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d0f2      	beq.n	800ced0 <rmw_destroy_publisher+0x10>
 800ceea:	686c      	ldr	r4, [r5, #4]
 800ceec:	2c00      	cmp	r4, #0
 800ceee:	d0ef      	beq.n	800ced0 <rmw_destroy_publisher+0x10>
 800cef0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cef2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800cef6:	f007 fe89 	bl	8014c0c <destroy_topic>
 800cefa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cefe:	6962      	ldr	r2, [r4, #20]
 800cf00:	6918      	ldr	r0, [r3, #16]
 800cf02:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cf06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cf0a:	6819      	ldr	r1, [r3, #0]
 800cf0c:	f001 f9f0 	bl	800e2f0 <uxr_buffer_delete_entity>
 800cf10:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cf14:	6922      	ldr	r2, [r4, #16]
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	6809      	ldr	r1, [r1, #0]
 800cf20:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cf24:	f001 f9e4 	bl	800e2f0 <uxr_buffer_delete_entity>
 800cf28:	693e      	ldr	r6, [r7, #16]
 800cf2a:	4622      	mov	r2, r4
 800cf2c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cf30:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cf34:	4604      	mov	r4, r0
 800cf36:	4630      	mov	r0, r6
 800cf38:	f000 faec 	bl	800d514 <run_xrce_session>
 800cf3c:	693e      	ldr	r6, [r7, #16]
 800cf3e:	4622      	mov	r2, r4
 800cf40:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cf44:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cf48:	4604      	mov	r4, r0
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f000 fae2 	bl	800d514 <run_xrce_session>
 800cf50:	b12c      	cbz	r4, 800cf5e <rmw_destroy_publisher+0x9e>
 800cf52:	b120      	cbz	r0, 800cf5e <rmw_destroy_publisher+0x9e>
 800cf54:	2400      	movs	r4, #0
 800cf56:	4628      	mov	r0, r5
 800cf58:	f000 f982 	bl	800d260 <rmw_uxrce_fini_publisher_memory>
 800cf5c:	e7b9      	b.n	800ced2 <rmw_destroy_publisher+0x12>
 800cf5e:	2402      	movs	r4, #2
 800cf60:	e7f9      	b.n	800cf56 <rmw_destroy_publisher+0x96>
 800cf62:	bf00      	nop

0800cf64 <rmw_uxrce_init_service_memory>:
 800cf64:	b1e2      	cbz	r2, 800cfa0 <rmw_uxrce_init_service_memory+0x3c>
 800cf66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf6a:	7b05      	ldrb	r5, [r0, #12]
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	b9ad      	cbnz	r5, 800cf9c <rmw_uxrce_init_service_memory+0x38>
 800cf70:	23c8      	movs	r3, #200	@ 0xc8
 800cf72:	e9c0 5500 	strd	r5, r5, [r0]
 800cf76:	6083      	str	r3, [r0, #8]
 800cf78:	f240 1301 	movw	r3, #257	@ 0x101
 800cf7c:	4617      	mov	r7, r2
 800cf7e:	8183      	strh	r3, [r0, #12]
 800cf80:	460c      	mov	r4, r1
 800cf82:	46a8      	mov	r8, r5
 800cf84:	4621      	mov	r1, r4
 800cf86:	4630      	mov	r0, r6
 800cf88:	3501      	adds	r5, #1
 800cf8a:	f007 fb31 	bl	80145f0 <put_memory>
 800cf8e:	42af      	cmp	r7, r5
 800cf90:	60a4      	str	r4, [r4, #8]
 800cf92:	f884 800c 	strb.w	r8, [r4, #12]
 800cf96:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cf9a:	d1f3      	bne.n	800cf84 <rmw_uxrce_init_service_memory+0x20>
 800cf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop

0800cfa4 <rmw_uxrce_init_client_memory>:
 800cfa4:	b1e2      	cbz	r2, 800cfe0 <rmw_uxrce_init_client_memory+0x3c>
 800cfa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfaa:	7b05      	ldrb	r5, [r0, #12]
 800cfac:	4606      	mov	r6, r0
 800cfae:	b9ad      	cbnz	r5, 800cfdc <rmw_uxrce_init_client_memory+0x38>
 800cfb0:	23c8      	movs	r3, #200	@ 0xc8
 800cfb2:	e9c0 5500 	strd	r5, r5, [r0]
 800cfb6:	6083      	str	r3, [r0, #8]
 800cfb8:	f240 1301 	movw	r3, #257	@ 0x101
 800cfbc:	4617      	mov	r7, r2
 800cfbe:	8183      	strh	r3, [r0, #12]
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	46a8      	mov	r8, r5
 800cfc4:	4621      	mov	r1, r4
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	3501      	adds	r5, #1
 800cfca:	f007 fb11 	bl	80145f0 <put_memory>
 800cfce:	42af      	cmp	r7, r5
 800cfd0:	60a4      	str	r4, [r4, #8]
 800cfd2:	f884 800c 	strb.w	r8, [r4, #12]
 800cfd6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cfda:	d1f3      	bne.n	800cfc4 <rmw_uxrce_init_client_memory+0x20>
 800cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop

0800cfe4 <rmw_uxrce_init_publisher_memory>:
 800cfe4:	b1e2      	cbz	r2, 800d020 <rmw_uxrce_init_publisher_memory+0x3c>
 800cfe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfea:	7b05      	ldrb	r5, [r0, #12]
 800cfec:	4606      	mov	r6, r0
 800cfee:	b9ad      	cbnz	r5, 800d01c <rmw_uxrce_init_publisher_memory+0x38>
 800cff0:	23d8      	movs	r3, #216	@ 0xd8
 800cff2:	e9c0 5500 	strd	r5, r5, [r0]
 800cff6:	6083      	str	r3, [r0, #8]
 800cff8:	f240 1301 	movw	r3, #257	@ 0x101
 800cffc:	4617      	mov	r7, r2
 800cffe:	8183      	strh	r3, [r0, #12]
 800d000:	460c      	mov	r4, r1
 800d002:	46a8      	mov	r8, r5
 800d004:	4621      	mov	r1, r4
 800d006:	4630      	mov	r0, r6
 800d008:	3501      	adds	r5, #1
 800d00a:	f007 faf1 	bl	80145f0 <put_memory>
 800d00e:	42af      	cmp	r7, r5
 800d010:	60a4      	str	r4, [r4, #8]
 800d012:	f884 800c 	strb.w	r8, [r4, #12]
 800d016:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d01a:	d1f3      	bne.n	800d004 <rmw_uxrce_init_publisher_memory+0x20>
 800d01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop

0800d024 <rmw_uxrce_init_subscription_memory>:
 800d024:	b1e2      	cbz	r2, 800d060 <rmw_uxrce_init_subscription_memory+0x3c>
 800d026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d02a:	7b05      	ldrb	r5, [r0, #12]
 800d02c:	4606      	mov	r6, r0
 800d02e:	b9ad      	cbnz	r5, 800d05c <rmw_uxrce_init_subscription_memory+0x38>
 800d030:	23d8      	movs	r3, #216	@ 0xd8
 800d032:	e9c0 5500 	strd	r5, r5, [r0]
 800d036:	6083      	str	r3, [r0, #8]
 800d038:	f240 1301 	movw	r3, #257	@ 0x101
 800d03c:	4617      	mov	r7, r2
 800d03e:	8183      	strh	r3, [r0, #12]
 800d040:	460c      	mov	r4, r1
 800d042:	46a8      	mov	r8, r5
 800d044:	4621      	mov	r1, r4
 800d046:	4630      	mov	r0, r6
 800d048:	3501      	adds	r5, #1
 800d04a:	f007 fad1 	bl	80145f0 <put_memory>
 800d04e:	42af      	cmp	r7, r5
 800d050:	60a4      	str	r4, [r4, #8]
 800d052:	f884 800c 	strb.w	r8, [r4, #12]
 800d056:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d05a:	d1f3      	bne.n	800d044 <rmw_uxrce_init_subscription_memory+0x20>
 800d05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop

0800d064 <rmw_uxrce_init_node_memory>:
 800d064:	b1e2      	cbz	r2, 800d0a0 <rmw_uxrce_init_node_memory+0x3c>
 800d066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d06a:	7b05      	ldrb	r5, [r0, #12]
 800d06c:	4606      	mov	r6, r0
 800d06e:	b9ad      	cbnz	r5, 800d09c <rmw_uxrce_init_node_memory+0x38>
 800d070:	23a4      	movs	r3, #164	@ 0xa4
 800d072:	e9c0 5500 	strd	r5, r5, [r0]
 800d076:	6083      	str	r3, [r0, #8]
 800d078:	f240 1301 	movw	r3, #257	@ 0x101
 800d07c:	4617      	mov	r7, r2
 800d07e:	8183      	strh	r3, [r0, #12]
 800d080:	460c      	mov	r4, r1
 800d082:	46a8      	mov	r8, r5
 800d084:	4621      	mov	r1, r4
 800d086:	4630      	mov	r0, r6
 800d088:	3501      	adds	r5, #1
 800d08a:	f007 fab1 	bl	80145f0 <put_memory>
 800d08e:	42af      	cmp	r7, r5
 800d090:	60a4      	str	r4, [r4, #8]
 800d092:	f884 800c 	strb.w	r8, [r4, #12]
 800d096:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800d09a:	d1f3      	bne.n	800d084 <rmw_uxrce_init_node_memory+0x20>
 800d09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop

0800d0a4 <rmw_uxrce_init_session_memory>:
 800d0a4:	b1ea      	cbz	r2, 800d0e2 <rmw_uxrce_init_session_memory+0x3e>
 800d0a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0aa:	7b05      	ldrb	r5, [r0, #12]
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	b9b5      	cbnz	r5, 800d0de <rmw_uxrce_init_session_memory+0x3a>
 800d0b0:	e9c0 5500 	strd	r5, r5, [r0]
 800d0b4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d0b8:	f240 1301 	movw	r3, #257	@ 0x101
 800d0bc:	4617      	mov	r7, r2
 800d0be:	f8c0 8008 	str.w	r8, [r0, #8]
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	8183      	strh	r3, [r0, #12]
 800d0c6:	46a9      	mov	r9, r5
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	3501      	adds	r5, #1
 800d0ce:	f007 fa8f 	bl	80145f0 <put_memory>
 800d0d2:	42af      	cmp	r7, r5
 800d0d4:	60a4      	str	r4, [r4, #8]
 800d0d6:	f884 900c 	strb.w	r9, [r4, #12]
 800d0da:	4444      	add	r4, r8
 800d0dc:	d1f4      	bne.n	800d0c8 <rmw_uxrce_init_session_memory+0x24>
 800d0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e2:	4770      	bx	lr

0800d0e4 <rmw_uxrce_init_topic_memory>:
 800d0e4:	b1e2      	cbz	r2, 800d120 <rmw_uxrce_init_topic_memory+0x3c>
 800d0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ea:	7b05      	ldrb	r5, [r0, #12]
 800d0ec:	4606      	mov	r6, r0
 800d0ee:	b9ad      	cbnz	r5, 800d11c <rmw_uxrce_init_topic_memory+0x38>
 800d0f0:	231c      	movs	r3, #28
 800d0f2:	e9c0 5500 	strd	r5, r5, [r0]
 800d0f6:	6083      	str	r3, [r0, #8]
 800d0f8:	f240 1301 	movw	r3, #257	@ 0x101
 800d0fc:	4617      	mov	r7, r2
 800d0fe:	8183      	strh	r3, [r0, #12]
 800d100:	460c      	mov	r4, r1
 800d102:	46a8      	mov	r8, r5
 800d104:	4621      	mov	r1, r4
 800d106:	4630      	mov	r0, r6
 800d108:	3501      	adds	r5, #1
 800d10a:	f007 fa71 	bl	80145f0 <put_memory>
 800d10e:	42af      	cmp	r7, r5
 800d110:	60a4      	str	r4, [r4, #8]
 800d112:	f884 800c 	strb.w	r8, [r4, #12]
 800d116:	f104 041c 	add.w	r4, r4, #28
 800d11a:	d1f3      	bne.n	800d104 <rmw_uxrce_init_topic_memory+0x20>
 800d11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop

0800d124 <rmw_uxrce_init_static_input_buffer_memory>:
 800d124:	b1ea      	cbz	r2, 800d162 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d12a:	7b05      	ldrb	r5, [r0, #12]
 800d12c:	4606      	mov	r6, r0
 800d12e:	b9b5      	cbnz	r5, 800d15e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d130:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d134:	e9c0 5500 	strd	r5, r5, [r0]
 800d138:	6083      	str	r3, [r0, #8]
 800d13a:	f240 1301 	movw	r3, #257	@ 0x101
 800d13e:	4617      	mov	r7, r2
 800d140:	8183      	strh	r3, [r0, #12]
 800d142:	460c      	mov	r4, r1
 800d144:	46a8      	mov	r8, r5
 800d146:	4621      	mov	r1, r4
 800d148:	4630      	mov	r0, r6
 800d14a:	3501      	adds	r5, #1
 800d14c:	f007 fa50 	bl	80145f0 <put_memory>
 800d150:	42af      	cmp	r7, r5
 800d152:	60a4      	str	r4, [r4, #8]
 800d154:	f884 800c 	strb.w	r8, [r4, #12]
 800d158:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d15c:	d1f3      	bne.n	800d146 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d162:	4770      	bx	lr

0800d164 <rmw_uxrce_init_init_options_impl_memory>:
 800d164:	b1e2      	cbz	r2, 800d1a0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d16a:	7b05      	ldrb	r5, [r0, #12]
 800d16c:	4606      	mov	r6, r0
 800d16e:	b9ad      	cbnz	r5, 800d19c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d170:	232c      	movs	r3, #44	@ 0x2c
 800d172:	e9c0 5500 	strd	r5, r5, [r0]
 800d176:	6083      	str	r3, [r0, #8]
 800d178:	f240 1301 	movw	r3, #257	@ 0x101
 800d17c:	4617      	mov	r7, r2
 800d17e:	8183      	strh	r3, [r0, #12]
 800d180:	460c      	mov	r4, r1
 800d182:	46a8      	mov	r8, r5
 800d184:	4621      	mov	r1, r4
 800d186:	4630      	mov	r0, r6
 800d188:	3501      	adds	r5, #1
 800d18a:	f007 fa31 	bl	80145f0 <put_memory>
 800d18e:	42af      	cmp	r7, r5
 800d190:	60a4      	str	r4, [r4, #8]
 800d192:	f884 800c 	strb.w	r8, [r4, #12]
 800d196:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d19a:	d1f3      	bne.n	800d184 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop

0800d1a4 <rmw_uxrce_init_wait_set_memory>:
 800d1a4:	b1e2      	cbz	r2, 800d1e0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1aa:	7b05      	ldrb	r5, [r0, #12]
 800d1ac:	4606      	mov	r6, r0
 800d1ae:	b9ad      	cbnz	r5, 800d1dc <rmw_uxrce_init_wait_set_memory+0x38>
 800d1b0:	231c      	movs	r3, #28
 800d1b2:	e9c0 5500 	strd	r5, r5, [r0]
 800d1b6:	6083      	str	r3, [r0, #8]
 800d1b8:	f240 1301 	movw	r3, #257	@ 0x101
 800d1bc:	4617      	mov	r7, r2
 800d1be:	8183      	strh	r3, [r0, #12]
 800d1c0:	460c      	mov	r4, r1
 800d1c2:	46a8      	mov	r8, r5
 800d1c4:	4621      	mov	r1, r4
 800d1c6:	4630      	mov	r0, r6
 800d1c8:	3501      	adds	r5, #1
 800d1ca:	f007 fa11 	bl	80145f0 <put_memory>
 800d1ce:	42af      	cmp	r7, r5
 800d1d0:	60a4      	str	r4, [r4, #8]
 800d1d2:	f884 800c 	strb.w	r8, [r4, #12]
 800d1d6:	f104 041c 	add.w	r4, r4, #28
 800d1da:	d1f3      	bne.n	800d1c4 <rmw_uxrce_init_wait_set_memory+0x20>
 800d1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop

0800d1e4 <rmw_uxrce_init_guard_condition_memory>:
 800d1e4:	b1e2      	cbz	r2, 800d220 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ea:	7b05      	ldrb	r5, [r0, #12]
 800d1ec:	4606      	mov	r6, r0
 800d1ee:	b9ad      	cbnz	r5, 800d21c <rmw_uxrce_init_guard_condition_memory+0x38>
 800d1f0:	2320      	movs	r3, #32
 800d1f2:	e9c0 5500 	strd	r5, r5, [r0]
 800d1f6:	6083      	str	r3, [r0, #8]
 800d1f8:	f240 1301 	movw	r3, #257	@ 0x101
 800d1fc:	4617      	mov	r7, r2
 800d1fe:	8183      	strh	r3, [r0, #12]
 800d200:	460c      	mov	r4, r1
 800d202:	46a8      	mov	r8, r5
 800d204:	4621      	mov	r1, r4
 800d206:	4630      	mov	r0, r6
 800d208:	3501      	adds	r5, #1
 800d20a:	f007 f9f1 	bl	80145f0 <put_memory>
 800d20e:	42af      	cmp	r7, r5
 800d210:	60a4      	str	r4, [r4, #8]
 800d212:	f884 800c 	strb.w	r8, [r4, #12]
 800d216:	f104 0420 	add.w	r4, r4, #32
 800d21a:	d1f3      	bne.n	800d204 <rmw_uxrce_init_guard_condition_memory+0x20>
 800d21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop

0800d224 <rmw_uxrce_fini_session_memory>:
 800d224:	4601      	mov	r1, r0
 800d226:	4801      	ldr	r0, [pc, #4]	@ (800d22c <rmw_uxrce_fini_session_memory+0x8>)
 800d228:	f007 b9e2 	b.w	80145f0 <put_memory>
 800d22c:	2000e03c 	.word	0x2000e03c

0800d230 <rmw_uxrce_fini_node_memory>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4604      	mov	r4, r0
 800d234:	6800      	ldr	r0, [r0, #0]
 800d236:	b128      	cbz	r0, 800d244 <rmw_uxrce_fini_node_memory+0x14>
 800d238:	4b07      	ldr	r3, [pc, #28]	@ (800d258 <rmw_uxrce_fini_node_memory+0x28>)
 800d23a:	6819      	ldr	r1, [r3, #0]
 800d23c:	f7f2 ffd0 	bl	80001e0 <strcmp>
 800d240:	b940      	cbnz	r0, 800d254 <rmw_uxrce_fini_node_memory+0x24>
 800d242:	6020      	str	r0, [r4, #0]
 800d244:	6861      	ldr	r1, [r4, #4]
 800d246:	b129      	cbz	r1, 800d254 <rmw_uxrce_fini_node_memory+0x24>
 800d248:	2500      	movs	r5, #0
 800d24a:	4804      	ldr	r0, [pc, #16]	@ (800d25c <rmw_uxrce_fini_node_memory+0x2c>)
 800d24c:	610d      	str	r5, [r1, #16]
 800d24e:	f007 f9cf 	bl	80145f0 <put_memory>
 800d252:	6065      	str	r5, [r4, #4]
 800d254:	bd38      	pop	{r3, r4, r5, pc}
 800d256:	bf00      	nop
 800d258:	0801a22c 	.word	0x0801a22c
 800d25c:	2000e00c 	.word	0x2000e00c

0800d260 <rmw_uxrce_fini_publisher_memory>:
 800d260:	b510      	push	{r4, lr}
 800d262:	4604      	mov	r4, r0
 800d264:	6800      	ldr	r0, [r0, #0]
 800d266:	b128      	cbz	r0, 800d274 <rmw_uxrce_fini_publisher_memory+0x14>
 800d268:	4b06      	ldr	r3, [pc, #24]	@ (800d284 <rmw_uxrce_fini_publisher_memory+0x24>)
 800d26a:	6819      	ldr	r1, [r3, #0]
 800d26c:	f7f2 ffb8 	bl	80001e0 <strcmp>
 800d270:	b938      	cbnz	r0, 800d282 <rmw_uxrce_fini_publisher_memory+0x22>
 800d272:	6020      	str	r0, [r4, #0]
 800d274:	6861      	ldr	r1, [r4, #4]
 800d276:	b121      	cbz	r1, 800d282 <rmw_uxrce_fini_publisher_memory+0x22>
 800d278:	4803      	ldr	r0, [pc, #12]	@ (800d288 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d27a:	f007 f9b9 	bl	80145f0 <put_memory>
 800d27e:	2300      	movs	r3, #0
 800d280:	6063      	str	r3, [r4, #4]
 800d282:	bd10      	pop	{r4, pc}
 800d284:	0801a22c 	.word	0x0801a22c
 800d288:	2000e01c 	.word	0x2000e01c

0800d28c <rmw_uxrce_fini_subscription_memory>:
 800d28c:	b510      	push	{r4, lr}
 800d28e:	4604      	mov	r4, r0
 800d290:	6800      	ldr	r0, [r0, #0]
 800d292:	b128      	cbz	r0, 800d2a0 <rmw_uxrce_fini_subscription_memory+0x14>
 800d294:	4b06      	ldr	r3, [pc, #24]	@ (800d2b0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d296:	6819      	ldr	r1, [r3, #0]
 800d298:	f7f2 ffa2 	bl	80001e0 <strcmp>
 800d29c:	b938      	cbnz	r0, 800d2ae <rmw_uxrce_fini_subscription_memory+0x22>
 800d29e:	6020      	str	r0, [r4, #0]
 800d2a0:	6861      	ldr	r1, [r4, #4]
 800d2a2:	b121      	cbz	r1, 800d2ae <rmw_uxrce_fini_subscription_memory+0x22>
 800d2a4:	4803      	ldr	r0, [pc, #12]	@ (800d2b4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800d2a6:	f007 f9a3 	bl	80145f0 <put_memory>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	6063      	str	r3, [r4, #4]
 800d2ae:	bd10      	pop	{r4, pc}
 800d2b0:	0801a22c 	.word	0x0801a22c
 800d2b4:	2000e05c 	.word	0x2000e05c

0800d2b8 <rmw_uxrce_fini_service_memory>:
 800d2b8:	b510      	push	{r4, lr}
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	6800      	ldr	r0, [r0, #0]
 800d2be:	b128      	cbz	r0, 800d2cc <rmw_uxrce_fini_service_memory+0x14>
 800d2c0:	4b06      	ldr	r3, [pc, #24]	@ (800d2dc <rmw_uxrce_fini_service_memory+0x24>)
 800d2c2:	6819      	ldr	r1, [r3, #0]
 800d2c4:	f7f2 ff8c 	bl	80001e0 <strcmp>
 800d2c8:	b938      	cbnz	r0, 800d2da <rmw_uxrce_fini_service_memory+0x22>
 800d2ca:	6020      	str	r0, [r4, #0]
 800d2cc:	6861      	ldr	r1, [r4, #4]
 800d2ce:	b121      	cbz	r1, 800d2da <rmw_uxrce_fini_service_memory+0x22>
 800d2d0:	4803      	ldr	r0, [pc, #12]	@ (800d2e0 <rmw_uxrce_fini_service_memory+0x28>)
 800d2d2:	f007 f98d 	bl	80145f0 <put_memory>
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	6063      	str	r3, [r4, #4]
 800d2da:	bd10      	pop	{r4, pc}
 800d2dc:	0801a22c 	.word	0x0801a22c
 800d2e0:	2000e02c 	.word	0x2000e02c

0800d2e4 <rmw_uxrce_fini_client_memory>:
 800d2e4:	b510      	push	{r4, lr}
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	6800      	ldr	r0, [r0, #0]
 800d2ea:	b128      	cbz	r0, 800d2f8 <rmw_uxrce_fini_client_memory+0x14>
 800d2ec:	4b06      	ldr	r3, [pc, #24]	@ (800d308 <rmw_uxrce_fini_client_memory+0x24>)
 800d2ee:	6819      	ldr	r1, [r3, #0]
 800d2f0:	f7f2 ff76 	bl	80001e0 <strcmp>
 800d2f4:	b938      	cbnz	r0, 800d306 <rmw_uxrce_fini_client_memory+0x22>
 800d2f6:	6020      	str	r0, [r4, #0]
 800d2f8:	6861      	ldr	r1, [r4, #4]
 800d2fa:	b121      	cbz	r1, 800d306 <rmw_uxrce_fini_client_memory+0x22>
 800d2fc:	4803      	ldr	r0, [pc, #12]	@ (800d30c <rmw_uxrce_fini_client_memory+0x28>)
 800d2fe:	f007 f977 	bl	80145f0 <put_memory>
 800d302:	2300      	movs	r3, #0
 800d304:	6063      	str	r3, [r4, #4]
 800d306:	bd10      	pop	{r4, pc}
 800d308:	0801a22c 	.word	0x0801a22c
 800d30c:	20009740 	.word	0x20009740

0800d310 <rmw_uxrce_fini_topic_memory>:
 800d310:	b510      	push	{r4, lr}
 800d312:	4604      	mov	r4, r0
 800d314:	4621      	mov	r1, r4
 800d316:	4803      	ldr	r0, [pc, #12]	@ (800d324 <rmw_uxrce_fini_topic_memory+0x14>)
 800d318:	f007 f96a 	bl	80145f0 <put_memory>
 800d31c:	2300      	movs	r3, #0
 800d31e:	61a3      	str	r3, [r4, #24]
 800d320:	bd10      	pop	{r4, pc}
 800d322:	bf00      	nop
 800d324:	2000e06c 	.word	0x2000e06c

0800d328 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d328:	b082      	sub	sp, #8
 800d32a:	b530      	push	{r4, r5, lr}
 800d32c:	4925      	ldr	r1, [pc, #148]	@ (800d3c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d32e:	680d      	ldr	r5, [r1, #0]
 800d330:	ac03      	add	r4, sp, #12
 800d332:	e884 000c 	stmia.w	r4, {r2, r3}
 800d336:	461c      	mov	r4, r3
 800d338:	2d00      	cmp	r5, #0
 800d33a:	d041      	beq.n	800d3c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800d33c:	462b      	mov	r3, r5
 800d33e:	2100      	movs	r1, #0
 800d340:	689a      	ldr	r2, [r3, #8]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800d348:	4290      	cmp	r0, r2
 800d34a:	bf08      	it	eq
 800d34c:	3101      	addeq	r1, #1
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d1f6      	bne.n	800d340 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d352:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d356:	2b02      	cmp	r3, #2
 800d358:	d029      	beq.n	800d3ae <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d35a:	d907      	bls.n	800d36c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	d005      	beq.n	800d36c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d360:	2100      	movs	r1, #0
 800d362:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d366:	4608      	mov	r0, r1
 800d368:	b002      	add	sp, #8
 800d36a:	4770      	bx	lr
 800d36c:	b314      	cbz	r4, 800d3b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d36e:	428c      	cmp	r4, r1
 800d370:	d820      	bhi.n	800d3b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d372:	2d00      	cmp	r5, #0
 800d374:	d0f4      	beq.n	800d360 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d376:	2100      	movs	r1, #0
 800d378:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800d37c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800d380:	e002      	b.n	800d388 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800d382:	686d      	ldr	r5, [r5, #4]
 800d384:	2d00      	cmp	r5, #0
 800d386:	d0ec      	beq.n	800d362 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d388:	68ab      	ldr	r3, [r5, #8]
 800d38a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800d38e:	4290      	cmp	r0, r2
 800d390:	d1f7      	bne.n	800d382 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d392:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800d396:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800d39a:	4562      	cmp	r2, ip
 800d39c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d3a0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d3a4:	daed      	bge.n	800d382 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d3a6:	4694      	mov	ip, r2
 800d3a8:	461c      	mov	r4, r3
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	e7e9      	b.n	800d382 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d3ae:	b10c      	cbz	r4, 800d3b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d3b0:	428c      	cmp	r4, r1
 800d3b2:	d9d5      	bls.n	800d360 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d3b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3b8:	4802      	ldr	r0, [pc, #8]	@ (800d3c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d3ba:	b002      	add	sp, #8
 800d3bc:	f007 b908 	b.w	80145d0 <get_memory>
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	e7c6      	b.n	800d352 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d3c4:	2000e04c 	.word	0x2000e04c

0800d3c8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d3c8:	4b11      	ldr	r3, [pc, #68]	@ (800d410 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	b530      	push	{r4, r5, lr}
 800d3ce:	b1e3      	cbz	r3, 800d40a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800d3d0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800d3d4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800d3d8:	2400      	movs	r4, #0
 800d3da:	e001      	b.n	800d3e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	b193      	cbz	r3, 800d406 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800d3e0:	689a      	ldr	r2, [r3, #8]
 800d3e2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800d3e6:	4288      	cmp	r0, r1
 800d3e8:	d1f8      	bne.n	800d3dc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d3ea:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800d3ee:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800d3f2:	4571      	cmp	r1, lr
 800d3f4:	eb72 050c 	sbcs.w	r5, r2, ip
 800d3f8:	daf0      	bge.n	800d3dc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d3fa:	461c      	mov	r4, r3
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	468e      	mov	lr, r1
 800d400:	4694      	mov	ip, r2
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1ec      	bne.n	800d3e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d406:	4620      	mov	r0, r4
 800d408:	bd30      	pop	{r4, r5, pc}
 800d40a:	461c      	mov	r4, r3
 800d40c:	4620      	mov	r0, r4
 800d40e:	bd30      	pop	{r4, r5, pc}
 800d410:	2000e04c 	.word	0x2000e04c
 800d414:	00000000 	.word	0x00000000

0800d418 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41c:	4b3c      	ldr	r3, [pc, #240]	@ (800d510 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d41e:	ed2d 8b06 	vpush	{d8-d10}
 800d422:	681f      	ldr	r7, [r3, #0]
 800d424:	b08d      	sub	sp, #52	@ 0x34
 800d426:	f008 fa11 	bl	801584c <rmw_uros_epoch_nanos>
 800d42a:	2f00      	cmp	r7, #0
 800d42c:	d05d      	beq.n	800d4ea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d42e:	46b8      	mov	r8, r7
 800d430:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800d4f8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800d434:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d438:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800d500 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800d442:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800d508 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800d446:	4681      	mov	r9, r0
 800d448:	468a      	mov	sl, r1
 800d44a:	ac04      	add	r4, sp, #16
 800d44c:	d03f      	beq.n	800d4ce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d44e:	2b05      	cmp	r3, #5
 800d450:	d044      	beq.n	800d4dc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d452:	2b03      	cmp	r3, #3
 800d454:	d03b      	beq.n	800d4ce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d456:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d45a:	ed8d ab06 	vstr	d10, [sp, #24]
 800d45e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800d462:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800d466:	ab08      	add	r3, sp, #32
 800d468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d46a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d46e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d472:	f006 fee1 	bl	8014238 <rmw_time_equal>
 800d476:	b118      	cbz	r0, 800d480 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d478:	ed8d 9b04 	vstr	d9, [sp, #16]
 800d47c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d480:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d484:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800d488:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800d48c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d490:	f006 ff26 	bl	80142e0 <rmw_time_total_nsec>
 800d494:	1830      	adds	r0, r6, r0
 800d496:	eb47 0101 	adc.w	r1, r7, r1
 800d49a:	4548      	cmp	r0, r9
 800d49c:	eb71 030a 	sbcs.w	r3, r1, sl
 800d4a0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800d4a4:	db05      	blt.n	800d4b2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800d4a6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800d4aa:	4591      	cmp	r9, r2
 800d4ac:	eb7a 0303 	sbcs.w	r3, sl, r3
 800d4b0:	da03      	bge.n	800d4ba <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800d4b2:	4817      	ldr	r0, [pc, #92]	@ (800d510 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d4b4:	4641      	mov	r1, r8
 800d4b6:	f007 f89b 	bl	80145f0 <put_memory>
 800d4ba:	f1bb 0f00 	cmp.w	fp, #0
 800d4be:	d014      	beq.n	800d4ea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d4c0:	46d8      	mov	r8, fp
 800d4c2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d4c6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d4ca:	2b04      	cmp	r3, #4
 800d4cc:	d1bf      	bne.n	800d44e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800d4ce:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d4d2:	3340      	adds	r3, #64	@ 0x40
 800d4d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d4da:	e7c0      	b.n	800d45e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d4dc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d4e0:	3348      	adds	r3, #72	@ 0x48
 800d4e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d4e8:	e7b9      	b.n	800d45e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d4ea:	b00d      	add	sp, #52	@ 0x34
 800d4ec:	ecbd 8b06 	vpop	{d8-d10}
 800d4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f4:	f3af 8000 	nop.w
	...
 800d500:	00000001 	.word	0x00000001
 800d504:	00000000 	.word	0x00000000
 800d508:	0000001e 	.word	0x0000001e
 800d50c:	00000000 	.word	0x00000000
 800d510:	2000e04c 	.word	0x2000e04c

0800d514 <run_xrce_session>:
 800d514:	b510      	push	{r4, lr}
 800d516:	788c      	ldrb	r4, [r1, #2]
 800d518:	b086      	sub	sp, #24
 800d51a:	2c01      	cmp	r4, #1
 800d51c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d520:	d00c      	beq.n	800d53c <run_xrce_session+0x28>
 800d522:	4619      	mov	r1, r3
 800d524:	2301      	movs	r3, #1
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	f10d 020e 	add.w	r2, sp, #14
 800d52c:	f10d 0317 	add.w	r3, sp, #23
 800d530:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d534:	f001 fe12 	bl	800f15c <uxr_run_session_until_all_status>
 800d538:	b006      	add	sp, #24
 800d53a:	bd10      	pop	{r4, pc}
 800d53c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d540:	f001 fa26 	bl	800e990 <uxr_flash_output_streams>
 800d544:	4620      	mov	r0, r4
 800d546:	b006      	add	sp, #24
 800d548:	bd10      	pop	{r4, pc}
 800d54a:	bf00      	nop

0800d54c <convert_qos_profile>:
 800d54c:	7a4a      	ldrb	r2, [r1, #9]
 800d54e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d552:	2a02      	cmp	r2, #2
 800d554:	bf18      	it	ne
 800d556:	2200      	movne	r2, #0
 800d558:	7002      	strb	r2, [r0, #0]
 800d55a:	780a      	ldrb	r2, [r1, #0]
 800d55c:	8889      	ldrh	r1, [r1, #4]
 800d55e:	8081      	strh	r1, [r0, #4]
 800d560:	f1ac 0c02 	sub.w	ip, ip, #2
 800d564:	f1a2 0202 	sub.w	r2, r2, #2
 800d568:	fabc fc8c 	clz	ip, ip
 800d56c:	fab2 f282 	clz	r2, r2
 800d570:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d574:	0952      	lsrs	r2, r2, #5
 800d576:	f880 c001 	strb.w	ip, [r0, #1]
 800d57a:	7082      	strb	r2, [r0, #2]
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop

0800d580 <generate_type_name>:
 800d580:	b530      	push	{r4, r5, lr}
 800d582:	2300      	movs	r3, #0
 800d584:	700b      	strb	r3, [r1, #0]
 800d586:	6803      	ldr	r3, [r0, #0]
 800d588:	b087      	sub	sp, #28
 800d58a:	4614      	mov	r4, r2
 800d58c:	b1d3      	cbz	r3, 800d5c4 <generate_type_name+0x44>
 800d58e:	4a0f      	ldr	r2, [pc, #60]	@ (800d5cc <generate_type_name+0x4c>)
 800d590:	4615      	mov	r5, r2
 800d592:	9203      	str	r2, [sp, #12]
 800d594:	9500      	str	r5, [sp, #0]
 800d596:	6842      	ldr	r2, [r0, #4]
 800d598:	480d      	ldr	r0, [pc, #52]	@ (800d5d0 <generate_type_name+0x50>)
 800d59a:	9001      	str	r0, [sp, #4]
 800d59c:	4608      	mov	r0, r1
 800d59e:	490d      	ldr	r1, [pc, #52]	@ (800d5d4 <generate_type_name+0x54>)
 800d5a0:	9204      	str	r2, [sp, #16]
 800d5a2:	9105      	str	r1, [sp, #20]
 800d5a4:	9102      	str	r1, [sp, #8]
 800d5a6:	4a0c      	ldr	r2, [pc, #48]	@ (800d5d8 <generate_type_name+0x58>)
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	f00a feab 	bl	8018304 <sniprintf>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	db05      	blt.n	800d5be <generate_type_name+0x3e>
 800d5b2:	4284      	cmp	r4, r0
 800d5b4:	bfd4      	ite	le
 800d5b6:	2000      	movle	r0, #0
 800d5b8:	2001      	movgt	r0, #1
 800d5ba:	b007      	add	sp, #28
 800d5bc:	bd30      	pop	{r4, r5, pc}
 800d5be:	2000      	movs	r0, #0
 800d5c0:	b007      	add	sp, #28
 800d5c2:	bd30      	pop	{r4, r5, pc}
 800d5c4:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <generate_type_name+0x5c>)
 800d5c6:	4a01      	ldr	r2, [pc, #4]	@ (800d5cc <generate_type_name+0x4c>)
 800d5c8:	461d      	mov	r5, r3
 800d5ca:	e7e2      	b.n	800d592 <generate_type_name+0x12>
 800d5cc:	08019888 	.word	0x08019888
 800d5d0:	080198a0 	.word	0x080198a0
 800d5d4:	0801989c 	.word	0x0801989c
 800d5d8:	0801988c 	.word	0x0801988c
 800d5dc:	0801a4b8 	.word	0x0801a4b8

0800d5e0 <generate_topic_name>:
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	4614      	mov	r4, r2
 800d5e6:	9000      	str	r0, [sp, #0]
 800d5e8:	4b08      	ldr	r3, [pc, #32]	@ (800d60c <generate_topic_name+0x2c>)
 800d5ea:	4a09      	ldr	r2, [pc, #36]	@ (800d610 <generate_topic_name+0x30>)
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	4621      	mov	r1, r4
 800d5f0:	f00a fe88 	bl	8018304 <sniprintf>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	db05      	blt.n	800d604 <generate_topic_name+0x24>
 800d5f8:	4284      	cmp	r4, r0
 800d5fa:	bfd4      	ite	le
 800d5fc:	2000      	movle	r0, #0
 800d5fe:	2001      	movgt	r0, #1
 800d600:	b002      	add	sp, #8
 800d602:	bd10      	pop	{r4, pc}
 800d604:	2000      	movs	r0, #0
 800d606:	b002      	add	sp, #8
 800d608:	bd10      	pop	{r4, pc}
 800d60a:	bf00      	nop
 800d60c:	080198ac 	.word	0x080198ac
 800d610:	080198a4 	.word	0x080198a4

0800d614 <is_uxrce_rmw_identifier_valid>:
 800d614:	b510      	push	{r4, lr}
 800d616:	4604      	mov	r4, r0
 800d618:	b140      	cbz	r0, 800d62c <is_uxrce_rmw_identifier_valid+0x18>
 800d61a:	f007 f841 	bl	80146a0 <rmw_get_implementation_identifier>
 800d61e:	4601      	mov	r1, r0
 800d620:	4620      	mov	r0, r4
 800d622:	f7f2 fddd 	bl	80001e0 <strcmp>
 800d626:	fab0 f080 	clz	r0, r0
 800d62a:	0940      	lsrs	r0, r0, #5
 800d62c:	bd10      	pop	{r4, pc}
 800d62e:	bf00      	nop

0800d630 <get_message_typesupport_handle>:
 800d630:	6883      	ldr	r3, [r0, #8]
 800d632:	4718      	bx	r3

0800d634 <get_message_typesupport_handle_function>:
 800d634:	b510      	push	{r4, lr}
 800d636:	4604      	mov	r4, r0
 800d638:	6800      	ldr	r0, [r0, #0]
 800d63a:	f7f2 fdd1 	bl	80001e0 <strcmp>
 800d63e:	2800      	cmp	r0, #0
 800d640:	bf0c      	ite	eq
 800d642:	4620      	moveq	r0, r4
 800d644:	2000      	movne	r0, #0
 800d646:	bd10      	pop	{r4, pc}

0800d648 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800d648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d64c:	6805      	ldr	r5, [r0, #0]
 800d64e:	4604      	mov	r4, r0
 800d650:	4628      	mov	r0, r5
 800d652:	460e      	mov	r6, r1
 800d654:	f7f2 fdc4 	bl	80001e0 <strcmp>
 800d658:	b1c8      	cbz	r0, 800d68e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800d65a:	4b11      	ldr	r3, [pc, #68]	@ (800d6a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	429d      	cmp	r5, r3
 800d660:	d112      	bne.n	800d688 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d662:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800d666:	f8d8 4000 	ldr.w	r4, [r8]
 800d66a:	b16c      	cbz	r4, 800d688 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d66c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d670:	2700      	movs	r7, #0
 800d672:	3d04      	subs	r5, #4
 800d674:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800d678:	4631      	mov	r1, r6
 800d67a:	f7f2 fdb1 	bl	80001e0 <strcmp>
 800d67e:	00bb      	lsls	r3, r7, #2
 800d680:	b140      	cbz	r0, 800d694 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800d682:	3701      	adds	r7, #1
 800d684:	42bc      	cmp	r4, r7
 800d686:	d1f5      	bne.n	800d674 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800d688:	2000      	movs	r0, #0
 800d68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d68e:	4620      	mov	r0, r4
 800d690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d694:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d69c:	58d3      	ldr	r3, [r2, r3]
 800d69e:	4718      	bx	r3
 800d6a0:	200001d0 	.word	0x200001d0

0800d6a4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d6a4:	4b04      	ldr	r3, [pc, #16]	@ (800d6b8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	b10a      	cbz	r2, 800d6ae <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800d6aa:	4803      	ldr	r0, [pc, #12]	@ (800d6b8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800d6ac:	4770      	bx	lr
 800d6ae:	4a03      	ldr	r2, [pc, #12]	@ (800d6bc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800d6b0:	4801      	ldr	r0, [pc, #4]	@ (800d6b8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800d6b2:	6812      	ldr	r2, [r2, #0]
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	4770      	bx	lr
 800d6b8:	200001e0 	.word	0x200001e0
 800d6bc:	200001d0 	.word	0x200001d0

0800d6c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d6c0:	4a02      	ldr	r2, [pc, #8]	@ (800d6cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800d6c2:	4b03      	ldr	r3, [pc, #12]	@ (800d6d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800d6c4:	6812      	ldr	r2, [r2, #0]
 800d6c6:	601a      	str	r2, [r3, #0]
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	200001d0 	.word	0x200001d0
 800d6d0:	200001e0 	.word	0x200001e0

0800d6d4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800d6d4:	2009      	movs	r0, #9
 800d6d6:	4770      	bx	lr

0800d6d8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800d6d8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop

0800d6e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800d6e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6e8:	e9c2 0100 	strd	r0, r1, [r2]
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop

0800d6f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800d6f0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d6f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d6f8:	e9c1 2300 	strd	r2, r3, [r1]
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop

0800d700 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800d700:	f008 b8b2 	b.w	8015868 <sensor_msgs__msg__Imu__init>

0800d704 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800d704:	f008 b906 	b.w	8015914 <sensor_msgs__msg__Imu__fini>

0800d708 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800d708:	2009      	movs	r0, #9
 800d70a:	4770      	bx	lr

0800d70c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800d70c:	2009      	movs	r0, #9
 800d70e:	4770      	bx	lr

0800d710 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800d710:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop

0800d718 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800d718:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop

0800d720 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800d720:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop

0800d728 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800d728:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop

0800d730 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800d730:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop

0800d738 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800d738:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d73c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d740:	e9c2 0100 	strd	r0, r1, [r2]
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop

0800d748 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800d748:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d74c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d750:	e9c1 2300 	strd	r2, r3, [r1]
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop

0800d758 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800d758:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d75c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d760:	e9c2 0100 	strd	r0, r1, [r2]
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop

0800d768 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800d768:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d76c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d770:	e9c1 2300 	strd	r2, r3, [r1]
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop

0800d778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d778:	b510      	push	{r4, lr}
 800d77a:	f000 f927 	bl	800d9cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d77e:	4c0b      	ldr	r4, [pc, #44]	@ (800d7ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800d780:	60e0      	str	r0, [r4, #12]
 800d782:	f000 fac1 	bl	800dd08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d786:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d788:	f7fc fcbe 	bl	800a108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d78c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800d790:	f7fc fcba 	bl	800a108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d794:	4b06      	ldr	r3, [pc, #24]	@ (800d7b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d796:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	b10a      	cbz	r2, 800d7a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800d79e:	4804      	ldr	r0, [pc, #16]	@ (800d7b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d7a0:	bd10      	pop	{r4, pc}
 800d7a2:	4a04      	ldr	r2, [pc, #16]	@ (800d7b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800d7a4:	4802      	ldr	r0, [pc, #8]	@ (800d7b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d7a6:	6812      	ldr	r2, [r2, #0]
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	bd10      	pop	{r4, pc}
 800d7ac:	200001ec 	.word	0x200001ec
 800d7b0:	20000390 	.word	0x20000390
 800d7b4:	200001d4 	.word	0x200001d4

0800d7b8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800d7b8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800d7bc:	4680      	mov	r8, r0
 800d7be:	460f      	mov	r7, r1
 800d7c0:	f000 f93a 	bl	800da38 <get_serialized_size_std_msgs__msg__Header>
 800d7c4:	183c      	adds	r4, r7, r0
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	f108 0018 	add.w	r0, r8, #24
 800d7cc:	f000 faaa 	bl	800dd24 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800d7d0:	4404      	add	r4, r0
 800d7d2:	2108      	movs	r1, #8
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f7fe f8af 	bl	800b938 <ucdr_alignment>
 800d7da:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800d7de:	4425      	add	r5, r4
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800d7e6:	f7fc fd03 	bl	800a1f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d7ea:	4405      	add	r5, r0
 800d7ec:	2108      	movs	r1, #8
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f7fe f8a2 	bl	800b938 <ucdr_alignment>
 800d7f4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800d7f8:	4425      	add	r5, r4
 800d7fa:	4629      	mov	r1, r5
 800d7fc:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800d800:	f7fc fcf6 	bl	800a1f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d804:	4405      	add	r5, r0
 800d806:	2108      	movs	r1, #8
 800d808:	4628      	mov	r0, r5
 800d80a:	f7fe f895 	bl	800b938 <ucdr_alignment>
 800d80e:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800d812:	4438      	add	r0, r7
 800d814:	4428      	add	r0, r5
 800d816:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800d81a:	bf00      	nop

0800d81c <get_serialized_size_sensor_msgs__msg__Imu>:
 800d81c:	b108      	cbz	r0, 800d822 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800d81e:	f7ff bfcb 	b.w	800d7b8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d822:	4770      	bx	lr

0800d824 <_Imu__get_serialized_size>:
 800d824:	b110      	cbz	r0, 800d82c <_Imu__get_serialized_size+0x8>
 800d826:	2100      	movs	r1, #0
 800d828:	f7ff bfc6 	b.w	800d7b8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d82c:	4770      	bx	lr
 800d82e:	bf00      	nop

0800d830 <_Imu__cdr_deserialize>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	460c      	mov	r4, r1
 800d834:	b399      	cbz	r1, 800d89e <_Imu__cdr_deserialize+0x6e>
 800d836:	4605      	mov	r5, r0
 800d838:	f000 f980 	bl	800db3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d83c:	6843      	ldr	r3, [r0, #4]
 800d83e:	4621      	mov	r1, r4
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	4628      	mov	r0, r5
 800d844:	4798      	blx	r3
 800d846:	f000 fb21 	bl	800de8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d84a:	6843      	ldr	r3, [r0, #4]
 800d84c:	f104 0118 	add.w	r1, r4, #24
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	4628      	mov	r0, r5
 800d854:	4798      	blx	r3
 800d856:	2209      	movs	r2, #9
 800d858:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800d85c:	4628      	mov	r0, r5
 800d85e:	f000 fc99 	bl	800e194 <ucdr_deserialize_array_double>
 800d862:	f7fc fd51 	bl	800a308 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d866:	6843      	ldr	r3, [r0, #4]
 800d868:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	4628      	mov	r0, r5
 800d870:	4798      	blx	r3
 800d872:	2209      	movs	r2, #9
 800d874:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800d878:	4628      	mov	r0, r5
 800d87a:	f000 fc8b 	bl	800e194 <ucdr_deserialize_array_double>
 800d87e:	f7fc fd43 	bl	800a308 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d882:	6843      	ldr	r3, [r0, #4]
 800d884:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	4628      	mov	r0, r5
 800d88c:	4798      	blx	r3
 800d88e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800d892:	4628      	mov	r0, r5
 800d894:	2209      	movs	r2, #9
 800d896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d89a:	f000 bc7b 	b.w	800e194 <ucdr_deserialize_array_double>
 800d89e:	4608      	mov	r0, r1
 800d8a0:	bd38      	pop	{r3, r4, r5, pc}
 800d8a2:	bf00      	nop

0800d8a4 <_Imu__cdr_serialize>:
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d035      	beq.n	800d914 <_Imu__cdr_serialize+0x70>
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	460d      	mov	r5, r1
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	f000 f945 	bl	800db3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d8b2:	6843      	ldr	r3, [r0, #4]
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	4798      	blx	r3
 800d8bc:	f000 fae6 	bl	800de8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d8c0:	6843      	ldr	r3, [r0, #4]
 800d8c2:	4629      	mov	r1, r5
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	f104 0018 	add.w	r0, r4, #24
 800d8ca:	4798      	blx	r3
 800d8cc:	2209      	movs	r2, #9
 800d8ce:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	f000 fc0a 	bl	800e0ec <ucdr_serialize_array_double>
 800d8d8:	f7fc fd16 	bl	800a308 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d8dc:	6843      	ldr	r3, [r0, #4]
 800d8de:	4629      	mov	r1, r5
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800d8e6:	4798      	blx	r3
 800d8e8:	2209      	movs	r2, #9
 800d8ea:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	f000 fbfc 	bl	800e0ec <ucdr_serialize_array_double>
 800d8f4:	f7fc fd08 	bl	800a308 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d8f8:	6843      	ldr	r3, [r0, #4]
 800d8fa:	4629      	mov	r1, r5
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800d902:	4798      	blx	r3
 800d904:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800d908:	4628      	mov	r0, r5
 800d90a:	2209      	movs	r2, #9
 800d90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d910:	f000 bbec 	b.w	800e0ec <ucdr_serialize_array_double>
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop

0800d918 <max_serialized_size_sensor_msgs__msg__Imu>:
 800d918:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800d91c:	2301      	movs	r3, #1
 800d91e:	7003      	strb	r3, [r0, #0]
 800d920:	4680      	mov	r8, r0
 800d922:	460f      	mov	r7, r1
 800d924:	f000 f900 	bl	800db28 <max_serialized_size_std_msgs__msg__Header>
 800d928:	183c      	adds	r4, r7, r0
 800d92a:	4621      	mov	r1, r4
 800d92c:	4640      	mov	r0, r8
 800d92e:	f000 fa8b 	bl	800de48 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800d932:	4404      	add	r4, r0
 800d934:	2108      	movs	r1, #8
 800d936:	4620      	mov	r0, r4
 800d938:	f7fd fffe 	bl	800b938 <ucdr_alignment>
 800d93c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800d940:	4425      	add	r5, r4
 800d942:	4629      	mov	r1, r5
 800d944:	4640      	mov	r0, r8
 800d946:	f7fc fcc3 	bl	800a2d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d94a:	4405      	add	r5, r0
 800d94c:	2108      	movs	r1, #8
 800d94e:	4628      	mov	r0, r5
 800d950:	f7fd fff2 	bl	800b938 <ucdr_alignment>
 800d954:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800d958:	4425      	add	r5, r4
 800d95a:	4629      	mov	r1, r5
 800d95c:	4640      	mov	r0, r8
 800d95e:	f7fc fcb7 	bl	800a2d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d962:	4405      	add	r5, r0
 800d964:	2108      	movs	r1, #8
 800d966:	4628      	mov	r0, r5
 800d968:	f7fd ffe6 	bl	800b938 <ucdr_alignment>
 800d96c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800d970:	4438      	add	r0, r7
 800d972:	4428      	add	r0, r5
 800d974:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800d978 <_Imu__max_serialized_size>:
 800d978:	b500      	push	{lr}
 800d97a:	b083      	sub	sp, #12
 800d97c:	2100      	movs	r1, #0
 800d97e:	f10d 0007 	add.w	r0, sp, #7
 800d982:	f7ff ffc9 	bl	800d918 <max_serialized_size_sensor_msgs__msg__Imu>
 800d986:	b003      	add	sp, #12
 800d988:	f85d fb04 	ldr.w	pc, [sp], #4

0800d98c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d98c:	4800      	ldr	r0, [pc, #0]	@ (800d990 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800d98e:	4770      	bx	lr
 800d990:	2000039c 	.word	0x2000039c

0800d994 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800d994:	4b04      	ldr	r3, [pc, #16]	@ (800d9a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	b10a      	cbz	r2, 800d99e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0xa>
 800d99a:	4803      	ldr	r0, [pc, #12]	@ (800d9a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d99c:	4770      	bx	lr
 800d99e:	4a03      	ldr	r2, [pc, #12]	@ (800d9ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x18>)
 800d9a0:	4801      	ldr	r0, [pc, #4]	@ (800d9a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d9a2:	6812      	ldr	r2, [r2, #0]
 800d9a4:	601a      	str	r2, [r3, #0]
 800d9a6:	4770      	bx	lr
 800d9a8:	200003cc 	.word	0x200003cc
 800d9ac:	200001d0 	.word	0x200001d0

0800d9b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800d9b0:	4a02      	ldr	r2, [pc, #8]	@ (800d9bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0xc>)
 800d9b2:	4b03      	ldr	r3, [pc, #12]	@ (800d9c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x10>)
 800d9b4:	6812      	ldr	r2, [r2, #0]
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	200001d0 	.word	0x200001d0
 800d9c0:	200003cc 	.word	0x200003cc

0800d9c4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800d9c4:	f007 bfba 	b.w	801593c <std_msgs__msg__Header__init>

0800d9c8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800d9c8:	f007 bfdc 	b.w	8015984 <std_msgs__msg__Header__fini>

0800d9cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800d9cc:	b508      	push	{r3, lr}
 800d9ce:	f000 f8eb 	bl	800dba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d9d2:	4b06      	ldr	r3, [pc, #24]	@ (800d9ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d9d4:	4906      	ldr	r1, [pc, #24]	@ (800d9f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	60c8      	str	r0, [r1, #12]
 800d9da:	b10a      	cbz	r2, 800d9e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800d9dc:	4803      	ldr	r0, [pc, #12]	@ (800d9ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d9de:	bd08      	pop	{r3, pc}
 800d9e0:	4a04      	ldr	r2, [pc, #16]	@ (800d9f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800d9e2:	4802      	ldr	r0, [pc, #8]	@ (800d9ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d9e4:	6812      	ldr	r2, [r2, #0]
 800d9e6:	601a      	str	r2, [r3, #0]
 800d9e8:	bd08      	pop	{r3, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20000450 	.word	0x20000450
 800d9f0:	200003d8 	.word	0x200003d8
 800d9f4:	200001d4 	.word	0x200001d4

0800d9f8 <std_msgs__msg__Int16__rosidl_typesupport_introspection_c__Int16_init_function>:
 800d9f8:	f007 bfd0 	b.w	801599c <std_msgs__msg__Int16__init>

0800d9fc <std_msgs__msg__Int16__rosidl_typesupport_introspection_c__Int16_fini_function>:
 800d9fc:	f007 bfd2 	b.w	80159a4 <std_msgs__msg__Int16__fini>

0800da00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800da00:	4b04      	ldr	r3, [pc, #16]	@ (800da14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	b10a      	cbz	r2, 800da0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0xa>
 800da06:	4803      	ldr	r0, [pc, #12]	@ (800da14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800da08:	4770      	bx	lr
 800da0a:	4a03      	ldr	r2, [pc, #12]	@ (800da18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x18>)
 800da0c:	4801      	ldr	r0, [pc, #4]	@ (800da14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800da0e:	6812      	ldr	r2, [r2, #0]
 800da10:	601a      	str	r2, [r3, #0]
 800da12:	4770      	bx	lr
 800da14:	20000498 	.word	0x20000498
 800da18:	200001d4 	.word	0x200001d4

0800da1c <_Header__max_serialized_size>:
 800da1c:	b500      	push	{lr}
 800da1e:	b083      	sub	sp, #12
 800da20:	2301      	movs	r3, #1
 800da22:	2100      	movs	r1, #0
 800da24:	f10d 0007 	add.w	r0, sp, #7
 800da28:	f88d 3007 	strb.w	r3, [sp, #7]
 800da2c:	f000 f91a 	bl	800dc64 <max_serialized_size_builtin_interfaces__msg__Time>
 800da30:	b003      	add	sp, #12
 800da32:	f85d fb04 	ldr.w	pc, [sp], #4
 800da36:	bf00      	nop

0800da38 <get_serialized_size_std_msgs__msg__Header>:
 800da38:	b570      	push	{r4, r5, r6, lr}
 800da3a:	4605      	mov	r5, r0
 800da3c:	b168      	cbz	r0, 800da5a <get_serialized_size_std_msgs__msg__Header+0x22>
 800da3e:	460c      	mov	r4, r1
 800da40:	f000 f8c0 	bl	800dbc4 <get_serialized_size_builtin_interfaces__msg__Time>
 800da44:	1826      	adds	r6, r4, r0
 800da46:	2104      	movs	r1, #4
 800da48:	4630      	mov	r0, r6
 800da4a:	f7fd ff75 	bl	800b938 <ucdr_alignment>
 800da4e:	68e9      	ldr	r1, [r5, #12]
 800da50:	f1c4 0405 	rsb	r4, r4, #5
 800da54:	440c      	add	r4, r1
 800da56:	4404      	add	r4, r0
 800da58:	19a0      	adds	r0, r4, r6
 800da5a:	bd70      	pop	{r4, r5, r6, pc}

0800da5c <_Header__cdr_deserialize>:
 800da5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da5e:	460c      	mov	r4, r1
 800da60:	b083      	sub	sp, #12
 800da62:	b1e1      	cbz	r1, 800da9e <_Header__cdr_deserialize+0x42>
 800da64:	4606      	mov	r6, r0
 800da66:	f000 f911 	bl	800dc8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800da6a:	6843      	ldr	r3, [r0, #4]
 800da6c:	4621      	mov	r1, r4
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	4630      	mov	r0, r6
 800da72:	4798      	blx	r3
 800da74:	6927      	ldr	r7, [r4, #16]
 800da76:	68a1      	ldr	r1, [r4, #8]
 800da78:	ab01      	add	r3, sp, #4
 800da7a:	463a      	mov	r2, r7
 800da7c:	4630      	mov	r0, r6
 800da7e:	f000 fbf1 	bl	800e264 <ucdr_deserialize_sequence_char>
 800da82:	9b01      	ldr	r3, [sp, #4]
 800da84:	4605      	mov	r5, r0
 800da86:	b920      	cbnz	r0, 800da92 <_Header__cdr_deserialize+0x36>
 800da88:	429f      	cmp	r7, r3
 800da8a:	d30c      	bcc.n	800daa6 <_Header__cdr_deserialize+0x4a>
 800da8c:	4628      	mov	r0, r5
 800da8e:	b003      	add	sp, #12
 800da90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da92:	b103      	cbz	r3, 800da96 <_Header__cdr_deserialize+0x3a>
 800da94:	3b01      	subs	r3, #1
 800da96:	4628      	mov	r0, r5
 800da98:	60e3      	str	r3, [r4, #12]
 800da9a:	b003      	add	sp, #12
 800da9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da9e:	460d      	mov	r5, r1
 800daa0:	4628      	mov	r0, r5
 800daa2:	b003      	add	sp, #12
 800daa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daa6:	2101      	movs	r1, #1
 800daa8:	75b0      	strb	r0, [r6, #22]
 800daaa:	7571      	strb	r1, [r6, #21]
 800daac:	4630      	mov	r0, r6
 800daae:	60e5      	str	r5, [r4, #12]
 800dab0:	f7fd ff58 	bl	800b964 <ucdr_align_to>
 800dab4:	4630      	mov	r0, r6
 800dab6:	9901      	ldr	r1, [sp, #4]
 800dab8:	f7fd ff8a 	bl	800b9d0 <ucdr_advance_buffer>
 800dabc:	4628      	mov	r0, r5
 800dabe:	b003      	add	sp, #12
 800dac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dac2:	bf00      	nop

0800dac4 <_Header__cdr_serialize>:
 800dac4:	b1f8      	cbz	r0, 800db06 <_Header__cdr_serialize+0x42>
 800dac6:	b570      	push	{r4, r5, r6, lr}
 800dac8:	4604      	mov	r4, r0
 800daca:	460d      	mov	r5, r1
 800dacc:	f000 f8de 	bl	800dc8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dad0:	6843      	ldr	r3, [r0, #4]
 800dad2:	4629      	mov	r1, r5
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	4620      	mov	r0, r4
 800dad8:	4798      	blx	r3
 800dada:	68a6      	ldr	r6, [r4, #8]
 800dadc:	b156      	cbz	r6, 800daf4 <_Header__cdr_serialize+0x30>
 800dade:	4630      	mov	r0, r6
 800dae0:	f7f2 fb88 	bl	80001f4 <strlen>
 800dae4:	4631      	mov	r1, r6
 800dae6:	60e0      	str	r0, [r4, #12]
 800dae8:	1c42      	adds	r2, r0, #1
 800daea:	4628      	mov	r0, r5
 800daec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800daf0:	f000 bba6 	b.w	800e240 <ucdr_serialize_sequence_char>
 800daf4:	4630      	mov	r0, r6
 800daf6:	60e0      	str	r0, [r4, #12]
 800daf8:	4632      	mov	r2, r6
 800dafa:	4631      	mov	r1, r6
 800dafc:	4628      	mov	r0, r5
 800dafe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db02:	f000 bb9d 	b.w	800e240 <ucdr_serialize_sequence_char>
 800db06:	4770      	bx	lr

0800db08 <_Header__get_serialized_size>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4604      	mov	r4, r0
 800db0c:	b150      	cbz	r0, 800db24 <_Header__get_serialized_size+0x1c>
 800db0e:	2100      	movs	r1, #0
 800db10:	f000 f858 	bl	800dbc4 <get_serialized_size_builtin_interfaces__msg__Time>
 800db14:	2104      	movs	r1, #4
 800db16:	4605      	mov	r5, r0
 800db18:	f7fd ff0e 	bl	800b938 <ucdr_alignment>
 800db1c:	68e2      	ldr	r2, [r4, #12]
 800db1e:	3205      	adds	r2, #5
 800db20:	1953      	adds	r3, r2, r5
 800db22:	4418      	add	r0, r3
 800db24:	bd38      	pop	{r3, r4, r5, pc}
 800db26:	bf00      	nop

0800db28 <max_serialized_size_std_msgs__msg__Header>:
 800db28:	b510      	push	{r4, lr}
 800db2a:	2301      	movs	r3, #1
 800db2c:	4604      	mov	r4, r0
 800db2e:	7003      	strb	r3, [r0, #0]
 800db30:	f000 f898 	bl	800dc64 <max_serialized_size_builtin_interfaces__msg__Time>
 800db34:	2300      	movs	r3, #0
 800db36:	7023      	strb	r3, [r4, #0]
 800db38:	bd10      	pop	{r4, pc}
 800db3a:	bf00      	nop

0800db3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800db3c:	4800      	ldr	r0, [pc, #0]	@ (800db40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800db3e:	4770      	bx	lr
 800db40:	200004a4 	.word	0x200004a4

0800db44 <_Int16__max_serialized_size>:
 800db44:	b508      	push	{r3, lr}
 800db46:	2102      	movs	r1, #2
 800db48:	2000      	movs	r0, #0
 800db4a:	f7fd fef5 	bl	800b938 <ucdr_alignment>
 800db4e:	3002      	adds	r0, #2
 800db50:	bd08      	pop	{r3, pc}
 800db52:	bf00      	nop

0800db54 <_Int16__cdr_deserialize>:
 800db54:	b109      	cbz	r1, 800db5a <_Int16__cdr_deserialize+0x6>
 800db56:	f7fd b9c5 	b.w	800aee4 <ucdr_deserialize_int16_t>
 800db5a:	4608      	mov	r0, r1
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop

0800db60 <get_serialized_size_std_msgs__msg__Int16>:
 800db60:	b138      	cbz	r0, 800db72 <get_serialized_size_std_msgs__msg__Int16+0x12>
 800db62:	b508      	push	{r3, lr}
 800db64:	460b      	mov	r3, r1
 800db66:	4618      	mov	r0, r3
 800db68:	2102      	movs	r1, #2
 800db6a:	f7fd fee5 	bl	800b938 <ucdr_alignment>
 800db6e:	3002      	adds	r0, #2
 800db70:	bd08      	pop	{r3, pc}
 800db72:	4770      	bx	lr

0800db74 <_Int16__cdr_serialize>:
 800db74:	460a      	mov	r2, r1
 800db76:	b120      	cbz	r0, 800db82 <_Int16__cdr_serialize+0xe>
 800db78:	f9b0 1000 	ldrsh.w	r1, [r0]
 800db7c:	4610      	mov	r0, r2
 800db7e:	f7fd b931 	b.w	800ade4 <ucdr_serialize_int16_t>
 800db82:	4770      	bx	lr

0800db84 <_Int16__get_serialized_size>:
 800db84:	b130      	cbz	r0, 800db94 <_Int16__get_serialized_size+0x10>
 800db86:	b508      	push	{r3, lr}
 800db88:	2102      	movs	r1, #2
 800db8a:	2000      	movs	r0, #0
 800db8c:	f7fd fed4 	bl	800b938 <ucdr_alignment>
 800db90:	3002      	adds	r0, #2
 800db92:	bd08      	pop	{r3, pc}
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop

0800db98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800db98:	4800      	ldr	r0, [pc, #0]	@ (800db9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int16+0x4>)
 800db9a:	4770      	bx	lr
 800db9c:	200004cc 	.word	0x200004cc

0800dba0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800dba0:	f007 bf02 	b.w	80159a8 <builtin_interfaces__msg__Time__init>

0800dba4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800dba4:	f007 bf04 	b.w	80159b0 <builtin_interfaces__msg__Time__fini>

0800dba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800dba8:	4b04      	ldr	r3, [pc, #16]	@ (800dbbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	b10a      	cbz	r2, 800dbb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800dbae:	4803      	ldr	r0, [pc, #12]	@ (800dbbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800dbb0:	4770      	bx	lr
 800dbb2:	4a03      	ldr	r2, [pc, #12]	@ (800dbc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800dbb4:	4801      	ldr	r0, [pc, #4]	@ (800dbbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800dbb6:	6812      	ldr	r2, [r2, #0]
 800dbb8:	601a      	str	r2, [r3, #0]
 800dbba:	4770      	bx	lr
 800dbbc:	2000056c 	.word	0x2000056c
 800dbc0:	200001d4 	.word	0x200001d4

0800dbc4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800dbc4:	b180      	cbz	r0, 800dbe8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800dbc6:	b538      	push	{r3, r4, r5, lr}
 800dbc8:	460d      	mov	r5, r1
 800dbca:	4628      	mov	r0, r5
 800dbcc:	2104      	movs	r1, #4
 800dbce:	f7fd feb3 	bl	800b938 <ucdr_alignment>
 800dbd2:	1d2b      	adds	r3, r5, #4
 800dbd4:	181c      	adds	r4, r3, r0
 800dbd6:	2104      	movs	r1, #4
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f7fd fead 	bl	800b938 <ucdr_alignment>
 800dbde:	f1c5 0504 	rsb	r5, r5, #4
 800dbe2:	4428      	add	r0, r5
 800dbe4:	4420      	add	r0, r4
 800dbe6:	bd38      	pop	{r3, r4, r5, pc}
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop

0800dbec <_Time__cdr_deserialize>:
 800dbec:	b538      	push	{r3, r4, r5, lr}
 800dbee:	460c      	mov	r4, r1
 800dbf0:	b141      	cbz	r1, 800dc04 <_Time__cdr_deserialize+0x18>
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	f7fd fa82 	bl	800b0fc <ucdr_deserialize_int32_t>
 800dbf8:	1d21      	adds	r1, r4, #4
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc00:	f7fc befa 	b.w	800a9f8 <ucdr_deserialize_uint32_t>
 800dc04:	4608      	mov	r0, r1
 800dc06:	bd38      	pop	{r3, r4, r5, pc}

0800dc08 <_Time__cdr_serialize>:
 800dc08:	b160      	cbz	r0, 800dc24 <_Time__cdr_serialize+0x1c>
 800dc0a:	b538      	push	{r3, r4, r5, lr}
 800dc0c:	460d      	mov	r5, r1
 800dc0e:	4604      	mov	r4, r0
 800dc10:	6801      	ldr	r1, [r0, #0]
 800dc12:	4628      	mov	r0, r5
 800dc14:	f7fd f9da 	bl	800afcc <ucdr_serialize_int32_t>
 800dc18:	6861      	ldr	r1, [r4, #4]
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc20:	f7fc bdba 	b.w	800a798 <ucdr_serialize_uint32_t>
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop

0800dc28 <_Time__get_serialized_size>:
 800dc28:	b160      	cbz	r0, 800dc44 <_Time__get_serialized_size+0x1c>
 800dc2a:	b510      	push	{r4, lr}
 800dc2c:	2104      	movs	r1, #4
 800dc2e:	2000      	movs	r0, #0
 800dc30:	f7fd fe82 	bl	800b938 <ucdr_alignment>
 800dc34:	1d04      	adds	r4, r0, #4
 800dc36:	2104      	movs	r1, #4
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f7fd fe7d 	bl	800b938 <ucdr_alignment>
 800dc3e:	3004      	adds	r0, #4
 800dc40:	4420      	add	r0, r4
 800dc42:	bd10      	pop	{r4, pc}
 800dc44:	4770      	bx	lr
 800dc46:	bf00      	nop

0800dc48 <_Time__max_serialized_size>:
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	2104      	movs	r1, #4
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	f7fd fe73 	bl	800b938 <ucdr_alignment>
 800dc52:	1d04      	adds	r4, r0, #4
 800dc54:	2104      	movs	r1, #4
 800dc56:	4620      	mov	r0, r4
 800dc58:	f7fd fe6e 	bl	800b938 <ucdr_alignment>
 800dc5c:	3004      	adds	r0, #4
 800dc5e:	4420      	add	r0, r4
 800dc60:	bd10      	pop	{r4, pc}
 800dc62:	bf00      	nop

0800dc64 <max_serialized_size_builtin_interfaces__msg__Time>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	460c      	mov	r4, r1
 800dc68:	2301      	movs	r3, #1
 800dc6a:	7003      	strb	r3, [r0, #0]
 800dc6c:	2104      	movs	r1, #4
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f7fd fe62 	bl	800b938 <ucdr_alignment>
 800dc74:	1d25      	adds	r5, r4, #4
 800dc76:	4405      	add	r5, r0
 800dc78:	2104      	movs	r1, #4
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	f7fd fe5c 	bl	800b938 <ucdr_alignment>
 800dc80:	f1c4 0404 	rsb	r4, r4, #4
 800dc84:	4420      	add	r0, r4
 800dc86:	4428      	add	r0, r5
 800dc88:	bd38      	pop	{r3, r4, r5, pc}
 800dc8a:	bf00      	nop

0800dc8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800dc8c:	4800      	ldr	r0, [pc, #0]	@ (800dc90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800dc8e:	4770      	bx	lr
 800dc90:	20000578 	.word	0x20000578

0800dc94 <geometry_msgs__msg__Twist__init>:
 800dc94:	b570      	push	{r4, r5, r6, lr}
 800dc96:	4605      	mov	r5, r0
 800dc98:	b1a8      	cbz	r0, 800dcc6 <geometry_msgs__msg__Twist__init+0x32>
 800dc9a:	f000 f82b 	bl	800dcf4 <geometry_msgs__msg__Vector3__init>
 800dc9e:	4604      	mov	r4, r0
 800dca0:	b140      	cbz	r0, 800dcb4 <geometry_msgs__msg__Twist__init+0x20>
 800dca2:	f105 0618 	add.w	r6, r5, #24
 800dca6:	4630      	mov	r0, r6
 800dca8:	f000 f824 	bl	800dcf4 <geometry_msgs__msg__Vector3__init>
 800dcac:	4604      	mov	r4, r0
 800dcae:	b168      	cbz	r0, 800dccc <geometry_msgs__msg__Twist__init+0x38>
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	bd70      	pop	{r4, r5, r6, pc}
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	f000 f821 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 800dcba:	f105 0018 	add.w	r0, r5, #24
 800dcbe:	f000 f81d 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	bd70      	pop	{r4, r5, r6, pc}
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	4620      	mov	r0, r4
 800dcca:	bd70      	pop	{r4, r5, r6, pc}
 800dccc:	4628      	mov	r0, r5
 800dcce:	f000 f815 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f000 f812 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 800dcd8:	e7ea      	b.n	800dcb0 <geometry_msgs__msg__Twist__init+0x1c>
 800dcda:	bf00      	nop

0800dcdc <geometry_msgs__msg__Twist__fini>:
 800dcdc:	b148      	cbz	r0, 800dcf2 <geometry_msgs__msg__Twist__fini+0x16>
 800dcde:	b510      	push	{r4, lr}
 800dce0:	4604      	mov	r4, r0
 800dce2:	f000 f80b 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 800dce6:	f104 0018 	add.w	r0, r4, #24
 800dcea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcee:	f000 b805 	b.w	800dcfc <geometry_msgs__msg__Vector3__fini>
 800dcf2:	4770      	bx	lr

0800dcf4 <geometry_msgs__msg__Vector3__init>:
 800dcf4:	3800      	subs	r0, #0
 800dcf6:	bf18      	it	ne
 800dcf8:	2001      	movne	r0, #1
 800dcfa:	4770      	bx	lr

0800dcfc <geometry_msgs__msg__Vector3__fini>:
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop

0800dd00 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800dd00:	f007 be5a 	b.w	80159b8 <geometry_msgs__msg__Quaternion__init>

0800dd04 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800dd04:	f007 be6c 	b.w	80159e0 <geometry_msgs__msg__Quaternion__fini>

0800dd08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800dd08:	4b04      	ldr	r3, [pc, #16]	@ (800dd1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	b10a      	cbz	r2, 800dd12 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800dd0e:	4803      	ldr	r0, [pc, #12]	@ (800dd1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800dd10:	4770      	bx	lr
 800dd12:	4a03      	ldr	r2, [pc, #12]	@ (800dd20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800dd14:	4801      	ldr	r0, [pc, #4]	@ (800dd1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800dd16:	6812      	ldr	r2, [r2, #0]
 800dd18:	601a      	str	r2, [r3, #0]
 800dd1a:	4770      	bx	lr
 800dd1c:	20000690 	.word	0x20000690
 800dd20:	200001d4 	.word	0x200001d4

0800dd24 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800dd24:	b1f0      	cbz	r0, 800dd64 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800dd26:	b570      	push	{r4, r5, r6, lr}
 800dd28:	460d      	mov	r5, r1
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	2108      	movs	r1, #8
 800dd2e:	f7fd fe03 	bl	800b938 <ucdr_alignment>
 800dd32:	f105 0308 	add.w	r3, r5, #8
 800dd36:	181e      	adds	r6, r3, r0
 800dd38:	2108      	movs	r1, #8
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f7fd fdfc 	bl	800b938 <ucdr_alignment>
 800dd40:	f100 0408 	add.w	r4, r0, #8
 800dd44:	4434      	add	r4, r6
 800dd46:	2108      	movs	r1, #8
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f7fd fdf5 	bl	800b938 <ucdr_alignment>
 800dd4e:	3008      	adds	r0, #8
 800dd50:	4404      	add	r4, r0
 800dd52:	2108      	movs	r1, #8
 800dd54:	4620      	mov	r0, r4
 800dd56:	f7fd fdef 	bl	800b938 <ucdr_alignment>
 800dd5a:	f1c5 0508 	rsb	r5, r5, #8
 800dd5e:	4428      	add	r0, r5
 800dd60:	4420      	add	r0, r4
 800dd62:	bd70      	pop	{r4, r5, r6, pc}
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop

0800dd68 <_Quaternion__cdr_deserialize>:
 800dd68:	b538      	push	{r3, r4, r5, lr}
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	b199      	cbz	r1, 800dd96 <_Quaternion__cdr_deserialize+0x2e>
 800dd6e:	4605      	mov	r5, r0
 800dd70:	f7fd fbf6 	bl	800b560 <ucdr_deserialize_double>
 800dd74:	f104 0108 	add.w	r1, r4, #8
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f7fd fbf1 	bl	800b560 <ucdr_deserialize_double>
 800dd7e:	f104 0110 	add.w	r1, r4, #16
 800dd82:	4628      	mov	r0, r5
 800dd84:	f7fd fbec 	bl	800b560 <ucdr_deserialize_double>
 800dd88:	f104 0118 	add.w	r1, r4, #24
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd92:	f7fd bbe5 	b.w	800b560 <ucdr_deserialize_double>
 800dd96:	4608      	mov	r0, r1
 800dd98:	bd38      	pop	{r3, r4, r5, pc}
 800dd9a:	bf00      	nop

0800dd9c <_Quaternion__cdr_serialize>:
 800dd9c:	b1c0      	cbz	r0, 800ddd0 <_Quaternion__cdr_serialize+0x34>
 800dd9e:	b538      	push	{r3, r4, r5, lr}
 800dda0:	ed90 0b00 	vldr	d0, [r0]
 800dda4:	460d      	mov	r5, r1
 800dda6:	4604      	mov	r4, r0
 800dda8:	4608      	mov	r0, r1
 800ddaa:	f7fd fa37 	bl	800b21c <ucdr_serialize_double>
 800ddae:	ed94 0b02 	vldr	d0, [r4, #8]
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	f7fd fa32 	bl	800b21c <ucdr_serialize_double>
 800ddb8:	ed94 0b04 	vldr	d0, [r4, #16]
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	f7fd fa2d 	bl	800b21c <ucdr_serialize_double>
 800ddc2:	ed94 0b06 	vldr	d0, [r4, #24]
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddcc:	f7fd ba26 	b.w	800b21c <ucdr_serialize_double>
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop

0800ddd4 <_Quaternion__get_serialized_size>:
 800ddd4:	b1d0      	cbz	r0, 800de0c <_Quaternion__get_serialized_size+0x38>
 800ddd6:	b538      	push	{r3, r4, r5, lr}
 800ddd8:	2108      	movs	r1, #8
 800ddda:	2000      	movs	r0, #0
 800dddc:	f7fd fdac 	bl	800b938 <ucdr_alignment>
 800dde0:	f100 0508 	add.w	r5, r0, #8
 800dde4:	2108      	movs	r1, #8
 800dde6:	4628      	mov	r0, r5
 800dde8:	f7fd fda6 	bl	800b938 <ucdr_alignment>
 800ddec:	f100 0408 	add.w	r4, r0, #8
 800ddf0:	442c      	add	r4, r5
 800ddf2:	2108      	movs	r1, #8
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f7fd fd9f 	bl	800b938 <ucdr_alignment>
 800ddfa:	3008      	adds	r0, #8
 800ddfc:	4404      	add	r4, r0
 800ddfe:	2108      	movs	r1, #8
 800de00:	4620      	mov	r0, r4
 800de02:	f7fd fd99 	bl	800b938 <ucdr_alignment>
 800de06:	3008      	adds	r0, #8
 800de08:	4420      	add	r0, r4
 800de0a:	bd38      	pop	{r3, r4, r5, pc}
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop

0800de10 <_Quaternion__max_serialized_size>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	2108      	movs	r1, #8
 800de14:	2000      	movs	r0, #0
 800de16:	f7fd fd8f 	bl	800b938 <ucdr_alignment>
 800de1a:	f100 0508 	add.w	r5, r0, #8
 800de1e:	2108      	movs	r1, #8
 800de20:	4628      	mov	r0, r5
 800de22:	f7fd fd89 	bl	800b938 <ucdr_alignment>
 800de26:	f100 0408 	add.w	r4, r0, #8
 800de2a:	442c      	add	r4, r5
 800de2c:	2108      	movs	r1, #8
 800de2e:	4620      	mov	r0, r4
 800de30:	f7fd fd82 	bl	800b938 <ucdr_alignment>
 800de34:	3008      	adds	r0, #8
 800de36:	4404      	add	r4, r0
 800de38:	2108      	movs	r1, #8
 800de3a:	4620      	mov	r0, r4
 800de3c:	f7fd fd7c 	bl	800b938 <ucdr_alignment>
 800de40:	3008      	adds	r0, #8
 800de42:	4420      	add	r0, r4
 800de44:	bd38      	pop	{r3, r4, r5, pc}
 800de46:	bf00      	nop

0800de48 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800de48:	b570      	push	{r4, r5, r6, lr}
 800de4a:	2301      	movs	r3, #1
 800de4c:	460c      	mov	r4, r1
 800de4e:	7003      	strb	r3, [r0, #0]
 800de50:	2108      	movs	r1, #8
 800de52:	4620      	mov	r0, r4
 800de54:	f7fd fd70 	bl	800b938 <ucdr_alignment>
 800de58:	f104 0508 	add.w	r5, r4, #8
 800de5c:	1946      	adds	r6, r0, r5
 800de5e:	2108      	movs	r1, #8
 800de60:	4630      	mov	r0, r6
 800de62:	f7fd fd69 	bl	800b938 <ucdr_alignment>
 800de66:	f100 0508 	add.w	r5, r0, #8
 800de6a:	4435      	add	r5, r6
 800de6c:	2108      	movs	r1, #8
 800de6e:	4628      	mov	r0, r5
 800de70:	f7fd fd62 	bl	800b938 <ucdr_alignment>
 800de74:	3008      	adds	r0, #8
 800de76:	4405      	add	r5, r0
 800de78:	2108      	movs	r1, #8
 800de7a:	4628      	mov	r0, r5
 800de7c:	f7fd fd5c 	bl	800b938 <ucdr_alignment>
 800de80:	f1c4 0408 	rsb	r4, r4, #8
 800de84:	4420      	add	r0, r4
 800de86:	4428      	add	r0, r5
 800de88:	bd70      	pop	{r4, r5, r6, pc}
 800de8a:	bf00      	nop

0800de8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800de8c:	4800      	ldr	r0, [pc, #0]	@ (800de90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800de8e:	4770      	bx	lr
 800de90:	2000069c 	.word	0x2000069c

0800de94 <ucdr_serialize_endian_array_char>:
 800de94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de98:	4619      	mov	r1, r3
 800de9a:	461f      	mov	r7, r3
 800de9c:	4605      	mov	r5, r0
 800de9e:	4690      	mov	r8, r2
 800dea0:	f7fd fcf2 	bl	800b888 <ucdr_check_buffer_available_for>
 800dea4:	b9e0      	cbnz	r0, 800dee0 <ucdr_serialize_endian_array_char+0x4c>
 800dea6:	463e      	mov	r6, r7
 800dea8:	e009      	b.n	800debe <ucdr_serialize_endian_array_char+0x2a>
 800deaa:	68a8      	ldr	r0, [r5, #8]
 800deac:	f00a fc61 	bl	8018772 <memcpy>
 800deb0:	68ab      	ldr	r3, [r5, #8]
 800deb2:	6928      	ldr	r0, [r5, #16]
 800deb4:	4423      	add	r3, r4
 800deb6:	4420      	add	r0, r4
 800deb8:	1b36      	subs	r6, r6, r4
 800deba:	60ab      	str	r3, [r5, #8]
 800debc:	6128      	str	r0, [r5, #16]
 800debe:	4631      	mov	r1, r6
 800dec0:	2201      	movs	r2, #1
 800dec2:	4628      	mov	r0, r5
 800dec4:	f7fd fd68 	bl	800b998 <ucdr_check_final_buffer_behavior_array>
 800dec8:	1bb9      	subs	r1, r7, r6
 800deca:	4441      	add	r1, r8
 800decc:	4604      	mov	r4, r0
 800dece:	4602      	mov	r2, r0
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d1ea      	bne.n	800deaa <ucdr_serialize_endian_array_char+0x16>
 800ded4:	2301      	movs	r3, #1
 800ded6:	7da8      	ldrb	r0, [r5, #22]
 800ded8:	756b      	strb	r3, [r5, #21]
 800deda:	4058      	eors	r0, r3
 800dedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee0:	463a      	mov	r2, r7
 800dee2:	68a8      	ldr	r0, [r5, #8]
 800dee4:	4641      	mov	r1, r8
 800dee6:	f00a fc44 	bl	8018772 <memcpy>
 800deea:	68aa      	ldr	r2, [r5, #8]
 800deec:	692b      	ldr	r3, [r5, #16]
 800deee:	443a      	add	r2, r7
 800def0:	443b      	add	r3, r7
 800def2:	60aa      	str	r2, [r5, #8]
 800def4:	612b      	str	r3, [r5, #16]
 800def6:	e7ed      	b.n	800ded4 <ucdr_serialize_endian_array_char+0x40>

0800def8 <ucdr_deserialize_endian_array_char>:
 800def8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800defc:	4619      	mov	r1, r3
 800defe:	461f      	mov	r7, r3
 800df00:	4605      	mov	r5, r0
 800df02:	4690      	mov	r8, r2
 800df04:	f7fd fcc0 	bl	800b888 <ucdr_check_buffer_available_for>
 800df08:	b9e0      	cbnz	r0, 800df44 <ucdr_deserialize_endian_array_char+0x4c>
 800df0a:	463e      	mov	r6, r7
 800df0c:	e009      	b.n	800df22 <ucdr_deserialize_endian_array_char+0x2a>
 800df0e:	68a9      	ldr	r1, [r5, #8]
 800df10:	f00a fc2f 	bl	8018772 <memcpy>
 800df14:	68ab      	ldr	r3, [r5, #8]
 800df16:	6928      	ldr	r0, [r5, #16]
 800df18:	4423      	add	r3, r4
 800df1a:	4420      	add	r0, r4
 800df1c:	1b36      	subs	r6, r6, r4
 800df1e:	60ab      	str	r3, [r5, #8]
 800df20:	6128      	str	r0, [r5, #16]
 800df22:	2201      	movs	r2, #1
 800df24:	4631      	mov	r1, r6
 800df26:	4628      	mov	r0, r5
 800df28:	f7fd fd36 	bl	800b998 <ucdr_check_final_buffer_behavior_array>
 800df2c:	4604      	mov	r4, r0
 800df2e:	1bb8      	subs	r0, r7, r6
 800df30:	4440      	add	r0, r8
 800df32:	4622      	mov	r2, r4
 800df34:	2c00      	cmp	r4, #0
 800df36:	d1ea      	bne.n	800df0e <ucdr_deserialize_endian_array_char+0x16>
 800df38:	2301      	movs	r3, #1
 800df3a:	7da8      	ldrb	r0, [r5, #22]
 800df3c:	756b      	strb	r3, [r5, #21]
 800df3e:	4058      	eors	r0, r3
 800df40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df44:	463a      	mov	r2, r7
 800df46:	68a9      	ldr	r1, [r5, #8]
 800df48:	4640      	mov	r0, r8
 800df4a:	f00a fc12 	bl	8018772 <memcpy>
 800df4e:	68aa      	ldr	r2, [r5, #8]
 800df50:	692b      	ldr	r3, [r5, #16]
 800df52:	443a      	add	r2, r7
 800df54:	443b      	add	r3, r7
 800df56:	60aa      	str	r2, [r5, #8]
 800df58:	612b      	str	r3, [r5, #16]
 800df5a:	e7ed      	b.n	800df38 <ucdr_deserialize_endian_array_char+0x40>

0800df5c <ucdr_serialize_array_uint8_t>:
 800df5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df60:	4688      	mov	r8, r1
 800df62:	4611      	mov	r1, r2
 800df64:	4617      	mov	r7, r2
 800df66:	4605      	mov	r5, r0
 800df68:	f7fd fc8e 	bl	800b888 <ucdr_check_buffer_available_for>
 800df6c:	b9e0      	cbnz	r0, 800dfa8 <ucdr_serialize_array_uint8_t+0x4c>
 800df6e:	463e      	mov	r6, r7
 800df70:	e009      	b.n	800df86 <ucdr_serialize_array_uint8_t+0x2a>
 800df72:	68a8      	ldr	r0, [r5, #8]
 800df74:	f00a fbfd 	bl	8018772 <memcpy>
 800df78:	68aa      	ldr	r2, [r5, #8]
 800df7a:	692b      	ldr	r3, [r5, #16]
 800df7c:	4422      	add	r2, r4
 800df7e:	4423      	add	r3, r4
 800df80:	1b36      	subs	r6, r6, r4
 800df82:	60aa      	str	r2, [r5, #8]
 800df84:	612b      	str	r3, [r5, #16]
 800df86:	4631      	mov	r1, r6
 800df88:	2201      	movs	r2, #1
 800df8a:	4628      	mov	r0, r5
 800df8c:	f7fd fd04 	bl	800b998 <ucdr_check_final_buffer_behavior_array>
 800df90:	1bb9      	subs	r1, r7, r6
 800df92:	4441      	add	r1, r8
 800df94:	4604      	mov	r4, r0
 800df96:	4602      	mov	r2, r0
 800df98:	2800      	cmp	r0, #0
 800df9a:	d1ea      	bne.n	800df72 <ucdr_serialize_array_uint8_t+0x16>
 800df9c:	2301      	movs	r3, #1
 800df9e:	7da8      	ldrb	r0, [r5, #22]
 800dfa0:	756b      	strb	r3, [r5, #21]
 800dfa2:	4058      	eors	r0, r3
 800dfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa8:	463a      	mov	r2, r7
 800dfaa:	68a8      	ldr	r0, [r5, #8]
 800dfac:	4641      	mov	r1, r8
 800dfae:	f00a fbe0 	bl	8018772 <memcpy>
 800dfb2:	68aa      	ldr	r2, [r5, #8]
 800dfb4:	692b      	ldr	r3, [r5, #16]
 800dfb6:	443a      	add	r2, r7
 800dfb8:	443b      	add	r3, r7
 800dfba:	60aa      	str	r2, [r5, #8]
 800dfbc:	612b      	str	r3, [r5, #16]
 800dfbe:	e7ed      	b.n	800df9c <ucdr_serialize_array_uint8_t+0x40>

0800dfc0 <ucdr_serialize_endian_array_uint8_t>:
 800dfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	461f      	mov	r7, r3
 800dfc8:	4605      	mov	r5, r0
 800dfca:	4690      	mov	r8, r2
 800dfcc:	f7fd fc5c 	bl	800b888 <ucdr_check_buffer_available_for>
 800dfd0:	b9e0      	cbnz	r0, 800e00c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800dfd2:	463e      	mov	r6, r7
 800dfd4:	e009      	b.n	800dfea <ucdr_serialize_endian_array_uint8_t+0x2a>
 800dfd6:	68a8      	ldr	r0, [r5, #8]
 800dfd8:	f00a fbcb 	bl	8018772 <memcpy>
 800dfdc:	68ab      	ldr	r3, [r5, #8]
 800dfde:	6928      	ldr	r0, [r5, #16]
 800dfe0:	4423      	add	r3, r4
 800dfe2:	4420      	add	r0, r4
 800dfe4:	1b36      	subs	r6, r6, r4
 800dfe6:	60ab      	str	r3, [r5, #8]
 800dfe8:	6128      	str	r0, [r5, #16]
 800dfea:	4631      	mov	r1, r6
 800dfec:	2201      	movs	r2, #1
 800dfee:	4628      	mov	r0, r5
 800dff0:	f7fd fcd2 	bl	800b998 <ucdr_check_final_buffer_behavior_array>
 800dff4:	1bb9      	subs	r1, r7, r6
 800dff6:	4441      	add	r1, r8
 800dff8:	4604      	mov	r4, r0
 800dffa:	4602      	mov	r2, r0
 800dffc:	2800      	cmp	r0, #0
 800dffe:	d1ea      	bne.n	800dfd6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800e000:	2301      	movs	r3, #1
 800e002:	7da8      	ldrb	r0, [r5, #22]
 800e004:	756b      	strb	r3, [r5, #21]
 800e006:	4058      	eors	r0, r3
 800e008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e00c:	463a      	mov	r2, r7
 800e00e:	68a8      	ldr	r0, [r5, #8]
 800e010:	4641      	mov	r1, r8
 800e012:	f00a fbae 	bl	8018772 <memcpy>
 800e016:	68aa      	ldr	r2, [r5, #8]
 800e018:	692b      	ldr	r3, [r5, #16]
 800e01a:	443a      	add	r2, r7
 800e01c:	443b      	add	r3, r7
 800e01e:	60aa      	str	r2, [r5, #8]
 800e020:	612b      	str	r3, [r5, #16]
 800e022:	e7ed      	b.n	800e000 <ucdr_serialize_endian_array_uint8_t+0x40>

0800e024 <ucdr_deserialize_array_uint8_t>:
 800e024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e028:	4688      	mov	r8, r1
 800e02a:	4611      	mov	r1, r2
 800e02c:	4617      	mov	r7, r2
 800e02e:	4605      	mov	r5, r0
 800e030:	f7fd fc2a 	bl	800b888 <ucdr_check_buffer_available_for>
 800e034:	b9e0      	cbnz	r0, 800e070 <ucdr_deserialize_array_uint8_t+0x4c>
 800e036:	463e      	mov	r6, r7
 800e038:	e009      	b.n	800e04e <ucdr_deserialize_array_uint8_t+0x2a>
 800e03a:	68a9      	ldr	r1, [r5, #8]
 800e03c:	f00a fb99 	bl	8018772 <memcpy>
 800e040:	68aa      	ldr	r2, [r5, #8]
 800e042:	692b      	ldr	r3, [r5, #16]
 800e044:	4422      	add	r2, r4
 800e046:	4423      	add	r3, r4
 800e048:	1b36      	subs	r6, r6, r4
 800e04a:	60aa      	str	r2, [r5, #8]
 800e04c:	612b      	str	r3, [r5, #16]
 800e04e:	2201      	movs	r2, #1
 800e050:	4631      	mov	r1, r6
 800e052:	4628      	mov	r0, r5
 800e054:	f7fd fca0 	bl	800b998 <ucdr_check_final_buffer_behavior_array>
 800e058:	4604      	mov	r4, r0
 800e05a:	1bb8      	subs	r0, r7, r6
 800e05c:	4440      	add	r0, r8
 800e05e:	4622      	mov	r2, r4
 800e060:	2c00      	cmp	r4, #0
 800e062:	d1ea      	bne.n	800e03a <ucdr_deserialize_array_uint8_t+0x16>
 800e064:	2301      	movs	r3, #1
 800e066:	7da8      	ldrb	r0, [r5, #22]
 800e068:	756b      	strb	r3, [r5, #21]
 800e06a:	4058      	eors	r0, r3
 800e06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e070:	463a      	mov	r2, r7
 800e072:	68a9      	ldr	r1, [r5, #8]
 800e074:	4640      	mov	r0, r8
 800e076:	f00a fb7c 	bl	8018772 <memcpy>
 800e07a:	68aa      	ldr	r2, [r5, #8]
 800e07c:	692b      	ldr	r3, [r5, #16]
 800e07e:	443a      	add	r2, r7
 800e080:	443b      	add	r3, r7
 800e082:	60aa      	str	r2, [r5, #8]
 800e084:	612b      	str	r3, [r5, #16]
 800e086:	e7ed      	b.n	800e064 <ucdr_deserialize_array_uint8_t+0x40>

0800e088 <ucdr_deserialize_endian_array_uint8_t>:
 800e088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e08c:	4619      	mov	r1, r3
 800e08e:	461f      	mov	r7, r3
 800e090:	4605      	mov	r5, r0
 800e092:	4690      	mov	r8, r2
 800e094:	f7fd fbf8 	bl	800b888 <ucdr_check_buffer_available_for>
 800e098:	b9e0      	cbnz	r0, 800e0d4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e09a:	463e      	mov	r6, r7
 800e09c:	e009      	b.n	800e0b2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800e09e:	68a9      	ldr	r1, [r5, #8]
 800e0a0:	f00a fb67 	bl	8018772 <memcpy>
 800e0a4:	68ab      	ldr	r3, [r5, #8]
 800e0a6:	6928      	ldr	r0, [r5, #16]
 800e0a8:	4423      	add	r3, r4
 800e0aa:	4420      	add	r0, r4
 800e0ac:	1b36      	subs	r6, r6, r4
 800e0ae:	60ab      	str	r3, [r5, #8]
 800e0b0:	6128      	str	r0, [r5, #16]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	4631      	mov	r1, r6
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	f7fd fc6e 	bl	800b998 <ucdr_check_final_buffer_behavior_array>
 800e0bc:	4604      	mov	r4, r0
 800e0be:	1bb8      	subs	r0, r7, r6
 800e0c0:	4440      	add	r0, r8
 800e0c2:	4622      	mov	r2, r4
 800e0c4:	2c00      	cmp	r4, #0
 800e0c6:	d1ea      	bne.n	800e09e <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	7da8      	ldrb	r0, [r5, #22]
 800e0cc:	756b      	strb	r3, [r5, #21]
 800e0ce:	4058      	eors	r0, r3
 800e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d4:	463a      	mov	r2, r7
 800e0d6:	68a9      	ldr	r1, [r5, #8]
 800e0d8:	4640      	mov	r0, r8
 800e0da:	f00a fb4a 	bl	8018772 <memcpy>
 800e0de:	68aa      	ldr	r2, [r5, #8]
 800e0e0:	692b      	ldr	r3, [r5, #16]
 800e0e2:	443a      	add	r2, r7
 800e0e4:	443b      	add	r3, r7
 800e0e6:	60aa      	str	r2, [r5, #8]
 800e0e8:	612b      	str	r3, [r5, #16]
 800e0ea:	e7ed      	b.n	800e0c8 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800e0ec <ucdr_serialize_array_double>:
 800e0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f0:	460e      	mov	r6, r1
 800e0f2:	2108      	movs	r1, #8
 800e0f4:	4604      	mov	r4, r0
 800e0f6:	4617      	mov	r7, r2
 800e0f8:	f7fd fc26 	bl	800b948 <ucdr_buffer_alignment>
 800e0fc:	4601      	mov	r1, r0
 800e0fe:	4620      	mov	r0, r4
 800e100:	7d65      	ldrb	r5, [r4, #21]
 800e102:	f7fd fc65 	bl	800b9d0 <ucdr_advance_buffer>
 800e106:	7d21      	ldrb	r1, [r4, #20]
 800e108:	7565      	strb	r5, [r4, #21]
 800e10a:	2901      	cmp	r1, #1
 800e10c:	d010      	beq.n	800e130 <ucdr_serialize_array_double+0x44>
 800e10e:	b157      	cbz	r7, 800e126 <ucdr_serialize_array_double+0x3a>
 800e110:	2500      	movs	r5, #0
 800e112:	e000      	b.n	800e116 <ucdr_serialize_array_double+0x2a>
 800e114:	7d21      	ldrb	r1, [r4, #20]
 800e116:	ecb6 0b02 	vldmia	r6!, {d0}
 800e11a:	4620      	mov	r0, r4
 800e11c:	3501      	adds	r5, #1
 800e11e:	f7fd f94d 	bl	800b3bc <ucdr_serialize_endian_double>
 800e122:	42af      	cmp	r7, r5
 800e124:	d1f6      	bne.n	800e114 <ucdr_serialize_array_double+0x28>
 800e126:	7da0      	ldrb	r0, [r4, #22]
 800e128:	f080 0001 	eor.w	r0, r0, #1
 800e12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e130:	00ff      	lsls	r7, r7, #3
 800e132:	4639      	mov	r1, r7
 800e134:	4620      	mov	r0, r4
 800e136:	f7fd fba7 	bl	800b888 <ucdr_check_buffer_available_for>
 800e13a:	b9f8      	cbnz	r0, 800e17c <ucdr_serialize_array_double+0x90>
 800e13c:	46b8      	mov	r8, r7
 800e13e:	e00a      	b.n	800e156 <ucdr_serialize_array_double+0x6a>
 800e140:	68a0      	ldr	r0, [r4, #8]
 800e142:	f00a fb16 	bl	8018772 <memcpy>
 800e146:	68a2      	ldr	r2, [r4, #8]
 800e148:	6923      	ldr	r3, [r4, #16]
 800e14a:	442a      	add	r2, r5
 800e14c:	442b      	add	r3, r5
 800e14e:	eba8 0805 	sub.w	r8, r8, r5
 800e152:	60a2      	str	r2, [r4, #8]
 800e154:	6123      	str	r3, [r4, #16]
 800e156:	4641      	mov	r1, r8
 800e158:	2208      	movs	r2, #8
 800e15a:	4620      	mov	r0, r4
 800e15c:	f7fd fc1c 	bl	800b998 <ucdr_check_final_buffer_behavior_array>
 800e160:	eba7 0108 	sub.w	r1, r7, r8
 800e164:	4431      	add	r1, r6
 800e166:	4605      	mov	r5, r0
 800e168:	4602      	mov	r2, r0
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d1e8      	bne.n	800e140 <ucdr_serialize_array_double+0x54>
 800e16e:	7da0      	ldrb	r0, [r4, #22]
 800e170:	2308      	movs	r3, #8
 800e172:	7563      	strb	r3, [r4, #21]
 800e174:	f080 0001 	eor.w	r0, r0, #1
 800e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e17c:	463a      	mov	r2, r7
 800e17e:	68a0      	ldr	r0, [r4, #8]
 800e180:	4631      	mov	r1, r6
 800e182:	f00a faf6 	bl	8018772 <memcpy>
 800e186:	68a2      	ldr	r2, [r4, #8]
 800e188:	6923      	ldr	r3, [r4, #16]
 800e18a:	443a      	add	r2, r7
 800e18c:	441f      	add	r7, r3
 800e18e:	60a2      	str	r2, [r4, #8]
 800e190:	6127      	str	r7, [r4, #16]
 800e192:	e7ec      	b.n	800e16e <ucdr_serialize_array_double+0x82>

0800e194 <ucdr_deserialize_array_double>:
 800e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e198:	460e      	mov	r6, r1
 800e19a:	2108      	movs	r1, #8
 800e19c:	4604      	mov	r4, r0
 800e19e:	4617      	mov	r7, r2
 800e1a0:	f7fd fbd2 	bl	800b948 <ucdr_buffer_alignment>
 800e1a4:	4601      	mov	r1, r0
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	7d65      	ldrb	r5, [r4, #21]
 800e1aa:	f7fd fc11 	bl	800b9d0 <ucdr_advance_buffer>
 800e1ae:	7d21      	ldrb	r1, [r4, #20]
 800e1b0:	7565      	strb	r5, [r4, #21]
 800e1b2:	2901      	cmp	r1, #1
 800e1b4:	d011      	beq.n	800e1da <ucdr_deserialize_array_double+0x46>
 800e1b6:	b15f      	cbz	r7, 800e1d0 <ucdr_deserialize_array_double+0x3c>
 800e1b8:	2500      	movs	r5, #0
 800e1ba:	e000      	b.n	800e1be <ucdr_deserialize_array_double+0x2a>
 800e1bc:	7d21      	ldrb	r1, [r4, #20]
 800e1be:	4632      	mov	r2, r6
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	3501      	adds	r5, #1
 800e1c4:	f7fd fa92 	bl	800b6ec <ucdr_deserialize_endian_double>
 800e1c8:	42af      	cmp	r7, r5
 800e1ca:	f106 0608 	add.w	r6, r6, #8
 800e1ce:	d1f5      	bne.n	800e1bc <ucdr_deserialize_array_double+0x28>
 800e1d0:	7da0      	ldrb	r0, [r4, #22]
 800e1d2:	f080 0001 	eor.w	r0, r0, #1
 800e1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1da:	00ff      	lsls	r7, r7, #3
 800e1dc:	4639      	mov	r1, r7
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f7fd fb52 	bl	800b888 <ucdr_check_buffer_available_for>
 800e1e4:	b9f8      	cbnz	r0, 800e226 <ucdr_deserialize_array_double+0x92>
 800e1e6:	46b8      	mov	r8, r7
 800e1e8:	e00a      	b.n	800e200 <ucdr_deserialize_array_double+0x6c>
 800e1ea:	68a1      	ldr	r1, [r4, #8]
 800e1ec:	f00a fac1 	bl	8018772 <memcpy>
 800e1f0:	68a2      	ldr	r2, [r4, #8]
 800e1f2:	6923      	ldr	r3, [r4, #16]
 800e1f4:	442a      	add	r2, r5
 800e1f6:	442b      	add	r3, r5
 800e1f8:	eba8 0805 	sub.w	r8, r8, r5
 800e1fc:	60a2      	str	r2, [r4, #8]
 800e1fe:	6123      	str	r3, [r4, #16]
 800e200:	2208      	movs	r2, #8
 800e202:	4641      	mov	r1, r8
 800e204:	4620      	mov	r0, r4
 800e206:	f7fd fbc7 	bl	800b998 <ucdr_check_final_buffer_behavior_array>
 800e20a:	4605      	mov	r5, r0
 800e20c:	eba7 0008 	sub.w	r0, r7, r8
 800e210:	4430      	add	r0, r6
 800e212:	462a      	mov	r2, r5
 800e214:	2d00      	cmp	r5, #0
 800e216:	d1e8      	bne.n	800e1ea <ucdr_deserialize_array_double+0x56>
 800e218:	7da0      	ldrb	r0, [r4, #22]
 800e21a:	2308      	movs	r3, #8
 800e21c:	7563      	strb	r3, [r4, #21]
 800e21e:	f080 0001 	eor.w	r0, r0, #1
 800e222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e226:	463a      	mov	r2, r7
 800e228:	68a1      	ldr	r1, [r4, #8]
 800e22a:	4630      	mov	r0, r6
 800e22c:	f00a faa1 	bl	8018772 <memcpy>
 800e230:	68a2      	ldr	r2, [r4, #8]
 800e232:	6923      	ldr	r3, [r4, #16]
 800e234:	443a      	add	r2, r7
 800e236:	441f      	add	r7, r3
 800e238:	60a2      	str	r2, [r4, #8]
 800e23a:	6127      	str	r7, [r4, #16]
 800e23c:	e7ec      	b.n	800e218 <ucdr_deserialize_array_double+0x84>
 800e23e:	bf00      	nop

0800e240 <ucdr_serialize_sequence_char>:
 800e240:	b570      	push	{r4, r5, r6, lr}
 800e242:	4615      	mov	r5, r2
 800e244:	460e      	mov	r6, r1
 800e246:	7d01      	ldrb	r1, [r0, #20]
 800e248:	4604      	mov	r4, r0
 800e24a:	f7fc fb3d 	bl	800a8c8 <ucdr_serialize_endian_uint32_t>
 800e24e:	b90d      	cbnz	r5, 800e254 <ucdr_serialize_sequence_char+0x14>
 800e250:	2001      	movs	r0, #1
 800e252:	bd70      	pop	{r4, r5, r6, pc}
 800e254:	7d21      	ldrb	r1, [r4, #20]
 800e256:	462b      	mov	r3, r5
 800e258:	4632      	mov	r2, r6
 800e25a:	4620      	mov	r0, r4
 800e25c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e260:	f7ff be18 	b.w	800de94 <ucdr_serialize_endian_array_char>

0800e264 <ucdr_deserialize_sequence_char>:
 800e264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e268:	461d      	mov	r5, r3
 800e26a:	4616      	mov	r6, r2
 800e26c:	460f      	mov	r7, r1
 800e26e:	461a      	mov	r2, r3
 800e270:	7d01      	ldrb	r1, [r0, #20]
 800e272:	4604      	mov	r4, r0
 800e274:	f7fc fc50 	bl	800ab18 <ucdr_deserialize_endian_uint32_t>
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	429e      	cmp	r6, r3
 800e27c:	bf3c      	itt	cc
 800e27e:	2201      	movcc	r2, #1
 800e280:	75a2      	strbcc	r2, [r4, #22]
 800e282:	b913      	cbnz	r3, 800e28a <ucdr_deserialize_sequence_char+0x26>
 800e284:	2001      	movs	r0, #1
 800e286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e28a:	7d21      	ldrb	r1, [r4, #20]
 800e28c:	463a      	mov	r2, r7
 800e28e:	4620      	mov	r0, r4
 800e290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e294:	f7ff be30 	b.w	800def8 <ucdr_deserialize_endian_array_char>

0800e298 <ucdr_serialize_sequence_uint8_t>:
 800e298:	b570      	push	{r4, r5, r6, lr}
 800e29a:	4615      	mov	r5, r2
 800e29c:	460e      	mov	r6, r1
 800e29e:	7d01      	ldrb	r1, [r0, #20]
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	f7fc fb11 	bl	800a8c8 <ucdr_serialize_endian_uint32_t>
 800e2a6:	b90d      	cbnz	r5, 800e2ac <ucdr_serialize_sequence_uint8_t+0x14>
 800e2a8:	2001      	movs	r0, #1
 800e2aa:	bd70      	pop	{r4, r5, r6, pc}
 800e2ac:	7d21      	ldrb	r1, [r4, #20]
 800e2ae:	462b      	mov	r3, r5
 800e2b0:	4632      	mov	r2, r6
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2b8:	f7ff be82 	b.w	800dfc0 <ucdr_serialize_endian_array_uint8_t>

0800e2bc <ucdr_deserialize_sequence_uint8_t>:
 800e2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c0:	461d      	mov	r5, r3
 800e2c2:	4616      	mov	r6, r2
 800e2c4:	460f      	mov	r7, r1
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	7d01      	ldrb	r1, [r0, #20]
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	f7fc fc24 	bl	800ab18 <ucdr_deserialize_endian_uint32_t>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	429e      	cmp	r6, r3
 800e2d4:	bf3c      	itt	cc
 800e2d6:	2201      	movcc	r2, #1
 800e2d8:	75a2      	strbcc	r2, [r4, #22]
 800e2da:	b913      	cbnz	r3, 800e2e2 <ucdr_deserialize_sequence_uint8_t+0x26>
 800e2dc:	2001      	movs	r0, #1
 800e2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e2:	7d21      	ldrb	r1, [r4, #20]
 800e2e4:	463a      	mov	r2, r7
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ec:	f7ff becc 	b.w	800e088 <ucdr_deserialize_endian_array_uint8_t>

0800e2f0 <uxr_buffer_delete_entity>:
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	b08e      	sub	sp, #56	@ 0x38
 800e2f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	2204      	movs	r2, #4
 800e300:	ab06      	add	r3, sp, #24
 800e302:	4604      	mov	r4, r0
 800e304:	9103      	str	r1, [sp, #12]
 800e306:	f001 f951 	bl	800f5ac <uxr_prepare_stream_to_write_submessage>
 800e30a:	b918      	cbnz	r0, 800e314 <uxr_buffer_delete_entity+0x24>
 800e30c:	4604      	mov	r4, r0
 800e30e:	4620      	mov	r0, r4
 800e310:	b00e      	add	sp, #56	@ 0x38
 800e312:	bd10      	pop	{r4, pc}
 800e314:	9902      	ldr	r1, [sp, #8]
 800e316:	aa05      	add	r2, sp, #20
 800e318:	4620      	mov	r0, r4
 800e31a:	f001 fa7d 	bl	800f818 <uxr_init_base_object_request>
 800e31e:	a905      	add	r1, sp, #20
 800e320:	4604      	mov	r4, r0
 800e322:	a806      	add	r0, sp, #24
 800e324:	f002 fcce 	bl	8010cc4 <uxr_serialize_DELETE_Payload>
 800e328:	4620      	mov	r0, r4
 800e32a:	b00e      	add	sp, #56	@ 0x38
 800e32c:	bd10      	pop	{r4, pc}
 800e32e:	bf00      	nop

0800e330 <uxr_common_create_entity>:
 800e330:	b510      	push	{r4, lr}
 800e332:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e336:	b08c      	sub	sp, #48	@ 0x30
 800e338:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e33c:	f1bc 0f01 	cmp.w	ip, #1
 800e340:	bf0c      	ite	eq
 800e342:	f003 0201 	andeq.w	r2, r3, #1
 800e346:	2200      	movne	r2, #0
 800e348:	330e      	adds	r3, #14
 800e34a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e34e:	9101      	str	r1, [sp, #4]
 800e350:	441a      	add	r2, r3
 800e352:	2301      	movs	r3, #1
 800e354:	9300      	str	r3, [sp, #0]
 800e356:	9903      	ldr	r1, [sp, #12]
 800e358:	ab04      	add	r3, sp, #16
 800e35a:	b292      	uxth	r2, r2
 800e35c:	4604      	mov	r4, r0
 800e35e:	f001 f925 	bl	800f5ac <uxr_prepare_stream_to_write_submessage>
 800e362:	b918      	cbnz	r0, 800e36c <uxr_common_create_entity+0x3c>
 800e364:	4604      	mov	r4, r0
 800e366:	4620      	mov	r0, r4
 800e368:	b00c      	add	sp, #48	@ 0x30
 800e36a:	bd10      	pop	{r4, pc}
 800e36c:	9902      	ldr	r1, [sp, #8]
 800e36e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e370:	4620      	mov	r0, r4
 800e372:	f001 fa51 	bl	800f818 <uxr_init_base_object_request>
 800e376:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e378:	4604      	mov	r4, r0
 800e37a:	a804      	add	r0, sp, #16
 800e37c:	f002 fbfe 	bl	8010b7c <uxr_serialize_CREATE_Payload>
 800e380:	4620      	mov	r0, r4
 800e382:	b00c      	add	sp, #48	@ 0x30
 800e384:	bd10      	pop	{r4, pc}
 800e386:	bf00      	nop

0800e388 <uxr_buffer_create_participant_bin>:
 800e388:	b570      	push	{r4, r5, r6, lr}
 800e38a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e38e:	ac11      	add	r4, sp, #68	@ 0x44
 800e390:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e394:	2303      	movs	r3, #3
 800e396:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e39a:	7223      	strb	r3, [r4, #8]
 800e39c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e39e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	7122      	strb	r2, [r4, #4]
 800e3aa:	f88d 1014 	strb.w	r1, [sp, #20]
 800e3ae:	b1cb      	cbz	r3, 800e3e4 <uxr_buffer_create_participant_bin+0x5c>
 800e3b0:	f88d 201c 	strb.w	r2, [sp, #28]
 800e3b4:	9308      	str	r3, [sp, #32]
 800e3b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3ba:	a915      	add	r1, sp, #84	@ 0x54
 800e3bc:	a809      	add	r0, sp, #36	@ 0x24
 800e3be:	f7fd fab7 	bl	800b930 <ucdr_init_buffer>
 800e3c2:	a905      	add	r1, sp, #20
 800e3c4:	a809      	add	r0, sp, #36	@ 0x24
 800e3c6:	f001 ffbb 	bl	8010340 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e3ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3cc:	9600      	str	r6, [sp, #0]
 800e3ce:	9401      	str	r4, [sp, #4]
 800e3d0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e3d4:	60e3      	str	r3, [r4, #12]
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	f7ff ffa9 	bl	800e330 <uxr_common_create_entity>
 800e3de:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e3e2:	bd70      	pop	{r4, r5, r6, pc}
 800e3e4:	f88d 301c 	strb.w	r3, [sp, #28]
 800e3e8:	e7e5      	b.n	800e3b6 <uxr_buffer_create_participant_bin+0x2e>
 800e3ea:	bf00      	nop

0800e3ec <uxr_buffer_create_topic_bin>:
 800e3ec:	b570      	push	{r4, r5, r6, lr}
 800e3ee:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e3f2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e3f6:	9105      	str	r1, [sp, #20]
 800e3f8:	4605      	mov	r5, r0
 800e3fa:	a997      	add	r1, sp, #604	@ 0x25c
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	2302      	movs	r3, #2
 800e400:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e404:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e408:	f000 f996 	bl	800e738 <uxr_object_id_to_raw>
 800e40c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e40e:	9306      	str	r3, [sp, #24]
 800e410:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e412:	930a      	str	r3, [sp, #40]	@ 0x28
 800e414:	2303      	movs	r3, #3
 800e416:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e41a:	2301      	movs	r3, #1
 800e41c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e420:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e424:	a917      	add	r1, sp, #92	@ 0x5c
 800e426:	2300      	movs	r3, #0
 800e428:	a80b      	add	r0, sp, #44	@ 0x2c
 800e42a:	f88d 301c 	strb.w	r3, [sp, #28]
 800e42e:	f7fd fa7f 	bl	800b930 <ucdr_init_buffer>
 800e432:	a906      	add	r1, sp, #24
 800e434:	a80b      	add	r0, sp, #44	@ 0x2c
 800e436:	f001 ffa5 	bl	8010384 <uxr_serialize_OBJK_Topic_Binary>
 800e43a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e43c:	9316      	str	r3, [sp, #88]	@ 0x58
 800e43e:	ac13      	add	r4, sp, #76	@ 0x4c
 800e440:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e444:	9600      	str	r6, [sp, #0]
 800e446:	9401      	str	r4, [sp, #4]
 800e448:	b29b      	uxth	r3, r3
 800e44a:	4628      	mov	r0, r5
 800e44c:	f7ff ff70 	bl	800e330 <uxr_common_create_entity>
 800e450:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e454:	bd70      	pop	{r4, r5, r6, pc}
 800e456:	bf00      	nop

0800e458 <uxr_buffer_create_publisher_bin>:
 800e458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e45a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800e45e:	4605      	mov	r5, r0
 800e460:	9105      	str	r1, [sp, #20]
 800e462:	4618      	mov	r0, r3
 800e464:	2603      	movs	r6, #3
 800e466:	a992      	add	r1, sp, #584	@ 0x248
 800e468:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e46c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800e470:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800e474:	f000 f960 	bl	800e738 <uxr_object_id_to_raw>
 800e478:	2300      	movs	r3, #0
 800e47a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e47e:	a912      	add	r1, sp, #72	@ 0x48
 800e480:	a806      	add	r0, sp, #24
 800e482:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e486:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e48a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800e48e:	f7fd fa4f 	bl	800b930 <ucdr_init_buffer>
 800e492:	a993      	add	r1, sp, #588	@ 0x24c
 800e494:	a806      	add	r0, sp, #24
 800e496:	f002 f829 	bl	80104ec <uxr_serialize_OBJK_Publisher_Binary>
 800e49a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e49c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e49e:	ac0e      	add	r4, sp, #56	@ 0x38
 800e4a0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e4a4:	9700      	str	r7, [sp, #0]
 800e4a6:	9401      	str	r4, [sp, #4]
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	f7ff ff40 	bl	800e330 <uxr_common_create_entity>
 800e4b0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800e4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4b6:	bf00      	nop

0800e4b8 <uxr_buffer_create_subscriber_bin>:
 800e4b8:	b570      	push	{r4, r5, r6, lr}
 800e4ba:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800e4be:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e4c2:	9105      	str	r1, [sp, #20]
 800e4c4:	4605      	mov	r5, r0
 800e4c6:	a992      	add	r1, sp, #584	@ 0x248
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	2304      	movs	r3, #4
 800e4cc:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800e4d0:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800e4d4:	f000 f930 	bl	800e738 <uxr_object_id_to_raw>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e4de:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e4e2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e4e6:	a912      	add	r1, sp, #72	@ 0x48
 800e4e8:	2303      	movs	r3, #3
 800e4ea:	a806      	add	r0, sp, #24
 800e4ec:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800e4f0:	f7fd fa1e 	bl	800b930 <ucdr_init_buffer>
 800e4f4:	a993      	add	r1, sp, #588	@ 0x24c
 800e4f6:	a806      	add	r0, sp, #24
 800e4f8:	f002 f8a8 	bl	801064c <uxr_serialize_OBJK_Subscriber_Binary>
 800e4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4fe:	9311      	str	r3, [sp, #68]	@ 0x44
 800e500:	ac0e      	add	r4, sp, #56	@ 0x38
 800e502:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e506:	9600      	str	r6, [sp, #0]
 800e508:	9401      	str	r4, [sp, #4]
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	4628      	mov	r0, r5
 800e50e:	f7ff ff0f 	bl	800e330 <uxr_common_create_entity>
 800e512:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800e516:	bd70      	pop	{r4, r5, r6, pc}

0800e518 <uxr_buffer_create_datawriter_bin>:
 800e518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e51c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e520:	ac1d      	add	r4, sp, #116	@ 0x74
 800e522:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e526:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800e52a:	9105      	str	r1, [sp, #20]
 800e52c:	4606      	mov	r6, r0
 800e52e:	a9a1      	add	r1, sp, #644	@ 0x284
 800e530:	4618      	mov	r0, r3
 800e532:	2305      	movs	r3, #5
 800e534:	7123      	strb	r3, [r4, #4]
 800e536:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800e53a:	2703      	movs	r7, #3
 800e53c:	f000 f8fc 	bl	800e738 <uxr_object_id_to_raw>
 800e540:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800e542:	7227      	strb	r7, [r4, #8]
 800e544:	a90e      	add	r1, sp, #56	@ 0x38
 800e546:	f000 f8f7 	bl	800e738 <uxr_object_id_to_raw>
 800e54a:	2300      	movs	r3, #0
 800e54c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e550:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800e554:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e558:	3d00      	subs	r5, #0
 800e55a:	bf18      	it	ne
 800e55c:	2501      	movne	r5, #1
 800e55e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e562:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e566:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e56a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e56e:	2301      	movs	r3, #1
 800e570:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e574:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e578:	bb8a      	cbnz	r2, 800e5de <uxr_buffer_create_datawriter_bin+0xc6>
 800e57a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e57e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e582:	f04f 0c13 	mov.w	ip, #19
 800e586:	250b      	movs	r5, #11
 800e588:	2221      	movs	r2, #33	@ 0x21
 800e58a:	2111      	movs	r1, #17
 800e58c:	2009      	movs	r0, #9
 800e58e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800e592:	b923      	cbnz	r3, 800e59e <uxr_buffer_create_datawriter_bin+0x86>
 800e594:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e598:	4672      	mov	r2, lr
 800e59a:	4661      	mov	r1, ip
 800e59c:	4628      	mov	r0, r5
 800e59e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d025      	beq.n	800e5f2 <uxr_buffer_create_datawriter_bin+0xda>
 800e5a6:	2b03      	cmp	r3, #3
 800e5a8:	d029      	beq.n	800e5fe <uxr_buffer_create_datawriter_bin+0xe6>
 800e5aa:	b32b      	cbz	r3, 800e5f8 <uxr_buffer_create_datawriter_bin+0xe0>
 800e5ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5b0:	a921      	add	r1, sp, #132	@ 0x84
 800e5b2:	a806      	add	r0, sp, #24
 800e5b4:	f7fd f9bc 	bl	800b930 <ucdr_init_buffer>
 800e5b8:	a90e      	add	r1, sp, #56	@ 0x38
 800e5ba:	a806      	add	r0, sp, #24
 800e5bc:	f002 f8f8 	bl	80107b0 <uxr_serialize_OBJK_DataWriter_Binary>
 800e5c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5c2:	f8cd 8000 	str.w	r8, [sp]
 800e5c6:	9401      	str	r4, [sp, #4]
 800e5c8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e5cc:	60e3      	str	r3, [r4, #12]
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	f7ff fead 	bl	800e330 <uxr_common_create_entity>
 800e5d6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5de:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e5e2:	f04f 0c12 	mov.w	ip, #18
 800e5e6:	250a      	movs	r5, #10
 800e5e8:	2220      	movs	r2, #32
 800e5ea:	2110      	movs	r1, #16
 800e5ec:	2008      	movs	r0, #8
 800e5ee:	2702      	movs	r7, #2
 800e5f0:	e7cd      	b.n	800e58e <uxr_buffer_create_datawriter_bin+0x76>
 800e5f2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e5f6:	e7d9      	b.n	800e5ac <uxr_buffer_create_datawriter_bin+0x94>
 800e5f8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e5fc:	e7d6      	b.n	800e5ac <uxr_buffer_create_datawriter_bin+0x94>
 800e5fe:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e602:	e7d3      	b.n	800e5ac <uxr_buffer_create_datawriter_bin+0x94>

0800e604 <uxr_buffer_create_datareader_bin>:
 800e604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e608:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e60c:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e60e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e612:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800e616:	9105      	str	r1, [sp, #20]
 800e618:	4606      	mov	r6, r0
 800e61a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800e61c:	4618      	mov	r0, r3
 800e61e:	2306      	movs	r3, #6
 800e620:	7123      	strb	r3, [r4, #4]
 800e622:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800e626:	2703      	movs	r7, #3
 800e628:	f000 f886 	bl	800e738 <uxr_object_id_to_raw>
 800e62c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800e62e:	7227      	strb	r7, [r4, #8]
 800e630:	a90e      	add	r1, sp, #56	@ 0x38
 800e632:	f000 f881 	bl	800e738 <uxr_object_id_to_raw>
 800e636:	2300      	movs	r3, #0
 800e638:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e63c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800e640:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800e644:	3d00      	subs	r5, #0
 800e646:	bf18      	it	ne
 800e648:	2501      	movne	r5, #1
 800e64a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e64e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e652:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e656:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e65a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e65e:	2301      	movs	r3, #1
 800e660:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e664:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e668:	bb8a      	cbnz	r2, 800e6ce <uxr_buffer_create_datareader_bin+0xca>
 800e66a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e66e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e672:	f04f 0c13 	mov.w	ip, #19
 800e676:	250b      	movs	r5, #11
 800e678:	2221      	movs	r2, #33	@ 0x21
 800e67a:	2111      	movs	r1, #17
 800e67c:	2009      	movs	r0, #9
 800e67e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800e682:	b923      	cbnz	r3, 800e68e <uxr_buffer_create_datareader_bin+0x8a>
 800e684:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e688:	4672      	mov	r2, lr
 800e68a:	4661      	mov	r1, ip
 800e68c:	4628      	mov	r0, r5
 800e68e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800e692:	2b01      	cmp	r3, #1
 800e694:	d025      	beq.n	800e6e2 <uxr_buffer_create_datareader_bin+0xde>
 800e696:	2b03      	cmp	r3, #3
 800e698:	d029      	beq.n	800e6ee <uxr_buffer_create_datareader_bin+0xea>
 800e69a:	b32b      	cbz	r3, 800e6e8 <uxr_buffer_create_datareader_bin+0xe4>
 800e69c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e6a0:	a923      	add	r1, sp, #140	@ 0x8c
 800e6a2:	a806      	add	r0, sp, #24
 800e6a4:	f7fd f944 	bl	800b930 <ucdr_init_buffer>
 800e6a8:	a90e      	add	r1, sp, #56	@ 0x38
 800e6aa:	a806      	add	r0, sp, #24
 800e6ac:	f002 f844 	bl	8010738 <uxr_serialize_OBJK_DataReader_Binary>
 800e6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6b2:	f8cd 8000 	str.w	r8, [sp]
 800e6b6:	9401      	str	r4, [sp, #4]
 800e6b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e6bc:	60e3      	str	r3, [r4, #12]
 800e6be:	4630      	mov	r0, r6
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	f7ff fe35 	bl	800e330 <uxr_common_create_entity>
 800e6c6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ce:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e6d2:	f04f 0c12 	mov.w	ip, #18
 800e6d6:	250a      	movs	r5, #10
 800e6d8:	2220      	movs	r2, #32
 800e6da:	2110      	movs	r1, #16
 800e6dc:	2008      	movs	r0, #8
 800e6de:	2702      	movs	r7, #2
 800e6e0:	e7cd      	b.n	800e67e <uxr_buffer_create_datareader_bin+0x7a>
 800e6e2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e6e6:	e7d9      	b.n	800e69c <uxr_buffer_create_datareader_bin+0x98>
 800e6e8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e6ec:	e7d6      	b.n	800e69c <uxr_buffer_create_datareader_bin+0x98>
 800e6ee:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e6f2:	e7d3      	b.n	800e69c <uxr_buffer_create_datareader_bin+0x98>

0800e6f4 <uxr_object_id>:
 800e6f4:	b082      	sub	sp, #8
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	f88d 1006 	strb.w	r1, [sp, #6]
 800e6fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e700:	f360 030f 	bfi	r3, r0, #0, #16
 800e704:	f362 431f 	bfi	r3, r2, #16, #16
 800e708:	4618      	mov	r0, r3
 800e70a:	b002      	add	sp, #8
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop

0800e710 <uxr_object_id_from_raw>:
 800e710:	7843      	ldrb	r3, [r0, #1]
 800e712:	7801      	ldrb	r1, [r0, #0]
 800e714:	b082      	sub	sp, #8
 800e716:	f003 020f 	and.w	r2, r3, #15
 800e71a:	f88d 2006 	strb.w	r2, [sp, #6]
 800e71e:	091b      	lsrs	r3, r3, #4
 800e720:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e724:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e728:	2000      	movs	r0, #0
 800e72a:	f363 000f 	bfi	r0, r3, #0, #16
 800e72e:	f362 401f 	bfi	r0, r2, #16, #16
 800e732:	b002      	add	sp, #8
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop

0800e738 <uxr_object_id_to_raw>:
 800e738:	4602      	mov	r2, r0
 800e73a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e73e:	b082      	sub	sp, #8
 800e740:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e744:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e748:	f881 c000 	strb.w	ip, [r1]
 800e74c:	7048      	strb	r0, [r1, #1]
 800e74e:	b002      	add	sp, #8
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop

0800e754 <on_get_fragmentation_info>:
 800e754:	b500      	push	{lr}
 800e756:	b08b      	sub	sp, #44	@ 0x2c
 800e758:	4601      	mov	r1, r0
 800e75a:	2204      	movs	r2, #4
 800e75c:	a802      	add	r0, sp, #8
 800e75e:	f7fd f8e7 	bl	800b930 <ucdr_init_buffer>
 800e762:	f10d 0305 	add.w	r3, sp, #5
 800e766:	f10d 0206 	add.w	r2, sp, #6
 800e76a:	a901      	add	r1, sp, #4
 800e76c:	a802      	add	r0, sp, #8
 800e76e:	f001 f9d5 	bl	800fb1c <uxr_read_submessage_header>
 800e772:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e776:	2b0d      	cmp	r3, #13
 800e778:	d003      	beq.n	800e782 <on_get_fragmentation_info+0x2e>
 800e77a:	2000      	movs	r0, #0
 800e77c:	b00b      	add	sp, #44	@ 0x2c
 800e77e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e782:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e786:	f013 0f02 	tst.w	r3, #2
 800e78a:	bf14      	ite	ne
 800e78c:	2002      	movne	r0, #2
 800e78e:	2001      	moveq	r0, #1
 800e790:	b00b      	add	sp, #44	@ 0x2c
 800e792:	f85d fb04 	ldr.w	pc, [sp], #4
 800e796:	bf00      	nop

0800e798 <read_submessage_get_info>:
 800e798:	b570      	push	{r4, r5, r6, lr}
 800e79a:	2500      	movs	r5, #0
 800e79c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800e7a6:	460e      	mov	r6, r1
 800e7a8:	a810      	add	r0, sp, #64	@ 0x40
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e7b0:	f009 ff16 	bl	80185e0 <memset>
 800e7b4:	a903      	add	r1, sp, #12
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f002 fa70 	bl	8010c9c <uxr_deserialize_GET_INFO_Payload>
 800e7bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e7c0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f001 f81f 	bl	800f808 <uxr_session_header_offset>
 800e7ca:	462b      	mov	r3, r5
 800e7cc:	9000      	str	r0, [sp, #0]
 800e7ce:	220c      	movs	r2, #12
 800e7d0:	a905      	add	r1, sp, #20
 800e7d2:	a808      	add	r0, sp, #32
 800e7d4:	f7fd f89a 	bl	800b90c <ucdr_init_buffer_origin_offset>
 800e7d8:	a910      	add	r1, sp, #64	@ 0x40
 800e7da:	a808      	add	r0, sp, #32
 800e7dc:	f002 fad0 	bl	8010d80 <uxr_serialize_INFO_Payload>
 800e7e0:	9b08      	ldr	r3, [sp, #32]
 800e7e2:	462a      	mov	r2, r5
 800e7e4:	4629      	mov	r1, r5
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	f000 ffb8 	bl	800f75c <uxr_stamp_session_header>
 800e7ec:	a808      	add	r0, sp, #32
 800e7ee:	f7fd f8cb 	bl	800b988 <ucdr_buffer_length>
 800e7f2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	a905      	add	r1, sp, #20
 800e7f8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e7fc:	47a0      	blx	r4
 800e7fe:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800e802:	bd70      	pop	{r4, r5, r6, pc}

0800e804 <write_submessage_acknack.isra.0>:
 800e804:	b570      	push	{r4, r5, r6, lr}
 800e806:	b092      	sub	sp, #72	@ 0x48
 800e808:	4605      	mov	r5, r0
 800e80a:	460e      	mov	r6, r1
 800e80c:	4614      	mov	r4, r2
 800e80e:	f000 fffb 	bl	800f808 <uxr_session_header_offset>
 800e812:	a905      	add	r1, sp, #20
 800e814:	9000      	str	r0, [sp, #0]
 800e816:	2300      	movs	r3, #0
 800e818:	a80a      	add	r0, sp, #40	@ 0x28
 800e81a:	2211      	movs	r2, #17
 800e81c:	f7fd f876 	bl	800b90c <ucdr_init_buffer_origin_offset>
 800e820:	2218      	movs	r2, #24
 800e822:	fb02 5404 	mla	r4, r2, r4, r5
 800e826:	2300      	movs	r3, #0
 800e828:	2205      	movs	r2, #5
 800e82a:	3450      	adds	r4, #80	@ 0x50
 800e82c:	210a      	movs	r1, #10
 800e82e:	a80a      	add	r0, sp, #40	@ 0x28
 800e830:	f001 f95a 	bl	800fae8 <uxr_buffer_submessage_header>
 800e834:	a903      	add	r1, sp, #12
 800e836:	4620      	mov	r0, r4
 800e838:	f007 fb50 	bl	8015edc <uxr_compute_acknack>
 800e83c:	ba40      	rev16	r0, r0
 800e83e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e842:	a903      	add	r1, sp, #12
 800e844:	a80a      	add	r0, sp, #40	@ 0x28
 800e846:	f88d 6010 	strb.w	r6, [sp, #16]
 800e84a:	f002 fb09 	bl	8010e60 <uxr_serialize_ACKNACK_Payload>
 800e84e:	2200      	movs	r2, #0
 800e850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e852:	4611      	mov	r1, r2
 800e854:	4628      	mov	r0, r5
 800e856:	f000 ff81 	bl	800f75c <uxr_stamp_session_header>
 800e85a:	a80a      	add	r0, sp, #40	@ 0x28
 800e85c:	f7fd f894 	bl	800b988 <ucdr_buffer_length>
 800e860:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e862:	4602      	mov	r2, r0
 800e864:	a905      	add	r1, sp, #20
 800e866:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e86a:	47a0      	blx	r4
 800e86c:	b012      	add	sp, #72	@ 0x48
 800e86e:	bd70      	pop	{r4, r5, r6, pc}

0800e870 <uxr_init_session>:
 800e870:	b510      	push	{r4, lr}
 800e872:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e8a8 <uxr_init_session+0x38>
 800e876:	2300      	movs	r3, #0
 800e878:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800e87c:	4604      	mov	r4, r0
 800e87e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800e882:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800e886:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800e88a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800e88e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800e892:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800e896:	2181      	movs	r1, #129	@ 0x81
 800e898:	f000 fecc 	bl	800f634 <uxr_init_session_info>
 800e89c:	f104 0008 	add.w	r0, r4, #8
 800e8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8a4:	f001 b83c 	b.w	800f920 <uxr_init_stream_storage>
	...

0800e8b0 <uxr_set_status_callback>:
 800e8b0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop

0800e8b8 <uxr_set_topic_callback>:
 800e8b8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop

0800e8c0 <uxr_set_request_callback>:
 800e8c0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop

0800e8c8 <uxr_set_reply_callback>:
 800e8c8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop

0800e8d0 <uxr_create_output_best_effort_stream>:
 800e8d0:	b510      	push	{r4, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	e9cd 2100 	strd	r2, r1, [sp]
 800e8d8:	4604      	mov	r4, r0
 800e8da:	f000 ff95 	bl	800f808 <uxr_session_header_offset>
 800e8de:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	f104 0008 	add.w	r0, r4, #8
 800e8e8:	b004      	add	sp, #16
 800e8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8ee:	f001 b861 	b.w	800f9b4 <uxr_add_output_best_effort_buffer>
 800e8f2:	bf00      	nop

0800e8f4 <uxr_create_output_reliable_stream>:
 800e8f4:	b510      	push	{r4, lr}
 800e8f6:	b088      	sub	sp, #32
 800e8f8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	9303      	str	r3, [sp, #12]
 800e900:	f000 ff82 	bl	800f808 <uxr_session_header_offset>
 800e904:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e908:	9000      	str	r0, [sp, #0]
 800e90a:	9905      	ldr	r1, [sp, #20]
 800e90c:	f104 0008 	add.w	r0, r4, #8
 800e910:	f001 f864 	bl	800f9dc <uxr_add_output_reliable_buffer>
 800e914:	2200      	movs	r2, #0
 800e916:	b2c3      	uxtb	r3, r0
 800e918:	f363 0207 	bfi	r2, r3, #0, #8
 800e91c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e920:	f363 220f 	bfi	r2, r3, #8, #8
 800e924:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e928:	f363 4217 	bfi	r2, r3, #16, #8
 800e92c:	0e03      	lsrs	r3, r0, #24
 800e92e:	f363 621f 	bfi	r2, r3, #24, #8
 800e932:	4610      	mov	r0, r2
 800e934:	b008      	add	sp, #32
 800e936:	bd10      	pop	{r4, pc}

0800e938 <uxr_create_input_best_effort_stream>:
 800e938:	b082      	sub	sp, #8
 800e93a:	3008      	adds	r0, #8
 800e93c:	b002      	add	sp, #8
 800e93e:	f001 b867 	b.w	800fa10 <uxr_add_input_best_effort_buffer>
 800e942:	bf00      	nop

0800e944 <uxr_create_input_reliable_stream>:
 800e944:	b510      	push	{r4, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	4c0b      	ldr	r4, [pc, #44]	@ (800e978 <uxr_create_input_reliable_stream+0x34>)
 800e94a:	9400      	str	r4, [sp, #0]
 800e94c:	3008      	adds	r0, #8
 800e94e:	f001 f875 	bl	800fa3c <uxr_add_input_reliable_buffer>
 800e952:	2200      	movs	r2, #0
 800e954:	b2c3      	uxtb	r3, r0
 800e956:	f363 0207 	bfi	r2, r3, #0, #8
 800e95a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e95e:	f363 220f 	bfi	r2, r3, #8, #8
 800e962:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e966:	f363 4217 	bfi	r2, r3, #16, #8
 800e96a:	0e03      	lsrs	r3, r0, #24
 800e96c:	f363 621f 	bfi	r2, r3, #24, #8
 800e970:	4610      	mov	r0, r2
 800e972:	b004      	add	sp, #16
 800e974:	bd10      	pop	{r4, pc}
 800e976:	bf00      	nop
 800e978:	0800e755 	.word	0x0800e755

0800e97c <uxr_epoch_nanos>:
 800e97c:	b510      	push	{r4, lr}
 800e97e:	4604      	mov	r4, r0
 800e980:	f001 f912 	bl	800fba8 <uxr_nanos>
 800e984:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800e988:	1ac0      	subs	r0, r0, r3
 800e98a:	eb61 0102 	sbc.w	r1, r1, r2
 800e98e:	bd10      	pop	{r4, pc}

0800e990 <uxr_flash_output_streams>:
 800e990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e994:	7e03      	ldrb	r3, [r0, #24]
 800e996:	b084      	sub	sp, #16
 800e998:	4604      	mov	r4, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d035      	beq.n	800ea0a <uxr_flash_output_streams+0x7a>
 800e99e:	f04f 0900 	mov.w	r9, #0
 800e9a2:	4648      	mov	r0, r9
 800e9a4:	f10d 0802 	add.w	r8, sp, #2
 800e9a8:	af03      	add	r7, sp, #12
 800e9aa:	ae02      	add	r6, sp, #8
 800e9ac:	e006      	b.n	800e9bc <uxr_flash_output_streams+0x2c>
 800e9ae:	7e23      	ldrb	r3, [r4, #24]
 800e9b0:	f109 0901 	add.w	r9, r9, #1
 800e9b4:	fa5f f089 	uxtb.w	r0, r9
 800e9b8:	4283      	cmp	r3, r0
 800e9ba:	d926      	bls.n	800ea0a <uxr_flash_output_streams+0x7a>
 800e9bc:	2201      	movs	r2, #1
 800e9be:	4611      	mov	r1, r2
 800e9c0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800e9c4:	f000 ff58 	bl	800f878 <uxr_stream_id>
 800e9c8:	3508      	adds	r5, #8
 800e9ca:	4684      	mov	ip, r0
 800e9cc:	4643      	mov	r3, r8
 800e9ce:	463a      	mov	r2, r7
 800e9d0:	4631      	mov	r1, r6
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	f8cd c004 	str.w	ip, [sp, #4]
 800e9d8:	f007 fb06 	bl	8015fe8 <uxr_prepare_best_effort_buffer_to_send>
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d0e6      	beq.n	800e9ae <uxr_flash_output_streams+0x1e>
 800e9e0:	9b02      	ldr	r3, [sp, #8]
 800e9e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e9e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f000 feb6 	bl	800f75c <uxr_stamp_session_header>
 800e9f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e9f2:	9a03      	ldr	r2, [sp, #12]
 800e9f4:	685d      	ldr	r5, [r3, #4]
 800e9f6:	6818      	ldr	r0, [r3, #0]
 800e9f8:	9902      	ldr	r1, [sp, #8]
 800e9fa:	47a8      	blx	r5
 800e9fc:	f109 0901 	add.w	r9, r9, #1
 800ea00:	7e23      	ldrb	r3, [r4, #24]
 800ea02:	fa5f f089 	uxtb.w	r0, r9
 800ea06:	4283      	cmp	r3, r0
 800ea08:	d8d8      	bhi.n	800e9bc <uxr_flash_output_streams+0x2c>
 800ea0a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ea0e:	b38b      	cbz	r3, 800ea74 <uxr_flash_output_streams+0xe4>
 800ea10:	f04f 0900 	mov.w	r9, #0
 800ea14:	f10d 0802 	add.w	r8, sp, #2
 800ea18:	af03      	add	r7, sp, #12
 800ea1a:	ae02      	add	r6, sp, #8
 800ea1c:	4648      	mov	r0, r9
 800ea1e:	2201      	movs	r2, #1
 800ea20:	2102      	movs	r1, #2
 800ea22:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ea26:	f000 ff27 	bl	800f878 <uxr_stream_id>
 800ea2a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ea2e:	3520      	adds	r5, #32
 800ea30:	9001      	str	r0, [sp, #4]
 800ea32:	e00d      	b.n	800ea50 <uxr_flash_output_streams+0xc0>
 800ea34:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ea38:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ea3c:	9b02      	ldr	r3, [sp, #8]
 800ea3e:	f000 fe8d 	bl	800f75c <uxr_stamp_session_header>
 800ea42:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ea44:	9a03      	ldr	r2, [sp, #12]
 800ea46:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ea4a:	9902      	ldr	r1, [sp, #8]
 800ea4c:	6818      	ldr	r0, [r3, #0]
 800ea4e:	47d0      	blx	sl
 800ea50:	4643      	mov	r3, r8
 800ea52:	463a      	mov	r2, r7
 800ea54:	4631      	mov	r1, r6
 800ea56:	4628      	mov	r0, r5
 800ea58:	f007 fce4 	bl	8016424 <uxr_prepare_next_reliable_buffer_to_send>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	4620      	mov	r0, r4
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d1e7      	bne.n	800ea34 <uxr_flash_output_streams+0xa4>
 800ea64:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ea68:	f109 0901 	add.w	r9, r9, #1
 800ea6c:	fa5f f089 	uxtb.w	r0, r9
 800ea70:	4283      	cmp	r3, r0
 800ea72:	d8d4      	bhi.n	800ea1e <uxr_flash_output_streams+0x8e>
 800ea74:	b004      	add	sp, #16
 800ea76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea7a:	bf00      	nop

0800ea7c <read_submessage_info>:
 800ea7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea80:	460d      	mov	r5, r1
 800ea82:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ea86:	4669      	mov	r1, sp
 800ea88:	4607      	mov	r7, r0
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	f002 f814 	bl	8010ab8 <uxr_deserialize_BaseObjectReply>
 800ea90:	a902      	add	r1, sp, #8
 800ea92:	4604      	mov	r4, r0
 800ea94:	4628      	mov	r0, r5
 800ea96:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ea9a:	f7fb fc4f 	bl	800a33c <ucdr_deserialize_bool>
 800ea9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800eaa2:	4004      	ands	r4, r0
 800eaa4:	b2e4      	uxtb	r4, r4
 800eaa6:	b95b      	cbnz	r3, 800eac0 <read_submessage_info+0x44>
 800eaa8:	a987      	add	r1, sp, #540	@ 0x21c
 800eaaa:	4628      	mov	r0, r5
 800eaac:	f7fb fc46 	bl	800a33c <ucdr_deserialize_bool>
 800eab0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800eab4:	4606      	mov	r6, r0
 800eab6:	b94b      	cbnz	r3, 800eacc <read_submessage_info+0x50>
 800eab8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800eabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac0:	a903      	add	r1, sp, #12
 800eac2:	4628      	mov	r0, r5
 800eac4:	f001 fea0 	bl	8010808 <uxr_deserialize_ObjectVariant>
 800eac8:	4004      	ands	r4, r0
 800eaca:	e7ed      	b.n	800eaa8 <read_submessage_info+0x2c>
 800eacc:	a988      	add	r1, sp, #544	@ 0x220
 800eace:	4628      	mov	r0, r5
 800ead0:	f7fb fc62 	bl	800a398 <ucdr_deserialize_uint8_t>
 800ead4:	4234      	tst	r4, r6
 800ead6:	d0ef      	beq.n	800eab8 <read_submessage_info+0x3c>
 800ead8:	2800      	cmp	r0, #0
 800eada:	d0ed      	beq.n	800eab8 <read_submessage_info+0x3c>
 800eadc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800eae0:	2b0d      	cmp	r3, #13
 800eae2:	d1e9      	bne.n	800eab8 <read_submessage_info+0x3c>
 800eae4:	a98a      	add	r1, sp, #552	@ 0x228
 800eae6:	4628      	mov	r0, r5
 800eae8:	f7fc f9fc 	bl	800aee4 <ucdr_deserialize_int16_t>
 800eaec:	b140      	cbz	r0, 800eb00 <read_submessage_info+0x84>
 800eaee:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	dd07      	ble.n	800eb06 <read_submessage_info+0x8a>
 800eaf6:	f1b8 0f00 	cmp.w	r8, #0
 800eafa:	bf14      	ite	ne
 800eafc:	2001      	movne	r0, #1
 800eafe:	2002      	moveq	r0, #2
 800eb00:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800eb04:	e7d8      	b.n	800eab8 <read_submessage_info+0x3c>
 800eb06:	2000      	movs	r0, #0
 800eb08:	e7fa      	b.n	800eb00 <read_submessage_info+0x84>
 800eb0a:	bf00      	nop

0800eb0c <read_submessage_list>:
 800eb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb10:	b097      	sub	sp, #92	@ 0x5c
 800eb12:	4ec1      	ldr	r6, [pc, #772]	@ (800ee18 <read_submessage_list+0x30c>)
 800eb14:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb16:	4604      	mov	r4, r0
 800eb18:	460d      	mov	r5, r1
 800eb1a:	f04f 0801 	mov.w	r8, #1
 800eb1e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800eb22:	aa0c      	add	r2, sp, #48	@ 0x30
 800eb24:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800eb28:	4628      	mov	r0, r5
 800eb2a:	f000 fff7 	bl	800fb1c <uxr_read_submessage_header>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	f000 813e 	beq.w	800edb0 <read_submessage_list+0x2a4>
 800eb34:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800eb38:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800eb3c:	3b02      	subs	r3, #2
 800eb3e:	2b0d      	cmp	r3, #13
 800eb40:	d8ed      	bhi.n	800eb1e <read_submessage_list+0x12>
 800eb42:	a101      	add	r1, pc, #4	@ (adr r1, 800eb48 <read_submessage_list+0x3c>)
 800eb44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb48:	0800eda7 	.word	0x0800eda7
 800eb4c:	0800eb1f 	.word	0x0800eb1f
 800eb50:	0800ed97 	.word	0x0800ed97
 800eb54:	0800ed35 	.word	0x0800ed35
 800eb58:	0800ed2b 	.word	0x0800ed2b
 800eb5c:	0800eb1f 	.word	0x0800eb1f
 800eb60:	0800eb1f 	.word	0x0800eb1f
 800eb64:	0800ec8b 	.word	0x0800ec8b
 800eb68:	0800ec1b 	.word	0x0800ec1b
 800eb6c:	0800ebdb 	.word	0x0800ebdb
 800eb70:	0800eb1f 	.word	0x0800eb1f
 800eb74:	0800eb1f 	.word	0x0800eb1f
 800eb78:	0800eb1f 	.word	0x0800eb1f
 800eb7c:	0800eb81 	.word	0x0800eb81
 800eb80:	a910      	add	r1, sp, #64	@ 0x40
 800eb82:	4628      	mov	r0, r5
 800eb84:	f002 f9bc 	bl	8010f00 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800eb88:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800eb8c:	f1b9 0f00 	cmp.w	r9, #0
 800eb90:	f000 8116 	beq.w	800edc0 <read_submessage_list+0x2b4>
 800eb94:	f001 f808 	bl	800fba8 <uxr_nanos>
 800eb98:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800eba0:	2100      	movs	r1, #0
 800eba2:	468c      	mov	ip, r1
 800eba4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800eba8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ebac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ebae:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ebb0:	468c      	mov	ip, r1
 800ebb2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ebb6:	46e2      	mov	sl, ip
 800ebb8:	46bc      	mov	ip, r7
 800ebba:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800ebbe:	fbc0 7106 	smlal	r7, r1, r0, r6
 800ebc2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800ebc6:	e9cd 7100 	strd	r7, r1, [sp]
 800ebca:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800ebce:	9106      	str	r1, [sp, #24]
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	47c8      	blx	r9
 800ebd4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800ebd8:	e7a1      	b.n	800eb1e <read_submessage_list+0x12>
 800ebda:	a910      	add	r1, sp, #64	@ 0x40
 800ebdc:	4628      	mov	r0, r5
 800ebde:	f002 f97d 	bl	8010edc <uxr_deserialize_HEARTBEAT_Payload>
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ebe8:	f000 fe70 	bl	800f8cc <uxr_stream_id_from_raw>
 800ebec:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ebf0:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f104 0008 	add.w	r0, r4, #8
 800ebf8:	f000 ff56 	bl	800faa8 <uxr_get_input_reliable_stream>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	d08e      	beq.n	800eb1e <read_submessage_list+0x12>
 800ec00:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800ec04:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800ec08:	f007 f95c 	bl	8015ec4 <uxr_process_heartbeat>
 800ec0c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800ec10:	463a      	mov	r2, r7
 800ec12:	4620      	mov	r0, r4
 800ec14:	f7ff fdf6 	bl	800e804 <write_submessage_acknack.isra.0>
 800ec18:	e781      	b.n	800eb1e <read_submessage_list+0x12>
 800ec1a:	a910      	add	r1, sp, #64	@ 0x40
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	f002 f935 	bl	8010e8c <uxr_deserialize_ACKNACK_Payload>
 800ec22:	2100      	movs	r1, #0
 800ec24:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ec28:	f000 fe50 	bl	800f8cc <uxr_stream_id_from_raw>
 800ec2c:	900d      	str	r0, [sp, #52]	@ 0x34
 800ec2e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ec32:	f104 0008 	add.w	r0, r4, #8
 800ec36:	f000 ff23 	bl	800fa80 <uxr_get_output_reliable_stream>
 800ec3a:	4607      	mov	r7, r0
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	f43f af6e 	beq.w	800eb1e <read_submessage_list+0x12>
 800ec42:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800ec46:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800ec4a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ec4e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ec52:	b289      	uxth	r1, r1
 800ec54:	f007 fc90 	bl	8016578 <uxr_process_acknack>
 800ec58:	4638      	mov	r0, r7
 800ec5a:	f007 fc4d 	bl	80164f8 <uxr_begin_output_nack_buffer_it>
 800ec5e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ec62:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ec66:	e006      	b.n	800ec76 <read_submessage_list+0x16a>
 800ec68:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ec6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ec6c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ec70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ec72:	6818      	ldr	r0, [r3, #0]
 800ec74:	47c8      	blx	r9
 800ec76:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ec7a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ec7c:	4651      	mov	r1, sl
 800ec7e:	4638      	mov	r0, r7
 800ec80:	f007 fc3c 	bl	80164fc <uxr_next_reliable_nack_buffer_to_send>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d1ef      	bne.n	800ec68 <read_submessage_list+0x15c>
 800ec88:	e749      	b.n	800eb1e <read_submessage_list+0x12>
 800ec8a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800ec8e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800ec92:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ec96:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800ec9a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800ec9e:	4651      	mov	r1, sl
 800eca0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800eca4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800eca8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800ecac:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800ecb6:	f001 fe49 	bl	801094c <uxr_deserialize_BaseObjectRequest>
 800ecba:	4650      	mov	r0, sl
 800ecbc:	a90f      	add	r1, sp, #60	@ 0x3c
 800ecbe:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800ecc2:	f000 fdc7 	bl	800f854 <uxr_parse_base_object_request>
 800ecc6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800ecca:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eccc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800ecd0:	9110      	str	r1, [sp, #64]	@ 0x40
 800ecd2:	3f04      	subs	r7, #4
 800ecd4:	f009 090e 	and.w	r9, r9, #14
 800ecd8:	b2bf      	uxth	r7, r7
 800ecda:	f1bb 0f00 	cmp.w	fp, #0
 800ecde:	d006      	beq.n	800ecee <read_submessage_list+0x1e2>
 800ece0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	4652      	mov	r2, sl
 800ece8:	2300      	movs	r3, #0
 800ecea:	4620      	mov	r0, r4
 800ecec:	47d8      	blx	fp
 800ecee:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ecf0:	b16a      	cbz	r2, 800ed0e <read_submessage_list+0x202>
 800ecf2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ecf4:	2100      	movs	r1, #0
 800ecf6:	3802      	subs	r0, #2
 800ecf8:	e002      	b.n	800ed00 <read_submessage_list+0x1f4>
 800ecfa:	3101      	adds	r1, #1
 800ecfc:	4291      	cmp	r1, r2
 800ecfe:	d006      	beq.n	800ed0e <read_submessage_list+0x202>
 800ed00:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ed04:	4553      	cmp	r3, sl
 800ed06:	d1f8      	bne.n	800ecfa <read_submessage_list+0x1ee>
 800ed08:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	545a      	strb	r2, [r3, r1]
 800ed0e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ed12:	9102      	str	r1, [sp, #8]
 800ed14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ed16:	9101      	str	r1, [sp, #4]
 800ed18:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ed1a:	9100      	str	r1, [sp, #0]
 800ed1c:	464b      	mov	r3, r9
 800ed1e:	463a      	mov	r2, r7
 800ed20:	4629      	mov	r1, r5
 800ed22:	4620      	mov	r0, r4
 800ed24:	f007 fce6 	bl	80166f4 <read_submessage_format>
 800ed28:	e6f9      	b.n	800eb1e <read_submessage_list+0x12>
 800ed2a:	4629      	mov	r1, r5
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	f7ff fea5 	bl	800ea7c <read_submessage_info>
 800ed32:	e6f4      	b.n	800eb1e <read_submessage_list+0x12>
 800ed34:	2a00      	cmp	r2, #0
 800ed36:	d03e      	beq.n	800edb6 <read_submessage_list+0x2aa>
 800ed38:	a910      	add	r1, sp, #64	@ 0x40
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	f002 f802 	bl	8010d44 <uxr_deserialize_STATUS_Payload>
 800ed40:	a90e      	add	r1, sp, #56	@ 0x38
 800ed42:	aa0d      	add	r2, sp, #52	@ 0x34
 800ed44:	a810      	add	r0, sp, #64	@ 0x40
 800ed46:	f000 fd85 	bl	800f854 <uxr_parse_base_object_request>
 800ed4a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800ed4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ed50:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800ed54:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800ed58:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ed5a:	f1ba 0f00 	cmp.w	sl, #0
 800ed5e:	d006      	beq.n	800ed6e <read_submessage_list+0x262>
 800ed60:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	463a      	mov	r2, r7
 800ed68:	464b      	mov	r3, r9
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	47d0      	blx	sl
 800ed6e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ed70:	2a00      	cmp	r2, #0
 800ed72:	f43f aed4 	beq.w	800eb1e <read_submessage_list+0x12>
 800ed76:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ed78:	2100      	movs	r1, #0
 800ed7a:	3802      	subs	r0, #2
 800ed7c:	e003      	b.n	800ed86 <read_submessage_list+0x27a>
 800ed7e:	3101      	adds	r1, #1
 800ed80:	4291      	cmp	r1, r2
 800ed82:	f43f aecc 	beq.w	800eb1e <read_submessage_list+0x12>
 800ed86:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ed8a:	42bb      	cmp	r3, r7
 800ed8c:	d1f7      	bne.n	800ed7e <read_submessage_list+0x272>
 800ed8e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ed90:	f803 9001 	strb.w	r9, [r3, r1]
 800ed94:	e6c3      	b.n	800eb1e <read_submessage_list+0x12>
 800ed96:	2a00      	cmp	r2, #0
 800ed98:	f47f aec1 	bne.w	800eb1e <read_submessage_list+0x12>
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f000 fc9e 	bl	800f6e0 <uxr_read_create_session_status>
 800eda4:	e6bb      	b.n	800eb1e <read_submessage_list+0x12>
 800eda6:	4629      	mov	r1, r5
 800eda8:	4620      	mov	r0, r4
 800edaa:	f7ff fcf5 	bl	800e798 <read_submessage_get_info>
 800edae:	e6b6      	b.n	800eb1e <read_submessage_list+0x12>
 800edb0:	b017      	add	sp, #92	@ 0x5c
 800edb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb6:	4629      	mov	r1, r5
 800edb8:	4620      	mov	r0, r4
 800edba:	f000 fc9d 	bl	800f6f8 <uxr_read_delete_session_status>
 800edbe:	e6ae      	b.n	800eb1e <read_submessage_list+0x12>
 800edc0:	f000 fef2 	bl	800fba8 <uxr_nanos>
 800edc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800edc6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800edc8:	464f      	mov	r7, r9
 800edca:	fbc3 2706 	smlal	r2, r7, r3, r6
 800edce:	1812      	adds	r2, r2, r0
 800edd0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edd2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800edd4:	eb47 0101 	adc.w	r1, r7, r1
 800edd8:	464f      	mov	r7, r9
 800edda:	fbc3 0706 	smlal	r0, r7, r3, r6
 800edde:	463b      	mov	r3, r7
 800ede0:	4684      	mov	ip, r0
 800ede2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800ede6:	fbc7 0906 	smlal	r0, r9, r7, r6
 800edea:	eb1c 0c00 	adds.w	ip, ip, r0
 800edee:	464f      	mov	r7, r9
 800edf0:	eb43 0307 	adc.w	r3, r3, r7
 800edf4:	ebb2 0c0c 	subs.w	ip, r2, ip
 800edf8:	eb61 0303 	sbc.w	r3, r1, r3
 800edfc:	0fda      	lsrs	r2, r3, #31
 800edfe:	eb12 020c 	adds.w	r2, r2, ip
 800ee02:	f143 0300 	adc.w	r3, r3, #0
 800ee06:	0852      	lsrs	r2, r2, #1
 800ee08:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800ee0c:	105b      	asrs	r3, r3, #1
 800ee0e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800ee12:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800ee16:	e6dd      	b.n	800ebd4 <read_submessage_list+0xc8>
 800ee18:	3b9aca00 	.word	0x3b9aca00

0800ee1c <listen_message_reliably>:
 800ee1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	1e0b      	subs	r3, r1, #0
 800ee22:	b09d      	sub	sp, #116	@ 0x74
 800ee24:	bfb8      	it	lt
 800ee26:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800ee2a:	4680      	mov	r8, r0
 800ee2c:	9305      	str	r3, [sp, #20]
 800ee2e:	f000 fea1 	bl	800fb74 <uxr_millis>
 800ee32:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800ee36:	4681      	mov	r9, r0
 800ee38:	2a00      	cmp	r2, #0
 800ee3a:	f000 80a1 	beq.w	800ef80 <listen_message_reliably+0x164>
 800ee3e:	2600      	movs	r6, #0
 800ee40:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ee44:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ee48:	9303      	str	r3, [sp, #12]
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	460f      	mov	r7, r1
 800ee4e:	e00f      	b.n	800ee70 <listen_message_reliably+0x54>
 800ee50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ee54:	9903      	ldr	r1, [sp, #12]
 800ee56:	455a      	cmp	r2, fp
 800ee58:	f106 0601 	add.w	r6, r6, #1
 800ee5c:	eb73 0101 	sbcs.w	r1, r3, r1
 800ee60:	b2f0      	uxtb	r0, r6
 800ee62:	da01      	bge.n	800ee68 <listen_message_reliably+0x4c>
 800ee64:	4693      	mov	fp, r2
 800ee66:	9303      	str	r3, [sp, #12]
 800ee68:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800ee6c:	4283      	cmp	r3, r0
 800ee6e:	d960      	bls.n	800ef32 <listen_message_reliably+0x116>
 800ee70:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800ee74:	2102      	movs	r1, #2
 800ee76:	2201      	movs	r2, #1
 800ee78:	f000 fcfe 	bl	800f878 <uxr_stream_id>
 800ee7c:	00e4      	lsls	r4, r4, #3
 800ee7e:	f104 0520 	add.w	r5, r4, #32
 800ee82:	4445      	add	r5, r8
 800ee84:	4601      	mov	r1, r0
 800ee86:	463b      	mov	r3, r7
 800ee88:	464a      	mov	r2, r9
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ee8e:	f007 fb09 	bl	80164a4 <uxr_update_output_stream_heartbeat_timestamp>
 800ee92:	eb08 0304 	add.w	r3, r8, r4
 800ee96:	2800      	cmp	r0, #0
 800ee98:	d0da      	beq.n	800ee50 <listen_message_reliably+0x34>
 800ee9a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ee9e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800eea2:	9304      	str	r3, [sp, #16]
 800eea4:	4640      	mov	r0, r8
 800eea6:	f000 fcaf 	bl	800f808 <uxr_session_header_offset>
 800eeaa:	3501      	adds	r5, #1
 800eeac:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800eeb0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800eeb4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800eeb8:	2300      	movs	r3, #0
 800eeba:	2211      	movs	r2, #17
 800eebc:	9000      	str	r0, [sp, #0]
 800eebe:	a90c      	add	r1, sp, #48	@ 0x30
 800eec0:	4650      	mov	r0, sl
 800eec2:	f7fc fd23 	bl	800b90c <ucdr_init_buffer_origin_offset>
 800eec6:	2300      	movs	r3, #0
 800eec8:	2205      	movs	r2, #5
 800eeca:	210b      	movs	r1, #11
 800eecc:	4650      	mov	r0, sl
 800eece:	f000 fe0b 	bl	800fae8 <uxr_buffer_submessage_header>
 800eed2:	8968      	ldrh	r0, [r5, #10]
 800eed4:	2101      	movs	r1, #1
 800eed6:	f007 fcd7 	bl	8016888 <uxr_seq_num_add>
 800eeda:	892b      	ldrh	r3, [r5, #8]
 800eedc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800eee0:	4602      	mov	r2, r0
 800eee2:	9b04      	ldr	r3, [sp, #16]
 800eee4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800eee8:	a90a      	add	r1, sp, #40	@ 0x28
 800eeea:	4650      	mov	r0, sl
 800eeec:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800eef0:	f001 ffe0 	bl	8010eb4 <uxr_serialize_HEARTBEAT_Payload>
 800eef4:	2200      	movs	r2, #0
 800eef6:	4611      	mov	r1, r2
 800eef8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eefa:	4640      	mov	r0, r8
 800eefc:	f000 fc2e 	bl	800f75c <uxr_stamp_session_header>
 800ef00:	4650      	mov	r0, sl
 800ef02:	f7fc fd41 	bl	800b988 <ucdr_buffer_length>
 800ef06:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	a90c      	add	r1, sp, #48	@ 0x30
 800ef0e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ef12:	4444      	add	r4, r8
 800ef14:	47a8      	blx	r5
 800ef16:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800ef1a:	9903      	ldr	r1, [sp, #12]
 800ef1c:	455a      	cmp	r2, fp
 800ef1e:	f106 0601 	add.w	r6, r6, #1
 800ef22:	eb73 0101 	sbcs.w	r1, r3, r1
 800ef26:	b2f0      	uxtb	r0, r6
 800ef28:	db9c      	blt.n	800ee64 <listen_message_reliably+0x48>
 800ef2a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800ef2e:	4283      	cmp	r3, r0
 800ef30:	d89e      	bhi.n	800ee70 <listen_message_reliably+0x54>
 800ef32:	9a03      	ldr	r2, [sp, #12]
 800ef34:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	bf08      	it	eq
 800ef3c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800ef40:	d01e      	beq.n	800ef80 <listen_message_reliably+0x164>
 800ef42:	ebab 0309 	sub.w	r3, fp, r9
 800ef46:	9905      	ldr	r1, [sp, #20]
 800ef48:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	bf08      	it	eq
 800ef50:	2301      	moveq	r3, #1
 800ef52:	4299      	cmp	r1, r3
 800ef54:	bfa8      	it	ge
 800ef56:	4619      	movge	r1, r3
 800ef58:	6894      	ldr	r4, [r2, #8]
 800ef5a:	6810      	ldr	r0, [r2, #0]
 800ef5c:	4689      	mov	r9, r1
 800ef5e:	460b      	mov	r3, r1
 800ef60:	aa08      	add	r2, sp, #32
 800ef62:	a907      	add	r1, sp, #28
 800ef64:	47a0      	blx	r4
 800ef66:	b968      	cbnz	r0, 800ef84 <listen_message_reliably+0x168>
 800ef68:	9b05      	ldr	r3, [sp, #20]
 800ef6a:	eba3 0309 	sub.w	r3, r3, r9
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	9305      	str	r3, [sp, #20]
 800ef72:	f73f af5c 	bgt.w	800ee2e <listen_message_reliably+0x12>
 800ef76:	4604      	mov	r4, r0
 800ef78:	4620      	mov	r0, r4
 800ef7a:	b01d      	add	sp, #116	@ 0x74
 800ef7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef80:	9b05      	ldr	r3, [sp, #20]
 800ef82:	e7e0      	b.n	800ef46 <listen_message_reliably+0x12a>
 800ef84:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ef88:	4604      	mov	r4, r0
 800ef8a:	a80c      	add	r0, sp, #48	@ 0x30
 800ef8c:	f7fc fcd0 	bl	800b930 <ucdr_init_buffer>
 800ef90:	2500      	movs	r5, #0
 800ef92:	f10d 031a 	add.w	r3, sp, #26
 800ef96:	aa06      	add	r2, sp, #24
 800ef98:	a90c      	add	r1, sp, #48	@ 0x30
 800ef9a:	4640      	mov	r0, r8
 800ef9c:	f88d 5018 	strb.w	r5, [sp, #24]
 800efa0:	f000 fbf0 	bl	800f784 <uxr_read_session_header>
 800efa4:	b918      	cbnz	r0, 800efae <listen_message_reliably+0x192>
 800efa6:	4620      	mov	r0, r4
 800efa8:	b01d      	add	sp, #116	@ 0x74
 800efaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efae:	4629      	mov	r1, r5
 800efb0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800efb4:	f000 fc8a 	bl	800f8cc <uxr_stream_id_from_raw>
 800efb8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800efbc:	2d01      	cmp	r5, #1
 800efbe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800efc2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800efc6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800efca:	d04b      	beq.n	800f064 <listen_message_reliably+0x248>
 800efcc:	2d02      	cmp	r5, #2
 800efce:	d00f      	beq.n	800eff0 <listen_message_reliably+0x1d4>
 800efd0:	2d00      	cmp	r5, #0
 800efd2:	d1e8      	bne.n	800efa6 <listen_message_reliably+0x18a>
 800efd4:	4629      	mov	r1, r5
 800efd6:	4628      	mov	r0, r5
 800efd8:	f000 fc78 	bl	800f8cc <uxr_stream_id_from_raw>
 800efdc:	a90c      	add	r1, sp, #48	@ 0x30
 800efde:	4602      	mov	r2, r0
 800efe0:	4640      	mov	r0, r8
 800efe2:	920a      	str	r2, [sp, #40]	@ 0x28
 800efe4:	f7ff fd92 	bl	800eb0c <read_submessage_list>
 800efe8:	4620      	mov	r0, r4
 800efea:	b01d      	add	sp, #116	@ 0x74
 800efec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff0:	4631      	mov	r1, r6
 800eff2:	f108 0008 	add.w	r0, r8, #8
 800eff6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800effa:	f000 fd55 	bl	800faa8 <uxr_get_input_reliable_stream>
 800effe:	4607      	mov	r7, r0
 800f000:	b338      	cbz	r0, 800f052 <listen_message_reliably+0x236>
 800f002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f004:	9203      	str	r2, [sp, #12]
 800f006:	a80c      	add	r0, sp, #48	@ 0x30
 800f008:	f7fc fcc2 	bl	800b990 <ucdr_buffer_remaining>
 800f00c:	4603      	mov	r3, r0
 800f00e:	f10d 0019 	add.w	r0, sp, #25
 800f012:	9000      	str	r0, [sp, #0]
 800f014:	9a03      	ldr	r2, [sp, #12]
 800f016:	4651      	mov	r1, sl
 800f018:	4638      	mov	r0, r7
 800f01a:	f006 fe59 	bl	8015cd0 <uxr_receive_reliable_message>
 800f01e:	b1c0      	cbz	r0, 800f052 <listen_message_reliably+0x236>
 800f020:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f024:	b393      	cbz	r3, 800f08c <listen_message_reliably+0x270>
 800f026:	ad14      	add	r5, sp, #80	@ 0x50
 800f028:	f04f 0a02 	mov.w	sl, #2
 800f02c:	e00a      	b.n	800f044 <listen_message_reliably+0x228>
 800f02e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f032:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f036:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f03a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f03c:	4629      	mov	r1, r5
 800f03e:	4640      	mov	r0, r8
 800f040:	f7ff fd64 	bl	800eb0c <read_submessage_list>
 800f044:	2204      	movs	r2, #4
 800f046:	4629      	mov	r1, r5
 800f048:	4638      	mov	r0, r7
 800f04a:	f006 fec1 	bl	8015dd0 <uxr_next_input_reliable_buffer_available>
 800f04e:	2800      	cmp	r0, #0
 800f050:	d1ed      	bne.n	800f02e <listen_message_reliably+0x212>
 800f052:	4640      	mov	r0, r8
 800f054:	4632      	mov	r2, r6
 800f056:	4649      	mov	r1, r9
 800f058:	f7ff fbd4 	bl	800e804 <write_submessage_acknack.isra.0>
 800f05c:	4620      	mov	r0, r4
 800f05e:	b01d      	add	sp, #116	@ 0x74
 800f060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f064:	4631      	mov	r1, r6
 800f066:	f108 0008 	add.w	r0, r8, #8
 800f06a:	f000 fd13 	bl	800fa94 <uxr_get_input_best_effort_stream>
 800f06e:	2800      	cmp	r0, #0
 800f070:	d099      	beq.n	800efa6 <listen_message_reliably+0x18a>
 800f072:	4651      	mov	r1, sl
 800f074:	f006 fd98 	bl	8015ba8 <uxr_receive_best_effort_message>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d094      	beq.n	800efa6 <listen_message_reliably+0x18a>
 800f07c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f080:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f082:	a90c      	add	r1, sp, #48	@ 0x30
 800f084:	4640      	mov	r0, r8
 800f086:	f7ff fd41 	bl	800eb0c <read_submessage_list>
 800f08a:	e78c      	b.n	800efa6 <listen_message_reliably+0x18a>
 800f08c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f090:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f092:	a90c      	add	r1, sp, #48	@ 0x30
 800f094:	4640      	mov	r0, r8
 800f096:	f7ff fd39 	bl	800eb0c <read_submessage_list>
 800f09a:	e7c4      	b.n	800f026 <listen_message_reliably+0x20a>

0800f09c <uxr_run_session_timeout>:
 800f09c:	b570      	push	{r4, r5, r6, lr}
 800f09e:	4604      	mov	r4, r0
 800f0a0:	460d      	mov	r5, r1
 800f0a2:	f000 fd67 	bl	800fb74 <uxr_millis>
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f7ff fc71 	bl	800e990 <uxr_flash_output_streams>
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f7ff feb3 	bl	800ee1c <listen_message_reliably>
 800f0b6:	f000 fd5d 	bl	800fb74 <uxr_millis>
 800f0ba:	1b83      	subs	r3, r0, r6
 800f0bc:	1ae9      	subs	r1, r5, r3
 800f0be:	2900      	cmp	r1, #0
 800f0c0:	dcf6      	bgt.n	800f0b0 <uxr_run_session_timeout+0x14>
 800f0c2:	f104 0008 	add.w	r0, r4, #8
 800f0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0ca:	f000 bcf7 	b.w	800fabc <uxr_output_streams_confirmed>
 800f0ce:	bf00      	nop

0800f0d0 <uxr_run_session_until_data>:
 800f0d0:	b570      	push	{r4, r5, r6, lr}
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	460d      	mov	r5, r1
 800f0d6:	f000 fd4d 	bl	800fb74 <uxr_millis>
 800f0da:	4606      	mov	r6, r0
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f7ff fc57 	bl	800e990 <uxr_flash_output_streams>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f0e8:	4629      	mov	r1, r5
 800f0ea:	e005      	b.n	800f0f8 <uxr_run_session_until_data+0x28>
 800f0ec:	f000 fd42 	bl	800fb74 <uxr_millis>
 800f0f0:	1b83      	subs	r3, r0, r6
 800f0f2:	1ae9      	subs	r1, r5, r3
 800f0f4:	2900      	cmp	r1, #0
 800f0f6:	dd07      	ble.n	800f108 <uxr_run_session_until_data+0x38>
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f7ff fe8f 	bl	800ee1c <listen_message_reliably>
 800f0fe:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f102:	2800      	cmp	r0, #0
 800f104:	d0f2      	beq.n	800f0ec <uxr_run_session_until_data+0x1c>
 800f106:	bd70      	pop	{r4, r5, r6, pc}
 800f108:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f10c:	bd70      	pop	{r4, r5, r6, pc}
 800f10e:	bf00      	nop

0800f110 <uxr_run_session_until_confirm_delivery>:
 800f110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f114:	4606      	mov	r6, r0
 800f116:	460d      	mov	r5, r1
 800f118:	f000 fd2c 	bl	800fb74 <uxr_millis>
 800f11c:	4607      	mov	r7, r0
 800f11e:	4630      	mov	r0, r6
 800f120:	f7ff fc36 	bl	800e990 <uxr_flash_output_streams>
 800f124:	2d00      	cmp	r5, #0
 800f126:	f106 0808 	add.w	r8, r6, #8
 800f12a:	bfa8      	it	ge
 800f12c:	462c      	movge	r4, r5
 800f12e:	da07      	bge.n	800f140 <uxr_run_session_until_confirm_delivery+0x30>
 800f130:	e00e      	b.n	800f150 <uxr_run_session_until_confirm_delivery+0x40>
 800f132:	f7ff fe73 	bl	800ee1c <listen_message_reliably>
 800f136:	f000 fd1d 	bl	800fb74 <uxr_millis>
 800f13a:	1bc3      	subs	r3, r0, r7
 800f13c:	1aec      	subs	r4, r5, r3
 800f13e:	d407      	bmi.n	800f150 <uxr_run_session_until_confirm_delivery+0x40>
 800f140:	4640      	mov	r0, r8
 800f142:	f000 fcbb 	bl	800fabc <uxr_output_streams_confirmed>
 800f146:	4603      	mov	r3, r0
 800f148:	4621      	mov	r1, r4
 800f14a:	4630      	mov	r0, r6
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d0f0      	beq.n	800f132 <uxr_run_session_until_confirm_delivery+0x22>
 800f150:	4640      	mov	r0, r8
 800f152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f156:	f000 bcb1 	b.w	800fabc <uxr_output_streams_confirmed>
 800f15a:	bf00      	nop

0800f15c <uxr_run_session_until_all_status>:
 800f15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f160:	9c08      	ldr	r4, [sp, #32]
 800f162:	4606      	mov	r6, r0
 800f164:	460f      	mov	r7, r1
 800f166:	4691      	mov	r9, r2
 800f168:	461d      	mov	r5, r3
 800f16a:	f7ff fc11 	bl	800e990 <uxr_flash_output_streams>
 800f16e:	b124      	cbz	r4, 800f17a <uxr_run_session_until_all_status+0x1e>
 800f170:	4622      	mov	r2, r4
 800f172:	21ff      	movs	r1, #255	@ 0xff
 800f174:	4628      	mov	r0, r5
 800f176:	f009 fa33 	bl	80185e0 <memset>
 800f17a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f17e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f180:	f000 fcf8 	bl	800fb74 <uxr_millis>
 800f184:	3d01      	subs	r5, #1
 800f186:	f1a9 0902 	sub.w	r9, r9, #2
 800f18a:	4680      	mov	r8, r0
 800f18c:	4639      	mov	r1, r7
 800f18e:	4630      	mov	r0, r6
 800f190:	f7ff fe44 	bl	800ee1c <listen_message_reliably>
 800f194:	f000 fcee 	bl	800fb74 <uxr_millis>
 800f198:	eba0 0008 	sub.w	r0, r0, r8
 800f19c:	1a39      	subs	r1, r7, r0
 800f19e:	b344      	cbz	r4, 800f1f2 <uxr_run_session_until_all_status+0x96>
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	46ac      	mov	ip, r5
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e002      	b.n	800f1ae <uxr_run_session_until_all_status+0x52>
 800f1a8:	42a3      	cmp	r3, r4
 800f1aa:	d20d      	bcs.n	800f1c8 <uxr_run_session_until_all_status+0x6c>
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f1b2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f1b6:	d1f7      	bne.n	800f1a8 <uxr_run_session_until_all_status+0x4c>
 800f1b8:	42a3      	cmp	r3, r4
 800f1ba:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f1be:	d213      	bcs.n	800f1e8 <uxr_run_session_until_all_status+0x8c>
 800f1c0:	2a00      	cmp	r2, #0
 800f1c2:	d0f3      	beq.n	800f1ac <uxr_run_session_until_all_status+0x50>
 800f1c4:	2900      	cmp	r1, #0
 800f1c6:	dce2      	bgt.n	800f18e <uxr_run_session_until_all_status+0x32>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f1cc:	442c      	add	r4, r5
 800f1ce:	e001      	b.n	800f1d4 <uxr_run_session_until_all_status+0x78>
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d812      	bhi.n	800f1fa <uxr_run_session_until_all_status+0x9e>
 800f1d4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f1d8:	4284      	cmp	r4, r0
 800f1da:	d1f9      	bne.n	800f1d0 <uxr_run_session_until_all_status+0x74>
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	bf8c      	ite	hi
 800f1e0:	2000      	movhi	r0, #0
 800f1e2:	2001      	movls	r0, #1
 800f1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1e8:	2900      	cmp	r1, #0
 800f1ea:	dded      	ble.n	800f1c8 <uxr_run_session_until_all_status+0x6c>
 800f1ec:	2a00      	cmp	r2, #0
 800f1ee:	d1ce      	bne.n	800f18e <uxr_run_session_until_all_status+0x32>
 800f1f0:	e7ea      	b.n	800f1c8 <uxr_run_session_until_all_status+0x6c>
 800f1f2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f1f4:	2001      	movs	r0, #1
 800f1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1fa:	2000      	movs	r0, #0
 800f1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f200 <wait_session_status>:
 800f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f204:	4604      	mov	r4, r0
 800f206:	b09d      	sub	sp, #116	@ 0x74
 800f208:	20ff      	movs	r0, #255	@ 0xff
 800f20a:	7160      	strb	r0, [r4, #5]
 800f20c:	9303      	str	r3, [sp, #12]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f000 80b6 	beq.w	800f380 <wait_session_status+0x180>
 800f214:	468a      	mov	sl, r1
 800f216:	4691      	mov	r9, r2
 800f218:	f04f 0b00 	mov.w	fp, #0
 800f21c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f21e:	464a      	mov	r2, r9
 800f220:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f224:	4651      	mov	r1, sl
 800f226:	47a8      	blx	r5
 800f228:	f000 fca4 	bl	800fb74 <uxr_millis>
 800f22c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f230:	4605      	mov	r5, r0
 800f232:	e009      	b.n	800f248 <wait_session_status+0x48>
 800f234:	f000 fc9e 	bl	800fb74 <uxr_millis>
 800f238:	1b40      	subs	r0, r0, r5
 800f23a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f23e:	2b00      	cmp	r3, #0
 800f240:	dd40      	ble.n	800f2c4 <wait_session_status+0xc4>
 800f242:	7960      	ldrb	r0, [r4, #5]
 800f244:	28ff      	cmp	r0, #255	@ 0xff
 800f246:	d145      	bne.n	800f2d4 <wait_session_status+0xd4>
 800f248:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f24a:	a908      	add	r1, sp, #32
 800f24c:	6896      	ldr	r6, [r2, #8]
 800f24e:	6810      	ldr	r0, [r2, #0]
 800f250:	aa09      	add	r2, sp, #36	@ 0x24
 800f252:	47b0      	blx	r6
 800f254:	2800      	cmp	r0, #0
 800f256:	d0ed      	beq.n	800f234 <wait_session_status+0x34>
 800f258:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f25c:	a80c      	add	r0, sp, #48	@ 0x30
 800f25e:	f7fc fb67 	bl	800b930 <ucdr_init_buffer>
 800f262:	2600      	movs	r6, #0
 800f264:	f10d 031e 	add.w	r3, sp, #30
 800f268:	aa07      	add	r2, sp, #28
 800f26a:	a90c      	add	r1, sp, #48	@ 0x30
 800f26c:	4620      	mov	r0, r4
 800f26e:	f88d 601c 	strb.w	r6, [sp, #28]
 800f272:	f000 fa87 	bl	800f784 <uxr_read_session_header>
 800f276:	2800      	cmp	r0, #0
 800f278:	d0dc      	beq.n	800f234 <wait_session_status+0x34>
 800f27a:	4631      	mov	r1, r6
 800f27c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f280:	f000 fb24 	bl	800f8cc <uxr_stream_id_from_raw>
 800f284:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f288:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f28c:	9302      	str	r3, [sp, #8]
 800f28e:	2f01      	cmp	r7, #1
 800f290:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f294:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f298:	d05c      	beq.n	800f354 <wait_session_status+0x154>
 800f29a:	2f02      	cmp	r7, #2
 800f29c:	d020      	beq.n	800f2e0 <wait_session_status+0xe0>
 800f29e:	2f00      	cmp	r7, #0
 800f2a0:	d1c8      	bne.n	800f234 <wait_session_status+0x34>
 800f2a2:	4639      	mov	r1, r7
 800f2a4:	4638      	mov	r0, r7
 800f2a6:	f000 fb11 	bl	800f8cc <uxr_stream_id_from_raw>
 800f2aa:	a90c      	add	r1, sp, #48	@ 0x30
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	f7ff fc2b 	bl	800eb0c <read_submessage_list>
 800f2b6:	f000 fc5d 	bl	800fb74 <uxr_millis>
 800f2ba:	1b40      	subs	r0, r0, r5
 800f2bc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	dcbe      	bgt.n	800f242 <wait_session_status+0x42>
 800f2c4:	9b03      	ldr	r3, [sp, #12]
 800f2c6:	7960      	ldrb	r0, [r4, #5]
 800f2c8:	f10b 0b01 	add.w	fp, fp, #1
 800f2cc:	455b      	cmp	r3, fp
 800f2ce:	d001      	beq.n	800f2d4 <wait_session_status+0xd4>
 800f2d0:	28ff      	cmp	r0, #255	@ 0xff
 800f2d2:	d0a3      	beq.n	800f21c <wait_session_status+0x1c>
 800f2d4:	38ff      	subs	r0, #255	@ 0xff
 800f2d6:	bf18      	it	ne
 800f2d8:	2001      	movne	r0, #1
 800f2da:	b01d      	add	sp, #116	@ 0x74
 800f2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2e0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f2e4:	9304      	str	r3, [sp, #16]
 800f2e6:	4631      	mov	r1, r6
 800f2e8:	f104 0008 	add.w	r0, r4, #8
 800f2ec:	f000 fbdc 	bl	800faa8 <uxr_get_input_reliable_stream>
 800f2f0:	4680      	mov	r8, r0
 800f2f2:	b348      	cbz	r0, 800f348 <wait_session_status+0x148>
 800f2f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2f6:	9205      	str	r2, [sp, #20]
 800f2f8:	a80c      	add	r0, sp, #48	@ 0x30
 800f2fa:	f7fc fb49 	bl	800b990 <ucdr_buffer_remaining>
 800f2fe:	4603      	mov	r3, r0
 800f300:	f10d 001d 	add.w	r0, sp, #29
 800f304:	9000      	str	r0, [sp, #0]
 800f306:	9a05      	ldr	r2, [sp, #20]
 800f308:	9902      	ldr	r1, [sp, #8]
 800f30a:	4640      	mov	r0, r8
 800f30c:	f006 fce0 	bl	8015cd0 <uxr_receive_reliable_message>
 800f310:	b1d0      	cbz	r0, 800f348 <wait_session_status+0x148>
 800f312:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d03a      	beq.n	800f390 <wait_session_status+0x190>
 800f31a:	9f04      	ldr	r7, [sp, #16]
 800f31c:	e00a      	b.n	800f334 <wait_session_status+0x134>
 800f31e:	f04f 0302 	mov.w	r3, #2
 800f322:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800f326:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f32a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800f32e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f330:	f7ff fbec 	bl	800eb0c <read_submessage_list>
 800f334:	a914      	add	r1, sp, #80	@ 0x50
 800f336:	2204      	movs	r2, #4
 800f338:	4640      	mov	r0, r8
 800f33a:	f006 fd49 	bl	8015dd0 <uxr_next_input_reliable_buffer_available>
 800f33e:	4603      	mov	r3, r0
 800f340:	a914      	add	r1, sp, #80	@ 0x50
 800f342:	4620      	mov	r0, r4
 800f344:	2b00      	cmp	r3, #0
 800f346:	d1ea      	bne.n	800f31e <wait_session_status+0x11e>
 800f348:	9904      	ldr	r1, [sp, #16]
 800f34a:	4632      	mov	r2, r6
 800f34c:	4620      	mov	r0, r4
 800f34e:	f7ff fa59 	bl	800e804 <write_submessage_acknack.isra.0>
 800f352:	e76f      	b.n	800f234 <wait_session_status+0x34>
 800f354:	4631      	mov	r1, r6
 800f356:	f104 0008 	add.w	r0, r4, #8
 800f35a:	f000 fb9b 	bl	800fa94 <uxr_get_input_best_effort_stream>
 800f35e:	2800      	cmp	r0, #0
 800f360:	f43f af68 	beq.w	800f234 <wait_session_status+0x34>
 800f364:	9902      	ldr	r1, [sp, #8]
 800f366:	f006 fc1f 	bl	8015ba8 <uxr_receive_best_effort_message>
 800f36a:	2800      	cmp	r0, #0
 800f36c:	f43f af62 	beq.w	800f234 <wait_session_status+0x34>
 800f370:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f374:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f376:	a90c      	add	r1, sp, #48	@ 0x30
 800f378:	4620      	mov	r0, r4
 800f37a:	f7ff fbc7 	bl	800eb0c <read_submessage_list>
 800f37e:	e759      	b.n	800f234 <wait_session_status+0x34>
 800f380:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f382:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f386:	47a0      	blx	r4
 800f388:	2001      	movs	r0, #1
 800f38a:	b01d      	add	sp, #116	@ 0x74
 800f38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f390:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f394:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f396:	a90c      	add	r1, sp, #48	@ 0x30
 800f398:	4620      	mov	r0, r4
 800f39a:	f7ff fbb7 	bl	800eb0c <read_submessage_list>
 800f39e:	e7bc      	b.n	800f31a <wait_session_status+0x11a>

0800f3a0 <uxr_delete_session_retries>:
 800f3a0:	b530      	push	{r4, r5, lr}
 800f3a2:	b08f      	sub	sp, #60	@ 0x3c
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	460d      	mov	r5, r1
 800f3a8:	f000 fa2e 	bl	800f808 <uxr_session_header_offset>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	2210      	movs	r2, #16
 800f3b0:	9000      	str	r0, [sp, #0]
 800f3b2:	a902      	add	r1, sp, #8
 800f3b4:	a806      	add	r0, sp, #24
 800f3b6:	f7fc faa9 	bl	800b90c <ucdr_init_buffer_origin_offset>
 800f3ba:	a906      	add	r1, sp, #24
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f000 f973 	bl	800f6a8 <uxr_buffer_delete_session>
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	9b06      	ldr	r3, [sp, #24]
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f000 f9c7 	bl	800f75c <uxr_stamp_session_header>
 800f3ce:	a806      	add	r0, sp, #24
 800f3d0:	f7fc fada 	bl	800b988 <ucdr_buffer_length>
 800f3d4:	462b      	mov	r3, r5
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	a902      	add	r1, sp, #8
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f7ff ff10 	bl	800f200 <wait_session_status>
 800f3e0:	b118      	cbz	r0, 800f3ea <uxr_delete_session_retries+0x4a>
 800f3e2:	7960      	ldrb	r0, [r4, #5]
 800f3e4:	fab0 f080 	clz	r0, r0
 800f3e8:	0940      	lsrs	r0, r0, #5
 800f3ea:	b00f      	add	sp, #60	@ 0x3c
 800f3ec:	bd30      	pop	{r4, r5, pc}
 800f3ee:	bf00      	nop

0800f3f0 <uxr_create_session>:
 800f3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f4:	f100 0b08 	add.w	fp, r0, #8
 800f3f8:	b0ab      	sub	sp, #172	@ 0xac
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	4658      	mov	r0, fp
 800f3fe:	f000 fa99 	bl	800f934 <uxr_reset_stream_storage>
 800f402:	4620      	mov	r0, r4
 800f404:	f000 fa00 	bl	800f808 <uxr_session_header_offset>
 800f408:	2300      	movs	r3, #0
 800f40a:	9000      	str	r0, [sp, #0]
 800f40c:	221c      	movs	r2, #28
 800f40e:	a90b      	add	r1, sp, #44	@ 0x2c
 800f410:	a812      	add	r0, sp, #72	@ 0x48
 800f412:	f7fc fa7b 	bl	800b90c <ucdr_init_buffer_origin_offset>
 800f416:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f418:	8a1a      	ldrh	r2, [r3, #16]
 800f41a:	3a04      	subs	r2, #4
 800f41c:	b292      	uxth	r2, r2
 800f41e:	a912      	add	r1, sp, #72	@ 0x48
 800f420:	4620      	mov	r0, r4
 800f422:	f000 f917 	bl	800f654 <uxr_buffer_create_session>
 800f426:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f428:	4620      	mov	r0, r4
 800f42a:	f000 f983 	bl	800f734 <uxr_stamp_create_session_header>
 800f42e:	a812      	add	r0, sp, #72	@ 0x48
 800f430:	f7fc faaa 	bl	800b988 <ucdr_buffer_length>
 800f434:	23ff      	movs	r3, #255	@ 0xff
 800f436:	7163      	strb	r3, [r4, #5]
 800f438:	230a      	movs	r3, #10
 800f43a:	46da      	mov	sl, fp
 800f43c:	9303      	str	r3, [sp, #12]
 800f43e:	4683      	mov	fp, r0
 800f440:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f442:	465a      	mov	r2, fp
 800f444:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f448:	a90b      	add	r1, sp, #44	@ 0x2c
 800f44a:	47a8      	blx	r5
 800f44c:	f000 fb92 	bl	800fb74 <uxr_millis>
 800f450:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f454:	4605      	mov	r5, r0
 800f456:	e009      	b.n	800f46c <uxr_create_session+0x7c>
 800f458:	f000 fb8c 	bl	800fb74 <uxr_millis>
 800f45c:	1b40      	subs	r0, r0, r5
 800f45e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f462:	2b00      	cmp	r3, #0
 800f464:	7962      	ldrb	r2, [r4, #5]
 800f466:	dd38      	ble.n	800f4da <uxr_create_session+0xea>
 800f468:	2aff      	cmp	r2, #255	@ 0xff
 800f46a:	d13c      	bne.n	800f4e6 <uxr_create_session+0xf6>
 800f46c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f46e:	a907      	add	r1, sp, #28
 800f470:	6896      	ldr	r6, [r2, #8]
 800f472:	6810      	ldr	r0, [r2, #0]
 800f474:	aa08      	add	r2, sp, #32
 800f476:	47b0      	blx	r6
 800f478:	2800      	cmp	r0, #0
 800f47a:	d0ed      	beq.n	800f458 <uxr_create_session+0x68>
 800f47c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f480:	a81a      	add	r0, sp, #104	@ 0x68
 800f482:	f7fc fa55 	bl	800b930 <ucdr_init_buffer>
 800f486:	2600      	movs	r6, #0
 800f488:	f10d 031a 	add.w	r3, sp, #26
 800f48c:	aa06      	add	r2, sp, #24
 800f48e:	a91a      	add	r1, sp, #104	@ 0x68
 800f490:	4620      	mov	r0, r4
 800f492:	f88d 6018 	strb.w	r6, [sp, #24]
 800f496:	f000 f975 	bl	800f784 <uxr_read_session_header>
 800f49a:	2800      	cmp	r0, #0
 800f49c:	d0dc      	beq.n	800f458 <uxr_create_session+0x68>
 800f49e:	4631      	mov	r1, r6
 800f4a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f4a4:	f000 fa12 	bl	800f8cc <uxr_stream_id_from_raw>
 800f4a8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f4ac:	2e01      	cmp	r6, #1
 800f4ae:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f4b2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f4b6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f4ba:	d053      	beq.n	800f564 <uxr_create_session+0x174>
 800f4bc:	2e02      	cmp	r6, #2
 800f4be:	d018      	beq.n	800f4f2 <uxr_create_session+0x102>
 800f4c0:	2e00      	cmp	r6, #0
 800f4c2:	d1c9      	bne.n	800f458 <uxr_create_session+0x68>
 800f4c4:	4631      	mov	r1, r6
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	f000 fa00 	bl	800f8cc <uxr_stream_id_from_raw>
 800f4cc:	a91a      	add	r1, sp, #104	@ 0x68
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	900a      	str	r0, [sp, #40]	@ 0x28
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	f7ff fb1a 	bl	800eb0c <read_submessage_list>
 800f4d8:	e7be      	b.n	800f458 <uxr_create_session+0x68>
 800f4da:	9b03      	ldr	r3, [sp, #12]
 800f4dc:	3b01      	subs	r3, #1
 800f4de:	9303      	str	r3, [sp, #12]
 800f4e0:	d001      	beq.n	800f4e6 <uxr_create_session+0xf6>
 800f4e2:	2aff      	cmp	r2, #255	@ 0xff
 800f4e4:	d0ac      	beq.n	800f440 <uxr_create_session+0x50>
 800f4e6:	2a00      	cmp	r2, #0
 800f4e8:	d051      	beq.n	800f58e <uxr_create_session+0x19e>
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	b02b      	add	sp, #172	@ 0xac
 800f4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f4f6:	9304      	str	r3, [sp, #16]
 800f4f8:	4639      	mov	r1, r7
 800f4fa:	4650      	mov	r0, sl
 800f4fc:	f000 fad4 	bl	800faa8 <uxr_get_input_reliable_stream>
 800f500:	4680      	mov	r8, r0
 800f502:	b348      	cbz	r0, 800f558 <uxr_create_session+0x168>
 800f504:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f506:	9205      	str	r2, [sp, #20]
 800f508:	a81a      	add	r0, sp, #104	@ 0x68
 800f50a:	f7fc fa41 	bl	800b990 <ucdr_buffer_remaining>
 800f50e:	4603      	mov	r3, r0
 800f510:	f10d 0019 	add.w	r0, sp, #25
 800f514:	9000      	str	r0, [sp, #0]
 800f516:	9a05      	ldr	r2, [sp, #20]
 800f518:	4649      	mov	r1, r9
 800f51a:	4640      	mov	r0, r8
 800f51c:	f006 fbd8 	bl	8015cd0 <uxr_receive_reliable_message>
 800f520:	b1d0      	cbz	r0, 800f558 <uxr_create_session+0x168>
 800f522:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d038      	beq.n	800f59c <uxr_create_session+0x1ac>
 800f52a:	9e04      	ldr	r6, [sp, #16]
 800f52c:	e00a      	b.n	800f544 <uxr_create_session+0x154>
 800f52e:	f04f 0302 	mov.w	r3, #2
 800f532:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800f536:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800f53a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f53e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f540:	f7ff fae4 	bl	800eb0c <read_submessage_list>
 800f544:	a922      	add	r1, sp, #136	@ 0x88
 800f546:	2204      	movs	r2, #4
 800f548:	4640      	mov	r0, r8
 800f54a:	f006 fc41 	bl	8015dd0 <uxr_next_input_reliable_buffer_available>
 800f54e:	4603      	mov	r3, r0
 800f550:	a922      	add	r1, sp, #136	@ 0x88
 800f552:	4620      	mov	r0, r4
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1ea      	bne.n	800f52e <uxr_create_session+0x13e>
 800f558:	9904      	ldr	r1, [sp, #16]
 800f55a:	463a      	mov	r2, r7
 800f55c:	4620      	mov	r0, r4
 800f55e:	f7ff f951 	bl	800e804 <write_submessage_acknack.isra.0>
 800f562:	e779      	b.n	800f458 <uxr_create_session+0x68>
 800f564:	4639      	mov	r1, r7
 800f566:	4650      	mov	r0, sl
 800f568:	f000 fa94 	bl	800fa94 <uxr_get_input_best_effort_stream>
 800f56c:	2800      	cmp	r0, #0
 800f56e:	f43f af73 	beq.w	800f458 <uxr_create_session+0x68>
 800f572:	4649      	mov	r1, r9
 800f574:	f006 fb18 	bl	8015ba8 <uxr_receive_best_effort_message>
 800f578:	2800      	cmp	r0, #0
 800f57a:	f43f af6d 	beq.w	800f458 <uxr_create_session+0x68>
 800f57e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f582:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f584:	a91a      	add	r1, sp, #104	@ 0x68
 800f586:	4620      	mov	r0, r4
 800f588:	f7ff fac0 	bl	800eb0c <read_submessage_list>
 800f58c:	e764      	b.n	800f458 <uxr_create_session+0x68>
 800f58e:	4650      	mov	r0, sl
 800f590:	f000 f9d0 	bl	800f934 <uxr_reset_stream_storage>
 800f594:	2001      	movs	r0, #1
 800f596:	b02b      	add	sp, #172	@ 0xac
 800f598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f59c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f5a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5a2:	a91a      	add	r1, sp, #104	@ 0x68
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f7ff fab1 	bl	800eb0c <read_submessage_list>
 800f5aa:	e7be      	b.n	800f52a <uxr_create_session+0x13a>

0800f5ac <uxr_prepare_stream_to_write_submessage>:
 800f5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b0:	b082      	sub	sp, #8
 800f5b2:	4682      	mov	sl, r0
 800f5b4:	4610      	mov	r0, r2
 800f5b6:	4615      	mov	r5, r2
 800f5b8:	461e      	mov	r6, r3
 800f5ba:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800f5be:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800f5c2:	9101      	str	r1, [sp, #4]
 800f5c4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f5c8:	f000 face 	bl	800fb68 <uxr_submessage_padding>
 800f5cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5d0:	f105 0904 	add.w	r9, r5, #4
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	4481      	add	r9, r0
 800f5d8:	d01d      	beq.n	800f616 <uxr_prepare_stream_to_write_submessage+0x6a>
 800f5da:	2b02      	cmp	r3, #2
 800f5dc:	d116      	bne.n	800f60c <uxr_prepare_stream_to_write_submessage+0x60>
 800f5de:	4621      	mov	r1, r4
 800f5e0:	f10a 0008 	add.w	r0, sl, #8
 800f5e4:	f000 fa4c 	bl	800fa80 <uxr_get_output_reliable_stream>
 800f5e8:	4604      	mov	r4, r0
 800f5ea:	b158      	cbz	r0, 800f604 <uxr_prepare_stream_to_write_submessage+0x58>
 800f5ec:	4649      	mov	r1, r9
 800f5ee:	4632      	mov	r2, r6
 800f5f0:	f006 fdaa 	bl	8016148 <uxr_prepare_reliable_buffer_to_write>
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	b12c      	cbz	r4, 800f604 <uxr_prepare_stream_to_write_submessage+0x58>
 800f5f8:	4643      	mov	r3, r8
 800f5fa:	b2aa      	uxth	r2, r5
 800f5fc:	4639      	mov	r1, r7
 800f5fe:	4630      	mov	r0, r6
 800f600:	f000 fa72 	bl	800fae8 <uxr_buffer_submessage_header>
 800f604:	4620      	mov	r0, r4
 800f606:	b002      	add	sp, #8
 800f608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f60c:	2400      	movs	r4, #0
 800f60e:	4620      	mov	r0, r4
 800f610:	b002      	add	sp, #8
 800f612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f616:	4621      	mov	r1, r4
 800f618:	f10a 0008 	add.w	r0, sl, #8
 800f61c:	f000 fa28 	bl	800fa70 <uxr_get_output_best_effort_stream>
 800f620:	4604      	mov	r4, r0
 800f622:	2800      	cmp	r0, #0
 800f624:	d0ee      	beq.n	800f604 <uxr_prepare_stream_to_write_submessage+0x58>
 800f626:	4649      	mov	r1, r9
 800f628:	4632      	mov	r2, r6
 800f62a:	f006 fcbd 	bl	8015fa8 <uxr_prepare_best_effort_buffer_to_write>
 800f62e:	4604      	mov	r4, r0
 800f630:	e7e1      	b.n	800f5f6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800f632:	bf00      	nop

0800f634 <uxr_init_session_info>:
 800f634:	0e13      	lsrs	r3, r2, #24
 800f636:	7043      	strb	r3, [r0, #1]
 800f638:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f63c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f640:	7001      	strb	r1, [r0, #0]
 800f642:	70c3      	strb	r3, [r0, #3]
 800f644:	2109      	movs	r1, #9
 800f646:	23ff      	movs	r3, #255	@ 0xff
 800f648:	f880 c002 	strb.w	ip, [r0, #2]
 800f64c:	7102      	strb	r2, [r0, #4]
 800f64e:	80c1      	strh	r1, [r0, #6]
 800f650:	7143      	strb	r3, [r0, #5]
 800f652:	4770      	bx	lr

0800f654 <uxr_buffer_create_session>:
 800f654:	b530      	push	{r4, r5, lr}
 800f656:	b089      	sub	sp, #36	@ 0x24
 800f658:	2300      	movs	r3, #0
 800f65a:	4d12      	ldr	r5, [pc, #72]	@ (800f6a4 <uxr_buffer_create_session+0x50>)
 800f65c:	9307      	str	r3, [sp, #28]
 800f65e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f662:	2201      	movs	r2, #1
 800f664:	9301      	str	r3, [sp, #4]
 800f666:	80c2      	strh	r2, [r0, #6]
 800f668:	f88d 2004 	strb.w	r2, [sp, #4]
 800f66c:	682a      	ldr	r2, [r5, #0]
 800f66e:	9200      	str	r2, [sp, #0]
 800f670:	88aa      	ldrh	r2, [r5, #4]
 800f672:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f676:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f67a:	9202      	str	r2, [sp, #8]
 800f67c:	460c      	mov	r4, r1
 800f67e:	7802      	ldrb	r2, [r0, #0]
 800f680:	9303      	str	r3, [sp, #12]
 800f682:	4619      	mov	r1, r3
 800f684:	f88d 200c 	strb.w	r2, [sp, #12]
 800f688:	4620      	mov	r0, r4
 800f68a:	2210      	movs	r2, #16
 800f68c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f690:	9306      	str	r3, [sp, #24]
 800f692:	f000 fa29 	bl	800fae8 <uxr_buffer_submessage_header>
 800f696:	4669      	mov	r1, sp
 800f698:	4620      	mov	r0, r4
 800f69a:	f001 fa6d 	bl	8010b78 <uxr_serialize_CREATE_CLIENT_Payload>
 800f69e:	b009      	add	sp, #36	@ 0x24
 800f6a0:	bd30      	pop	{r4, r5, pc}
 800f6a2:	bf00      	nop
 800f6a4:	080194d0 	.word	0x080194d0

0800f6a8 <uxr_buffer_delete_session>:
 800f6a8:	b510      	push	{r4, lr}
 800f6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f6dc <uxr_buffer_delete_session+0x34>)
 800f6ac:	b082      	sub	sp, #8
 800f6ae:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f6b2:	f8ad c006 	strh.w	ip, [sp, #6]
 800f6b6:	460c      	mov	r4, r1
 800f6b8:	2202      	movs	r2, #2
 800f6ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f6be:	80c2      	strh	r2, [r0, #6]
 800f6c0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f6c4:	2204      	movs	r2, #4
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	2103      	movs	r1, #3
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f000 fa0c 	bl	800fae8 <uxr_buffer_submessage_header>
 800f6d0:	a901      	add	r1, sp, #4
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f001 faf6 	bl	8010cc4 <uxr_serialize_DELETE_Payload>
 800f6d8:	b002      	add	sp, #8
 800f6da:	bd10      	pop	{r4, pc}
 800f6dc:	080194d0 	.word	0x080194d0

0800f6e0 <uxr_read_create_session_status>:
 800f6e0:	b510      	push	{r4, lr}
 800f6e2:	b088      	sub	sp, #32
 800f6e4:	4604      	mov	r4, r0
 800f6e6:	4608      	mov	r0, r1
 800f6e8:	a901      	add	r1, sp, #4
 800f6ea:	f001 fafb 	bl	8010ce4 <uxr_deserialize_STATUS_AGENT_Payload>
 800f6ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f6f2:	7163      	strb	r3, [r4, #5]
 800f6f4:	b008      	add	sp, #32
 800f6f6:	bd10      	pop	{r4, pc}

0800f6f8 <uxr_read_delete_session_status>:
 800f6f8:	b510      	push	{r4, lr}
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	b084      	sub	sp, #16
 800f6fe:	4608      	mov	r0, r1
 800f700:	a902      	add	r1, sp, #8
 800f702:	f001 fb1f 	bl	8010d44 <uxr_deserialize_STATUS_Payload>
 800f706:	88e3      	ldrh	r3, [r4, #6]
 800f708:	2b02      	cmp	r3, #2
 800f70a:	d001      	beq.n	800f710 <uxr_read_delete_session_status+0x18>
 800f70c:	b004      	add	sp, #16
 800f70e:	bd10      	pop	{r4, pc}
 800f710:	f10d 000a 	add.w	r0, sp, #10
 800f714:	f7fe fffc 	bl	800e710 <uxr_object_id_from_raw>
 800f718:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f71c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f720:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f724:	b29b      	uxth	r3, r3
 800f726:	2b02      	cmp	r3, #2
 800f728:	bf04      	itt	eq
 800f72a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800f72e:	7163      	strbeq	r3, [r4, #5]
 800f730:	b004      	add	sp, #16
 800f732:	bd10      	pop	{r4, pc}

0800f734 <uxr_stamp_create_session_header>:
 800f734:	b510      	push	{r4, lr}
 800f736:	2208      	movs	r2, #8
 800f738:	b08a      	sub	sp, #40	@ 0x28
 800f73a:	4604      	mov	r4, r0
 800f73c:	eb0d 0002 	add.w	r0, sp, r2
 800f740:	f7fc f8f6 	bl	800b930 <ucdr_init_buffer>
 800f744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f748:	9400      	str	r4, [sp, #0]
 800f74a:	2300      	movs	r3, #0
 800f74c:	461a      	mov	r2, r3
 800f74e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800f752:	a802      	add	r0, sp, #8
 800f754:	f000 fbc2 	bl	800fedc <uxr_serialize_message_header>
 800f758:	b00a      	add	sp, #40	@ 0x28
 800f75a:	bd10      	pop	{r4, pc}

0800f75c <uxr_stamp_session_header>:
 800f75c:	b530      	push	{r4, r5, lr}
 800f75e:	b08d      	sub	sp, #52	@ 0x34
 800f760:	4604      	mov	r4, r0
 800f762:	460d      	mov	r5, r1
 800f764:	9203      	str	r2, [sp, #12]
 800f766:	4619      	mov	r1, r3
 800f768:	a804      	add	r0, sp, #16
 800f76a:	2208      	movs	r2, #8
 800f76c:	f7fc f8e0 	bl	800b930 <ucdr_init_buffer>
 800f770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f774:	9b03      	ldr	r3, [sp, #12]
 800f776:	9400      	str	r4, [sp, #0]
 800f778:	462a      	mov	r2, r5
 800f77a:	a804      	add	r0, sp, #16
 800f77c:	f000 fbae 	bl	800fedc <uxr_serialize_message_header>
 800f780:	b00d      	add	sp, #52	@ 0x34
 800f782:	bd30      	pop	{r4, r5, pc}

0800f784 <uxr_read_session_header>:
 800f784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f788:	4607      	mov	r7, r0
 800f78a:	b084      	sub	sp, #16
 800f78c:	4608      	mov	r0, r1
 800f78e:	460c      	mov	r4, r1
 800f790:	4615      	mov	r5, r2
 800f792:	461e      	mov	r6, r3
 800f794:	f7fc f8fc 	bl	800b990 <ucdr_buffer_remaining>
 800f798:	2808      	cmp	r0, #8
 800f79a:	d803      	bhi.n	800f7a4 <uxr_read_session_header+0x20>
 800f79c:	2000      	movs	r0, #0
 800f79e:	b004      	add	sp, #16
 800f7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a4:	f10d 080c 	add.w	r8, sp, #12
 800f7a8:	4633      	mov	r3, r6
 800f7aa:	462a      	mov	r2, r5
 800f7ac:	f8cd 8000 	str.w	r8, [sp]
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f10d 010b 	add.w	r1, sp, #11
 800f7b6:	f000 fbaf 	bl	800ff18 <uxr_deserialize_message_header>
 800f7ba:	783a      	ldrb	r2, [r7, #0]
 800f7bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d1eb      	bne.n	800f79c <uxr_read_session_header+0x18>
 800f7c4:	061b      	lsls	r3, r3, #24
 800f7c6:	d41c      	bmi.n	800f802 <uxr_read_session_header+0x7e>
 800f7c8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f7cc:	787b      	ldrb	r3, [r7, #1]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d003      	beq.n	800f7da <uxr_read_session_header+0x56>
 800f7d2:	2001      	movs	r0, #1
 800f7d4:	f080 0001 	eor.w	r0, r0, #1
 800f7d8:	e7e1      	b.n	800f79e <uxr_read_session_header+0x1a>
 800f7da:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f7de:	78bb      	ldrb	r3, [r7, #2]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	f107 0102 	add.w	r1, r7, #2
 800f7e6:	d1f4      	bne.n	800f7d2 <uxr_read_session_header+0x4e>
 800f7e8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f7ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d1ee      	bne.n	800f7d2 <uxr_read_session_header+0x4e>
 800f7f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f7f8:	784b      	ldrb	r3, [r1, #1]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d1e9      	bne.n	800f7d2 <uxr_read_session_header+0x4e>
 800f7fe:	2000      	movs	r0, #0
 800f800:	e7e8      	b.n	800f7d4 <uxr_read_session_header+0x50>
 800f802:	2001      	movs	r0, #1
 800f804:	e7cb      	b.n	800f79e <uxr_read_session_header+0x1a>
 800f806:	bf00      	nop

0800f808 <uxr_session_header_offset>:
 800f808:	f990 3000 	ldrsb.w	r3, [r0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	bfac      	ite	ge
 800f810:	2008      	movge	r0, #8
 800f812:	2004      	movlt	r0, #4
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop

0800f818 <uxr_init_base_object_request>:
 800f818:	b510      	push	{r4, lr}
 800f81a:	88c3      	ldrh	r3, [r0, #6]
 800f81c:	b082      	sub	sp, #8
 800f81e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800f822:	9101      	str	r1, [sp, #4]
 800f824:	f1a3 010a 	sub.w	r1, r3, #10
 800f828:	b289      	uxth	r1, r1
 800f82a:	42a1      	cmp	r1, r4
 800f82c:	d80e      	bhi.n	800f84c <uxr_init_base_object_request+0x34>
 800f82e:	3301      	adds	r3, #1
 800f830:	b29c      	uxth	r4, r3
 800f832:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f836:	b2db      	uxtb	r3, r3
 800f838:	80c4      	strh	r4, [r0, #6]
 800f83a:	9801      	ldr	r0, [sp, #4]
 800f83c:	7011      	strb	r1, [r2, #0]
 800f83e:	7053      	strb	r3, [r2, #1]
 800f840:	1c91      	adds	r1, r2, #2
 800f842:	f7fe ff79 	bl	800e738 <uxr_object_id_to_raw>
 800f846:	4620      	mov	r0, r4
 800f848:	b002      	add	sp, #8
 800f84a:	bd10      	pop	{r4, pc}
 800f84c:	230a      	movs	r3, #10
 800f84e:	2100      	movs	r1, #0
 800f850:	461c      	mov	r4, r3
 800f852:	e7f1      	b.n	800f838 <uxr_init_base_object_request+0x20>

0800f854 <uxr_parse_base_object_request>:
 800f854:	b570      	push	{r4, r5, r6, lr}
 800f856:	4604      	mov	r4, r0
 800f858:	3002      	adds	r0, #2
 800f85a:	460d      	mov	r5, r1
 800f85c:	4616      	mov	r6, r2
 800f85e:	f7fe ff57 	bl	800e710 <uxr_object_id_from_raw>
 800f862:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f866:	8028      	strh	r0, [r5, #0]
 800f868:	806b      	strh	r3, [r5, #2]
 800f86a:	7822      	ldrb	r2, [r4, #0]
 800f86c:	7863      	ldrb	r3, [r4, #1]
 800f86e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f872:	8033      	strh	r3, [r6, #0]
 800f874:	bd70      	pop	{r4, r5, r6, pc}
 800f876:	bf00      	nop

0800f878 <uxr_stream_id>:
 800f878:	2901      	cmp	r1, #1
 800f87a:	b082      	sub	sp, #8
 800f87c:	d01d      	beq.n	800f8ba <uxr_stream_id+0x42>
 800f87e:	2902      	cmp	r1, #2
 800f880:	f04f 0c00 	mov.w	ip, #0
 800f884:	d01e      	beq.n	800f8c4 <uxr_stream_id+0x4c>
 800f886:	2300      	movs	r3, #0
 800f888:	f36c 0307 	bfi	r3, ip, #0, #8
 800f88c:	f360 230f 	bfi	r3, r0, #8, #8
 800f890:	f361 4317 	bfi	r3, r1, #16, #8
 800f894:	f362 631f 	bfi	r3, r2, #24, #8
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	2000      	movs	r0, #0
 800f89c:	f362 0007 	bfi	r0, r2, #0, #8
 800f8a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f8a4:	f362 200f 	bfi	r0, r2, #8, #8
 800f8a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f8ac:	f362 4017 	bfi	r0, r2, #16, #8
 800f8b0:	0e1b      	lsrs	r3, r3, #24
 800f8b2:	f363 601f 	bfi	r0, r3, #24, #8
 800f8b6:	b002      	add	sp, #8
 800f8b8:	4770      	bx	lr
 800f8ba:	f100 0c01 	add.w	ip, r0, #1
 800f8be:	fa5f fc8c 	uxtb.w	ip, ip
 800f8c2:	e7e0      	b.n	800f886 <uxr_stream_id+0xe>
 800f8c4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800f8c8:	e7dd      	b.n	800f886 <uxr_stream_id+0xe>
 800f8ca:	bf00      	nop

0800f8cc <uxr_stream_id_from_raw>:
 800f8cc:	b082      	sub	sp, #8
 800f8ce:	b130      	cbz	r0, 800f8de <uxr_stream_id_from_raw+0x12>
 800f8d0:	0603      	lsls	r3, r0, #24
 800f8d2:	d420      	bmi.n	800f916 <uxr_stream_id_from_raw+0x4a>
 800f8d4:	1e42      	subs	r2, r0, #1
 800f8d6:	b2d2      	uxtb	r2, r2
 800f8d8:	f04f 0c01 	mov.w	ip, #1
 800f8dc:	e001      	b.n	800f8e2 <uxr_stream_id_from_raw+0x16>
 800f8de:	4684      	mov	ip, r0
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	f360 0307 	bfi	r3, r0, #0, #8
 800f8e8:	f362 230f 	bfi	r3, r2, #8, #8
 800f8ec:	f36c 4317 	bfi	r3, ip, #16, #8
 800f8f0:	f361 631f 	bfi	r3, r1, #24, #8
 800f8f4:	b2da      	uxtb	r2, r3
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	f362 0007 	bfi	r0, r2, #0, #8
 800f8fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f900:	f362 200f 	bfi	r0, r2, #8, #8
 800f904:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f908:	f362 4017 	bfi	r0, r2, #16, #8
 800f90c:	0e1b      	lsrs	r3, r3, #24
 800f90e:	f363 601f 	bfi	r0, r3, #24, #8
 800f912:	b002      	add	sp, #8
 800f914:	4770      	bx	lr
 800f916:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800f91a:	f04f 0c02 	mov.w	ip, #2
 800f91e:	e7e0      	b.n	800f8e2 <uxr_stream_id_from_raw+0x16>

0800f920 <uxr_init_stream_storage>:
 800f920:	2300      	movs	r3, #0
 800f922:	7403      	strb	r3, [r0, #16]
 800f924:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800f928:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800f92c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop

0800f934 <uxr_reset_stream_storage>:
 800f934:	b570      	push	{r4, r5, r6, lr}
 800f936:	7c03      	ldrb	r3, [r0, #16]
 800f938:	4604      	mov	r4, r0
 800f93a:	b153      	cbz	r3, 800f952 <uxr_reset_stream_storage+0x1e>
 800f93c:	4606      	mov	r6, r0
 800f93e:	2500      	movs	r5, #0
 800f940:	4630      	mov	r0, r6
 800f942:	f006 fb2b 	bl	8015f9c <uxr_reset_output_best_effort_stream>
 800f946:	7c23      	ldrb	r3, [r4, #16]
 800f948:	3501      	adds	r5, #1
 800f94a:	42ab      	cmp	r3, r5
 800f94c:	f106 0610 	add.w	r6, r6, #16
 800f950:	d8f6      	bhi.n	800f940 <uxr_reset_stream_storage+0xc>
 800f952:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f956:	b163      	cbz	r3, 800f972 <uxr_reset_stream_storage+0x3e>
 800f958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f95c:	2500      	movs	r5, #0
 800f95e:	4630      	mov	r0, r6
 800f960:	f006 f91e 	bl	8015ba0 <uxr_reset_input_best_effort_stream>
 800f964:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f968:	3501      	adds	r5, #1
 800f96a:	42ab      	cmp	r3, r5
 800f96c:	f106 0602 	add.w	r6, r6, #2
 800f970:	d8f5      	bhi.n	800f95e <uxr_reset_stream_storage+0x2a>
 800f972:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f976:	b163      	cbz	r3, 800f992 <uxr_reset_stream_storage+0x5e>
 800f978:	f104 0618 	add.w	r6, r4, #24
 800f97c:	2500      	movs	r5, #0
 800f97e:	4630      	mov	r0, r6
 800f980:	f006 fbb8 	bl	80160f4 <uxr_reset_output_reliable_stream>
 800f984:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f988:	3501      	adds	r5, #1
 800f98a:	42ab      	cmp	r3, r5
 800f98c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800f990:	d8f5      	bhi.n	800f97e <uxr_reset_stream_storage+0x4a>
 800f992:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f996:	b163      	cbz	r3, 800f9b2 <uxr_reset_stream_storage+0x7e>
 800f998:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800f99c:	2500      	movs	r5, #0
 800f99e:	4630      	mov	r0, r6
 800f9a0:	f006 f972 	bl	8015c88 <uxr_reset_input_reliable_stream>
 800f9a4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f9a8:	3501      	adds	r5, #1
 800f9aa:	42ab      	cmp	r3, r5
 800f9ac:	f106 0618 	add.w	r6, r6, #24
 800f9b0:	d8f5      	bhi.n	800f99e <uxr_reset_stream_storage+0x6a>
 800f9b2:	bd70      	pop	{r4, r5, r6, pc}

0800f9b4 <uxr_add_output_best_effort_buffer>:
 800f9b4:	b510      	push	{r4, lr}
 800f9b6:	7c04      	ldrb	r4, [r0, #16]
 800f9b8:	f104 0c01 	add.w	ip, r4, #1
 800f9bc:	b082      	sub	sp, #8
 800f9be:	f880 c010 	strb.w	ip, [r0, #16]
 800f9c2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f9c6:	f006 fadf 	bl	8015f88 <uxr_init_output_best_effort_stream>
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	4611      	mov	r1, r2
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	b002      	add	sp, #8
 800f9d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9d6:	f7ff bf4f 	b.w	800f878 <uxr_stream_id>
 800f9da:	bf00      	nop

0800f9dc <uxr_add_output_reliable_buffer>:
 800f9dc:	b510      	push	{r4, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	4684      	mov	ip, r0
 800f9e2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f9e6:	9000      	str	r0, [sp, #0]
 800f9e8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800f9ec:	2028      	movs	r0, #40	@ 0x28
 800f9ee:	fb00 c004 	mla	r0, r0, r4, ip
 800f9f2:	f104 0e01 	add.w	lr, r4, #1
 800f9f6:	3018      	adds	r0, #24
 800f9f8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800f9fc:	f006 fb42 	bl	8016084 <uxr_init_output_reliable_stream>
 800fa00:	2201      	movs	r2, #1
 800fa02:	2102      	movs	r1, #2
 800fa04:	4620      	mov	r0, r4
 800fa06:	b004      	add	sp, #16
 800fa08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa0c:	f7ff bf34 	b.w	800f878 <uxr_stream_id>

0800fa10 <uxr_add_input_best_effort_buffer>:
 800fa10:	b510      	push	{r4, lr}
 800fa12:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800fa16:	4603      	mov	r3, r0
 800fa18:	1c62      	adds	r2, r4, #1
 800fa1a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800fa1e:	b082      	sub	sp, #8
 800fa20:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800fa24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa28:	f006 f8b6 	bl	8015b98 <uxr_init_input_best_effort_stream>
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	2101      	movs	r1, #1
 800fa30:	4620      	mov	r0, r4
 800fa32:	b002      	add	sp, #8
 800fa34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa38:	f7ff bf1e 	b.w	800f878 <uxr_stream_id>

0800fa3c <uxr_add_input_reliable_buffer>:
 800fa3c:	b510      	push	{r4, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	4684      	mov	ip, r0
 800fa42:	9806      	ldr	r0, [sp, #24]
 800fa44:	9000      	str	r0, [sp, #0]
 800fa46:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800fa4a:	2018      	movs	r0, #24
 800fa4c:	fb00 c004 	mla	r0, r0, r4, ip
 800fa50:	f104 0e01 	add.w	lr, r4, #1
 800fa54:	3048      	adds	r0, #72	@ 0x48
 800fa56:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800fa5a:	f006 f8e9 	bl	8015c30 <uxr_init_input_reliable_stream>
 800fa5e:	2200      	movs	r2, #0
 800fa60:	2102      	movs	r1, #2
 800fa62:	4620      	mov	r0, r4
 800fa64:	b004      	add	sp, #16
 800fa66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa6a:	f7ff bf05 	b.w	800f878 <uxr_stream_id>
 800fa6e:	bf00      	nop

0800fa70 <uxr_get_output_best_effort_stream>:
 800fa70:	7c03      	ldrb	r3, [r0, #16]
 800fa72:	428b      	cmp	r3, r1
 800fa74:	bf8c      	ite	hi
 800fa76:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800fa7a:	2000      	movls	r0, #0
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop

0800fa80 <uxr_get_output_reliable_stream>:
 800fa80:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fa84:	428b      	cmp	r3, r1
 800fa86:	bf83      	ittte	hi
 800fa88:	2328      	movhi	r3, #40	@ 0x28
 800fa8a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fa8e:	3018      	addhi	r0, #24
 800fa90:	2000      	movls	r0, #0
 800fa92:	4770      	bx	lr

0800fa94 <uxr_get_input_best_effort_stream>:
 800fa94:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fa98:	428b      	cmp	r3, r1
 800fa9a:	bf86      	itte	hi
 800fa9c:	3121      	addhi	r1, #33	@ 0x21
 800fa9e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800faa2:	2000      	movls	r0, #0
 800faa4:	4770      	bx	lr
 800faa6:	bf00      	nop

0800faa8 <uxr_get_input_reliable_stream>:
 800faa8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800faac:	428b      	cmp	r3, r1
 800faae:	bf83      	ittte	hi
 800fab0:	2318      	movhi	r3, #24
 800fab2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fab6:	3048      	addhi	r0, #72	@ 0x48
 800fab8:	2000      	movls	r0, #0
 800faba:	4770      	bx	lr

0800fabc <uxr_output_streams_confirmed>:
 800fabc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fac0:	b183      	cbz	r3, 800fae4 <uxr_output_streams_confirmed+0x28>
 800fac2:	b570      	push	{r4, r5, r6, lr}
 800fac4:	4606      	mov	r6, r0
 800fac6:	f100 0518 	add.w	r5, r0, #24
 800faca:	2400      	movs	r4, #0
 800facc:	e001      	b.n	800fad2 <uxr_output_streams_confirmed+0x16>
 800face:	3528      	adds	r5, #40	@ 0x28
 800fad0:	b138      	cbz	r0, 800fae2 <uxr_output_streams_confirmed+0x26>
 800fad2:	4628      	mov	r0, r5
 800fad4:	f006 fd7e 	bl	80165d4 <uxr_is_output_up_to_date>
 800fad8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800fadc:	3401      	adds	r4, #1
 800fade:	42a3      	cmp	r3, r4
 800fae0:	d8f5      	bhi.n	800face <uxr_output_streams_confirmed+0x12>
 800fae2:	bd70      	pop	{r4, r5, r6, pc}
 800fae4:	2001      	movs	r0, #1
 800fae6:	4770      	bx	lr

0800fae8 <uxr_buffer_submessage_header>:
 800fae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faea:	4604      	mov	r4, r0
 800faec:	460e      	mov	r6, r1
 800faee:	2104      	movs	r1, #4
 800faf0:	4615      	mov	r5, r2
 800faf2:	461f      	mov	r7, r3
 800faf4:	f7fb ff36 	bl	800b964 <ucdr_align_to>
 800faf8:	2301      	movs	r3, #1
 800fafa:	ea47 0203 	orr.w	r2, r7, r3
 800fafe:	4631      	mov	r1, r6
 800fb00:	7523      	strb	r3, [r4, #20]
 800fb02:	4620      	mov	r0, r4
 800fb04:	462b      	mov	r3, r5
 800fb06:	f000 fa27 	bl	800ff58 <uxr_serialize_submessage_header>
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f7fb ff40 	bl	800b990 <ucdr_buffer_remaining>
 800fb10:	42a8      	cmp	r0, r5
 800fb12:	bf34      	ite	cc
 800fb14:	2000      	movcc	r0, #0
 800fb16:	2001      	movcs	r0, #1
 800fb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb1a:	bf00      	nop

0800fb1c <uxr_read_submessage_header>:
 800fb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb20:	4604      	mov	r4, r0
 800fb22:	460d      	mov	r5, r1
 800fb24:	2104      	movs	r1, #4
 800fb26:	4616      	mov	r6, r2
 800fb28:	4698      	mov	r8, r3
 800fb2a:	f7fb ff1b 	bl	800b964 <ucdr_align_to>
 800fb2e:	4620      	mov	r0, r4
 800fb30:	f7fb ff2e 	bl	800b990 <ucdr_buffer_remaining>
 800fb34:	2803      	cmp	r0, #3
 800fb36:	bf8c      	ite	hi
 800fb38:	2701      	movhi	r7, #1
 800fb3a:	2700      	movls	r7, #0
 800fb3c:	d802      	bhi.n	800fb44 <uxr_read_submessage_header+0x28>
 800fb3e:	4638      	mov	r0, r7
 800fb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb44:	4633      	mov	r3, r6
 800fb46:	4642      	mov	r2, r8
 800fb48:	4620      	mov	r0, r4
 800fb4a:	4629      	mov	r1, r5
 800fb4c:	f000 fa18 	bl	800ff80 <uxr_deserialize_submessage_header>
 800fb50:	f898 3000 	ldrb.w	r3, [r8]
 800fb54:	f003 0201 	and.w	r2, r3, #1
 800fb58:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fb5c:	f888 3000 	strb.w	r3, [r8]
 800fb60:	7522      	strb	r2, [r4, #20]
 800fb62:	4638      	mov	r0, r7
 800fb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fb68 <uxr_submessage_padding>:
 800fb68:	f010 0003 	ands.w	r0, r0, #3
 800fb6c:	bf18      	it	ne
 800fb6e:	f1c0 0004 	rsbne	r0, r0, #4
 800fb72:	4770      	bx	lr

0800fb74 <uxr_millis>:
 800fb74:	b510      	push	{r4, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	4669      	mov	r1, sp
 800fb7a:	2001      	movs	r0, #1
 800fb7c:	f7f2 fc0c 	bl	8002398 <clock_gettime>
 800fb80:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800fb84:	4906      	ldr	r1, [pc, #24]	@ (800fba0 <uxr_millis+0x2c>)
 800fb86:	fba0 0301 	umull	r0, r3, r0, r1
 800fb8a:	1900      	adds	r0, r0, r4
 800fb8c:	fb01 3102 	mla	r1, r1, r2, r3
 800fb90:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800fb94:	4a03      	ldr	r2, [pc, #12]	@ (800fba4 <uxr_millis+0x30>)
 800fb96:	2300      	movs	r3, #0
 800fb98:	f7f1 f828 	bl	8000bec <__aeabi_ldivmod>
 800fb9c:	b004      	add	sp, #16
 800fb9e:	bd10      	pop	{r4, pc}
 800fba0:	3b9aca00 	.word	0x3b9aca00
 800fba4:	000f4240 	.word	0x000f4240

0800fba8 <uxr_nanos>:
 800fba8:	b510      	push	{r4, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	4669      	mov	r1, sp
 800fbae:	2001      	movs	r0, #1
 800fbb0:	f7f2 fbf2 	bl	8002398 <clock_gettime>
 800fbb4:	4a06      	ldr	r2, [pc, #24]	@ (800fbd0 <uxr_nanos+0x28>)
 800fbb6:	9800      	ldr	r0, [sp, #0]
 800fbb8:	9902      	ldr	r1, [sp, #8]
 800fbba:	9c01      	ldr	r4, [sp, #4]
 800fbbc:	fba0 0302 	umull	r0, r3, r0, r2
 800fbc0:	1840      	adds	r0, r0, r1
 800fbc2:	fb02 3304 	mla	r3, r2, r4, r3
 800fbc6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800fbca:	b004      	add	sp, #16
 800fbcc:	bd10      	pop	{r4, pc}
 800fbce:	bf00      	nop
 800fbd0:	3b9aca00 	.word	0x3b9aca00

0800fbd4 <on_full_output_buffer_fragmented>:
 800fbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd8:	460c      	mov	r4, r1
 800fbda:	b08a      	sub	sp, #40	@ 0x28
 800fbdc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800fbe0:	4606      	mov	r6, r0
 800fbe2:	f104 0008 	add.w	r0, r4, #8
 800fbe6:	f7ff ff4b 	bl	800fa80 <uxr_get_output_reliable_stream>
 800fbea:	4605      	mov	r5, r0
 800fbec:	f006 fcfc 	bl	80165e8 <get_available_free_slots>
 800fbf0:	b968      	cbnz	r0, 800fc0e <on_full_output_buffer_fragmented+0x3a>
 800fbf2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	4798      	blx	r3
 800fbfa:	b918      	cbnz	r0, 800fc04 <on_full_output_buffer_fragmented+0x30>
 800fbfc:	2001      	movs	r0, #1
 800fbfe:	b00a      	add	sp, #40	@ 0x28
 800fc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc04:	4628      	mov	r0, r5
 800fc06:	f006 fcef 	bl	80165e8 <get_available_free_slots>
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	d0f6      	beq.n	800fbfc <on_full_output_buffer_fragmented+0x28>
 800fc0e:	8929      	ldrh	r1, [r5, #8]
 800fc10:	89eb      	ldrh	r3, [r5, #14]
 800fc12:	7b28      	ldrb	r0, [r5, #12]
 800fc14:	686a      	ldr	r2, [r5, #4]
 800fc16:	fbb2 f8f1 	udiv	r8, r2, r1
 800fc1a:	fbb3 f2f1 	udiv	r2, r3, r1
 800fc1e:	fb01 3112 	mls	r1, r1, r2, r3
 800fc22:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800fc26:	b289      	uxth	r1, r1
 800fc28:	fb08 f101 	mul.w	r1, r8, r1
 800fc2c:	30fc      	adds	r0, #252	@ 0xfc
 800fc2e:	f1a8 0804 	sub.w	r8, r8, #4
 800fc32:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800fc36:	4440      	add	r0, r8
 800fc38:	b287      	uxth	r7, r0
 800fc3a:	1bdb      	subs	r3, r3, r7
 800fc3c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800fc40:	682b      	ldr	r3, [r5, #0]
 800fc42:	3104      	adds	r1, #4
 800fc44:	4419      	add	r1, r3
 800fc46:	4642      	mov	r2, r8
 800fc48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	a802      	add	r0, sp, #8
 800fc50:	2300      	movs	r3, #0
 800fc52:	f7fb fe5b 	bl	800b90c <ucdr_init_buffer_origin_offset>
 800fc56:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800fc5a:	f102 0308 	add.w	r3, r2, #8
 800fc5e:	4543      	cmp	r3, r8
 800fc60:	d928      	bls.n	800fcb4 <on_full_output_buffer_fragmented+0xe0>
 800fc62:	463a      	mov	r2, r7
 800fc64:	2300      	movs	r3, #0
 800fc66:	210d      	movs	r1, #13
 800fc68:	a802      	add	r0, sp, #8
 800fc6a:	f7ff ff3d 	bl	800fae8 <uxr_buffer_submessage_header>
 800fc6e:	8929      	ldrh	r1, [r5, #8]
 800fc70:	89eb      	ldrh	r3, [r5, #14]
 800fc72:	fbb3 f2f1 	udiv	r2, r3, r1
 800fc76:	fb01 3312 	mls	r3, r1, r2, r3
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	686a      	ldr	r2, [r5, #4]
 800fc7e:	fbb2 f2f1 	udiv	r2, r2, r1
 800fc82:	fb02 f303 	mul.w	r3, r2, r3
 800fc86:	682a      	ldr	r2, [r5, #0]
 800fc88:	f842 8003 	str.w	r8, [r2, r3]
 800fc8c:	89e8      	ldrh	r0, [r5, #14]
 800fc8e:	2101      	movs	r1, #1
 800fc90:	f006 fdfa 	bl	8016888 <uxr_seq_num_add>
 800fc94:	9904      	ldr	r1, [sp, #16]
 800fc96:	9a03      	ldr	r2, [sp, #12]
 800fc98:	81e8      	strh	r0, [r5, #14]
 800fc9a:	1a52      	subs	r2, r2, r1
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	f7fb fe47 	bl	800b930 <ucdr_init_buffer>
 800fca2:	4630      	mov	r0, r6
 800fca4:	490f      	ldr	r1, [pc, #60]	@ (800fce4 <on_full_output_buffer_fragmented+0x110>)
 800fca6:	4622      	mov	r2, r4
 800fca8:	f7fb fe16 	bl	800b8d8 <ucdr_set_on_full_buffer_callback>
 800fcac:	2000      	movs	r0, #0
 800fcae:	b00a      	add	sp, #40	@ 0x28
 800fcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb4:	b292      	uxth	r2, r2
 800fcb6:	2302      	movs	r3, #2
 800fcb8:	210d      	movs	r1, #13
 800fcba:	a802      	add	r0, sp, #8
 800fcbc:	f7ff ff14 	bl	800fae8 <uxr_buffer_submessage_header>
 800fcc0:	8928      	ldrh	r0, [r5, #8]
 800fcc2:	89eb      	ldrh	r3, [r5, #14]
 800fcc4:	fbb3 f1f0 	udiv	r1, r3, r0
 800fcc8:	fb00 3311 	mls	r3, r0, r1, r3
 800fccc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800fcd0:	6869      	ldr	r1, [r5, #4]
 800fcd2:	fbb1 f1f0 	udiv	r1, r1, r0
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	fb01 f303 	mul.w	r3, r1, r3
 800fcdc:	6829      	ldr	r1, [r5, #0]
 800fcde:	3208      	adds	r2, #8
 800fce0:	50ca      	str	r2, [r1, r3]
 800fce2:	e7d3      	b.n	800fc8c <on_full_output_buffer_fragmented+0xb8>
 800fce4:	0800fbd5 	.word	0x0800fbd5

0800fce8 <uxr_prepare_output_stream>:
 800fce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcea:	b087      	sub	sp, #28
 800fcec:	2707      	movs	r7, #7
 800fcee:	9202      	str	r2, [sp, #8]
 800fcf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fcf2:	9103      	str	r1, [sp, #12]
 800fcf4:	2500      	movs	r5, #0
 800fcf6:	3204      	adds	r2, #4
 800fcf8:	e9cd 7500 	strd	r7, r5, [sp]
 800fcfc:	461c      	mov	r4, r3
 800fcfe:	4606      	mov	r6, r0
 800fd00:	f7ff fc54 	bl	800f5ac <uxr_prepare_stream_to_write_submessage>
 800fd04:	f080 0201 	eor.w	r2, r0, #1
 800fd08:	b2d2      	uxtb	r2, r2
 800fd0a:	75a2      	strb	r2, [r4, #22]
 800fd0c:	b112      	cbz	r2, 800fd14 <uxr_prepare_output_stream+0x2c>
 800fd0e:	4628      	mov	r0, r5
 800fd10:	b007      	add	sp, #28
 800fd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd14:	aa05      	add	r2, sp, #20
 800fd16:	9902      	ldr	r1, [sp, #8]
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f7ff fd7d 	bl	800f818 <uxr_init_base_object_request>
 800fd1e:	a905      	add	r1, sp, #20
 800fd20:	4605      	mov	r5, r0
 800fd22:	4620      	mov	r0, r4
 800fd24:	f001 f88c 	bl	8010e40 <uxr_serialize_WRITE_DATA_Payload_Data>
 800fd28:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800fd2c:	69a6      	ldr	r6, [r4, #24]
 800fd2e:	69e7      	ldr	r7, [r4, #28]
 800fd30:	1a52      	subs	r2, r2, r1
 800fd32:	4620      	mov	r0, r4
 800fd34:	f7fb fdfc 	bl	800b930 <ucdr_init_buffer>
 800fd38:	4620      	mov	r0, r4
 800fd3a:	463a      	mov	r2, r7
 800fd3c:	4631      	mov	r1, r6
 800fd3e:	f7fb fdcb 	bl	800b8d8 <ucdr_set_on_full_buffer_callback>
 800fd42:	4628      	mov	r0, r5
 800fd44:	b007      	add	sp, #28
 800fd46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd48 <uxr_prepare_output_stream_fragmented>:
 800fd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4c:	b091      	sub	sp, #68	@ 0x44
 800fd4e:	4605      	mov	r5, r0
 800fd50:	9105      	str	r1, [sp, #20]
 800fd52:	3008      	adds	r0, #8
 800fd54:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800fd58:	461e      	mov	r6, r3
 800fd5a:	9204      	str	r2, [sp, #16]
 800fd5c:	f7ff fe90 	bl	800fa80 <uxr_get_output_reliable_stream>
 800fd60:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	f000 8091 	beq.w	800fe8c <uxr_prepare_output_stream_fragmented+0x144>
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	f000 808d 	beq.w	800fe8c <uxr_prepare_output_stream_fragmented+0x144>
 800fd72:	f006 fc39 	bl	80165e8 <get_available_free_slots>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	f000 8083 	beq.w	800fe82 <uxr_prepare_output_stream_fragmented+0x13a>
 800fd7c:	8922      	ldrh	r2, [r4, #8]
 800fd7e:	89e7      	ldrh	r7, [r4, #14]
 800fd80:	fbb7 f9f2 	udiv	r9, r7, r2
 800fd84:	fb02 7919 	mls	r9, r2, r9, r7
 800fd88:	fa1f f989 	uxth.w	r9, r9
 800fd8c:	6863      	ldr	r3, [r4, #4]
 800fd8e:	fbb3 f2f2 	udiv	r2, r3, r2
 800fd92:	6823      	ldr	r3, [r4, #0]
 800fd94:	9203      	str	r2, [sp, #12]
 800fd96:	fb02 f909 	mul.w	r9, r2, r9
 800fd9a:	f109 0904 	add.w	r9, r9, #4
 800fd9e:	4499      	add	r9, r3
 800fda0:	7b23      	ldrb	r3, [r4, #12]
 800fda2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800fda6:	4543      	cmp	r3, r8
 800fda8:	f1a2 0b04 	sub.w	fp, r2, #4
 800fdac:	d37a      	bcc.n	800fea4 <uxr_prepare_output_stream_fragmented+0x15c>
 800fdae:	f1ab 0a04 	sub.w	sl, fp, #4
 800fdb2:	ebaa 0a03 	sub.w	sl, sl, r3
 800fdb6:	465a      	mov	r2, fp
 800fdb8:	2300      	movs	r3, #0
 800fdba:	4649      	mov	r1, r9
 800fdbc:	a808      	add	r0, sp, #32
 800fdbe:	f8cd 8000 	str.w	r8, [sp]
 800fdc2:	f7fb fda3 	bl	800b90c <ucdr_init_buffer_origin_offset>
 800fdc6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800fdc8:	fa1f fa8a 	uxth.w	sl, sl
 800fdcc:	4652      	mov	r2, sl
 800fdce:	f103 0a08 	add.w	sl, r3, #8
 800fdd2:	45da      	cmp	sl, fp
 800fdd4:	bf34      	ite	cc
 800fdd6:	2302      	movcc	r3, #2
 800fdd8:	2300      	movcs	r3, #0
 800fdda:	210d      	movs	r1, #13
 800fddc:	a808      	add	r0, sp, #32
 800fdde:	f7ff fe83 	bl	800fae8 <uxr_buffer_submessage_header>
 800fde2:	8921      	ldrh	r1, [r4, #8]
 800fde4:	fbb7 f2f1 	udiv	r2, r7, r1
 800fde8:	fb01 7212 	mls	r2, r1, r2, r7
 800fdec:	b292      	uxth	r2, r2
 800fdee:	6863      	ldr	r3, [r4, #4]
 800fdf0:	fbb3 f3f1 	udiv	r3, r3, r1
 800fdf4:	fb02 f303 	mul.w	r3, r2, r3
 800fdf8:	6822      	ldr	r2, [r4, #0]
 800fdfa:	4638      	mov	r0, r7
 800fdfc:	f842 b003 	str.w	fp, [r2, r3]
 800fe00:	2101      	movs	r1, #1
 800fe02:	f006 fd41 	bl	8016888 <uxr_seq_num_add>
 800fe06:	9b03      	ldr	r3, [sp, #12]
 800fe08:	f108 0104 	add.w	r1, r8, #4
 800fe0c:	f1a3 0208 	sub.w	r2, r3, #8
 800fe10:	eba2 0208 	sub.w	r2, r2, r8
 800fe14:	4449      	add	r1, r9
 800fe16:	4607      	mov	r7, r0
 800fe18:	4630      	mov	r0, r6
 800fe1a:	f7fb fd89 	bl	800b930 <ucdr_init_buffer>
 800fe1e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800fe20:	81e7      	strh	r7, [r4, #14]
 800fe22:	1d1a      	adds	r2, r3, #4
 800fe24:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800fe28:	bf28      	it	cs
 800fe2a:	2200      	movcs	r2, #0
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	b292      	uxth	r2, r2
 800fe30:	2107      	movs	r1, #7
 800fe32:	4630      	mov	r0, r6
 800fe34:	f7ff fe58 	bl	800fae8 <uxr_buffer_submessage_header>
 800fe38:	9904      	ldr	r1, [sp, #16]
 800fe3a:	aa07      	add	r2, sp, #28
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	f7ff fceb 	bl	800f818 <uxr_init_base_object_request>
 800fe42:	4604      	mov	r4, r0
 800fe44:	b318      	cbz	r0, 800fe8e <uxr_prepare_output_stream_fragmented+0x146>
 800fe46:	a907      	add	r1, sp, #28
 800fe48:	4630      	mov	r0, r6
 800fe4a:	f000 fff9 	bl	8010e40 <uxr_serialize_WRITE_DATA_Payload_Data>
 800fe4e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800fe52:	4630      	mov	r0, r6
 800fe54:	1a52      	subs	r2, r2, r1
 800fe56:	f7fb fd6b 	bl	800b930 <ucdr_init_buffer>
 800fe5a:	9b05      	ldr	r3, [sp, #20]
 800fe5c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800fe60:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800fe62:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800fe66:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800fe68:	491b      	ldr	r1, [pc, #108]	@ (800fed8 <uxr_prepare_output_stream_fragmented+0x190>)
 800fe6a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800fe6e:	4630      	mov	r0, r6
 800fe70:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800fe74:	462a      	mov	r2, r5
 800fe76:	f7fb fd2f 	bl	800b8d8 <ucdr_set_on_full_buffer_callback>
 800fe7a:	4620      	mov	r0, r4
 800fe7c:	b011      	add	sp, #68	@ 0x44
 800fe7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe82:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800fe84:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800fe86:	4628      	mov	r0, r5
 800fe88:	4798      	blx	r3
 800fe8a:	b920      	cbnz	r0, 800fe96 <uxr_prepare_output_stream_fragmented+0x14e>
 800fe8c:	2400      	movs	r4, #0
 800fe8e:	4620      	mov	r0, r4
 800fe90:	b011      	add	sp, #68	@ 0x44
 800fe92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe96:	4620      	mov	r0, r4
 800fe98:	f006 fba6 	bl	80165e8 <get_available_free_slots>
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	f47f af6d 	bne.w	800fd7c <uxr_prepare_output_stream_fragmented+0x34>
 800fea2:	e7f3      	b.n	800fe8c <uxr_prepare_output_stream_fragmented+0x144>
 800fea4:	4638      	mov	r0, r7
 800fea6:	2101      	movs	r1, #1
 800fea8:	f006 fcee 	bl	8016888 <uxr_seq_num_add>
 800feac:	8921      	ldrh	r1, [r4, #8]
 800feae:	fbb0 f2f1 	udiv	r2, r0, r1
 800feb2:	fb01 0912 	mls	r9, r1, r2, r0
 800feb6:	fa1f f289 	uxth.w	r2, r9
 800feba:	6863      	ldr	r3, [r4, #4]
 800febc:	fbb3 f9f1 	udiv	r9, r3, r1
 800fec0:	6823      	ldr	r3, [r4, #0]
 800fec2:	fb02 f909 	mul.w	r9, r2, r9
 800fec6:	f109 0904 	add.w	r9, r9, #4
 800feca:	4499      	add	r9, r3
 800fecc:	4607      	mov	r7, r0
 800fece:	7b23      	ldrb	r3, [r4, #12]
 800fed0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800fed4:	e76b      	b.n	800fdae <uxr_prepare_output_stream_fragmented+0x66>
 800fed6:	bf00      	nop
 800fed8:	0800fbd5 	.word	0x0800fbd5

0800fedc <uxr_serialize_message_header>:
 800fedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fede:	b083      	sub	sp, #12
 800fee0:	4616      	mov	r6, r2
 800fee2:	4604      	mov	r4, r0
 800fee4:	9301      	str	r3, [sp, #4]
 800fee6:	460d      	mov	r5, r1
 800fee8:	9f08      	ldr	r7, [sp, #32]
 800feea:	f7fa fa3f 	bl	800a36c <ucdr_serialize_uint8_t>
 800feee:	4631      	mov	r1, r6
 800fef0:	4620      	mov	r0, r4
 800fef2:	f7fa fa3b 	bl	800a36c <ucdr_serialize_uint8_t>
 800fef6:	9a01      	ldr	r2, [sp, #4]
 800fef8:	2101      	movs	r1, #1
 800fefa:	4620      	mov	r0, r4
 800fefc:	f7fa fae2 	bl	800a4c4 <ucdr_serialize_endian_uint16_t>
 800ff00:	062b      	lsls	r3, r5, #24
 800ff02:	d501      	bpl.n	800ff08 <uxr_serialize_message_header+0x2c>
 800ff04:	b003      	add	sp, #12
 800ff06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff08:	2204      	movs	r2, #4
 800ff0a:	4639      	mov	r1, r7
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	b003      	add	sp, #12
 800ff10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff14:	f7fe b822 	b.w	800df5c <ucdr_serialize_array_uint8_t>

0800ff18 <uxr_deserialize_message_header>:
 800ff18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	4616      	mov	r6, r2
 800ff1e:	4604      	mov	r4, r0
 800ff20:	9301      	str	r3, [sp, #4]
 800ff22:	460d      	mov	r5, r1
 800ff24:	9f08      	ldr	r7, [sp, #32]
 800ff26:	f7fa fa37 	bl	800a398 <ucdr_deserialize_uint8_t>
 800ff2a:	4631      	mov	r1, r6
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	f7fa fa33 	bl	800a398 <ucdr_deserialize_uint8_t>
 800ff32:	9a01      	ldr	r2, [sp, #4]
 800ff34:	2101      	movs	r1, #1
 800ff36:	4620      	mov	r0, r4
 800ff38:	f7fa fbb8 	bl	800a6ac <ucdr_deserialize_endian_uint16_t>
 800ff3c:	f995 3000 	ldrsb.w	r3, [r5]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	da01      	bge.n	800ff48 <uxr_deserialize_message_header+0x30>
 800ff44:	b003      	add	sp, #12
 800ff46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff48:	2204      	movs	r2, #4
 800ff4a:	4639      	mov	r1, r7
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	b003      	add	sp, #12
 800ff50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff54:	f7fe b866 	b.w	800e024 <ucdr_deserialize_array_uint8_t>

0800ff58 <uxr_serialize_submessage_header>:
 800ff58:	b530      	push	{r4, r5, lr}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	4615      	mov	r5, r2
 800ff5e:	4604      	mov	r4, r0
 800ff60:	9301      	str	r3, [sp, #4]
 800ff62:	f7fa fa03 	bl	800a36c <ucdr_serialize_uint8_t>
 800ff66:	4629      	mov	r1, r5
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f7fa f9ff 	bl	800a36c <ucdr_serialize_uint8_t>
 800ff6e:	9a01      	ldr	r2, [sp, #4]
 800ff70:	2101      	movs	r1, #1
 800ff72:	4620      	mov	r0, r4
 800ff74:	b003      	add	sp, #12
 800ff76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff7a:	f7fa baa3 	b.w	800a4c4 <ucdr_serialize_endian_uint16_t>
 800ff7e:	bf00      	nop

0800ff80 <uxr_deserialize_submessage_header>:
 800ff80:	b530      	push	{r4, r5, lr}
 800ff82:	b083      	sub	sp, #12
 800ff84:	4615      	mov	r5, r2
 800ff86:	4604      	mov	r4, r0
 800ff88:	9301      	str	r3, [sp, #4]
 800ff8a:	f7fa fa05 	bl	800a398 <ucdr_deserialize_uint8_t>
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4620      	mov	r0, r4
 800ff92:	f7fa fa01 	bl	800a398 <ucdr_deserialize_uint8_t>
 800ff96:	9a01      	ldr	r2, [sp, #4]
 800ff98:	2101      	movs	r1, #1
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	b003      	add	sp, #12
 800ff9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffa2:	f7fa bb83 	b.w	800a6ac <ucdr_deserialize_endian_uint16_t>
 800ffa6:	bf00      	nop

0800ffa8 <uxr_serialize_CLIENT_Representation>:
 800ffa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffac:	2204      	movs	r2, #4
 800ffae:	460e      	mov	r6, r1
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	f7fd ffd3 	bl	800df5c <ucdr_serialize_array_uint8_t>
 800ffb6:	2202      	movs	r2, #2
 800ffb8:	4607      	mov	r7, r0
 800ffba:	1d31      	adds	r1, r6, #4
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	f7fd ffcd 	bl	800df5c <ucdr_serialize_array_uint8_t>
 800ffc2:	4038      	ands	r0, r7
 800ffc4:	2202      	movs	r2, #2
 800ffc6:	1db1      	adds	r1, r6, #6
 800ffc8:	b2c7      	uxtb	r7, r0
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f7fd ffc6 	bl	800df5c <ucdr_serialize_array_uint8_t>
 800ffd0:	2204      	movs	r2, #4
 800ffd2:	4007      	ands	r7, r0
 800ffd4:	f106 0108 	add.w	r1, r6, #8
 800ffd8:	4628      	mov	r0, r5
 800ffda:	f7fd ffbf 	bl	800df5c <ucdr_serialize_array_uint8_t>
 800ffde:	7b31      	ldrb	r1, [r6, #12]
 800ffe0:	4007      	ands	r7, r0
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	f7fa f9c2 	bl	800a36c <ucdr_serialize_uint8_t>
 800ffe8:	7b71      	ldrb	r1, [r6, #13]
 800ffea:	4007      	ands	r7, r0
 800ffec:	4628      	mov	r0, r5
 800ffee:	f7fa f98f 	bl	800a310 <ucdr_serialize_bool>
 800fff2:	7b73      	ldrb	r3, [r6, #13]
 800fff4:	ea07 0800 	and.w	r8, r7, r0
 800fff8:	b93b      	cbnz	r3, 801000a <uxr_serialize_CLIENT_Representation+0x62>
 800fffa:	8bb1      	ldrh	r1, [r6, #28]
 800fffc:	4628      	mov	r0, r5
 800fffe:	f7fa f9e1 	bl	800a3c4 <ucdr_serialize_uint16_t>
 8010002:	ea08 0000 	and.w	r0, r8, r0
 8010006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801000a:	6931      	ldr	r1, [r6, #16]
 801000c:	4628      	mov	r0, r5
 801000e:	f7fa fbc3 	bl	800a798 <ucdr_serialize_uint32_t>
 8010012:	6933      	ldr	r3, [r6, #16]
 8010014:	b1e3      	cbz	r3, 8010050 <uxr_serialize_CLIENT_Representation+0xa8>
 8010016:	b1c0      	cbz	r0, 801004a <uxr_serialize_CLIENT_Representation+0xa2>
 8010018:	4637      	mov	r7, r6
 801001a:	f04f 0900 	mov.w	r9, #0
 801001e:	e001      	b.n	8010024 <uxr_serialize_CLIENT_Representation+0x7c>
 8010020:	3708      	adds	r7, #8
 8010022:	b194      	cbz	r4, 801004a <uxr_serialize_CLIENT_Representation+0xa2>
 8010024:	6979      	ldr	r1, [r7, #20]
 8010026:	4628      	mov	r0, r5
 8010028:	f005 fcdc 	bl	80159e4 <ucdr_serialize_string>
 801002c:	69b9      	ldr	r1, [r7, #24]
 801002e:	4604      	mov	r4, r0
 8010030:	4628      	mov	r0, r5
 8010032:	f005 fcd7 	bl	80159e4 <ucdr_serialize_string>
 8010036:	6933      	ldr	r3, [r6, #16]
 8010038:	f109 0901 	add.w	r9, r9, #1
 801003c:	4004      	ands	r4, r0
 801003e:	4599      	cmp	r9, r3
 8010040:	b2e4      	uxtb	r4, r4
 8010042:	d3ed      	bcc.n	8010020 <uxr_serialize_CLIENT_Representation+0x78>
 8010044:	ea08 0804 	and.w	r8, r8, r4
 8010048:	e7d7      	b.n	800fffa <uxr_serialize_CLIENT_Representation+0x52>
 801004a:	f04f 0800 	mov.w	r8, #0
 801004e:	e7d4      	b.n	800fffa <uxr_serialize_CLIENT_Representation+0x52>
 8010050:	ea08 0800 	and.w	r8, r8, r0
 8010054:	e7d1      	b.n	800fffa <uxr_serialize_CLIENT_Representation+0x52>
 8010056:	bf00      	nop

08010058 <uxr_deserialize_CLIENT_Representation>:
 8010058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801005c:	2204      	movs	r2, #4
 801005e:	460c      	mov	r4, r1
 8010060:	4605      	mov	r5, r0
 8010062:	f7fd ffdf 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010066:	2202      	movs	r2, #2
 8010068:	4607      	mov	r7, r0
 801006a:	1d21      	adds	r1, r4, #4
 801006c:	4628      	mov	r0, r5
 801006e:	f7fd ffd9 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010072:	4038      	ands	r0, r7
 8010074:	2202      	movs	r2, #2
 8010076:	1da1      	adds	r1, r4, #6
 8010078:	b2c6      	uxtb	r6, r0
 801007a:	4628      	mov	r0, r5
 801007c:	f7fd ffd2 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010080:	2204      	movs	r2, #4
 8010082:	4006      	ands	r6, r0
 8010084:	f104 0108 	add.w	r1, r4, #8
 8010088:	4628      	mov	r0, r5
 801008a:	f7fd ffcb 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 801008e:	f104 010c 	add.w	r1, r4, #12
 8010092:	4006      	ands	r6, r0
 8010094:	4628      	mov	r0, r5
 8010096:	f7fa f97f 	bl	800a398 <ucdr_deserialize_uint8_t>
 801009a:	f104 010d 	add.w	r1, r4, #13
 801009e:	ea06 0700 	and.w	r7, r6, r0
 80100a2:	4628      	mov	r0, r5
 80100a4:	f7fa f94a 	bl	800a33c <ucdr_deserialize_bool>
 80100a8:	7b63      	ldrb	r3, [r4, #13]
 80100aa:	4007      	ands	r7, r0
 80100ac:	b93b      	cbnz	r3, 80100be <uxr_deserialize_CLIENT_Representation+0x66>
 80100ae:	f104 011c 	add.w	r1, r4, #28
 80100b2:	4628      	mov	r0, r5
 80100b4:	f7fa fa86 	bl	800a5c4 <ucdr_deserialize_uint16_t>
 80100b8:	4038      	ands	r0, r7
 80100ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100be:	f104 0110 	add.w	r1, r4, #16
 80100c2:	4628      	mov	r0, r5
 80100c4:	f7fa fc98 	bl	800a9f8 <ucdr_deserialize_uint32_t>
 80100c8:	6923      	ldr	r3, [r4, #16]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d903      	bls.n	80100d6 <uxr_deserialize_CLIENT_Representation+0x7e>
 80100ce:	2301      	movs	r3, #1
 80100d0:	75ab      	strb	r3, [r5, #22]
 80100d2:	2700      	movs	r7, #0
 80100d4:	e7eb      	b.n	80100ae <uxr_deserialize_CLIENT_Representation+0x56>
 80100d6:	b30b      	cbz	r3, 801011c <uxr_deserialize_CLIENT_Representation+0xc4>
 80100d8:	2800      	cmp	r0, #0
 80100da:	d0fa      	beq.n	80100d2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80100dc:	46a0      	mov	r8, r4
 80100de:	f04f 0900 	mov.w	r9, #0
 80100e2:	e001      	b.n	80100e8 <uxr_deserialize_CLIENT_Representation+0x90>
 80100e4:	2e00      	cmp	r6, #0
 80100e6:	d0f4      	beq.n	80100d2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80100e8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80100ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100f0:	4628      	mov	r0, r5
 80100f2:	f005 fc87 	bl	8015a04 <ucdr_deserialize_string>
 80100f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100fa:	4606      	mov	r6, r0
 80100fc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010100:	4628      	mov	r0, r5
 8010102:	f005 fc7f 	bl	8015a04 <ucdr_deserialize_string>
 8010106:	6923      	ldr	r3, [r4, #16]
 8010108:	f109 0901 	add.w	r9, r9, #1
 801010c:	4006      	ands	r6, r0
 801010e:	4599      	cmp	r9, r3
 8010110:	f108 0808 	add.w	r8, r8, #8
 8010114:	b2f6      	uxtb	r6, r6
 8010116:	d3e5      	bcc.n	80100e4 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010118:	4037      	ands	r7, r6
 801011a:	e7c8      	b.n	80100ae <uxr_deserialize_CLIENT_Representation+0x56>
 801011c:	4007      	ands	r7, r0
 801011e:	e7c6      	b.n	80100ae <uxr_deserialize_CLIENT_Representation+0x56>

08010120 <uxr_serialize_AGENT_Representation>:
 8010120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010124:	2204      	movs	r2, #4
 8010126:	460f      	mov	r7, r1
 8010128:	4605      	mov	r5, r0
 801012a:	f7fd ff17 	bl	800df5c <ucdr_serialize_array_uint8_t>
 801012e:	2202      	movs	r2, #2
 8010130:	4604      	mov	r4, r0
 8010132:	1d39      	adds	r1, r7, #4
 8010134:	4628      	mov	r0, r5
 8010136:	f7fd ff11 	bl	800df5c <ucdr_serialize_array_uint8_t>
 801013a:	4020      	ands	r0, r4
 801013c:	2202      	movs	r2, #2
 801013e:	1db9      	adds	r1, r7, #6
 8010140:	b2c4      	uxtb	r4, r0
 8010142:	4628      	mov	r0, r5
 8010144:	f7fd ff0a 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010148:	7a39      	ldrb	r1, [r7, #8]
 801014a:	4004      	ands	r4, r0
 801014c:	4628      	mov	r0, r5
 801014e:	f7fa f8df 	bl	800a310 <ucdr_serialize_bool>
 8010152:	7a3b      	ldrb	r3, [r7, #8]
 8010154:	ea00 0804 	and.w	r8, r0, r4
 8010158:	b913      	cbnz	r3, 8010160 <uxr_serialize_AGENT_Representation+0x40>
 801015a:	4640      	mov	r0, r8
 801015c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010160:	68f9      	ldr	r1, [r7, #12]
 8010162:	4628      	mov	r0, r5
 8010164:	f7fa fb18 	bl	800a798 <ucdr_serialize_uint32_t>
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	b303      	cbz	r3, 80101ae <uxr_serialize_AGENT_Representation+0x8e>
 801016c:	b1d0      	cbz	r0, 80101a4 <uxr_serialize_AGENT_Representation+0x84>
 801016e:	463e      	mov	r6, r7
 8010170:	f04f 0900 	mov.w	r9, #0
 8010174:	e001      	b.n	801017a <uxr_serialize_AGENT_Representation+0x5a>
 8010176:	3608      	adds	r6, #8
 8010178:	b1a4      	cbz	r4, 80101a4 <uxr_serialize_AGENT_Representation+0x84>
 801017a:	6931      	ldr	r1, [r6, #16]
 801017c:	4628      	mov	r0, r5
 801017e:	f005 fc31 	bl	80159e4 <ucdr_serialize_string>
 8010182:	6971      	ldr	r1, [r6, #20]
 8010184:	4604      	mov	r4, r0
 8010186:	4628      	mov	r0, r5
 8010188:	f005 fc2c 	bl	80159e4 <ucdr_serialize_string>
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	f109 0901 	add.w	r9, r9, #1
 8010192:	4004      	ands	r4, r0
 8010194:	4599      	cmp	r9, r3
 8010196:	b2e4      	uxtb	r4, r4
 8010198:	d3ed      	bcc.n	8010176 <uxr_serialize_AGENT_Representation+0x56>
 801019a:	ea08 0804 	and.w	r8, r8, r4
 801019e:	4640      	mov	r0, r8
 80101a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101a4:	f04f 0800 	mov.w	r8, #0
 80101a8:	4640      	mov	r0, r8
 80101aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101ae:	ea08 0800 	and.w	r8, r8, r0
 80101b2:	e7d2      	b.n	801015a <uxr_serialize_AGENT_Representation+0x3a>

080101b4 <uxr_serialize_DATAWRITER_Representation>:
 80101b4:	b570      	push	{r4, r5, r6, lr}
 80101b6:	460d      	mov	r5, r1
 80101b8:	7809      	ldrb	r1, [r1, #0]
 80101ba:	4606      	mov	r6, r0
 80101bc:	f7fa f8d6 	bl	800a36c <ucdr_serialize_uint8_t>
 80101c0:	4604      	mov	r4, r0
 80101c2:	b130      	cbz	r0, 80101d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80101c4:	782b      	ldrb	r3, [r5, #0]
 80101c6:	2b02      	cmp	r3, #2
 80101c8:	d00c      	beq.n	80101e4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80101ca:	2b03      	cmp	r3, #3
 80101cc:	d010      	beq.n	80101f0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d008      	beq.n	80101e4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80101d2:	2202      	movs	r2, #2
 80101d4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80101d8:	4630      	mov	r0, r6
 80101da:	f7fd febf 	bl	800df5c <ucdr_serialize_array_uint8_t>
 80101de:	4020      	ands	r0, r4
 80101e0:	b2c0      	uxtb	r0, r0
 80101e2:	bd70      	pop	{r4, r5, r6, pc}
 80101e4:	6869      	ldr	r1, [r5, #4]
 80101e6:	4630      	mov	r0, r6
 80101e8:	f005 fbfc 	bl	80159e4 <ucdr_serialize_string>
 80101ec:	4604      	mov	r4, r0
 80101ee:	e7f0      	b.n	80101d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80101f0:	4629      	mov	r1, r5
 80101f2:	4630      	mov	r0, r6
 80101f4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80101f8:	3104      	adds	r1, #4
 80101fa:	f7fe f84d 	bl	800e298 <ucdr_serialize_sequence_uint8_t>
 80101fe:	4604      	mov	r4, r0
 8010200:	e7e7      	b.n	80101d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010202:	bf00      	nop

08010204 <uxr_serialize_ObjectVariant.part.0>:
 8010204:	b570      	push	{r4, r5, r6, lr}
 8010206:	780b      	ldrb	r3, [r1, #0]
 8010208:	3b01      	subs	r3, #1
 801020a:	460c      	mov	r4, r1
 801020c:	4605      	mov	r5, r0
 801020e:	2b0d      	cmp	r3, #13
 8010210:	d854      	bhi.n	80102bc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010212:	e8df f003 	tbb	[pc, r3]
 8010216:	0730      	.short	0x0730
 8010218:	07071b1b 	.word	0x07071b1b
 801021c:	0c530707 	.word	0x0c530707
 8010220:	494e0c0c 	.word	0x494e0c0c
 8010224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010228:	3104      	adds	r1, #4
 801022a:	f7ff bfc3 	b.w	80101b4 <uxr_serialize_DATAWRITER_Representation>
 801022e:	7909      	ldrb	r1, [r1, #4]
 8010230:	f7fa f89c 	bl	800a36c <ucdr_serialize_uint8_t>
 8010234:	b1e8      	cbz	r0, 8010272 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8010236:	7923      	ldrb	r3, [r4, #4]
 8010238:	2b01      	cmp	r3, #1
 801023a:	d001      	beq.n	8010240 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801023c:	2b02      	cmp	r3, #2
 801023e:	d13d      	bne.n	80102bc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010240:	68a1      	ldr	r1, [r4, #8]
 8010242:	4628      	mov	r0, r5
 8010244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010248:	f005 bbcc 	b.w	80159e4 <ucdr_serialize_string>
 801024c:	7909      	ldrb	r1, [r1, #4]
 801024e:	f7fa f88d 	bl	800a36c <ucdr_serialize_uint8_t>
 8010252:	4606      	mov	r6, r0
 8010254:	b120      	cbz	r0, 8010260 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010256:	7923      	ldrb	r3, [r4, #4]
 8010258:	2b02      	cmp	r3, #2
 801025a:	d039      	beq.n	80102d0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801025c:	2b03      	cmp	r3, #3
 801025e:	d02f      	beq.n	80102c0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8010260:	2202      	movs	r2, #2
 8010262:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8010266:	4628      	mov	r0, r5
 8010268:	f7fd fe78 	bl	800df5c <ucdr_serialize_array_uint8_t>
 801026c:	4030      	ands	r0, r6
 801026e:	b2c0      	uxtb	r0, r0
 8010270:	bd70      	pop	{r4, r5, r6, pc}
 8010272:	2000      	movs	r0, #0
 8010274:	bd70      	pop	{r4, r5, r6, pc}
 8010276:	7909      	ldrb	r1, [r1, #4]
 8010278:	f7fa f878 	bl	800a36c <ucdr_serialize_uint8_t>
 801027c:	4606      	mov	r6, r0
 801027e:	b158      	cbz	r0, 8010298 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010280:	7923      	ldrb	r3, [r4, #4]
 8010282:	2b02      	cmp	r3, #2
 8010284:	d003      	beq.n	801028e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8010286:	2b03      	cmp	r3, #3
 8010288:	d028      	beq.n	80102dc <uxr_serialize_ObjectVariant.part.0+0xd8>
 801028a:	2b01      	cmp	r3, #1
 801028c:	d104      	bne.n	8010298 <uxr_serialize_ObjectVariant.part.0+0x94>
 801028e:	68a1      	ldr	r1, [r4, #8]
 8010290:	4628      	mov	r0, r5
 8010292:	f005 fba7 	bl	80159e4 <ucdr_serialize_string>
 8010296:	4606      	mov	r6, r0
 8010298:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801029c:	4628      	mov	r0, r5
 801029e:	f7fa fda1 	bl	800ade4 <ucdr_serialize_int16_t>
 80102a2:	4030      	ands	r0, r6
 80102a4:	b2c0      	uxtb	r0, r0
 80102a6:	bd70      	pop	{r4, r5, r6, pc}
 80102a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102ac:	3104      	adds	r1, #4
 80102ae:	f7ff be7b 	b.w	800ffa8 <uxr_serialize_CLIENT_Representation>
 80102b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102b6:	3104      	adds	r1, #4
 80102b8:	f7ff bf32 	b.w	8010120 <uxr_serialize_AGENT_Representation>
 80102bc:	2001      	movs	r0, #1
 80102be:	bd70      	pop	{r4, r5, r6, pc}
 80102c0:	68a2      	ldr	r2, [r4, #8]
 80102c2:	f104 010c 	add.w	r1, r4, #12
 80102c6:	4628      	mov	r0, r5
 80102c8:	f7fd ffe6 	bl	800e298 <ucdr_serialize_sequence_uint8_t>
 80102cc:	4606      	mov	r6, r0
 80102ce:	e7c7      	b.n	8010260 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80102d0:	68a1      	ldr	r1, [r4, #8]
 80102d2:	4628      	mov	r0, r5
 80102d4:	f005 fb86 	bl	80159e4 <ucdr_serialize_string>
 80102d8:	4606      	mov	r6, r0
 80102da:	e7c1      	b.n	8010260 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80102dc:	68a2      	ldr	r2, [r4, #8]
 80102de:	f104 010c 	add.w	r1, r4, #12
 80102e2:	4628      	mov	r0, r5
 80102e4:	f7fd ffd8 	bl	800e298 <ucdr_serialize_sequence_uint8_t>
 80102e8:	4606      	mov	r6, r0
 80102ea:	e7d5      	b.n	8010298 <uxr_serialize_ObjectVariant.part.0+0x94>

080102ec <uxr_deserialize_DATAWRITER_Representation>:
 80102ec:	b570      	push	{r4, r5, r6, lr}
 80102ee:	4606      	mov	r6, r0
 80102f0:	460d      	mov	r5, r1
 80102f2:	f7fa f851 	bl	800a398 <ucdr_deserialize_uint8_t>
 80102f6:	4604      	mov	r4, r0
 80102f8:	b130      	cbz	r0, 8010308 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80102fa:	782b      	ldrb	r3, [r5, #0]
 80102fc:	2b02      	cmp	r3, #2
 80102fe:	d00c      	beq.n	801031a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010300:	2b03      	cmp	r3, #3
 8010302:	d012      	beq.n	801032a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010304:	2b01      	cmp	r3, #1
 8010306:	d008      	beq.n	801031a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010308:	2202      	movs	r2, #2
 801030a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801030e:	4630      	mov	r0, r6
 8010310:	f7fd fe88 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010314:	4020      	ands	r0, r4
 8010316:	b2c0      	uxtb	r0, r0
 8010318:	bd70      	pop	{r4, r5, r6, pc}
 801031a:	6869      	ldr	r1, [r5, #4]
 801031c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010320:	4630      	mov	r0, r6
 8010322:	f005 fb6f 	bl	8015a04 <ucdr_deserialize_string>
 8010326:	4604      	mov	r4, r0
 8010328:	e7ee      	b.n	8010308 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801032a:	1d2b      	adds	r3, r5, #4
 801032c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010330:	f105 0108 	add.w	r1, r5, #8
 8010334:	4630      	mov	r0, r6
 8010336:	f7fd ffc1 	bl	800e2bc <ucdr_deserialize_sequence_uint8_t>
 801033a:	4604      	mov	r4, r0
 801033c:	e7e4      	b.n	8010308 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801033e:	bf00      	nop

08010340 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010340:	b570      	push	{r4, r5, r6, lr}
 8010342:	460d      	mov	r5, r1
 8010344:	7809      	ldrb	r1, [r1, #0]
 8010346:	4606      	mov	r6, r0
 8010348:	f7f9 ffe2 	bl	800a310 <ucdr_serialize_bool>
 801034c:	782b      	ldrb	r3, [r5, #0]
 801034e:	4604      	mov	r4, r0
 8010350:	b94b      	cbnz	r3, 8010366 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010352:	7a29      	ldrb	r1, [r5, #8]
 8010354:	4630      	mov	r0, r6
 8010356:	f7f9 ffdb 	bl	800a310 <ucdr_serialize_bool>
 801035a:	7a2b      	ldrb	r3, [r5, #8]
 801035c:	4004      	ands	r4, r0
 801035e:	b2e4      	uxtb	r4, r4
 8010360:	b943      	cbnz	r3, 8010374 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8010362:	4620      	mov	r0, r4
 8010364:	bd70      	pop	{r4, r5, r6, pc}
 8010366:	6869      	ldr	r1, [r5, #4]
 8010368:	4630      	mov	r0, r6
 801036a:	f005 fb3b 	bl	80159e4 <ucdr_serialize_string>
 801036e:	4004      	ands	r4, r0
 8010370:	b2e4      	uxtb	r4, r4
 8010372:	e7ee      	b.n	8010352 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010374:	68e9      	ldr	r1, [r5, #12]
 8010376:	4630      	mov	r0, r6
 8010378:	f005 fb34 	bl	80159e4 <ucdr_serialize_string>
 801037c:	4004      	ands	r4, r0
 801037e:	4620      	mov	r0, r4
 8010380:	bd70      	pop	{r4, r5, r6, pc}
 8010382:	bf00      	nop

08010384 <uxr_serialize_OBJK_Topic_Binary>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	460d      	mov	r5, r1
 8010388:	6809      	ldr	r1, [r1, #0]
 801038a:	4606      	mov	r6, r0
 801038c:	f005 fb2a 	bl	80159e4 <ucdr_serialize_string>
 8010390:	7929      	ldrb	r1, [r5, #4]
 8010392:	4604      	mov	r4, r0
 8010394:	4630      	mov	r0, r6
 8010396:	f7f9 ffbb 	bl	800a310 <ucdr_serialize_bool>
 801039a:	792b      	ldrb	r3, [r5, #4]
 801039c:	4004      	ands	r4, r0
 801039e:	b2e4      	uxtb	r4, r4
 80103a0:	b943      	cbnz	r3, 80103b4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80103a2:	7b29      	ldrb	r1, [r5, #12]
 80103a4:	4630      	mov	r0, r6
 80103a6:	f7f9 ffb3 	bl	800a310 <ucdr_serialize_bool>
 80103aa:	7b2b      	ldrb	r3, [r5, #12]
 80103ac:	4004      	ands	r4, r0
 80103ae:	b93b      	cbnz	r3, 80103c0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80103b0:	4620      	mov	r0, r4
 80103b2:	bd70      	pop	{r4, r5, r6, pc}
 80103b4:	68a9      	ldr	r1, [r5, #8]
 80103b6:	4630      	mov	r0, r6
 80103b8:	f005 fb14 	bl	80159e4 <ucdr_serialize_string>
 80103bc:	4004      	ands	r4, r0
 80103be:	e7f0      	b.n	80103a2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80103c0:	6929      	ldr	r1, [r5, #16]
 80103c2:	4630      	mov	r0, r6
 80103c4:	f005 fb0e 	bl	80159e4 <ucdr_serialize_string>
 80103c8:	4004      	ands	r4, r0
 80103ca:	b2e4      	uxtb	r4, r4
 80103cc:	4620      	mov	r0, r4
 80103ce:	bd70      	pop	{r4, r5, r6, pc}

080103d0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80103d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d4:	460c      	mov	r4, r1
 80103d6:	7809      	ldrb	r1, [r1, #0]
 80103d8:	4606      	mov	r6, r0
 80103da:	f7f9 ff99 	bl	800a310 <ucdr_serialize_bool>
 80103de:	7823      	ldrb	r3, [r4, #0]
 80103e0:	4605      	mov	r5, r0
 80103e2:	b96b      	cbnz	r3, 8010400 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80103e4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80103e8:	4630      	mov	r0, r6
 80103ea:	f7f9 ff91 	bl	800a310 <ucdr_serialize_bool>
 80103ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80103f2:	4005      	ands	r5, r0
 80103f4:	b2ed      	uxtb	r5, r5
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d169      	bne.n	80104ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80103fa:	4628      	mov	r0, r5
 80103fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010400:	6861      	ldr	r1, [r4, #4]
 8010402:	4630      	mov	r0, r6
 8010404:	f7fa f9c8 	bl	800a798 <ucdr_serialize_uint32_t>
 8010408:	6863      	ldr	r3, [r4, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d06b      	beq.n	80104e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801040e:	2800      	cmp	r0, #0
 8010410:	d067      	beq.n	80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010412:	68a1      	ldr	r1, [r4, #8]
 8010414:	4630      	mov	r0, r6
 8010416:	f005 fae5 	bl	80159e4 <ucdr_serialize_string>
 801041a:	6863      	ldr	r3, [r4, #4]
 801041c:	2b01      	cmp	r3, #1
 801041e:	d953      	bls.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010420:	2800      	cmp	r0, #0
 8010422:	d05e      	beq.n	80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010424:	68e1      	ldr	r1, [r4, #12]
 8010426:	4630      	mov	r0, r6
 8010428:	f005 fadc 	bl	80159e4 <ucdr_serialize_string>
 801042c:	6863      	ldr	r3, [r4, #4]
 801042e:	2b02      	cmp	r3, #2
 8010430:	d94a      	bls.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010432:	2800      	cmp	r0, #0
 8010434:	d055      	beq.n	80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010436:	6921      	ldr	r1, [r4, #16]
 8010438:	4630      	mov	r0, r6
 801043a:	f005 fad3 	bl	80159e4 <ucdr_serialize_string>
 801043e:	6863      	ldr	r3, [r4, #4]
 8010440:	2b03      	cmp	r3, #3
 8010442:	d941      	bls.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010444:	2800      	cmp	r0, #0
 8010446:	d04c      	beq.n	80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010448:	6961      	ldr	r1, [r4, #20]
 801044a:	4630      	mov	r0, r6
 801044c:	f005 faca 	bl	80159e4 <ucdr_serialize_string>
 8010450:	6863      	ldr	r3, [r4, #4]
 8010452:	2b04      	cmp	r3, #4
 8010454:	d938      	bls.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010456:	2800      	cmp	r0, #0
 8010458:	d043      	beq.n	80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801045a:	69a1      	ldr	r1, [r4, #24]
 801045c:	4630      	mov	r0, r6
 801045e:	f005 fac1 	bl	80159e4 <ucdr_serialize_string>
 8010462:	6863      	ldr	r3, [r4, #4]
 8010464:	2b05      	cmp	r3, #5
 8010466:	d92f      	bls.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010468:	2800      	cmp	r0, #0
 801046a:	d03a      	beq.n	80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801046c:	69e1      	ldr	r1, [r4, #28]
 801046e:	4630      	mov	r0, r6
 8010470:	f005 fab8 	bl	80159e4 <ucdr_serialize_string>
 8010474:	6863      	ldr	r3, [r4, #4]
 8010476:	2b06      	cmp	r3, #6
 8010478:	d926      	bls.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801047a:	b390      	cbz	r0, 80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801047c:	6a21      	ldr	r1, [r4, #32]
 801047e:	4630      	mov	r0, r6
 8010480:	f005 fab0 	bl	80159e4 <ucdr_serialize_string>
 8010484:	6863      	ldr	r3, [r4, #4]
 8010486:	2b07      	cmp	r3, #7
 8010488:	d91e      	bls.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801048a:	b350      	cbz	r0, 80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801048c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801048e:	4630      	mov	r0, r6
 8010490:	f005 faa8 	bl	80159e4 <ucdr_serialize_string>
 8010494:	6863      	ldr	r3, [r4, #4]
 8010496:	2b08      	cmp	r3, #8
 8010498:	d916      	bls.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801049a:	b310      	cbz	r0, 80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801049c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801049e:	4630      	mov	r0, r6
 80104a0:	f005 faa0 	bl	80159e4 <ucdr_serialize_string>
 80104a4:	6863      	ldr	r3, [r4, #4]
 80104a6:	2b09      	cmp	r3, #9
 80104a8:	d90e      	bls.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80104aa:	b1d0      	cbz	r0, 80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80104ac:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80104b0:	2709      	movs	r7, #9
 80104b2:	e000      	b.n	80104b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80104b4:	b1a8      	cbz	r0, 80104e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80104b6:	f858 1b04 	ldr.w	r1, [r8], #4
 80104ba:	4630      	mov	r0, r6
 80104bc:	f005 fa92 	bl	80159e4 <ucdr_serialize_string>
 80104c0:	6862      	ldr	r2, [r4, #4]
 80104c2:	3701      	adds	r7, #1
 80104c4:	4297      	cmp	r7, r2
 80104c6:	d3f5      	bcc.n	80104b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80104c8:	4005      	ands	r5, r0
 80104ca:	b2ed      	uxtb	r5, r5
 80104cc:	e78a      	b.n	80103e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80104ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80104d0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80104d4:	4630      	mov	r0, r6
 80104d6:	f7fd fedf 	bl	800e298 <ucdr_serialize_sequence_uint8_t>
 80104da:	4005      	ands	r5, r0
 80104dc:	4628      	mov	r0, r5
 80104de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104e2:	2500      	movs	r5, #0
 80104e4:	e77e      	b.n	80103e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80104e6:	4028      	ands	r0, r5
 80104e8:	b2c5      	uxtb	r5, r0
 80104ea:	e77b      	b.n	80103e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080104ec <uxr_serialize_OBJK_Publisher_Binary>:
 80104ec:	b570      	push	{r4, r5, r6, lr}
 80104ee:	460d      	mov	r5, r1
 80104f0:	7809      	ldrb	r1, [r1, #0]
 80104f2:	4606      	mov	r6, r0
 80104f4:	f7f9 ff0c 	bl	800a310 <ucdr_serialize_bool>
 80104f8:	782b      	ldrb	r3, [r5, #0]
 80104fa:	4604      	mov	r4, r0
 80104fc:	b94b      	cbnz	r3, 8010512 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80104fe:	7a29      	ldrb	r1, [r5, #8]
 8010500:	4630      	mov	r0, r6
 8010502:	f7f9 ff05 	bl	800a310 <ucdr_serialize_bool>
 8010506:	7a2b      	ldrb	r3, [r5, #8]
 8010508:	4004      	ands	r4, r0
 801050a:	b2e4      	uxtb	r4, r4
 801050c:	b943      	cbnz	r3, 8010520 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801050e:	4620      	mov	r0, r4
 8010510:	bd70      	pop	{r4, r5, r6, pc}
 8010512:	6869      	ldr	r1, [r5, #4]
 8010514:	4630      	mov	r0, r6
 8010516:	f005 fa65 	bl	80159e4 <ucdr_serialize_string>
 801051a:	4004      	ands	r4, r0
 801051c:	b2e4      	uxtb	r4, r4
 801051e:	e7ee      	b.n	80104fe <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010520:	f105 010c 	add.w	r1, r5, #12
 8010524:	4630      	mov	r0, r6
 8010526:	f7ff ff53 	bl	80103d0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801052a:	4004      	ands	r4, r0
 801052c:	4620      	mov	r0, r4
 801052e:	bd70      	pop	{r4, r5, r6, pc}

08010530 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8010530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010534:	460c      	mov	r4, r1
 8010536:	7809      	ldrb	r1, [r1, #0]
 8010538:	4606      	mov	r6, r0
 801053a:	f7f9 fee9 	bl	800a310 <ucdr_serialize_bool>
 801053e:	7823      	ldrb	r3, [r4, #0]
 8010540:	4605      	mov	r5, r0
 8010542:	b96b      	cbnz	r3, 8010560 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8010544:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010548:	4630      	mov	r0, r6
 801054a:	f7f9 fee1 	bl	800a310 <ucdr_serialize_bool>
 801054e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010552:	4005      	ands	r5, r0
 8010554:	b2ed      	uxtb	r5, r5
 8010556:	2b00      	cmp	r3, #0
 8010558:	d169      	bne.n	801062e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801055a:	4628      	mov	r0, r5
 801055c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010560:	6861      	ldr	r1, [r4, #4]
 8010562:	4630      	mov	r0, r6
 8010564:	f7fa f918 	bl	800a798 <ucdr_serialize_uint32_t>
 8010568:	6863      	ldr	r3, [r4, #4]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d06b      	beq.n	8010646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801056e:	2800      	cmp	r0, #0
 8010570:	d067      	beq.n	8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010572:	68a1      	ldr	r1, [r4, #8]
 8010574:	4630      	mov	r0, r6
 8010576:	f005 fa35 	bl	80159e4 <ucdr_serialize_string>
 801057a:	6863      	ldr	r3, [r4, #4]
 801057c:	2b01      	cmp	r3, #1
 801057e:	d953      	bls.n	8010628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010580:	2800      	cmp	r0, #0
 8010582:	d05e      	beq.n	8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010584:	68e1      	ldr	r1, [r4, #12]
 8010586:	4630      	mov	r0, r6
 8010588:	f005 fa2c 	bl	80159e4 <ucdr_serialize_string>
 801058c:	6863      	ldr	r3, [r4, #4]
 801058e:	2b02      	cmp	r3, #2
 8010590:	d94a      	bls.n	8010628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010592:	2800      	cmp	r0, #0
 8010594:	d055      	beq.n	8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010596:	6921      	ldr	r1, [r4, #16]
 8010598:	4630      	mov	r0, r6
 801059a:	f005 fa23 	bl	80159e4 <ucdr_serialize_string>
 801059e:	6863      	ldr	r3, [r4, #4]
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d941      	bls.n	8010628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	d04c      	beq.n	8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105a8:	6961      	ldr	r1, [r4, #20]
 80105aa:	4630      	mov	r0, r6
 80105ac:	f005 fa1a 	bl	80159e4 <ucdr_serialize_string>
 80105b0:	6863      	ldr	r3, [r4, #4]
 80105b2:	2b04      	cmp	r3, #4
 80105b4:	d938      	bls.n	8010628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d043      	beq.n	8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105ba:	69a1      	ldr	r1, [r4, #24]
 80105bc:	4630      	mov	r0, r6
 80105be:	f005 fa11 	bl	80159e4 <ucdr_serialize_string>
 80105c2:	6863      	ldr	r3, [r4, #4]
 80105c4:	2b05      	cmp	r3, #5
 80105c6:	d92f      	bls.n	8010628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105c8:	2800      	cmp	r0, #0
 80105ca:	d03a      	beq.n	8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105cc:	69e1      	ldr	r1, [r4, #28]
 80105ce:	4630      	mov	r0, r6
 80105d0:	f005 fa08 	bl	80159e4 <ucdr_serialize_string>
 80105d4:	6863      	ldr	r3, [r4, #4]
 80105d6:	2b06      	cmp	r3, #6
 80105d8:	d926      	bls.n	8010628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105da:	b390      	cbz	r0, 8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105dc:	6a21      	ldr	r1, [r4, #32]
 80105de:	4630      	mov	r0, r6
 80105e0:	f005 fa00 	bl	80159e4 <ucdr_serialize_string>
 80105e4:	6863      	ldr	r3, [r4, #4]
 80105e6:	2b07      	cmp	r3, #7
 80105e8:	d91e      	bls.n	8010628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105ea:	b350      	cbz	r0, 8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80105ee:	4630      	mov	r0, r6
 80105f0:	f005 f9f8 	bl	80159e4 <ucdr_serialize_string>
 80105f4:	6863      	ldr	r3, [r4, #4]
 80105f6:	2b08      	cmp	r3, #8
 80105f8:	d916      	bls.n	8010628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105fa:	b310      	cbz	r0, 8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80105fe:	4630      	mov	r0, r6
 8010600:	f005 f9f0 	bl	80159e4 <ucdr_serialize_string>
 8010604:	6863      	ldr	r3, [r4, #4]
 8010606:	2b09      	cmp	r3, #9
 8010608:	d90e      	bls.n	8010628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801060a:	b1d0      	cbz	r0, 8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801060c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010610:	2709      	movs	r7, #9
 8010612:	e000      	b.n	8010616 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8010614:	b1a8      	cbz	r0, 8010642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010616:	f858 1b04 	ldr.w	r1, [r8], #4
 801061a:	4630      	mov	r0, r6
 801061c:	f005 f9e2 	bl	80159e4 <ucdr_serialize_string>
 8010620:	6862      	ldr	r2, [r4, #4]
 8010622:	3701      	adds	r7, #1
 8010624:	4297      	cmp	r7, r2
 8010626:	d3f5      	bcc.n	8010614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8010628:	4005      	ands	r5, r0
 801062a:	b2ed      	uxtb	r5, r5
 801062c:	e78a      	b.n	8010544 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801062e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010630:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010634:	4630      	mov	r0, r6
 8010636:	f7fd fe2f 	bl	800e298 <ucdr_serialize_sequence_uint8_t>
 801063a:	4005      	ands	r5, r0
 801063c:	4628      	mov	r0, r5
 801063e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010642:	2500      	movs	r5, #0
 8010644:	e77e      	b.n	8010544 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010646:	4028      	ands	r0, r5
 8010648:	b2c5      	uxtb	r5, r0
 801064a:	e77b      	b.n	8010544 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801064c <uxr_serialize_OBJK_Subscriber_Binary>:
 801064c:	b570      	push	{r4, r5, r6, lr}
 801064e:	460d      	mov	r5, r1
 8010650:	7809      	ldrb	r1, [r1, #0]
 8010652:	4606      	mov	r6, r0
 8010654:	f7f9 fe5c 	bl	800a310 <ucdr_serialize_bool>
 8010658:	782b      	ldrb	r3, [r5, #0]
 801065a:	4604      	mov	r4, r0
 801065c:	b94b      	cbnz	r3, 8010672 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801065e:	7a29      	ldrb	r1, [r5, #8]
 8010660:	4630      	mov	r0, r6
 8010662:	f7f9 fe55 	bl	800a310 <ucdr_serialize_bool>
 8010666:	7a2b      	ldrb	r3, [r5, #8]
 8010668:	4004      	ands	r4, r0
 801066a:	b2e4      	uxtb	r4, r4
 801066c:	b943      	cbnz	r3, 8010680 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801066e:	4620      	mov	r0, r4
 8010670:	bd70      	pop	{r4, r5, r6, pc}
 8010672:	6869      	ldr	r1, [r5, #4]
 8010674:	4630      	mov	r0, r6
 8010676:	f005 f9b5 	bl	80159e4 <ucdr_serialize_string>
 801067a:	4004      	ands	r4, r0
 801067c:	b2e4      	uxtb	r4, r4
 801067e:	e7ee      	b.n	801065e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8010680:	f105 010c 	add.w	r1, r5, #12
 8010684:	4630      	mov	r0, r6
 8010686:	f7ff ff53 	bl	8010530 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801068a:	4004      	ands	r4, r0
 801068c:	4620      	mov	r0, r4
 801068e:	bd70      	pop	{r4, r5, r6, pc}

08010690 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010690:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8010694:	4688      	mov	r8, r1
 8010696:	8809      	ldrh	r1, [r1, #0]
 8010698:	4681      	mov	r9, r0
 801069a:	f7f9 fe93 	bl	800a3c4 <ucdr_serialize_uint16_t>
 801069e:	f898 1002 	ldrb.w	r1, [r8, #2]
 80106a2:	4606      	mov	r6, r0
 80106a4:	4648      	mov	r0, r9
 80106a6:	f7f9 fe33 	bl	800a310 <ucdr_serialize_bool>
 80106aa:	f898 3002 	ldrb.w	r3, [r8, #2]
 80106ae:	4006      	ands	r6, r0
 80106b0:	b2f5      	uxtb	r5, r6
 80106b2:	b9eb      	cbnz	r3, 80106f0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80106b4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80106b8:	4648      	mov	r0, r9
 80106ba:	f7f9 fe29 	bl	800a310 <ucdr_serialize_bool>
 80106be:	f898 3006 	ldrb.w	r3, [r8, #6]
 80106c2:	4005      	ands	r5, r0
 80106c4:	bb7b      	cbnz	r3, 8010726 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80106c6:	f898 100c 	ldrb.w	r1, [r8, #12]
 80106ca:	4648      	mov	r0, r9
 80106cc:	f7f9 fe20 	bl	800a310 <ucdr_serialize_bool>
 80106d0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80106d4:	4005      	ands	r5, r0
 80106d6:	b9f3      	cbnz	r3, 8010716 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80106d8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80106dc:	4648      	mov	r0, r9
 80106de:	f7f9 fe17 	bl	800a310 <ucdr_serialize_bool>
 80106e2:	f898 3014 	ldrb.w	r3, [r8, #20]
 80106e6:	4005      	ands	r5, r0
 80106e8:	b94b      	cbnz	r3, 80106fe <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80106ea:	4628      	mov	r0, r5
 80106ec:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80106f0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80106f4:	4648      	mov	r0, r9
 80106f6:	f7f9 fe65 	bl	800a3c4 <ucdr_serialize_uint16_t>
 80106fa:	4005      	ands	r5, r0
 80106fc:	e7da      	b.n	80106b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80106fe:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010702:	f108 011c 	add.w	r1, r8, #28
 8010706:	4648      	mov	r0, r9
 8010708:	f7fd fdc6 	bl	800e298 <ucdr_serialize_sequence_uint8_t>
 801070c:	4028      	ands	r0, r5
 801070e:	b2c5      	uxtb	r5, r0
 8010710:	4628      	mov	r0, r5
 8010712:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010716:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801071a:	4648      	mov	r0, r9
 801071c:	f7fa f83c 	bl	800a798 <ucdr_serialize_uint32_t>
 8010720:	4028      	ands	r0, r5
 8010722:	b2c5      	uxtb	r5, r0
 8010724:	e7d8      	b.n	80106d8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8010726:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801072a:	4648      	mov	r0, r9
 801072c:	f7fa f834 	bl	800a798 <ucdr_serialize_uint32_t>
 8010730:	4028      	ands	r0, r5
 8010732:	b2c5      	uxtb	r5, r0
 8010734:	e7c7      	b.n	80106c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8010736:	bf00      	nop

08010738 <uxr_serialize_OBJK_DataReader_Binary>:
 8010738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073a:	2202      	movs	r2, #2
 801073c:	460c      	mov	r4, r1
 801073e:	4606      	mov	r6, r0
 8010740:	f7fd fc0c 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010744:	78a1      	ldrb	r1, [r4, #2]
 8010746:	4605      	mov	r5, r0
 8010748:	4630      	mov	r0, r6
 801074a:	f7f9 fde1 	bl	800a310 <ucdr_serialize_bool>
 801074e:	78a3      	ldrb	r3, [r4, #2]
 8010750:	4005      	ands	r5, r0
 8010752:	b2ed      	uxtb	r5, r5
 8010754:	b90b      	cbnz	r3, 801075a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8010756:	4628      	mov	r0, r5
 8010758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801075a:	f104 0108 	add.w	r1, r4, #8
 801075e:	4630      	mov	r0, r6
 8010760:	f7ff ff96 	bl	8010690 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010764:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010768:	4607      	mov	r7, r0
 801076a:	4630      	mov	r0, r6
 801076c:	f7f9 fdd0 	bl	800a310 <ucdr_serialize_bool>
 8010770:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010774:	4038      	ands	r0, r7
 8010776:	b2c7      	uxtb	r7, r0
 8010778:	b95b      	cbnz	r3, 8010792 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801077a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801077e:	4630      	mov	r0, r6
 8010780:	f7f9 fdc6 	bl	800a310 <ucdr_serialize_bool>
 8010784:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010788:	4007      	ands	r7, r0
 801078a:	b94b      	cbnz	r3, 80107a0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801078c:	403d      	ands	r5, r7
 801078e:	4628      	mov	r0, r5
 8010790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010792:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8010796:	4630      	mov	r0, r6
 8010798:	f7fa fa54 	bl	800ac44 <ucdr_serialize_uint64_t>
 801079c:	4007      	ands	r7, r0
 801079e:	e7ec      	b.n	801077a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80107a0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80107a2:	4630      	mov	r0, r6
 80107a4:	f005 f91e 	bl	80159e4 <ucdr_serialize_string>
 80107a8:	4007      	ands	r7, r0
 80107aa:	b2ff      	uxtb	r7, r7
 80107ac:	e7ee      	b.n	801078c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80107ae:	bf00      	nop

080107b0 <uxr_serialize_OBJK_DataWriter_Binary>:
 80107b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b2:	2202      	movs	r2, #2
 80107b4:	460d      	mov	r5, r1
 80107b6:	4606      	mov	r6, r0
 80107b8:	f7fd fbd0 	bl	800df5c <ucdr_serialize_array_uint8_t>
 80107bc:	78a9      	ldrb	r1, [r5, #2]
 80107be:	4604      	mov	r4, r0
 80107c0:	4630      	mov	r0, r6
 80107c2:	f7f9 fda5 	bl	800a310 <ucdr_serialize_bool>
 80107c6:	78ab      	ldrb	r3, [r5, #2]
 80107c8:	4004      	ands	r4, r0
 80107ca:	b2e4      	uxtb	r4, r4
 80107cc:	b90b      	cbnz	r3, 80107d2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80107ce:	4620      	mov	r0, r4
 80107d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107d2:	f105 0108 	add.w	r1, r5, #8
 80107d6:	4630      	mov	r0, r6
 80107d8:	f7ff ff5a 	bl	8010690 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80107dc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80107e0:	4607      	mov	r7, r0
 80107e2:	4630      	mov	r0, r6
 80107e4:	f7f9 fd94 	bl	800a310 <ucdr_serialize_bool>
 80107e8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80107ec:	4038      	ands	r0, r7
 80107ee:	b2c7      	uxtb	r7, r0
 80107f0:	b913      	cbnz	r3, 80107f8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80107f2:	403c      	ands	r4, r7
 80107f4:	4620      	mov	r0, r4
 80107f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107f8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80107fc:	4630      	mov	r0, r6
 80107fe:	f7fa fa21 	bl	800ac44 <ucdr_serialize_uint64_t>
 8010802:	4007      	ands	r7, r0
 8010804:	e7f5      	b.n	80107f2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8010806:	bf00      	nop

08010808 <uxr_deserialize_ObjectVariant>:
 8010808:	b570      	push	{r4, r5, r6, lr}
 801080a:	4605      	mov	r5, r0
 801080c:	460e      	mov	r6, r1
 801080e:	f7f9 fdc3 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010812:	b168      	cbz	r0, 8010830 <uxr_deserialize_ObjectVariant+0x28>
 8010814:	7833      	ldrb	r3, [r6, #0]
 8010816:	3b01      	subs	r3, #1
 8010818:	4604      	mov	r4, r0
 801081a:	2b0d      	cmp	r3, #13
 801081c:	d809      	bhi.n	8010832 <uxr_deserialize_ObjectVariant+0x2a>
 801081e:	e8df f003 	tbb	[pc, r3]
 8010822:	0a41      	.short	0x0a41
 8010824:	0a0a2323 	.word	0x0a0a2323
 8010828:	10080a0a 	.word	0x10080a0a
 801082c:	565c1010 	.word	0x565c1010
 8010830:	2400      	movs	r4, #0
 8010832:	4620      	mov	r0, r4
 8010834:	bd70      	pop	{r4, r5, r6, pc}
 8010836:	1d31      	adds	r1, r6, #4
 8010838:	4628      	mov	r0, r5
 801083a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801083e:	f7ff bd55 	b.w	80102ec <uxr_deserialize_DATAWRITER_Representation>
 8010842:	1d31      	adds	r1, r6, #4
 8010844:	4628      	mov	r0, r5
 8010846:	f7f9 fda7 	bl	800a398 <ucdr_deserialize_uint8_t>
 801084a:	2800      	cmp	r0, #0
 801084c:	d0f0      	beq.n	8010830 <uxr_deserialize_ObjectVariant+0x28>
 801084e:	7933      	ldrb	r3, [r6, #4]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d001      	beq.n	8010858 <uxr_deserialize_ObjectVariant+0x50>
 8010854:	2b02      	cmp	r3, #2
 8010856:	d1ec      	bne.n	8010832 <uxr_deserialize_ObjectVariant+0x2a>
 8010858:	68b1      	ldr	r1, [r6, #8]
 801085a:	4628      	mov	r0, r5
 801085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010864:	f005 b8ce 	b.w	8015a04 <ucdr_deserialize_string>
 8010868:	1d31      	adds	r1, r6, #4
 801086a:	4628      	mov	r0, r5
 801086c:	f7f9 fd94 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010870:	4604      	mov	r4, r0
 8010872:	b170      	cbz	r0, 8010892 <uxr_deserialize_ObjectVariant+0x8a>
 8010874:	7933      	ldrb	r3, [r6, #4]
 8010876:	2b02      	cmp	r3, #2
 8010878:	d04c      	beq.n	8010914 <uxr_deserialize_ObjectVariant+0x10c>
 801087a:	2b03      	cmp	r3, #3
 801087c:	d109      	bne.n	8010892 <uxr_deserialize_ObjectVariant+0x8a>
 801087e:	f106 0308 	add.w	r3, r6, #8
 8010882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010886:	f106 010c 	add.w	r1, r6, #12
 801088a:	4628      	mov	r0, r5
 801088c:	f7fd fd16 	bl	800e2bc <ucdr_deserialize_sequence_uint8_t>
 8010890:	4604      	mov	r4, r0
 8010892:	2202      	movs	r2, #2
 8010894:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010898:	4628      	mov	r0, r5
 801089a:	f7fd fbc3 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 801089e:	4020      	ands	r0, r4
 80108a0:	b2c4      	uxtb	r4, r0
 80108a2:	e7c6      	b.n	8010832 <uxr_deserialize_ObjectVariant+0x2a>
 80108a4:	1d31      	adds	r1, r6, #4
 80108a6:	4628      	mov	r0, r5
 80108a8:	f7f9 fd76 	bl	800a398 <ucdr_deserialize_uint8_t>
 80108ac:	4604      	mov	r4, r0
 80108ae:	b130      	cbz	r0, 80108be <uxr_deserialize_ObjectVariant+0xb6>
 80108b0:	7933      	ldrb	r3, [r6, #4]
 80108b2:	2b02      	cmp	r3, #2
 80108b4:	d036      	beq.n	8010924 <uxr_deserialize_ObjectVariant+0x11c>
 80108b6:	2b03      	cmp	r3, #3
 80108b8:	d03c      	beq.n	8010934 <uxr_deserialize_ObjectVariant+0x12c>
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d032      	beq.n	8010924 <uxr_deserialize_ObjectVariant+0x11c>
 80108be:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80108c2:	4628      	mov	r0, r5
 80108c4:	f7fa fb0e 	bl	800aee4 <ucdr_deserialize_int16_t>
 80108c8:	4020      	ands	r0, r4
 80108ca:	b2c4      	uxtb	r4, r0
 80108cc:	e7b1      	b.n	8010832 <uxr_deserialize_ObjectVariant+0x2a>
 80108ce:	1d31      	adds	r1, r6, #4
 80108d0:	4628      	mov	r0, r5
 80108d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80108d6:	f7ff bbbf 	b.w	8010058 <uxr_deserialize_CLIENT_Representation>
 80108da:	2204      	movs	r2, #4
 80108dc:	18b1      	adds	r1, r6, r2
 80108de:	4628      	mov	r0, r5
 80108e0:	f7fd fba0 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 80108e4:	2202      	movs	r2, #2
 80108e6:	f106 0108 	add.w	r1, r6, #8
 80108ea:	4604      	mov	r4, r0
 80108ec:	4628      	mov	r0, r5
 80108ee:	f7fd fb99 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 80108f2:	2202      	movs	r2, #2
 80108f4:	4004      	ands	r4, r0
 80108f6:	f106 010a 	add.w	r1, r6, #10
 80108fa:	4628      	mov	r0, r5
 80108fc:	f7fd fb92 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010900:	b2e4      	uxtb	r4, r4
 8010902:	4603      	mov	r3, r0
 8010904:	f106 010c 	add.w	r1, r6, #12
 8010908:	4628      	mov	r0, r5
 801090a:	401c      	ands	r4, r3
 801090c:	f7f9 fd16 	bl	800a33c <ucdr_deserialize_bool>
 8010910:	4004      	ands	r4, r0
 8010912:	e78e      	b.n	8010832 <uxr_deserialize_ObjectVariant+0x2a>
 8010914:	68b1      	ldr	r1, [r6, #8]
 8010916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801091a:	4628      	mov	r0, r5
 801091c:	f005 f872 	bl	8015a04 <ucdr_deserialize_string>
 8010920:	4604      	mov	r4, r0
 8010922:	e7b6      	b.n	8010892 <uxr_deserialize_ObjectVariant+0x8a>
 8010924:	68b1      	ldr	r1, [r6, #8]
 8010926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801092a:	4628      	mov	r0, r5
 801092c:	f005 f86a 	bl	8015a04 <ucdr_deserialize_string>
 8010930:	4604      	mov	r4, r0
 8010932:	e7c4      	b.n	80108be <uxr_deserialize_ObjectVariant+0xb6>
 8010934:	f106 0308 	add.w	r3, r6, #8
 8010938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801093c:	f106 010c 	add.w	r1, r6, #12
 8010940:	4628      	mov	r0, r5
 8010942:	f7fd fcbb 	bl	800e2bc <ucdr_deserialize_sequence_uint8_t>
 8010946:	4604      	mov	r4, r0
 8010948:	e7b9      	b.n	80108be <uxr_deserialize_ObjectVariant+0xb6>
 801094a:	bf00      	nop

0801094c <uxr_deserialize_BaseObjectRequest>:
 801094c:	b570      	push	{r4, r5, r6, lr}
 801094e:	2202      	movs	r2, #2
 8010950:	4605      	mov	r5, r0
 8010952:	460e      	mov	r6, r1
 8010954:	f7fd fb66 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010958:	2202      	movs	r2, #2
 801095a:	4604      	mov	r4, r0
 801095c:	18b1      	adds	r1, r6, r2
 801095e:	4628      	mov	r0, r5
 8010960:	f7fd fb60 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010964:	4020      	ands	r0, r4
 8010966:	b2c0      	uxtb	r0, r0
 8010968:	bd70      	pop	{r4, r5, r6, pc}
 801096a:	bf00      	nop

0801096c <uxr_serialize_ActivityInfoVariant>:
 801096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010970:	460d      	mov	r5, r1
 8010972:	7809      	ldrb	r1, [r1, #0]
 8010974:	4607      	mov	r7, r0
 8010976:	f7f9 fcf9 	bl	800a36c <ucdr_serialize_uint8_t>
 801097a:	4681      	mov	r9, r0
 801097c:	b138      	cbz	r0, 801098e <uxr_serialize_ActivityInfoVariant+0x22>
 801097e:	782b      	ldrb	r3, [r5, #0]
 8010980:	2b06      	cmp	r3, #6
 8010982:	f000 8082 	beq.w	8010a8a <uxr_serialize_ActivityInfoVariant+0x11e>
 8010986:	2b0d      	cmp	r3, #13
 8010988:	d016      	beq.n	80109b8 <uxr_serialize_ActivityInfoVariant+0x4c>
 801098a:	2b05      	cmp	r3, #5
 801098c:	d002      	beq.n	8010994 <uxr_serialize_ActivityInfoVariant+0x28>
 801098e:	4648      	mov	r0, r9
 8010990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010994:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010998:	4638      	mov	r0, r7
 801099a:	f7fa fa23 	bl	800ade4 <ucdr_serialize_int16_t>
 801099e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80109a2:	4681      	mov	r9, r0
 80109a4:	4638      	mov	r0, r7
 80109a6:	f7fa f94d 	bl	800ac44 <ucdr_serialize_uint64_t>
 80109aa:	ea09 0000 	and.w	r0, r9, r0
 80109ae:	fa5f f980 	uxtb.w	r9, r0
 80109b2:	4648      	mov	r0, r9
 80109b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109b8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80109bc:	4638      	mov	r0, r7
 80109be:	f7fa fa11 	bl	800ade4 <ucdr_serialize_int16_t>
 80109c2:	68e9      	ldr	r1, [r5, #12]
 80109c4:	4681      	mov	r9, r0
 80109c6:	4638      	mov	r0, r7
 80109c8:	f7f9 fee6 	bl	800a798 <ucdr_serialize_uint32_t>
 80109cc:	68eb      	ldr	r3, [r5, #12]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d0eb      	beq.n	80109aa <uxr_serialize_ActivityInfoVariant+0x3e>
 80109d2:	b320      	cbz	r0, 8010a1e <uxr_serialize_ActivityInfoVariant+0xb2>
 80109d4:	f105 080c 	add.w	r8, r5, #12
 80109d8:	2600      	movs	r6, #0
 80109da:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80109de:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80109e2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80109e6:	4638      	mov	r0, r7
 80109e8:	f7f9 fcc0 	bl	800a36c <ucdr_serialize_uint8_t>
 80109ec:	2800      	cmp	r0, #0
 80109ee:	d053      	beq.n	8010a98 <uxr_serialize_ActivityInfoVariant+0x12c>
 80109f0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80109f4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80109f8:	0074      	lsls	r4, r6, #1
 80109fa:	00c9      	lsls	r1, r1, #3
 80109fc:	2b03      	cmp	r3, #3
 80109fe:	d854      	bhi.n	8010aaa <uxr_serialize_ActivityInfoVariant+0x13e>
 8010a00:	e8df f003 	tbb	[pc, r3]
 8010a04:	02102132 	.word	0x02102132
 8010a08:	4441      	add	r1, r8
 8010a0a:	4638      	mov	r0, r7
 8010a0c:	6889      	ldr	r1, [r1, #8]
 8010a0e:	f004 ffe9 	bl	80159e4 <ucdr_serialize_string>
 8010a12:	68ea      	ldr	r2, [r5, #12]
 8010a14:	3601      	adds	r6, #1
 8010a16:	4296      	cmp	r6, r2
 8010a18:	d242      	bcs.n	8010aa0 <uxr_serialize_ActivityInfoVariant+0x134>
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	d1dd      	bne.n	80109da <uxr_serialize_ActivityInfoVariant+0x6e>
 8010a1e:	f04f 0900 	mov.w	r9, #0
 8010a22:	e7b4      	b.n	801098e <uxr_serialize_ActivityInfoVariant+0x22>
 8010a24:	3108      	adds	r1, #8
 8010a26:	4441      	add	r1, r8
 8010a28:	2210      	movs	r2, #16
 8010a2a:	4638      	mov	r0, r7
 8010a2c:	f7fd fa96 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010a30:	4434      	add	r4, r6
 8010a32:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010a36:	4604      	mov	r4, r0
 8010a38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010a3a:	4638      	mov	r0, r7
 8010a3c:	f7f9 feac 	bl	800a798 <ucdr_serialize_uint32_t>
 8010a40:	4020      	ands	r0, r4
 8010a42:	b2c0      	uxtb	r0, r0
 8010a44:	e7e5      	b.n	8010a12 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a46:	3108      	adds	r1, #8
 8010a48:	4441      	add	r1, r8
 8010a4a:	2204      	movs	r2, #4
 8010a4c:	4638      	mov	r0, r7
 8010a4e:	f7fd fa85 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010a52:	4434      	add	r4, r6
 8010a54:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010a58:	4604      	mov	r4, r0
 8010a5a:	8b19      	ldrh	r1, [r3, #24]
 8010a5c:	4638      	mov	r0, r7
 8010a5e:	f7f9 fcb1 	bl	800a3c4 <ucdr_serialize_uint16_t>
 8010a62:	4020      	ands	r0, r4
 8010a64:	b2c0      	uxtb	r0, r0
 8010a66:	e7d4      	b.n	8010a12 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a68:	3108      	adds	r1, #8
 8010a6a:	4441      	add	r1, r8
 8010a6c:	2202      	movs	r2, #2
 8010a6e:	4638      	mov	r0, r7
 8010a70:	f7fd fa74 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010a74:	4434      	add	r4, r6
 8010a76:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	7d99      	ldrb	r1, [r3, #22]
 8010a7e:	4638      	mov	r0, r7
 8010a80:	f7f9 fc74 	bl	800a36c <ucdr_serialize_uint8_t>
 8010a84:	4020      	ands	r0, r4
 8010a86:	b2c0      	uxtb	r0, r0
 8010a88:	e7c3      	b.n	8010a12 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a8a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010a8e:	4638      	mov	r0, r7
 8010a90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a94:	f7fa b9a6 	b.w	800ade4 <ucdr_serialize_int16_t>
 8010a98:	68ea      	ldr	r2, [r5, #12]
 8010a9a:	3601      	adds	r6, #1
 8010a9c:	42b2      	cmp	r2, r6
 8010a9e:	d8be      	bhi.n	8010a1e <uxr_serialize_ActivityInfoVariant+0xb2>
 8010aa0:	ea09 0900 	and.w	r9, r9, r0
 8010aa4:	fa5f f989 	uxtb.w	r9, r9
 8010aa8:	e771      	b.n	801098e <uxr_serialize_ActivityInfoVariant+0x22>
 8010aaa:	68eb      	ldr	r3, [r5, #12]
 8010aac:	3601      	adds	r6, #1
 8010aae:	429e      	cmp	r6, r3
 8010ab0:	f10a 0a18 	add.w	sl, sl, #24
 8010ab4:	d395      	bcc.n	80109e2 <uxr_serialize_ActivityInfoVariant+0x76>
 8010ab6:	e76a      	b.n	801098e <uxr_serialize_ActivityInfoVariant+0x22>

08010ab8 <uxr_deserialize_BaseObjectReply>:
 8010ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010abc:	2202      	movs	r2, #2
 8010abe:	4606      	mov	r6, r0
 8010ac0:	460f      	mov	r7, r1
 8010ac2:	f7fd faaf 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010ac6:	2202      	movs	r2, #2
 8010ac8:	18b9      	adds	r1, r7, r2
 8010aca:	4605      	mov	r5, r0
 8010acc:	4630      	mov	r0, r6
 8010ace:	f7fd faa9 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010ad2:	1d39      	adds	r1, r7, #4
 8010ad4:	4680      	mov	r8, r0
 8010ad6:	4630      	mov	r0, r6
 8010ad8:	f7f9 fc5e 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010adc:	1d79      	adds	r1, r7, #5
 8010ade:	4604      	mov	r4, r0
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	f7f9 fc59 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010ae6:	ea05 0508 	and.w	r5, r5, r8
 8010aea:	402c      	ands	r4, r5
 8010aec:	4020      	ands	r0, r4
 8010aee:	b2c0      	uxtb	r0, r0
 8010af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010af4 <uxr_serialize_ReadSpecification>:
 8010af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af8:	460e      	mov	r6, r1
 8010afa:	7809      	ldrb	r1, [r1, #0]
 8010afc:	4607      	mov	r7, r0
 8010afe:	f7f9 fc35 	bl	800a36c <ucdr_serialize_uint8_t>
 8010b02:	7871      	ldrb	r1, [r6, #1]
 8010b04:	4604      	mov	r4, r0
 8010b06:	4638      	mov	r0, r7
 8010b08:	f7f9 fc30 	bl	800a36c <ucdr_serialize_uint8_t>
 8010b0c:	78b1      	ldrb	r1, [r6, #2]
 8010b0e:	4004      	ands	r4, r0
 8010b10:	4638      	mov	r0, r7
 8010b12:	f7f9 fbfd 	bl	800a310 <ucdr_serialize_bool>
 8010b16:	78b3      	ldrb	r3, [r6, #2]
 8010b18:	b2e4      	uxtb	r4, r4
 8010b1a:	4004      	ands	r4, r0
 8010b1c:	b94b      	cbnz	r3, 8010b32 <uxr_serialize_ReadSpecification+0x3e>
 8010b1e:	7a31      	ldrb	r1, [r6, #8]
 8010b20:	4638      	mov	r0, r7
 8010b22:	f7f9 fbf5 	bl	800a310 <ucdr_serialize_bool>
 8010b26:	7a33      	ldrb	r3, [r6, #8]
 8010b28:	4004      	ands	r4, r0
 8010b2a:	b943      	cbnz	r3, 8010b3e <uxr_serialize_ReadSpecification+0x4a>
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b32:	6871      	ldr	r1, [r6, #4]
 8010b34:	4638      	mov	r0, r7
 8010b36:	f004 ff55 	bl	80159e4 <ucdr_serialize_string>
 8010b3a:	4004      	ands	r4, r0
 8010b3c:	e7ef      	b.n	8010b1e <uxr_serialize_ReadSpecification+0x2a>
 8010b3e:	8971      	ldrh	r1, [r6, #10]
 8010b40:	4638      	mov	r0, r7
 8010b42:	f7f9 fc3f 	bl	800a3c4 <ucdr_serialize_uint16_t>
 8010b46:	89b1      	ldrh	r1, [r6, #12]
 8010b48:	4605      	mov	r5, r0
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	f7f9 fc3a 	bl	800a3c4 <ucdr_serialize_uint16_t>
 8010b50:	89f1      	ldrh	r1, [r6, #14]
 8010b52:	4005      	ands	r5, r0
 8010b54:	4638      	mov	r0, r7
 8010b56:	f7f9 fc35 	bl	800a3c4 <ucdr_serialize_uint16_t>
 8010b5a:	8a31      	ldrh	r1, [r6, #16]
 8010b5c:	4680      	mov	r8, r0
 8010b5e:	4638      	mov	r0, r7
 8010b60:	f7f9 fc30 	bl	800a3c4 <ucdr_serialize_uint16_t>
 8010b64:	b2ed      	uxtb	r5, r5
 8010b66:	4025      	ands	r5, r4
 8010b68:	ea08 0505 	and.w	r5, r8, r5
 8010b6c:	ea00 0405 	and.w	r4, r0, r5
 8010b70:	4620      	mov	r0, r4
 8010b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b76:	bf00      	nop

08010b78 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010b78:	f7ff ba16 	b.w	800ffa8 <uxr_serialize_CLIENT_Representation>

08010b7c <uxr_serialize_CREATE_Payload>:
 8010b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b7e:	2202      	movs	r2, #2
 8010b80:	4607      	mov	r7, r0
 8010b82:	460e      	mov	r6, r1
 8010b84:	f7fd f9ea 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010b88:	2202      	movs	r2, #2
 8010b8a:	18b1      	adds	r1, r6, r2
 8010b8c:	4605      	mov	r5, r0
 8010b8e:	4638      	mov	r0, r7
 8010b90:	f7fd f9e4 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010b94:	7931      	ldrb	r1, [r6, #4]
 8010b96:	4604      	mov	r4, r0
 8010b98:	4638      	mov	r0, r7
 8010b9a:	f7f9 fbe7 	bl	800a36c <ucdr_serialize_uint8_t>
 8010b9e:	b170      	cbz	r0, 8010bbe <uxr_serialize_CREATE_Payload+0x42>
 8010ba0:	7933      	ldrb	r3, [r6, #4]
 8010ba2:	402c      	ands	r4, r5
 8010ba4:	3b01      	subs	r3, #1
 8010ba6:	b2e4      	uxtb	r4, r4
 8010ba8:	2b0d      	cmp	r3, #13
 8010baa:	d809      	bhi.n	8010bc0 <uxr_serialize_CREATE_Payload+0x44>
 8010bac:	e8df f003 	tbb	[pc, r3]
 8010bb0:	23230a4c 	.word	0x23230a4c
 8010bb4:	0a0a0a0a 	.word	0x0a0a0a0a
 8010bb8:	12121208 	.word	0x12121208
 8010bbc:	3e45      	.short	0x3e45
 8010bbe:	2400      	movs	r4, #0
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc4:	f106 0108 	add.w	r1, r6, #8
 8010bc8:	4638      	mov	r0, r7
 8010bca:	f7ff faf3 	bl	80101b4 <uxr_serialize_DATAWRITER_Representation>
 8010bce:	4004      	ands	r4, r0
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bd4:	7a31      	ldrb	r1, [r6, #8]
 8010bd6:	4638      	mov	r0, r7
 8010bd8:	f7f9 fbc8 	bl	800a36c <ucdr_serialize_uint8_t>
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	d0ee      	beq.n	8010bbe <uxr_serialize_CREATE_Payload+0x42>
 8010be0:	7a33      	ldrb	r3, [r6, #8]
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d001      	beq.n	8010bea <uxr_serialize_CREATE_Payload+0x6e>
 8010be6:	2b02      	cmp	r3, #2
 8010be8:	d1ea      	bne.n	8010bc0 <uxr_serialize_CREATE_Payload+0x44>
 8010bea:	68f1      	ldr	r1, [r6, #12]
 8010bec:	4638      	mov	r0, r7
 8010bee:	f004 fef9 	bl	80159e4 <ucdr_serialize_string>
 8010bf2:	4004      	ands	r4, r0
 8010bf4:	e7e4      	b.n	8010bc0 <uxr_serialize_CREATE_Payload+0x44>
 8010bf6:	7a31      	ldrb	r1, [r6, #8]
 8010bf8:	4638      	mov	r0, r7
 8010bfa:	f7f9 fbb7 	bl	800a36c <ucdr_serialize_uint8_t>
 8010bfe:	4605      	mov	r5, r0
 8010c00:	b158      	cbz	r0, 8010c1a <uxr_serialize_CREATE_Payload+0x9e>
 8010c02:	7a33      	ldrb	r3, [r6, #8]
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d034      	beq.n	8010c72 <uxr_serialize_CREATE_Payload+0xf6>
 8010c08:	2b03      	cmp	r3, #3
 8010c0a:	d106      	bne.n	8010c1a <uxr_serialize_CREATE_Payload+0x9e>
 8010c0c:	68f2      	ldr	r2, [r6, #12]
 8010c0e:	f106 0110 	add.w	r1, r6, #16
 8010c12:	4638      	mov	r0, r7
 8010c14:	f7fd fb40 	bl	800e298 <ucdr_serialize_sequence_uint8_t>
 8010c18:	4605      	mov	r5, r0
 8010c1a:	2202      	movs	r2, #2
 8010c1c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8010c20:	4638      	mov	r0, r7
 8010c22:	f7fd f99b 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010c26:	4028      	ands	r0, r5
 8010c28:	4004      	ands	r4, r0
 8010c2a:	e7c9      	b.n	8010bc0 <uxr_serialize_CREATE_Payload+0x44>
 8010c2c:	f106 0108 	add.w	r1, r6, #8
 8010c30:	4638      	mov	r0, r7
 8010c32:	f7ff f9b9 	bl	800ffa8 <uxr_serialize_CLIENT_Representation>
 8010c36:	4004      	ands	r4, r0
 8010c38:	e7c2      	b.n	8010bc0 <uxr_serialize_CREATE_Payload+0x44>
 8010c3a:	f106 0108 	add.w	r1, r6, #8
 8010c3e:	4638      	mov	r0, r7
 8010c40:	f7ff fa6e 	bl	8010120 <uxr_serialize_AGENT_Representation>
 8010c44:	4004      	ands	r4, r0
 8010c46:	e7bb      	b.n	8010bc0 <uxr_serialize_CREATE_Payload+0x44>
 8010c48:	7a31      	ldrb	r1, [r6, #8]
 8010c4a:	4638      	mov	r0, r7
 8010c4c:	f7f9 fb8e 	bl	800a36c <ucdr_serialize_uint8_t>
 8010c50:	4605      	mov	r5, r0
 8010c52:	b130      	cbz	r0, 8010c62 <uxr_serialize_CREATE_Payload+0xe6>
 8010c54:	7a33      	ldrb	r3, [r6, #8]
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	d011      	beq.n	8010c7e <uxr_serialize_CREATE_Payload+0x102>
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	d015      	beq.n	8010c8a <uxr_serialize_CREATE_Payload+0x10e>
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d00d      	beq.n	8010c7e <uxr_serialize_CREATE_Payload+0x102>
 8010c62:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8010c66:	4638      	mov	r0, r7
 8010c68:	f7fa f8bc 	bl	800ade4 <ucdr_serialize_int16_t>
 8010c6c:	4028      	ands	r0, r5
 8010c6e:	4004      	ands	r4, r0
 8010c70:	e7a6      	b.n	8010bc0 <uxr_serialize_CREATE_Payload+0x44>
 8010c72:	68f1      	ldr	r1, [r6, #12]
 8010c74:	4638      	mov	r0, r7
 8010c76:	f004 feb5 	bl	80159e4 <ucdr_serialize_string>
 8010c7a:	4605      	mov	r5, r0
 8010c7c:	e7cd      	b.n	8010c1a <uxr_serialize_CREATE_Payload+0x9e>
 8010c7e:	68f1      	ldr	r1, [r6, #12]
 8010c80:	4638      	mov	r0, r7
 8010c82:	f004 feaf 	bl	80159e4 <ucdr_serialize_string>
 8010c86:	4605      	mov	r5, r0
 8010c88:	e7eb      	b.n	8010c62 <uxr_serialize_CREATE_Payload+0xe6>
 8010c8a:	68f2      	ldr	r2, [r6, #12]
 8010c8c:	f106 0110 	add.w	r1, r6, #16
 8010c90:	4638      	mov	r0, r7
 8010c92:	f7fd fb01 	bl	800e298 <ucdr_serialize_sequence_uint8_t>
 8010c96:	4605      	mov	r5, r0
 8010c98:	e7e3      	b.n	8010c62 <uxr_serialize_CREATE_Payload+0xe6>
 8010c9a:	bf00      	nop

08010c9c <uxr_deserialize_GET_INFO_Payload>:
 8010c9c:	b570      	push	{r4, r5, r6, lr}
 8010c9e:	2202      	movs	r2, #2
 8010ca0:	4605      	mov	r5, r0
 8010ca2:	460e      	mov	r6, r1
 8010ca4:	f7fd f9be 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010ca8:	2202      	movs	r2, #2
 8010caa:	18b1      	adds	r1, r6, r2
 8010cac:	4604      	mov	r4, r0
 8010cae:	4628      	mov	r0, r5
 8010cb0:	f7fd f9b8 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010cb4:	1d31      	adds	r1, r6, #4
 8010cb6:	4004      	ands	r4, r0
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f7f9 fe9d 	bl	800a9f8 <ucdr_deserialize_uint32_t>
 8010cbe:	b2e4      	uxtb	r4, r4
 8010cc0:	4020      	ands	r0, r4
 8010cc2:	bd70      	pop	{r4, r5, r6, pc}

08010cc4 <uxr_serialize_DELETE_Payload>:
 8010cc4:	b570      	push	{r4, r5, r6, lr}
 8010cc6:	2202      	movs	r2, #2
 8010cc8:	4605      	mov	r5, r0
 8010cca:	460e      	mov	r6, r1
 8010ccc:	f7fd f946 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010cd0:	2202      	movs	r2, #2
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	18b1      	adds	r1, r6, r2
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	f7fd f940 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010cdc:	4020      	ands	r0, r4
 8010cde:	b2c0      	uxtb	r0, r0
 8010ce0:	bd70      	pop	{r4, r5, r6, pc}
 8010ce2:	bf00      	nop

08010ce4 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce8:	4605      	mov	r5, r0
 8010cea:	460e      	mov	r6, r1
 8010cec:	f7f9 fb54 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010cf0:	1c71      	adds	r1, r6, #1
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	f7f9 fb4f 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010cfa:	2204      	movs	r2, #4
 8010cfc:	18b1      	adds	r1, r6, r2
 8010cfe:	4680      	mov	r8, r0
 8010d00:	4628      	mov	r0, r5
 8010d02:	f7fd f98f 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010d06:	f106 0108 	add.w	r1, r6, #8
 8010d0a:	4607      	mov	r7, r0
 8010d0c:	2202      	movs	r2, #2
 8010d0e:	4628      	mov	r0, r5
 8010d10:	f7fd f988 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010d14:	ea04 0308 	and.w	r3, r4, r8
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	ea03 0407 	and.w	r4, r3, r7
 8010d1e:	2202      	movs	r2, #2
 8010d20:	4607      	mov	r7, r0
 8010d22:	f106 010a 	add.w	r1, r6, #10
 8010d26:	4628      	mov	r0, r5
 8010d28:	f7fd f97c 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010d2c:	f106 010c 	add.w	r1, r6, #12
 8010d30:	4603      	mov	r3, r0
 8010d32:	4628      	mov	r0, r5
 8010d34:	461d      	mov	r5, r3
 8010d36:	f7f9 fb01 	bl	800a33c <ucdr_deserialize_bool>
 8010d3a:	403c      	ands	r4, r7
 8010d3c:	4025      	ands	r5, r4
 8010d3e:	4028      	ands	r0, r5
 8010d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d44 <uxr_deserialize_STATUS_Payload>:
 8010d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d48:	2202      	movs	r2, #2
 8010d4a:	4606      	mov	r6, r0
 8010d4c:	460f      	mov	r7, r1
 8010d4e:	f7fd f969 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010d52:	2202      	movs	r2, #2
 8010d54:	18b9      	adds	r1, r7, r2
 8010d56:	4605      	mov	r5, r0
 8010d58:	4630      	mov	r0, r6
 8010d5a:	f7fd f963 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010d5e:	1d39      	adds	r1, r7, #4
 8010d60:	4680      	mov	r8, r0
 8010d62:	4630      	mov	r0, r6
 8010d64:	f7f9 fb18 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010d68:	1d79      	adds	r1, r7, #5
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f7f9 fb13 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010d72:	ea05 0508 	and.w	r5, r5, r8
 8010d76:	402c      	ands	r4, r5
 8010d78:	4020      	ands	r0, r4
 8010d7a:	b2c0      	uxtb	r0, r0
 8010d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d80 <uxr_serialize_INFO_Payload>:
 8010d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d84:	2202      	movs	r2, #2
 8010d86:	460c      	mov	r4, r1
 8010d88:	4605      	mov	r5, r0
 8010d8a:	f7fd f8e7 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010d8e:	2202      	movs	r2, #2
 8010d90:	18a1      	adds	r1, r4, r2
 8010d92:	4680      	mov	r8, r0
 8010d94:	4628      	mov	r0, r5
 8010d96:	f7fd f8e1 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010d9a:	7921      	ldrb	r1, [r4, #4]
 8010d9c:	4607      	mov	r7, r0
 8010d9e:	4628      	mov	r0, r5
 8010da0:	f7f9 fae4 	bl	800a36c <ucdr_serialize_uint8_t>
 8010da4:	7961      	ldrb	r1, [r4, #5]
 8010da6:	4606      	mov	r6, r0
 8010da8:	4628      	mov	r0, r5
 8010daa:	f7f9 fadf 	bl	800a36c <ucdr_serialize_uint8_t>
 8010dae:	ea08 0807 	and.w	r8, r8, r7
 8010db2:	ea06 0608 	and.w	r6, r6, r8
 8010db6:	4006      	ands	r6, r0
 8010db8:	7a21      	ldrb	r1, [r4, #8]
 8010dba:	4628      	mov	r0, r5
 8010dbc:	f7f9 faa8 	bl	800a310 <ucdr_serialize_bool>
 8010dc0:	7a23      	ldrb	r3, [r4, #8]
 8010dc2:	b2f7      	uxtb	r7, r6
 8010dc4:	4606      	mov	r6, r0
 8010dc6:	b96b      	cbnz	r3, 8010de4 <uxr_serialize_INFO_Payload+0x64>
 8010dc8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8010dcc:	4628      	mov	r0, r5
 8010dce:	f7f9 fa9f 	bl	800a310 <ucdr_serialize_bool>
 8010dd2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8010dd6:	4030      	ands	r0, r6
 8010dd8:	b2c6      	uxtb	r6, r0
 8010dda:	b983      	cbnz	r3, 8010dfe <uxr_serialize_INFO_Payload+0x7e>
 8010ddc:	ea06 0007 	and.w	r0, r6, r7
 8010de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010de4:	7b21      	ldrb	r1, [r4, #12]
 8010de6:	4628      	mov	r0, r5
 8010de8:	f7f9 fac0 	bl	800a36c <ucdr_serialize_uint8_t>
 8010dec:	b188      	cbz	r0, 8010e12 <uxr_serialize_INFO_Payload+0x92>
 8010dee:	f104 010c 	add.w	r1, r4, #12
 8010df2:	4628      	mov	r0, r5
 8010df4:	f7ff fa06 	bl	8010204 <uxr_serialize_ObjectVariant.part.0>
 8010df8:	4030      	ands	r0, r6
 8010dfa:	b2c6      	uxtb	r6, r0
 8010dfc:	e7e4      	b.n	8010dc8 <uxr_serialize_INFO_Payload+0x48>
 8010dfe:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8010e02:	4628      	mov	r0, r5
 8010e04:	f7ff fdb2 	bl	801096c <uxr_serialize_ActivityInfoVariant>
 8010e08:	4006      	ands	r6, r0
 8010e0a:	ea06 0007 	and.w	r0, r6, r7
 8010e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e12:	4606      	mov	r6, r0
 8010e14:	e7d8      	b.n	8010dc8 <uxr_serialize_INFO_Payload+0x48>
 8010e16:	bf00      	nop

08010e18 <uxr_serialize_READ_DATA_Payload>:
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	2202      	movs	r2, #2
 8010e1c:	4605      	mov	r5, r0
 8010e1e:	460e      	mov	r6, r1
 8010e20:	f7fd f89c 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010e24:	2202      	movs	r2, #2
 8010e26:	18b1      	adds	r1, r6, r2
 8010e28:	4604      	mov	r4, r0
 8010e2a:	4628      	mov	r0, r5
 8010e2c:	f7fd f896 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010e30:	1d31      	adds	r1, r6, #4
 8010e32:	4004      	ands	r4, r0
 8010e34:	4628      	mov	r0, r5
 8010e36:	f7ff fe5d 	bl	8010af4 <uxr_serialize_ReadSpecification>
 8010e3a:	b2e4      	uxtb	r4, r4
 8010e3c:	4020      	ands	r0, r4
 8010e3e:	bd70      	pop	{r4, r5, r6, pc}

08010e40 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010e40:	b570      	push	{r4, r5, r6, lr}
 8010e42:	2202      	movs	r2, #2
 8010e44:	4605      	mov	r5, r0
 8010e46:	460e      	mov	r6, r1
 8010e48:	f7fd f888 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010e4c:	2202      	movs	r2, #2
 8010e4e:	4604      	mov	r4, r0
 8010e50:	18b1      	adds	r1, r6, r2
 8010e52:	4628      	mov	r0, r5
 8010e54:	f7fd f882 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010e58:	4020      	ands	r0, r4
 8010e5a:	b2c0      	uxtb	r0, r0
 8010e5c:	bd70      	pop	{r4, r5, r6, pc}
 8010e5e:	bf00      	nop

08010e60 <uxr_serialize_ACKNACK_Payload>:
 8010e60:	b570      	push	{r4, r5, r6, lr}
 8010e62:	460c      	mov	r4, r1
 8010e64:	460e      	mov	r6, r1
 8010e66:	f834 1b02 	ldrh.w	r1, [r4], #2
 8010e6a:	4605      	mov	r5, r0
 8010e6c:	f7f9 faaa 	bl	800a3c4 <ucdr_serialize_uint16_t>
 8010e70:	2202      	movs	r2, #2
 8010e72:	4621      	mov	r1, r4
 8010e74:	4604      	mov	r4, r0
 8010e76:	4628      	mov	r0, r5
 8010e78:	f7fd f870 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010e7c:	7931      	ldrb	r1, [r6, #4]
 8010e7e:	4004      	ands	r4, r0
 8010e80:	4628      	mov	r0, r5
 8010e82:	f7f9 fa73 	bl	800a36c <ucdr_serialize_uint8_t>
 8010e86:	b2e4      	uxtb	r4, r4
 8010e88:	4020      	ands	r0, r4
 8010e8a:	bd70      	pop	{r4, r5, r6, pc}

08010e8c <uxr_deserialize_ACKNACK_Payload>:
 8010e8c:	b570      	push	{r4, r5, r6, lr}
 8010e8e:	4605      	mov	r5, r0
 8010e90:	460e      	mov	r6, r1
 8010e92:	f7f9 fb97 	bl	800a5c4 <ucdr_deserialize_uint16_t>
 8010e96:	2202      	movs	r2, #2
 8010e98:	18b1      	adds	r1, r6, r2
 8010e9a:	4604      	mov	r4, r0
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	f7fd f8c1 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010ea2:	1d31      	adds	r1, r6, #4
 8010ea4:	4004      	ands	r4, r0
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	f7f9 fa76 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010eac:	b2e4      	uxtb	r4, r4
 8010eae:	4020      	ands	r0, r4
 8010eb0:	bd70      	pop	{r4, r5, r6, pc}
 8010eb2:	bf00      	nop

08010eb4 <uxr_serialize_HEARTBEAT_Payload>:
 8010eb4:	b570      	push	{r4, r5, r6, lr}
 8010eb6:	460d      	mov	r5, r1
 8010eb8:	8809      	ldrh	r1, [r1, #0]
 8010eba:	4606      	mov	r6, r0
 8010ebc:	f7f9 fa82 	bl	800a3c4 <ucdr_serialize_uint16_t>
 8010ec0:	8869      	ldrh	r1, [r5, #2]
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	4630      	mov	r0, r6
 8010ec6:	f7f9 fa7d 	bl	800a3c4 <ucdr_serialize_uint16_t>
 8010eca:	7929      	ldrb	r1, [r5, #4]
 8010ecc:	4004      	ands	r4, r0
 8010ece:	4630      	mov	r0, r6
 8010ed0:	f7f9 fa4c 	bl	800a36c <ucdr_serialize_uint8_t>
 8010ed4:	b2e4      	uxtb	r4, r4
 8010ed6:	4020      	ands	r0, r4
 8010ed8:	bd70      	pop	{r4, r5, r6, pc}
 8010eda:	bf00      	nop

08010edc <uxr_deserialize_HEARTBEAT_Payload>:
 8010edc:	b570      	push	{r4, r5, r6, lr}
 8010ede:	4605      	mov	r5, r0
 8010ee0:	460e      	mov	r6, r1
 8010ee2:	f7f9 fb6f 	bl	800a5c4 <ucdr_deserialize_uint16_t>
 8010ee6:	1cb1      	adds	r1, r6, #2
 8010ee8:	4604      	mov	r4, r0
 8010eea:	4628      	mov	r0, r5
 8010eec:	f7f9 fb6a 	bl	800a5c4 <ucdr_deserialize_uint16_t>
 8010ef0:	1d31      	adds	r1, r6, #4
 8010ef2:	4004      	ands	r4, r0
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	f7f9 fa4f 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010efa:	b2e4      	uxtb	r4, r4
 8010efc:	4020      	ands	r0, r4
 8010efe:	bd70      	pop	{r4, r5, r6, pc}

08010f00 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f04:	4605      	mov	r5, r0
 8010f06:	460e      	mov	r6, r1
 8010f08:	f7fa f8f8 	bl	800b0fc <ucdr_deserialize_int32_t>
 8010f0c:	1d31      	adds	r1, r6, #4
 8010f0e:	4607      	mov	r7, r0
 8010f10:	4628      	mov	r0, r5
 8010f12:	f7f9 fd71 	bl	800a9f8 <ucdr_deserialize_uint32_t>
 8010f16:	f106 0108 	add.w	r1, r6, #8
 8010f1a:	4680      	mov	r8, r0
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	f7fa f8ed 	bl	800b0fc <ucdr_deserialize_int32_t>
 8010f22:	f106 010c 	add.w	r1, r6, #12
 8010f26:	4604      	mov	r4, r0
 8010f28:	4628      	mov	r0, r5
 8010f2a:	f7f9 fd65 	bl	800a9f8 <ucdr_deserialize_uint32_t>
 8010f2e:	ea07 0708 	and.w	r7, r7, r8
 8010f32:	403c      	ands	r4, r7
 8010f34:	f106 0110 	add.w	r1, r6, #16
 8010f38:	4004      	ands	r4, r0
 8010f3a:	4628      	mov	r0, r5
 8010f3c:	f7fa f8de 	bl	800b0fc <ucdr_deserialize_int32_t>
 8010f40:	f106 0114 	add.w	r1, r6, #20
 8010f44:	4607      	mov	r7, r0
 8010f46:	4628      	mov	r0, r5
 8010f48:	f7f9 fd56 	bl	800a9f8 <ucdr_deserialize_uint32_t>
 8010f4c:	b2e4      	uxtb	r4, r4
 8010f4e:	403c      	ands	r4, r7
 8010f50:	4020      	ands	r0, r4
 8010f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f56:	bf00      	nop

08010f58 <uxr_serialize_SampleIdentity>:
 8010f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f5c:	220c      	movs	r2, #12
 8010f5e:	4604      	mov	r4, r0
 8010f60:	460d      	mov	r5, r1
 8010f62:	f7fc fffb 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010f66:	2203      	movs	r2, #3
 8010f68:	f105 010c 	add.w	r1, r5, #12
 8010f6c:	4607      	mov	r7, r0
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f7fc fff4 	bl	800df5c <ucdr_serialize_array_uint8_t>
 8010f74:	7be9      	ldrb	r1, [r5, #15]
 8010f76:	4680      	mov	r8, r0
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f7f9 f9f7 	bl	800a36c <ucdr_serialize_uint8_t>
 8010f7e:	6929      	ldr	r1, [r5, #16]
 8010f80:	4606      	mov	r6, r0
 8010f82:	4620      	mov	r0, r4
 8010f84:	f7fa f822 	bl	800afcc <ucdr_serialize_int32_t>
 8010f88:	6969      	ldr	r1, [r5, #20]
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	ea07 0708 	and.w	r7, r7, r8
 8010f92:	461c      	mov	r4, r3
 8010f94:	f7f9 fc00 	bl	800a798 <ucdr_serialize_uint32_t>
 8010f98:	403e      	ands	r6, r7
 8010f9a:	4034      	ands	r4, r6
 8010f9c:	4020      	ands	r0, r4
 8010f9e:	b2c0      	uxtb	r0, r0
 8010fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010fa4 <uxr_deserialize_SampleIdentity>:
 8010fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa8:	220c      	movs	r2, #12
 8010faa:	4604      	mov	r4, r0
 8010fac:	460d      	mov	r5, r1
 8010fae:	f7fd f839 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010fb2:	2203      	movs	r2, #3
 8010fb4:	f105 010c 	add.w	r1, r5, #12
 8010fb8:	4607      	mov	r7, r0
 8010fba:	4620      	mov	r0, r4
 8010fbc:	f7fd f832 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8010fc0:	f105 010f 	add.w	r1, r5, #15
 8010fc4:	4680      	mov	r8, r0
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f7f9 f9e6 	bl	800a398 <ucdr_deserialize_uint8_t>
 8010fcc:	f105 0110 	add.w	r1, r5, #16
 8010fd0:	4606      	mov	r6, r0
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f7fa f892 	bl	800b0fc <ucdr_deserialize_int32_t>
 8010fd8:	f105 0114 	add.w	r1, r5, #20
 8010fdc:	4603      	mov	r3, r0
 8010fde:	4620      	mov	r0, r4
 8010fe0:	ea07 0708 	and.w	r7, r7, r8
 8010fe4:	461c      	mov	r4, r3
 8010fe6:	f7f9 fd07 	bl	800a9f8 <ucdr_deserialize_uint32_t>
 8010fea:	403e      	ands	r6, r7
 8010fec:	4034      	ands	r4, r6
 8010fee:	4020      	ands	r0, r4
 8010ff0:	b2c0      	uxtb	r0, r0
 8010ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff6:	bf00      	nop

08010ff8 <rcl_client_get_rmw_handle>:
 8010ff8:	b118      	cbz	r0, 8011002 <rcl_client_get_rmw_handle+0xa>
 8010ffa:	6800      	ldr	r0, [r0, #0]
 8010ffc:	b108      	cbz	r0, 8011002 <rcl_client_get_rmw_handle+0xa>
 8010ffe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011002:	4770      	bx	lr

08011004 <rcl_send_request>:
 8011004:	b570      	push	{r4, r5, r6, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	b1e8      	cbz	r0, 8011046 <rcl_send_request+0x42>
 801100a:	4604      	mov	r4, r0
 801100c:	6800      	ldr	r0, [r0, #0]
 801100e:	b1d0      	cbz	r0, 8011046 <rcl_send_request+0x42>
 8011010:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011014:	b1bb      	cbz	r3, 8011046 <rcl_send_request+0x42>
 8011016:	460e      	mov	r6, r1
 8011018:	b1d1      	cbz	r1, 8011050 <rcl_send_request+0x4c>
 801101a:	4615      	mov	r5, r2
 801101c:	b1c2      	cbz	r2, 8011050 <rcl_send_request+0x4c>
 801101e:	2105      	movs	r1, #5
 8011020:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011024:	f002 fd74 	bl	8013b10 <__atomic_load_8>
 8011028:	6823      	ldr	r3, [r4, #0]
 801102a:	e9c5 0100 	strd	r0, r1, [r5]
 801102e:	462a      	mov	r2, r5
 8011030:	4631      	mov	r1, r6
 8011032:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011036:	f003 ff1f 	bl	8014e78 <rmw_send_request>
 801103a:	4606      	mov	r6, r0
 801103c:	b160      	cbz	r0, 8011058 <rcl_send_request+0x54>
 801103e:	2601      	movs	r6, #1
 8011040:	4630      	mov	r0, r6
 8011042:	b002      	add	sp, #8
 8011044:	bd70      	pop	{r4, r5, r6, pc}
 8011046:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801104a:	4630      	mov	r0, r6
 801104c:	b002      	add	sp, #8
 801104e:	bd70      	pop	{r4, r5, r6, pc}
 8011050:	260b      	movs	r6, #11
 8011052:	4630      	mov	r0, r6
 8011054:	b002      	add	sp, #8
 8011056:	bd70      	pop	{r4, r5, r6, pc}
 8011058:	6820      	ldr	r0, [r4, #0]
 801105a:	2105      	movs	r1, #5
 801105c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011060:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011064:	9100      	str	r1, [sp, #0]
 8011066:	f002 fdbf 	bl	8013be8 <__atomic_exchange_8>
 801106a:	4630      	mov	r0, r6
 801106c:	b002      	add	sp, #8
 801106e:	bd70      	pop	{r4, r5, r6, pc}

08011070 <rcl_take_response>:
 8011070:	b570      	push	{r4, r5, r6, lr}
 8011072:	468e      	mov	lr, r1
 8011074:	460c      	mov	r4, r1
 8011076:	4616      	mov	r6, r2
 8011078:	4605      	mov	r5, r0
 801107a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801107e:	b08c      	sub	sp, #48	@ 0x30
 8011080:	f10d 0c18 	add.w	ip, sp, #24
 8011084:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011088:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801108c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011090:	b35d      	cbz	r5, 80110ea <rcl_take_response+0x7a>
 8011092:	682b      	ldr	r3, [r5, #0]
 8011094:	b34b      	cbz	r3, 80110ea <rcl_take_response+0x7a>
 8011096:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801109a:	b330      	cbz	r0, 80110ea <rcl_take_response+0x7a>
 801109c:	b346      	cbz	r6, 80110f0 <rcl_take_response+0x80>
 801109e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80110f8 <rcl_take_response+0x88>
 80110a2:	2300      	movs	r3, #0
 80110a4:	f88d 3007 	strb.w	r3, [sp, #7]
 80110a8:	4632      	mov	r2, r6
 80110aa:	f10d 0307 	add.w	r3, sp, #7
 80110ae:	a902      	add	r1, sp, #8
 80110b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80110b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80110b8:	f003 ffe6 	bl	8015088 <rmw_take_response>
 80110bc:	4605      	mov	r5, r0
 80110be:	b9c8      	cbnz	r0, 80110f4 <rcl_take_response+0x84>
 80110c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80110c4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80110c8:	2a00      	cmp	r2, #0
 80110ca:	bf08      	it	eq
 80110cc:	461d      	moveq	r5, r3
 80110ce:	f10d 0e18 	add.w	lr, sp, #24
 80110d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110d6:	46a4      	mov	ip, r4
 80110d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110dc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80110e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80110e4:	4628      	mov	r0, r5
 80110e6:	b00c      	add	sp, #48	@ 0x30
 80110e8:	bd70      	pop	{r4, r5, r6, pc}
 80110ea:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80110ee:	e7ee      	b.n	80110ce <rcl_take_response+0x5e>
 80110f0:	250b      	movs	r5, #11
 80110f2:	e7ec      	b.n	80110ce <rcl_take_response+0x5e>
 80110f4:	2501      	movs	r5, #1
 80110f6:	e7ea      	b.n	80110ce <rcl_take_response+0x5e>
	...

08011100 <rcl_client_is_valid>:
 8011100:	b130      	cbz	r0, 8011110 <rcl_client_is_valid+0x10>
 8011102:	6800      	ldr	r0, [r0, #0]
 8011104:	b120      	cbz	r0, 8011110 <rcl_client_is_valid+0x10>
 8011106:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801110a:	3800      	subs	r0, #0
 801110c:	bf18      	it	ne
 801110e:	2001      	movne	r0, #1
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop

08011114 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011114:	280b      	cmp	r0, #11
 8011116:	dc0d      	bgt.n	8011134 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011118:	2800      	cmp	r0, #0
 801111a:	db09      	blt.n	8011130 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801111c:	280b      	cmp	r0, #11
 801111e:	d807      	bhi.n	8011130 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011120:	e8df f000 	tbb	[pc, r0]
 8011124:	07060607 	.word	0x07060607
 8011128:	06060606 	.word	0x06060606
 801112c:	07070606 	.word	0x07070606
 8011130:	2001      	movs	r0, #1
 8011132:	4770      	bx	lr
 8011134:	28cb      	cmp	r0, #203	@ 0xcb
 8011136:	bf18      	it	ne
 8011138:	2001      	movne	r0, #1
 801113a:	4770      	bx	lr

0801113c <rcl_get_zero_initialized_context>:
 801113c:	4a03      	ldr	r2, [pc, #12]	@ (801114c <rcl_get_zero_initialized_context+0x10>)
 801113e:	4603      	mov	r3, r0
 8011140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011144:	e883 0003 	stmia.w	r3, {r0, r1}
 8011148:	4618      	mov	r0, r3
 801114a:	4770      	bx	lr
 801114c:	08019c74 	.word	0x08019c74

08011150 <rcl_context_is_valid>:
 8011150:	b118      	cbz	r0, 801115a <rcl_context_is_valid+0xa>
 8011152:	6840      	ldr	r0, [r0, #4]
 8011154:	3800      	subs	r0, #0
 8011156:	bf18      	it	ne
 8011158:	2001      	movne	r0, #1
 801115a:	4770      	bx	lr

0801115c <__cleanup_context>:
 801115c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011160:	4606      	mov	r6, r0
 8011162:	6800      	ldr	r0, [r0, #0]
 8011164:	2300      	movs	r3, #0
 8011166:	6073      	str	r3, [r6, #4]
 8011168:	2800      	cmp	r0, #0
 801116a:	d049      	beq.n	8011200 <__cleanup_context+0xa4>
 801116c:	6947      	ldr	r7, [r0, #20]
 801116e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011172:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011176:	b137      	cbz	r7, 8011186 <__cleanup_context+0x2a>
 8011178:	3014      	adds	r0, #20
 801117a:	f000 f9bb 	bl	80114f4 <rcl_init_options_fini>
 801117e:	4607      	mov	r7, r0
 8011180:	2800      	cmp	r0, #0
 8011182:	d144      	bne.n	801120e <__cleanup_context+0xb2>
 8011184:	6830      	ldr	r0, [r6, #0]
 8011186:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011188:	b143      	cbz	r3, 801119c <__cleanup_context+0x40>
 801118a:	3028      	adds	r0, #40	@ 0x28
 801118c:	f003 fcbc 	bl	8014b08 <rmw_context_fini>
 8011190:	b118      	cbz	r0, 801119a <__cleanup_context+0x3e>
 8011192:	2f00      	cmp	r7, #0
 8011194:	d03e      	beq.n	8011214 <__cleanup_context+0xb8>
 8011196:	f7fb fcbb 	bl	800cb10 <rcutils_reset_error>
 801119a:	6830      	ldr	r0, [r6, #0]
 801119c:	6a03      	ldr	r3, [r0, #32]
 801119e:	b1db      	cbz	r3, 80111d8 <__cleanup_context+0x7c>
 80111a0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80111a4:	2a01      	cmp	r2, #1
 80111a6:	f17c 0100 	sbcs.w	r1, ip, #0
 80111aa:	db11      	blt.n	80111d0 <__cleanup_context+0x74>
 80111ac:	2400      	movs	r4, #0
 80111ae:	4625      	mov	r5, r4
 80111b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80111b4:	4649      	mov	r1, r9
 80111b6:	b1b8      	cbz	r0, 80111e8 <__cleanup_context+0x8c>
 80111b8:	47c0      	blx	r8
 80111ba:	6833      	ldr	r3, [r6, #0]
 80111bc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80111c0:	3401      	adds	r4, #1
 80111c2:	f145 0500 	adc.w	r5, r5, #0
 80111c6:	4294      	cmp	r4, r2
 80111c8:	eb75 010c 	sbcs.w	r1, r5, ip
 80111cc:	6a1b      	ldr	r3, [r3, #32]
 80111ce:	dbef      	blt.n	80111b0 <__cleanup_context+0x54>
 80111d0:	4618      	mov	r0, r3
 80111d2:	4649      	mov	r1, r9
 80111d4:	47c0      	blx	r8
 80111d6:	6830      	ldr	r0, [r6, #0]
 80111d8:	4649      	mov	r1, r9
 80111da:	47c0      	blx	r8
 80111dc:	2300      	movs	r3, #0
 80111de:	e9c6 3300 	strd	r3, r3, [r6]
 80111e2:	4638      	mov	r0, r7
 80111e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111e8:	3401      	adds	r4, #1
 80111ea:	f145 0500 	adc.w	r5, r5, #0
 80111ee:	4294      	cmp	r4, r2
 80111f0:	eb75 010c 	sbcs.w	r1, r5, ip
 80111f4:	dbdc      	blt.n	80111b0 <__cleanup_context+0x54>
 80111f6:	4618      	mov	r0, r3
 80111f8:	4649      	mov	r1, r9
 80111fa:	47c0      	blx	r8
 80111fc:	6830      	ldr	r0, [r6, #0]
 80111fe:	e7eb      	b.n	80111d8 <__cleanup_context+0x7c>
 8011200:	4607      	mov	r7, r0
 8011202:	2300      	movs	r3, #0
 8011204:	e9c6 3300 	strd	r3, r3, [r6]
 8011208:	4638      	mov	r0, r7
 801120a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801120e:	f7fb fc7f 	bl	800cb10 <rcutils_reset_error>
 8011212:	e7b7      	b.n	8011184 <__cleanup_context+0x28>
 8011214:	f7ff ff7e 	bl	8011114 <rcl_convert_rmw_ret_to_rcl_ret>
 8011218:	4607      	mov	r7, r0
 801121a:	e7bc      	b.n	8011196 <__cleanup_context+0x3a>

0801121c <rcl_init>:
 801121c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011220:	1e05      	subs	r5, r0, #0
 8011222:	b09e      	sub	sp, #120	@ 0x78
 8011224:	460e      	mov	r6, r1
 8011226:	4690      	mov	r8, r2
 8011228:	461f      	mov	r7, r3
 801122a:	f340 809c 	ble.w	8011366 <rcl_init+0x14a>
 801122e:	2900      	cmp	r1, #0
 8011230:	f000 809c 	beq.w	801136c <rcl_init+0x150>
 8011234:	f1a1 0e04 	sub.w	lr, r1, #4
 8011238:	f04f 0c00 	mov.w	ip, #0
 801123c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011240:	f10c 0c01 	add.w	ip, ip, #1
 8011244:	2c00      	cmp	r4, #0
 8011246:	f000 8091 	beq.w	801136c <rcl_init+0x150>
 801124a:	4565      	cmp	r5, ip
 801124c:	d1f6      	bne.n	801123c <rcl_init+0x20>
 801124e:	f1b8 0f00 	cmp.w	r8, #0
 8011252:	f000 808b 	beq.w	801136c <rcl_init+0x150>
 8011256:	f8d8 4000 	ldr.w	r4, [r8]
 801125a:	2c00      	cmp	r4, #0
 801125c:	f000 8086 	beq.w	801136c <rcl_init+0x150>
 8011260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011262:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011266:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	f8cc 3000 	str.w	r3, [ip]
 8011270:	a819      	add	r0, sp, #100	@ 0x64
 8011272:	f7fb fc29 	bl	800cac8 <rcutils_allocator_is_valid>
 8011276:	2800      	cmp	r0, #0
 8011278:	d078      	beq.n	801136c <rcl_init+0x150>
 801127a:	2f00      	cmp	r7, #0
 801127c:	d076      	beq.n	801136c <rcl_init+0x150>
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d178      	bne.n	8011376 <rcl_init+0x15a>
 8011284:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011288:	2178      	movs	r1, #120	@ 0x78
 801128a:	2001      	movs	r0, #1
 801128c:	4798      	blx	r3
 801128e:	4604      	mov	r4, r0
 8011290:	6038      	str	r0, [r7, #0]
 8011292:	2800      	cmp	r0, #0
 8011294:	f000 80b6 	beq.w	8011404 <rcl_init+0x1e8>
 8011298:	a802      	add	r0, sp, #8
 801129a:	f002 ff89 	bl	80141b0 <rmw_get_zero_initialized_context>
 801129e:	a902      	add	r1, sp, #8
 80112a0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80112a4:	2250      	movs	r2, #80	@ 0x50
 80112a6:	ac19      	add	r4, sp, #100	@ 0x64
 80112a8:	f007 fa63 	bl	8018772 <memcpy>
 80112ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112ae:	f8d7 e000 	ldr.w	lr, [r7]
 80112b2:	46f4      	mov	ip, lr
 80112b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112b8:	6823      	ldr	r3, [r4, #0]
 80112ba:	f8cc 3000 	str.w	r3, [ip]
 80112be:	f10e 0114 	add.w	r1, lr, #20
 80112c2:	4640      	mov	r0, r8
 80112c4:	f000 f940 	bl	8011548 <rcl_init_options_copy>
 80112c8:	4604      	mov	r4, r0
 80112ca:	2800      	cmp	r0, #0
 80112cc:	d144      	bne.n	8011358 <rcl_init+0x13c>
 80112ce:	f8d7 9000 	ldr.w	r9, [r7]
 80112d2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80112d6:	f8c9 0020 	str.w	r0, [r9, #32]
 80112da:	f8c9 5018 	str.w	r5, [r9, #24]
 80112de:	f8c9 801c 	str.w	r8, [r9, #28]
 80112e2:	2d00      	cmp	r5, #0
 80112e4:	d04e      	beq.n	8011384 <rcl_init+0x168>
 80112e6:	2e00      	cmp	r6, #0
 80112e8:	d04c      	beq.n	8011384 <rcl_init+0x168>
 80112ea:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80112ee:	2104      	movs	r1, #4
 80112f0:	4628      	mov	r0, r5
 80112f2:	4798      	blx	r3
 80112f4:	f8c9 0020 	str.w	r0, [r9, #32]
 80112f8:	f8d7 9000 	ldr.w	r9, [r7]
 80112fc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011300:	46ca      	mov	sl, r9
 8011302:	b343      	cbz	r3, 8011356 <rcl_init+0x13a>
 8011304:	2d01      	cmp	r5, #1
 8011306:	f178 0300 	sbcs.w	r3, r8, #0
 801130a:	db3b      	blt.n	8011384 <rcl_init+0x168>
 801130c:	2400      	movs	r4, #0
 801130e:	3e04      	subs	r6, #4
 8011310:	46a1      	mov	r9, r4
 8011312:	e00b      	b.n	801132c <rcl_init+0x110>
 8011314:	6831      	ldr	r1, [r6, #0]
 8011316:	f007 fa2c 	bl	8018772 <memcpy>
 801131a:	3401      	adds	r4, #1
 801131c:	f149 0900 	adc.w	r9, r9, #0
 8011320:	45c8      	cmp	r8, r9
 8011322:	bf08      	it	eq
 8011324:	42a5      	cmpeq	r5, r4
 8011326:	d02b      	beq.n	8011380 <rcl_init+0x164>
 8011328:	f8d7 a000 	ldr.w	sl, [r7]
 801132c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011330:	f7ee ff60 	bl	80001f4 <strlen>
 8011334:	1c42      	adds	r2, r0, #1
 8011336:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011338:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801133a:	f8da a020 	ldr.w	sl, [sl, #32]
 801133e:	9201      	str	r2, [sp, #4]
 8011340:	4610      	mov	r0, r2
 8011342:	4798      	blx	r3
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801134a:	6a1b      	ldr	r3, [r3, #32]
 801134c:	9a01      	ldr	r2, [sp, #4]
 801134e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011352:	2800      	cmp	r0, #0
 8011354:	d1de      	bne.n	8011314 <rcl_init+0xf8>
 8011356:	240a      	movs	r4, #10
 8011358:	4638      	mov	r0, r7
 801135a:	f7ff feff 	bl	801115c <__cleanup_context>
 801135e:	4620      	mov	r0, r4
 8011360:	b01e      	add	sp, #120	@ 0x78
 8011362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011366:	2900      	cmp	r1, #0
 8011368:	f43f af71 	beq.w	801124e <rcl_init+0x32>
 801136c:	240b      	movs	r4, #11
 801136e:	4620      	mov	r0, r4
 8011370:	b01e      	add	sp, #120	@ 0x78
 8011372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011376:	2464      	movs	r4, #100	@ 0x64
 8011378:	4620      	mov	r0, r4
 801137a:	b01e      	add	sp, #120	@ 0x78
 801137c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011380:	f8d7 9000 	ldr.w	r9, [r7]
 8011384:	4926      	ldr	r1, [pc, #152]	@ (8011420 <rcl_init+0x204>)
 8011386:	680b      	ldr	r3, [r1, #0]
 8011388:	3301      	adds	r3, #1
 801138a:	d036      	beq.n	80113fa <rcl_init+0x1de>
 801138c:	600b      	str	r3, [r1, #0]
 801138e:	461a      	mov	r2, r3
 8011390:	2400      	movs	r4, #0
 8011392:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011396:	607b      	str	r3, [r7, #4]
 8011398:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801139a:	3301      	adds	r3, #1
 801139c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80113a0:	d034      	beq.n	801140c <rcl_init+0x1f0>
 80113a2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80113a6:	b93b      	cbnz	r3, 80113b8 <rcl_init+0x19c>
 80113a8:	3030      	adds	r0, #48	@ 0x30
 80113aa:	f000 f939 	bl	8011620 <rcl_get_localhost_only>
 80113ae:	4604      	mov	r4, r0
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d1d1      	bne.n	8011358 <rcl_init+0x13c>
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	6958      	ldr	r0, [r3, #20]
 80113b8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80113ba:	aa18      	add	r2, sp, #96	@ 0x60
 80113bc:	a917      	add	r1, sp, #92	@ 0x5c
 80113be:	f001 f841 	bl	8012444 <rcl_validate_enclave_name>
 80113c2:	4604      	mov	r4, r0
 80113c4:	2800      	cmp	r0, #0
 80113c6:	d1c7      	bne.n	8011358 <rcl_init+0x13c>
 80113c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80113ca:	b9eb      	cbnz	r3, 8011408 <rcl_init+0x1ec>
 80113cc:	6839      	ldr	r1, [r7, #0]
 80113ce:	694b      	ldr	r3, [r1, #20]
 80113d0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80113d2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80113d6:	f000 fc3d 	bl	8011c54 <rcl_get_security_options_from_environment>
 80113da:	4604      	mov	r4, r0
 80113dc:	2800      	cmp	r0, #0
 80113de:	d1bb      	bne.n	8011358 <rcl_init+0x13c>
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	6948      	ldr	r0, [r1, #20]
 80113e4:	3128      	adds	r1, #40	@ 0x28
 80113e6:	3018      	adds	r0, #24
 80113e8:	f003 fa58 	bl	801489c <rmw_init>
 80113ec:	4604      	mov	r4, r0
 80113ee:	2800      	cmp	r0, #0
 80113f0:	d0bd      	beq.n	801136e <rcl_init+0x152>
 80113f2:	f7ff fe8f 	bl	8011114 <rcl_convert_rmw_ret_to_rcl_ret>
 80113f6:	4604      	mov	r4, r0
 80113f8:	e7ae      	b.n	8011358 <rcl_init+0x13c>
 80113fa:	2201      	movs	r2, #1
 80113fc:	461c      	mov	r4, r3
 80113fe:	600a      	str	r2, [r1, #0]
 8011400:	4613      	mov	r3, r2
 8011402:	e7c6      	b.n	8011392 <rcl_init+0x176>
 8011404:	240a      	movs	r4, #10
 8011406:	e7b2      	b.n	801136e <rcl_init+0x152>
 8011408:	2401      	movs	r4, #1
 801140a:	e7a5      	b.n	8011358 <rcl_init+0x13c>
 801140c:	3024      	adds	r0, #36	@ 0x24
 801140e:	f005 feed 	bl	80171ec <rcl_get_default_domain_id>
 8011412:	4604      	mov	r4, r0
 8011414:	2800      	cmp	r0, #0
 8011416:	d19f      	bne.n	8011358 <rcl_init+0x13c>
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	6958      	ldr	r0, [r3, #20]
 801141c:	e7c1      	b.n	80113a2 <rcl_init+0x186>
 801141e:	bf00      	nop
 8011420:	2000e08c 	.word	0x2000e08c

08011424 <rcl_get_zero_initialized_init_options>:
 8011424:	2000      	movs	r0, #0
 8011426:	4770      	bx	lr

08011428 <rcl_init_options_init>:
 8011428:	b084      	sub	sp, #16
 801142a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801142c:	b097      	sub	sp, #92	@ 0x5c
 801142e:	ae1d      	add	r6, sp, #116	@ 0x74
 8011430:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8011434:	2800      	cmp	r0, #0
 8011436:	d058      	beq.n	80114ea <rcl_init_options_init+0xc2>
 8011438:	6803      	ldr	r3, [r0, #0]
 801143a:	4605      	mov	r5, r0
 801143c:	b133      	cbz	r3, 801144c <rcl_init_options_init+0x24>
 801143e:	2464      	movs	r4, #100	@ 0x64
 8011440:	4620      	mov	r0, r4
 8011442:	b017      	add	sp, #92	@ 0x5c
 8011444:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011448:	b004      	add	sp, #16
 801144a:	4770      	bx	lr
 801144c:	4630      	mov	r0, r6
 801144e:	f7fb fb3b 	bl	800cac8 <rcutils_allocator_is_valid>
 8011452:	2800      	cmp	r0, #0
 8011454:	d049      	beq.n	80114ea <rcl_init_options_init+0xc2>
 8011456:	46b4      	mov	ip, r6
 8011458:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801145c:	ac11      	add	r4, sp, #68	@ 0x44
 801145e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011460:	f8dc 3000 	ldr.w	r3, [ip]
 8011464:	6023      	str	r3, [r4, #0]
 8011466:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8011468:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801146a:	2050      	movs	r0, #80	@ 0x50
 801146c:	4798      	blx	r3
 801146e:	4604      	mov	r4, r0
 8011470:	6028      	str	r0, [r5, #0]
 8011472:	2800      	cmp	r0, #0
 8011474:	d03b      	beq.n	80114ee <rcl_init_options_init+0xc6>
 8011476:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801147a:	4686      	mov	lr, r0
 801147c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011480:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011484:	f8dc 3000 	ldr.w	r3, [ip]
 8011488:	f8ce 3000 	str.w	r3, [lr]
 801148c:	a802      	add	r0, sp, #8
 801148e:	f002 fe9f 	bl	80141d0 <rmw_get_zero_initialized_init_options>
 8011492:	f10d 0e08 	add.w	lr, sp, #8
 8011496:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801149a:	f104 0c18 	add.w	ip, r4, #24
 801149e:	682f      	ldr	r7, [r5, #0]
 80114a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80114a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80114a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80114ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80114b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80114b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80114b8:	ac20      	add	r4, sp, #128	@ 0x80
 80114ba:	e88c 0003 	stmia.w	ip, {r0, r1}
 80114be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80114c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80114c6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80114ca:	f107 0018 	add.w	r0, r7, #24
 80114ce:	f003 f8ed 	bl	80146ac <rmw_init_options_init>
 80114d2:	4604      	mov	r4, r0
 80114d4:	2800      	cmp	r0, #0
 80114d6:	d0b3      	beq.n	8011440 <rcl_init_options_init+0x18>
 80114d8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80114da:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80114dc:	6828      	ldr	r0, [r5, #0]
 80114de:	4798      	blx	r3
 80114e0:	4620      	mov	r0, r4
 80114e2:	f7ff fe17 	bl	8011114 <rcl_convert_rmw_ret_to_rcl_ret>
 80114e6:	4604      	mov	r4, r0
 80114e8:	e7aa      	b.n	8011440 <rcl_init_options_init+0x18>
 80114ea:	240b      	movs	r4, #11
 80114ec:	e7a8      	b.n	8011440 <rcl_init_options_init+0x18>
 80114ee:	240a      	movs	r4, #10
 80114f0:	e7a6      	b.n	8011440 <rcl_init_options_init+0x18>
 80114f2:	bf00      	nop

080114f4 <rcl_init_options_fini>:
 80114f4:	b530      	push	{r4, r5, lr}
 80114f6:	b087      	sub	sp, #28
 80114f8:	b1f0      	cbz	r0, 8011538 <rcl_init_options_fini+0x44>
 80114fa:	6803      	ldr	r3, [r0, #0]
 80114fc:	4604      	mov	r4, r0
 80114fe:	b1db      	cbz	r3, 8011538 <rcl_init_options_fini+0x44>
 8011500:	469c      	mov	ip, r3
 8011502:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011506:	f10d 0e04 	add.w	lr, sp, #4
 801150a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801150e:	f8dc 3000 	ldr.w	r3, [ip]
 8011512:	f8ce 3000 	str.w	r3, [lr]
 8011516:	a801      	add	r0, sp, #4
 8011518:	f7fb fad6 	bl	800cac8 <rcutils_allocator_is_valid>
 801151c:	b160      	cbz	r0, 8011538 <rcl_init_options_fini+0x44>
 801151e:	6820      	ldr	r0, [r4, #0]
 8011520:	3018      	adds	r0, #24
 8011522:	f003 f973 	bl	801480c <rmw_init_options_fini>
 8011526:	4605      	mov	r5, r0
 8011528:	b950      	cbnz	r0, 8011540 <rcl_init_options_fini+0x4c>
 801152a:	6820      	ldr	r0, [r4, #0]
 801152c:	9b02      	ldr	r3, [sp, #8]
 801152e:	9905      	ldr	r1, [sp, #20]
 8011530:	4798      	blx	r3
 8011532:	4628      	mov	r0, r5
 8011534:	b007      	add	sp, #28
 8011536:	bd30      	pop	{r4, r5, pc}
 8011538:	250b      	movs	r5, #11
 801153a:	4628      	mov	r0, r5
 801153c:	b007      	add	sp, #28
 801153e:	bd30      	pop	{r4, r5, pc}
 8011540:	f7ff fde8 	bl	8011114 <rcl_convert_rmw_ret_to_rcl_ret>
 8011544:	4605      	mov	r5, r0
 8011546:	e7f8      	b.n	801153a <rcl_init_options_fini+0x46>

08011548 <rcl_init_options_copy>:
 8011548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801154c:	b094      	sub	sp, #80	@ 0x50
 801154e:	2800      	cmp	r0, #0
 8011550:	d058      	beq.n	8011604 <rcl_init_options_copy+0xbc>
 8011552:	4604      	mov	r4, r0
 8011554:	6800      	ldr	r0, [r0, #0]
 8011556:	2800      	cmp	r0, #0
 8011558:	d054      	beq.n	8011604 <rcl_init_options_copy+0xbc>
 801155a:	460e      	mov	r6, r1
 801155c:	f7fb fab4 	bl	800cac8 <rcutils_allocator_is_valid>
 8011560:	2800      	cmp	r0, #0
 8011562:	d04f      	beq.n	8011604 <rcl_init_options_copy+0xbc>
 8011564:	2e00      	cmp	r6, #0
 8011566:	d04d      	beq.n	8011604 <rcl_init_options_copy+0xbc>
 8011568:	6833      	ldr	r3, [r6, #0]
 801156a:	b123      	cbz	r3, 8011576 <rcl_init_options_copy+0x2e>
 801156c:	2464      	movs	r4, #100	@ 0x64
 801156e:	4620      	mov	r0, r4
 8011570:	b014      	add	sp, #80	@ 0x50
 8011572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011576:	6827      	ldr	r7, [r4, #0]
 8011578:	46bc      	mov	ip, r7
 801157a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801157e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8011580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011582:	f8dc 3000 	ldr.w	r3, [ip]
 8011586:	f8d7 8000 	ldr.w	r8, [r7]
 801158a:	602b      	str	r3, [r5, #0]
 801158c:	4619      	mov	r1, r3
 801158e:	2050      	movs	r0, #80	@ 0x50
 8011590:	47c0      	blx	r8
 8011592:	4605      	mov	r5, r0
 8011594:	6030      	str	r0, [r6, #0]
 8011596:	b3d0      	cbz	r0, 801160e <rcl_init_options_copy+0xc6>
 8011598:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801159c:	4686      	mov	lr, r0
 801159e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80115a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80115a6:	f8dc 3000 	ldr.w	r3, [ip]
 80115aa:	f8ce 3000 	str.w	r3, [lr]
 80115ae:	4668      	mov	r0, sp
 80115b0:	f002 fe0e 	bl	80141d0 <rmw_get_zero_initialized_init_options>
 80115b4:	46ee      	mov	lr, sp
 80115b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80115ba:	f105 0c18 	add.w	ip, r5, #24
 80115be:	6824      	ldr	r4, [r4, #0]
 80115c0:	6835      	ldr	r5, [r6, #0]
 80115c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80115ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80115d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115d6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80115da:	e88c 0003 	stmia.w	ip, {r0, r1}
 80115de:	f104 0018 	add.w	r0, r4, #24
 80115e2:	f105 0118 	add.w	r1, r5, #24
 80115e6:	f003 f8c9 	bl	801477c <rmw_init_options_copy>
 80115ea:	4604      	mov	r4, r0
 80115ec:	2800      	cmp	r0, #0
 80115ee:	d0be      	beq.n	801156e <rcl_init_options_copy+0x26>
 80115f0:	f7fb fa78 	bl	800cae4 <rcutils_get_error_string>
 80115f4:	f7fb fa8c 	bl	800cb10 <rcutils_reset_error>
 80115f8:	4630      	mov	r0, r6
 80115fa:	f7ff ff7b 	bl	80114f4 <rcl_init_options_fini>
 80115fe:	b140      	cbz	r0, 8011612 <rcl_init_options_copy+0xca>
 8011600:	4604      	mov	r4, r0
 8011602:	e7b4      	b.n	801156e <rcl_init_options_copy+0x26>
 8011604:	240b      	movs	r4, #11
 8011606:	4620      	mov	r0, r4
 8011608:	b014      	add	sp, #80	@ 0x50
 801160a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801160e:	240a      	movs	r4, #10
 8011610:	e7ad      	b.n	801156e <rcl_init_options_copy+0x26>
 8011612:	4620      	mov	r0, r4
 8011614:	b014      	add	sp, #80	@ 0x50
 8011616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801161a:	f7ff bd7b 	b.w	8011114 <rcl_convert_rmw_ret_to_rcl_ret>
 801161e:	bf00      	nop

08011620 <rcl_get_localhost_only>:
 8011620:	b510      	push	{r4, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	2300      	movs	r3, #0
 8011626:	9301      	str	r3, [sp, #4]
 8011628:	b1b8      	cbz	r0, 801165a <rcl_get_localhost_only+0x3a>
 801162a:	4604      	mov	r4, r0
 801162c:	a901      	add	r1, sp, #4
 801162e:	480c      	ldr	r0, [pc, #48]	@ (8011660 <rcl_get_localhost_only+0x40>)
 8011630:	f002 fb12 	bl	8013c58 <rcutils_get_env>
 8011634:	b110      	cbz	r0, 801163c <rcl_get_localhost_only+0x1c>
 8011636:	2001      	movs	r0, #1
 8011638:	b002      	add	sp, #8
 801163a:	bd10      	pop	{r4, pc}
 801163c:	9b01      	ldr	r3, [sp, #4]
 801163e:	b113      	cbz	r3, 8011646 <rcl_get_localhost_only+0x26>
 8011640:	781a      	ldrb	r2, [r3, #0]
 8011642:	2a31      	cmp	r2, #49	@ 0x31
 8011644:	d004      	beq.n	8011650 <rcl_get_localhost_only+0x30>
 8011646:	2302      	movs	r3, #2
 8011648:	2000      	movs	r0, #0
 801164a:	7023      	strb	r3, [r4, #0]
 801164c:	b002      	add	sp, #8
 801164e:	bd10      	pop	{r4, pc}
 8011650:	785b      	ldrb	r3, [r3, #1]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d1f7      	bne.n	8011646 <rcl_get_localhost_only+0x26>
 8011656:	2301      	movs	r3, #1
 8011658:	e7f6      	b.n	8011648 <rcl_get_localhost_only+0x28>
 801165a:	200b      	movs	r0, #11
 801165c:	b002      	add	sp, #8
 801165e:	bd10      	pop	{r4, pc}
 8011660:	08019c7c 	.word	0x08019c7c

08011664 <rcl_get_zero_initialized_node>:
 8011664:	4a03      	ldr	r2, [pc, #12]	@ (8011674 <rcl_get_zero_initialized_node+0x10>)
 8011666:	4603      	mov	r3, r0
 8011668:	e892 0003 	ldmia.w	r2, {r0, r1}
 801166c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011670:	4618      	mov	r0, r3
 8011672:	4770      	bx	lr
 8011674:	08019ca4 	.word	0x08019ca4

08011678 <rcl_node_init>:
 8011678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801167c:	b0a9      	sub	sp, #164	@ 0xa4
 801167e:	4604      	mov	r4, r0
 8011680:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8011684:	a823      	add	r0, sp, #140	@ 0x8c
 8011686:	460e      	mov	r6, r1
 8011688:	4615      	mov	r5, r2
 801168a:	461f      	mov	r7, r3
 801168c:	f005 ffd6 	bl	801763c <rcl_guard_condition_get_default_options>
 8011690:	f1b8 0f00 	cmp.w	r8, #0
 8011694:	f000 80e6 	beq.w	8011864 <rcl_node_init+0x1ec>
 8011698:	4640      	mov	r0, r8
 801169a:	f7fb fa15 	bl	800cac8 <rcutils_allocator_is_valid>
 801169e:	2800      	cmp	r0, #0
 80116a0:	f000 80e0 	beq.w	8011864 <rcl_node_init+0x1ec>
 80116a4:	2e00      	cmp	r6, #0
 80116a6:	f000 80dd 	beq.w	8011864 <rcl_node_init+0x1ec>
 80116aa:	2d00      	cmp	r5, #0
 80116ac:	f000 80da 	beq.w	8011864 <rcl_node_init+0x1ec>
 80116b0:	2c00      	cmp	r4, #0
 80116b2:	f000 80d7 	beq.w	8011864 <rcl_node_init+0x1ec>
 80116b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80116ba:	f1b9 0f00 	cmp.w	r9, #0
 80116be:	f040 80fd 	bne.w	80118bc <rcl_node_init+0x244>
 80116c2:	2f00      	cmp	r7, #0
 80116c4:	f000 80ce 	beq.w	8011864 <rcl_node_init+0x1ec>
 80116c8:	4638      	mov	r0, r7
 80116ca:	f7ff fd41 	bl	8011150 <rcl_context_is_valid>
 80116ce:	4682      	mov	sl, r0
 80116d0:	2800      	cmp	r0, #0
 80116d2:	f000 80cd 	beq.w	8011870 <rcl_node_init+0x1f8>
 80116d6:	464a      	mov	r2, r9
 80116d8:	a922      	add	r1, sp, #136	@ 0x88
 80116da:	4630      	mov	r0, r6
 80116dc:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80116e0:	f002 ff18 	bl	8014514 <rmw_validate_node_name>
 80116e4:	4681      	mov	r9, r0
 80116e6:	2800      	cmp	r0, #0
 80116e8:	f040 80be 	bne.w	8011868 <rcl_node_init+0x1f0>
 80116ec:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80116ee:	2800      	cmp	r0, #0
 80116f0:	f040 80f0 	bne.w	80118d4 <rcl_node_init+0x25c>
 80116f4:	4628      	mov	r0, r5
 80116f6:	f7ee fd7d 	bl	80001f4 <strlen>
 80116fa:	2800      	cmp	r0, #0
 80116fc:	f040 80bb 	bne.w	8011876 <rcl_node_init+0x1fe>
 8011700:	4d7c      	ldr	r5, [pc, #496]	@ (80118f4 <rcl_node_init+0x27c>)
 8011702:	a922      	add	r1, sp, #136	@ 0x88
 8011704:	2200      	movs	r2, #0
 8011706:	4628      	mov	r0, r5
 8011708:	f002 fee6 	bl	80144d8 <rmw_validate_namespace>
 801170c:	4681      	mov	r9, r0
 801170e:	2800      	cmp	r0, #0
 8011710:	f040 80aa 	bne.w	8011868 <rcl_node_init+0x1f0>
 8011714:	4682      	mov	sl, r0
 8011716:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011718:	2800      	cmp	r0, #0
 801171a:	f040 80e0 	bne.w	80118de <rcl_node_init+0x266>
 801171e:	f8d8 3000 	ldr.w	r3, [r8]
 8011722:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011726:	2078      	movs	r0, #120	@ 0x78
 8011728:	4798      	blx	r3
 801172a:	4681      	mov	r9, r0
 801172c:	6060      	str	r0, [r4, #4]
 801172e:	2800      	cmp	r0, #0
 8011730:	f000 80ca 	beq.w	80118c8 <rcl_node_init+0x250>
 8011734:	2200      	movs	r2, #0
 8011736:	2300      	movs	r3, #0
 8011738:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 801173c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8011740:	a808      	add	r0, sp, #32
 8011742:	f000 f907 	bl	8011954 <rcl_node_get_default_options>
 8011746:	a908      	add	r1, sp, #32
 8011748:	4648      	mov	r0, r9
 801174a:	2268      	movs	r2, #104	@ 0x68
 801174c:	f007 f811 	bl	8018772 <memcpy>
 8011750:	6861      	ldr	r1, [r4, #4]
 8011752:	6027      	str	r7, [r4, #0]
 8011754:	4640      	mov	r0, r8
 8011756:	f000 f90b 	bl	8011970 <rcl_node_options_copy>
 801175a:	2800      	cmp	r0, #0
 801175c:	d158      	bne.n	8011810 <rcl_node_init+0x198>
 801175e:	4628      	mov	r0, r5
 8011760:	f7ee fd48 	bl	80001f4 <strlen>
 8011764:	4428      	add	r0, r5
 8011766:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801176a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801176e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011770:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	bf0c      	ite	eq
 8011778:	4b5f      	ldreq	r3, [pc, #380]	@ (80118f8 <rcl_node_init+0x280>)
 801177a:	4b60      	ldrne	r3, [pc, #384]	@ (80118fc <rcl_node_init+0x284>)
 801177c:	9302      	str	r3, [sp, #8]
 801177e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011782:	9301      	str	r3, [sp, #4]
 8011784:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011788:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801178c:	f002 fa8c 	bl	8013ca8 <rcutils_format_string_limit>
 8011790:	6823      	ldr	r3, [r4, #0]
 8011792:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8011796:	6818      	ldr	r0, [r3, #0]
 8011798:	4631      	mov	r1, r6
 801179a:	3028      	adds	r0, #40	@ 0x28
 801179c:	462a      	mov	r2, r5
 801179e:	6866      	ldr	r6, [r4, #4]
 80117a0:	f003 fad0 	bl	8014d44 <rmw_create_node>
 80117a4:	6863      	ldr	r3, [r4, #4]
 80117a6:	66b0      	str	r0, [r6, #104]	@ 0x68
 80117a8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80117aa:	2800      	cmp	r0, #0
 80117ac:	d032      	beq.n	8011814 <rcl_node_init+0x19c>
 80117ae:	f003 fb5d 	bl	8014e6c <rmw_node_get_graph_guard_condition>
 80117b2:	4681      	mov	r9, r0
 80117b4:	b360      	cbz	r0, 8011810 <rcl_node_init+0x198>
 80117b6:	f8d8 3000 	ldr.w	r3, [r8]
 80117ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80117be:	6866      	ldr	r6, [r4, #4]
 80117c0:	2008      	movs	r0, #8
 80117c2:	4798      	blx	r3
 80117c4:	6863      	ldr	r3, [r4, #4]
 80117c6:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80117c8:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80117cc:	f1bb 0f00 	cmp.w	fp, #0
 80117d0:	d020      	beq.n	8011814 <rcl_node_init+0x19c>
 80117d2:	a806      	add	r0, sp, #24
 80117d4:	f005 fea2 	bl	801751c <rcl_get_zero_initialized_guard_condition>
 80117d8:	a806      	add	r0, sp, #24
 80117da:	c803      	ldmia	r0, {r0, r1}
 80117dc:	6863      	ldr	r3, [r4, #4]
 80117de:	46c4      	mov	ip, r8
 80117e0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80117e4:	e88b 0003 	stmia.w	fp, {r0, r1}
 80117e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80117ec:	ae23      	add	r6, sp, #140	@ 0x8c
 80117ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80117f0:	f8dc 3000 	ldr.w	r3, [ip]
 80117f4:	6033      	str	r3, [r6, #0]
 80117f6:	ab28      	add	r3, sp, #160	@ 0xa0
 80117f8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80117fc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011800:	4649      	mov	r1, r9
 8011802:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011804:	463a      	mov	r2, r7
 8011806:	4670      	mov	r0, lr
 8011808:	f005 fe92 	bl	8017530 <rcl_guard_condition_init_from_rmw>
 801180c:	4681      	mov	r9, r0
 801180e:	b328      	cbz	r0, 801185c <rcl_node_init+0x1e4>
 8011810:	6863      	ldr	r3, [r4, #4]
 8011812:	b1f3      	cbz	r3, 8011852 <rcl_node_init+0x1da>
 8011814:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8011816:	b128      	cbz	r0, 8011824 <rcl_node_init+0x1ac>
 8011818:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801181c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011820:	4798      	blx	r3
 8011822:	6863      	ldr	r3, [r4, #4]
 8011824:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011826:	b110      	cbz	r0, 801182e <rcl_node_init+0x1b6>
 8011828:	f003 faa4 	bl	8014d74 <rmw_destroy_node>
 801182c:	6863      	ldr	r3, [r4, #4]
 801182e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011830:	b148      	cbz	r0, 8011846 <rcl_node_init+0x1ce>
 8011832:	f005 fedd 	bl	80175f0 <rcl_guard_condition_fini>
 8011836:	6863      	ldr	r3, [r4, #4]
 8011838:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801183c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801183e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011842:	4798      	blx	r3
 8011844:	6863      	ldr	r3, [r4, #4]
 8011846:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801184a:	4618      	mov	r0, r3
 801184c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011850:	4798      	blx	r3
 8011852:	2300      	movs	r3, #0
 8011854:	e9c4 3300 	strd	r3, r3, [r4]
 8011858:	f04f 0901 	mov.w	r9, #1
 801185c:	f1ba 0f00 	cmp.w	sl, #0
 8011860:	d125      	bne.n	80118ae <rcl_node_init+0x236>
 8011862:	e001      	b.n	8011868 <rcl_node_init+0x1f0>
 8011864:	f04f 090b 	mov.w	r9, #11
 8011868:	4648      	mov	r0, r9
 801186a:	b029      	add	sp, #164	@ 0xa4
 801186c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011870:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8011874:	e7f8      	b.n	8011868 <rcl_node_init+0x1f0>
 8011876:	782b      	ldrb	r3, [r5, #0]
 8011878:	2b2f      	cmp	r3, #47	@ 0x2f
 801187a:	f43f af42 	beq.w	8011702 <rcl_node_init+0x8a>
 801187e:	9503      	str	r5, [sp, #12]
 8011880:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011884:	9300      	str	r3, [sp, #0]
 8011886:	4b1e      	ldr	r3, [pc, #120]	@ (8011900 <rcl_node_init+0x288>)
 8011888:	9302      	str	r3, [sp, #8]
 801188a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801188e:	9301      	str	r3, [sp, #4]
 8011890:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011894:	f002 fa08 	bl	8013ca8 <rcutils_format_string_limit>
 8011898:	4605      	mov	r5, r0
 801189a:	b340      	cbz	r0, 80118ee <rcl_node_init+0x276>
 801189c:	2200      	movs	r2, #0
 801189e:	a922      	add	r1, sp, #136	@ 0x88
 80118a0:	9222      	str	r2, [sp, #136]	@ 0x88
 80118a2:	f002 fe19 	bl	80144d8 <rmw_validate_namespace>
 80118a6:	4681      	mov	r9, r0
 80118a8:	2800      	cmp	r0, #0
 80118aa:	f43f af34 	beq.w	8011716 <rcl_node_init+0x9e>
 80118ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80118b2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80118b6:	4628      	mov	r0, r5
 80118b8:	4798      	blx	r3
 80118ba:	e7d5      	b.n	8011868 <rcl_node_init+0x1f0>
 80118bc:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80118c0:	4648      	mov	r0, r9
 80118c2:	b029      	add	sp, #164	@ 0xa4
 80118c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c8:	f04f 090a 	mov.w	r9, #10
 80118cc:	f1ba 0f00 	cmp.w	sl, #0
 80118d0:	d1ed      	bne.n	80118ae <rcl_node_init+0x236>
 80118d2:	e7c9      	b.n	8011868 <rcl_node_init+0x1f0>
 80118d4:	f002 fe70 	bl	80145b8 <rmw_node_name_validation_result_string>
 80118d8:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80118dc:	e7c4      	b.n	8011868 <rcl_node_init+0x1f0>
 80118de:	f002 fe0d 	bl	80144fc <rmw_namespace_validation_result_string>
 80118e2:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80118e6:	f1ba 0f00 	cmp.w	sl, #0
 80118ea:	d1e0      	bne.n	80118ae <rcl_node_init+0x236>
 80118ec:	e7bc      	b.n	8011868 <rcl_node_init+0x1f0>
 80118ee:	f04f 090a 	mov.w	r9, #10
 80118f2:	e7b9      	b.n	8011868 <rcl_node_init+0x1f0>
 80118f4:	08019c94 	.word	0x08019c94
 80118f8:	080198a4 	.word	0x080198a4
 80118fc:	08019c9c 	.word	0x08019c9c
 8011900:	08019c98 	.word	0x08019c98

08011904 <rcl_node_is_valid>:
 8011904:	b130      	cbz	r0, 8011914 <rcl_node_is_valid+0x10>
 8011906:	6843      	ldr	r3, [r0, #4]
 8011908:	b123      	cbz	r3, 8011914 <rcl_node_is_valid+0x10>
 801190a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801190c:	b113      	cbz	r3, 8011914 <rcl_node_is_valid+0x10>
 801190e:	6800      	ldr	r0, [r0, #0]
 8011910:	f7ff bc1e 	b.w	8011150 <rcl_context_is_valid>
 8011914:	2000      	movs	r0, #0
 8011916:	4770      	bx	lr

08011918 <rcl_node_get_name>:
 8011918:	b120      	cbz	r0, 8011924 <rcl_node_get_name+0xc>
 801191a:	6840      	ldr	r0, [r0, #4]
 801191c:	b110      	cbz	r0, 8011924 <rcl_node_get_name+0xc>
 801191e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011920:	b100      	cbz	r0, 8011924 <rcl_node_get_name+0xc>
 8011922:	6880      	ldr	r0, [r0, #8]
 8011924:	4770      	bx	lr
 8011926:	bf00      	nop

08011928 <rcl_node_get_namespace>:
 8011928:	b120      	cbz	r0, 8011934 <rcl_node_get_namespace+0xc>
 801192a:	6840      	ldr	r0, [r0, #4]
 801192c:	b110      	cbz	r0, 8011934 <rcl_node_get_namespace+0xc>
 801192e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011930:	b100      	cbz	r0, 8011934 <rcl_node_get_namespace+0xc>
 8011932:	68c0      	ldr	r0, [r0, #12]
 8011934:	4770      	bx	lr
 8011936:	bf00      	nop

08011938 <rcl_node_get_options>:
 8011938:	b128      	cbz	r0, 8011946 <rcl_node_get_options+0xe>
 801193a:	6840      	ldr	r0, [r0, #4]
 801193c:	b118      	cbz	r0, 8011946 <rcl_node_get_options+0xe>
 801193e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8011940:	2b00      	cmp	r3, #0
 8011942:	bf08      	it	eq
 8011944:	2000      	moveq	r0, #0
 8011946:	4770      	bx	lr

08011948 <rcl_node_get_rmw_handle>:
 8011948:	b110      	cbz	r0, 8011950 <rcl_node_get_rmw_handle+0x8>
 801194a:	6840      	ldr	r0, [r0, #4]
 801194c:	b100      	cbz	r0, 8011950 <rcl_node_get_rmw_handle+0x8>
 801194e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop

08011954 <rcl_node_get_default_options>:
 8011954:	b510      	push	{r4, lr}
 8011956:	2268      	movs	r2, #104	@ 0x68
 8011958:	4604      	mov	r4, r0
 801195a:	2100      	movs	r1, #0
 801195c:	f006 fe40 	bl	80185e0 <memset>
 8011960:	4620      	mov	r0, r4
 8011962:	f7fb f8a3 	bl	800caac <rcutils_get_default_allocator>
 8011966:	2301      	movs	r3, #1
 8011968:	7523      	strb	r3, [r4, #20]
 801196a:	4620      	mov	r0, r4
 801196c:	bd10      	pop	{r4, pc}
 801196e:	bf00      	nop

08011970 <rcl_node_options_copy>:
 8011970:	b1d0      	cbz	r0, 80119a8 <rcl_node_options_copy+0x38>
 8011972:	b570      	push	{r4, r5, r6, lr}
 8011974:	460c      	mov	r4, r1
 8011976:	b1a9      	cbz	r1, 80119a4 <rcl_node_options_copy+0x34>
 8011978:	4288      	cmp	r0, r1
 801197a:	4684      	mov	ip, r0
 801197c:	d012      	beq.n	80119a4 <rcl_node_options_copy+0x34>
 801197e:	4605      	mov	r5, r0
 8011980:	8a86      	ldrh	r6, [r0, #20]
 8011982:	468e      	mov	lr, r1
 8011984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011986:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801198a:	682b      	ldr	r3, [r5, #0]
 801198c:	f8ce 3000 	str.w	r3, [lr]
 8011990:	f10c 0118 	add.w	r1, ip, #24
 8011994:	2250      	movs	r2, #80	@ 0x50
 8011996:	82a6      	strh	r6, [r4, #20]
 8011998:	f104 0018 	add.w	r0, r4, #24
 801199c:	f006 fee9 	bl	8018772 <memcpy>
 80119a0:	2000      	movs	r0, #0
 80119a2:	bd70      	pop	{r4, r5, r6, pc}
 80119a4:	200b      	movs	r0, #11
 80119a6:	bd70      	pop	{r4, r5, r6, pc}
 80119a8:	200b      	movs	r0, #11
 80119aa:	4770      	bx	lr

080119ac <rcl_node_resolve_name>:
 80119ac:	b082      	sub	sp, #8
 80119ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b2:	b091      	sub	sp, #68	@ 0x44
 80119b4:	ac1a      	add	r4, sp, #104	@ 0x68
 80119b6:	e884 000c 	stmia.w	r4, {r2, r3}
 80119ba:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80119be:	2800      	cmp	r0, #0
 80119c0:	d03b      	beq.n	8011a3a <rcl_node_resolve_name+0x8e>
 80119c2:	460c      	mov	r4, r1
 80119c4:	4605      	mov	r5, r0
 80119c6:	f7ff ffb7 	bl	8011938 <rcl_node_get_options>
 80119ca:	2800      	cmp	r0, #0
 80119cc:	d037      	beq.n	8011a3e <rcl_node_resolve_name+0x92>
 80119ce:	4628      	mov	r0, r5
 80119d0:	f7ff ffa2 	bl	8011918 <rcl_node_get_name>
 80119d4:	4606      	mov	r6, r0
 80119d6:	4628      	mov	r0, r5
 80119d8:	f7ff ffa6 	bl	8011928 <rcl_node_get_namespace>
 80119dc:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80119e0:	4681      	mov	r9, r0
 80119e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80119e6:	ad0b      	add	r5, sp, #44	@ 0x2c
 80119e8:	46ac      	mov	ip, r5
 80119ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80119ee:	f8de 3000 	ldr.w	r3, [lr]
 80119f2:	f8cc 3000 	str.w	r3, [ip]
 80119f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80119f8:	b1fb      	cbz	r3, 8011a3a <rcl_node_resolve_name+0x8e>
 80119fa:	468a      	mov	sl, r1
 80119fc:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8011a00:	f002 faaa 	bl	8013f58 <rcutils_get_zero_initialized_string_map>
 8011a04:	ab10      	add	r3, sp, #64	@ 0x40
 8011a06:	9008      	str	r0, [sp, #32]
 8011a08:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8011a0c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011a10:	2100      	movs	r1, #0
 8011a12:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011a16:	a808      	add	r0, sp, #32
 8011a18:	f002 fb16 	bl	8014048 <rcutils_string_map_init>
 8011a1c:	4607      	mov	r7, r0
 8011a1e:	b180      	cbz	r0, 8011a42 <rcl_node_resolve_name+0x96>
 8011a20:	f7fb f860 	bl	800cae4 <rcutils_get_error_string>
 8011a24:	f7fb f874 	bl	800cb10 <rcutils_reset_error>
 8011a28:	2f0a      	cmp	r7, #10
 8011a2a:	bf18      	it	ne
 8011a2c:	2701      	movne	r7, #1
 8011a2e:	4638      	mov	r0, r7
 8011a30:	b011      	add	sp, #68	@ 0x44
 8011a32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a36:	b002      	add	sp, #8
 8011a38:	4770      	bx	lr
 8011a3a:	270b      	movs	r7, #11
 8011a3c:	e7f7      	b.n	8011a2e <rcl_node_resolve_name+0x82>
 8011a3e:	2701      	movs	r7, #1
 8011a40:	e7f5      	b.n	8011a2e <rcl_node_resolve_name+0x82>
 8011a42:	9009      	str	r0, [sp, #36]	@ 0x24
 8011a44:	9007      	str	r0, [sp, #28]
 8011a46:	a808      	add	r0, sp, #32
 8011a48:	f005 fd62 	bl	8017510 <rcl_get_default_topic_name_substitutions>
 8011a4c:	4607      	mov	r7, r0
 8011a4e:	b1a8      	cbz	r0, 8011a7c <rcl_node_resolve_name+0xd0>
 8011a50:	280a      	cmp	r0, #10
 8011a52:	9c07      	ldr	r4, [sp, #28]
 8011a54:	d000      	beq.n	8011a58 <rcl_node_resolve_name+0xac>
 8011a56:	2701      	movs	r7, #1
 8011a58:	a808      	add	r0, sp, #32
 8011a5a:	f002 fb35 	bl	80140c8 <rcutils_string_map_fini>
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	d13d      	bne.n	8011ade <rcl_node_resolve_name+0x132>
 8011a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a64:	4659      	mov	r1, fp
 8011a66:	47d0      	blx	sl
 8011a68:	4659      	mov	r1, fp
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	47d0      	blx	sl
 8011a6e:	f1b8 0f00 	cmp.w	r8, #0
 8011a72:	d0dc      	beq.n	8011a2e <rcl_node_resolve_name+0x82>
 8011a74:	2f67      	cmp	r7, #103	@ 0x67
 8011a76:	bf08      	it	eq
 8011a78:	2768      	moveq	r7, #104	@ 0x68
 8011a7a:	e7d8      	b.n	8011a2e <rcl_node_resolve_name+0x82>
 8011a7c:	ab09      	add	r3, sp, #36	@ 0x24
 8011a7e:	9305      	str	r3, [sp, #20]
 8011a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a82:	46ec      	mov	ip, sp
 8011a84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a88:	682b      	ldr	r3, [r5, #0]
 8011a8a:	f8cc 3000 	str.w	r3, [ip]
 8011a8e:	464a      	mov	r2, r9
 8011a90:	4631      	mov	r1, r6
 8011a92:	4620      	mov	r0, r4
 8011a94:	ab08      	add	r3, sp, #32
 8011a96:	f005 fbdd 	bl	8017254 <rcl_expand_topic_name>
 8011a9a:	4607      	mov	r7, r0
 8011a9c:	b9b8      	cbnz	r0, 8011ace <rcl_node_resolve_name+0x122>
 8011a9e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8011aa0:	9009      	str	r0, [sp, #36]	@ 0x24
 8011aa2:	4602      	mov	r2, r0
 8011aa4:	a90a      	add	r1, sp, #40	@ 0x28
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	f002 fc52 	bl	8014350 <rmw_validate_full_topic_name>
 8011aac:	b988      	cbnz	r0, 8011ad2 <rcl_node_resolve_name+0x126>
 8011aae:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8011ab0:	b9d5      	cbnz	r5, 8011ae8 <rcl_node_resolve_name+0x13c>
 8011ab2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011ab4:	a808      	add	r0, sp, #32
 8011ab6:	601c      	str	r4, [r3, #0]
 8011ab8:	f002 fb06 	bl	80140c8 <rcutils_string_map_fini>
 8011abc:	4607      	mov	r7, r0
 8011abe:	b1a8      	cbz	r0, 8011aec <rcl_node_resolve_name+0x140>
 8011ac0:	f7fb f810 	bl	800cae4 <rcutils_get_error_string>
 8011ac4:	462c      	mov	r4, r5
 8011ac6:	f7fb f823 	bl	800cb10 <rcutils_reset_error>
 8011aca:	2701      	movs	r7, #1
 8011acc:	e7c9      	b.n	8011a62 <rcl_node_resolve_name+0xb6>
 8011ace:	9c07      	ldr	r4, [sp, #28]
 8011ad0:	e7c2      	b.n	8011a58 <rcl_node_resolve_name+0xac>
 8011ad2:	f7fb f807 	bl	800cae4 <rcutils_get_error_string>
 8011ad6:	2701      	movs	r7, #1
 8011ad8:	f7fb f81a 	bl	800cb10 <rcutils_reset_error>
 8011adc:	e7bc      	b.n	8011a58 <rcl_node_resolve_name+0xac>
 8011ade:	f7fb f801 	bl	800cae4 <rcutils_get_error_string>
 8011ae2:	f7fb f815 	bl	800cb10 <rcutils_reset_error>
 8011ae6:	e7bc      	b.n	8011a62 <rcl_node_resolve_name+0xb6>
 8011ae8:	2767      	movs	r7, #103	@ 0x67
 8011aea:	e7b5      	b.n	8011a58 <rcl_node_resolve_name+0xac>
 8011aec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011aee:	4659      	mov	r1, fp
 8011af0:	47d0      	blx	sl
 8011af2:	4659      	mov	r1, fp
 8011af4:	4638      	mov	r0, r7
 8011af6:	47d0      	blx	sl
 8011af8:	e799      	b.n	8011a2e <rcl_node_resolve_name+0x82>
 8011afa:	bf00      	nop

08011afc <exact_match_lookup>:
 8011afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011afe:	f102 0708 	add.w	r7, r2, #8
 8011b02:	460b      	mov	r3, r1
 8011b04:	4614      	mov	r4, r2
 8011b06:	4606      	mov	r6, r0
 8011b08:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8011b0c:	b085      	sub	sp, #20
 8011b0e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011b12:	4618      	mov	r0, r3
 8011b14:	4919      	ldr	r1, [pc, #100]	@ (8011b7c <exact_match_lookup+0x80>)
 8011b16:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011b1a:	f002 f8b7 	bl	8013c8c <rcutils_join_path>
 8011b1e:	7833      	ldrb	r3, [r6, #0]
 8011b20:	2b2f      	cmp	r3, #47	@ 0x2f
 8011b22:	4605      	mov	r5, r0
 8011b24:	d023      	beq.n	8011b6e <exact_match_lookup+0x72>
 8011b26:	f104 030c 	add.w	r3, r4, #12
 8011b2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011b2e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011b32:	1c70      	adds	r0, r6, #1
 8011b34:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011b38:	f002 f8ae 	bl	8013c98 <rcutils_to_native_path>
 8011b3c:	4606      	mov	r6, r0
 8011b3e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8011b42:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011b46:	4631      	mov	r1, r6
 8011b48:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	f002 f89d 	bl	8013c8c <rcutils_join_path>
 8011b52:	6862      	ldr	r2, [r4, #4]
 8011b54:	6921      	ldr	r1, [r4, #16]
 8011b56:	4603      	mov	r3, r0
 8011b58:	4630      	mov	r0, r6
 8011b5a:	461e      	mov	r6, r3
 8011b5c:	4790      	blx	r2
 8011b5e:	4628      	mov	r0, r5
 8011b60:	6863      	ldr	r3, [r4, #4]
 8011b62:	6921      	ldr	r1, [r4, #16]
 8011b64:	4798      	blx	r3
 8011b66:	4635      	mov	r5, r6
 8011b68:	4628      	mov	r0, r5
 8011b6a:	b005      	add	sp, #20
 8011b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b6e:	7873      	ldrb	r3, [r6, #1]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d1d8      	bne.n	8011b26 <exact_match_lookup+0x2a>
 8011b74:	4628      	mov	r0, r5
 8011b76:	b005      	add	sp, #20
 8011b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	08019ce8 	.word	0x08019ce8

08011b80 <rcl_get_secure_root>:
 8011b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b84:	b085      	sub	sp, #20
 8011b86:	b168      	cbz	r0, 8011ba4 <rcl_get_secure_root+0x24>
 8011b88:	4607      	mov	r7, r0
 8011b8a:	4608      	mov	r0, r1
 8011b8c:	460c      	mov	r4, r1
 8011b8e:	f7fa ff9b 	bl	800cac8 <rcutils_allocator_is_valid>
 8011b92:	b138      	cbz	r0, 8011ba4 <rcl_get_secure_root+0x24>
 8011b94:	2300      	movs	r3, #0
 8011b96:	482d      	ldr	r0, [pc, #180]	@ (8011c4c <rcl_get_secure_root+0xcc>)
 8011b98:	9303      	str	r3, [sp, #12]
 8011b9a:	a903      	add	r1, sp, #12
 8011b9c:	f002 f85c 	bl	8013c58 <rcutils_get_env>
 8011ba0:	4605      	mov	r5, r0
 8011ba2:	b120      	cbz	r0, 8011bae <rcl_get_secure_root+0x2e>
 8011ba4:	2500      	movs	r5, #0
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	b005      	add	sp, #20
 8011baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bae:	9b03      	ldr	r3, [sp, #12]
 8011bb0:	781a      	ldrb	r2, [r3, #0]
 8011bb2:	2a00      	cmp	r2, #0
 8011bb4:	d0f6      	beq.n	8011ba4 <rcl_get_secure_root+0x24>
 8011bb6:	f104 090c 	add.w	r9, r4, #12
 8011bba:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011bbe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011bc8:	f002 f988 	bl	8013edc <rcutils_strdup>
 8011bcc:	4680      	mov	r8, r0
 8011bce:	2800      	cmp	r0, #0
 8011bd0:	d0e8      	beq.n	8011ba4 <rcl_get_secure_root+0x24>
 8011bd2:	481f      	ldr	r0, [pc, #124]	@ (8011c50 <rcl_get_secure_root+0xd0>)
 8011bd4:	9503      	str	r5, [sp, #12]
 8011bd6:	a903      	add	r1, sp, #12
 8011bd8:	f002 f83e 	bl	8013c58 <rcutils_get_env>
 8011bdc:	b160      	cbz	r0, 8011bf8 <rcl_get_secure_root+0x78>
 8011bde:	2600      	movs	r6, #0
 8011be0:	6863      	ldr	r3, [r4, #4]
 8011be2:	6921      	ldr	r1, [r4, #16]
 8011be4:	4630      	mov	r0, r6
 8011be6:	4798      	blx	r3
 8011be8:	4640      	mov	r0, r8
 8011bea:	6863      	ldr	r3, [r4, #4]
 8011bec:	6921      	ldr	r1, [r4, #16]
 8011bee:	4798      	blx	r3
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	b005      	add	sp, #20
 8011bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bf8:	9b03      	ldr	r3, [sp, #12]
 8011bfa:	781e      	ldrb	r6, [r3, #0]
 8011bfc:	b1f6      	cbz	r6, 8011c3c <rcl_get_secure_root+0xbc>
 8011bfe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011c02:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011c06:	4618      	mov	r0, r3
 8011c08:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011c0c:	f002 f966 	bl	8013edc <rcutils_strdup>
 8011c10:	4606      	mov	r6, r0
 8011c12:	2800      	cmp	r0, #0
 8011c14:	d0e3      	beq.n	8011bde <rcl_get_secure_root+0x5e>
 8011c16:	4622      	mov	r2, r4
 8011c18:	4641      	mov	r1, r8
 8011c1a:	f7ff ff6f 	bl	8011afc <exact_match_lookup>
 8011c1e:	4605      	mov	r5, r0
 8011c20:	2d00      	cmp	r5, #0
 8011c22:	d0dd      	beq.n	8011be0 <rcl_get_secure_root+0x60>
 8011c24:	4628      	mov	r0, r5
 8011c26:	f002 f82f 	bl	8013c88 <rcutils_is_directory>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d1d7      	bne.n	8011be0 <rcl_get_secure_root+0x60>
 8011c30:	4628      	mov	r0, r5
 8011c32:	6921      	ldr	r1, [r4, #16]
 8011c34:	461d      	mov	r5, r3
 8011c36:	6863      	ldr	r3, [r4, #4]
 8011c38:	4798      	blx	r3
 8011c3a:	e7d1      	b.n	8011be0 <rcl_get_secure_root+0x60>
 8011c3c:	4622      	mov	r2, r4
 8011c3e:	4638      	mov	r0, r7
 8011c40:	4641      	mov	r1, r8
 8011c42:	f7ff ff5b 	bl	8011afc <exact_match_lookup>
 8011c46:	4605      	mov	r5, r0
 8011c48:	e7ea      	b.n	8011c20 <rcl_get_secure_root+0xa0>
 8011c4a:	bf00      	nop
 8011c4c:	08019cf4 	.word	0x08019cf4
 8011c50:	08019d0c 	.word	0x08019d0c

08011c54 <rcl_get_security_options_from_environment>:
 8011c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c58:	b082      	sub	sp, #8
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	4606      	mov	r6, r0
 8011c5e:	460f      	mov	r7, r1
 8011c60:	4820      	ldr	r0, [pc, #128]	@ (8011ce4 <rcl_get_security_options_from_environment+0x90>)
 8011c62:	9301      	str	r3, [sp, #4]
 8011c64:	a901      	add	r1, sp, #4
 8011c66:	4690      	mov	r8, r2
 8011c68:	f001 fff6 	bl	8013c58 <rcutils_get_env>
 8011c6c:	b120      	cbz	r0, 8011c78 <rcl_get_security_options_from_environment+0x24>
 8011c6e:	2501      	movs	r5, #1
 8011c70:	4628      	mov	r0, r5
 8011c72:	b002      	add	sp, #8
 8011c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c78:	491b      	ldr	r1, [pc, #108]	@ (8011ce8 <rcl_get_security_options_from_environment+0x94>)
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	9801      	ldr	r0, [sp, #4]
 8011c7e:	f7ee faaf 	bl	80001e0 <strcmp>
 8011c82:	4605      	mov	r5, r0
 8011c84:	b9e8      	cbnz	r0, 8011cc2 <rcl_get_security_options_from_environment+0x6e>
 8011c86:	9001      	str	r0, [sp, #4]
 8011c88:	f1b8 0f00 	cmp.w	r8, #0
 8011c8c:	d020      	beq.n	8011cd0 <rcl_get_security_options_from_environment+0x7c>
 8011c8e:	4817      	ldr	r0, [pc, #92]	@ (8011cec <rcl_get_security_options_from_environment+0x98>)
 8011c90:	a901      	add	r1, sp, #4
 8011c92:	f001 ffe1 	bl	8013c58 <rcutils_get_env>
 8011c96:	2800      	cmp	r0, #0
 8011c98:	d1e9      	bne.n	8011c6e <rcl_get_security_options_from_environment+0x1a>
 8011c9a:	4915      	ldr	r1, [pc, #84]	@ (8011cf0 <rcl_get_security_options_from_environment+0x9c>)
 8011c9c:	9801      	ldr	r0, [sp, #4]
 8011c9e:	f7ee fa9f 	bl	80001e0 <strcmp>
 8011ca2:	fab0 f080 	clz	r0, r0
 8011ca6:	0940      	lsrs	r0, r0, #5
 8011ca8:	f888 0000 	strb.w	r0, [r8]
 8011cac:	4639      	mov	r1, r7
 8011cae:	4630      	mov	r0, r6
 8011cb0:	f7ff ff66 	bl	8011b80 <rcl_get_secure_root>
 8011cb4:	b170      	cbz	r0, 8011cd4 <rcl_get_security_options_from_environment+0x80>
 8011cb6:	f8c8 0004 	str.w	r0, [r8, #4]
 8011cba:	4628      	mov	r0, r5
 8011cbc:	b002      	add	sp, #8
 8011cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cc2:	4625      	mov	r5, r4
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f888 4000 	strb.w	r4, [r8]
 8011cca:	b002      	add	sp, #8
 8011ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cd0:	250b      	movs	r5, #11
 8011cd2:	e7cd      	b.n	8011c70 <rcl_get_security_options_from_environment+0x1c>
 8011cd4:	f898 5000 	ldrb.w	r5, [r8]
 8011cd8:	f1a5 0501 	sub.w	r5, r5, #1
 8011cdc:	fab5 f585 	clz	r5, r5
 8011ce0:	096d      	lsrs	r5, r5, #5
 8011ce2:	e7c5      	b.n	8011c70 <rcl_get_security_options_from_environment+0x1c>
 8011ce4:	08019cac 	.word	0x08019cac
 8011ce8:	08019cc0 	.word	0x08019cc0
 8011cec:	08019cc8 	.word	0x08019cc8
 8011cf0:	08019ce0 	.word	0x08019ce0

08011cf4 <rcl_service_get_rmw_handle>:
 8011cf4:	b118      	cbz	r0, 8011cfe <rcl_service_get_rmw_handle+0xa>
 8011cf6:	6800      	ldr	r0, [r0, #0]
 8011cf8:	b108      	cbz	r0, 8011cfe <rcl_service_get_rmw_handle+0xa>
 8011cfa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011cfe:	4770      	bx	lr

08011d00 <rcl_take_request>:
 8011d00:	b570      	push	{r4, r5, r6, lr}
 8011d02:	468e      	mov	lr, r1
 8011d04:	460c      	mov	r4, r1
 8011d06:	4616      	mov	r6, r2
 8011d08:	4605      	mov	r5, r0
 8011d0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d0e:	b08c      	sub	sp, #48	@ 0x30
 8011d10:	f10d 0c18 	add.w	ip, sp, #24
 8011d14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011d1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011d20:	b30d      	cbz	r5, 8011d66 <rcl_take_request+0x66>
 8011d22:	682b      	ldr	r3, [r5, #0]
 8011d24:	b1fb      	cbz	r3, 8011d66 <rcl_take_request+0x66>
 8011d26:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011d2a:	b1e0      	cbz	r0, 8011d66 <rcl_take_request+0x66>
 8011d2c:	b336      	cbz	r6, 8011d7c <rcl_take_request+0x7c>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	f88d 3007 	strb.w	r3, [sp, #7]
 8011d34:	4632      	mov	r2, r6
 8011d36:	f10d 0307 	add.w	r3, sp, #7
 8011d3a:	a902      	add	r1, sp, #8
 8011d3c:	f003 f8ea 	bl	8014f14 <rmw_take_request>
 8011d40:	4605      	mov	r5, r0
 8011d42:	b198      	cbz	r0, 8011d6c <rcl_take_request+0x6c>
 8011d44:	280a      	cmp	r0, #10
 8011d46:	bf18      	it	ne
 8011d48:	2501      	movne	r5, #1
 8011d4a:	f10d 0e18 	add.w	lr, sp, #24
 8011d4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d52:	46a4      	mov	ip, r4
 8011d54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d58:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011d5c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011d60:	4628      	mov	r0, r5
 8011d62:	b00c      	add	sp, #48	@ 0x30
 8011d64:	bd70      	pop	{r4, r5, r6, pc}
 8011d66:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8011d6a:	e7ee      	b.n	8011d4a <rcl_take_request+0x4a>
 8011d6c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011d70:	f240 2359 	movw	r3, #601	@ 0x259
 8011d74:	2a00      	cmp	r2, #0
 8011d76:	bf08      	it	eq
 8011d78:	461d      	moveq	r5, r3
 8011d7a:	e7e6      	b.n	8011d4a <rcl_take_request+0x4a>
 8011d7c:	250b      	movs	r5, #11
 8011d7e:	e7e4      	b.n	8011d4a <rcl_take_request+0x4a>

08011d80 <rcl_send_response>:
 8011d80:	b170      	cbz	r0, 8011da0 <rcl_send_response+0x20>
 8011d82:	6800      	ldr	r0, [r0, #0]
 8011d84:	b160      	cbz	r0, 8011da0 <rcl_send_response+0x20>
 8011d86:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011d8a:	b148      	cbz	r0, 8011da0 <rcl_send_response+0x20>
 8011d8c:	b159      	cbz	r1, 8011da6 <rcl_send_response+0x26>
 8011d8e:	b510      	push	{r4, lr}
 8011d90:	b15a      	cbz	r2, 8011daa <rcl_send_response+0x2a>
 8011d92:	f003 f91d 	bl	8014fd0 <rmw_send_response>
 8011d96:	b110      	cbz	r0, 8011d9e <rcl_send_response+0x1e>
 8011d98:	2802      	cmp	r0, #2
 8011d9a:	bf18      	it	ne
 8011d9c:	2001      	movne	r0, #1
 8011d9e:	bd10      	pop	{r4, pc}
 8011da0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011da4:	4770      	bx	lr
 8011da6:	200b      	movs	r0, #11
 8011da8:	4770      	bx	lr
 8011daa:	200b      	movs	r0, #11
 8011dac:	bd10      	pop	{r4, pc}
 8011dae:	bf00      	nop

08011db0 <rcl_service_is_valid>:
 8011db0:	b130      	cbz	r0, 8011dc0 <rcl_service_is_valid+0x10>
 8011db2:	6800      	ldr	r0, [r0, #0]
 8011db4:	b120      	cbz	r0, 8011dc0 <rcl_service_is_valid+0x10>
 8011db6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011dba:	3800      	subs	r0, #0
 8011dbc:	bf18      	it	ne
 8011dbe:	2001      	movne	r0, #1
 8011dc0:	4770      	bx	lr
 8011dc2:	bf00      	nop

08011dc4 <rcl_get_zero_initialized_subscription>:
 8011dc4:	4b01      	ldr	r3, [pc, #4]	@ (8011dcc <rcl_get_zero_initialized_subscription+0x8>)
 8011dc6:	6818      	ldr	r0, [r3, #0]
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	08019d2c 	.word	0x08019d2c

08011dd0 <rcl_subscription_init>:
 8011dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011dd4:	b089      	sub	sp, #36	@ 0x24
 8011dd6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8011dd8:	b1d6      	cbz	r6, 8011e10 <rcl_subscription_init+0x40>
 8011dda:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8011dde:	4604      	mov	r4, r0
 8011de0:	4648      	mov	r0, r9
 8011de2:	460d      	mov	r5, r1
 8011de4:	4690      	mov	r8, r2
 8011de6:	461f      	mov	r7, r3
 8011de8:	f7fa fe6e 	bl	800cac8 <rcutils_allocator_is_valid>
 8011dec:	b180      	cbz	r0, 8011e10 <rcl_subscription_init+0x40>
 8011dee:	b17c      	cbz	r4, 8011e10 <rcl_subscription_init+0x40>
 8011df0:	4628      	mov	r0, r5
 8011df2:	f7ff fd87 	bl	8011904 <rcl_node_is_valid>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d054      	beq.n	8011ea4 <rcl_subscription_init+0xd4>
 8011dfa:	f1b8 0f00 	cmp.w	r8, #0
 8011dfe:	d007      	beq.n	8011e10 <rcl_subscription_init+0x40>
 8011e00:	b137      	cbz	r7, 8011e10 <rcl_subscription_init+0x40>
 8011e02:	6823      	ldr	r3, [r4, #0]
 8011e04:	b14b      	cbz	r3, 8011e1a <rcl_subscription_init+0x4a>
 8011e06:	2764      	movs	r7, #100	@ 0x64
 8011e08:	4638      	mov	r0, r7
 8011e0a:	b009      	add	sp, #36	@ 0x24
 8011e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e10:	270b      	movs	r7, #11
 8011e12:	4638      	mov	r0, r7
 8011e14:	b009      	add	sp, #36	@ 0x24
 8011e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e1a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8011e1e:	aa07      	add	r2, sp, #28
 8011e20:	9205      	str	r2, [sp, #20]
 8011e22:	9307      	str	r3, [sp, #28]
 8011e24:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8011e28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011e2c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011e30:	4639      	mov	r1, r7
 8011e32:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011e36:	4628      	mov	r0, r5
 8011e38:	f7ff fdb8 	bl	80119ac <rcl_node_resolve_name>
 8011e3c:	4607      	mov	r7, r0
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	d15f      	bne.n	8011f02 <rcl_subscription_init+0x132>
 8011e42:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8011e46:	21c8      	movs	r1, #200	@ 0xc8
 8011e48:	2001      	movs	r0, #1
 8011e4a:	4798      	blx	r3
 8011e4c:	6020      	str	r0, [r4, #0]
 8011e4e:	2800      	cmp	r0, #0
 8011e50:	d05d      	beq.n	8011f0e <rcl_subscription_init+0x13e>
 8011e52:	4628      	mov	r0, r5
 8011e54:	f7ff fd78 	bl	8011948 <rcl_node_get_rmw_handle>
 8011e58:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	9a07      	ldr	r2, [sp, #28]
 8011e60:	6827      	ldr	r7, [r4, #0]
 8011e62:	4641      	mov	r1, r8
 8011e64:	4633      	mov	r3, r6
 8011e66:	f003 f99d 	bl	80151a4 <rmw_create_subscription>
 8011e6a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8011e6e:	6827      	ldr	r7, [r4, #0]
 8011e70:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8011e74:	b348      	cbz	r0, 8011eca <rcl_subscription_init+0xfa>
 8011e76:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8011e7a:	f003 fa75 	bl	8015368 <rmw_subscription_get_actual_qos>
 8011e7e:	4607      	mov	r7, r0
 8011e80:	b9a8      	cbnz	r0, 8011eae <rcl_subscription_init+0xde>
 8011e82:	6820      	ldr	r0, [r4, #0]
 8011e84:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011e88:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8011e8c:	2270      	movs	r2, #112	@ 0x70
 8011e8e:	4631      	mov	r1, r6
 8011e90:	f006 fc6f 	bl	8018772 <memcpy>
 8011e94:	9807      	ldr	r0, [sp, #28]
 8011e96:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011e98:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011e9a:	4798      	blx	r3
 8011e9c:	4638      	mov	r0, r7
 8011e9e:	b009      	add	sp, #36	@ 0x24
 8011ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ea4:	27c8      	movs	r7, #200	@ 0xc8
 8011ea6:	4638      	mov	r0, r7
 8011ea8:	b009      	add	sp, #36	@ 0x24
 8011eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011eae:	6827      	ldr	r7, [r4, #0]
 8011eb0:	b32f      	cbz	r7, 8011efe <rcl_subscription_init+0x12e>
 8011eb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011eb6:	b14b      	cbz	r3, 8011ecc <rcl_subscription_init+0xfc>
 8011eb8:	4628      	mov	r0, r5
 8011eba:	f7ff fd45 	bl	8011948 <rcl_node_get_rmw_handle>
 8011ebe:	6823      	ldr	r3, [r4, #0]
 8011ec0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8011ec4:	f003 fa60 	bl	8015388 <rmw_destroy_subscription>
 8011ec8:	6827      	ldr	r7, [r4, #0]
 8011eca:	b197      	cbz	r7, 8011ef2 <rcl_subscription_init+0x122>
 8011ecc:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f7fa fdf9 	bl	800cac8 <rcutils_allocator_is_valid>
 8011ed6:	b158      	cbz	r0, 8011ef0 <rcl_subscription_init+0x120>
 8011ed8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011eda:	b148      	cbz	r0, 8011ef0 <rcl_subscription_init+0x120>
 8011edc:	4629      	mov	r1, r5
 8011ede:	f002 f98b 	bl	80141f8 <rmw_subscription_content_filter_options_fini>
 8011ee2:	4605      	mov	r5, r0
 8011ee4:	b9b8      	cbnz	r0, 8011f16 <rcl_subscription_init+0x146>
 8011ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ee8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011eea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011eec:	4798      	blx	r3
 8011eee:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8011ef0:	6827      	ldr	r7, [r4, #0]
 8011ef2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011ef4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011ef6:	4638      	mov	r0, r7
 8011ef8:	4798      	blx	r3
 8011efa:	2300      	movs	r3, #0
 8011efc:	6023      	str	r3, [r4, #0]
 8011efe:	2701      	movs	r7, #1
 8011f00:	e7c8      	b.n	8011e94 <rcl_subscription_init+0xc4>
 8011f02:	2867      	cmp	r0, #103	@ 0x67
 8011f04:	d0c6      	beq.n	8011e94 <rcl_subscription_init+0xc4>
 8011f06:	2869      	cmp	r0, #105	@ 0x69
 8011f08:	d003      	beq.n	8011f12 <rcl_subscription_init+0x142>
 8011f0a:	280a      	cmp	r0, #10
 8011f0c:	d1f7      	bne.n	8011efe <rcl_subscription_init+0x12e>
 8011f0e:	270a      	movs	r7, #10
 8011f10:	e7c0      	b.n	8011e94 <rcl_subscription_init+0xc4>
 8011f12:	2767      	movs	r7, #103	@ 0x67
 8011f14:	e7be      	b.n	8011e94 <rcl_subscription_init+0xc4>
 8011f16:	f7ff f8fd 	bl	8011114 <rcl_convert_rmw_ret_to_rcl_ret>
 8011f1a:	6827      	ldr	r7, [r4, #0]
 8011f1c:	e7e9      	b.n	8011ef2 <rcl_subscription_init+0x122>
 8011f1e:	bf00      	nop

08011f20 <rcl_subscription_get_default_options>:
 8011f20:	b570      	push	{r4, r5, r6, lr}
 8011f22:	4d14      	ldr	r5, [pc, #80]	@ (8011f74 <rcl_subscription_get_default_options+0x54>)
 8011f24:	4914      	ldr	r1, [pc, #80]	@ (8011f78 <rcl_subscription_get_default_options+0x58>)
 8011f26:	b08a      	sub	sp, #40	@ 0x28
 8011f28:	4604      	mov	r4, r0
 8011f2a:	2250      	movs	r2, #80	@ 0x50
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	f006 fc20 	bl	8018772 <memcpy>
 8011f32:	a804      	add	r0, sp, #16
 8011f34:	f7fa fdba 	bl	800caac <rcutils_get_default_allocator>
 8011f38:	f10d 0c10 	add.w	ip, sp, #16
 8011f3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011f40:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8011f44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011f48:	466e      	mov	r6, sp
 8011f4a:	f8dc 3000 	ldr.w	r3, [ip]
 8011f4e:	f8ce 3000 	str.w	r3, [lr]
 8011f52:	4630      	mov	r0, r6
 8011f54:	f002 f96a 	bl	801422c <rmw_get_default_subscription_options>
 8011f58:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8011f5c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8011f60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011f64:	2270      	movs	r2, #112	@ 0x70
 8011f66:	4629      	mov	r1, r5
 8011f68:	4620      	mov	r0, r4
 8011f6a:	f006 fc02 	bl	8018772 <memcpy>
 8011f6e:	4620      	mov	r0, r4
 8011f70:	b00a      	add	sp, #40	@ 0x28
 8011f72:	bd70      	pop	{r4, r5, r6, pc}
 8011f74:	2000e090 	.word	0x2000e090
 8011f78:	08019d30 	.word	0x08019d30

08011f7c <rcl_take>:
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	d04a      	beq.n	8012016 <rcl_take+0x9a>
 8011f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f84:	4604      	mov	r4, r0
 8011f86:	6800      	ldr	r0, [r0, #0]
 8011f88:	b0a4      	sub	sp, #144	@ 0x90
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	d03b      	beq.n	8012006 <rcl_take+0x8a>
 8011f8e:	461f      	mov	r7, r3
 8011f90:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d036      	beq.n	8012006 <rcl_take+0x8a>
 8011f98:	460e      	mov	r6, r1
 8011f9a:	2900      	cmp	r1, #0
 8011f9c:	d039      	beq.n	8012012 <rcl_take+0x96>
 8011f9e:	4615      	mov	r5, r2
 8011fa0:	2a00      	cmp	r2, #0
 8011fa2:	d03c      	beq.n	801201e <rcl_take+0xa2>
 8011fa4:	a802      	add	r0, sp, #8
 8011fa6:	f002 f9cb 	bl	8014340 <rmw_get_zero_initialized_message_info>
 8011faa:	f10d 0c08 	add.w	ip, sp, #8
 8011fae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fb2:	46ae      	mov	lr, r5
 8011fb4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011fb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fbc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011fc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011fc8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8011fcc:	f04f 0800 	mov.w	r8, #0
 8011fd0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8011fd4:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8011fd8:	6822      	ldr	r2, [r4, #0]
 8011fda:	462b      	mov	r3, r5
 8011fdc:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8011fe0:	9700      	str	r7, [sp, #0]
 8011fe2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8011fe6:	4631      	mov	r1, r6
 8011fe8:	f003 fa2e 	bl	8015448 <rmw_take_with_info>
 8011fec:	4603      	mov	r3, r0
 8011fee:	b9c0      	cbnz	r0, 8012022 <rcl_take+0xa6>
 8011ff0:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8011ff4:	f240 1291 	movw	r2, #401	@ 0x191
 8011ff8:	2900      	cmp	r1, #0
 8011ffa:	bf08      	it	eq
 8011ffc:	4613      	moveq	r3, r2
 8011ffe:	4618      	mov	r0, r3
 8012000:	b024      	add	sp, #144	@ 0x90
 8012002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012006:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801200a:	4618      	mov	r0, r3
 801200c:	b024      	add	sp, #144	@ 0x90
 801200e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012012:	230b      	movs	r3, #11
 8012014:	e7f3      	b.n	8011ffe <rcl_take+0x82>
 8012016:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801201a:	4618      	mov	r0, r3
 801201c:	4770      	bx	lr
 801201e:	ad14      	add	r5, sp, #80	@ 0x50
 8012020:	e7c0      	b.n	8011fa4 <rcl_take+0x28>
 8012022:	f7ff f877 	bl	8011114 <rcl_convert_rmw_ret_to_rcl_ret>
 8012026:	4603      	mov	r3, r0
 8012028:	e7e9      	b.n	8011ffe <rcl_take+0x82>
 801202a:	bf00      	nop

0801202c <rcl_subscription_get_rmw_handle>:
 801202c:	b118      	cbz	r0, 8012036 <rcl_subscription_get_rmw_handle+0xa>
 801202e:	6800      	ldr	r0, [r0, #0]
 8012030:	b108      	cbz	r0, 8012036 <rcl_subscription_get_rmw_handle+0xa>
 8012032:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012036:	4770      	bx	lr

08012038 <rcl_subscription_is_valid>:
 8012038:	b130      	cbz	r0, 8012048 <rcl_subscription_is_valid+0x10>
 801203a:	6800      	ldr	r0, [r0, #0]
 801203c:	b120      	cbz	r0, 8012048 <rcl_subscription_is_valid+0x10>
 801203e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012042:	3800      	subs	r0, #0
 8012044:	bf18      	it	ne
 8012046:	2001      	movne	r0, #1
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop

0801204c <rcl_get_system_time>:
 801204c:	4608      	mov	r0, r1
 801204e:	f7fa bd7b 	b.w	800cb48 <rcutils_system_time_now>
 8012052:	bf00      	nop

08012054 <rcl_get_steady_time>:
 8012054:	4608      	mov	r0, r1
 8012056:	f7fa bd9f 	b.w	800cb98 <rcutils_steady_time_now>
 801205a:	bf00      	nop

0801205c <rcl_get_ros_time>:
 801205c:	7a03      	ldrb	r3, [r0, #8]
 801205e:	b510      	push	{r4, lr}
 8012060:	460c      	mov	r4, r1
 8012062:	b133      	cbz	r3, 8012072 <rcl_get_ros_time+0x16>
 8012064:	2105      	movs	r1, #5
 8012066:	f001 fd53 	bl	8013b10 <__atomic_load_8>
 801206a:	e9c4 0100 	strd	r0, r1, [r4]
 801206e:	2000      	movs	r0, #0
 8012070:	bd10      	pop	{r4, pc}
 8012072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012076:	4608      	mov	r0, r1
 8012078:	f7fa bd66 	b.w	800cb48 <rcutils_system_time_now>

0801207c <rcl_clock_init>:
 801207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801207e:	4605      	mov	r5, r0
 8012080:	4610      	mov	r0, r2
 8012082:	4614      	mov	r4, r2
 8012084:	460e      	mov	r6, r1
 8012086:	f7fa fd1f 	bl	800cac8 <rcutils_allocator_is_valid>
 801208a:	b128      	cbz	r0, 8012098 <rcl_clock_init+0x1c>
 801208c:	2d03      	cmp	r5, #3
 801208e:	d803      	bhi.n	8012098 <rcl_clock_init+0x1c>
 8012090:	e8df f005 	tbb	[pc, r5]
 8012094:	06532e1d 	.word	0x06532e1d
 8012098:	f04f 0c0b 	mov.w	ip, #11
 801209c:	4660      	mov	r0, ip
 801209e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120a0:	2e00      	cmp	r6, #0
 80120a2:	d0f9      	beq.n	8012098 <rcl_clock_init+0x1c>
 80120a4:	2c00      	cmp	r4, #0
 80120a6:	d0f7      	beq.n	8012098 <rcl_clock_init+0x1c>
 80120a8:	2300      	movs	r3, #0
 80120aa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80120ae:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012164 <rcl_clock_init+0xe8>
 80120b2:	6133      	str	r3, [r6, #16]
 80120b4:	f106 0514 	add.w	r5, r6, #20
 80120b8:	469c      	mov	ip, r3
 80120ba:	2703      	movs	r7, #3
 80120bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80120c0:	6823      	ldr	r3, [r4, #0]
 80120c2:	602b      	str	r3, [r5, #0]
 80120c4:	7037      	strb	r7, [r6, #0]
 80120c6:	f8c6 e00c 	str.w	lr, [r6, #12]
 80120ca:	4660      	mov	r0, ip
 80120cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ce:	2e00      	cmp	r6, #0
 80120d0:	d0e2      	beq.n	8012098 <rcl_clock_init+0x1c>
 80120d2:	2300      	movs	r3, #0
 80120d4:	7033      	strb	r3, [r6, #0]
 80120d6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80120da:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80120de:	469c      	mov	ip, r3
 80120e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120e2:	f106 0514 	add.w	r5, r6, #20
 80120e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80120e8:	6823      	ldr	r3, [r4, #0]
 80120ea:	602b      	str	r3, [r5, #0]
 80120ec:	4660      	mov	r0, ip
 80120ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120f0:	2e00      	cmp	r6, #0
 80120f2:	d0d1      	beq.n	8012098 <rcl_clock_init+0x1c>
 80120f4:	2c00      	cmp	r4, #0
 80120f6:	d0cf      	beq.n	8012098 <rcl_clock_init+0x1c>
 80120f8:	2700      	movs	r7, #0
 80120fa:	7037      	strb	r7, [r6, #0]
 80120fc:	46a4      	mov	ip, r4
 80120fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012102:	f106 0514 	add.w	r5, r6, #20
 8012106:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801210a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801210e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012110:	f8dc 3000 	ldr.w	r3, [ip]
 8012114:	602b      	str	r3, [r5, #0]
 8012116:	6921      	ldr	r1, [r4, #16]
 8012118:	6823      	ldr	r3, [r4, #0]
 801211a:	2010      	movs	r0, #16
 801211c:	4798      	blx	r3
 801211e:	6130      	str	r0, [r6, #16]
 8012120:	b1d0      	cbz	r0, 8012158 <rcl_clock_init+0xdc>
 8012122:	2200      	movs	r2, #0
 8012124:	2300      	movs	r3, #0
 8012126:	e9c0 2300 	strd	r2, r3, [r0]
 801212a:	2301      	movs	r3, #1
 801212c:	7207      	strb	r7, [r0, #8]
 801212e:	4a0c      	ldr	r2, [pc, #48]	@ (8012160 <rcl_clock_init+0xe4>)
 8012130:	7033      	strb	r3, [r6, #0]
 8012132:	46bc      	mov	ip, r7
 8012134:	60f2      	str	r2, [r6, #12]
 8012136:	4660      	mov	r0, ip
 8012138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801213a:	2e00      	cmp	r6, #0
 801213c:	d0ac      	beq.n	8012098 <rcl_clock_init+0x1c>
 801213e:	2c00      	cmp	r4, #0
 8012140:	d0aa      	beq.n	8012098 <rcl_clock_init+0x1c>
 8012142:	2300      	movs	r3, #0
 8012144:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012148:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012168 <rcl_clock_init+0xec>
 801214c:	6133      	str	r3, [r6, #16]
 801214e:	f106 0514 	add.w	r5, r6, #20
 8012152:	469c      	mov	ip, r3
 8012154:	2702      	movs	r7, #2
 8012156:	e7b1      	b.n	80120bc <rcl_clock_init+0x40>
 8012158:	f04f 0c0a 	mov.w	ip, #10
 801215c:	e79e      	b.n	801209c <rcl_clock_init+0x20>
 801215e:	bf00      	nop
 8012160:	0801205d 	.word	0x0801205d
 8012164:	08012055 	.word	0x08012055
 8012168:	0801204d 	.word	0x0801204d

0801216c <rcl_clock_get_now>:
 801216c:	b140      	cbz	r0, 8012180 <rcl_clock_get_now+0x14>
 801216e:	b139      	cbz	r1, 8012180 <rcl_clock_get_now+0x14>
 8012170:	7803      	ldrb	r3, [r0, #0]
 8012172:	b11b      	cbz	r3, 801217c <rcl_clock_get_now+0x10>
 8012174:	68c3      	ldr	r3, [r0, #12]
 8012176:	b10b      	cbz	r3, 801217c <rcl_clock_get_now+0x10>
 8012178:	6900      	ldr	r0, [r0, #16]
 801217a:	4718      	bx	r3
 801217c:	2001      	movs	r0, #1
 801217e:	4770      	bx	lr
 8012180:	200b      	movs	r0, #11
 8012182:	4770      	bx	lr

08012184 <rcl_timer_call>:
 8012184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012188:	b087      	sub	sp, #28
 801218a:	2800      	cmp	r0, #0
 801218c:	d06d      	beq.n	801226a <rcl_timer_call+0xe6>
 801218e:	6803      	ldr	r3, [r0, #0]
 8012190:	4604      	mov	r4, r0
 8012192:	2b00      	cmp	r3, #0
 8012194:	d063      	beq.n	801225e <rcl_timer_call+0xda>
 8012196:	f3bf 8f5b 	dmb	ish
 801219a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801219e:	f3bf 8f5b 	dmb	ish
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d150      	bne.n	8012248 <rcl_timer_call+0xc4>
 80121a6:	6803      	ldr	r3, [r0, #0]
 80121a8:	a904      	add	r1, sp, #16
 80121aa:	6818      	ldr	r0, [r3, #0]
 80121ac:	f7ff ffde 	bl	801216c <rcl_clock_get_now>
 80121b0:	4605      	mov	r5, r0
 80121b2:	2800      	cmp	r0, #0
 80121b4:	d14a      	bne.n	801224c <rcl_timer_call+0xc8>
 80121b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	db4a      	blt.n	8012254 <rcl_timer_call+0xd0>
 80121be:	6820      	ldr	r0, [r4, #0]
 80121c0:	f04f 0a05 	mov.w	sl, #5
 80121c4:	f8cd a000 	str.w	sl, [sp]
 80121c8:	3020      	adds	r0, #32
 80121ca:	f001 fd0d 	bl	8013be8 <__atomic_exchange_8>
 80121ce:	6823      	ldr	r3, [r4, #0]
 80121d0:	f3bf 8f5b 	dmb	ish
 80121d4:	4680      	mov	r8, r0
 80121d6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80121da:	f3bf 8f5b 	dmb	ish
 80121de:	6820      	ldr	r0, [r4, #0]
 80121e0:	4689      	mov	r9, r1
 80121e2:	3028      	adds	r0, #40	@ 0x28
 80121e4:	4651      	mov	r1, sl
 80121e6:	f001 fc93 	bl	8013b10 <__atomic_load_8>
 80121ea:	4606      	mov	r6, r0
 80121ec:	6820      	ldr	r0, [r4, #0]
 80121ee:	460f      	mov	r7, r1
 80121f0:	3018      	adds	r0, #24
 80121f2:	4651      	mov	r1, sl
 80121f4:	f001 fc8c 	bl	8013b10 <__atomic_load_8>
 80121f8:	1836      	adds	r6, r6, r0
 80121fa:	4602      	mov	r2, r0
 80121fc:	4682      	mov	sl, r0
 80121fe:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012202:	eb47 0701 	adc.w	r7, r7, r1
 8012206:	4286      	cmp	r6, r0
 8012208:	460b      	mov	r3, r1
 801220a:	eb77 010c 	sbcs.w	r1, r7, ip
 801220e:	da04      	bge.n	801221a <rcl_timer_call+0x96>
 8012210:	ea53 0102 	orrs.w	r1, r3, r2
 8012214:	d12e      	bne.n	8012274 <rcl_timer_call+0xf0>
 8012216:	4606      	mov	r6, r0
 8012218:	4667      	mov	r7, ip
 801221a:	6820      	ldr	r0, [r4, #0]
 801221c:	2105      	movs	r1, #5
 801221e:	4632      	mov	r2, r6
 8012220:	463b      	mov	r3, r7
 8012222:	3028      	adds	r0, #40	@ 0x28
 8012224:	9100      	str	r1, [sp, #0]
 8012226:	f001 fca9 	bl	8013b7c <__atomic_store_8>
 801222a:	f1bb 0f00 	cmp.w	fp, #0
 801222e:	d00d      	beq.n	801224c <rcl_timer_call+0xc8>
 8012230:	9a04      	ldr	r2, [sp, #16]
 8012232:	9b05      	ldr	r3, [sp, #20]
 8012234:	ebb2 0208 	subs.w	r2, r2, r8
 8012238:	4620      	mov	r0, r4
 801223a:	eb63 0309 	sbc.w	r3, r3, r9
 801223e:	47d8      	blx	fp
 8012240:	4628      	mov	r0, r5
 8012242:	b007      	add	sp, #28
 8012244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012248:	f240 3521 	movw	r5, #801	@ 0x321
 801224c:	4628      	mov	r0, r5
 801224e:	b007      	add	sp, #28
 8012250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012254:	2501      	movs	r5, #1
 8012256:	4628      	mov	r0, r5
 8012258:	b007      	add	sp, #28
 801225a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801225e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8012262:	4628      	mov	r0, r5
 8012264:	b007      	add	sp, #28
 8012266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801226a:	250b      	movs	r5, #11
 801226c:	4628      	mov	r0, r5
 801226e:	b007      	add	sp, #28
 8012270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012274:	1b80      	subs	r0, r0, r6
 8012276:	eb6c 0107 	sbc.w	r1, ip, r7
 801227a:	3801      	subs	r0, #1
 801227c:	f161 0100 	sbc.w	r1, r1, #0
 8012280:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012284:	f7ee fcb2 	bl	8000bec <__aeabi_ldivmod>
 8012288:	9b02      	ldr	r3, [sp, #8]
 801228a:	3001      	adds	r0, #1
 801228c:	f141 0100 	adc.w	r1, r1, #0
 8012290:	fb00 f303 	mul.w	r3, r0, r3
 8012294:	fb01 330a 	mla	r3, r1, sl, r3
 8012298:	fba0 0a0a 	umull	r0, sl, r0, sl
 801229c:	1986      	adds	r6, r0, r6
 801229e:	4453      	add	r3, sl
 80122a0:	eb43 0707 	adc.w	r7, r3, r7
 80122a4:	e7b9      	b.n	801221a <rcl_timer_call+0x96>
 80122a6:	bf00      	nop

080122a8 <rcl_timer_is_ready>:
 80122a8:	b570      	push	{r4, r5, r6, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	b378      	cbz	r0, 801230e <rcl_timer_is_ready+0x66>
 80122ae:	6803      	ldr	r3, [r0, #0]
 80122b0:	4604      	mov	r4, r0
 80122b2:	b383      	cbz	r3, 8012316 <rcl_timer_is_ready+0x6e>
 80122b4:	460d      	mov	r5, r1
 80122b6:	b351      	cbz	r1, 801230e <rcl_timer_is_ready+0x66>
 80122b8:	f3bf 8f5b 	dmb	ish
 80122bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80122c0:	f3bf 8f5b 	dmb	ish
 80122c4:	b953      	cbnz	r3, 80122dc <rcl_timer_is_ready+0x34>
 80122c6:	6803      	ldr	r3, [r0, #0]
 80122c8:	4669      	mov	r1, sp
 80122ca:	6818      	ldr	r0, [r3, #0]
 80122cc:	f7ff ff4e 	bl	801216c <rcl_clock_get_now>
 80122d0:	4606      	mov	r6, r0
 80122d2:	b140      	cbz	r0, 80122e6 <rcl_timer_is_ready+0x3e>
 80122d4:	f240 3321 	movw	r3, #801	@ 0x321
 80122d8:	4298      	cmp	r0, r3
 80122da:	d101      	bne.n	80122e0 <rcl_timer_is_ready+0x38>
 80122dc:	2600      	movs	r6, #0
 80122de:	702e      	strb	r6, [r5, #0]
 80122e0:	4630      	mov	r0, r6
 80122e2:	b002      	add	sp, #8
 80122e4:	bd70      	pop	{r4, r5, r6, pc}
 80122e6:	6820      	ldr	r0, [r4, #0]
 80122e8:	2105      	movs	r1, #5
 80122ea:	3028      	adds	r0, #40	@ 0x28
 80122ec:	f001 fc10 	bl	8013b10 <__atomic_load_8>
 80122f0:	9b00      	ldr	r3, [sp, #0]
 80122f2:	1ac0      	subs	r0, r0, r3
 80122f4:	9b01      	ldr	r3, [sp, #4]
 80122f6:	eb61 0103 	sbc.w	r1, r1, r3
 80122fa:	2801      	cmp	r0, #1
 80122fc:	f171 0300 	sbcs.w	r3, r1, #0
 8012300:	bfb4      	ite	lt
 8012302:	2301      	movlt	r3, #1
 8012304:	2300      	movge	r3, #0
 8012306:	4630      	mov	r0, r6
 8012308:	702b      	strb	r3, [r5, #0]
 801230a:	b002      	add	sp, #8
 801230c:	bd70      	pop	{r4, r5, r6, pc}
 801230e:	260b      	movs	r6, #11
 8012310:	4630      	mov	r0, r6
 8012312:	b002      	add	sp, #8
 8012314:	bd70      	pop	{r4, r5, r6, pc}
 8012316:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801231a:	e7e1      	b.n	80122e0 <rcl_timer_is_ready+0x38>

0801231c <rcl_timer_get_time_until_next_call>:
 801231c:	b570      	push	{r4, r5, r6, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	b330      	cbz	r0, 8012370 <rcl_timer_get_time_until_next_call+0x54>
 8012322:	6803      	ldr	r3, [r0, #0]
 8012324:	4604      	mov	r4, r0
 8012326:	b33b      	cbz	r3, 8012378 <rcl_timer_get_time_until_next_call+0x5c>
 8012328:	460d      	mov	r5, r1
 801232a:	b309      	cbz	r1, 8012370 <rcl_timer_get_time_until_next_call+0x54>
 801232c:	f3bf 8f5b 	dmb	ish
 8012330:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012334:	f3bf 8f5b 	dmb	ish
 8012338:	b9ab      	cbnz	r3, 8012366 <rcl_timer_get_time_until_next_call+0x4a>
 801233a:	6803      	ldr	r3, [r0, #0]
 801233c:	4669      	mov	r1, sp
 801233e:	6818      	ldr	r0, [r3, #0]
 8012340:	f7ff ff14 	bl	801216c <rcl_clock_get_now>
 8012344:	4606      	mov	r6, r0
 8012346:	b958      	cbnz	r0, 8012360 <rcl_timer_get_time_until_next_call+0x44>
 8012348:	6820      	ldr	r0, [r4, #0]
 801234a:	2105      	movs	r1, #5
 801234c:	3028      	adds	r0, #40	@ 0x28
 801234e:	f001 fbdf 	bl	8013b10 <__atomic_load_8>
 8012352:	9b00      	ldr	r3, [sp, #0]
 8012354:	1ac0      	subs	r0, r0, r3
 8012356:	9b01      	ldr	r3, [sp, #4]
 8012358:	6028      	str	r0, [r5, #0]
 801235a:	eb61 0103 	sbc.w	r1, r1, r3
 801235e:	6069      	str	r1, [r5, #4]
 8012360:	4630      	mov	r0, r6
 8012362:	b002      	add	sp, #8
 8012364:	bd70      	pop	{r4, r5, r6, pc}
 8012366:	f240 3621 	movw	r6, #801	@ 0x321
 801236a:	4630      	mov	r0, r6
 801236c:	b002      	add	sp, #8
 801236e:	bd70      	pop	{r4, r5, r6, pc}
 8012370:	260b      	movs	r6, #11
 8012372:	4630      	mov	r0, r6
 8012374:	b002      	add	sp, #8
 8012376:	bd70      	pop	{r4, r5, r6, pc}
 8012378:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801237c:	e7f0      	b.n	8012360 <rcl_timer_get_time_until_next_call+0x44>
 801237e:	bf00      	nop

08012380 <rcl_timer_get_guard_condition>:
 8012380:	b130      	cbz	r0, 8012390 <rcl_timer_get_guard_condition+0x10>
 8012382:	6800      	ldr	r0, [r0, #0]
 8012384:	b120      	cbz	r0, 8012390 <rcl_timer_get_guard_condition+0x10>
 8012386:	68c3      	ldr	r3, [r0, #12]
 8012388:	b10b      	cbz	r3, 801238e <rcl_timer_get_guard_condition+0xe>
 801238a:	3008      	adds	r0, #8
 801238c:	4770      	bx	lr
 801238e:	4618      	mov	r0, r3
 8012390:	4770      	bx	lr
 8012392:	bf00      	nop

08012394 <rcl_validate_enclave_name_with_size>:
 8012394:	b378      	cbz	r0, 80123f6 <rcl_validate_enclave_name_with_size+0x62>
 8012396:	b570      	push	{r4, r5, r6, lr}
 8012398:	4615      	mov	r5, r2
 801239a:	b0c2      	sub	sp, #264	@ 0x108
 801239c:	b302      	cbz	r2, 80123e0 <rcl_validate_enclave_name_with_size+0x4c>
 801239e:	461e      	mov	r6, r3
 80123a0:	466a      	mov	r2, sp
 80123a2:	ab01      	add	r3, sp, #4
 80123a4:	460c      	mov	r4, r1
 80123a6:	f002 f849 	bl	801443c <rmw_validate_namespace_with_size>
 80123aa:	4684      	mov	ip, r0
 80123ac:	b9e8      	cbnz	r0, 80123ea <rcl_validate_enclave_name_with_size+0x56>
 80123ae:	9b00      	ldr	r3, [sp, #0]
 80123b0:	b923      	cbnz	r3, 80123bc <rcl_validate_enclave_name_with_size+0x28>
 80123b2:	2300      	movs	r3, #0
 80123b4:	602b      	str	r3, [r5, #0]
 80123b6:	4660      	mov	r0, ip
 80123b8:	b042      	add	sp, #264	@ 0x108
 80123ba:	bd70      	pop	{r4, r5, r6, pc}
 80123bc:	2b07      	cmp	r3, #7
 80123be:	d007      	beq.n	80123d0 <rcl_validate_enclave_name_with_size+0x3c>
 80123c0:	1e5a      	subs	r2, r3, #1
 80123c2:	2a05      	cmp	r2, #5
 80123c4:	d833      	bhi.n	801242e <rcl_validate_enclave_name_with_size+0x9a>
 80123c6:	e8df f002 	tbb	[pc, r2]
 80123ca:	2c2f      	.short	0x2c2f
 80123cc:	1a232629 	.word	0x1a232629
 80123d0:	2cff      	cmp	r4, #255	@ 0xff
 80123d2:	d9ee      	bls.n	80123b2 <rcl_validate_enclave_name_with_size+0x1e>
 80123d4:	602b      	str	r3, [r5, #0]
 80123d6:	2e00      	cmp	r6, #0
 80123d8:	d0ed      	beq.n	80123b6 <rcl_validate_enclave_name_with_size+0x22>
 80123da:	23fe      	movs	r3, #254	@ 0xfe
 80123dc:	6033      	str	r3, [r6, #0]
 80123de:	e7ea      	b.n	80123b6 <rcl_validate_enclave_name_with_size+0x22>
 80123e0:	f04f 0c0b 	mov.w	ip, #11
 80123e4:	4660      	mov	r0, ip
 80123e6:	b042      	add	sp, #264	@ 0x108
 80123e8:	bd70      	pop	{r4, r5, r6, pc}
 80123ea:	f7fe fe93 	bl	8011114 <rcl_convert_rmw_ret_to_rcl_ret>
 80123ee:	4684      	mov	ip, r0
 80123f0:	4660      	mov	r0, ip
 80123f2:	b042      	add	sp, #264	@ 0x108
 80123f4:	bd70      	pop	{r4, r5, r6, pc}
 80123f6:	f04f 0c0b 	mov.w	ip, #11
 80123fa:	4660      	mov	r0, ip
 80123fc:	4770      	bx	lr
 80123fe:	2306      	movs	r3, #6
 8012400:	602b      	str	r3, [r5, #0]
 8012402:	2e00      	cmp	r6, #0
 8012404:	d0d7      	beq.n	80123b6 <rcl_validate_enclave_name_with_size+0x22>
 8012406:	9b01      	ldr	r3, [sp, #4]
 8012408:	6033      	str	r3, [r6, #0]
 801240a:	4660      	mov	r0, ip
 801240c:	b042      	add	sp, #264	@ 0x108
 801240e:	bd70      	pop	{r4, r5, r6, pc}
 8012410:	2305      	movs	r3, #5
 8012412:	602b      	str	r3, [r5, #0]
 8012414:	e7f5      	b.n	8012402 <rcl_validate_enclave_name_with_size+0x6e>
 8012416:	2304      	movs	r3, #4
 8012418:	602b      	str	r3, [r5, #0]
 801241a:	e7f2      	b.n	8012402 <rcl_validate_enclave_name_with_size+0x6e>
 801241c:	2303      	movs	r3, #3
 801241e:	602b      	str	r3, [r5, #0]
 8012420:	e7ef      	b.n	8012402 <rcl_validate_enclave_name_with_size+0x6e>
 8012422:	2302      	movs	r3, #2
 8012424:	602b      	str	r3, [r5, #0]
 8012426:	e7ec      	b.n	8012402 <rcl_validate_enclave_name_with_size+0x6e>
 8012428:	2301      	movs	r3, #1
 801242a:	602b      	str	r3, [r5, #0]
 801242c:	e7e9      	b.n	8012402 <rcl_validate_enclave_name_with_size+0x6e>
 801242e:	4a04      	ldr	r2, [pc, #16]	@ (8012440 <rcl_validate_enclave_name_with_size+0xac>)
 8012430:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012434:	a802      	add	r0, sp, #8
 8012436:	f001 fd25 	bl	8013e84 <rcutils_snprintf>
 801243a:	f04f 0c01 	mov.w	ip, #1
 801243e:	e7ba      	b.n	80123b6 <rcl_validate_enclave_name_with_size+0x22>
 8012440:	08019d80 	.word	0x08019d80

08012444 <rcl_validate_enclave_name>:
 8012444:	b168      	cbz	r0, 8012462 <rcl_validate_enclave_name+0x1e>
 8012446:	b570      	push	{r4, r5, r6, lr}
 8012448:	460d      	mov	r5, r1
 801244a:	4616      	mov	r6, r2
 801244c:	4604      	mov	r4, r0
 801244e:	f7ed fed1 	bl	80001f4 <strlen>
 8012452:	4633      	mov	r3, r6
 8012454:	4601      	mov	r1, r0
 8012456:	462a      	mov	r2, r5
 8012458:	4620      	mov	r0, r4
 801245a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801245e:	f7ff bf99 	b.w	8012394 <rcl_validate_enclave_name_with_size>
 8012462:	200b      	movs	r0, #11
 8012464:	4770      	bx	lr
 8012466:	bf00      	nop

08012468 <rcl_get_zero_initialized_wait_set>:
 8012468:	b510      	push	{r4, lr}
 801246a:	4c08      	ldr	r4, [pc, #32]	@ (801248c <rcl_get_zero_initialized_wait_set+0x24>)
 801246c:	4686      	mov	lr, r0
 801246e:	4684      	mov	ip, r0
 8012470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012478:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801247e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012482:	6823      	ldr	r3, [r4, #0]
 8012484:	f8cc 3000 	str.w	r3, [ip]
 8012488:	4670      	mov	r0, lr
 801248a:	bd10      	pop	{r4, pc}
 801248c:	08019de0 	.word	0x08019de0

08012490 <rcl_wait_set_is_valid>:
 8012490:	b118      	cbz	r0, 801249a <rcl_wait_set_is_valid+0xa>
 8012492:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012494:	3800      	subs	r0, #0
 8012496:	bf18      	it	ne
 8012498:	2001      	movne	r0, #1
 801249a:	4770      	bx	lr

0801249c <rcl_wait_set_fini>:
 801249c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124a0:	b082      	sub	sp, #8
 80124a2:	2800      	cmp	r0, #0
 80124a4:	f000 8095 	beq.w	80125d2 <rcl_wait_set_fini+0x136>
 80124a8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80124aa:	4604      	mov	r4, r0
 80124ac:	2e00      	cmp	r6, #0
 80124ae:	f000 808c 	beq.w	80125ca <rcl_wait_set_fini+0x12e>
 80124b2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80124b4:	f003 f9b6 	bl	8015824 <rmw_destroy_wait_set>
 80124b8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80124ba:	1e06      	subs	r6, r0, #0
 80124bc:	bf18      	it	ne
 80124be:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80124c2:	2d00      	cmp	r5, #0
 80124c4:	f000 8081 	beq.w	80125ca <rcl_wait_set_fini+0x12e>
 80124c8:	6820      	ldr	r0, [r4, #0]
 80124ca:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80124ce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80124d0:	2700      	movs	r7, #0
 80124d2:	6067      	str	r7, [r4, #4]
 80124d4:	602f      	str	r7, [r5, #0]
 80124d6:	b120      	cbz	r0, 80124e2 <rcl_wait_set_fini+0x46>
 80124d8:	9101      	str	r1, [sp, #4]
 80124da:	47c0      	blx	r8
 80124dc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80124de:	9901      	ldr	r1, [sp, #4]
 80124e0:	6027      	str	r7, [r4, #0]
 80124e2:	68a8      	ldr	r0, [r5, #8]
 80124e4:	b120      	cbz	r0, 80124f0 <rcl_wait_set_fini+0x54>
 80124e6:	47c0      	blx	r8
 80124e8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80124ea:	2300      	movs	r3, #0
 80124ec:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80124f0:	68a0      	ldr	r0, [r4, #8]
 80124f2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80124f4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80124f6:	f04f 0800 	mov.w	r8, #0
 80124fa:	f8c4 800c 	str.w	r8, [r4, #12]
 80124fe:	f8c5 800c 	str.w	r8, [r5, #12]
 8012502:	b128      	cbz	r0, 8012510 <rcl_wait_set_fini+0x74>
 8012504:	47b8      	blx	r7
 8012506:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012508:	f8c4 8008 	str.w	r8, [r4, #8]
 801250c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801250e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012510:	6968      	ldr	r0, [r5, #20]
 8012512:	f04f 0800 	mov.w	r8, #0
 8012516:	f8c5 8010 	str.w	r8, [r5, #16]
 801251a:	b128      	cbz	r0, 8012528 <rcl_wait_set_fini+0x8c>
 801251c:	47b8      	blx	r7
 801251e:	f8c5 8014 	str.w	r8, [r5, #20]
 8012522:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012524:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012526:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012528:	6920      	ldr	r0, [r4, #16]
 801252a:	f04f 0800 	mov.w	r8, #0
 801252e:	f8c4 8014 	str.w	r8, [r4, #20]
 8012532:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8012536:	b128      	cbz	r0, 8012544 <rcl_wait_set_fini+0xa8>
 8012538:	47b8      	blx	r7
 801253a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801253c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012540:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012542:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012544:	69a0      	ldr	r0, [r4, #24]
 8012546:	f04f 0800 	mov.w	r8, #0
 801254a:	f8c4 801c 	str.w	r8, [r4, #28]
 801254e:	f8c5 8018 	str.w	r8, [r5, #24]
 8012552:	b128      	cbz	r0, 8012560 <rcl_wait_set_fini+0xc4>
 8012554:	9101      	str	r1, [sp, #4]
 8012556:	47b8      	blx	r7
 8012558:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801255a:	9901      	ldr	r1, [sp, #4]
 801255c:	f8c4 8018 	str.w	r8, [r4, #24]
 8012560:	6a28      	ldr	r0, [r5, #32]
 8012562:	b120      	cbz	r0, 801256e <rcl_wait_set_fini+0xd2>
 8012564:	47b8      	blx	r7
 8012566:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012568:	2300      	movs	r3, #0
 801256a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801256e:	6a20      	ldr	r0, [r4, #32]
 8012570:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012574:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012576:	2700      	movs	r7, #0
 8012578:	6267      	str	r7, [r4, #36]	@ 0x24
 801257a:	626f      	str	r7, [r5, #36]	@ 0x24
 801257c:	b120      	cbz	r0, 8012588 <rcl_wait_set_fini+0xec>
 801257e:	9101      	str	r1, [sp, #4]
 8012580:	47c0      	blx	r8
 8012582:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012584:	9901      	ldr	r1, [sp, #4]
 8012586:	6227      	str	r7, [r4, #32]
 8012588:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801258a:	b120      	cbz	r0, 8012596 <rcl_wait_set_fini+0xfa>
 801258c:	47c0      	blx	r8
 801258e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012590:	2300      	movs	r3, #0
 8012592:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012596:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012598:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801259c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801259e:	2700      	movs	r7, #0
 80125a0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80125a2:	632f      	str	r7, [r5, #48]	@ 0x30
 80125a4:	b120      	cbz	r0, 80125b0 <rcl_wait_set_fini+0x114>
 80125a6:	9101      	str	r1, [sp, #4]
 80125a8:	47c0      	blx	r8
 80125aa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80125ac:	9901      	ldr	r1, [sp, #4]
 80125ae:	62a7      	str	r7, [r4, #40]	@ 0x28
 80125b0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80125b2:	b120      	cbz	r0, 80125be <rcl_wait_set_fini+0x122>
 80125b4:	47c0      	blx	r8
 80125b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80125b8:	2300      	movs	r3, #0
 80125ba:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80125be:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80125c0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80125c2:	4628      	mov	r0, r5
 80125c4:	4798      	blx	r3
 80125c6:	2300      	movs	r3, #0
 80125c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80125ca:	4630      	mov	r0, r6
 80125cc:	b002      	add	sp, #8
 80125ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d2:	260b      	movs	r6, #11
 80125d4:	4630      	mov	r0, r6
 80125d6:	b002      	add	sp, #8
 80125d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080125dc <rcl_wait_set_add_subscription>:
 80125dc:	b318      	cbz	r0, 8012626 <rcl_wait_set_add_subscription+0x4a>
 80125de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80125e0:	b570      	push	{r4, r5, r6, lr}
 80125e2:	4604      	mov	r4, r0
 80125e4:	b30b      	cbz	r3, 801262a <rcl_wait_set_add_subscription+0x4e>
 80125e6:	b319      	cbz	r1, 8012630 <rcl_wait_set_add_subscription+0x54>
 80125e8:	681d      	ldr	r5, [r3, #0]
 80125ea:	6840      	ldr	r0, [r0, #4]
 80125ec:	4285      	cmp	r5, r0
 80125ee:	d217      	bcs.n	8012620 <rcl_wait_set_add_subscription+0x44>
 80125f0:	6820      	ldr	r0, [r4, #0]
 80125f2:	1c6e      	adds	r6, r5, #1
 80125f4:	601e      	str	r6, [r3, #0]
 80125f6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80125fa:	b102      	cbz	r2, 80125fe <rcl_wait_set_add_subscription+0x22>
 80125fc:	6015      	str	r5, [r2, #0]
 80125fe:	4608      	mov	r0, r1
 8012600:	f7ff fd14 	bl	801202c <rcl_subscription_get_rmw_handle>
 8012604:	b150      	cbz	r0, 801261c <rcl_wait_set_add_subscription+0x40>
 8012606:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012608:	6842      	ldr	r2, [r0, #4]
 801260a:	689b      	ldr	r3, [r3, #8]
 801260c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012610:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012612:	6853      	ldr	r3, [r2, #4]
 8012614:	3301      	adds	r3, #1
 8012616:	2000      	movs	r0, #0
 8012618:	6053      	str	r3, [r2, #4]
 801261a:	bd70      	pop	{r4, r5, r6, pc}
 801261c:	2001      	movs	r0, #1
 801261e:	bd70      	pop	{r4, r5, r6, pc}
 8012620:	f240 3086 	movw	r0, #902	@ 0x386
 8012624:	bd70      	pop	{r4, r5, r6, pc}
 8012626:	200b      	movs	r0, #11
 8012628:	4770      	bx	lr
 801262a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801262e:	bd70      	pop	{r4, r5, r6, pc}
 8012630:	200b      	movs	r0, #11
 8012632:	bd70      	pop	{r4, r5, r6, pc}

08012634 <rcl_wait_set_clear>:
 8012634:	2800      	cmp	r0, #0
 8012636:	d073      	beq.n	8012720 <rcl_wait_set_clear+0xec>
 8012638:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801263a:	b510      	push	{r4, lr}
 801263c:	4604      	mov	r4, r0
 801263e:	2b00      	cmp	r3, #0
 8012640:	d070      	beq.n	8012724 <rcl_wait_set_clear+0xf0>
 8012642:	6800      	ldr	r0, [r0, #0]
 8012644:	b138      	cbz	r0, 8012656 <rcl_wait_set_clear+0x22>
 8012646:	6862      	ldr	r2, [r4, #4]
 8012648:	2100      	movs	r1, #0
 801264a:	0092      	lsls	r2, r2, #2
 801264c:	f005 ffc8 	bl	80185e0 <memset>
 8012650:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012652:	2200      	movs	r2, #0
 8012654:	601a      	str	r2, [r3, #0]
 8012656:	68a0      	ldr	r0, [r4, #8]
 8012658:	b138      	cbz	r0, 801266a <rcl_wait_set_clear+0x36>
 801265a:	68e2      	ldr	r2, [r4, #12]
 801265c:	2100      	movs	r1, #0
 801265e:	0092      	lsls	r2, r2, #2
 8012660:	f005 ffbe 	bl	80185e0 <memset>
 8012664:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012666:	2200      	movs	r2, #0
 8012668:	60da      	str	r2, [r3, #12]
 801266a:	69a0      	ldr	r0, [r4, #24]
 801266c:	b138      	cbz	r0, 801267e <rcl_wait_set_clear+0x4a>
 801266e:	69e2      	ldr	r2, [r4, #28]
 8012670:	2100      	movs	r1, #0
 8012672:	0092      	lsls	r2, r2, #2
 8012674:	f005 ffb4 	bl	80185e0 <memset>
 8012678:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801267a:	2200      	movs	r2, #0
 801267c:	619a      	str	r2, [r3, #24]
 801267e:	6a20      	ldr	r0, [r4, #32]
 8012680:	b138      	cbz	r0, 8012692 <rcl_wait_set_clear+0x5e>
 8012682:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012684:	2100      	movs	r1, #0
 8012686:	0092      	lsls	r2, r2, #2
 8012688:	f005 ffaa 	bl	80185e0 <memset>
 801268c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801268e:	2200      	movs	r2, #0
 8012690:	625a      	str	r2, [r3, #36]	@ 0x24
 8012692:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012694:	b138      	cbz	r0, 80126a6 <rcl_wait_set_clear+0x72>
 8012696:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012698:	2100      	movs	r1, #0
 801269a:	0092      	lsls	r2, r2, #2
 801269c:	f005 ffa0 	bl	80185e0 <memset>
 80126a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126a2:	2200      	movs	r2, #0
 80126a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80126a6:	6920      	ldr	r0, [r4, #16]
 80126a8:	b138      	cbz	r0, 80126ba <rcl_wait_set_clear+0x86>
 80126aa:	6962      	ldr	r2, [r4, #20]
 80126ac:	2100      	movs	r1, #0
 80126ae:	0092      	lsls	r2, r2, #2
 80126b0:	f005 ff96 	bl	80185e0 <memset>
 80126b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126b6:	2200      	movs	r2, #0
 80126b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80126ba:	6898      	ldr	r0, [r3, #8]
 80126bc:	b138      	cbz	r0, 80126ce <rcl_wait_set_clear+0x9a>
 80126be:	685a      	ldr	r2, [r3, #4]
 80126c0:	2100      	movs	r1, #0
 80126c2:	0092      	lsls	r2, r2, #2
 80126c4:	f005 ff8c 	bl	80185e0 <memset>
 80126c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126ca:	2200      	movs	r2, #0
 80126cc:	605a      	str	r2, [r3, #4]
 80126ce:	6958      	ldr	r0, [r3, #20]
 80126d0:	b138      	cbz	r0, 80126e2 <rcl_wait_set_clear+0xae>
 80126d2:	691a      	ldr	r2, [r3, #16]
 80126d4:	2100      	movs	r1, #0
 80126d6:	0092      	lsls	r2, r2, #2
 80126d8:	f005 ff82 	bl	80185e0 <memset>
 80126dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126de:	2200      	movs	r2, #0
 80126e0:	611a      	str	r2, [r3, #16]
 80126e2:	6a18      	ldr	r0, [r3, #32]
 80126e4:	b138      	cbz	r0, 80126f6 <rcl_wait_set_clear+0xc2>
 80126e6:	69da      	ldr	r2, [r3, #28]
 80126e8:	2100      	movs	r1, #0
 80126ea:	0092      	lsls	r2, r2, #2
 80126ec:	f005 ff78 	bl	80185e0 <memset>
 80126f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126f2:	2200      	movs	r2, #0
 80126f4:	61da      	str	r2, [r3, #28]
 80126f6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80126f8:	b138      	cbz	r0, 801270a <rcl_wait_set_clear+0xd6>
 80126fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80126fc:	2100      	movs	r1, #0
 80126fe:	0092      	lsls	r2, r2, #2
 8012700:	f005 ff6e 	bl	80185e0 <memset>
 8012704:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012706:	2200      	movs	r2, #0
 8012708:	629a      	str	r2, [r3, #40]	@ 0x28
 801270a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801270c:	b138      	cbz	r0, 801271e <rcl_wait_set_clear+0xea>
 801270e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012710:	2100      	movs	r1, #0
 8012712:	0092      	lsls	r2, r2, #2
 8012714:	f005 ff64 	bl	80185e0 <memset>
 8012718:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801271a:	2000      	movs	r0, #0
 801271c:	6358      	str	r0, [r3, #52]	@ 0x34
 801271e:	bd10      	pop	{r4, pc}
 8012720:	200b      	movs	r0, #11
 8012722:	4770      	bx	lr
 8012724:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012728:	bd10      	pop	{r4, pc}
 801272a:	bf00      	nop

0801272c <rcl_wait_set_resize>:
 801272c:	2800      	cmp	r0, #0
 801272e:	f000 8185 	beq.w	8012a3c <rcl_wait_set_resize+0x310>
 8012732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012736:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8012738:	b083      	sub	sp, #12
 801273a:	4605      	mov	r5, r0
 801273c:	2c00      	cmp	r4, #0
 801273e:	f000 817f 	beq.w	8012a40 <rcl_wait_set_resize+0x314>
 8012742:	f04f 0900 	mov.w	r9, #0
 8012746:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801274a:	461f      	mov	r7, r3
 801274c:	4688      	mov	r8, r1
 801274e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8012752:	4616      	mov	r6, r2
 8012754:	f8c0 9004 	str.w	r9, [r0, #4]
 8012758:	f8c4 9000 	str.w	r9, [r4]
 801275c:	2900      	cmp	r1, #0
 801275e:	f000 80bd 	beq.w	80128dc <rcl_wait_set_resize+0x1b0>
 8012762:	008c      	lsls	r4, r1, #2
 8012764:	6800      	ldr	r0, [r0, #0]
 8012766:	9301      	str	r3, [sp, #4]
 8012768:	4652      	mov	r2, sl
 801276a:	4621      	mov	r1, r4
 801276c:	4798      	blx	r3
 801276e:	9b01      	ldr	r3, [sp, #4]
 8012770:	6028      	str	r0, [r5, #0]
 8012772:	2800      	cmp	r0, #0
 8012774:	f000 80cb 	beq.w	801290e <rcl_wait_set_resize+0x1e2>
 8012778:	4622      	mov	r2, r4
 801277a:	4649      	mov	r1, r9
 801277c:	9301      	str	r3, [sp, #4]
 801277e:	f005 ff2f 	bl	80185e0 <memset>
 8012782:	f8c5 8004 	str.w	r8, [r5, #4]
 8012786:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801278a:	9b01      	ldr	r3, [sp, #4]
 801278c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8012790:	f8c8 9004 	str.w	r9, [r8, #4]
 8012794:	4652      	mov	r2, sl
 8012796:	4621      	mov	r1, r4
 8012798:	4798      	blx	r3
 801279a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801279c:	f8c8 0008 	str.w	r0, [r8, #8]
 80127a0:	689b      	ldr	r3, [r3, #8]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f000 80ac 	beq.w	8012900 <rcl_wait_set_resize+0x1d4>
 80127a8:	4622      	mov	r2, r4
 80127aa:	4649      	mov	r1, r9
 80127ac:	4618      	mov	r0, r3
 80127ae:	f005 ff17 	bl	80185e0 <memset>
 80127b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80127b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80127b8:	f04f 0800 	mov.w	r8, #0
 80127bc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80127c0:	f8c5 800c 	str.w	r8, [r5, #12]
 80127c4:	f8c4 800c 	str.w	r8, [r4, #12]
 80127c8:	2e00      	cmp	r6, #0
 80127ca:	f040 80a4 	bne.w	8012916 <rcl_wait_set_resize+0x1ea>
 80127ce:	68a8      	ldr	r0, [r5, #8]
 80127d0:	b128      	cbz	r0, 80127de <rcl_wait_set_resize+0xb2>
 80127d2:	4649      	mov	r1, r9
 80127d4:	4790      	blx	r2
 80127d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80127d8:	60ae      	str	r6, [r5, #8]
 80127da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80127de:	f04f 0800 	mov.w	r8, #0
 80127e2:	19f6      	adds	r6, r6, r7
 80127e4:	f8c4 8010 	str.w	r8, [r4, #16]
 80127e8:	f040 80ac 	bne.w	8012944 <rcl_wait_set_resize+0x218>
 80127ec:	6960      	ldr	r0, [r4, #20]
 80127ee:	b130      	cbz	r0, 80127fe <rcl_wait_set_resize+0xd2>
 80127f0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80127f2:	4649      	mov	r1, r9
 80127f4:	4798      	blx	r3
 80127f6:	6166      	str	r6, [r4, #20]
 80127f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80127fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80127fe:	2600      	movs	r6, #0
 8012800:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012804:	616e      	str	r6, [r5, #20]
 8012806:	6426      	str	r6, [r4, #64]	@ 0x40
 8012808:	2f00      	cmp	r7, #0
 801280a:	f040 80ad 	bne.w	8012968 <rcl_wait_set_resize+0x23c>
 801280e:	6928      	ldr	r0, [r5, #16]
 8012810:	b138      	cbz	r0, 8012822 <rcl_wait_set_resize+0xf6>
 8012812:	4649      	mov	r1, r9
 8012814:	47d0      	blx	sl
 8012816:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012818:	612f      	str	r7, [r5, #16]
 801281a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801281e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012822:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012824:	2600      	movs	r6, #0
 8012826:	61ee      	str	r6, [r5, #28]
 8012828:	61a6      	str	r6, [r4, #24]
 801282a:	2b00      	cmp	r3, #0
 801282c:	f040 80af 	bne.w	801298e <rcl_wait_set_resize+0x262>
 8012830:	69a8      	ldr	r0, [r5, #24]
 8012832:	b120      	cbz	r0, 801283e <rcl_wait_set_resize+0x112>
 8012834:	4649      	mov	r1, r9
 8012836:	47d0      	blx	sl
 8012838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801283a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801283c:	61ab      	str	r3, [r5, #24]
 801283e:	6a20      	ldr	r0, [r4, #32]
 8012840:	b128      	cbz	r0, 801284e <rcl_wait_set_resize+0x122>
 8012842:	4649      	mov	r1, r9
 8012844:	47d0      	blx	sl
 8012846:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012848:	2300      	movs	r3, #0
 801284a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801284e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012850:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012852:	2600      	movs	r6, #0
 8012854:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012858:	626e      	str	r6, [r5, #36]	@ 0x24
 801285a:	6266      	str	r6, [r4, #36]	@ 0x24
 801285c:	2b00      	cmp	r3, #0
 801285e:	f000 80b6 	beq.w	80129ce <rcl_wait_set_resize+0x2a2>
 8012862:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8012866:	6a28      	ldr	r0, [r5, #32]
 8012868:	463a      	mov	r2, r7
 801286a:	4651      	mov	r1, sl
 801286c:	47c8      	blx	r9
 801286e:	6228      	str	r0, [r5, #32]
 8012870:	2800      	cmp	r0, #0
 8012872:	d04c      	beq.n	801290e <rcl_wait_set_resize+0x1e2>
 8012874:	4652      	mov	r2, sl
 8012876:	4631      	mov	r1, r6
 8012878:	f005 feb2 	bl	80185e0 <memset>
 801287c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801287e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012880:	626b      	str	r3, [r5, #36]	@ 0x24
 8012882:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012884:	62a6      	str	r6, [r4, #40]	@ 0x28
 8012886:	463a      	mov	r2, r7
 8012888:	4651      	mov	r1, sl
 801288a:	47c8      	blx	r9
 801288c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801288e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8012890:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8012892:	2c00      	cmp	r4, #0
 8012894:	f000 80f0 	beq.w	8012a78 <rcl_wait_set_resize+0x34c>
 8012898:	4620      	mov	r0, r4
 801289a:	4652      	mov	r2, sl
 801289c:	4631      	mov	r1, r6
 801289e:	f005 fe9f 	bl	80185e0 <memset>
 80128a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80128a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128a6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80128a8:	2600      	movs	r6, #0
 80128aa:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80128ae:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80128b0:	6326      	str	r6, [r4, #48]	@ 0x30
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f040 809d 	bne.w	80129f2 <rcl_wait_set_resize+0x2c6>
 80128b8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80128ba:	b120      	cbz	r0, 80128c6 <rcl_wait_set_resize+0x19a>
 80128bc:	4639      	mov	r1, r7
 80128be:	47c0      	blx	r8
 80128c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80128c4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80128c6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80128c8:	b310      	cbz	r0, 8012910 <rcl_wait_set_resize+0x1e4>
 80128ca:	4639      	mov	r1, r7
 80128cc:	47c0      	blx	r8
 80128ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80128d0:	2000      	movs	r0, #0
 80128d2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80128d6:	b003      	add	sp, #12
 80128d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128dc:	6800      	ldr	r0, [r0, #0]
 80128de:	b120      	cbz	r0, 80128ea <rcl_wait_set_resize+0x1be>
 80128e0:	4651      	mov	r1, sl
 80128e2:	47d8      	blx	fp
 80128e4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80128e6:	f8c5 8000 	str.w	r8, [r5]
 80128ea:	68a0      	ldr	r0, [r4, #8]
 80128ec:	2800      	cmp	r0, #0
 80128ee:	f43f af61 	beq.w	80127b4 <rcl_wait_set_resize+0x88>
 80128f2:	4651      	mov	r1, sl
 80128f4:	47d8      	blx	fp
 80128f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80128f8:	2300      	movs	r3, #0
 80128fa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80128fe:	e759      	b.n	80127b4 <rcl_wait_set_resize+0x88>
 8012900:	6828      	ldr	r0, [r5, #0]
 8012902:	9301      	str	r3, [sp, #4]
 8012904:	4651      	mov	r1, sl
 8012906:	47d8      	blx	fp
 8012908:	9b01      	ldr	r3, [sp, #4]
 801290a:	e9c5 3300 	strd	r3, r3, [r5]
 801290e:	200a      	movs	r0, #10
 8012910:	b003      	add	sp, #12
 8012912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012916:	00b4      	lsls	r4, r6, #2
 8012918:	68a8      	ldr	r0, [r5, #8]
 801291a:	464a      	mov	r2, r9
 801291c:	4621      	mov	r1, r4
 801291e:	4798      	blx	r3
 8012920:	60a8      	str	r0, [r5, #8]
 8012922:	2800      	cmp	r0, #0
 8012924:	d0f3      	beq.n	801290e <rcl_wait_set_resize+0x1e2>
 8012926:	4622      	mov	r2, r4
 8012928:	4641      	mov	r1, r8
 801292a:	f005 fe59 	bl	80185e0 <memset>
 801292e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012930:	60ee      	str	r6, [r5, #12]
 8012932:	f04f 0800 	mov.w	r8, #0
 8012936:	19f6      	adds	r6, r6, r7
 8012938:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801293c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012940:	f43f af54 	beq.w	80127ec <rcl_wait_set_resize+0xc0>
 8012944:	00b6      	lsls	r6, r6, #2
 8012946:	464a      	mov	r2, r9
 8012948:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801294a:	6960      	ldr	r0, [r4, #20]
 801294c:	4631      	mov	r1, r6
 801294e:	4798      	blx	r3
 8012950:	4681      	mov	r9, r0
 8012952:	6160      	str	r0, [r4, #20]
 8012954:	2800      	cmp	r0, #0
 8012956:	d076      	beq.n	8012a46 <rcl_wait_set_resize+0x31a>
 8012958:	4632      	mov	r2, r6
 801295a:	4641      	mov	r1, r8
 801295c:	f005 fe40 	bl	80185e0 <memset>
 8012960:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012962:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012966:	e74a      	b.n	80127fe <rcl_wait_set_resize+0xd2>
 8012968:	00bc      	lsls	r4, r7, #2
 801296a:	6928      	ldr	r0, [r5, #16]
 801296c:	464a      	mov	r2, r9
 801296e:	4621      	mov	r1, r4
 8012970:	47c0      	blx	r8
 8012972:	6128      	str	r0, [r5, #16]
 8012974:	2800      	cmp	r0, #0
 8012976:	d0ca      	beq.n	801290e <rcl_wait_set_resize+0x1e2>
 8012978:	4622      	mov	r2, r4
 801297a:	4631      	mov	r1, r6
 801297c:	f005 fe30 	bl	80185e0 <memset>
 8012980:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012982:	616f      	str	r7, [r5, #20]
 8012984:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012988:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801298c:	e749      	b.n	8012822 <rcl_wait_set_resize+0xf6>
 801298e:	009c      	lsls	r4, r3, #2
 8012990:	69a8      	ldr	r0, [r5, #24]
 8012992:	464a      	mov	r2, r9
 8012994:	4621      	mov	r1, r4
 8012996:	47c0      	blx	r8
 8012998:	61a8      	str	r0, [r5, #24]
 801299a:	2800      	cmp	r0, #0
 801299c:	d0b7      	beq.n	801290e <rcl_wait_set_resize+0x1e2>
 801299e:	4622      	mov	r2, r4
 80129a0:	4631      	mov	r1, r6
 80129a2:	f005 fe1d 	bl	80185e0 <memset>
 80129a6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80129a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129aa:	61eb      	str	r3, [r5, #28]
 80129ac:	6a38      	ldr	r0, [r7, #32]
 80129ae:	61fe      	str	r6, [r7, #28]
 80129b0:	464a      	mov	r2, r9
 80129b2:	4621      	mov	r1, r4
 80129b4:	47c0      	blx	r8
 80129b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80129b8:	6238      	str	r0, [r7, #32]
 80129ba:	6a1f      	ldr	r7, [r3, #32]
 80129bc:	2f00      	cmp	r7, #0
 80129be:	d054      	beq.n	8012a6a <rcl_wait_set_resize+0x33e>
 80129c0:	4622      	mov	r2, r4
 80129c2:	4631      	mov	r1, r6
 80129c4:	4638      	mov	r0, r7
 80129c6:	f005 fe0b 	bl	80185e0 <memset>
 80129ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129cc:	e73f      	b.n	801284e <rcl_wait_set_resize+0x122>
 80129ce:	6a28      	ldr	r0, [r5, #32]
 80129d0:	b120      	cbz	r0, 80129dc <rcl_wait_set_resize+0x2b0>
 80129d2:	4639      	mov	r1, r7
 80129d4:	47c0      	blx	r8
 80129d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80129d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129da:	622b      	str	r3, [r5, #32]
 80129dc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80129de:	2800      	cmp	r0, #0
 80129e0:	f43f af60 	beq.w	80128a4 <rcl_wait_set_resize+0x178>
 80129e4:	4639      	mov	r1, r7
 80129e6:	47c0      	blx	r8
 80129e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129ea:	2300      	movs	r3, #0
 80129ec:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80129f0:	e758      	b.n	80128a4 <rcl_wait_set_resize+0x178>
 80129f2:	009c      	lsls	r4, r3, #2
 80129f4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80129f6:	463a      	mov	r2, r7
 80129f8:	4621      	mov	r1, r4
 80129fa:	47c8      	blx	r9
 80129fc:	62a8      	str	r0, [r5, #40]	@ 0x28
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d085      	beq.n	801290e <rcl_wait_set_resize+0x1e2>
 8012a02:	4622      	mov	r2, r4
 8012a04:	4631      	mov	r1, r6
 8012a06:	f005 fdeb 	bl	80185e0 <memset>
 8012a0a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8012a0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a10:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8012a12:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012a16:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8012a1a:	463a      	mov	r2, r7
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	47c8      	blx	r9
 8012a20:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a22:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8012a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a28:	b36b      	cbz	r3, 8012a86 <rcl_wait_set_resize+0x35a>
 8012a2a:	4622      	mov	r2, r4
 8012a2c:	4631      	mov	r1, r6
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f005 fdd6 	bl	80185e0 <memset>
 8012a34:	4630      	mov	r0, r6
 8012a36:	b003      	add	sp, #12
 8012a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a3c:	200b      	movs	r0, #11
 8012a3e:	4770      	bx	lr
 8012a40:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012a44:	e764      	b.n	8012910 <rcl_wait_set_resize+0x1e4>
 8012a46:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a48:	68a8      	ldr	r0, [r5, #8]
 8012a4a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a4e:	4798      	blx	r3
 8012a50:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a52:	6928      	ldr	r0, [r5, #16]
 8012a54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012a56:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012a58:	f8c5 900c 	str.w	r9, [r5, #12]
 8012a5c:	f8c5 9008 	str.w	r9, [r5, #8]
 8012a60:	4790      	blx	r2
 8012a62:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8012a66:	200a      	movs	r0, #10
 8012a68:	e752      	b.n	8012910 <rcl_wait_set_resize+0x1e4>
 8012a6a:	69a8      	ldr	r0, [r5, #24]
 8012a6c:	4649      	mov	r1, r9
 8012a6e:	47d0      	blx	sl
 8012a70:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8012a74:	200a      	movs	r0, #10
 8012a76:	e74b      	b.n	8012910 <rcl_wait_set_resize+0x1e4>
 8012a78:	6a28      	ldr	r0, [r5, #32]
 8012a7a:	4639      	mov	r1, r7
 8012a7c:	47c0      	blx	r8
 8012a7e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8012a82:	200a      	movs	r0, #10
 8012a84:	e744      	b.n	8012910 <rcl_wait_set_resize+0x1e4>
 8012a86:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012a88:	9301      	str	r3, [sp, #4]
 8012a8a:	4639      	mov	r1, r7
 8012a8c:	47c0      	blx	r8
 8012a8e:	9b01      	ldr	r3, [sp, #4]
 8012a90:	200a      	movs	r0, #10
 8012a92:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012a96:	e73b      	b.n	8012910 <rcl_wait_set_resize+0x1e4>

08012a98 <rcl_wait_set_init>:
 8012a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a9c:	b084      	sub	sp, #16
 8012a9e:	4604      	mov	r4, r0
 8012aa0:	a810      	add	r0, sp, #64	@ 0x40
 8012aa2:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8012aa6:	460f      	mov	r7, r1
 8012aa8:	4690      	mov	r8, r2
 8012aaa:	4699      	mov	r9, r3
 8012aac:	f7fa f80c 	bl	800cac8 <rcutils_allocator_is_valid>
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	d06b      	beq.n	8012b8c <rcl_wait_set_init+0xf4>
 8012ab4:	2c00      	cmp	r4, #0
 8012ab6:	d069      	beq.n	8012b8c <rcl_wait_set_init+0xf4>
 8012ab8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012aba:	b125      	cbz	r5, 8012ac6 <rcl_wait_set_init+0x2e>
 8012abc:	2564      	movs	r5, #100	@ 0x64
 8012abe:	4628      	mov	r0, r5
 8012ac0:	b004      	add	sp, #16
 8012ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ac6:	f1ba 0f00 	cmp.w	sl, #0
 8012aca:	d05f      	beq.n	8012b8c <rcl_wait_set_init+0xf4>
 8012acc:	4650      	mov	r0, sl
 8012ace:	f7fe fb3f 	bl	8011150 <rcl_context_is_valid>
 8012ad2:	2800      	cmp	r0, #0
 8012ad4:	d067      	beq.n	8012ba6 <rcl_wait_set_init+0x10e>
 8012ad6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012ad8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012ada:	205c      	movs	r0, #92	@ 0x5c
 8012adc:	4798      	blx	r3
 8012ade:	6320      	str	r0, [r4, #48]	@ 0x30
 8012ae0:	2800      	cmp	r0, #0
 8012ae2:	d062      	beq.n	8012baa <rcl_wait_set_init+0x112>
 8012ae4:	4629      	mov	r1, r5
 8012ae6:	225c      	movs	r2, #92	@ 0x5c
 8012ae8:	f005 fd7a 	bl	80185e0 <memset>
 8012aec:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8012af0:	eb03 0e02 	add.w	lr, r3, r2
 8012af4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012af6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8012af8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012afc:	449e      	add	lr, r3
 8012afe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b02:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012b06:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8012b0a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8012b0e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8012b12:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8012b16:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8012b1a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8012b1e:	f8da a000 	ldr.w	sl, [sl]
 8012b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b24:	44c6      	add	lr, r8
 8012b26:	f8dc 3000 	ldr.w	r3, [ip]
 8012b2a:	602b      	str	r3, [r5, #0]
 8012b2c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8012b30:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8012b34:	f002 fe6c 	bl	8015810 <rmw_create_wait_set>
 8012b38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b3a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8012b3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012b3e:	b350      	cbz	r0, 8012b96 <rcl_wait_set_init+0xfe>
 8012b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b42:	9302      	str	r3, [sp, #8]
 8012b44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b46:	9301      	str	r3, [sp, #4]
 8012b48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b4a:	9300      	str	r3, [sp, #0]
 8012b4c:	4642      	mov	r2, r8
 8012b4e:	464b      	mov	r3, r9
 8012b50:	4639      	mov	r1, r7
 8012b52:	4620      	mov	r0, r4
 8012b54:	f7ff fdea 	bl	801272c <rcl_wait_set_resize>
 8012b58:	4605      	mov	r5, r0
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	d0af      	beq.n	8012abe <rcl_wait_set_init+0x26>
 8012b5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b60:	bb2b      	cbnz	r3, 8012bae <rcl_wait_set_init+0x116>
 8012b62:	2600      	movs	r6, #0
 8012b64:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012b68:	9600      	str	r6, [sp, #0]
 8012b6a:	4633      	mov	r3, r6
 8012b6c:	4632      	mov	r2, r6
 8012b6e:	4631      	mov	r1, r6
 8012b70:	4620      	mov	r0, r4
 8012b72:	f7ff fddb 	bl	801272c <rcl_wait_set_resize>
 8012b76:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	d0a0      	beq.n	8012abe <rcl_wait_set_init+0x26>
 8012b7c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8012b7e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8012b80:	4798      	blx	r3
 8012b82:	4628      	mov	r0, r5
 8012b84:	6326      	str	r6, [r4, #48]	@ 0x30
 8012b86:	b004      	add	sp, #16
 8012b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b8c:	250b      	movs	r5, #11
 8012b8e:	4628      	mov	r0, r5
 8012b90:	b004      	add	sp, #16
 8012b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b96:	2501      	movs	r5, #1
 8012b98:	f002 fe44 	bl	8015824 <rmw_destroy_wait_set>
 8012b9c:	2800      	cmp	r0, #0
 8012b9e:	bf18      	it	ne
 8012ba0:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8012ba4:	e7dd      	b.n	8012b62 <rcl_wait_set_init+0xca>
 8012ba6:	2565      	movs	r5, #101	@ 0x65
 8012ba8:	e789      	b.n	8012abe <rcl_wait_set_init+0x26>
 8012baa:	250a      	movs	r5, #10
 8012bac:	e787      	b.n	8012abe <rcl_wait_set_init+0x26>
 8012bae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012bb0:	e7f2      	b.n	8012b98 <rcl_wait_set_init+0x100>
 8012bb2:	bf00      	nop

08012bb4 <rcl_wait_set_add_guard_condition>:
 8012bb4:	b318      	cbz	r0, 8012bfe <rcl_wait_set_add_guard_condition+0x4a>
 8012bb6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012bb8:	b570      	push	{r4, r5, r6, lr}
 8012bba:	4604      	mov	r4, r0
 8012bbc:	b30b      	cbz	r3, 8012c02 <rcl_wait_set_add_guard_condition+0x4e>
 8012bbe:	b319      	cbz	r1, 8012c08 <rcl_wait_set_add_guard_condition+0x54>
 8012bc0:	68dd      	ldr	r5, [r3, #12]
 8012bc2:	68c0      	ldr	r0, [r0, #12]
 8012bc4:	4285      	cmp	r5, r0
 8012bc6:	d217      	bcs.n	8012bf8 <rcl_wait_set_add_guard_condition+0x44>
 8012bc8:	68a0      	ldr	r0, [r4, #8]
 8012bca:	1c6e      	adds	r6, r5, #1
 8012bcc:	60de      	str	r6, [r3, #12]
 8012bce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012bd2:	b102      	cbz	r2, 8012bd6 <rcl_wait_set_add_guard_condition+0x22>
 8012bd4:	6015      	str	r5, [r2, #0]
 8012bd6:	4608      	mov	r0, r1
 8012bd8:	f004 fd4c 	bl	8017674 <rcl_guard_condition_get_rmw_handle>
 8012bdc:	b150      	cbz	r0, 8012bf4 <rcl_wait_set_add_guard_condition+0x40>
 8012bde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012be0:	6842      	ldr	r2, [r0, #4]
 8012be2:	695b      	ldr	r3, [r3, #20]
 8012be4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012be8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012bea:	6913      	ldr	r3, [r2, #16]
 8012bec:	3301      	adds	r3, #1
 8012bee:	2000      	movs	r0, #0
 8012bf0:	6113      	str	r3, [r2, #16]
 8012bf2:	bd70      	pop	{r4, r5, r6, pc}
 8012bf4:	2001      	movs	r0, #1
 8012bf6:	bd70      	pop	{r4, r5, r6, pc}
 8012bf8:	f240 3086 	movw	r0, #902	@ 0x386
 8012bfc:	bd70      	pop	{r4, r5, r6, pc}
 8012bfe:	200b      	movs	r0, #11
 8012c00:	4770      	bx	lr
 8012c02:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012c06:	bd70      	pop	{r4, r5, r6, pc}
 8012c08:	200b      	movs	r0, #11
 8012c0a:	bd70      	pop	{r4, r5, r6, pc}

08012c0c <rcl_wait_set_add_timer>:
 8012c0c:	b328      	cbz	r0, 8012c5a <rcl_wait_set_add_timer+0x4e>
 8012c0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c10:	b570      	push	{r4, r5, r6, lr}
 8012c12:	4604      	mov	r4, r0
 8012c14:	b31b      	cbz	r3, 8012c5e <rcl_wait_set_add_timer+0x52>
 8012c16:	b329      	cbz	r1, 8012c64 <rcl_wait_set_add_timer+0x58>
 8012c18:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8012c1a:	6965      	ldr	r5, [r4, #20]
 8012c1c:	42a8      	cmp	r0, r5
 8012c1e:	d219      	bcs.n	8012c54 <rcl_wait_set_add_timer+0x48>
 8012c20:	6925      	ldr	r5, [r4, #16]
 8012c22:	1c46      	adds	r6, r0, #1
 8012c24:	641e      	str	r6, [r3, #64]	@ 0x40
 8012c26:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8012c2a:	b102      	cbz	r2, 8012c2e <rcl_wait_set_add_timer+0x22>
 8012c2c:	6010      	str	r0, [r2, #0]
 8012c2e:	4608      	mov	r0, r1
 8012c30:	f7ff fba6 	bl	8012380 <rcl_timer_get_guard_condition>
 8012c34:	b168      	cbz	r0, 8012c52 <rcl_wait_set_add_timer+0x46>
 8012c36:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012c38:	68e3      	ldr	r3, [r4, #12]
 8012c3a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8012c3c:	3b01      	subs	r3, #1
 8012c3e:	441d      	add	r5, r3
 8012c40:	f004 fd18 	bl	8017674 <rcl_guard_condition_get_rmw_handle>
 8012c44:	b180      	cbz	r0, 8012c68 <rcl_wait_set_add_timer+0x5c>
 8012c46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012c48:	6842      	ldr	r2, [r0, #4]
 8012c4a:	695b      	ldr	r3, [r3, #20]
 8012c4c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c50:	2000      	movs	r0, #0
 8012c52:	bd70      	pop	{r4, r5, r6, pc}
 8012c54:	f240 3086 	movw	r0, #902	@ 0x386
 8012c58:	bd70      	pop	{r4, r5, r6, pc}
 8012c5a:	200b      	movs	r0, #11
 8012c5c:	4770      	bx	lr
 8012c5e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012c62:	bd70      	pop	{r4, r5, r6, pc}
 8012c64:	200b      	movs	r0, #11
 8012c66:	bd70      	pop	{r4, r5, r6, pc}
 8012c68:	2001      	movs	r0, #1
 8012c6a:	bd70      	pop	{r4, r5, r6, pc}

08012c6c <rcl_wait_set_add_client>:
 8012c6c:	b318      	cbz	r0, 8012cb6 <rcl_wait_set_add_client+0x4a>
 8012c6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c70:	b570      	push	{r4, r5, r6, lr}
 8012c72:	4604      	mov	r4, r0
 8012c74:	b30b      	cbz	r3, 8012cba <rcl_wait_set_add_client+0x4e>
 8012c76:	b319      	cbz	r1, 8012cc0 <rcl_wait_set_add_client+0x54>
 8012c78:	699d      	ldr	r5, [r3, #24]
 8012c7a:	69c0      	ldr	r0, [r0, #28]
 8012c7c:	4285      	cmp	r5, r0
 8012c7e:	d217      	bcs.n	8012cb0 <rcl_wait_set_add_client+0x44>
 8012c80:	69a0      	ldr	r0, [r4, #24]
 8012c82:	1c6e      	adds	r6, r5, #1
 8012c84:	619e      	str	r6, [r3, #24]
 8012c86:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012c8a:	b102      	cbz	r2, 8012c8e <rcl_wait_set_add_client+0x22>
 8012c8c:	6015      	str	r5, [r2, #0]
 8012c8e:	4608      	mov	r0, r1
 8012c90:	f7fe f9b2 	bl	8010ff8 <rcl_client_get_rmw_handle>
 8012c94:	b150      	cbz	r0, 8012cac <rcl_wait_set_add_client+0x40>
 8012c96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012c98:	6842      	ldr	r2, [r0, #4]
 8012c9a:	6a1b      	ldr	r3, [r3, #32]
 8012c9c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ca0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012ca2:	69d3      	ldr	r3, [r2, #28]
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	2000      	movs	r0, #0
 8012ca8:	61d3      	str	r3, [r2, #28]
 8012caa:	bd70      	pop	{r4, r5, r6, pc}
 8012cac:	2001      	movs	r0, #1
 8012cae:	bd70      	pop	{r4, r5, r6, pc}
 8012cb0:	f240 3086 	movw	r0, #902	@ 0x386
 8012cb4:	bd70      	pop	{r4, r5, r6, pc}
 8012cb6:	200b      	movs	r0, #11
 8012cb8:	4770      	bx	lr
 8012cba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012cbe:	bd70      	pop	{r4, r5, r6, pc}
 8012cc0:	200b      	movs	r0, #11
 8012cc2:	bd70      	pop	{r4, r5, r6, pc}

08012cc4 <rcl_wait_set_add_service>:
 8012cc4:	b318      	cbz	r0, 8012d0e <rcl_wait_set_add_service+0x4a>
 8012cc6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012cc8:	b570      	push	{r4, r5, r6, lr}
 8012cca:	4604      	mov	r4, r0
 8012ccc:	b30b      	cbz	r3, 8012d12 <rcl_wait_set_add_service+0x4e>
 8012cce:	b319      	cbz	r1, 8012d18 <rcl_wait_set_add_service+0x54>
 8012cd0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8012cd2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012cd4:	4285      	cmp	r5, r0
 8012cd6:	d217      	bcs.n	8012d08 <rcl_wait_set_add_service+0x44>
 8012cd8:	6a20      	ldr	r0, [r4, #32]
 8012cda:	1c6e      	adds	r6, r5, #1
 8012cdc:	625e      	str	r6, [r3, #36]	@ 0x24
 8012cde:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012ce2:	b102      	cbz	r2, 8012ce6 <rcl_wait_set_add_service+0x22>
 8012ce4:	6015      	str	r5, [r2, #0]
 8012ce6:	4608      	mov	r0, r1
 8012ce8:	f7ff f804 	bl	8011cf4 <rcl_service_get_rmw_handle>
 8012cec:	b150      	cbz	r0, 8012d04 <rcl_wait_set_add_service+0x40>
 8012cee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012cf0:	6842      	ldr	r2, [r0, #4]
 8012cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cf4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012cf8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012cfa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8012cfc:	3301      	adds	r3, #1
 8012cfe:	2000      	movs	r0, #0
 8012d00:	6293      	str	r3, [r2, #40]	@ 0x28
 8012d02:	bd70      	pop	{r4, r5, r6, pc}
 8012d04:	2001      	movs	r0, #1
 8012d06:	bd70      	pop	{r4, r5, r6, pc}
 8012d08:	f240 3086 	movw	r0, #902	@ 0x386
 8012d0c:	bd70      	pop	{r4, r5, r6, pc}
 8012d0e:	200b      	movs	r0, #11
 8012d10:	4770      	bx	lr
 8012d12:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012d16:	bd70      	pop	{r4, r5, r6, pc}
 8012d18:	200b      	movs	r0, #11
 8012d1a:	bd70      	pop	{r4, r5, r6, pc}
 8012d1c:	0000      	movs	r0, r0
	...

08012d20 <rcl_wait>:
 8012d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d24:	ed2d 8b02 	vpush	{d8}
 8012d28:	b08d      	sub	sp, #52	@ 0x34
 8012d2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	f000 8143 	beq.w	8012fba <rcl_wait+0x29a>
 8012d34:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012d36:	4605      	mov	r5, r0
 8012d38:	2e00      	cmp	r6, #0
 8012d3a:	f000 8112 	beq.w	8012f62 <rcl_wait+0x242>
 8012d3e:	6843      	ldr	r3, [r0, #4]
 8012d40:	b983      	cbnz	r3, 8012d64 <rcl_wait+0x44>
 8012d42:	68eb      	ldr	r3, [r5, #12]
 8012d44:	b973      	cbnz	r3, 8012d64 <rcl_wait+0x44>
 8012d46:	696b      	ldr	r3, [r5, #20]
 8012d48:	b963      	cbnz	r3, 8012d64 <rcl_wait+0x44>
 8012d4a:	69eb      	ldr	r3, [r5, #28]
 8012d4c:	b953      	cbnz	r3, 8012d64 <rcl_wait+0x44>
 8012d4e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012d50:	b943      	cbnz	r3, 8012d64 <rcl_wait+0x44>
 8012d52:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8012d54:	b933      	cbnz	r3, 8012d64 <rcl_wait+0x44>
 8012d56:	f240 3085 	movw	r0, #901	@ 0x385
 8012d5a:	b00d      	add	sp, #52	@ 0x34
 8012d5c:	ecbd 8b02 	vpop	{d8}
 8012d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d64:	9b04      	ldr	r3, [sp, #16]
 8012d66:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8012d68:	2b01      	cmp	r3, #1
 8012d6a:	9b05      	ldr	r3, [sp, #20]
 8012d6c:	f173 0300 	sbcs.w	r3, r3, #0
 8012d70:	f2c0 80f0 	blt.w	8012f54 <rcl_wait+0x234>
 8012d74:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012d78:	4643      	mov	r3, r8
 8012d7a:	2a00      	cmp	r2, #0
 8012d7c:	f000 8133 	beq.w	8012fe6 <rcl_wait+0x2c6>
 8012d80:	2400      	movs	r4, #0
 8012d82:	4613      	mov	r3, r2
 8012d84:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8012ff8 <rcl_wait+0x2d8>
 8012d88:	46a2      	mov	sl, r4
 8012d8a:	46a3      	mov	fp, r4
 8012d8c:	f240 3921 	movw	r9, #801	@ 0x321
 8012d90:	4632      	mov	r2, r6
 8012d92:	e014      	b.n	8012dbe <rcl_wait+0x9e>
 8012d94:	2800      	cmp	r0, #0
 8012d96:	d1e0      	bne.n	8012d5a <rcl_wait+0x3a>
 8012d98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012d9c:	4542      	cmp	r2, r8
 8012d9e:	eb73 0107 	sbcs.w	r1, r3, r7
 8012da2:	da03      	bge.n	8012dac <rcl_wait+0x8c>
 8012da4:	4690      	mov	r8, r2
 8012da6:	461f      	mov	r7, r3
 8012da8:	f04f 0b01 	mov.w	fp, #1
 8012dac:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012dae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012db0:	3401      	adds	r4, #1
 8012db2:	f14a 0a00 	adc.w	sl, sl, #0
 8012db6:	429c      	cmp	r4, r3
 8012db8:	f17a 0100 	sbcs.w	r1, sl, #0
 8012dbc:	d228      	bcs.n	8012e10 <rcl_wait+0xf0>
 8012dbe:	6928      	ldr	r0, [r5, #16]
 8012dc0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012dc4:	a908      	add	r1, sp, #32
 8012dc6:	00a6      	lsls	r6, r4, #2
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	d0f1      	beq.n	8012db0 <rcl_wait+0x90>
 8012dcc:	68eb      	ldr	r3, [r5, #12]
 8012dce:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8012dd2:	4423      	add	r3, r4
 8012dd4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8012dd8:	f1be 0f00 	cmp.w	lr, #0
 8012ddc:	d006      	beq.n	8012dec <rcl_wait+0xcc>
 8012dde:	6913      	ldr	r3, [r2, #16]
 8012de0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8012de4:	3301      	adds	r3, #1
 8012de6:	6113      	str	r3, [r2, #16]
 8012de8:	692b      	ldr	r3, [r5, #16]
 8012dea:	5998      	ldr	r0, [r3, r6]
 8012dec:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012df0:	f7ff fa94 	bl	801231c <rcl_timer_get_time_until_next_call>
 8012df4:	4548      	cmp	r0, r9
 8012df6:	d1cd      	bne.n	8012d94 <rcl_wait+0x74>
 8012df8:	692b      	ldr	r3, [r5, #16]
 8012dfa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012dfc:	2100      	movs	r1, #0
 8012dfe:	5199      	str	r1, [r3, r6]
 8012e00:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012e02:	3401      	adds	r4, #1
 8012e04:	f14a 0a00 	adc.w	sl, sl, #0
 8012e08:	429c      	cmp	r4, r3
 8012e0a:	f17a 0100 	sbcs.w	r1, sl, #0
 8012e0e:	d3d6      	bcc.n	8012dbe <rcl_wait+0x9e>
 8012e10:	4616      	mov	r6, r2
 8012e12:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012e16:	4313      	orrs	r3, r2
 8012e18:	46d9      	mov	r9, fp
 8012e1a:	f040 80a9 	bne.w	8012f70 <rcl_wait+0x250>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	2200      	movs	r2, #0
 8012e22:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e26:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012e2a:	ab08      	add	r3, sp, #32
 8012e2c:	9302      	str	r3, [sp, #8]
 8012e2e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8012e30:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8012e34:	e9cd 3200 	strd	r3, r2, [sp]
 8012e38:	f106 0110 	add.w	r1, r6, #16
 8012e3c:	f106 031c 	add.w	r3, r6, #28
 8012e40:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8012e44:	1d30      	adds	r0, r6, #4
 8012e46:	f002 fb6b 	bl	8015520 <rmw_wait>
 8012e4a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012e4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012e4e:	4680      	mov	r8, r0
 8012e50:	b1ca      	cbz	r2, 8012e86 <rcl_wait+0x166>
 8012e52:	2400      	movs	r4, #0
 8012e54:	4627      	mov	r7, r4
 8012e56:	692a      	ldr	r2, [r5, #16]
 8012e58:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8012e5c:	f10d 011f 	add.w	r1, sp, #31
 8012e60:	00a6      	lsls	r6, r4, #2
 8012e62:	b160      	cbz	r0, 8012e7e <rcl_wait+0x15e>
 8012e64:	f88d 701f 	strb.w	r7, [sp, #31]
 8012e68:	f7ff fa1e 	bl	80122a8 <rcl_timer_is_ready>
 8012e6c:	2800      	cmp	r0, #0
 8012e6e:	f47f af74 	bne.w	8012d5a <rcl_wait+0x3a>
 8012e72:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012e76:	b90b      	cbnz	r3, 8012e7c <rcl_wait+0x15c>
 8012e78:	692a      	ldr	r2, [r5, #16]
 8012e7a:	5193      	str	r3, [r2, r6]
 8012e7c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012e7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012e80:	3401      	adds	r4, #1
 8012e82:	42a2      	cmp	r2, r4
 8012e84:	d8e7      	bhi.n	8012e56 <rcl_wait+0x136>
 8012e86:	f038 0002 	bics.w	r0, r8, #2
 8012e8a:	f040 8090 	bne.w	8012fae <rcl_wait+0x28e>
 8012e8e:	686e      	ldr	r6, [r5, #4]
 8012e90:	4602      	mov	r2, r0
 8012e92:	b91e      	cbnz	r6, 8012e9c <rcl_wait+0x17c>
 8012e94:	e00d      	b.n	8012eb2 <rcl_wait+0x192>
 8012e96:	3201      	adds	r2, #1
 8012e98:	42b2      	cmp	r2, r6
 8012e9a:	d00a      	beq.n	8012eb2 <rcl_wait+0x192>
 8012e9c:	6899      	ldr	r1, [r3, #8]
 8012e9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012ea2:	2900      	cmp	r1, #0
 8012ea4:	d1f7      	bne.n	8012e96 <rcl_wait+0x176>
 8012ea6:	682c      	ldr	r4, [r5, #0]
 8012ea8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012eac:	3201      	adds	r2, #1
 8012eae:	42b2      	cmp	r2, r6
 8012eb0:	d1f4      	bne.n	8012e9c <rcl_wait+0x17c>
 8012eb2:	68ee      	ldr	r6, [r5, #12]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	b91e      	cbnz	r6, 8012ec0 <rcl_wait+0x1a0>
 8012eb8:	e00d      	b.n	8012ed6 <rcl_wait+0x1b6>
 8012eba:	3201      	adds	r2, #1
 8012ebc:	42b2      	cmp	r2, r6
 8012ebe:	d00a      	beq.n	8012ed6 <rcl_wait+0x1b6>
 8012ec0:	6959      	ldr	r1, [r3, #20]
 8012ec2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012ec6:	2900      	cmp	r1, #0
 8012ec8:	d1f7      	bne.n	8012eba <rcl_wait+0x19a>
 8012eca:	68ac      	ldr	r4, [r5, #8]
 8012ecc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012ed0:	3201      	adds	r2, #1
 8012ed2:	42b2      	cmp	r2, r6
 8012ed4:	d1f4      	bne.n	8012ec0 <rcl_wait+0x1a0>
 8012ed6:	69ee      	ldr	r6, [r5, #28]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	b91e      	cbnz	r6, 8012ee4 <rcl_wait+0x1c4>
 8012edc:	e00d      	b.n	8012efa <rcl_wait+0x1da>
 8012ede:	3201      	adds	r2, #1
 8012ee0:	42b2      	cmp	r2, r6
 8012ee2:	d00a      	beq.n	8012efa <rcl_wait+0x1da>
 8012ee4:	6a19      	ldr	r1, [r3, #32]
 8012ee6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012eea:	2900      	cmp	r1, #0
 8012eec:	d1f7      	bne.n	8012ede <rcl_wait+0x1be>
 8012eee:	69ac      	ldr	r4, [r5, #24]
 8012ef0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012ef4:	3201      	adds	r2, #1
 8012ef6:	42b2      	cmp	r2, r6
 8012ef8:	d1f4      	bne.n	8012ee4 <rcl_wait+0x1c4>
 8012efa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8012efc:	2200      	movs	r2, #0
 8012efe:	b91e      	cbnz	r6, 8012f08 <rcl_wait+0x1e8>
 8012f00:	e00d      	b.n	8012f1e <rcl_wait+0x1fe>
 8012f02:	3201      	adds	r2, #1
 8012f04:	4296      	cmp	r6, r2
 8012f06:	d00a      	beq.n	8012f1e <rcl_wait+0x1fe>
 8012f08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012f0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012f0e:	2900      	cmp	r1, #0
 8012f10:	d1f7      	bne.n	8012f02 <rcl_wait+0x1e2>
 8012f12:	6a2c      	ldr	r4, [r5, #32]
 8012f14:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012f18:	3201      	adds	r2, #1
 8012f1a:	4296      	cmp	r6, r2
 8012f1c:	d1f4      	bne.n	8012f08 <rcl_wait+0x1e8>
 8012f1e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8012f20:	2200      	movs	r2, #0
 8012f22:	b91e      	cbnz	r6, 8012f2c <rcl_wait+0x20c>
 8012f24:	e00d      	b.n	8012f42 <rcl_wait+0x222>
 8012f26:	3201      	adds	r2, #1
 8012f28:	42b2      	cmp	r2, r6
 8012f2a:	d00a      	beq.n	8012f42 <rcl_wait+0x222>
 8012f2c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012f2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012f32:	2900      	cmp	r1, #0
 8012f34:	d1f7      	bne.n	8012f26 <rcl_wait+0x206>
 8012f36:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8012f38:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012f3c:	3201      	adds	r2, #1
 8012f3e:	42b2      	cmp	r2, r6
 8012f40:	d1f4      	bne.n	8012f2c <rcl_wait+0x20c>
 8012f42:	f1b8 0f02 	cmp.w	r8, #2
 8012f46:	f47f af08 	bne.w	8012d5a <rcl_wait+0x3a>
 8012f4a:	464b      	mov	r3, r9
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	bf08      	it	eq
 8012f50:	2002      	moveq	r0, #2
 8012f52:	e702      	b.n	8012d5a <rcl_wait+0x3a>
 8012f54:	2a00      	cmp	r2, #0
 8012f56:	d03a      	beq.n	8012fce <rcl_wait+0x2ae>
 8012f58:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012f5c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012f60:	e70e      	b.n	8012d80 <rcl_wait+0x60>
 8012f62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012f66:	b00d      	add	sp, #52	@ 0x34
 8012f68:	ecbd 8b02 	vpop	{d8}
 8012f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f70:	9b04      	ldr	r3, [sp, #16]
 8012f72:	2b01      	cmp	r3, #1
 8012f74:	9b05      	ldr	r3, [sp, #20]
 8012f76:	f173 0300 	sbcs.w	r3, r3, #0
 8012f7a:	db24      	blt.n	8012fc6 <rcl_wait+0x2a6>
 8012f7c:	2f00      	cmp	r7, #0
 8012f7e:	bfbc      	itt	lt
 8012f80:	f04f 0800 	movlt.w	r8, #0
 8012f84:	4647      	movlt	r7, r8
 8012f86:	a31e      	add	r3, pc, #120	@ (adr r3, 8013000 <rcl_wait+0x2e0>)
 8012f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8c:	4640      	mov	r0, r8
 8012f8e:	4639      	mov	r1, r7
 8012f90:	f7ed fe2c 	bl	8000bec <__aeabi_ldivmod>
 8012f94:	a31a      	add	r3, pc, #104	@ (adr r3, 8013000 <rcl_wait+0x2e0>)
 8012f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012f9e:	4640      	mov	r0, r8
 8012fa0:	4639      	mov	r1, r7
 8012fa2:	f7ed fe23 	bl	8000bec <__aeabi_ldivmod>
 8012fa6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012faa:	ab08      	add	r3, sp, #32
 8012fac:	e73e      	b.n	8012e2c <rcl_wait+0x10c>
 8012fae:	2001      	movs	r0, #1
 8012fb0:	b00d      	add	sp, #52	@ 0x34
 8012fb2:	ecbd 8b02 	vpop	{d8}
 8012fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fba:	200b      	movs	r0, #11
 8012fbc:	b00d      	add	sp, #52	@ 0x34
 8012fbe:	ecbd 8b02 	vpop	{d8}
 8012fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc6:	465b      	mov	r3, fp
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d1d7      	bne.n	8012f7c <rcl_wait+0x25c>
 8012fcc:	e72e      	b.n	8012e2c <rcl_wait+0x10c>
 8012fce:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012fd2:	430b      	orrs	r3, r1
 8012fd4:	bf08      	it	eq
 8012fd6:	4691      	moveq	r9, r2
 8012fd8:	f43f af21 	beq.w	8012e1e <rcl_wait+0xfe>
 8012fdc:	9b04      	ldr	r3, [sp, #16]
 8012fde:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012fe2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012fe6:	2b01      	cmp	r3, #1
 8012fe8:	9b05      	ldr	r3, [sp, #20]
 8012fea:	f173 0300 	sbcs.w	r3, r3, #0
 8012fee:	f04f 0300 	mov.w	r3, #0
 8012ff2:	4699      	mov	r9, r3
 8012ff4:	dac2      	bge.n	8012f7c <rcl_wait+0x25c>
 8012ff6:	e719      	b.n	8012e2c <rcl_wait+0x10c>
 8012ff8:	ffffffff 	.word	0xffffffff
 8012ffc:	7fffffff 	.word	0x7fffffff
 8013000:	3b9aca00 	.word	0x3b9aca00
 8013004:	00000000 	.word	0x00000000

08013008 <rcl_action_take_goal_response>:
 8013008:	2800      	cmp	r0, #0
 801300a:	d039      	beq.n	8013080 <rcl_action_take_goal_response+0x78>
 801300c:	b570      	push	{r4, r5, r6, lr}
 801300e:	4604      	mov	r4, r0
 8013010:	6800      	ldr	r0, [r0, #0]
 8013012:	b380      	cbz	r0, 8013076 <rcl_action_take_goal_response+0x6e>
 8013014:	460d      	mov	r5, r1
 8013016:	4616      	mov	r6, r2
 8013018:	f7fe f872 	bl	8011100 <rcl_client_is_valid>
 801301c:	b330      	cbz	r0, 801306c <rcl_action_take_goal_response+0x64>
 801301e:	6820      	ldr	r0, [r4, #0]
 8013020:	3004      	adds	r0, #4
 8013022:	f7fe f86d 	bl	8011100 <rcl_client_is_valid>
 8013026:	b308      	cbz	r0, 801306c <rcl_action_take_goal_response+0x64>
 8013028:	6820      	ldr	r0, [r4, #0]
 801302a:	3008      	adds	r0, #8
 801302c:	f7fe f868 	bl	8011100 <rcl_client_is_valid>
 8013030:	b1e0      	cbz	r0, 801306c <rcl_action_take_goal_response+0x64>
 8013032:	6820      	ldr	r0, [r4, #0]
 8013034:	300c      	adds	r0, #12
 8013036:	f7fe ffff 	bl	8012038 <rcl_subscription_is_valid>
 801303a:	b1b8      	cbz	r0, 801306c <rcl_action_take_goal_response+0x64>
 801303c:	6820      	ldr	r0, [r4, #0]
 801303e:	3010      	adds	r0, #16
 8013040:	f7fe fffa 	bl	8012038 <rcl_subscription_is_valid>
 8013044:	b190      	cbz	r0, 801306c <rcl_action_take_goal_response+0x64>
 8013046:	b1cd      	cbz	r5, 801307c <rcl_action_take_goal_response+0x74>
 8013048:	b1c6      	cbz	r6, 801307c <rcl_action_take_goal_response+0x74>
 801304a:	6820      	ldr	r0, [r4, #0]
 801304c:	4632      	mov	r2, r6
 801304e:	4629      	mov	r1, r5
 8013050:	f7fe f80e 	bl	8011070 <rcl_take_response>
 8013054:	b148      	cbz	r0, 801306a <rcl_action_take_goal_response+0x62>
 8013056:	280a      	cmp	r0, #10
 8013058:	d007      	beq.n	801306a <rcl_action_take_goal_response+0x62>
 801305a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801305e:	f640 0337 	movw	r3, #2103	@ 0x837
 8013062:	4290      	cmp	r0, r2
 8013064:	bf0c      	ite	eq
 8013066:	4618      	moveq	r0, r3
 8013068:	2001      	movne	r0, #1
 801306a:	bd70      	pop	{r4, r5, r6, pc}
 801306c:	f7f9 fd50 	bl	800cb10 <rcutils_reset_error>
 8013070:	f640 0036 	movw	r0, #2102	@ 0x836
 8013074:	bd70      	pop	{r4, r5, r6, pc}
 8013076:	f640 0036 	movw	r0, #2102	@ 0x836
 801307a:	bd70      	pop	{r4, r5, r6, pc}
 801307c:	200b      	movs	r0, #11
 801307e:	bd70      	pop	{r4, r5, r6, pc}
 8013080:	f640 0036 	movw	r0, #2102	@ 0x836
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop

08013088 <rcl_action_send_result_request>:
 8013088:	b390      	cbz	r0, 80130f0 <rcl_action_send_result_request+0x68>
 801308a:	b570      	push	{r4, r5, r6, lr}
 801308c:	4604      	mov	r4, r0
 801308e:	6800      	ldr	r0, [r0, #0]
 8013090:	b348      	cbz	r0, 80130e6 <rcl_action_send_result_request+0x5e>
 8013092:	460d      	mov	r5, r1
 8013094:	4616      	mov	r6, r2
 8013096:	f7fe f833 	bl	8011100 <rcl_client_is_valid>
 801309a:	b1f8      	cbz	r0, 80130dc <rcl_action_send_result_request+0x54>
 801309c:	6820      	ldr	r0, [r4, #0]
 801309e:	3004      	adds	r0, #4
 80130a0:	f7fe f82e 	bl	8011100 <rcl_client_is_valid>
 80130a4:	b1d0      	cbz	r0, 80130dc <rcl_action_send_result_request+0x54>
 80130a6:	6820      	ldr	r0, [r4, #0]
 80130a8:	3008      	adds	r0, #8
 80130aa:	f7fe f829 	bl	8011100 <rcl_client_is_valid>
 80130ae:	b1a8      	cbz	r0, 80130dc <rcl_action_send_result_request+0x54>
 80130b0:	6820      	ldr	r0, [r4, #0]
 80130b2:	300c      	adds	r0, #12
 80130b4:	f7fe ffc0 	bl	8012038 <rcl_subscription_is_valid>
 80130b8:	b180      	cbz	r0, 80130dc <rcl_action_send_result_request+0x54>
 80130ba:	6820      	ldr	r0, [r4, #0]
 80130bc:	3010      	adds	r0, #16
 80130be:	f7fe ffbb 	bl	8012038 <rcl_subscription_is_valid>
 80130c2:	b158      	cbz	r0, 80130dc <rcl_action_send_result_request+0x54>
 80130c4:	b195      	cbz	r5, 80130ec <rcl_action_send_result_request+0x64>
 80130c6:	b18e      	cbz	r6, 80130ec <rcl_action_send_result_request+0x64>
 80130c8:	6820      	ldr	r0, [r4, #0]
 80130ca:	4632      	mov	r2, r6
 80130cc:	4629      	mov	r1, r5
 80130ce:	3008      	adds	r0, #8
 80130d0:	f7fd ff98 	bl	8011004 <rcl_send_request>
 80130d4:	3800      	subs	r0, #0
 80130d6:	bf18      	it	ne
 80130d8:	2001      	movne	r0, #1
 80130da:	bd70      	pop	{r4, r5, r6, pc}
 80130dc:	f7f9 fd18 	bl	800cb10 <rcutils_reset_error>
 80130e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80130e4:	bd70      	pop	{r4, r5, r6, pc}
 80130e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80130ea:	bd70      	pop	{r4, r5, r6, pc}
 80130ec:	200b      	movs	r0, #11
 80130ee:	bd70      	pop	{r4, r5, r6, pc}
 80130f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80130f4:	4770      	bx	lr
 80130f6:	bf00      	nop

080130f8 <rcl_action_take_result_response>:
 80130f8:	2800      	cmp	r0, #0
 80130fa:	d03a      	beq.n	8013172 <rcl_action_take_result_response+0x7a>
 80130fc:	b570      	push	{r4, r5, r6, lr}
 80130fe:	4604      	mov	r4, r0
 8013100:	6800      	ldr	r0, [r0, #0]
 8013102:	b388      	cbz	r0, 8013168 <rcl_action_take_result_response+0x70>
 8013104:	460d      	mov	r5, r1
 8013106:	4616      	mov	r6, r2
 8013108:	f7fd fffa 	bl	8011100 <rcl_client_is_valid>
 801310c:	b338      	cbz	r0, 801315e <rcl_action_take_result_response+0x66>
 801310e:	6820      	ldr	r0, [r4, #0]
 8013110:	3004      	adds	r0, #4
 8013112:	f7fd fff5 	bl	8011100 <rcl_client_is_valid>
 8013116:	b310      	cbz	r0, 801315e <rcl_action_take_result_response+0x66>
 8013118:	6820      	ldr	r0, [r4, #0]
 801311a:	3008      	adds	r0, #8
 801311c:	f7fd fff0 	bl	8011100 <rcl_client_is_valid>
 8013120:	b1e8      	cbz	r0, 801315e <rcl_action_take_result_response+0x66>
 8013122:	6820      	ldr	r0, [r4, #0]
 8013124:	300c      	adds	r0, #12
 8013126:	f7fe ff87 	bl	8012038 <rcl_subscription_is_valid>
 801312a:	b1c0      	cbz	r0, 801315e <rcl_action_take_result_response+0x66>
 801312c:	6820      	ldr	r0, [r4, #0]
 801312e:	3010      	adds	r0, #16
 8013130:	f7fe ff82 	bl	8012038 <rcl_subscription_is_valid>
 8013134:	b198      	cbz	r0, 801315e <rcl_action_take_result_response+0x66>
 8013136:	b1d5      	cbz	r5, 801316e <rcl_action_take_result_response+0x76>
 8013138:	b1ce      	cbz	r6, 801316e <rcl_action_take_result_response+0x76>
 801313a:	6820      	ldr	r0, [r4, #0]
 801313c:	4632      	mov	r2, r6
 801313e:	4629      	mov	r1, r5
 8013140:	3008      	adds	r0, #8
 8013142:	f7fd ff95 	bl	8011070 <rcl_take_response>
 8013146:	b148      	cbz	r0, 801315c <rcl_action_take_result_response+0x64>
 8013148:	280a      	cmp	r0, #10
 801314a:	d007      	beq.n	801315c <rcl_action_take_result_response+0x64>
 801314c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013150:	f640 0337 	movw	r3, #2103	@ 0x837
 8013154:	4290      	cmp	r0, r2
 8013156:	bf0c      	ite	eq
 8013158:	4618      	moveq	r0, r3
 801315a:	2001      	movne	r0, #1
 801315c:	bd70      	pop	{r4, r5, r6, pc}
 801315e:	f7f9 fcd7 	bl	800cb10 <rcutils_reset_error>
 8013162:	f640 0036 	movw	r0, #2102	@ 0x836
 8013166:	bd70      	pop	{r4, r5, r6, pc}
 8013168:	f640 0036 	movw	r0, #2102	@ 0x836
 801316c:	bd70      	pop	{r4, r5, r6, pc}
 801316e:	200b      	movs	r0, #11
 8013170:	bd70      	pop	{r4, r5, r6, pc}
 8013172:	f640 0036 	movw	r0, #2102	@ 0x836
 8013176:	4770      	bx	lr

08013178 <rcl_action_take_cancel_response>:
 8013178:	2800      	cmp	r0, #0
 801317a:	d03a      	beq.n	80131f2 <rcl_action_take_cancel_response+0x7a>
 801317c:	b570      	push	{r4, r5, r6, lr}
 801317e:	4604      	mov	r4, r0
 8013180:	6800      	ldr	r0, [r0, #0]
 8013182:	b388      	cbz	r0, 80131e8 <rcl_action_take_cancel_response+0x70>
 8013184:	460d      	mov	r5, r1
 8013186:	4616      	mov	r6, r2
 8013188:	f7fd ffba 	bl	8011100 <rcl_client_is_valid>
 801318c:	b338      	cbz	r0, 80131de <rcl_action_take_cancel_response+0x66>
 801318e:	6820      	ldr	r0, [r4, #0]
 8013190:	3004      	adds	r0, #4
 8013192:	f7fd ffb5 	bl	8011100 <rcl_client_is_valid>
 8013196:	b310      	cbz	r0, 80131de <rcl_action_take_cancel_response+0x66>
 8013198:	6820      	ldr	r0, [r4, #0]
 801319a:	3008      	adds	r0, #8
 801319c:	f7fd ffb0 	bl	8011100 <rcl_client_is_valid>
 80131a0:	b1e8      	cbz	r0, 80131de <rcl_action_take_cancel_response+0x66>
 80131a2:	6820      	ldr	r0, [r4, #0]
 80131a4:	300c      	adds	r0, #12
 80131a6:	f7fe ff47 	bl	8012038 <rcl_subscription_is_valid>
 80131aa:	b1c0      	cbz	r0, 80131de <rcl_action_take_cancel_response+0x66>
 80131ac:	6820      	ldr	r0, [r4, #0]
 80131ae:	3010      	adds	r0, #16
 80131b0:	f7fe ff42 	bl	8012038 <rcl_subscription_is_valid>
 80131b4:	b198      	cbz	r0, 80131de <rcl_action_take_cancel_response+0x66>
 80131b6:	b1d5      	cbz	r5, 80131ee <rcl_action_take_cancel_response+0x76>
 80131b8:	b1ce      	cbz	r6, 80131ee <rcl_action_take_cancel_response+0x76>
 80131ba:	6820      	ldr	r0, [r4, #0]
 80131bc:	4632      	mov	r2, r6
 80131be:	4629      	mov	r1, r5
 80131c0:	3004      	adds	r0, #4
 80131c2:	f7fd ff55 	bl	8011070 <rcl_take_response>
 80131c6:	b148      	cbz	r0, 80131dc <rcl_action_take_cancel_response+0x64>
 80131c8:	280a      	cmp	r0, #10
 80131ca:	d007      	beq.n	80131dc <rcl_action_take_cancel_response+0x64>
 80131cc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80131d0:	f640 0337 	movw	r3, #2103	@ 0x837
 80131d4:	4290      	cmp	r0, r2
 80131d6:	bf0c      	ite	eq
 80131d8:	4618      	moveq	r0, r3
 80131da:	2001      	movne	r0, #1
 80131dc:	bd70      	pop	{r4, r5, r6, pc}
 80131de:	f7f9 fc97 	bl	800cb10 <rcutils_reset_error>
 80131e2:	f640 0036 	movw	r0, #2102	@ 0x836
 80131e6:	bd70      	pop	{r4, r5, r6, pc}
 80131e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80131ec:	bd70      	pop	{r4, r5, r6, pc}
 80131ee:	200b      	movs	r0, #11
 80131f0:	bd70      	pop	{r4, r5, r6, pc}
 80131f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80131f6:	4770      	bx	lr

080131f8 <rcl_action_take_feedback>:
 80131f8:	2800      	cmp	r0, #0
 80131fa:	d038      	beq.n	801326e <rcl_action_take_feedback+0x76>
 80131fc:	b530      	push	{r4, r5, lr}
 80131fe:	4604      	mov	r4, r0
 8013200:	6800      	ldr	r0, [r0, #0]
 8013202:	b091      	sub	sp, #68	@ 0x44
 8013204:	b378      	cbz	r0, 8013266 <rcl_action_take_feedback+0x6e>
 8013206:	460d      	mov	r5, r1
 8013208:	f7fd ff7a 	bl	8011100 <rcl_client_is_valid>
 801320c:	b328      	cbz	r0, 801325a <rcl_action_take_feedback+0x62>
 801320e:	6820      	ldr	r0, [r4, #0]
 8013210:	3004      	adds	r0, #4
 8013212:	f7fd ff75 	bl	8011100 <rcl_client_is_valid>
 8013216:	b300      	cbz	r0, 801325a <rcl_action_take_feedback+0x62>
 8013218:	6820      	ldr	r0, [r4, #0]
 801321a:	3008      	adds	r0, #8
 801321c:	f7fd ff70 	bl	8011100 <rcl_client_is_valid>
 8013220:	b1d8      	cbz	r0, 801325a <rcl_action_take_feedback+0x62>
 8013222:	6820      	ldr	r0, [r4, #0]
 8013224:	300c      	adds	r0, #12
 8013226:	f7fe ff07 	bl	8012038 <rcl_subscription_is_valid>
 801322a:	b1b0      	cbz	r0, 801325a <rcl_action_take_feedback+0x62>
 801322c:	6820      	ldr	r0, [r4, #0]
 801322e:	3010      	adds	r0, #16
 8013230:	f7fe ff02 	bl	8012038 <rcl_subscription_is_valid>
 8013234:	b188      	cbz	r0, 801325a <rcl_action_take_feedback+0x62>
 8013236:	b1ed      	cbz	r5, 8013274 <rcl_action_take_feedback+0x7c>
 8013238:	6820      	ldr	r0, [r4, #0]
 801323a:	2300      	movs	r3, #0
 801323c:	466a      	mov	r2, sp
 801323e:	4629      	mov	r1, r5
 8013240:	300c      	adds	r0, #12
 8013242:	f7fe fe9b 	bl	8011f7c <rcl_take>
 8013246:	b160      	cbz	r0, 8013262 <rcl_action_take_feedback+0x6a>
 8013248:	f240 1391 	movw	r3, #401	@ 0x191
 801324c:	4298      	cmp	r0, r3
 801324e:	d014      	beq.n	801327a <rcl_action_take_feedback+0x82>
 8013250:	280a      	cmp	r0, #10
 8013252:	bf18      	it	ne
 8013254:	2001      	movne	r0, #1
 8013256:	b011      	add	sp, #68	@ 0x44
 8013258:	bd30      	pop	{r4, r5, pc}
 801325a:	f7f9 fc59 	bl	800cb10 <rcutils_reset_error>
 801325e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013262:	b011      	add	sp, #68	@ 0x44
 8013264:	bd30      	pop	{r4, r5, pc}
 8013266:	f640 0036 	movw	r0, #2102	@ 0x836
 801326a:	b011      	add	sp, #68	@ 0x44
 801326c:	bd30      	pop	{r4, r5, pc}
 801326e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013272:	4770      	bx	lr
 8013274:	200b      	movs	r0, #11
 8013276:	b011      	add	sp, #68	@ 0x44
 8013278:	bd30      	pop	{r4, r5, pc}
 801327a:	f640 0037 	movw	r0, #2103	@ 0x837
 801327e:	e7f0      	b.n	8013262 <rcl_action_take_feedback+0x6a>

08013280 <rcl_action_wait_set_add_action_client>:
 8013280:	2800      	cmp	r0, #0
 8013282:	d048      	beq.n	8013316 <rcl_action_wait_set_add_action_client+0x96>
 8013284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013286:	460c      	mov	r4, r1
 8013288:	2900      	cmp	r1, #0
 801328a:	d03c      	beq.n	8013306 <rcl_action_wait_set_add_action_client+0x86>
 801328c:	4605      	mov	r5, r0
 801328e:	6808      	ldr	r0, [r1, #0]
 8013290:	2800      	cmp	r0, #0
 8013292:	d038      	beq.n	8013306 <rcl_action_wait_set_add_action_client+0x86>
 8013294:	4617      	mov	r7, r2
 8013296:	461e      	mov	r6, r3
 8013298:	f7fd ff32 	bl	8011100 <rcl_client_is_valid>
 801329c:	b3b0      	cbz	r0, 801330c <rcl_action_wait_set_add_action_client+0x8c>
 801329e:	6820      	ldr	r0, [r4, #0]
 80132a0:	3004      	adds	r0, #4
 80132a2:	f7fd ff2d 	bl	8011100 <rcl_client_is_valid>
 80132a6:	b388      	cbz	r0, 801330c <rcl_action_wait_set_add_action_client+0x8c>
 80132a8:	6820      	ldr	r0, [r4, #0]
 80132aa:	3008      	adds	r0, #8
 80132ac:	f7fd ff28 	bl	8011100 <rcl_client_is_valid>
 80132b0:	b360      	cbz	r0, 801330c <rcl_action_wait_set_add_action_client+0x8c>
 80132b2:	6820      	ldr	r0, [r4, #0]
 80132b4:	300c      	adds	r0, #12
 80132b6:	f7fe febf 	bl	8012038 <rcl_subscription_is_valid>
 80132ba:	b338      	cbz	r0, 801330c <rcl_action_wait_set_add_action_client+0x8c>
 80132bc:	6820      	ldr	r0, [r4, #0]
 80132be:	3010      	adds	r0, #16
 80132c0:	f7fe feba 	bl	8012038 <rcl_subscription_is_valid>
 80132c4:	b310      	cbz	r0, 801330c <rcl_action_wait_set_add_action_client+0x8c>
 80132c6:	6821      	ldr	r1, [r4, #0]
 80132c8:	4628      	mov	r0, r5
 80132ca:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80132ce:	f7ff fccd 	bl	8012c6c <rcl_wait_set_add_client>
 80132d2:	b9b8      	cbnz	r0, 8013304 <rcl_action_wait_set_add_action_client+0x84>
 80132d4:	6821      	ldr	r1, [r4, #0]
 80132d6:	4628      	mov	r0, r5
 80132d8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80132dc:	3104      	adds	r1, #4
 80132de:	f7ff fcc5 	bl	8012c6c <rcl_wait_set_add_client>
 80132e2:	b978      	cbnz	r0, 8013304 <rcl_action_wait_set_add_action_client+0x84>
 80132e4:	6821      	ldr	r1, [r4, #0]
 80132e6:	4628      	mov	r0, r5
 80132e8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80132ec:	3108      	adds	r1, #8
 80132ee:	f7ff fcbd 	bl	8012c6c <rcl_wait_set_add_client>
 80132f2:	b938      	cbnz	r0, 8013304 <rcl_action_wait_set_add_action_client+0x84>
 80132f4:	6821      	ldr	r1, [r4, #0]
 80132f6:	4628      	mov	r0, r5
 80132f8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80132fc:	310c      	adds	r1, #12
 80132fe:	f7ff f96d 	bl	80125dc <rcl_wait_set_add_subscription>
 8013302:	b158      	cbz	r0, 801331c <rcl_action_wait_set_add_action_client+0x9c>
 8013304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013306:	f640 0036 	movw	r0, #2102	@ 0x836
 801330a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801330c:	f7f9 fc00 	bl	800cb10 <rcutils_reset_error>
 8013310:	f640 0036 	movw	r0, #2102	@ 0x836
 8013314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013316:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801331a:	4770      	bx	lr
 801331c:	6821      	ldr	r1, [r4, #0]
 801331e:	4628      	mov	r0, r5
 8013320:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8013324:	3110      	adds	r1, #16
 8013326:	f7ff f959 	bl	80125dc <rcl_wait_set_add_subscription>
 801332a:	2800      	cmp	r0, #0
 801332c:	d1ea      	bne.n	8013304 <rcl_action_wait_set_add_action_client+0x84>
 801332e:	b11f      	cbz	r7, 8013338 <rcl_action_wait_set_add_action_client+0xb8>
 8013330:	6823      	ldr	r3, [r4, #0]
 8013332:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8013336:	603b      	str	r3, [r7, #0]
 8013338:	2e00      	cmp	r6, #0
 801333a:	d0e3      	beq.n	8013304 <rcl_action_wait_set_add_action_client+0x84>
 801333c:	6823      	ldr	r3, [r4, #0]
 801333e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8013342:	6033      	str	r3, [r6, #0]
 8013344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013346:	bf00      	nop

08013348 <rcl_action_client_wait_set_get_entities_ready>:
 8013348:	2800      	cmp	r0, #0
 801334a:	f000 808d 	beq.w	8013468 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801334e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013352:	460c      	mov	r4, r1
 8013354:	2900      	cmp	r1, #0
 8013356:	d077      	beq.n	8013448 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013358:	4605      	mov	r5, r0
 801335a:	6808      	ldr	r0, [r1, #0]
 801335c:	2800      	cmp	r0, #0
 801335e:	d073      	beq.n	8013448 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013360:	4616      	mov	r6, r2
 8013362:	461f      	mov	r7, r3
 8013364:	f7fd fecc 	bl	8011100 <rcl_client_is_valid>
 8013368:	2800      	cmp	r0, #0
 801336a:	d071      	beq.n	8013450 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801336c:	6820      	ldr	r0, [r4, #0]
 801336e:	3004      	adds	r0, #4
 8013370:	f7fd fec6 	bl	8011100 <rcl_client_is_valid>
 8013374:	2800      	cmp	r0, #0
 8013376:	d06b      	beq.n	8013450 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013378:	6820      	ldr	r0, [r4, #0]
 801337a:	3008      	adds	r0, #8
 801337c:	f7fd fec0 	bl	8011100 <rcl_client_is_valid>
 8013380:	2800      	cmp	r0, #0
 8013382:	d065      	beq.n	8013450 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013384:	6820      	ldr	r0, [r4, #0]
 8013386:	300c      	adds	r0, #12
 8013388:	f7fe fe56 	bl	8012038 <rcl_subscription_is_valid>
 801338c:	2800      	cmp	r0, #0
 801338e:	d05f      	beq.n	8013450 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013390:	6820      	ldr	r0, [r4, #0]
 8013392:	3010      	adds	r0, #16
 8013394:	f7fe fe50 	bl	8012038 <rcl_subscription_is_valid>
 8013398:	2800      	cmp	r0, #0
 801339a:	d059      	beq.n	8013450 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801339c:	2e00      	cmp	r6, #0
 801339e:	d060      	beq.n	8013462 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80133a0:	2f00      	cmp	r7, #0
 80133a2:	d05e      	beq.n	8013462 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80133a4:	9b06      	ldr	r3, [sp, #24]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d05b      	beq.n	8013462 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80133aa:	9b07      	ldr	r3, [sp, #28]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d058      	beq.n	8013462 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80133b0:	9b08      	ldr	r3, [sp, #32]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d055      	beq.n	8013462 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80133b6:	6823      	ldr	r3, [r4, #0]
 80133b8:	686a      	ldr	r2, [r5, #4]
 80133ba:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80133be:	428a      	cmp	r2, r1
 80133c0:	d94c      	bls.n	801345c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80133c2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80133c6:	4282      	cmp	r2, r0
 80133c8:	d948      	bls.n	801345c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80133ca:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80133ce:	69ea      	ldr	r2, [r5, #28]
 80133d0:	42a2      	cmp	r2, r4
 80133d2:	d943      	bls.n	801345c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80133d4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80133d8:	4562      	cmp	r2, ip
 80133da:	d93f      	bls.n	801345c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80133dc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80133e0:	4572      	cmp	r2, lr
 80133e2:	d93b      	bls.n	801345c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80133e4:	69aa      	ldr	r2, [r5, #24]
 80133e6:	682d      	ldr	r5, [r5, #0]
 80133e8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80133ec:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80133f0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80133f4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80133f8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80133fc:	f103 0c0c 	add.w	ip, r3, #12
 8013400:	eba5 050c 	sub.w	r5, r5, ip
 8013404:	fab5 f585 	clz	r5, r5
 8013408:	096d      	lsrs	r5, r5, #5
 801340a:	7035      	strb	r5, [r6, #0]
 801340c:	f103 0510 	add.w	r5, r3, #16
 8013410:	1b64      	subs	r4, r4, r5
 8013412:	fab4 f484 	clz	r4, r4
 8013416:	0964      	lsrs	r4, r4, #5
 8013418:	703c      	strb	r4, [r7, #0]
 801341a:	eba3 0008 	sub.w	r0, r3, r8
 801341e:	1d1c      	adds	r4, r3, #4
 8013420:	3308      	adds	r3, #8
 8013422:	1ad3      	subs	r3, r2, r3
 8013424:	fab0 f080 	clz	r0, r0
 8013428:	9a06      	ldr	r2, [sp, #24]
 801342a:	0940      	lsrs	r0, r0, #5
 801342c:	1b09      	subs	r1, r1, r4
 801342e:	7010      	strb	r0, [r2, #0]
 8013430:	fab1 f181 	clz	r1, r1
 8013434:	9a07      	ldr	r2, [sp, #28]
 8013436:	0949      	lsrs	r1, r1, #5
 8013438:	7011      	strb	r1, [r2, #0]
 801343a:	fab3 f383 	clz	r3, r3
 801343e:	9a08      	ldr	r2, [sp, #32]
 8013440:	095b      	lsrs	r3, r3, #5
 8013442:	2000      	movs	r0, #0
 8013444:	7013      	strb	r3, [r2, #0]
 8013446:	e001      	b.n	801344c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013448:	f640 0036 	movw	r0, #2102	@ 0x836
 801344c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013450:	f7f9 fb5e 	bl	800cb10 <rcutils_reset_error>
 8013454:	f640 0036 	movw	r0, #2102	@ 0x836
 8013458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801345c:	2001      	movs	r0, #1
 801345e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013462:	200b      	movs	r0, #11
 8013464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013468:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801346c:	4770      	bx	lr
 801346e:	bf00      	nop

08013470 <rcl_action_take_goal_request>:
 8013470:	2800      	cmp	r0, #0
 8013472:	d039      	beq.n	80134e8 <rcl_action_take_goal_request+0x78>
 8013474:	b570      	push	{r4, r5, r6, lr}
 8013476:	4604      	mov	r4, r0
 8013478:	6800      	ldr	r0, [r0, #0]
 801347a:	b380      	cbz	r0, 80134de <rcl_action_take_goal_request+0x6e>
 801347c:	460d      	mov	r5, r1
 801347e:	4616      	mov	r6, r2
 8013480:	f7fe fc96 	bl	8011db0 <rcl_service_is_valid>
 8013484:	b330      	cbz	r0, 80134d4 <rcl_action_take_goal_request+0x64>
 8013486:	6820      	ldr	r0, [r4, #0]
 8013488:	3004      	adds	r0, #4
 801348a:	f7fe fc91 	bl	8011db0 <rcl_service_is_valid>
 801348e:	b308      	cbz	r0, 80134d4 <rcl_action_take_goal_request+0x64>
 8013490:	6820      	ldr	r0, [r4, #0]
 8013492:	3008      	adds	r0, #8
 8013494:	f7fe fc8c 	bl	8011db0 <rcl_service_is_valid>
 8013498:	b1e0      	cbz	r0, 80134d4 <rcl_action_take_goal_request+0x64>
 801349a:	6820      	ldr	r0, [r4, #0]
 801349c:	300c      	adds	r0, #12
 801349e:	f7f8 fba5 	bl	800bbec <rcl_publisher_is_valid>
 80134a2:	b1b8      	cbz	r0, 80134d4 <rcl_action_take_goal_request+0x64>
 80134a4:	6820      	ldr	r0, [r4, #0]
 80134a6:	3010      	adds	r0, #16
 80134a8:	f7f8 fba0 	bl	800bbec <rcl_publisher_is_valid>
 80134ac:	b190      	cbz	r0, 80134d4 <rcl_action_take_goal_request+0x64>
 80134ae:	b1cd      	cbz	r5, 80134e4 <rcl_action_take_goal_request+0x74>
 80134b0:	b1c6      	cbz	r6, 80134e4 <rcl_action_take_goal_request+0x74>
 80134b2:	6820      	ldr	r0, [r4, #0]
 80134b4:	4632      	mov	r2, r6
 80134b6:	4629      	mov	r1, r5
 80134b8:	f7fe fc22 	bl	8011d00 <rcl_take_request>
 80134bc:	b148      	cbz	r0, 80134d2 <rcl_action_take_goal_request+0x62>
 80134be:	280a      	cmp	r0, #10
 80134c0:	d007      	beq.n	80134d2 <rcl_action_take_goal_request+0x62>
 80134c2:	f240 2259 	movw	r2, #601	@ 0x259
 80134c6:	f640 0399 	movw	r3, #2201	@ 0x899
 80134ca:	4290      	cmp	r0, r2
 80134cc:	bf0c      	ite	eq
 80134ce:	4618      	moveq	r0, r3
 80134d0:	2001      	movne	r0, #1
 80134d2:	bd70      	pop	{r4, r5, r6, pc}
 80134d4:	f7f9 fb1c 	bl	800cb10 <rcutils_reset_error>
 80134d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80134dc:	bd70      	pop	{r4, r5, r6, pc}
 80134de:	f640 0098 	movw	r0, #2200	@ 0x898
 80134e2:	bd70      	pop	{r4, r5, r6, pc}
 80134e4:	200b      	movs	r0, #11
 80134e6:	bd70      	pop	{r4, r5, r6, pc}
 80134e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80134ec:	4770      	bx	lr
 80134ee:	bf00      	nop

080134f0 <rcl_action_send_goal_response>:
 80134f0:	b390      	cbz	r0, 8013558 <rcl_action_send_goal_response+0x68>
 80134f2:	b570      	push	{r4, r5, r6, lr}
 80134f4:	4604      	mov	r4, r0
 80134f6:	6800      	ldr	r0, [r0, #0]
 80134f8:	b348      	cbz	r0, 801354e <rcl_action_send_goal_response+0x5e>
 80134fa:	460d      	mov	r5, r1
 80134fc:	4616      	mov	r6, r2
 80134fe:	f7fe fc57 	bl	8011db0 <rcl_service_is_valid>
 8013502:	b1f8      	cbz	r0, 8013544 <rcl_action_send_goal_response+0x54>
 8013504:	6820      	ldr	r0, [r4, #0]
 8013506:	3004      	adds	r0, #4
 8013508:	f7fe fc52 	bl	8011db0 <rcl_service_is_valid>
 801350c:	b1d0      	cbz	r0, 8013544 <rcl_action_send_goal_response+0x54>
 801350e:	6820      	ldr	r0, [r4, #0]
 8013510:	3008      	adds	r0, #8
 8013512:	f7fe fc4d 	bl	8011db0 <rcl_service_is_valid>
 8013516:	b1a8      	cbz	r0, 8013544 <rcl_action_send_goal_response+0x54>
 8013518:	6820      	ldr	r0, [r4, #0]
 801351a:	300c      	adds	r0, #12
 801351c:	f7f8 fb66 	bl	800bbec <rcl_publisher_is_valid>
 8013520:	b180      	cbz	r0, 8013544 <rcl_action_send_goal_response+0x54>
 8013522:	6820      	ldr	r0, [r4, #0]
 8013524:	3010      	adds	r0, #16
 8013526:	f7f8 fb61 	bl	800bbec <rcl_publisher_is_valid>
 801352a:	b158      	cbz	r0, 8013544 <rcl_action_send_goal_response+0x54>
 801352c:	b195      	cbz	r5, 8013554 <rcl_action_send_goal_response+0x64>
 801352e:	b18e      	cbz	r6, 8013554 <rcl_action_send_goal_response+0x64>
 8013530:	6820      	ldr	r0, [r4, #0]
 8013532:	4632      	mov	r2, r6
 8013534:	4629      	mov	r1, r5
 8013536:	f7fe fc23 	bl	8011d80 <rcl_send_response>
 801353a:	b110      	cbz	r0, 8013542 <rcl_action_send_goal_response+0x52>
 801353c:	2802      	cmp	r0, #2
 801353e:	bf18      	it	ne
 8013540:	2001      	movne	r0, #1
 8013542:	bd70      	pop	{r4, r5, r6, pc}
 8013544:	f7f9 fae4 	bl	800cb10 <rcutils_reset_error>
 8013548:	f640 0098 	movw	r0, #2200	@ 0x898
 801354c:	bd70      	pop	{r4, r5, r6, pc}
 801354e:	f640 0098 	movw	r0, #2200	@ 0x898
 8013552:	bd70      	pop	{r4, r5, r6, pc}
 8013554:	200b      	movs	r0, #11
 8013556:	bd70      	pop	{r4, r5, r6, pc}
 8013558:	f640 0098 	movw	r0, #2200	@ 0x898
 801355c:	4770      	bx	lr
 801355e:	bf00      	nop

08013560 <rcl_action_take_result_request>:
 8013560:	2800      	cmp	r0, #0
 8013562:	d03a      	beq.n	80135da <rcl_action_take_result_request+0x7a>
 8013564:	b570      	push	{r4, r5, r6, lr}
 8013566:	4604      	mov	r4, r0
 8013568:	6800      	ldr	r0, [r0, #0]
 801356a:	b388      	cbz	r0, 80135d0 <rcl_action_take_result_request+0x70>
 801356c:	460d      	mov	r5, r1
 801356e:	4616      	mov	r6, r2
 8013570:	f7fe fc1e 	bl	8011db0 <rcl_service_is_valid>
 8013574:	b338      	cbz	r0, 80135c6 <rcl_action_take_result_request+0x66>
 8013576:	6820      	ldr	r0, [r4, #0]
 8013578:	3004      	adds	r0, #4
 801357a:	f7fe fc19 	bl	8011db0 <rcl_service_is_valid>
 801357e:	b310      	cbz	r0, 80135c6 <rcl_action_take_result_request+0x66>
 8013580:	6820      	ldr	r0, [r4, #0]
 8013582:	3008      	adds	r0, #8
 8013584:	f7fe fc14 	bl	8011db0 <rcl_service_is_valid>
 8013588:	b1e8      	cbz	r0, 80135c6 <rcl_action_take_result_request+0x66>
 801358a:	6820      	ldr	r0, [r4, #0]
 801358c:	300c      	adds	r0, #12
 801358e:	f7f8 fb2d 	bl	800bbec <rcl_publisher_is_valid>
 8013592:	b1c0      	cbz	r0, 80135c6 <rcl_action_take_result_request+0x66>
 8013594:	6820      	ldr	r0, [r4, #0]
 8013596:	3010      	adds	r0, #16
 8013598:	f7f8 fb28 	bl	800bbec <rcl_publisher_is_valid>
 801359c:	b198      	cbz	r0, 80135c6 <rcl_action_take_result_request+0x66>
 801359e:	b1d5      	cbz	r5, 80135d6 <rcl_action_take_result_request+0x76>
 80135a0:	b1ce      	cbz	r6, 80135d6 <rcl_action_take_result_request+0x76>
 80135a2:	6820      	ldr	r0, [r4, #0]
 80135a4:	4632      	mov	r2, r6
 80135a6:	4629      	mov	r1, r5
 80135a8:	3008      	adds	r0, #8
 80135aa:	f7fe fba9 	bl	8011d00 <rcl_take_request>
 80135ae:	b148      	cbz	r0, 80135c4 <rcl_action_take_result_request+0x64>
 80135b0:	280a      	cmp	r0, #10
 80135b2:	d007      	beq.n	80135c4 <rcl_action_take_result_request+0x64>
 80135b4:	f240 2259 	movw	r2, #601	@ 0x259
 80135b8:	f640 0399 	movw	r3, #2201	@ 0x899
 80135bc:	4290      	cmp	r0, r2
 80135be:	bf0c      	ite	eq
 80135c0:	4618      	moveq	r0, r3
 80135c2:	2001      	movne	r0, #1
 80135c4:	bd70      	pop	{r4, r5, r6, pc}
 80135c6:	f7f9 faa3 	bl	800cb10 <rcutils_reset_error>
 80135ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80135ce:	bd70      	pop	{r4, r5, r6, pc}
 80135d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80135d4:	bd70      	pop	{r4, r5, r6, pc}
 80135d6:	200b      	movs	r0, #11
 80135d8:	bd70      	pop	{r4, r5, r6, pc}
 80135da:	f640 0098 	movw	r0, #2200	@ 0x898
 80135de:	4770      	bx	lr

080135e0 <rcl_action_take_cancel_request>:
 80135e0:	2800      	cmp	r0, #0
 80135e2:	d03a      	beq.n	801365a <rcl_action_take_cancel_request+0x7a>
 80135e4:	b570      	push	{r4, r5, r6, lr}
 80135e6:	4604      	mov	r4, r0
 80135e8:	6800      	ldr	r0, [r0, #0]
 80135ea:	b388      	cbz	r0, 8013650 <rcl_action_take_cancel_request+0x70>
 80135ec:	460d      	mov	r5, r1
 80135ee:	4616      	mov	r6, r2
 80135f0:	f7fe fbde 	bl	8011db0 <rcl_service_is_valid>
 80135f4:	b338      	cbz	r0, 8013646 <rcl_action_take_cancel_request+0x66>
 80135f6:	6820      	ldr	r0, [r4, #0]
 80135f8:	3004      	adds	r0, #4
 80135fa:	f7fe fbd9 	bl	8011db0 <rcl_service_is_valid>
 80135fe:	b310      	cbz	r0, 8013646 <rcl_action_take_cancel_request+0x66>
 8013600:	6820      	ldr	r0, [r4, #0]
 8013602:	3008      	adds	r0, #8
 8013604:	f7fe fbd4 	bl	8011db0 <rcl_service_is_valid>
 8013608:	b1e8      	cbz	r0, 8013646 <rcl_action_take_cancel_request+0x66>
 801360a:	6820      	ldr	r0, [r4, #0]
 801360c:	300c      	adds	r0, #12
 801360e:	f7f8 faed 	bl	800bbec <rcl_publisher_is_valid>
 8013612:	b1c0      	cbz	r0, 8013646 <rcl_action_take_cancel_request+0x66>
 8013614:	6820      	ldr	r0, [r4, #0]
 8013616:	3010      	adds	r0, #16
 8013618:	f7f8 fae8 	bl	800bbec <rcl_publisher_is_valid>
 801361c:	b198      	cbz	r0, 8013646 <rcl_action_take_cancel_request+0x66>
 801361e:	b1d5      	cbz	r5, 8013656 <rcl_action_take_cancel_request+0x76>
 8013620:	b1ce      	cbz	r6, 8013656 <rcl_action_take_cancel_request+0x76>
 8013622:	6820      	ldr	r0, [r4, #0]
 8013624:	4632      	mov	r2, r6
 8013626:	4629      	mov	r1, r5
 8013628:	3004      	adds	r0, #4
 801362a:	f7fe fb69 	bl	8011d00 <rcl_take_request>
 801362e:	b148      	cbz	r0, 8013644 <rcl_action_take_cancel_request+0x64>
 8013630:	280a      	cmp	r0, #10
 8013632:	d007      	beq.n	8013644 <rcl_action_take_cancel_request+0x64>
 8013634:	f240 2259 	movw	r2, #601	@ 0x259
 8013638:	f640 0399 	movw	r3, #2201	@ 0x899
 801363c:	4290      	cmp	r0, r2
 801363e:	bf0c      	ite	eq
 8013640:	4618      	moveq	r0, r3
 8013642:	2001      	movne	r0, #1
 8013644:	bd70      	pop	{r4, r5, r6, pc}
 8013646:	f7f9 fa63 	bl	800cb10 <rcutils_reset_error>
 801364a:	f640 0098 	movw	r0, #2200	@ 0x898
 801364e:	bd70      	pop	{r4, r5, r6, pc}
 8013650:	f640 0098 	movw	r0, #2200	@ 0x898
 8013654:	bd70      	pop	{r4, r5, r6, pc}
 8013656:	200b      	movs	r0, #11
 8013658:	bd70      	pop	{r4, r5, r6, pc}
 801365a:	f640 0098 	movw	r0, #2200	@ 0x898
 801365e:	4770      	bx	lr

08013660 <rcl_action_send_cancel_response>:
 8013660:	b398      	cbz	r0, 80136ca <rcl_action_send_cancel_response+0x6a>
 8013662:	b570      	push	{r4, r5, r6, lr}
 8013664:	4604      	mov	r4, r0
 8013666:	6800      	ldr	r0, [r0, #0]
 8013668:	b350      	cbz	r0, 80136c0 <rcl_action_send_cancel_response+0x60>
 801366a:	460d      	mov	r5, r1
 801366c:	4616      	mov	r6, r2
 801366e:	f7fe fb9f 	bl	8011db0 <rcl_service_is_valid>
 8013672:	b300      	cbz	r0, 80136b6 <rcl_action_send_cancel_response+0x56>
 8013674:	6820      	ldr	r0, [r4, #0]
 8013676:	3004      	adds	r0, #4
 8013678:	f7fe fb9a 	bl	8011db0 <rcl_service_is_valid>
 801367c:	b1d8      	cbz	r0, 80136b6 <rcl_action_send_cancel_response+0x56>
 801367e:	6820      	ldr	r0, [r4, #0]
 8013680:	3008      	adds	r0, #8
 8013682:	f7fe fb95 	bl	8011db0 <rcl_service_is_valid>
 8013686:	b1b0      	cbz	r0, 80136b6 <rcl_action_send_cancel_response+0x56>
 8013688:	6820      	ldr	r0, [r4, #0]
 801368a:	300c      	adds	r0, #12
 801368c:	f7f8 faae 	bl	800bbec <rcl_publisher_is_valid>
 8013690:	b188      	cbz	r0, 80136b6 <rcl_action_send_cancel_response+0x56>
 8013692:	6820      	ldr	r0, [r4, #0]
 8013694:	3010      	adds	r0, #16
 8013696:	f7f8 faa9 	bl	800bbec <rcl_publisher_is_valid>
 801369a:	b160      	cbz	r0, 80136b6 <rcl_action_send_cancel_response+0x56>
 801369c:	b19d      	cbz	r5, 80136c6 <rcl_action_send_cancel_response+0x66>
 801369e:	b196      	cbz	r6, 80136c6 <rcl_action_send_cancel_response+0x66>
 80136a0:	6820      	ldr	r0, [r4, #0]
 80136a2:	4632      	mov	r2, r6
 80136a4:	4629      	mov	r1, r5
 80136a6:	3004      	adds	r0, #4
 80136a8:	f7fe fb6a 	bl	8011d80 <rcl_send_response>
 80136ac:	b110      	cbz	r0, 80136b4 <rcl_action_send_cancel_response+0x54>
 80136ae:	2802      	cmp	r0, #2
 80136b0:	bf18      	it	ne
 80136b2:	2001      	movne	r0, #1
 80136b4:	bd70      	pop	{r4, r5, r6, pc}
 80136b6:	f7f9 fa2b 	bl	800cb10 <rcutils_reset_error>
 80136ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80136be:	bd70      	pop	{r4, r5, r6, pc}
 80136c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80136c4:	bd70      	pop	{r4, r5, r6, pc}
 80136c6:	200b      	movs	r0, #11
 80136c8:	bd70      	pop	{r4, r5, r6, pc}
 80136ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80136ce:	4770      	bx	lr

080136d0 <rcl_action_wait_set_add_action_server>:
 80136d0:	2800      	cmp	r0, #0
 80136d2:	d04d      	beq.n	8013770 <rcl_action_wait_set_add_action_server+0xa0>
 80136d4:	b570      	push	{r4, r5, r6, lr}
 80136d6:	460c      	mov	r4, r1
 80136d8:	b159      	cbz	r1, 80136f2 <rcl_action_wait_set_add_action_server+0x22>
 80136da:	4605      	mov	r5, r0
 80136dc:	6808      	ldr	r0, [r1, #0]
 80136de:	b140      	cbz	r0, 80136f2 <rcl_action_wait_set_add_action_server+0x22>
 80136e0:	4616      	mov	r6, r2
 80136e2:	f7fe fb65 	bl	8011db0 <rcl_service_is_valid>
 80136e6:	b120      	cbz	r0, 80136f2 <rcl_action_wait_set_add_action_server+0x22>
 80136e8:	6820      	ldr	r0, [r4, #0]
 80136ea:	3004      	adds	r0, #4
 80136ec:	f7fe fb60 	bl	8011db0 <rcl_service_is_valid>
 80136f0:	b910      	cbnz	r0, 80136f8 <rcl_action_wait_set_add_action_server+0x28>
 80136f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80136f6:	bd70      	pop	{r4, r5, r6, pc}
 80136f8:	6820      	ldr	r0, [r4, #0]
 80136fa:	3008      	adds	r0, #8
 80136fc:	f7fe fb58 	bl	8011db0 <rcl_service_is_valid>
 8013700:	2800      	cmp	r0, #0
 8013702:	d0f6      	beq.n	80136f2 <rcl_action_wait_set_add_action_server+0x22>
 8013704:	6820      	ldr	r0, [r4, #0]
 8013706:	300c      	adds	r0, #12
 8013708:	f7f8 fa88 	bl	800bc1c <rcl_publisher_is_valid_except_context>
 801370c:	2800      	cmp	r0, #0
 801370e:	d0f0      	beq.n	80136f2 <rcl_action_wait_set_add_action_server+0x22>
 8013710:	6820      	ldr	r0, [r4, #0]
 8013712:	3010      	adds	r0, #16
 8013714:	f7f8 fa82 	bl	800bc1c <rcl_publisher_is_valid_except_context>
 8013718:	2800      	cmp	r0, #0
 801371a:	d0ea      	beq.n	80136f2 <rcl_action_wait_set_add_action_server+0x22>
 801371c:	6821      	ldr	r1, [r4, #0]
 801371e:	4628      	mov	r0, r5
 8013720:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8013724:	f7ff face 	bl	8012cc4 <rcl_wait_set_add_service>
 8013728:	2800      	cmp	r0, #0
 801372a:	d1e4      	bne.n	80136f6 <rcl_action_wait_set_add_action_server+0x26>
 801372c:	6821      	ldr	r1, [r4, #0]
 801372e:	4628      	mov	r0, r5
 8013730:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8013734:	3104      	adds	r1, #4
 8013736:	f7ff fac5 	bl	8012cc4 <rcl_wait_set_add_service>
 801373a:	2800      	cmp	r0, #0
 801373c:	d1db      	bne.n	80136f6 <rcl_action_wait_set_add_action_server+0x26>
 801373e:	6821      	ldr	r1, [r4, #0]
 8013740:	4628      	mov	r0, r5
 8013742:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8013746:	3108      	adds	r1, #8
 8013748:	f7ff fabc 	bl	8012cc4 <rcl_wait_set_add_service>
 801374c:	2800      	cmp	r0, #0
 801374e:	d1d2      	bne.n	80136f6 <rcl_action_wait_set_add_action_server+0x26>
 8013750:	6821      	ldr	r1, [r4, #0]
 8013752:	4628      	mov	r0, r5
 8013754:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8013758:	3114      	adds	r1, #20
 801375a:	f7ff fa57 	bl	8012c0c <rcl_wait_set_add_timer>
 801375e:	2800      	cmp	r0, #0
 8013760:	d1c9      	bne.n	80136f6 <rcl_action_wait_set_add_action_server+0x26>
 8013762:	2e00      	cmp	r6, #0
 8013764:	d0c7      	beq.n	80136f6 <rcl_action_wait_set_add_action_server+0x26>
 8013766:	6823      	ldr	r3, [r4, #0]
 8013768:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801376c:	6033      	str	r3, [r6, #0]
 801376e:	bd70      	pop	{r4, r5, r6, pc}
 8013770:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013774:	4770      	bx	lr
 8013776:	bf00      	nop

08013778 <rcl_action_server_wait_set_get_entities_ready>:
 8013778:	2800      	cmp	r0, #0
 801377a:	d05a      	beq.n	8013832 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801377e:	460c      	mov	r4, r1
 8013780:	b161      	cbz	r1, 801379c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013782:	4605      	mov	r5, r0
 8013784:	6808      	ldr	r0, [r1, #0]
 8013786:	b148      	cbz	r0, 801379c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013788:	4616      	mov	r6, r2
 801378a:	461f      	mov	r7, r3
 801378c:	f7fe fb10 	bl	8011db0 <rcl_service_is_valid>
 8013790:	b120      	cbz	r0, 801379c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013792:	6820      	ldr	r0, [r4, #0]
 8013794:	3004      	adds	r0, #4
 8013796:	f7fe fb0b 	bl	8011db0 <rcl_service_is_valid>
 801379a:	b910      	cbnz	r0, 80137a2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801379c:	f640 0098 	movw	r0, #2200	@ 0x898
 80137a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137a2:	6820      	ldr	r0, [r4, #0]
 80137a4:	3008      	adds	r0, #8
 80137a6:	f7fe fb03 	bl	8011db0 <rcl_service_is_valid>
 80137aa:	2800      	cmp	r0, #0
 80137ac:	d0f6      	beq.n	801379c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80137ae:	6820      	ldr	r0, [r4, #0]
 80137b0:	300c      	adds	r0, #12
 80137b2:	f7f8 fa33 	bl	800bc1c <rcl_publisher_is_valid_except_context>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	d0f0      	beq.n	801379c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80137ba:	6820      	ldr	r0, [r4, #0]
 80137bc:	3010      	adds	r0, #16
 80137be:	f7f8 fa2d 	bl	800bc1c <rcl_publisher_is_valid_except_context>
 80137c2:	2800      	cmp	r0, #0
 80137c4:	d0ea      	beq.n	801379c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80137c6:	b3be      	cbz	r6, 8013838 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80137c8:	b3b7      	cbz	r7, 8013838 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80137ca:	9b06      	ldr	r3, [sp, #24]
 80137cc:	b3a3      	cbz	r3, 8013838 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80137ce:	9b07      	ldr	r3, [sp, #28]
 80137d0:	b393      	cbz	r3, 8013838 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80137d2:	6821      	ldr	r1, [r4, #0]
 80137d4:	692a      	ldr	r2, [r5, #16]
 80137d6:	6a2c      	ldr	r4, [r5, #32]
 80137d8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80137dc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80137e0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80137e4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80137e8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80137ec:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80137f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80137f4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80137f8:	1a64      	subs	r4, r4, r1
 80137fa:	fab4 f484 	clz	r4, r4
 80137fe:	0964      	lsrs	r4, r4, #5
 8013800:	7034      	strb	r4, [r6, #0]
 8013802:	1d0c      	adds	r4, r1, #4
 8013804:	1b1b      	subs	r3, r3, r4
 8013806:	fab3 f383 	clz	r3, r3
 801380a:	095b      	lsrs	r3, r3, #5
 801380c:	f101 0408 	add.w	r4, r1, #8
 8013810:	703b      	strb	r3, [r7, #0]
 8013812:	f101 0314 	add.w	r3, r1, #20
 8013816:	1b01      	subs	r1, r0, r4
 8013818:	1ad3      	subs	r3, r2, r3
 801381a:	fab1 f181 	clz	r1, r1
 801381e:	9a06      	ldr	r2, [sp, #24]
 8013820:	0949      	lsrs	r1, r1, #5
 8013822:	7011      	strb	r1, [r2, #0]
 8013824:	fab3 f383 	clz	r3, r3
 8013828:	9a07      	ldr	r2, [sp, #28]
 801382a:	095b      	lsrs	r3, r3, #5
 801382c:	2000      	movs	r0, #0
 801382e:	7013      	strb	r3, [r2, #0]
 8013830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013832:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013836:	4770      	bx	lr
 8013838:	200b      	movs	r0, #11
 801383a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801383c <_execute_event_handler>:
 801383c:	2002      	movs	r0, #2
 801383e:	4770      	bx	lr

08013840 <_cancel_goal_event_handler>:
 8013840:	2003      	movs	r0, #3
 8013842:	4770      	bx	lr

08013844 <_succeed_event_handler>:
 8013844:	2004      	movs	r0, #4
 8013846:	4770      	bx	lr

08013848 <_abort_event_handler>:
 8013848:	2006      	movs	r0, #6
 801384a:	4770      	bx	lr

0801384c <_canceled_event_handler>:
 801384c:	2005      	movs	r0, #5
 801384e:	4770      	bx	lr

08013850 <rcl_action_transition_goal_state>:
 8013850:	b2c2      	uxtb	r2, r0
 8013852:	2a06      	cmp	r2, #6
 8013854:	d80c      	bhi.n	8013870 <rcl_action_transition_goal_state+0x20>
 8013856:	2904      	cmp	r1, #4
 8013858:	d80a      	bhi.n	8013870 <rcl_action_transition_goal_state+0x20>
 801385a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801385e:	b410      	push	{r4}
 8013860:	1853      	adds	r3, r2, r1
 8013862:	4c06      	ldr	r4, [pc, #24]	@ (801387c <rcl_action_transition_goal_state+0x2c>)
 8013864:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013868:	b123      	cbz	r3, 8013874 <rcl_action_transition_goal_state+0x24>
 801386a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801386e:	4718      	bx	r3
 8013870:	2000      	movs	r0, #0
 8013872:	4770      	bx	lr
 8013874:	2000      	movs	r0, #0
 8013876:	f85d 4b04 	ldr.w	r4, [sp], #4
 801387a:	4770      	bx	lr
 801387c:	08019e14 	.word	0x08019e14

08013880 <rcl_action_get_zero_initialized_cancel_response>:
 8013880:	b510      	push	{r4, lr}
 8013882:	4c07      	ldr	r4, [pc, #28]	@ (80138a0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8013884:	4686      	mov	lr, r0
 8013886:	4684      	mov	ip, r0
 8013888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801388a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801388e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013890:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013894:	6823      	ldr	r3, [r4, #0]
 8013896:	f8cc 3000 	str.w	r3, [ip]
 801389a:	4670      	mov	r0, lr
 801389c:	bd10      	pop	{r4, pc}
 801389e:	bf00      	nop
 80138a0:	08019ea0 	.word	0x08019ea0

080138a4 <rclc_action_send_result_request>:
 80138a4:	b1d0      	cbz	r0, 80138dc <rclc_action_send_result_request+0x38>
 80138a6:	b500      	push	{lr}
 80138a8:	4684      	mov	ip, r0
 80138aa:	b087      	sub	sp, #28
 80138ac:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80138b0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80138b4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80138b8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80138bc:	f10d 0e08 	add.w	lr, sp, #8
 80138c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80138c4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80138c8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80138cc:	a902      	add	r1, sp, #8
 80138ce:	3010      	adds	r0, #16
 80138d0:	f7ff fbda 	bl	8013088 <rcl_action_send_result_request>
 80138d4:	b920      	cbnz	r0, 80138e0 <rclc_action_send_result_request+0x3c>
 80138d6:	b007      	add	sp, #28
 80138d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80138dc:	200b      	movs	r0, #11
 80138de:	4770      	bx	lr
 80138e0:	9001      	str	r0, [sp, #4]
 80138e2:	f7f9 f915 	bl	800cb10 <rcutils_reset_error>
 80138e6:	9801      	ldr	r0, [sp, #4]
 80138e8:	b007      	add	sp, #28
 80138ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80138ee:	bf00      	nop

080138f0 <rclc_action_take_goal_handle>:
 80138f0:	b160      	cbz	r0, 801390c <rclc_action_take_goal_handle+0x1c>
 80138f2:	6883      	ldr	r3, [r0, #8]
 80138f4:	b143      	cbz	r3, 8013908 <rclc_action_take_goal_handle+0x18>
 80138f6:	6819      	ldr	r1, [r3, #0]
 80138f8:	6081      	str	r1, [r0, #8]
 80138fa:	2200      	movs	r2, #0
 80138fc:	721a      	strb	r2, [r3, #8]
 80138fe:	68c1      	ldr	r1, [r0, #12]
 8013900:	6019      	str	r1, [r3, #0]
 8013902:	621a      	str	r2, [r3, #32]
 8013904:	849a      	strh	r2, [r3, #36]	@ 0x24
 8013906:	60c3      	str	r3, [r0, #12]
 8013908:	4618      	mov	r0, r3
 801390a:	4770      	bx	lr
 801390c:	4603      	mov	r3, r0
 801390e:	e7fb      	b.n	8013908 <rclc_action_take_goal_handle+0x18>

08013910 <rclc_action_remove_used_goal_handle>:
 8013910:	b180      	cbz	r0, 8013934 <rclc_action_remove_used_goal_handle+0x24>
 8013912:	b179      	cbz	r1, 8013934 <rclc_action_remove_used_goal_handle+0x24>
 8013914:	68c3      	ldr	r3, [r0, #12]
 8013916:	4299      	cmp	r1, r3
 8013918:	d00d      	beq.n	8013936 <rclc_action_remove_used_goal_handle+0x26>
 801391a:	b12b      	cbz	r3, 8013928 <rclc_action_remove_used_goal_handle+0x18>
 801391c:	681a      	ldr	r2, [r3, #0]
 801391e:	4291      	cmp	r1, r2
 8013920:	d003      	beq.n	801392a <rclc_action_remove_used_goal_handle+0x1a>
 8013922:	4613      	mov	r3, r2
 8013924:	2b00      	cmp	r3, #0
 8013926:	d1f9      	bne.n	801391c <rclc_action_remove_used_goal_handle+0xc>
 8013928:	4770      	bx	lr
 801392a:	680a      	ldr	r2, [r1, #0]
 801392c:	601a      	str	r2, [r3, #0]
 801392e:	6883      	ldr	r3, [r0, #8]
 8013930:	600b      	str	r3, [r1, #0]
 8013932:	6081      	str	r1, [r0, #8]
 8013934:	4770      	bx	lr
 8013936:	680b      	ldr	r3, [r1, #0]
 8013938:	60c3      	str	r3, [r0, #12]
 801393a:	e7f8      	b.n	801392e <rclc_action_remove_used_goal_handle+0x1e>

0801393c <rclc_action_find_goal_handle_by_uuid>:
 801393c:	b538      	push	{r3, r4, r5, lr}
 801393e:	b180      	cbz	r0, 8013962 <rclc_action_find_goal_handle_by_uuid+0x26>
 8013940:	460d      	mov	r5, r1
 8013942:	b181      	cbz	r1, 8013966 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8013944:	68c4      	ldr	r4, [r0, #12]
 8013946:	b914      	cbnz	r4, 801394e <rclc_action_find_goal_handle_by_uuid+0x12>
 8013948:	e009      	b.n	801395e <rclc_action_find_goal_handle_by_uuid+0x22>
 801394a:	6824      	ldr	r4, [r4, #0]
 801394c:	b13c      	cbz	r4, 801395e <rclc_action_find_goal_handle_by_uuid+0x22>
 801394e:	f104 0009 	add.w	r0, r4, #9
 8013952:	2210      	movs	r2, #16
 8013954:	4629      	mov	r1, r5
 8013956:	f004 fe19 	bl	801858c <memcmp>
 801395a:	2800      	cmp	r0, #0
 801395c:	d1f5      	bne.n	801394a <rclc_action_find_goal_handle_by_uuid+0xe>
 801395e:	4620      	mov	r0, r4
 8013960:	bd38      	pop	{r3, r4, r5, pc}
 8013962:	4604      	mov	r4, r0
 8013964:	e7fb      	b.n	801395e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013966:	460c      	mov	r4, r1
 8013968:	e7f9      	b.n	801395e <rclc_action_find_goal_handle_by_uuid+0x22>
 801396a:	bf00      	nop

0801396c <rclc_action_find_first_handle_by_status>:
 801396c:	b140      	cbz	r0, 8013980 <rclc_action_find_first_handle_by_status+0x14>
 801396e:	68c0      	ldr	r0, [r0, #12]
 8013970:	b910      	cbnz	r0, 8013978 <rclc_action_find_first_handle_by_status+0xc>
 8013972:	e005      	b.n	8013980 <rclc_action_find_first_handle_by_status+0x14>
 8013974:	6800      	ldr	r0, [r0, #0]
 8013976:	b118      	cbz	r0, 8013980 <rclc_action_find_first_handle_by_status+0x14>
 8013978:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801397c:	428b      	cmp	r3, r1
 801397e:	d1f9      	bne.n	8013974 <rclc_action_find_first_handle_by_status+0x8>
 8013980:	4770      	bx	lr
 8013982:	bf00      	nop

08013984 <rclc_action_find_first_terminated_handle>:
 8013984:	b140      	cbz	r0, 8013998 <rclc_action_find_first_terminated_handle+0x14>
 8013986:	68c0      	ldr	r0, [r0, #12]
 8013988:	b910      	cbnz	r0, 8013990 <rclc_action_find_first_terminated_handle+0xc>
 801398a:	e005      	b.n	8013998 <rclc_action_find_first_terminated_handle+0x14>
 801398c:	6800      	ldr	r0, [r0, #0]
 801398e:	b118      	cbz	r0, 8013998 <rclc_action_find_first_terminated_handle+0x14>
 8013990:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013994:	2b03      	cmp	r3, #3
 8013996:	ddf9      	ble.n	801398c <rclc_action_find_first_terminated_handle+0x8>
 8013998:	4770      	bx	lr
 801399a:	bf00      	nop

0801399c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801399c:	b170      	cbz	r0, 80139bc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801399e:	68c0      	ldr	r0, [r0, #12]
 80139a0:	b160      	cbz	r0, 80139bc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80139a2:	b410      	push	{r4}
 80139a4:	e001      	b.n	80139aa <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80139a6:	6800      	ldr	r0, [r0, #0]
 80139a8:	b128      	cbz	r0, 80139b6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80139aa:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80139ae:	4299      	cmp	r1, r3
 80139b0:	bf08      	it	eq
 80139b2:	4294      	cmpeq	r4, r2
 80139b4:	d1f7      	bne.n	80139a6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80139b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139ba:	4770      	bx	lr
 80139bc:	4770      	bx	lr
 80139be:	bf00      	nop

080139c0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80139c0:	b170      	cbz	r0, 80139e0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80139c2:	68c0      	ldr	r0, [r0, #12]
 80139c4:	b160      	cbz	r0, 80139e0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80139c6:	b410      	push	{r4}
 80139c8:	e001      	b.n	80139ce <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80139ca:	6800      	ldr	r0, [r0, #0]
 80139cc:	b128      	cbz	r0, 80139da <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80139ce:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80139d2:	4299      	cmp	r1, r3
 80139d4:	bf08      	it	eq
 80139d6:	4294      	cmpeq	r4, r2
 80139d8:	d1f7      	bne.n	80139ca <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80139da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139de:	4770      	bx	lr
 80139e0:	4770      	bx	lr
 80139e2:	bf00      	nop

080139e4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80139e4:	b170      	cbz	r0, 8013a04 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80139e6:	68c0      	ldr	r0, [r0, #12]
 80139e8:	b160      	cbz	r0, 8013a04 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80139ea:	b410      	push	{r4}
 80139ec:	e001      	b.n	80139f2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80139ee:	6800      	ldr	r0, [r0, #0]
 80139f0:	b128      	cbz	r0, 80139fe <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80139f2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80139f6:	4299      	cmp	r1, r3
 80139f8:	bf08      	it	eq
 80139fa:	4294      	cmpeq	r4, r2
 80139fc:	d1f7      	bne.n	80139ee <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80139fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a02:	4770      	bx	lr
 8013a04:	4770      	bx	lr
 8013a06:	bf00      	nop

08013a08 <rclc_action_find_first_handle_with_goal_response>:
 8013a08:	b140      	cbz	r0, 8013a1c <rclc_action_find_first_handle_with_goal_response+0x14>
 8013a0a:	68c0      	ldr	r0, [r0, #12]
 8013a0c:	b910      	cbnz	r0, 8013a14 <rclc_action_find_first_handle_with_goal_response+0xc>
 8013a0e:	e005      	b.n	8013a1c <rclc_action_find_first_handle_with_goal_response+0x14>
 8013a10:	6800      	ldr	r0, [r0, #0]
 8013a12:	b118      	cbz	r0, 8013a1c <rclc_action_find_first_handle_with_goal_response+0x14>
 8013a14:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d0f9      	beq.n	8013a10 <rclc_action_find_first_handle_with_goal_response+0x8>
 8013a1c:	4770      	bx	lr
 8013a1e:	bf00      	nop

08013a20 <rclc_action_find_first_handle_with_result_response>:
 8013a20:	b140      	cbz	r0, 8013a34 <rclc_action_find_first_handle_with_result_response+0x14>
 8013a22:	68c0      	ldr	r0, [r0, #12]
 8013a24:	b910      	cbnz	r0, 8013a2c <rclc_action_find_first_handle_with_result_response+0xc>
 8013a26:	e005      	b.n	8013a34 <rclc_action_find_first_handle_with_result_response+0x14>
 8013a28:	6800      	ldr	r0, [r0, #0]
 8013a2a:	b118      	cbz	r0, 8013a34 <rclc_action_find_first_handle_with_result_response+0x14>
 8013a2c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d0f9      	beq.n	8013a28 <rclc_action_find_first_handle_with_result_response+0x8>
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop

08013a38 <rclc_action_server_response_goal_request>:
 8013a38:	b198      	cbz	r0, 8013a62 <rclc_action_server_response_goal_request+0x2a>
 8013a3a:	b510      	push	{r4, lr}
 8013a3c:	6844      	ldr	r4, [r0, #4]
 8013a3e:	b086      	sub	sp, #24
 8013a40:	2200      	movs	r2, #0
 8013a42:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013a46:	460b      	mov	r3, r1
 8013a48:	9205      	str	r2, [sp, #20]
 8013a4a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8013a4e:	aa03      	add	r2, sp, #12
 8013a50:	f104 0010 	add.w	r0, r4, #16
 8013a54:	f88d 300c 	strb.w	r3, [sp, #12]
 8013a58:	f7ff fd4a 	bl	80134f0 <rcl_action_send_goal_response>
 8013a5c:	b918      	cbnz	r0, 8013a66 <rclc_action_server_response_goal_request+0x2e>
 8013a5e:	b006      	add	sp, #24
 8013a60:	bd10      	pop	{r4, pc}
 8013a62:	200b      	movs	r0, #11
 8013a64:	4770      	bx	lr
 8013a66:	9001      	str	r0, [sp, #4]
 8013a68:	f7f9 f852 	bl	800cb10 <rcutils_reset_error>
 8013a6c:	9801      	ldr	r0, [sp, #4]
 8013a6e:	b006      	add	sp, #24
 8013a70:	bd10      	pop	{r4, pc}
 8013a72:	bf00      	nop
 8013a74:	0000      	movs	r0, r0
	...

08013a78 <rclc_action_server_goal_cancel_accept>:
 8013a78:	b310      	cbz	r0, 8013ac0 <rclc_action_server_goal_cancel_accept+0x48>
 8013a7a:	b510      	push	{r4, lr}
 8013a7c:	b090      	sub	sp, #64	@ 0x40
 8013a7e:	4604      	mov	r4, r0
 8013a80:	a806      	add	r0, sp, #24
 8013a82:	f7ff fefd 	bl	8013880 <rcl_action_get_zero_initialized_cancel_response>
 8013a86:	2300      	movs	r3, #0
 8013a88:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8013a8c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013a90:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8013a94:	f88d 3018 	strb.w	r3, [sp, #24]
 8013a98:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8013a9c:	f8cd d01c 	str.w	sp, [sp, #28]
 8013aa0:	46ec      	mov	ip, sp
 8013aa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013aa6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013ac8 <rclc_action_server_goal_cancel_accept+0x50>
 8013aaa:	6860      	ldr	r0, [r4, #4]
 8013aac:	aa06      	add	r2, sp, #24
 8013aae:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8013ab2:	3010      	adds	r0, #16
 8013ab4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013ab8:	f7ff fdd2 	bl	8013660 <rcl_action_send_cancel_response>
 8013abc:	b010      	add	sp, #64	@ 0x40
 8013abe:	bd10      	pop	{r4, pc}
 8013ac0:	200b      	movs	r0, #11
 8013ac2:	4770      	bx	lr
 8013ac4:	f3af 8000 	nop.w
 8013ac8:	00000001 	.word	0x00000001
 8013acc:	00000001 	.word	0x00000001

08013ad0 <rclc_action_server_goal_cancel_reject>:
 8013ad0:	b082      	sub	sp, #8
 8013ad2:	b530      	push	{r4, r5, lr}
 8013ad4:	b08b      	sub	sp, #44	@ 0x2c
 8013ad6:	ac0e      	add	r4, sp, #56	@ 0x38
 8013ad8:	e884 000c 	stmia.w	r4, {r2, r3}
 8013adc:	b188      	cbz	r0, 8013b02 <rclc_action_server_goal_cancel_reject+0x32>
 8013ade:	4604      	mov	r4, r0
 8013ae0:	a801      	add	r0, sp, #4
 8013ae2:	460d      	mov	r5, r1
 8013ae4:	f7ff fecc 	bl	8013880 <rcl_action_get_zero_initialized_cancel_response>
 8013ae8:	aa01      	add	r2, sp, #4
 8013aea:	a90e      	add	r1, sp, #56	@ 0x38
 8013aec:	f104 0010 	add.w	r0, r4, #16
 8013af0:	f88d 5004 	strb.w	r5, [sp, #4]
 8013af4:	f7ff fdb4 	bl	8013660 <rcl_action_send_cancel_response>
 8013af8:	b00b      	add	sp, #44	@ 0x2c
 8013afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013afe:	b002      	add	sp, #8
 8013b00:	4770      	bx	lr
 8013b02:	200b      	movs	r0, #11
 8013b04:	b00b      	add	sp, #44	@ 0x2c
 8013b06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b0a:	b002      	add	sp, #8
 8013b0c:	4770      	bx	lr
 8013b0e:	bf00      	nop

08013b10 <__atomic_load_8>:
 8013b10:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013b14:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013b18:	4a15      	ldr	r2, [pc, #84]	@ (8013b70 <__atomic_load_8+0x60>)
 8013b1a:	4b16      	ldr	r3, [pc, #88]	@ (8013b74 <__atomic_load_8+0x64>)
 8013b1c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013b20:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013b24:	fb02 f101 	mul.w	r1, r2, r1
 8013b28:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013b2c:	fba3 2301 	umull	r2, r3, r3, r1
 8013b30:	091b      	lsrs	r3, r3, #4
 8013b32:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013b36:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8013b3a:	b4d0      	push	{r4, r6, r7}
 8013b3c:	4c0e      	ldr	r4, [pc, #56]	@ (8013b78 <__atomic_load_8+0x68>)
 8013b3e:	1ac9      	subs	r1, r1, r3
 8013b40:	1862      	adds	r2, r4, r1
 8013b42:	f04f 0c01 	mov.w	ip, #1
 8013b46:	e8d2 3f4f 	ldrexb	r3, [r2]
 8013b4a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8013b4e:	2e00      	cmp	r6, #0
 8013b50:	d1f9      	bne.n	8013b46 <__atomic_load_8+0x36>
 8013b52:	f3bf 8f5b 	dmb	ish
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d1f4      	bne.n	8013b46 <__atomic_load_8+0x36>
 8013b5c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013b60:	f3bf 8f5b 	dmb	ish
 8013b64:	5463      	strb	r3, [r4, r1]
 8013b66:	4630      	mov	r0, r6
 8013b68:	4639      	mov	r1, r7
 8013b6a:	bcd0      	pop	{r4, r6, r7}
 8013b6c:	4770      	bx	lr
 8013b6e:	bf00      	nop
 8013b70:	27d4eb2d 	.word	0x27d4eb2d
 8013b74:	b21642c9 	.word	0xb21642c9
 8013b78:	2000e100 	.word	0x2000e100

08013b7c <__atomic_store_8>:
 8013b7c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013b80:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013b84:	b570      	push	{r4, r5, r6, lr}
 8013b86:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013b8a:	4c14      	ldr	r4, [pc, #80]	@ (8013bdc <__atomic_store_8+0x60>)
 8013b8c:	4d14      	ldr	r5, [pc, #80]	@ (8013be0 <__atomic_store_8+0x64>)
 8013b8e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013b92:	fb04 f101 	mul.w	r1, r4, r1
 8013b96:	4c13      	ldr	r4, [pc, #76]	@ (8013be4 <__atomic_store_8+0x68>)
 8013b98:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013b9c:	fba4 4e01 	umull	r4, lr, r4, r1
 8013ba0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8013ba4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8013ba8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8013bac:	eba1 0e0e 	sub.w	lr, r1, lr
 8013bb0:	eb05 0c0e 	add.w	ip, r5, lr
 8013bb4:	f04f 0401 	mov.w	r4, #1
 8013bb8:	e8dc 1f4f 	ldrexb	r1, [ip]
 8013bbc:	e8cc 4f46 	strexb	r6, r4, [ip]
 8013bc0:	2e00      	cmp	r6, #0
 8013bc2:	d1f9      	bne.n	8013bb8 <__atomic_store_8+0x3c>
 8013bc4:	f3bf 8f5b 	dmb	ish
 8013bc8:	b2c9      	uxtb	r1, r1
 8013bca:	2900      	cmp	r1, #0
 8013bcc:	d1f4      	bne.n	8013bb8 <__atomic_store_8+0x3c>
 8013bce:	e9c0 2300 	strd	r2, r3, [r0]
 8013bd2:	f3bf 8f5b 	dmb	ish
 8013bd6:	f805 100e 	strb.w	r1, [r5, lr]
 8013bda:	bd70      	pop	{r4, r5, r6, pc}
 8013bdc:	27d4eb2d 	.word	0x27d4eb2d
 8013be0:	2000e100 	.word	0x2000e100
 8013be4:	b21642c9 	.word	0xb21642c9

08013be8 <__atomic_exchange_8>:
 8013be8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8013bec:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8013bf0:	4916      	ldr	r1, [pc, #88]	@ (8013c4c <__atomic_exchange_8+0x64>)
 8013bf2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8013bf6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8013bfa:	fb01 fc0c 	mul.w	ip, r1, ip
 8013bfe:	4914      	ldr	r1, [pc, #80]	@ (8013c50 <__atomic_exchange_8+0x68>)
 8013c00:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8013c04:	b570      	push	{r4, r5, r6, lr}
 8013c06:	4605      	mov	r5, r0
 8013c08:	fba1 010c 	umull	r0, r1, r1, ip
 8013c0c:	0909      	lsrs	r1, r1, #4
 8013c0e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8013c12:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8013c16:	4e0f      	ldr	r6, [pc, #60]	@ (8013c54 <__atomic_exchange_8+0x6c>)
 8013c18:	ebac 0c01 	sub.w	ip, ip, r1
 8013c1c:	eb06 010c 	add.w	r1, r6, ip
 8013c20:	f04f 0e01 	mov.w	lr, #1
 8013c24:	e8d1 4f4f 	ldrexb	r4, [r1]
 8013c28:	e8c1 ef40 	strexb	r0, lr, [r1]
 8013c2c:	2800      	cmp	r0, #0
 8013c2e:	d1f9      	bne.n	8013c24 <__atomic_exchange_8+0x3c>
 8013c30:	f3bf 8f5b 	dmb	ish
 8013c34:	b2e4      	uxtb	r4, r4
 8013c36:	2c00      	cmp	r4, #0
 8013c38:	d1f4      	bne.n	8013c24 <__atomic_exchange_8+0x3c>
 8013c3a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013c3e:	e9c5 2300 	strd	r2, r3, [r5]
 8013c42:	f3bf 8f5b 	dmb	ish
 8013c46:	f806 400c 	strb.w	r4, [r6, ip]
 8013c4a:	bd70      	pop	{r4, r5, r6, pc}
 8013c4c:	27d4eb2d 	.word	0x27d4eb2d
 8013c50:	b21642c9 	.word	0xb21642c9
 8013c54:	2000e100 	.word	0x2000e100

08013c58 <rcutils_get_env>:
 8013c58:	b168      	cbz	r0, 8013c76 <rcutils_get_env+0x1e>
 8013c5a:	b510      	push	{r4, lr}
 8013c5c:	460c      	mov	r4, r1
 8013c5e:	b129      	cbz	r1, 8013c6c <rcutils_get_env+0x14>
 8013c60:	f003 ffa4 	bl	8017bac <getenv>
 8013c64:	b120      	cbz	r0, 8013c70 <rcutils_get_env+0x18>
 8013c66:	6020      	str	r0, [r4, #0]
 8013c68:	2000      	movs	r0, #0
 8013c6a:	bd10      	pop	{r4, pc}
 8013c6c:	4803      	ldr	r0, [pc, #12]	@ (8013c7c <rcutils_get_env+0x24>)
 8013c6e:	bd10      	pop	{r4, pc}
 8013c70:	4b03      	ldr	r3, [pc, #12]	@ (8013c80 <rcutils_get_env+0x28>)
 8013c72:	6023      	str	r3, [r4, #0]
 8013c74:	bd10      	pop	{r4, pc}
 8013c76:	4803      	ldr	r0, [pc, #12]	@ (8013c84 <rcutils_get_env+0x2c>)
 8013c78:	4770      	bx	lr
 8013c7a:	bf00      	nop
 8013c7c:	08019ee0 	.word	0x08019ee0
 8013c80:	0801a4b8 	.word	0x0801a4b8
 8013c84:	08019ec4 	.word	0x08019ec4

08013c88 <rcutils_is_directory>:
 8013c88:	2000      	movs	r0, #0
 8013c8a:	4770      	bx	lr

08013c8c <rcutils_join_path>:
 8013c8c:	b082      	sub	sp, #8
 8013c8e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013c92:	2000      	movs	r0, #0
 8013c94:	b002      	add	sp, #8
 8013c96:	4770      	bx	lr

08013c98 <rcutils_to_native_path>:
 8013c98:	b084      	sub	sp, #16
 8013c9a:	a801      	add	r0, sp, #4
 8013c9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013ca0:	b004      	add	sp, #16
 8013ca2:	2000      	movs	r0, #0
 8013ca4:	4770      	bx	lr
 8013ca6:	bf00      	nop

08013ca8 <rcutils_format_string_limit>:
 8013ca8:	b40f      	push	{r0, r1, r2, r3}
 8013caa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cac:	b083      	sub	sp, #12
 8013cae:	ac08      	add	r4, sp, #32
 8013cb0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013cb6:	b34e      	cbz	r6, 8013d0c <rcutils_format_string_limit+0x64>
 8013cb8:	a808      	add	r0, sp, #32
 8013cba:	f7f8 ff05 	bl	800cac8 <rcutils_allocator_is_valid>
 8013cbe:	b328      	cbz	r0, 8013d0c <rcutils_format_string_limit+0x64>
 8013cc0:	2100      	movs	r1, #0
 8013cc2:	ab0f      	add	r3, sp, #60	@ 0x3c
 8013cc4:	4632      	mov	r2, r6
 8013cc6:	4608      	mov	r0, r1
 8013cc8:	e9cd 3300 	strd	r3, r3, [sp]
 8013ccc:	f000 f8f4 	bl	8013eb8 <rcutils_vsnprintf>
 8013cd0:	1c43      	adds	r3, r0, #1
 8013cd2:	4605      	mov	r5, r0
 8013cd4:	d01a      	beq.n	8013d0c <rcutils_format_string_limit+0x64>
 8013cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013cd8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013cda:	1c47      	adds	r7, r0, #1
 8013cdc:	429f      	cmp	r7, r3
 8013cde:	bf84      	itt	hi
 8013ce0:	461f      	movhi	r7, r3
 8013ce2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8013ce6:	4638      	mov	r0, r7
 8013ce8:	9b08      	ldr	r3, [sp, #32]
 8013cea:	4798      	blx	r3
 8013cec:	4604      	mov	r4, r0
 8013cee:	b168      	cbz	r0, 8013d0c <rcutils_format_string_limit+0x64>
 8013cf0:	9b01      	ldr	r3, [sp, #4]
 8013cf2:	4632      	mov	r2, r6
 8013cf4:	4639      	mov	r1, r7
 8013cf6:	f000 f8df 	bl	8013eb8 <rcutils_vsnprintf>
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	db02      	blt.n	8013d04 <rcutils_format_string_limit+0x5c>
 8013cfe:	2300      	movs	r3, #0
 8013d00:	5563      	strb	r3, [r4, r5]
 8013d02:	e004      	b.n	8013d0e <rcutils_format_string_limit+0x66>
 8013d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d06:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013d08:	4620      	mov	r0, r4
 8013d0a:	4798      	blx	r3
 8013d0c:	2400      	movs	r4, #0
 8013d0e:	4620      	mov	r0, r4
 8013d10:	b003      	add	sp, #12
 8013d12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013d16:	b004      	add	sp, #16
 8013d18:	4770      	bx	lr
 8013d1a:	bf00      	nop

08013d1c <rcutils_repl_str>:
 8013d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d20:	ed2d 8b02 	vpush	{d8}
 8013d24:	b087      	sub	sp, #28
 8013d26:	4680      	mov	r8, r0
 8013d28:	4608      	mov	r0, r1
 8013d2a:	f8cd 8004 	str.w	r8, [sp, #4]
 8013d2e:	ee08 2a10 	vmov	s16, r2
 8013d32:	468a      	mov	sl, r1
 8013d34:	4699      	mov	r9, r3
 8013d36:	f7ec fa5d 	bl	80001f4 <strlen>
 8013d3a:	2600      	movs	r6, #0
 8013d3c:	4647      	mov	r7, r8
 8013d3e:	9002      	str	r0, [sp, #8]
 8013d40:	46b3      	mov	fp, r6
 8013d42:	2510      	movs	r5, #16
 8013d44:	46b0      	mov	r8, r6
 8013d46:	e01d      	b.n	8013d84 <rcutils_repl_str+0x68>
 8013d48:	f10b 0b01 	add.w	fp, fp, #1
 8013d4c:	455e      	cmp	r6, fp
 8013d4e:	d211      	bcs.n	8013d74 <rcutils_repl_str+0x58>
 8013d50:	442e      	add	r6, r5
 8013d52:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013d56:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013d5a:	00b1      	lsls	r1, r6, #2
 8013d5c:	4798      	blx	r3
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	f000 8088 	beq.w	8013e74 <rcutils_repl_str+0x158>
 8013d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d68:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8013d6c:	4680      	mov	r8, r0
 8013d6e:	bf28      	it	cs
 8013d70:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8013d74:	9a01      	ldr	r2, [sp, #4]
 8013d76:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8013d7a:	1aa2      	subs	r2, r4, r2
 8013d7c:	f843 2c04 	str.w	r2, [r3, #-4]
 8013d80:	9b02      	ldr	r3, [sp, #8]
 8013d82:	18e7      	adds	r7, r4, r3
 8013d84:	4651      	mov	r1, sl
 8013d86:	4638      	mov	r0, r7
 8013d88:	f004 fc51 	bl	801862e <strstr>
 8013d8c:	4604      	mov	r4, r0
 8013d8e:	4640      	mov	r0, r8
 8013d90:	2c00      	cmp	r4, #0
 8013d92:	d1d9      	bne.n	8013d48 <rcutils_repl_str+0x2c>
 8013d94:	46b8      	mov	r8, r7
 8013d96:	4607      	mov	r7, r0
 8013d98:	4640      	mov	r0, r8
 8013d9a:	f7ec fa2b 	bl	80001f4 <strlen>
 8013d9e:	9b01      	ldr	r3, [sp, #4]
 8013da0:	eba8 0303 	sub.w	r3, r8, r3
 8013da4:	181c      	adds	r4, r3, r0
 8013da6:	9404      	str	r4, [sp, #16]
 8013da8:	f1bb 0f00 	cmp.w	fp, #0
 8013dac:	d04a      	beq.n	8013e44 <rcutils_repl_str+0x128>
 8013dae:	ee18 0a10 	vmov	r0, s16
 8013db2:	f7ec fa1f 	bl	80001f4 <strlen>
 8013db6:	9b02      	ldr	r3, [sp, #8]
 8013db8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013dbc:	1ac3      	subs	r3, r0, r3
 8013dbe:	fb0b 4303 	mla	r3, fp, r3, r4
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	9305      	str	r3, [sp, #20]
 8013dc6:	4606      	mov	r6, r0
 8013dc8:	f8d9 3000 	ldr.w	r3, [r9]
 8013dcc:	1c50      	adds	r0, r2, #1
 8013dce:	4798      	blx	r3
 8013dd0:	9003      	str	r0, [sp, #12]
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	d04f      	beq.n	8013e76 <rcutils_repl_str+0x15a>
 8013dd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013dda:	683a      	ldr	r2, [r7, #0]
 8013ddc:	4641      	mov	r1, r8
 8013dde:	f004 fcc8 	bl	8018772 <memcpy>
 8013de2:	683d      	ldr	r5, [r7, #0]
 8013de4:	9b03      	ldr	r3, [sp, #12]
 8013de6:	9701      	str	r7, [sp, #4]
 8013de8:	46ba      	mov	sl, r7
 8013dea:	441d      	add	r5, r3
 8013dec:	9f02      	ldr	r7, [sp, #8]
 8013dee:	f8cd 9008 	str.w	r9, [sp, #8]
 8013df2:	2401      	movs	r4, #1
 8013df4:	46d1      	mov	r9, sl
 8013df6:	ee18 aa10 	vmov	sl, s16
 8013dfa:	e00a      	b.n	8013e12 <rcutils_repl_str+0xf6>
 8013dfc:	f8d9 5000 	ldr.w	r5, [r9]
 8013e00:	1aaa      	subs	r2, r5, r2
 8013e02:	1885      	adds	r5, r0, r2
 8013e04:	f004 fcb5 	bl	8018772 <memcpy>
 8013e08:	45a3      	cmp	fp, r4
 8013e0a:	f104 0201 	add.w	r2, r4, #1
 8013e0e:	d935      	bls.n	8013e7c <rcutils_repl_str+0x160>
 8013e10:	4614      	mov	r4, r2
 8013e12:	4632      	mov	r2, r6
 8013e14:	4651      	mov	r1, sl
 8013e16:	4628      	mov	r0, r5
 8013e18:	f004 fcab 	bl	8018772 <memcpy>
 8013e1c:	f859 2b04 	ldr.w	r2, [r9], #4
 8013e20:	45a3      	cmp	fp, r4
 8013e22:	443a      	add	r2, r7
 8013e24:	eb05 0006 	add.w	r0, r5, r6
 8013e28:	eb08 0102 	add.w	r1, r8, r2
 8013e2c:	d1e6      	bne.n	8013dfc <rcutils_repl_str+0xe0>
 8013e2e:	9b04      	ldr	r3, [sp, #16]
 8013e30:	1a9a      	subs	r2, r3, r2
 8013e32:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013e36:	f004 fc9c 	bl	8018772 <memcpy>
 8013e3a:	9a03      	ldr	r2, [sp, #12]
 8013e3c:	9905      	ldr	r1, [sp, #20]
 8013e3e:	2300      	movs	r3, #0
 8013e40:	5453      	strb	r3, [r2, r1]
 8013e42:	e00b      	b.n	8013e5c <rcutils_repl_str+0x140>
 8013e44:	4620      	mov	r0, r4
 8013e46:	f8d9 3000 	ldr.w	r3, [r9]
 8013e4a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013e4e:	3001      	adds	r0, #1
 8013e50:	4798      	blx	r3
 8013e52:	9003      	str	r0, [sp, #12]
 8013e54:	b110      	cbz	r0, 8013e5c <rcutils_repl_str+0x140>
 8013e56:	9901      	ldr	r1, [sp, #4]
 8013e58:	f004 fc83 	bl	8018762 <strcpy>
 8013e5c:	4638      	mov	r0, r7
 8013e5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013e62:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013e66:	4798      	blx	r3
 8013e68:	9803      	ldr	r0, [sp, #12]
 8013e6a:	b007      	add	sp, #28
 8013e6c:	ecbd 8b02 	vpop	{d8}
 8013e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e74:	4647      	mov	r7, r8
 8013e76:	2300      	movs	r3, #0
 8013e78:	9303      	str	r3, [sp, #12]
 8013e7a:	e7ef      	b.n	8013e5c <rcutils_repl_str+0x140>
 8013e7c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013e80:	e7db      	b.n	8013e3a <rcutils_repl_str+0x11e>
 8013e82:	bf00      	nop

08013e84 <rcutils_snprintf>:
 8013e84:	b40c      	push	{r2, r3}
 8013e86:	b530      	push	{r4, r5, lr}
 8013e88:	b083      	sub	sp, #12
 8013e8a:	ab06      	add	r3, sp, #24
 8013e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e90:	9301      	str	r3, [sp, #4]
 8013e92:	b152      	cbz	r2, 8013eaa <rcutils_snprintf+0x26>
 8013e94:	b138      	cbz	r0, 8013ea6 <rcutils_snprintf+0x22>
 8013e96:	b141      	cbz	r1, 8013eaa <rcutils_snprintf+0x26>
 8013e98:	f004 fad6 	bl	8018448 <vsniprintf>
 8013e9c:	b003      	add	sp, #12
 8013e9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ea2:	b002      	add	sp, #8
 8013ea4:	4770      	bx	lr
 8013ea6:	2900      	cmp	r1, #0
 8013ea8:	d0f6      	beq.n	8013e98 <rcutils_snprintf+0x14>
 8013eaa:	f004 fc2d 	bl	8018708 <__errno>
 8013eae:	2316      	movs	r3, #22
 8013eb0:	6003      	str	r3, [r0, #0]
 8013eb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013eb6:	e7f1      	b.n	8013e9c <rcutils_snprintf+0x18>

08013eb8 <rcutils_vsnprintf>:
 8013eb8:	b570      	push	{r4, r5, r6, lr}
 8013eba:	b13a      	cbz	r2, 8013ecc <rcutils_vsnprintf+0x14>
 8013ebc:	b120      	cbz	r0, 8013ec8 <rcutils_vsnprintf+0x10>
 8013ebe:	b129      	cbz	r1, 8013ecc <rcutils_vsnprintf+0x14>
 8013ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ec4:	f004 bac0 	b.w	8018448 <vsniprintf>
 8013ec8:	2900      	cmp	r1, #0
 8013eca:	d0f9      	beq.n	8013ec0 <rcutils_vsnprintf+0x8>
 8013ecc:	f004 fc1c 	bl	8018708 <__errno>
 8013ed0:	2316      	movs	r3, #22
 8013ed2:	6003      	str	r3, [r0, #0]
 8013ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ed8:	bd70      	pop	{r4, r5, r6, pc}
 8013eda:	bf00      	nop

08013edc <rcutils_strdup>:
 8013edc:	b084      	sub	sp, #16
 8013ede:	b570      	push	{r4, r5, r6, lr}
 8013ee0:	b082      	sub	sp, #8
 8013ee2:	ac07      	add	r4, sp, #28
 8013ee4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8013ee8:	4605      	mov	r5, r0
 8013eea:	b1b0      	cbz	r0, 8013f1a <rcutils_strdup+0x3e>
 8013eec:	f7ec f982 	bl	80001f4 <strlen>
 8013ef0:	1c42      	adds	r2, r0, #1
 8013ef2:	9b07      	ldr	r3, [sp, #28]
 8013ef4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013ef6:	9201      	str	r2, [sp, #4]
 8013ef8:	4606      	mov	r6, r0
 8013efa:	4610      	mov	r0, r2
 8013efc:	4798      	blx	r3
 8013efe:	4604      	mov	r4, r0
 8013f00:	b128      	cbz	r0, 8013f0e <rcutils_strdup+0x32>
 8013f02:	9a01      	ldr	r2, [sp, #4]
 8013f04:	4629      	mov	r1, r5
 8013f06:	f004 fc34 	bl	8018772 <memcpy>
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	55a3      	strb	r3, [r4, r6]
 8013f0e:	4620      	mov	r0, r4
 8013f10:	b002      	add	sp, #8
 8013f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f16:	b004      	add	sp, #16
 8013f18:	4770      	bx	lr
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	e7f7      	b.n	8013f0e <rcutils_strdup+0x32>
 8013f1e:	bf00      	nop

08013f20 <rcutils_strndup>:
 8013f20:	b082      	sub	sp, #8
 8013f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f24:	ac06      	add	r4, sp, #24
 8013f26:	e884 000c 	stmia.w	r4, {r2, r3}
 8013f2a:	4605      	mov	r5, r0
 8013f2c:	b188      	cbz	r0, 8013f52 <rcutils_strndup+0x32>
 8013f2e:	1c4f      	adds	r7, r1, #1
 8013f30:	460e      	mov	r6, r1
 8013f32:	4638      	mov	r0, r7
 8013f34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013f36:	4790      	blx	r2
 8013f38:	4604      	mov	r4, r0
 8013f3a:	b128      	cbz	r0, 8013f48 <rcutils_strndup+0x28>
 8013f3c:	463a      	mov	r2, r7
 8013f3e:	4629      	mov	r1, r5
 8013f40:	f004 fc17 	bl	8018772 <memcpy>
 8013f44:	2300      	movs	r3, #0
 8013f46:	55a3      	strb	r3, [r4, r6]
 8013f48:	4620      	mov	r0, r4
 8013f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013f4e:	b002      	add	sp, #8
 8013f50:	4770      	bx	lr
 8013f52:	4604      	mov	r4, r0
 8013f54:	e7f8      	b.n	8013f48 <rcutils_strndup+0x28>
 8013f56:	bf00      	nop

08013f58 <rcutils_get_zero_initialized_string_map>:
 8013f58:	4b01      	ldr	r3, [pc, #4]	@ (8013f60 <rcutils_get_zero_initialized_string_map+0x8>)
 8013f5a:	2000      	movs	r0, #0
 8013f5c:	6018      	str	r0, [r3, #0]
 8013f5e:	4770      	bx	lr
 8013f60:	2000e118 	.word	0x2000e118

08013f64 <rcutils_string_map_reserve>:
 8013f64:	2800      	cmp	r0, #0
 8013f66:	d05f      	beq.n	8014028 <rcutils_string_map_reserve+0xc4>
 8013f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f6c:	460c      	mov	r4, r1
 8013f6e:	6801      	ldr	r1, [r0, #0]
 8013f70:	b082      	sub	sp, #8
 8013f72:	4605      	mov	r5, r0
 8013f74:	b129      	cbz	r1, 8013f82 <rcutils_string_map_reserve+0x1e>
 8013f76:	68cb      	ldr	r3, [r1, #12]
 8013f78:	42a3      	cmp	r3, r4
 8013f7a:	d906      	bls.n	8013f8a <rcutils_string_map_reserve+0x26>
 8013f7c:	461c      	mov	r4, r3
 8013f7e:	2900      	cmp	r1, #0
 8013f80:	d1f9      	bne.n	8013f76 <rcutils_string_map_reserve+0x12>
 8013f82:	201f      	movs	r0, #31
 8013f84:	b002      	add	sp, #8
 8013f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f8a:	688b      	ldr	r3, [r1, #8]
 8013f8c:	42a3      	cmp	r3, r4
 8013f8e:	d047      	beq.n	8014020 <rcutils_string_map_reserve+0xbc>
 8013f90:	6a0e      	ldr	r6, [r1, #32]
 8013f92:	2c00      	cmp	r4, #0
 8013f94:	d034      	beq.n	8014000 <rcutils_string_map_reserve+0x9c>
 8013f96:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8013f9a:	d243      	bcs.n	8014024 <rcutils_string_map_reserve+0xc0>
 8013f9c:	00a7      	lsls	r7, r4, #2
 8013f9e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8013fa2:	6808      	ldr	r0, [r1, #0]
 8013fa4:	4632      	mov	r2, r6
 8013fa6:	4639      	mov	r1, r7
 8013fa8:	47c0      	blx	r8
 8013faa:	2800      	cmp	r0, #0
 8013fac:	d03a      	beq.n	8014024 <rcutils_string_map_reserve+0xc0>
 8013fae:	682b      	ldr	r3, [r5, #0]
 8013fb0:	4632      	mov	r2, r6
 8013fb2:	6018      	str	r0, [r3, #0]
 8013fb4:	4639      	mov	r1, r7
 8013fb6:	6858      	ldr	r0, [r3, #4]
 8013fb8:	47c0      	blx	r8
 8013fba:	2800      	cmp	r0, #0
 8013fbc:	d032      	beq.n	8014024 <rcutils_string_map_reserve+0xc0>
 8013fbe:	682d      	ldr	r5, [r5, #0]
 8013fc0:	68ab      	ldr	r3, [r5, #8]
 8013fc2:	6068      	str	r0, [r5, #4]
 8013fc4:	42a3      	cmp	r3, r4
 8013fc6:	d226      	bcs.n	8014016 <rcutils_string_map_reserve+0xb2>
 8013fc8:	682a      	ldr	r2, [r5, #0]
 8013fca:	eb00 0c07 	add.w	ip, r0, r7
 8013fce:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8013fd2:	45e6      	cmp	lr, ip
 8013fd4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8013fd8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8013fdc:	d203      	bcs.n	8013fe6 <rcutils_string_map_reserve+0x82>
 8013fde:	eb02 0c07 	add.w	ip, r2, r7
 8013fe2:	4566      	cmp	r6, ip
 8013fe4:	d322      	bcc.n	801402c <rcutils_string_map_reserve+0xc8>
 8013fe6:	1ae3      	subs	r3, r4, r3
 8013fe8:	009a      	lsls	r2, r3, #2
 8013fea:	4670      	mov	r0, lr
 8013fec:	2100      	movs	r1, #0
 8013fee:	9201      	str	r2, [sp, #4]
 8013ff0:	f004 faf6 	bl	80185e0 <memset>
 8013ff4:	9a01      	ldr	r2, [sp, #4]
 8013ff6:	2100      	movs	r1, #0
 8013ff8:	4630      	mov	r0, r6
 8013ffa:	f004 faf1 	bl	80185e0 <memset>
 8013ffe:	e00a      	b.n	8014016 <rcutils_string_map_reserve+0xb2>
 8014000:	694f      	ldr	r7, [r1, #20]
 8014002:	6808      	ldr	r0, [r1, #0]
 8014004:	4631      	mov	r1, r6
 8014006:	47b8      	blx	r7
 8014008:	682b      	ldr	r3, [r5, #0]
 801400a:	4631      	mov	r1, r6
 801400c:	6858      	ldr	r0, [r3, #4]
 801400e:	601c      	str	r4, [r3, #0]
 8014010:	47b8      	blx	r7
 8014012:	682d      	ldr	r5, [r5, #0]
 8014014:	606c      	str	r4, [r5, #4]
 8014016:	2000      	movs	r0, #0
 8014018:	60ac      	str	r4, [r5, #8]
 801401a:	b002      	add	sp, #8
 801401c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014020:	2000      	movs	r0, #0
 8014022:	e7af      	b.n	8013f84 <rcutils_string_map_reserve+0x20>
 8014024:	200a      	movs	r0, #10
 8014026:	e7ad      	b.n	8013f84 <rcutils_string_map_reserve+0x20>
 8014028:	200b      	movs	r0, #11
 801402a:	4770      	bx	lr
 801402c:	1f0b      	subs	r3, r1, #4
 801402e:	4418      	add	r0, r3
 8014030:	4413      	add	r3, r2
 8014032:	3a04      	subs	r2, #4
 8014034:	4417      	add	r7, r2
 8014036:	2200      	movs	r2, #0
 8014038:	f843 2f04 	str.w	r2, [r3, #4]!
 801403c:	42bb      	cmp	r3, r7
 801403e:	f840 2f04 	str.w	r2, [r0, #4]!
 8014042:	d1f9      	bne.n	8014038 <rcutils_string_map_reserve+0xd4>
 8014044:	e7e7      	b.n	8014016 <rcutils_string_map_reserve+0xb2>
 8014046:	bf00      	nop

08014048 <rcutils_string_map_init>:
 8014048:	b082      	sub	sp, #8
 801404a:	b570      	push	{r4, r5, r6, lr}
 801404c:	ac04      	add	r4, sp, #16
 801404e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014052:	b380      	cbz	r0, 80140b6 <rcutils_string_map_init+0x6e>
 8014054:	6806      	ldr	r6, [r0, #0]
 8014056:	4604      	mov	r4, r0
 8014058:	b12e      	cbz	r6, 8014066 <rcutils_string_map_init+0x1e>
 801405a:	251e      	movs	r5, #30
 801405c:	4628      	mov	r0, r5
 801405e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014062:	b002      	add	sp, #8
 8014064:	4770      	bx	lr
 8014066:	a804      	add	r0, sp, #16
 8014068:	460d      	mov	r5, r1
 801406a:	f7f8 fd2d 	bl	800cac8 <rcutils_allocator_is_valid>
 801406e:	b310      	cbz	r0, 80140b6 <rcutils_string_map_init+0x6e>
 8014070:	9b04      	ldr	r3, [sp, #16]
 8014072:	9908      	ldr	r1, [sp, #32]
 8014074:	2024      	movs	r0, #36	@ 0x24
 8014076:	4798      	blx	r3
 8014078:	6020      	str	r0, [r4, #0]
 801407a:	b310      	cbz	r0, 80140c2 <rcutils_string_map_init+0x7a>
 801407c:	f10d 0e10 	add.w	lr, sp, #16
 8014080:	e9c0 6600 	strd	r6, r6, [r0]
 8014084:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014088:	f100 0c10 	add.w	ip, r0, #16
 801408c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014090:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014094:	f8de 3000 	ldr.w	r3, [lr]
 8014098:	f8cc 3000 	str.w	r3, [ip]
 801409c:	4629      	mov	r1, r5
 801409e:	4620      	mov	r0, r4
 80140a0:	f7ff ff60 	bl	8013f64 <rcutils_string_map_reserve>
 80140a4:	4605      	mov	r5, r0
 80140a6:	2800      	cmp	r0, #0
 80140a8:	d0d8      	beq.n	801405c <rcutils_string_map_init+0x14>
 80140aa:	9b05      	ldr	r3, [sp, #20]
 80140ac:	9908      	ldr	r1, [sp, #32]
 80140ae:	6820      	ldr	r0, [r4, #0]
 80140b0:	4798      	blx	r3
 80140b2:	6026      	str	r6, [r4, #0]
 80140b4:	e7d2      	b.n	801405c <rcutils_string_map_init+0x14>
 80140b6:	250b      	movs	r5, #11
 80140b8:	4628      	mov	r0, r5
 80140ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140be:	b002      	add	sp, #8
 80140c0:	4770      	bx	lr
 80140c2:	250a      	movs	r5, #10
 80140c4:	e7ca      	b.n	801405c <rcutils_string_map_init+0x14>
 80140c6:	bf00      	nop

080140c8 <rcutils_string_map_fini>:
 80140c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140cc:	b082      	sub	sp, #8
 80140ce:	2800      	cmp	r0, #0
 80140d0:	d03a      	beq.n	8014148 <rcutils_string_map_fini+0x80>
 80140d2:	6804      	ldr	r4, [r0, #0]
 80140d4:	4606      	mov	r6, r0
 80140d6:	2c00      	cmp	r4, #0
 80140d8:	d032      	beq.n	8014140 <rcutils_string_map_fini+0x78>
 80140da:	68a3      	ldr	r3, [r4, #8]
 80140dc:	b32b      	cbz	r3, 801412a <rcutils_string_map_fini+0x62>
 80140de:	2500      	movs	r5, #0
 80140e0:	6822      	ldr	r2, [r4, #0]
 80140e2:	462f      	mov	r7, r5
 80140e4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80140e8:	b1e0      	cbz	r0, 8014124 <rcutils_string_map_fini+0x5c>
 80140ea:	6a21      	ldr	r1, [r4, #32]
 80140ec:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80140f0:	9101      	str	r1, [sp, #4]
 80140f2:	47c0      	blx	r8
 80140f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80140f8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80140fc:	9901      	ldr	r1, [sp, #4]
 80140fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014102:	47c0      	blx	r8
 8014104:	68e3      	ldr	r3, [r4, #12]
 8014106:	6862      	ldr	r2, [r4, #4]
 8014108:	3b01      	subs	r3, #1
 801410a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801410e:	60e3      	str	r3, [r4, #12]
 8014110:	6834      	ldr	r4, [r6, #0]
 8014112:	68a3      	ldr	r3, [r4, #8]
 8014114:	3501      	adds	r5, #1
 8014116:	429d      	cmp	r5, r3
 8014118:	d207      	bcs.n	801412a <rcutils_string_map_fini+0x62>
 801411a:	6822      	ldr	r2, [r4, #0]
 801411c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014120:	2800      	cmp	r0, #0
 8014122:	d1e2      	bne.n	80140ea <rcutils_string_map_fini+0x22>
 8014124:	3501      	adds	r5, #1
 8014126:	429d      	cmp	r5, r3
 8014128:	d3dc      	bcc.n	80140e4 <rcutils_string_map_fini+0x1c>
 801412a:	2100      	movs	r1, #0
 801412c:	4630      	mov	r0, r6
 801412e:	f7ff ff19 	bl	8013f64 <rcutils_string_map_reserve>
 8014132:	4604      	mov	r4, r0
 8014134:	b920      	cbnz	r0, 8014140 <rcutils_string_map_fini+0x78>
 8014136:	6830      	ldr	r0, [r6, #0]
 8014138:	6943      	ldr	r3, [r0, #20]
 801413a:	6a01      	ldr	r1, [r0, #32]
 801413c:	4798      	blx	r3
 801413e:	6034      	str	r4, [r6, #0]
 8014140:	4620      	mov	r0, r4
 8014142:	b002      	add	sp, #8
 8014144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014148:	240b      	movs	r4, #11
 801414a:	4620      	mov	r0, r4
 801414c:	b002      	add	sp, #8
 801414e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014152:	bf00      	nop

08014154 <rcutils_string_map_getn>:
 8014154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014158:	b300      	cbz	r0, 801419c <rcutils_string_map_getn+0x48>
 801415a:	6807      	ldr	r7, [r0, #0]
 801415c:	b1ff      	cbz	r7, 801419e <rcutils_string_map_getn+0x4a>
 801415e:	4688      	mov	r8, r1
 8014160:	b1e1      	cbz	r1, 801419c <rcutils_string_map_getn+0x48>
 8014162:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014166:	683e      	ldr	r6, [r7, #0]
 8014168:	f1ba 0f00 	cmp.w	sl, #0
 801416c:	d016      	beq.n	801419c <rcutils_string_map_getn+0x48>
 801416e:	4691      	mov	r9, r2
 8014170:	3e04      	subs	r6, #4
 8014172:	2400      	movs	r4, #0
 8014174:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014178:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801417c:	4628      	mov	r0, r5
 801417e:	3401      	adds	r4, #1
 8014180:	b155      	cbz	r5, 8014198 <rcutils_string_map_getn+0x44>
 8014182:	f7ec f837 	bl	80001f4 <strlen>
 8014186:	4548      	cmp	r0, r9
 8014188:	4602      	mov	r2, r0
 801418a:	4629      	mov	r1, r5
 801418c:	bf38      	it	cc
 801418e:	464a      	movcc	r2, r9
 8014190:	4640      	mov	r0, r8
 8014192:	f004 fa3a 	bl	801860a <strncmp>
 8014196:	b128      	cbz	r0, 80141a4 <rcutils_string_map_getn+0x50>
 8014198:	45a2      	cmp	sl, r4
 801419a:	d1eb      	bne.n	8014174 <rcutils_string_map_getn+0x20>
 801419c:	2700      	movs	r7, #0
 801419e:	4638      	mov	r0, r7
 80141a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f853 700b 	ldr.w	r7, [r3, fp]
 80141aa:	4638      	mov	r0, r7
 80141ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141b0 <rmw_get_zero_initialized_context>:
 80141b0:	b510      	push	{r4, lr}
 80141b2:	4604      	mov	r4, r0
 80141b4:	3010      	adds	r0, #16
 80141b6:	f000 f80b 	bl	80141d0 <rmw_get_zero_initialized_init_options>
 80141ba:	2300      	movs	r3, #0
 80141bc:	2000      	movs	r0, #0
 80141be:	2100      	movs	r1, #0
 80141c0:	e9c4 0100 	strd	r0, r1, [r4]
 80141c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80141c8:	60a3      	str	r3, [r4, #8]
 80141ca:	4620      	mov	r0, r4
 80141cc:	bd10      	pop	{r4, pc}
 80141ce:	bf00      	nop

080141d0 <rmw_get_zero_initialized_init_options>:
 80141d0:	b510      	push	{r4, lr}
 80141d2:	2238      	movs	r2, #56	@ 0x38
 80141d4:	4604      	mov	r4, r0
 80141d6:	2100      	movs	r1, #0
 80141d8:	f004 fa02 	bl	80185e0 <memset>
 80141dc:	f104 0010 	add.w	r0, r4, #16
 80141e0:	f000 f806 	bl	80141f0 <rmw_get_default_security_options>
 80141e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80141e8:	60e3      	str	r3, [r4, #12]
 80141ea:	4620      	mov	r0, r4
 80141ec:	bd10      	pop	{r4, pc}
 80141ee:	bf00      	nop

080141f0 <rmw_get_default_security_options>:
 80141f0:	2200      	movs	r2, #0
 80141f2:	7002      	strb	r2, [r0, #0]
 80141f4:	6042      	str	r2, [r0, #4]
 80141f6:	4770      	bx	lr

080141f8 <rmw_subscription_content_filter_options_fini>:
 80141f8:	b1b0      	cbz	r0, 8014228 <rmw_subscription_content_filter_options_fini+0x30>
 80141fa:	b538      	push	{r3, r4, r5, lr}
 80141fc:	4604      	mov	r4, r0
 80141fe:	4608      	mov	r0, r1
 8014200:	460d      	mov	r5, r1
 8014202:	f7f8 fc61 	bl	800cac8 <rcutils_allocator_is_valid>
 8014206:	b168      	cbz	r0, 8014224 <rmw_subscription_content_filter_options_fini+0x2c>
 8014208:	6820      	ldr	r0, [r4, #0]
 801420a:	b120      	cbz	r0, 8014216 <rmw_subscription_content_filter_options_fini+0x1e>
 801420c:	686b      	ldr	r3, [r5, #4]
 801420e:	6929      	ldr	r1, [r5, #16]
 8014210:	4798      	blx	r3
 8014212:	2300      	movs	r3, #0
 8014214:	6023      	str	r3, [r4, #0]
 8014216:	1d20      	adds	r0, r4, #4
 8014218:	f003 fb04 	bl	8017824 <rcutils_string_array_fini>
 801421c:	3800      	subs	r0, #0
 801421e:	bf18      	it	ne
 8014220:	2001      	movne	r0, #1
 8014222:	bd38      	pop	{r3, r4, r5, pc}
 8014224:	200b      	movs	r0, #11
 8014226:	bd38      	pop	{r3, r4, r5, pc}
 8014228:	200b      	movs	r0, #11
 801422a:	4770      	bx	lr

0801422c <rmw_get_default_subscription_options>:
 801422c:	2200      	movs	r2, #0
 801422e:	e9c0 2200 	strd	r2, r2, [r0]
 8014232:	6082      	str	r2, [r0, #8]
 8014234:	4770      	bx	lr
 8014236:	bf00      	nop

08014238 <rmw_time_equal>:
 8014238:	b4f0      	push	{r4, r5, r6, r7}
 801423a:	b084      	sub	sp, #16
 801423c:	ac04      	add	r4, sp, #16
 801423e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014242:	4603      	mov	r3, r0
 8014244:	4924      	ldr	r1, [pc, #144]	@ (80142d8 <rmw_time_equal+0xa0>)
 8014246:	9e03      	ldr	r6, [sp, #12]
 8014248:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801424c:	2202      	movs	r2, #2
 801424e:	4299      	cmp	r1, r3
 8014250:	41aa      	sbcs	r2, r5
 8014252:	d330      	bcc.n	80142b6 <rmw_time_equal+0x7e>
 8014254:	4c21      	ldr	r4, [pc, #132]	@ (80142dc <rmw_time_equal+0xa4>)
 8014256:	fba3 3204 	umull	r3, r2, r3, r4
 801425a:	fb04 2205 	mla	r2, r4, r5, r2
 801425e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014262:	43dd      	mvns	r5, r3
 8014264:	1a8c      	subs	r4, r1, r2
 8014266:	4285      	cmp	r5, r0
 8014268:	41b4      	sbcs	r4, r6
 801426a:	d332      	bcc.n	80142d2 <rmw_time_equal+0x9a>
 801426c:	eb10 0c03 	adds.w	ip, r0, r3
 8014270:	eb42 0106 	adc.w	r1, r2, r6
 8014274:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014278:	4817      	ldr	r0, [pc, #92]	@ (80142d8 <rmw_time_equal+0xa0>)
 801427a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801427c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801427e:	2202      	movs	r2, #2
 8014280:	4298      	cmp	r0, r3
 8014282:	41b2      	sbcs	r2, r6
 8014284:	d31c      	bcc.n	80142c0 <rmw_time_equal+0x88>
 8014286:	4c15      	ldr	r4, [pc, #84]	@ (80142dc <rmw_time_equal+0xa4>)
 8014288:	fba3 3204 	umull	r3, r2, r3, r4
 801428c:	fb04 2206 	mla	r2, r4, r6, r2
 8014290:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014294:	43de      	mvns	r6, r3
 8014296:	1a84      	subs	r4, r0, r2
 8014298:	42ae      	cmp	r6, r5
 801429a:	41bc      	sbcs	r4, r7
 801429c:	d315      	bcc.n	80142ca <rmw_time_equal+0x92>
 801429e:	195b      	adds	r3, r3, r5
 80142a0:	eb42 0207 	adc.w	r2, r2, r7
 80142a4:	428a      	cmp	r2, r1
 80142a6:	bf08      	it	eq
 80142a8:	4563      	cmpeq	r3, ip
 80142aa:	bf0c      	ite	eq
 80142ac:	2001      	moveq	r0, #1
 80142ae:	2000      	movne	r0, #0
 80142b0:	b004      	add	sp, #16
 80142b2:	bcf0      	pop	{r4, r5, r6, r7}
 80142b4:	4770      	bx	lr
 80142b6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80142ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80142be:	e7d9      	b.n	8014274 <rmw_time_equal+0x3c>
 80142c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80142c4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80142c8:	e7ec      	b.n	80142a4 <rmw_time_equal+0x6c>
 80142ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80142ce:	4602      	mov	r2, r0
 80142d0:	e7e8      	b.n	80142a4 <rmw_time_equal+0x6c>
 80142d2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80142d6:	e7cd      	b.n	8014274 <rmw_time_equal+0x3c>
 80142d8:	25c17d04 	.word	0x25c17d04
 80142dc:	3b9aca00 	.word	0x3b9aca00

080142e0 <rmw_time_total_nsec>:
 80142e0:	b470      	push	{r4, r5, r6}
 80142e2:	b085      	sub	sp, #20
 80142e4:	ac04      	add	r4, sp, #16
 80142e6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80142ea:	4603      	mov	r3, r0
 80142ec:	4912      	ldr	r1, [pc, #72]	@ (8014338 <rmw_time_total_nsec+0x58>)
 80142ee:	9e03      	ldr	r6, [sp, #12]
 80142f0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80142f4:	2202      	movs	r2, #2
 80142f6:	4299      	cmp	r1, r3
 80142f8:	41aa      	sbcs	r2, r5
 80142fa:	d311      	bcc.n	8014320 <rmw_time_total_nsec+0x40>
 80142fc:	4c0f      	ldr	r4, [pc, #60]	@ (801433c <rmw_time_total_nsec+0x5c>)
 80142fe:	fba3 3204 	umull	r3, r2, r3, r4
 8014302:	fb04 2205 	mla	r2, r4, r5, r2
 8014306:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801430a:	43dd      	mvns	r5, r3
 801430c:	1a8c      	subs	r4, r1, r2
 801430e:	4285      	cmp	r5, r0
 8014310:	41b4      	sbcs	r4, r6
 8014312:	d30c      	bcc.n	801432e <rmw_time_total_nsec+0x4e>
 8014314:	1818      	adds	r0, r3, r0
 8014316:	eb42 0106 	adc.w	r1, r2, r6
 801431a:	b005      	add	sp, #20
 801431c:	bc70      	pop	{r4, r5, r6}
 801431e:	4770      	bx	lr
 8014320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014324:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014328:	b005      	add	sp, #20
 801432a:	bc70      	pop	{r4, r5, r6}
 801432c:	4770      	bx	lr
 801432e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014332:	b005      	add	sp, #20
 8014334:	bc70      	pop	{r4, r5, r6}
 8014336:	4770      	bx	lr
 8014338:	25c17d04 	.word	0x25c17d04
 801433c:	3b9aca00 	.word	0x3b9aca00

08014340 <rmw_get_zero_initialized_message_info>:
 8014340:	b510      	push	{r4, lr}
 8014342:	2240      	movs	r2, #64	@ 0x40
 8014344:	4604      	mov	r4, r0
 8014346:	2100      	movs	r1, #0
 8014348:	f004 f94a 	bl	80185e0 <memset>
 801434c:	4620      	mov	r0, r4
 801434e:	bd10      	pop	{r4, pc}

08014350 <rmw_validate_full_topic_name>:
 8014350:	2800      	cmp	r0, #0
 8014352:	d057      	beq.n	8014404 <rmw_validate_full_topic_name+0xb4>
 8014354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014358:	460d      	mov	r5, r1
 801435a:	2900      	cmp	r1, #0
 801435c:	d054      	beq.n	8014408 <rmw_validate_full_topic_name+0xb8>
 801435e:	4616      	mov	r6, r2
 8014360:	4604      	mov	r4, r0
 8014362:	f7eb ff47 	bl	80001f4 <strlen>
 8014366:	b148      	cbz	r0, 801437c <rmw_validate_full_topic_name+0x2c>
 8014368:	7823      	ldrb	r3, [r4, #0]
 801436a:	2b2f      	cmp	r3, #47	@ 0x2f
 801436c:	d00d      	beq.n	801438a <rmw_validate_full_topic_name+0x3a>
 801436e:	2302      	movs	r3, #2
 8014370:	602b      	str	r3, [r5, #0]
 8014372:	b13e      	cbz	r6, 8014384 <rmw_validate_full_topic_name+0x34>
 8014374:	2000      	movs	r0, #0
 8014376:	6030      	str	r0, [r6, #0]
 8014378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801437c:	2301      	movs	r3, #1
 801437e:	602b      	str	r3, [r5, #0]
 8014380:	2e00      	cmp	r6, #0
 8014382:	d1f7      	bne.n	8014374 <rmw_validate_full_topic_name+0x24>
 8014384:	2000      	movs	r0, #0
 8014386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801438a:	1e43      	subs	r3, r0, #1
 801438c:	5ce2      	ldrb	r2, [r4, r3]
 801438e:	2a2f      	cmp	r2, #47	@ 0x2f
 8014390:	d03c      	beq.n	801440c <rmw_validate_full_topic_name+0xbc>
 8014392:	1e63      	subs	r3, r4, #1
 8014394:	eb03 0800 	add.w	r8, r3, r0
 8014398:	f1c4 0e01 	rsb	lr, r4, #1
 801439c:	eb0e 0703 	add.w	r7, lr, r3
 80143a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80143a4:	f021 0220 	bic.w	r2, r1, #32
 80143a8:	3a41      	subs	r2, #65	@ 0x41
 80143aa:	2a19      	cmp	r2, #25
 80143ac:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80143b0:	d90b      	bls.n	80143ca <rmw_validate_full_topic_name+0x7a>
 80143b2:	295f      	cmp	r1, #95	@ 0x5f
 80143b4:	d009      	beq.n	80143ca <rmw_validate_full_topic_name+0x7a>
 80143b6:	f1bc 0f0a 	cmp.w	ip, #10
 80143ba:	d906      	bls.n	80143ca <rmw_validate_full_topic_name+0x7a>
 80143bc:	2304      	movs	r3, #4
 80143be:	602b      	str	r3, [r5, #0]
 80143c0:	2e00      	cmp	r6, #0
 80143c2:	d0df      	beq.n	8014384 <rmw_validate_full_topic_name+0x34>
 80143c4:	6037      	str	r7, [r6, #0]
 80143c6:	2000      	movs	r0, #0
 80143c8:	e7d6      	b.n	8014378 <rmw_validate_full_topic_name+0x28>
 80143ca:	4543      	cmp	r3, r8
 80143cc:	d1e6      	bne.n	801439c <rmw_validate_full_topic_name+0x4c>
 80143ce:	4f1a      	ldr	r7, [pc, #104]	@ (8014438 <rmw_validate_full_topic_name+0xe8>)
 80143d0:	2301      	movs	r3, #1
 80143d2:	e004      	b.n	80143de <rmw_validate_full_topic_name+0x8e>
 80143d4:	4298      	cmp	r0, r3
 80143d6:	f104 0401 	add.w	r4, r4, #1
 80143da:	d91c      	bls.n	8014416 <rmw_validate_full_topic_name+0xc6>
 80143dc:	4613      	mov	r3, r2
 80143de:	4298      	cmp	r0, r3
 80143e0:	f103 0201 	add.w	r2, r3, #1
 80143e4:	d0f6      	beq.n	80143d4 <rmw_validate_full_topic_name+0x84>
 80143e6:	7821      	ldrb	r1, [r4, #0]
 80143e8:	292f      	cmp	r1, #47	@ 0x2f
 80143ea:	d1f3      	bne.n	80143d4 <rmw_validate_full_topic_name+0x84>
 80143ec:	7861      	ldrb	r1, [r4, #1]
 80143ee:	292f      	cmp	r1, #47	@ 0x2f
 80143f0:	d01c      	beq.n	801442c <rmw_validate_full_topic_name+0xdc>
 80143f2:	5dc9      	ldrb	r1, [r1, r7]
 80143f4:	0749      	lsls	r1, r1, #29
 80143f6:	d5ed      	bpl.n	80143d4 <rmw_validate_full_topic_name+0x84>
 80143f8:	2206      	movs	r2, #6
 80143fa:	602a      	str	r2, [r5, #0]
 80143fc:	2e00      	cmp	r6, #0
 80143fe:	d0c1      	beq.n	8014384 <rmw_validate_full_topic_name+0x34>
 8014400:	6033      	str	r3, [r6, #0]
 8014402:	e7bf      	b.n	8014384 <rmw_validate_full_topic_name+0x34>
 8014404:	200b      	movs	r0, #11
 8014406:	4770      	bx	lr
 8014408:	200b      	movs	r0, #11
 801440a:	e7b5      	b.n	8014378 <rmw_validate_full_topic_name+0x28>
 801440c:	2203      	movs	r2, #3
 801440e:	602a      	str	r2, [r5, #0]
 8014410:	2e00      	cmp	r6, #0
 8014412:	d1f5      	bne.n	8014400 <rmw_validate_full_topic_name+0xb0>
 8014414:	e7b6      	b.n	8014384 <rmw_validate_full_topic_name+0x34>
 8014416:	28f7      	cmp	r0, #247	@ 0xf7
 8014418:	d802      	bhi.n	8014420 <rmw_validate_full_topic_name+0xd0>
 801441a:	2000      	movs	r0, #0
 801441c:	6028      	str	r0, [r5, #0]
 801441e:	e7ab      	b.n	8014378 <rmw_validate_full_topic_name+0x28>
 8014420:	2307      	movs	r3, #7
 8014422:	602b      	str	r3, [r5, #0]
 8014424:	2e00      	cmp	r6, #0
 8014426:	d0ad      	beq.n	8014384 <rmw_validate_full_topic_name+0x34>
 8014428:	23f6      	movs	r3, #246	@ 0xf6
 801442a:	e7e9      	b.n	8014400 <rmw_validate_full_topic_name+0xb0>
 801442c:	2205      	movs	r2, #5
 801442e:	602a      	str	r2, [r5, #0]
 8014430:	2e00      	cmp	r6, #0
 8014432:	d1e5      	bne.n	8014400 <rmw_validate_full_topic_name+0xb0>
 8014434:	e7a6      	b.n	8014384 <rmw_validate_full_topic_name+0x34>
 8014436:	bf00      	nop
 8014438:	0801a5ce 	.word	0x0801a5ce

0801443c <rmw_validate_namespace_with_size>:
 801443c:	b340      	cbz	r0, 8014490 <rmw_validate_namespace_with_size+0x54>
 801443e:	b570      	push	{r4, r5, r6, lr}
 8014440:	4614      	mov	r4, r2
 8014442:	b0c2      	sub	sp, #264	@ 0x108
 8014444:	b332      	cbz	r2, 8014494 <rmw_validate_namespace_with_size+0x58>
 8014446:	2901      	cmp	r1, #1
 8014448:	460d      	mov	r5, r1
 801444a:	461e      	mov	r6, r3
 801444c:	d102      	bne.n	8014454 <rmw_validate_namespace_with_size+0x18>
 801444e:	7803      	ldrb	r3, [r0, #0]
 8014450:	2b2f      	cmp	r3, #47	@ 0x2f
 8014452:	d012      	beq.n	801447a <rmw_validate_namespace_with_size+0x3e>
 8014454:	aa01      	add	r2, sp, #4
 8014456:	4669      	mov	r1, sp
 8014458:	f7ff ff7a 	bl	8014350 <rmw_validate_full_topic_name>
 801445c:	b978      	cbnz	r0, 801447e <rmw_validate_namespace_with_size+0x42>
 801445e:	9b00      	ldr	r3, [sp, #0]
 8014460:	b14b      	cbz	r3, 8014476 <rmw_validate_namespace_with_size+0x3a>
 8014462:	2b07      	cmp	r3, #7
 8014464:	d007      	beq.n	8014476 <rmw_validate_namespace_with_size+0x3a>
 8014466:	1e5a      	subs	r2, r3, #1
 8014468:	2a05      	cmp	r2, #5
 801446a:	d82b      	bhi.n	80144c4 <rmw_validate_namespace_with_size+0x88>
 801446c:	e8df f002 	tbb	[pc, r2]
 8014470:	1e212427 	.word	0x1e212427
 8014474:	141b      	.short	0x141b
 8014476:	2df5      	cmp	r5, #245	@ 0xf5
 8014478:	d803      	bhi.n	8014482 <rmw_validate_namespace_with_size+0x46>
 801447a:	2000      	movs	r0, #0
 801447c:	6020      	str	r0, [r4, #0]
 801447e:	b042      	add	sp, #264	@ 0x108
 8014480:	bd70      	pop	{r4, r5, r6, pc}
 8014482:	2307      	movs	r3, #7
 8014484:	6023      	str	r3, [r4, #0]
 8014486:	2e00      	cmp	r6, #0
 8014488:	d0f9      	beq.n	801447e <rmw_validate_namespace_with_size+0x42>
 801448a:	23f4      	movs	r3, #244	@ 0xf4
 801448c:	6033      	str	r3, [r6, #0]
 801448e:	e7f6      	b.n	801447e <rmw_validate_namespace_with_size+0x42>
 8014490:	200b      	movs	r0, #11
 8014492:	4770      	bx	lr
 8014494:	200b      	movs	r0, #11
 8014496:	e7f2      	b.n	801447e <rmw_validate_namespace_with_size+0x42>
 8014498:	2306      	movs	r3, #6
 801449a:	6023      	str	r3, [r4, #0]
 801449c:	2e00      	cmp	r6, #0
 801449e:	d0ee      	beq.n	801447e <rmw_validate_namespace_with_size+0x42>
 80144a0:	9b01      	ldr	r3, [sp, #4]
 80144a2:	6033      	str	r3, [r6, #0]
 80144a4:	e7eb      	b.n	801447e <rmw_validate_namespace_with_size+0x42>
 80144a6:	2305      	movs	r3, #5
 80144a8:	6023      	str	r3, [r4, #0]
 80144aa:	e7f7      	b.n	801449c <rmw_validate_namespace_with_size+0x60>
 80144ac:	2304      	movs	r3, #4
 80144ae:	6023      	str	r3, [r4, #0]
 80144b0:	e7f4      	b.n	801449c <rmw_validate_namespace_with_size+0x60>
 80144b2:	2303      	movs	r3, #3
 80144b4:	6023      	str	r3, [r4, #0]
 80144b6:	e7f1      	b.n	801449c <rmw_validate_namespace_with_size+0x60>
 80144b8:	2302      	movs	r3, #2
 80144ba:	6023      	str	r3, [r4, #0]
 80144bc:	e7ee      	b.n	801449c <rmw_validate_namespace_with_size+0x60>
 80144be:	2301      	movs	r3, #1
 80144c0:	6023      	str	r3, [r4, #0]
 80144c2:	e7eb      	b.n	801449c <rmw_validate_namespace_with_size+0x60>
 80144c4:	4a03      	ldr	r2, [pc, #12]	@ (80144d4 <rmw_validate_namespace_with_size+0x98>)
 80144c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80144ca:	a802      	add	r0, sp, #8
 80144cc:	f7ff fcda 	bl	8013e84 <rcutils_snprintf>
 80144d0:	2001      	movs	r0, #1
 80144d2:	e7d4      	b.n	801447e <rmw_validate_namespace_with_size+0x42>
 80144d4:	08019efc 	.word	0x08019efc

080144d8 <rmw_validate_namespace>:
 80144d8:	b168      	cbz	r0, 80144f6 <rmw_validate_namespace+0x1e>
 80144da:	b570      	push	{r4, r5, r6, lr}
 80144dc:	460d      	mov	r5, r1
 80144de:	4616      	mov	r6, r2
 80144e0:	4604      	mov	r4, r0
 80144e2:	f7eb fe87 	bl	80001f4 <strlen>
 80144e6:	4633      	mov	r3, r6
 80144e8:	4601      	mov	r1, r0
 80144ea:	462a      	mov	r2, r5
 80144ec:	4620      	mov	r0, r4
 80144ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144f2:	f7ff bfa3 	b.w	801443c <rmw_validate_namespace_with_size>
 80144f6:	200b      	movs	r0, #11
 80144f8:	4770      	bx	lr
 80144fa:	bf00      	nop

080144fc <rmw_namespace_validation_result_string>:
 80144fc:	2807      	cmp	r0, #7
 80144fe:	bf9a      	itte	ls
 8014500:	4b02      	ldrls	r3, [pc, #8]	@ (801450c <rmw_namespace_validation_result_string+0x10>)
 8014502:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014506:	4802      	ldrhi	r0, [pc, #8]	@ (8014510 <rmw_namespace_validation_result_string+0x14>)
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop
 801450c:	0801a0f4 	.word	0x0801a0f4
 8014510:	08019f4c 	.word	0x08019f4c

08014514 <rmw_validate_node_name>:
 8014514:	2800      	cmp	r0, #0
 8014516:	d03b      	beq.n	8014590 <rmw_validate_node_name+0x7c>
 8014518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801451c:	460d      	mov	r5, r1
 801451e:	2900      	cmp	r1, #0
 8014520:	d038      	beq.n	8014594 <rmw_validate_node_name+0x80>
 8014522:	4616      	mov	r6, r2
 8014524:	4604      	mov	r4, r0
 8014526:	f7eb fe65 	bl	80001f4 <strlen>
 801452a:	b1e0      	cbz	r0, 8014566 <rmw_validate_node_name+0x52>
 801452c:	1e63      	subs	r3, r4, #1
 801452e:	eb03 0800 	add.w	r8, r3, r0
 8014532:	f1c4 0101 	rsb	r1, r4, #1
 8014536:	18cf      	adds	r7, r1, r3
 8014538:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801453c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8014540:	f02e 0c20 	bic.w	ip, lr, #32
 8014544:	2a09      	cmp	r2, #9
 8014546:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801454a:	d914      	bls.n	8014576 <rmw_validate_node_name+0x62>
 801454c:	f1bc 0f19 	cmp.w	ip, #25
 8014550:	d911      	bls.n	8014576 <rmw_validate_node_name+0x62>
 8014552:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014556:	d00e      	beq.n	8014576 <rmw_validate_node_name+0x62>
 8014558:	2302      	movs	r3, #2
 801455a:	602b      	str	r3, [r5, #0]
 801455c:	b106      	cbz	r6, 8014560 <rmw_validate_node_name+0x4c>
 801455e:	6037      	str	r7, [r6, #0]
 8014560:	2000      	movs	r0, #0
 8014562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014566:	2301      	movs	r3, #1
 8014568:	602b      	str	r3, [r5, #0]
 801456a:	2e00      	cmp	r6, #0
 801456c:	d0f8      	beq.n	8014560 <rmw_validate_node_name+0x4c>
 801456e:	2000      	movs	r0, #0
 8014570:	6030      	str	r0, [r6, #0]
 8014572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014576:	4543      	cmp	r3, r8
 8014578:	d1dd      	bne.n	8014536 <rmw_validate_node_name+0x22>
 801457a:	7822      	ldrb	r2, [r4, #0]
 801457c:	4b0d      	ldr	r3, [pc, #52]	@ (80145b4 <rmw_validate_node_name+0xa0>)
 801457e:	5cd3      	ldrb	r3, [r2, r3]
 8014580:	f013 0304 	ands.w	r3, r3, #4
 8014584:	d110      	bne.n	80145a8 <rmw_validate_node_name+0x94>
 8014586:	28ff      	cmp	r0, #255	@ 0xff
 8014588:	d806      	bhi.n	8014598 <rmw_validate_node_name+0x84>
 801458a:	602b      	str	r3, [r5, #0]
 801458c:	4618      	mov	r0, r3
 801458e:	e7e8      	b.n	8014562 <rmw_validate_node_name+0x4e>
 8014590:	200b      	movs	r0, #11
 8014592:	4770      	bx	lr
 8014594:	200b      	movs	r0, #11
 8014596:	e7e4      	b.n	8014562 <rmw_validate_node_name+0x4e>
 8014598:	2204      	movs	r2, #4
 801459a:	602a      	str	r2, [r5, #0]
 801459c:	2e00      	cmp	r6, #0
 801459e:	d0df      	beq.n	8014560 <rmw_validate_node_name+0x4c>
 80145a0:	22fe      	movs	r2, #254	@ 0xfe
 80145a2:	6032      	str	r2, [r6, #0]
 80145a4:	4618      	mov	r0, r3
 80145a6:	e7dc      	b.n	8014562 <rmw_validate_node_name+0x4e>
 80145a8:	2303      	movs	r3, #3
 80145aa:	602b      	str	r3, [r5, #0]
 80145ac:	2e00      	cmp	r6, #0
 80145ae:	d1de      	bne.n	801456e <rmw_validate_node_name+0x5a>
 80145b0:	e7d6      	b.n	8014560 <rmw_validate_node_name+0x4c>
 80145b2:	bf00      	nop
 80145b4:	0801a5ce 	.word	0x0801a5ce

080145b8 <rmw_node_name_validation_result_string>:
 80145b8:	2804      	cmp	r0, #4
 80145ba:	bf9a      	itte	ls
 80145bc:	4b02      	ldrls	r3, [pc, #8]	@ (80145c8 <rmw_node_name_validation_result_string+0x10>)
 80145be:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80145c2:	4802      	ldrhi	r0, [pc, #8]	@ (80145cc <rmw_node_name_validation_result_string+0x14>)
 80145c4:	4770      	bx	lr
 80145c6:	bf00      	nop
 80145c8:	0801a200 	.word	0x0801a200
 80145cc:	0801a114 	.word	0x0801a114

080145d0 <get_memory>:
 80145d0:	4603      	mov	r3, r0
 80145d2:	6840      	ldr	r0, [r0, #4]
 80145d4:	b158      	cbz	r0, 80145ee <get_memory+0x1e>
 80145d6:	6842      	ldr	r2, [r0, #4]
 80145d8:	605a      	str	r2, [r3, #4]
 80145da:	b10a      	cbz	r2, 80145e0 <get_memory+0x10>
 80145dc:	2100      	movs	r1, #0
 80145de:	6011      	str	r1, [r2, #0]
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	6042      	str	r2, [r0, #4]
 80145e4:	b102      	cbz	r2, 80145e8 <get_memory+0x18>
 80145e6:	6010      	str	r0, [r2, #0]
 80145e8:	2200      	movs	r2, #0
 80145ea:	6002      	str	r2, [r0, #0]
 80145ec:	6018      	str	r0, [r3, #0]
 80145ee:	4770      	bx	lr

080145f0 <put_memory>:
 80145f0:	680b      	ldr	r3, [r1, #0]
 80145f2:	b10b      	cbz	r3, 80145f8 <put_memory+0x8>
 80145f4:	684a      	ldr	r2, [r1, #4]
 80145f6:	605a      	str	r2, [r3, #4]
 80145f8:	684a      	ldr	r2, [r1, #4]
 80145fa:	b102      	cbz	r2, 80145fe <put_memory+0xe>
 80145fc:	6013      	str	r3, [r2, #0]
 80145fe:	6803      	ldr	r3, [r0, #0]
 8014600:	428b      	cmp	r3, r1
 8014602:	6843      	ldr	r3, [r0, #4]
 8014604:	bf08      	it	eq
 8014606:	6002      	streq	r2, [r0, #0]
 8014608:	604b      	str	r3, [r1, #4]
 801460a:	b103      	cbz	r3, 801460e <put_memory+0x1e>
 801460c:	6019      	str	r1, [r3, #0]
 801460e:	2300      	movs	r3, #0
 8014610:	600b      	str	r3, [r1, #0]
 8014612:	6041      	str	r1, [r0, #4]
 8014614:	4770      	bx	lr
 8014616:	bf00      	nop

08014618 <rmw_destroy_client>:
 8014618:	b570      	push	{r4, r5, r6, lr}
 801461a:	b128      	cbz	r0, 8014628 <rmw_destroy_client+0x10>
 801461c:	4604      	mov	r4, r0
 801461e:	6800      	ldr	r0, [r0, #0]
 8014620:	460d      	mov	r5, r1
 8014622:	f7f8 fff7 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 8014626:	b910      	cbnz	r0, 801462e <rmw_destroy_client+0x16>
 8014628:	2401      	movs	r4, #1
 801462a:	4620      	mov	r0, r4
 801462c:	bd70      	pop	{r4, r5, r6, pc}
 801462e:	6863      	ldr	r3, [r4, #4]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d0f9      	beq.n	8014628 <rmw_destroy_client+0x10>
 8014634:	2d00      	cmp	r5, #0
 8014636:	d0f7      	beq.n	8014628 <rmw_destroy_client+0x10>
 8014638:	6828      	ldr	r0, [r5, #0]
 801463a:	f7f8 ffeb 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 801463e:	2800      	cmp	r0, #0
 8014640:	d0f2      	beq.n	8014628 <rmw_destroy_client+0x10>
 8014642:	686e      	ldr	r6, [r5, #4]
 8014644:	2e00      	cmp	r6, #0
 8014646:	d0ef      	beq.n	8014628 <rmw_destroy_client+0x10>
 8014648:	6864      	ldr	r4, [r4, #4]
 801464a:	6932      	ldr	r2, [r6, #16]
 801464c:	6920      	ldr	r0, [r4, #16]
 801464e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014652:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014656:	6819      	ldr	r1, [r3, #0]
 8014658:	f002 f820 	bl	801669c <uxr_buffer_cancel_data>
 801465c:	4602      	mov	r2, r0
 801465e:	6920      	ldr	r0, [r4, #16]
 8014660:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014664:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014668:	f7f8 ff54 	bl	800d514 <run_xrce_session>
 801466c:	6920      	ldr	r0, [r4, #16]
 801466e:	6932      	ldr	r2, [r6, #16]
 8014670:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014674:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014678:	6819      	ldr	r1, [r3, #0]
 801467a:	f7f9 fe39 	bl	800e2f0 <uxr_buffer_delete_entity>
 801467e:	4602      	mov	r2, r0
 8014680:	6920      	ldr	r0, [r4, #16]
 8014682:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014686:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801468a:	f7f8 ff43 	bl	800d514 <run_xrce_session>
 801468e:	2800      	cmp	r0, #0
 8014690:	4628      	mov	r0, r5
 8014692:	bf14      	ite	ne
 8014694:	2400      	movne	r4, #0
 8014696:	2402      	moveq	r4, #2
 8014698:	f7f8 fe24 	bl	800d2e4 <rmw_uxrce_fini_client_memory>
 801469c:	e7c5      	b.n	801462a <rmw_destroy_client+0x12>
 801469e:	bf00      	nop

080146a0 <rmw_get_implementation_identifier>:
 80146a0:	4b01      	ldr	r3, [pc, #4]	@ (80146a8 <rmw_get_implementation_identifier+0x8>)
 80146a2:	6818      	ldr	r0, [r3, #0]
 80146a4:	4770      	bx	lr
 80146a6:	bf00      	nop
 80146a8:	0801a22c 	.word	0x0801a22c

080146ac <rmw_init_options_init>:
 80146ac:	b084      	sub	sp, #16
 80146ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146b0:	b083      	sub	sp, #12
 80146b2:	ad09      	add	r5, sp, #36	@ 0x24
 80146b4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80146b8:	b130      	cbz	r0, 80146c8 <rmw_init_options_init+0x1c>
 80146ba:	4604      	mov	r4, r0
 80146bc:	4628      	mov	r0, r5
 80146be:	f7f8 fa03 	bl	800cac8 <rcutils_allocator_is_valid>
 80146c2:	b108      	cbz	r0, 80146c8 <rmw_init_options_init+0x1c>
 80146c4:	68a6      	ldr	r6, [r4, #8]
 80146c6:	b12e      	cbz	r6, 80146d4 <rmw_init_options_init+0x28>
 80146c8:	200b      	movs	r0, #11
 80146ca:	b003      	add	sp, #12
 80146cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80146d0:	b004      	add	sp, #16
 80146d2:	4770      	bx	lr
 80146d4:	2200      	movs	r2, #0
 80146d6:	2300      	movs	r3, #0
 80146d8:	e9c4 2300 	strd	r2, r3, [r4]
 80146dc:	4b22      	ldr	r3, [pc, #136]	@ (8014768 <rmw_init_options_init+0xbc>)
 80146de:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8014778 <rmw_init_options_init+0xcc>
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	60a3      	str	r3, [r4, #8]
 80146e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80146e8:	f104 0c20 	add.w	ip, r4, #32
 80146ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146f0:	466f      	mov	r7, sp
 80146f2:	682b      	ldr	r3, [r5, #0]
 80146f4:	f8cc 3000 	str.w	r3, [ip]
 80146f8:	4638      	mov	r0, r7
 80146fa:	f8c4 e01c 	str.w	lr, [r4, #28]
 80146fe:	60e6      	str	r6, [r4, #12]
 8014700:	f7ff fd76 	bl	80141f0 <rmw_get_default_security_options>
 8014704:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014708:	f104 0310 	add.w	r3, r4, #16
 801470c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014710:	2203      	movs	r2, #3
 8014712:	4816      	ldr	r0, [pc, #88]	@ (801476c <rmw_init_options_init+0xc0>)
 8014714:	4916      	ldr	r1, [pc, #88]	@ (8014770 <rmw_init_options_init+0xc4>)
 8014716:	7626      	strb	r6, [r4, #24]
 8014718:	f7f8 fd24 	bl	800d164 <rmw_uxrce_init_init_options_impl_memory>
 801471c:	4813      	ldr	r0, [pc, #76]	@ (801476c <rmw_init_options_init+0xc0>)
 801471e:	f7ff ff57 	bl	80145d0 <get_memory>
 8014722:	b1f0      	cbz	r0, 8014762 <rmw_init_options_init+0xb6>
 8014724:	4a13      	ldr	r2, [pc, #76]	@ (8014774 <rmw_init_options_init+0xc8>)
 8014726:	6883      	ldr	r3, [r0, #8]
 8014728:	6851      	ldr	r1, [r2, #4]
 801472a:	7810      	ldrb	r0, [r2, #0]
 801472c:	6363      	str	r3, [r4, #52]	@ 0x34
 801472e:	7418      	strb	r0, [r3, #16]
 8014730:	6159      	str	r1, [r3, #20]
 8014732:	68d1      	ldr	r1, [r2, #12]
 8014734:	61d9      	str	r1, [r3, #28]
 8014736:	6911      	ldr	r1, [r2, #16]
 8014738:	6219      	str	r1, [r3, #32]
 801473a:	6951      	ldr	r1, [r2, #20]
 801473c:	6892      	ldr	r2, [r2, #8]
 801473e:	619a      	str	r2, [r3, #24]
 8014740:	6259      	str	r1, [r3, #36]	@ 0x24
 8014742:	f7fb fa31 	bl	800fba8 <uxr_nanos>
 8014746:	f003 fb37 	bl	8017db8 <srand>
 801474a:	f003 fb63 	bl	8017e14 <rand>
 801474e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014750:	6298      	str	r0, [r3, #40]	@ 0x28
 8014752:	2800      	cmp	r0, #0
 8014754:	d0f9      	beq.n	801474a <rmw_init_options_init+0x9e>
 8014756:	2000      	movs	r0, #0
 8014758:	b003      	add	sp, #12
 801475a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801475e:	b004      	add	sp, #16
 8014760:	4770      	bx	lr
 8014762:	2001      	movs	r0, #1
 8014764:	e7b1      	b.n	80146ca <rmw_init_options_init+0x1e>
 8014766:	bf00      	nop
 8014768:	0801a22c 	.word	0x0801a22c
 801476c:	2000dffc 	.word	0x2000dffc
 8014770:	20009898 	.word	0x20009898
 8014774:	20009724 	.word	0x20009724
 8014778:	08019c94 	.word	0x08019c94

0801477c <rmw_init_options_copy>:
 801477c:	b570      	push	{r4, r5, r6, lr}
 801477e:	b158      	cbz	r0, 8014798 <rmw_init_options_copy+0x1c>
 8014780:	460d      	mov	r5, r1
 8014782:	b149      	cbz	r1, 8014798 <rmw_init_options_copy+0x1c>
 8014784:	4604      	mov	r4, r0
 8014786:	6880      	ldr	r0, [r0, #8]
 8014788:	b120      	cbz	r0, 8014794 <rmw_init_options_copy+0x18>
 801478a:	4b1e      	ldr	r3, [pc, #120]	@ (8014804 <rmw_init_options_copy+0x88>)
 801478c:	6819      	ldr	r1, [r3, #0]
 801478e:	f7eb fd27 	bl	80001e0 <strcmp>
 8014792:	bb90      	cbnz	r0, 80147fa <rmw_init_options_copy+0x7e>
 8014794:	68ab      	ldr	r3, [r5, #8]
 8014796:	b113      	cbz	r3, 801479e <rmw_init_options_copy+0x22>
 8014798:	250b      	movs	r5, #11
 801479a:	4628      	mov	r0, r5
 801479c:	bd70      	pop	{r4, r5, r6, pc}
 801479e:	4623      	mov	r3, r4
 80147a0:	462a      	mov	r2, r5
 80147a2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80147a6:	f8d3 c000 	ldr.w	ip, [r3]
 80147aa:	6858      	ldr	r0, [r3, #4]
 80147ac:	6899      	ldr	r1, [r3, #8]
 80147ae:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80147b2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80147b6:	3310      	adds	r3, #16
 80147b8:	42b3      	cmp	r3, r6
 80147ba:	f8c2 c000 	str.w	ip, [r2]
 80147be:	6050      	str	r0, [r2, #4]
 80147c0:	6091      	str	r1, [r2, #8]
 80147c2:	f102 0210 	add.w	r2, r2, #16
 80147c6:	d1ee      	bne.n	80147a6 <rmw_init_options_copy+0x2a>
 80147c8:	6819      	ldr	r1, [r3, #0]
 80147ca:	685b      	ldr	r3, [r3, #4]
 80147cc:	480e      	ldr	r0, [pc, #56]	@ (8014808 <rmw_init_options_copy+0x8c>)
 80147ce:	6053      	str	r3, [r2, #4]
 80147d0:	6011      	str	r1, [r2, #0]
 80147d2:	f7ff fefd 	bl	80145d0 <get_memory>
 80147d6:	b198      	cbz	r0, 8014800 <rmw_init_options_copy+0x84>
 80147d8:	6883      	ldr	r3, [r0, #8]
 80147da:	636b      	str	r3, [r5, #52]	@ 0x34
 80147dc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80147de:	f102 0c10 	add.w	ip, r2, #16
 80147e2:	f103 0410 	add.w	r4, r3, #16
 80147e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80147ec:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80147f0:	2500      	movs	r5, #0
 80147f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80147f6:	4628      	mov	r0, r5
 80147f8:	bd70      	pop	{r4, r5, r6, pc}
 80147fa:	250c      	movs	r5, #12
 80147fc:	4628      	mov	r0, r5
 80147fe:	bd70      	pop	{r4, r5, r6, pc}
 8014800:	2501      	movs	r5, #1
 8014802:	e7ca      	b.n	801479a <rmw_init_options_copy+0x1e>
 8014804:	0801a22c 	.word	0x0801a22c
 8014808:	2000dffc 	.word	0x2000dffc

0801480c <rmw_init_options_fini>:
 801480c:	2800      	cmp	r0, #0
 801480e:	d03d      	beq.n	801488c <rmw_init_options_fini+0x80>
 8014810:	b510      	push	{r4, lr}
 8014812:	4604      	mov	r4, r0
 8014814:	b08e      	sub	sp, #56	@ 0x38
 8014816:	3020      	adds	r0, #32
 8014818:	f7f8 f956 	bl	800cac8 <rcutils_allocator_is_valid>
 801481c:	b360      	cbz	r0, 8014878 <rmw_init_options_fini+0x6c>
 801481e:	68a0      	ldr	r0, [r4, #8]
 8014820:	b120      	cbz	r0, 801482c <rmw_init_options_fini+0x20>
 8014822:	4b1c      	ldr	r3, [pc, #112]	@ (8014894 <rmw_init_options_fini+0x88>)
 8014824:	6819      	ldr	r1, [r3, #0]
 8014826:	f7eb fcdb 	bl	80001e0 <strcmp>
 801482a:	bb68      	cbnz	r0, 8014888 <rmw_init_options_fini+0x7c>
 801482c:	4b1a      	ldr	r3, [pc, #104]	@ (8014898 <rmw_init_options_fini+0x8c>)
 801482e:	6819      	ldr	r1, [r3, #0]
 8014830:	b331      	cbz	r1, 8014880 <rmw_init_options_fini+0x74>
 8014832:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8014834:	e001      	b.n	801483a <rmw_init_options_fini+0x2e>
 8014836:	6849      	ldr	r1, [r1, #4]
 8014838:	b311      	cbz	r1, 8014880 <rmw_init_options_fini+0x74>
 801483a:	688b      	ldr	r3, [r1, #8]
 801483c:	429a      	cmp	r2, r3
 801483e:	d1fa      	bne.n	8014836 <rmw_init_options_fini+0x2a>
 8014840:	4815      	ldr	r0, [pc, #84]	@ (8014898 <rmw_init_options_fini+0x8c>)
 8014842:	f7ff fed5 	bl	80145f0 <put_memory>
 8014846:	4668      	mov	r0, sp
 8014848:	f7ff fcc2 	bl	80141d0 <rmw_get_zero_initialized_init_options>
 801484c:	46ee      	mov	lr, sp
 801484e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014852:	46a4      	mov	ip, r4
 8014854:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014858:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801485c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014860:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014864:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014868:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801486c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014870:	2300      	movs	r3, #0
 8014872:	4618      	mov	r0, r3
 8014874:	b00e      	add	sp, #56	@ 0x38
 8014876:	bd10      	pop	{r4, pc}
 8014878:	230b      	movs	r3, #11
 801487a:	4618      	mov	r0, r3
 801487c:	b00e      	add	sp, #56	@ 0x38
 801487e:	bd10      	pop	{r4, pc}
 8014880:	2301      	movs	r3, #1
 8014882:	4618      	mov	r0, r3
 8014884:	b00e      	add	sp, #56	@ 0x38
 8014886:	bd10      	pop	{r4, pc}
 8014888:	230c      	movs	r3, #12
 801488a:	e7f2      	b.n	8014872 <rmw_init_options_fini+0x66>
 801488c:	230b      	movs	r3, #11
 801488e:	4618      	mov	r0, r3
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop
 8014894:	0801a22c 	.word	0x0801a22c
 8014898:	2000dffc 	.word	0x2000dffc

0801489c <rmw_init>:
 801489c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148a0:	b083      	sub	sp, #12
 80148a2:	2800      	cmp	r0, #0
 80148a4:	f000 80d3 	beq.w	8014a4e <rmw_init+0x1b2>
 80148a8:	460e      	mov	r6, r1
 80148aa:	2900      	cmp	r1, #0
 80148ac:	f000 80cf 	beq.w	8014a4e <rmw_init+0x1b2>
 80148b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80148b2:	4605      	mov	r5, r0
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f000 80ca 	beq.w	8014a4e <rmw_init+0x1b2>
 80148ba:	4b78      	ldr	r3, [pc, #480]	@ (8014a9c <rmw_init+0x200>)
 80148bc:	6880      	ldr	r0, [r0, #8]
 80148be:	681f      	ldr	r7, [r3, #0]
 80148c0:	b128      	cbz	r0, 80148ce <rmw_init+0x32>
 80148c2:	4639      	mov	r1, r7
 80148c4:	f7eb fc8c 	bl	80001e0 <strcmp>
 80148c8:	2800      	cmp	r0, #0
 80148ca:	f040 80ca 	bne.w	8014a62 <rmw_init+0x1c6>
 80148ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80148d2:	4c73      	ldr	r4, [pc, #460]	@ (8014aa0 <rmw_init+0x204>)
 80148d4:	4973      	ldr	r1, [pc, #460]	@ (8014aa4 <rmw_init+0x208>)
 80148d6:	4874      	ldr	r0, [pc, #464]	@ (8014aa8 <rmw_init+0x20c>)
 80148d8:	60b7      	str	r7, [r6, #8]
 80148da:	e9c6 2300 	strd	r2, r3, [r6]
 80148de:	68eb      	ldr	r3, [r5, #12]
 80148e0:	64b3      	str	r3, [r6, #72]	@ 0x48
 80148e2:	2201      	movs	r2, #1
 80148e4:	f7f8 fbde 	bl	800d0a4 <rmw_uxrce_init_session_memory>
 80148e8:	4620      	mov	r0, r4
 80148ea:	4970      	ldr	r1, [pc, #448]	@ (8014aac <rmw_init+0x210>)
 80148ec:	2204      	movs	r2, #4
 80148ee:	f7f8 fc19 	bl	800d124 <rmw_uxrce_init_static_input_buffer_memory>
 80148f2:	f04f 0800 	mov.w	r8, #0
 80148f6:	486c      	ldr	r0, [pc, #432]	@ (8014aa8 <rmw_init+0x20c>)
 80148f8:	f884 800d 	strb.w	r8, [r4, #13]
 80148fc:	f7ff fe68 	bl	80145d0 <get_memory>
 8014900:	2800      	cmp	r0, #0
 8014902:	f000 80a9 	beq.w	8014a58 <rmw_init+0x1bc>
 8014906:	6884      	ldr	r4, [r0, #8]
 8014908:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801490a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801490c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8014910:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014914:	9101      	str	r1, [sp, #4]
 8014916:	6a00      	ldr	r0, [r0, #32]
 8014918:	9000      	str	r0, [sp, #0]
 801491a:	f104 0910 	add.w	r9, r4, #16
 801491e:	4661      	mov	r1, ip
 8014920:	4648      	mov	r0, r9
 8014922:	f001 f8f3 	bl	8015b0c <uxr_set_custom_transport_callbacks>
 8014926:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801492a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801492e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8014932:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8014936:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801493a:	495d      	ldr	r1, [pc, #372]	@ (8014ab0 <rmw_init+0x214>)
 801493c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8014940:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8014944:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8014948:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801494c:	4859      	ldr	r0, [pc, #356]	@ (8014ab4 <rmw_init+0x218>)
 801494e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8014952:	2201      	movs	r2, #1
 8014954:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8014956:	f7f8 fb85 	bl	800d064 <rmw_uxrce_init_node_memory>
 801495a:	4957      	ldr	r1, [pc, #348]	@ (8014ab8 <rmw_init+0x21c>)
 801495c:	4857      	ldr	r0, [pc, #348]	@ (8014abc <rmw_init+0x220>)
 801495e:	2205      	movs	r2, #5
 8014960:	f7f8 fb60 	bl	800d024 <rmw_uxrce_init_subscription_memory>
 8014964:	4956      	ldr	r1, [pc, #344]	@ (8014ac0 <rmw_init+0x224>)
 8014966:	4857      	ldr	r0, [pc, #348]	@ (8014ac4 <rmw_init+0x228>)
 8014968:	220a      	movs	r2, #10
 801496a:	f7f8 fb3b 	bl	800cfe4 <rmw_uxrce_init_publisher_memory>
 801496e:	4956      	ldr	r1, [pc, #344]	@ (8014ac8 <rmw_init+0x22c>)
 8014970:	4856      	ldr	r0, [pc, #344]	@ (8014acc <rmw_init+0x230>)
 8014972:	2201      	movs	r2, #1
 8014974:	f7f8 faf6 	bl	800cf64 <rmw_uxrce_init_service_memory>
 8014978:	4955      	ldr	r1, [pc, #340]	@ (8014ad0 <rmw_init+0x234>)
 801497a:	4856      	ldr	r0, [pc, #344]	@ (8014ad4 <rmw_init+0x238>)
 801497c:	2201      	movs	r2, #1
 801497e:	f7f8 fb11 	bl	800cfa4 <rmw_uxrce_init_client_memory>
 8014982:	4955      	ldr	r1, [pc, #340]	@ (8014ad8 <rmw_init+0x23c>)
 8014984:	4855      	ldr	r0, [pc, #340]	@ (8014adc <rmw_init+0x240>)
 8014986:	220f      	movs	r2, #15
 8014988:	f7f8 fbac 	bl	800d0e4 <rmw_uxrce_init_topic_memory>
 801498c:	4954      	ldr	r1, [pc, #336]	@ (8014ae0 <rmw_init+0x244>)
 801498e:	4855      	ldr	r0, [pc, #340]	@ (8014ae4 <rmw_init+0x248>)
 8014990:	2203      	movs	r2, #3
 8014992:	f7f8 fbe7 	bl	800d164 <rmw_uxrce_init_init_options_impl_memory>
 8014996:	4954      	ldr	r1, [pc, #336]	@ (8014ae8 <rmw_init+0x24c>)
 8014998:	4854      	ldr	r0, [pc, #336]	@ (8014aec <rmw_init+0x250>)
 801499a:	2204      	movs	r2, #4
 801499c:	f7f8 fc02 	bl	800d1a4 <rmw_uxrce_init_wait_set_memory>
 80149a0:	4953      	ldr	r1, [pc, #332]	@ (8014af0 <rmw_init+0x254>)
 80149a2:	4854      	ldr	r0, [pc, #336]	@ (8014af4 <rmw_init+0x258>)
 80149a4:	2204      	movs	r2, #4
 80149a6:	f7f8 fc1d 	bl	800d1e4 <rmw_uxrce_init_guard_condition_memory>
 80149aa:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80149ac:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80149ae:	4642      	mov	r2, r8
 80149b0:	f000 fd9e 	bl	80154f0 <rmw_uxrce_transport_init>
 80149b4:	4607      	mov	r7, r0
 80149b6:	2800      	cmp	r0, #0
 80149b8:	d158      	bne.n	8014a6c <rmw_init+0x1d0>
 80149ba:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80149bc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80149c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80149c2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80149c6:	4628      	mov	r0, r5
 80149c8:	f7f9 ff52 	bl	800e870 <uxr_init_session>
 80149cc:	494a      	ldr	r1, [pc, #296]	@ (8014af8 <rmw_init+0x25c>)
 80149ce:	4622      	mov	r2, r4
 80149d0:	4628      	mov	r0, r5
 80149d2:	f7f9 ff71 	bl	800e8b8 <uxr_set_topic_callback>
 80149d6:	4949      	ldr	r1, [pc, #292]	@ (8014afc <rmw_init+0x260>)
 80149d8:	463a      	mov	r2, r7
 80149da:	4628      	mov	r0, r5
 80149dc:	f7f9 ff68 	bl	800e8b0 <uxr_set_status_callback>
 80149e0:	4947      	ldr	r1, [pc, #284]	@ (8014b00 <rmw_init+0x264>)
 80149e2:	463a      	mov	r2, r7
 80149e4:	4628      	mov	r0, r5
 80149e6:	f7f9 ff6b 	bl	800e8c0 <uxr_set_request_callback>
 80149ea:	4946      	ldr	r1, [pc, #280]	@ (8014b04 <rmw_init+0x268>)
 80149ec:	463a      	mov	r2, r7
 80149ee:	4628      	mov	r0, r5
 80149f0:	f7f9 ff6a 	bl	800e8c8 <uxr_set_reply_callback>
 80149f4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80149f8:	2304      	movs	r3, #4
 80149fa:	0092      	lsls	r2, r2, #2
 80149fc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8014a00:	4628      	mov	r0, r5
 8014a02:	f7f9 ff9f 	bl	800e944 <uxr_create_input_reliable_stream>
 8014a06:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014a0a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8014a0e:	0092      	lsls	r2, r2, #2
 8014a10:	2304      	movs	r3, #4
 8014a12:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8014a16:	4628      	mov	r0, r5
 8014a18:	f7f9 ff6c 	bl	800e8f4 <uxr_create_output_reliable_stream>
 8014a1c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8014a20:	4628      	mov	r0, r5
 8014a22:	f7f9 ff89 	bl	800e938 <uxr_create_input_best_effort_stream>
 8014a26:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8014a2a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8014a2e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014a32:	3114      	adds	r1, #20
 8014a34:	4628      	mov	r0, r5
 8014a36:	f7f9 ff4b 	bl	800e8d0 <uxr_create_output_best_effort_stream>
 8014a3a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8014a3e:	4628      	mov	r0, r5
 8014a40:	f7fa fcd6 	bl	800f3f0 <uxr_create_session>
 8014a44:	b1f8      	cbz	r0, 8014a86 <rmw_init+0x1ea>
 8014a46:	4638      	mov	r0, r7
 8014a48:	b003      	add	sp, #12
 8014a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a4e:	270b      	movs	r7, #11
 8014a50:	4638      	mov	r0, r7
 8014a52:	b003      	add	sp, #12
 8014a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a58:	2701      	movs	r7, #1
 8014a5a:	4638      	mov	r0, r7
 8014a5c:	b003      	add	sp, #12
 8014a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a62:	270c      	movs	r7, #12
 8014a64:	4638      	mov	r0, r7
 8014a66:	b003      	add	sp, #12
 8014a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a6c:	4648      	mov	r0, r9
 8014a6e:	f001 f88f 	bl	8015b90 <uxr_close_custom_transport>
 8014a72:	480d      	ldr	r0, [pc, #52]	@ (8014aa8 <rmw_init+0x20c>)
 8014a74:	4621      	mov	r1, r4
 8014a76:	f7ff fdbb 	bl	80145f0 <put_memory>
 8014a7a:	4638      	mov	r0, r7
 8014a7c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8014a80:	b003      	add	sp, #12
 8014a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a86:	4648      	mov	r0, r9
 8014a88:	f001 f882 	bl	8015b90 <uxr_close_custom_transport>
 8014a8c:	4806      	ldr	r0, [pc, #24]	@ (8014aa8 <rmw_init+0x20c>)
 8014a8e:	4621      	mov	r1, r4
 8014a90:	f7ff fdae 	bl	80145f0 <put_memory>
 8014a94:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8014a96:	2701      	movs	r7, #1
 8014a98:	e7d5      	b.n	8014a46 <rmw_init+0x1aa>
 8014a9a:	bf00      	nop
 8014a9c:	0801a22c 	.word	0x0801a22c
 8014aa0:	2000e04c 	.word	0x2000e04c
 8014aa4:	2000a2f8 	.word	0x2000a2f8
 8014aa8:	2000e03c 	.word	0x2000e03c
 8014aac:	2000b8a0 	.word	0x2000b8a0
 8014ab0:	2000991c 	.word	0x2000991c
 8014ab4:	2000e00c 	.word	0x2000e00c
 8014ab8:	2000d9a0 	.word	0x2000d9a0
 8014abc:	2000e05c 	.word	0x2000e05c
 8014ac0:	200099c0 	.word	0x200099c0
 8014ac4:	2000e01c 	.word	0x2000e01c
 8014ac8:	2000a230 	.word	0x2000a230
 8014acc:	2000e02c 	.word	0x2000e02c
 8014ad0:	20009750 	.word	0x20009750
 8014ad4:	20009740 	.word	0x20009740
 8014ad8:	2000ddd8 	.word	0x2000ddd8
 8014adc:	2000e06c 	.word	0x2000e06c
 8014ae0:	20009898 	.word	0x20009898
 8014ae4:	2000dffc 	.word	0x2000dffc
 8014ae8:	2000df7c 	.word	0x2000df7c
 8014aec:	2000e07c 	.word	0x2000e07c
 8014af0:	20009818 	.word	0x20009818
 8014af4:	2000dfec 	.word	0x2000dfec
 8014af8:	0801787d 	.word	0x0801787d
 8014afc:	08017875 	.word	0x08017875
 8014b00:	08017915 	.word	0x08017915
 8014b04:	080179b1 	.word	0x080179b1

08014b08 <rmw_context_fini>:
 8014b08:	4b17      	ldr	r3, [pc, #92]	@ (8014b68 <rmw_context_fini+0x60>)
 8014b0a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8014b0c:	b570      	push	{r4, r5, r6, lr}
 8014b0e:	681c      	ldr	r4, [r3, #0]
 8014b10:	4605      	mov	r5, r0
 8014b12:	b334      	cbz	r4, 8014b62 <rmw_context_fini+0x5a>
 8014b14:	2600      	movs	r6, #0
 8014b16:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8014b1a:	6902      	ldr	r2, [r0, #16]
 8014b1c:	428a      	cmp	r2, r1
 8014b1e:	d018      	beq.n	8014b52 <rmw_context_fini+0x4a>
 8014b20:	2c00      	cmp	r4, #0
 8014b22:	d1f8      	bne.n	8014b16 <rmw_context_fini+0xe>
 8014b24:	b189      	cbz	r1, 8014b4a <rmw_context_fini+0x42>
 8014b26:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8014b2a:	789b      	ldrb	r3, [r3, #2]
 8014b2c:	2b01      	cmp	r3, #1
 8014b2e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8014b32:	bf14      	ite	ne
 8014b34:	210a      	movne	r1, #10
 8014b36:	2100      	moveq	r1, #0
 8014b38:	f7fa fc32 	bl	800f3a0 <uxr_delete_session_retries>
 8014b3c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8014b3e:	f7f8 fb71 	bl	800d224 <rmw_uxrce_fini_session_memory>
 8014b42:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8014b44:	3010      	adds	r0, #16
 8014b46:	f001 f823 	bl	8015b90 <uxr_close_custom_transport>
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8014b4e:	4630      	mov	r0, r6
 8014b50:	bd70      	pop	{r4, r5, r6, pc}
 8014b52:	3018      	adds	r0, #24
 8014b54:	f000 f90e 	bl	8014d74 <rmw_destroy_node>
 8014b58:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8014b5a:	4606      	mov	r6, r0
 8014b5c:	2c00      	cmp	r4, #0
 8014b5e:	d1da      	bne.n	8014b16 <rmw_context_fini+0xe>
 8014b60:	e7e0      	b.n	8014b24 <rmw_context_fini+0x1c>
 8014b62:	4626      	mov	r6, r4
 8014b64:	e7de      	b.n	8014b24 <rmw_context_fini+0x1c>
 8014b66:	bf00      	nop
 8014b68:	2000e00c 	.word	0x2000e00c

08014b6c <create_topic>:
 8014b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b70:	4605      	mov	r5, r0
 8014b72:	b084      	sub	sp, #16
 8014b74:	4822      	ldr	r0, [pc, #136]	@ (8014c00 <create_topic+0x94>)
 8014b76:	460f      	mov	r7, r1
 8014b78:	4616      	mov	r6, r2
 8014b7a:	f7ff fd29 	bl	80145d0 <get_memory>
 8014b7e:	4604      	mov	r4, r0
 8014b80:	2800      	cmp	r0, #0
 8014b82:	d039      	beq.n	8014bf8 <create_topic+0x8c>
 8014b84:	692b      	ldr	r3, [r5, #16]
 8014b86:	6884      	ldr	r4, [r0, #8]
 8014b88:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8014c08 <create_topic+0x9c>
 8014b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014b90:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8014b94:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8014b98:	1c42      	adds	r2, r0, #1
 8014b9a:	2102      	movs	r1, #2
 8014b9c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8014ba0:	f7f9 fda8 	bl	800e6f4 <uxr_object_id>
 8014ba4:	223c      	movs	r2, #60	@ 0x3c
 8014ba6:	6120      	str	r0, [r4, #16]
 8014ba8:	4641      	mov	r1, r8
 8014baa:	4638      	mov	r0, r7
 8014bac:	f7f8 fd18 	bl	800d5e0 <generate_topic_name>
 8014bb0:	b1f0      	cbz	r0, 8014bf0 <create_topic+0x84>
 8014bb2:	4f14      	ldr	r7, [pc, #80]	@ (8014c04 <create_topic+0x98>)
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	2264      	movs	r2, #100	@ 0x64
 8014bb8:	4639      	mov	r1, r7
 8014bba:	f7f8 fce1 	bl	800d580 <generate_type_name>
 8014bbe:	b1b8      	cbz	r0, 8014bf0 <create_topic+0x84>
 8014bc0:	6928      	ldr	r0, [r5, #16]
 8014bc2:	2306      	movs	r3, #6
 8014bc4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014bc8:	f8cd 8000 	str.w	r8, [sp]
 8014bcc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014bd0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014bd4:	6811      	ldr	r1, [r2, #0]
 8014bd6:	696b      	ldr	r3, [r5, #20]
 8014bd8:	6922      	ldr	r2, [r4, #16]
 8014bda:	f7f9 fc07 	bl	800e3ec <uxr_buffer_create_topic_bin>
 8014bde:	4602      	mov	r2, r0
 8014be0:	6928      	ldr	r0, [r5, #16]
 8014be2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014be6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014bea:	f7f8 fc93 	bl	800d514 <run_xrce_session>
 8014bee:	b918      	cbnz	r0, 8014bf8 <create_topic+0x8c>
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	f7f8 fb8d 	bl	800d310 <rmw_uxrce_fini_topic_memory>
 8014bf6:	2400      	movs	r4, #0
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	b004      	add	sp, #16
 8014bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c00:	2000e06c 	.word	0x2000e06c
 8014c04:	2000e158 	.word	0x2000e158
 8014c08:	2000e11c 	.word	0x2000e11c

08014c0c <destroy_topic>:
 8014c0c:	b538      	push	{r3, r4, r5, lr}
 8014c0e:	6985      	ldr	r5, [r0, #24]
 8014c10:	b1d5      	cbz	r5, 8014c48 <destroy_topic+0x3c>
 8014c12:	4604      	mov	r4, r0
 8014c14:	6928      	ldr	r0, [r5, #16]
 8014c16:	6922      	ldr	r2, [r4, #16]
 8014c18:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014c1c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014c20:	6819      	ldr	r1, [r3, #0]
 8014c22:	f7f9 fb65 	bl	800e2f0 <uxr_buffer_delete_entity>
 8014c26:	4602      	mov	r2, r0
 8014c28:	6928      	ldr	r0, [r5, #16]
 8014c2a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014c2e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014c32:	f7f8 fc6f 	bl	800d514 <run_xrce_session>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	4620      	mov	r0, r4
 8014c3a:	bf14      	ite	ne
 8014c3c:	2400      	movne	r4, #0
 8014c3e:	2402      	moveq	r4, #2
 8014c40:	f7f8 fb66 	bl	800d310 <rmw_uxrce_fini_topic_memory>
 8014c44:	4620      	mov	r0, r4
 8014c46:	bd38      	pop	{r3, r4, r5, pc}
 8014c48:	2401      	movs	r4, #1
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	bd38      	pop	{r3, r4, r5, pc}
 8014c4e:	bf00      	nop

08014c50 <create_node>:
 8014c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c54:	b083      	sub	sp, #12
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d05f      	beq.n	8014d1a <create_node+0xca>
 8014c5a:	4606      	mov	r6, r0
 8014c5c:	4835      	ldr	r0, [pc, #212]	@ (8014d34 <create_node+0xe4>)
 8014c5e:	460f      	mov	r7, r1
 8014c60:	4690      	mov	r8, r2
 8014c62:	461d      	mov	r5, r3
 8014c64:	f7ff fcb4 	bl	80145d0 <get_memory>
 8014c68:	2800      	cmp	r0, #0
 8014c6a:	d056      	beq.n	8014d1a <create_node+0xca>
 8014c6c:	6884      	ldr	r4, [r0, #8]
 8014c6e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014c70:	6123      	str	r3, [r4, #16]
 8014c72:	f7ff fd15 	bl	80146a0 <rmw_get_implementation_identifier>
 8014c76:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8014c7a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8014c7e:	f8c4 9020 	str.w	r9, [r4, #32]
 8014c82:	4630      	mov	r0, r6
 8014c84:	f7eb fab6 	bl	80001f4 <strlen>
 8014c88:	1c42      	adds	r2, r0, #1
 8014c8a:	2a3c      	cmp	r2, #60	@ 0x3c
 8014c8c:	f104 0518 	add.w	r5, r4, #24
 8014c90:	d840      	bhi.n	8014d14 <create_node+0xc4>
 8014c92:	4648      	mov	r0, r9
 8014c94:	4631      	mov	r1, r6
 8014c96:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8014c9a:	f003 fd6a 	bl	8018772 <memcpy>
 8014c9e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8014ca2:	4638      	mov	r0, r7
 8014ca4:	f7eb faa6 	bl	80001f4 <strlen>
 8014ca8:	1c42      	adds	r2, r0, #1
 8014caa:	2a3c      	cmp	r2, #60	@ 0x3c
 8014cac:	d832      	bhi.n	8014d14 <create_node+0xc4>
 8014cae:	4639      	mov	r1, r7
 8014cb0:	4648      	mov	r0, r9
 8014cb2:	f003 fd5e 	bl	8018772 <memcpy>
 8014cb6:	6923      	ldr	r3, [r4, #16]
 8014cb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014cbc:	2101      	movs	r1, #1
 8014cbe:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8014cc2:	1842      	adds	r2, r0, r1
 8014cc4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8014cc8:	f7f9 fd14 	bl	800e6f4 <uxr_object_id>
 8014ccc:	6160      	str	r0, [r4, #20]
 8014cce:	783b      	ldrb	r3, [r7, #0]
 8014cd0:	2b2f      	cmp	r3, #47	@ 0x2f
 8014cd2:	d127      	bne.n	8014d24 <create_node+0xd4>
 8014cd4:	787b      	ldrb	r3, [r7, #1]
 8014cd6:	bb2b      	cbnz	r3, 8014d24 <create_node+0xd4>
 8014cd8:	4a17      	ldr	r2, [pc, #92]	@ (8014d38 <create_node+0xe8>)
 8014cda:	4818      	ldr	r0, [pc, #96]	@ (8014d3c <create_node+0xec>)
 8014cdc:	4633      	mov	r3, r6
 8014cde:	213c      	movs	r1, #60	@ 0x3c
 8014ce0:	f003 fb10 	bl	8018304 <sniprintf>
 8014ce4:	6920      	ldr	r0, [r4, #16]
 8014ce6:	4915      	ldr	r1, [pc, #84]	@ (8014d3c <create_node+0xec>)
 8014ce8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014cec:	9100      	str	r1, [sp, #0]
 8014cee:	2106      	movs	r1, #6
 8014cf0:	9101      	str	r1, [sp, #4]
 8014cf2:	6811      	ldr	r1, [r2, #0]
 8014cf4:	6962      	ldr	r2, [r4, #20]
 8014cf6:	fa1f f388 	uxth.w	r3, r8
 8014cfa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014cfe:	f7f9 fb43 	bl	800e388 <uxr_buffer_create_participant_bin>
 8014d02:	4602      	mov	r2, r0
 8014d04:	6920      	ldr	r0, [r4, #16]
 8014d06:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014d0a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014d0e:	f7f8 fc01 	bl	800d514 <run_xrce_session>
 8014d12:	b918      	cbnz	r0, 8014d1c <create_node+0xcc>
 8014d14:	4628      	mov	r0, r5
 8014d16:	f7f8 fa8b 	bl	800d230 <rmw_uxrce_fini_node_memory>
 8014d1a:	2500      	movs	r5, #0
 8014d1c:	4628      	mov	r0, r5
 8014d1e:	b003      	add	sp, #12
 8014d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d24:	4a06      	ldr	r2, [pc, #24]	@ (8014d40 <create_node+0xf0>)
 8014d26:	9600      	str	r6, [sp, #0]
 8014d28:	463b      	mov	r3, r7
 8014d2a:	213c      	movs	r1, #60	@ 0x3c
 8014d2c:	4803      	ldr	r0, [pc, #12]	@ (8014d3c <create_node+0xec>)
 8014d2e:	f003 fae9 	bl	8018304 <sniprintf>
 8014d32:	e7d7      	b.n	8014ce4 <create_node+0x94>
 8014d34:	2000e00c 	.word	0x2000e00c
 8014d38:	08019898 	.word	0x08019898
 8014d3c:	2000e1bc 	.word	0x2000e1bc
 8014d40:	08019c9c 	.word	0x08019c9c

08014d44 <rmw_create_node>:
 8014d44:	b199      	cbz	r1, 8014d6e <rmw_create_node+0x2a>
 8014d46:	780b      	ldrb	r3, [r1, #0]
 8014d48:	468c      	mov	ip, r1
 8014d4a:	b183      	cbz	r3, 8014d6e <rmw_create_node+0x2a>
 8014d4c:	b410      	push	{r4}
 8014d4e:	4614      	mov	r4, r2
 8014d50:	b14a      	cbz	r2, 8014d66 <rmw_create_node+0x22>
 8014d52:	7813      	ldrb	r3, [r2, #0]
 8014d54:	b13b      	cbz	r3, 8014d66 <rmw_create_node+0x22>
 8014d56:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8014d58:	4603      	mov	r3, r0
 8014d5a:	4621      	mov	r1, r4
 8014d5c:	4660      	mov	r0, ip
 8014d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d62:	f7ff bf75 	b.w	8014c50 <create_node>
 8014d66:	2000      	movs	r0, #0
 8014d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d6c:	4770      	bx	lr
 8014d6e:	2000      	movs	r0, #0
 8014d70:	4770      	bx	lr
 8014d72:	bf00      	nop

08014d74 <rmw_destroy_node>:
 8014d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d76:	b328      	cbz	r0, 8014dc4 <rmw_destroy_node+0x50>
 8014d78:	4607      	mov	r7, r0
 8014d7a:	6800      	ldr	r0, [r0, #0]
 8014d7c:	b120      	cbz	r0, 8014d88 <rmw_destroy_node+0x14>
 8014d7e:	4b36      	ldr	r3, [pc, #216]	@ (8014e58 <rmw_destroy_node+0xe4>)
 8014d80:	6819      	ldr	r1, [r3, #0]
 8014d82:	f7eb fa2d 	bl	80001e0 <strcmp>
 8014d86:	b9e8      	cbnz	r0, 8014dc4 <rmw_destroy_node+0x50>
 8014d88:	687d      	ldr	r5, [r7, #4]
 8014d8a:	b1dd      	cbz	r5, 8014dc4 <rmw_destroy_node+0x50>
 8014d8c:	4b33      	ldr	r3, [pc, #204]	@ (8014e5c <rmw_destroy_node+0xe8>)
 8014d8e:	681c      	ldr	r4, [r3, #0]
 8014d90:	2c00      	cmp	r4, #0
 8014d92:	d05f      	beq.n	8014e54 <rmw_destroy_node+0xe0>
 8014d94:	2600      	movs	r6, #0
 8014d96:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014d9a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8014d9e:	429d      	cmp	r5, r3
 8014da0:	d013      	beq.n	8014dca <rmw_destroy_node+0x56>
 8014da2:	2c00      	cmp	r4, #0
 8014da4:	d1f7      	bne.n	8014d96 <rmw_destroy_node+0x22>
 8014da6:	4b2e      	ldr	r3, [pc, #184]	@ (8014e60 <rmw_destroy_node+0xec>)
 8014da8:	681c      	ldr	r4, [r3, #0]
 8014daa:	b1c4      	cbz	r4, 8014dde <rmw_destroy_node+0x6a>
 8014dac:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014db0:	6a0b      	ldr	r3, [r1, #32]
 8014db2:	429d      	cmp	r5, r3
 8014db4:	d1f9      	bne.n	8014daa <rmw_destroy_node+0x36>
 8014db6:	317c      	adds	r1, #124	@ 0x7c
 8014db8:	4638      	mov	r0, r7
 8014dba:	f000 fae5 	bl	8015388 <rmw_destroy_subscription>
 8014dbe:	2801      	cmp	r0, #1
 8014dc0:	4606      	mov	r6, r0
 8014dc2:	d1f2      	bne.n	8014daa <rmw_destroy_node+0x36>
 8014dc4:	2601      	movs	r6, #1
 8014dc6:	4630      	mov	r0, r6
 8014dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dca:	3184      	adds	r1, #132	@ 0x84
 8014dcc:	4638      	mov	r0, r7
 8014dce:	f7f8 f877 	bl	800cec0 <rmw_destroy_publisher>
 8014dd2:	2801      	cmp	r0, #1
 8014dd4:	4606      	mov	r6, r0
 8014dd6:	d0f5      	beq.n	8014dc4 <rmw_destroy_node+0x50>
 8014dd8:	2c00      	cmp	r4, #0
 8014dda:	d1dc      	bne.n	8014d96 <rmw_destroy_node+0x22>
 8014ddc:	e7e3      	b.n	8014da6 <rmw_destroy_node+0x32>
 8014dde:	4b21      	ldr	r3, [pc, #132]	@ (8014e64 <rmw_destroy_node+0xf0>)
 8014de0:	681c      	ldr	r4, [r3, #0]
 8014de2:	b16c      	cbz	r4, 8014e00 <rmw_destroy_node+0x8c>
 8014de4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014de8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014dea:	429d      	cmp	r5, r3
 8014dec:	d1f9      	bne.n	8014de2 <rmw_destroy_node+0x6e>
 8014dee:	317c      	adds	r1, #124	@ 0x7c
 8014df0:	4638      	mov	r0, r7
 8014df2:	f000 f993 	bl	801511c <rmw_destroy_service>
 8014df6:	2801      	cmp	r0, #1
 8014df8:	4606      	mov	r6, r0
 8014dfa:	d0e3      	beq.n	8014dc4 <rmw_destroy_node+0x50>
 8014dfc:	2c00      	cmp	r4, #0
 8014dfe:	d1f1      	bne.n	8014de4 <rmw_destroy_node+0x70>
 8014e00:	4b19      	ldr	r3, [pc, #100]	@ (8014e68 <rmw_destroy_node+0xf4>)
 8014e02:	681c      	ldr	r4, [r3, #0]
 8014e04:	b16c      	cbz	r4, 8014e22 <rmw_destroy_node+0xae>
 8014e06:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014e0a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014e0c:	429d      	cmp	r5, r3
 8014e0e:	d1f9      	bne.n	8014e04 <rmw_destroy_node+0x90>
 8014e10:	317c      	adds	r1, #124	@ 0x7c
 8014e12:	4638      	mov	r0, r7
 8014e14:	f7ff fc00 	bl	8014618 <rmw_destroy_client>
 8014e18:	2801      	cmp	r0, #1
 8014e1a:	4606      	mov	r6, r0
 8014e1c:	d0d2      	beq.n	8014dc4 <rmw_destroy_node+0x50>
 8014e1e:	2c00      	cmp	r4, #0
 8014e20:	d1f1      	bne.n	8014e06 <rmw_destroy_node+0x92>
 8014e22:	6928      	ldr	r0, [r5, #16]
 8014e24:	696a      	ldr	r2, [r5, #20]
 8014e26:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014e2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014e2e:	6819      	ldr	r1, [r3, #0]
 8014e30:	f7f9 fa5e 	bl	800e2f0 <uxr_buffer_delete_entity>
 8014e34:	4602      	mov	r2, r0
 8014e36:	6928      	ldr	r0, [r5, #16]
 8014e38:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014e3c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014e40:	f7f8 fb68 	bl	800d514 <run_xrce_session>
 8014e44:	2800      	cmp	r0, #0
 8014e46:	bf08      	it	eq
 8014e48:	2602      	moveq	r6, #2
 8014e4a:	4638      	mov	r0, r7
 8014e4c:	f7f8 f9f0 	bl	800d230 <rmw_uxrce_fini_node_memory>
 8014e50:	4630      	mov	r0, r6
 8014e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e54:	4626      	mov	r6, r4
 8014e56:	e7a6      	b.n	8014da6 <rmw_destroy_node+0x32>
 8014e58:	0801a22c 	.word	0x0801a22c
 8014e5c:	2000e01c 	.word	0x2000e01c
 8014e60:	2000e05c 	.word	0x2000e05c
 8014e64:	2000e02c 	.word	0x2000e02c
 8014e68:	20009740 	.word	0x20009740

08014e6c <rmw_node_get_graph_guard_condition>:
 8014e6c:	6843      	ldr	r3, [r0, #4]
 8014e6e:	6918      	ldr	r0, [r3, #16]
 8014e70:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8014e74:	4770      	bx	lr
 8014e76:	bf00      	nop

08014e78 <rmw_send_request>:
 8014e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e7c:	4604      	mov	r4, r0
 8014e7e:	6800      	ldr	r0, [r0, #0]
 8014e80:	b08b      	sub	sp, #44	@ 0x2c
 8014e82:	460e      	mov	r6, r1
 8014e84:	4615      	mov	r5, r2
 8014e86:	b128      	cbz	r0, 8014e94 <rmw_send_request+0x1c>
 8014e88:	4b21      	ldr	r3, [pc, #132]	@ (8014f10 <rmw_send_request+0x98>)
 8014e8a:	6819      	ldr	r1, [r3, #0]
 8014e8c:	f7eb f9a8 	bl	80001e0 <strcmp>
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d139      	bne.n	8014f08 <rmw_send_request+0x90>
 8014e94:	6864      	ldr	r4, [r4, #4]
 8014e96:	6963      	ldr	r3, [r4, #20]
 8014e98:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8014e9c:	689b      	ldr	r3, [r3, #8]
 8014e9e:	4798      	blx	r3
 8014ea0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014ea4:	4630      	mov	r0, r6
 8014ea6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014eaa:	4798      	blx	r3
 8014eac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014eb0:	9000      	str	r0, [sp, #0]
 8014eb2:	6922      	ldr	r2, [r4, #16]
 8014eb4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8014eb6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8014eba:	ab02      	add	r3, sp, #8
 8014ebc:	f7fa ff14 	bl	800fce8 <uxr_prepare_output_stream>
 8014ec0:	2700      	movs	r7, #0
 8014ec2:	6028      	str	r0, [r5, #0]
 8014ec4:	606f      	str	r7, [r5, #4]
 8014ec6:	b198      	cbz	r0, 8014ef0 <rmw_send_request+0x78>
 8014ec8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014ecc:	a902      	add	r1, sp, #8
 8014ece:	4630      	mov	r0, r6
 8014ed0:	4798      	blx	r3
 8014ed2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014ed6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014eda:	2b01      	cmp	r3, #1
 8014edc:	d00c      	beq.n	8014ef8 <rmw_send_request+0x80>
 8014ede:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8014ee0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ee4:	f7fa f914 	bl	800f110 <uxr_run_session_until_confirm_delivery>
 8014ee8:	4638      	mov	r0, r7
 8014eea:	b00b      	add	sp, #44	@ 0x2c
 8014eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ef0:	2001      	movs	r0, #1
 8014ef2:	b00b      	add	sp, #44	@ 0x2c
 8014ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ef8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014efc:	f7f9 fd48 	bl	800e990 <uxr_flash_output_streams>
 8014f00:	4638      	mov	r0, r7
 8014f02:	b00b      	add	sp, #44	@ 0x2c
 8014f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f08:	200c      	movs	r0, #12
 8014f0a:	b00b      	add	sp, #44	@ 0x2c
 8014f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f10:	0801a22c 	.word	0x0801a22c

08014f14 <rmw_take_request>:
 8014f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f18:	4605      	mov	r5, r0
 8014f1a:	6800      	ldr	r0, [r0, #0]
 8014f1c:	b089      	sub	sp, #36	@ 0x24
 8014f1e:	460c      	mov	r4, r1
 8014f20:	4690      	mov	r8, r2
 8014f22:	461e      	mov	r6, r3
 8014f24:	b128      	cbz	r0, 8014f32 <rmw_take_request+0x1e>
 8014f26:	4b28      	ldr	r3, [pc, #160]	@ (8014fc8 <rmw_take_request+0xb4>)
 8014f28:	6819      	ldr	r1, [r3, #0]
 8014f2a:	f7eb f959 	bl	80001e0 <strcmp>
 8014f2e:	2800      	cmp	r0, #0
 8014f30:	d146      	bne.n	8014fc0 <rmw_take_request+0xac>
 8014f32:	b10e      	cbz	r6, 8014f38 <rmw_take_request+0x24>
 8014f34:	2300      	movs	r3, #0
 8014f36:	7033      	strb	r3, [r6, #0]
 8014f38:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014f3c:	f7f8 fa6c 	bl	800d418 <rmw_uxrce_clean_expired_static_input_buffer>
 8014f40:	4648      	mov	r0, r9
 8014f42:	f7f8 fa41 	bl	800d3c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014f46:	4607      	mov	r7, r0
 8014f48:	b3b0      	cbz	r0, 8014fb8 <rmw_take_request+0xa4>
 8014f4a:	6885      	ldr	r5, [r0, #8]
 8014f4c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8014f50:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8014f54:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014f58:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8014f5c:	7423      	strb	r3, [r4, #16]
 8014f5e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8014f62:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8014f66:	74e2      	strb	r2, [r4, #19]
 8014f68:	f8a4 3011 	strh.w	r3, [r4, #17]
 8014f6c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8014f70:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8014f74:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8014f78:	61e1      	str	r1, [r4, #28]
 8014f7a:	6162      	str	r2, [r4, #20]
 8014f7c:	61a3      	str	r3, [r4, #24]
 8014f7e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014f82:	689b      	ldr	r3, [r3, #8]
 8014f84:	4798      	blx	r3
 8014f86:	6844      	ldr	r4, [r0, #4]
 8014f88:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8014f8c:	f105 0110 	add.w	r1, r5, #16
 8014f90:	4668      	mov	r0, sp
 8014f92:	f7f6 fccd 	bl	800b930 <ucdr_init_buffer>
 8014f96:	68e3      	ldr	r3, [r4, #12]
 8014f98:	4641      	mov	r1, r8
 8014f9a:	4668      	mov	r0, sp
 8014f9c:	4798      	blx	r3
 8014f9e:	4639      	mov	r1, r7
 8014fa0:	4604      	mov	r4, r0
 8014fa2:	480a      	ldr	r0, [pc, #40]	@ (8014fcc <rmw_take_request+0xb8>)
 8014fa4:	f7ff fb24 	bl	80145f0 <put_memory>
 8014fa8:	b106      	cbz	r6, 8014fac <rmw_take_request+0x98>
 8014faa:	7034      	strb	r4, [r6, #0]
 8014fac:	f084 0001 	eor.w	r0, r4, #1
 8014fb0:	b2c0      	uxtb	r0, r0
 8014fb2:	b009      	add	sp, #36	@ 0x24
 8014fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fb8:	2001      	movs	r0, #1
 8014fba:	b009      	add	sp, #36	@ 0x24
 8014fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fc0:	200c      	movs	r0, #12
 8014fc2:	b009      	add	sp, #36	@ 0x24
 8014fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fc8:	0801a22c 	.word	0x0801a22c
 8014fcc:	2000e04c 	.word	0x2000e04c

08014fd0 <rmw_send_response>:
 8014fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fd2:	4605      	mov	r5, r0
 8014fd4:	6800      	ldr	r0, [r0, #0]
 8014fd6:	b091      	sub	sp, #68	@ 0x44
 8014fd8:	460c      	mov	r4, r1
 8014fda:	4616      	mov	r6, r2
 8014fdc:	b128      	cbz	r0, 8014fea <rmw_send_response+0x1a>
 8014fde:	4b29      	ldr	r3, [pc, #164]	@ (8015084 <rmw_send_response+0xb4>)
 8014fe0:	6819      	ldr	r1, [r3, #0]
 8014fe2:	f7eb f8fd 	bl	80001e0 <strcmp>
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d141      	bne.n	801506e <rmw_send_response+0x9e>
 8014fea:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8014fee:	9306      	str	r3, [sp, #24]
 8014ff0:	4623      	mov	r3, r4
 8014ff2:	9207      	str	r2, [sp, #28]
 8014ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ff8:	686d      	ldr	r5, [r5, #4]
 8014ffa:	789b      	ldrb	r3, [r3, #2]
 8014ffc:	68a1      	ldr	r1, [r4, #8]
 8014ffe:	f88d 2017 	strb.w	r2, [sp, #23]
 8015002:	f88d 3016 	strb.w	r3, [sp, #22]
 8015006:	68e2      	ldr	r2, [r4, #12]
 8015008:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801500c:	6860      	ldr	r0, [r4, #4]
 801500e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015012:	ab02      	add	r3, sp, #8
 8015014:	c307      	stmia	r3!, {r0, r1, r2}
 8015016:	696b      	ldr	r3, [r5, #20]
 8015018:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801501a:	68db      	ldr	r3, [r3, #12]
 801501c:	4798      	blx	r3
 801501e:	6844      	ldr	r4, [r0, #4]
 8015020:	4630      	mov	r0, r6
 8015022:	6923      	ldr	r3, [r4, #16]
 8015024:	4798      	blx	r3
 8015026:	f100 0318 	add.w	r3, r0, #24
 801502a:	6938      	ldr	r0, [r7, #16]
 801502c:	9300      	str	r3, [sp, #0]
 801502e:	692a      	ldr	r2, [r5, #16]
 8015030:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015032:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015036:	ab08      	add	r3, sp, #32
 8015038:	f7fa fe56 	bl	800fce8 <uxr_prepare_output_stream>
 801503c:	b910      	cbnz	r0, 8015044 <rmw_send_response+0x74>
 801503e:	2001      	movs	r0, #1
 8015040:	b011      	add	sp, #68	@ 0x44
 8015042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015044:	a902      	add	r1, sp, #8
 8015046:	a808      	add	r0, sp, #32
 8015048:	f7fb ff86 	bl	8010f58 <uxr_serialize_SampleIdentity>
 801504c:	68a3      	ldr	r3, [r4, #8]
 801504e:	a908      	add	r1, sp, #32
 8015050:	4630      	mov	r0, r6
 8015052:	4798      	blx	r3
 8015054:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015058:	6938      	ldr	r0, [r7, #16]
 801505a:	2b01      	cmp	r3, #1
 801505c:	d00a      	beq.n	8015074 <rmw_send_response+0xa4>
 801505e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015060:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015064:	f7fa f854 	bl	800f110 <uxr_run_session_until_confirm_delivery>
 8015068:	2000      	movs	r0, #0
 801506a:	b011      	add	sp, #68	@ 0x44
 801506c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801506e:	200c      	movs	r0, #12
 8015070:	b011      	add	sp, #68	@ 0x44
 8015072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015074:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015078:	f7f9 fc8a 	bl	800e990 <uxr_flash_output_streams>
 801507c:	2000      	movs	r0, #0
 801507e:	b011      	add	sp, #68	@ 0x44
 8015080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015082:	bf00      	nop
 8015084:	0801a22c 	.word	0x0801a22c

08015088 <rmw_take_response>:
 8015088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801508c:	4604      	mov	r4, r0
 801508e:	6800      	ldr	r0, [r0, #0]
 8015090:	b088      	sub	sp, #32
 8015092:	4688      	mov	r8, r1
 8015094:	4617      	mov	r7, r2
 8015096:	461d      	mov	r5, r3
 8015098:	b120      	cbz	r0, 80150a4 <rmw_take_response+0x1c>
 801509a:	4b1e      	ldr	r3, [pc, #120]	@ (8015114 <rmw_take_response+0x8c>)
 801509c:	6819      	ldr	r1, [r3, #0]
 801509e:	f7eb f89f 	bl	80001e0 <strcmp>
 80150a2:	bb78      	cbnz	r0, 8015104 <rmw_take_response+0x7c>
 80150a4:	b10d      	cbz	r5, 80150aa <rmw_take_response+0x22>
 80150a6:	2300      	movs	r3, #0
 80150a8:	702b      	strb	r3, [r5, #0]
 80150aa:	6864      	ldr	r4, [r4, #4]
 80150ac:	f7f8 f9b4 	bl	800d418 <rmw_uxrce_clean_expired_static_input_buffer>
 80150b0:	4620      	mov	r0, r4
 80150b2:	f7f8 f989 	bl	800d3c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80150b6:	4606      	mov	r6, r0
 80150b8:	b340      	cbz	r0, 801510c <rmw_take_response+0x84>
 80150ba:	6963      	ldr	r3, [r4, #20]
 80150bc:	6884      	ldr	r4, [r0, #8]
 80150be:	68db      	ldr	r3, [r3, #12]
 80150c0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80150c4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80150c8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80150cc:	4798      	blx	r3
 80150ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80150d2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80150d6:	f104 0110 	add.w	r1, r4, #16
 80150da:	4668      	mov	r0, sp
 80150dc:	f7f6 fc28 	bl	800b930 <ucdr_init_buffer>
 80150e0:	4639      	mov	r1, r7
 80150e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80150e6:	4668      	mov	r0, sp
 80150e8:	4798      	blx	r3
 80150ea:	4631      	mov	r1, r6
 80150ec:	4604      	mov	r4, r0
 80150ee:	480a      	ldr	r0, [pc, #40]	@ (8015118 <rmw_take_response+0x90>)
 80150f0:	f7ff fa7e 	bl	80145f0 <put_memory>
 80150f4:	b105      	cbz	r5, 80150f8 <rmw_take_response+0x70>
 80150f6:	702c      	strb	r4, [r5, #0]
 80150f8:	f084 0001 	eor.w	r0, r4, #1
 80150fc:	b2c0      	uxtb	r0, r0
 80150fe:	b008      	add	sp, #32
 8015100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015104:	200c      	movs	r0, #12
 8015106:	b008      	add	sp, #32
 8015108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801510c:	2001      	movs	r0, #1
 801510e:	b008      	add	sp, #32
 8015110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015114:	0801a22c 	.word	0x0801a22c
 8015118:	2000e04c 	.word	0x2000e04c

0801511c <rmw_destroy_service>:
 801511c:	b570      	push	{r4, r5, r6, lr}
 801511e:	b128      	cbz	r0, 801512c <rmw_destroy_service+0x10>
 8015120:	4604      	mov	r4, r0
 8015122:	6800      	ldr	r0, [r0, #0]
 8015124:	460d      	mov	r5, r1
 8015126:	f7f8 fa75 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 801512a:	b910      	cbnz	r0, 8015132 <rmw_destroy_service+0x16>
 801512c:	2401      	movs	r4, #1
 801512e:	4620      	mov	r0, r4
 8015130:	bd70      	pop	{r4, r5, r6, pc}
 8015132:	6863      	ldr	r3, [r4, #4]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d0f9      	beq.n	801512c <rmw_destroy_service+0x10>
 8015138:	2d00      	cmp	r5, #0
 801513a:	d0f7      	beq.n	801512c <rmw_destroy_service+0x10>
 801513c:	6828      	ldr	r0, [r5, #0]
 801513e:	f7f8 fa69 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 8015142:	2800      	cmp	r0, #0
 8015144:	d0f2      	beq.n	801512c <rmw_destroy_service+0x10>
 8015146:	686e      	ldr	r6, [r5, #4]
 8015148:	2e00      	cmp	r6, #0
 801514a:	d0ef      	beq.n	801512c <rmw_destroy_service+0x10>
 801514c:	6864      	ldr	r4, [r4, #4]
 801514e:	6932      	ldr	r2, [r6, #16]
 8015150:	6920      	ldr	r0, [r4, #16]
 8015152:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015156:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801515a:	6819      	ldr	r1, [r3, #0]
 801515c:	f001 fa9e 	bl	801669c <uxr_buffer_cancel_data>
 8015160:	4602      	mov	r2, r0
 8015162:	6920      	ldr	r0, [r4, #16]
 8015164:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015168:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801516c:	f7f8 f9d2 	bl	800d514 <run_xrce_session>
 8015170:	6920      	ldr	r0, [r4, #16]
 8015172:	6932      	ldr	r2, [r6, #16]
 8015174:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015178:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801517c:	6819      	ldr	r1, [r3, #0]
 801517e:	f7f9 f8b7 	bl	800e2f0 <uxr_buffer_delete_entity>
 8015182:	4602      	mov	r2, r0
 8015184:	6920      	ldr	r0, [r4, #16]
 8015186:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801518a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801518e:	f7f8 f9c1 	bl	800d514 <run_xrce_session>
 8015192:	2800      	cmp	r0, #0
 8015194:	4628      	mov	r0, r5
 8015196:	bf14      	ite	ne
 8015198:	2400      	movne	r4, #0
 801519a:	2402      	moveq	r4, #2
 801519c:	f7f8 f88c 	bl	800d2b8 <rmw_uxrce_fini_service_memory>
 80151a0:	e7c5      	b.n	801512e <rmw_destroy_service+0x12>
 80151a2:	bf00      	nop

080151a4 <rmw_create_subscription>:
 80151a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151a8:	b08d      	sub	sp, #52	@ 0x34
 80151aa:	2800      	cmp	r0, #0
 80151ac:	f000 80d1 	beq.w	8015352 <rmw_create_subscription+0x1ae>
 80151b0:	460e      	mov	r6, r1
 80151b2:	2900      	cmp	r1, #0
 80151b4:	f000 80cd 	beq.w	8015352 <rmw_create_subscription+0x1ae>
 80151b8:	4604      	mov	r4, r0
 80151ba:	6800      	ldr	r0, [r0, #0]
 80151bc:	4615      	mov	r5, r2
 80151be:	4698      	mov	r8, r3
 80151c0:	f7f8 fa28 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 80151c4:	2800      	cmp	r0, #0
 80151c6:	f000 80c4 	beq.w	8015352 <rmw_create_subscription+0x1ae>
 80151ca:	2d00      	cmp	r5, #0
 80151cc:	f000 80c1 	beq.w	8015352 <rmw_create_subscription+0x1ae>
 80151d0:	782b      	ldrb	r3, [r5, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	f000 80bd 	beq.w	8015352 <rmw_create_subscription+0x1ae>
 80151d8:	f1b8 0f00 	cmp.w	r8, #0
 80151dc:	f000 80b9 	beq.w	8015352 <rmw_create_subscription+0x1ae>
 80151e0:	485e      	ldr	r0, [pc, #376]	@ (801535c <rmw_create_subscription+0x1b8>)
 80151e2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80151e6:	f7ff f9f3 	bl	80145d0 <get_memory>
 80151ea:	4604      	mov	r4, r0
 80151ec:	2800      	cmp	r0, #0
 80151ee:	f000 80b1 	beq.w	8015354 <rmw_create_subscription+0x1b0>
 80151f2:	6887      	ldr	r7, [r0, #8]
 80151f4:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80151f8:	f7ff fa52 	bl	80146a0 <rmw_get_implementation_identifier>
 80151fc:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8015200:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8015202:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8015206:	4628      	mov	r0, r5
 8015208:	f7ea fff4 	bl	80001f4 <strlen>
 801520c:	3001      	adds	r0, #1
 801520e:	283c      	cmp	r0, #60	@ 0x3c
 8015210:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8015214:	f200 8096 	bhi.w	8015344 <rmw_create_subscription+0x1a0>
 8015218:	4a51      	ldr	r2, [pc, #324]	@ (8015360 <rmw_create_subscription+0x1bc>)
 801521a:	462b      	mov	r3, r5
 801521c:	213c      	movs	r1, #60	@ 0x3c
 801521e:	4650      	mov	r0, sl
 8015220:	f003 f870 	bl	8018304 <sniprintf>
 8015224:	4641      	mov	r1, r8
 8015226:	f8c7 9020 	str.w	r9, [r7, #32]
 801522a:	2250      	movs	r2, #80	@ 0x50
 801522c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8015230:	f003 fa9f 	bl	8018772 <memcpy>
 8015234:	494b      	ldr	r1, [pc, #300]	@ (8015364 <rmw_create_subscription+0x1c0>)
 8015236:	4630      	mov	r0, r6
 8015238:	f7f8 f9fa 	bl	800d630 <get_message_typesupport_handle>
 801523c:	2800      	cmp	r0, #0
 801523e:	f000 8081 	beq.w	8015344 <rmw_create_subscription+0x1a0>
 8015242:	6842      	ldr	r2, [r0, #4]
 8015244:	61ba      	str	r2, [r7, #24]
 8015246:	2a00      	cmp	r2, #0
 8015248:	d07c      	beq.n	8015344 <rmw_create_subscription+0x1a0>
 801524a:	4629      	mov	r1, r5
 801524c:	4643      	mov	r3, r8
 801524e:	4648      	mov	r0, r9
 8015250:	f7ff fc8c 	bl	8014b6c <create_topic>
 8015254:	61f8      	str	r0, [r7, #28]
 8015256:	2800      	cmp	r0, #0
 8015258:	d078      	beq.n	801534c <rmw_create_subscription+0x1a8>
 801525a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801525e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015262:	2104      	movs	r1, #4
 8015264:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8015268:	1c42      	adds	r2, r0, #1
 801526a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801526e:	f7f9 fa41 	bl	800e6f4 <uxr_object_id>
 8015272:	6138      	str	r0, [r7, #16]
 8015274:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015278:	2506      	movs	r5, #6
 801527a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801527e:	9500      	str	r5, [sp, #0]
 8015280:	6819      	ldr	r1, [r3, #0]
 8015282:	693a      	ldr	r2, [r7, #16]
 8015284:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015288:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801528c:	f7f9 f914 	bl	800e4b8 <uxr_buffer_create_subscriber_bin>
 8015290:	4602      	mov	r2, r0
 8015292:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015296:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801529a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801529e:	f7f8 f939 	bl	800d514 <run_xrce_session>
 80152a2:	2800      	cmp	r0, #0
 80152a4:	d04e      	beq.n	8015344 <rmw_create_subscription+0x1a0>
 80152a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80152aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80152ae:	4629      	mov	r1, r5
 80152b0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 80152b4:	1c42      	adds	r2, r0, #1
 80152b6:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80152ba:	f7f9 fa1b 	bl	800e6f4 <uxr_object_id>
 80152be:	ae08      	add	r6, sp, #32
 80152c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80152c4:	69fb      	ldr	r3, [r7, #28]
 80152c6:	6178      	str	r0, [r7, #20]
 80152c8:	4641      	mov	r1, r8
 80152ca:	4630      	mov	r0, r6
 80152cc:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 80152d0:	9305      	str	r3, [sp, #20]
 80152d2:	f7f8 f93b 	bl	800d54c <convert_qos_profile>
 80152d6:	9503      	str	r5, [sp, #12]
 80152d8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80152dc:	9b05      	ldr	r3, [sp, #20]
 80152de:	9001      	str	r0, [sp, #4]
 80152e0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80152e4:	691b      	ldr	r3, [r3, #16]
 80152e6:	9300      	str	r3, [sp, #0]
 80152e8:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80152ec:	f8db 1000 	ldr.w	r1, [fp]
 80152f0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80152f4:	f7f9 f986 	bl	800e604 <uxr_buffer_create_datareader_bin>
 80152f8:	4602      	mov	r2, r0
 80152fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80152fe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015302:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015306:	f7f8 f905 	bl	800d514 <run_xrce_session>
 801530a:	b1d8      	cbz	r0, 8015344 <rmw_create_subscription+0x1a0>
 801530c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8015310:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015314:	2b02      	cmp	r3, #2
 8015316:	bf0c      	ite	eq
 8015318:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801531c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8015320:	9307      	str	r3, [sp, #28]
 8015322:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015326:	2200      	movs	r2, #0
 8015328:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801532c:	ab0a      	add	r3, sp, #40	@ 0x28
 801532e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015332:	9300      	str	r3, [sp, #0]
 8015334:	697a      	ldr	r2, [r7, #20]
 8015336:	9b07      	ldr	r3, [sp, #28]
 8015338:	6809      	ldr	r1, [r1, #0]
 801533a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801533e:	f001 f973 	bl	8016628 <uxr_buffer_request_data>
 8015342:	e007      	b.n	8015354 <rmw_create_subscription+0x1b0>
 8015344:	69f8      	ldr	r0, [r7, #28]
 8015346:	b108      	cbz	r0, 801534c <rmw_create_subscription+0x1a8>
 8015348:	f7f7 ffe2 	bl	800d310 <rmw_uxrce_fini_topic_memory>
 801534c:	4620      	mov	r0, r4
 801534e:	f7f7 ff9d 	bl	800d28c <rmw_uxrce_fini_subscription_memory>
 8015352:	2400      	movs	r4, #0
 8015354:	4620      	mov	r0, r4
 8015356:	b00d      	add	sp, #52	@ 0x34
 8015358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801535c:	2000e05c 	.word	0x2000e05c
 8015360:	08019898 	.word	0x08019898
 8015364:	08019628 	.word	0x08019628

08015368 <rmw_subscription_get_actual_qos>:
 8015368:	b150      	cbz	r0, 8015380 <rmw_subscription_get_actual_qos+0x18>
 801536a:	b508      	push	{r3, lr}
 801536c:	460b      	mov	r3, r1
 801536e:	b149      	cbz	r1, 8015384 <rmw_subscription_get_actual_qos+0x1c>
 8015370:	6841      	ldr	r1, [r0, #4]
 8015372:	2250      	movs	r2, #80	@ 0x50
 8015374:	3128      	adds	r1, #40	@ 0x28
 8015376:	4618      	mov	r0, r3
 8015378:	f003 f9fb 	bl	8018772 <memcpy>
 801537c:	2000      	movs	r0, #0
 801537e:	bd08      	pop	{r3, pc}
 8015380:	200b      	movs	r0, #11
 8015382:	4770      	bx	lr
 8015384:	200b      	movs	r0, #11
 8015386:	bd08      	pop	{r3, pc}

08015388 <rmw_destroy_subscription>:
 8015388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801538a:	b128      	cbz	r0, 8015398 <rmw_destroy_subscription+0x10>
 801538c:	4604      	mov	r4, r0
 801538e:	6800      	ldr	r0, [r0, #0]
 8015390:	460d      	mov	r5, r1
 8015392:	f7f8 f93f 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 8015396:	b910      	cbnz	r0, 801539e <rmw_destroy_subscription+0x16>
 8015398:	2401      	movs	r4, #1
 801539a:	4620      	mov	r0, r4
 801539c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801539e:	6863      	ldr	r3, [r4, #4]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d0f9      	beq.n	8015398 <rmw_destroy_subscription+0x10>
 80153a4:	2d00      	cmp	r5, #0
 80153a6:	d0f7      	beq.n	8015398 <rmw_destroy_subscription+0x10>
 80153a8:	6828      	ldr	r0, [r5, #0]
 80153aa:	f7f8 f933 	bl	800d614 <is_uxrce_rmw_identifier_valid>
 80153ae:	2800      	cmp	r0, #0
 80153b0:	d0f2      	beq.n	8015398 <rmw_destroy_subscription+0x10>
 80153b2:	686c      	ldr	r4, [r5, #4]
 80153b4:	2c00      	cmp	r4, #0
 80153b6:	d0ef      	beq.n	8015398 <rmw_destroy_subscription+0x10>
 80153b8:	6a26      	ldr	r6, [r4, #32]
 80153ba:	6962      	ldr	r2, [r4, #20]
 80153bc:	6930      	ldr	r0, [r6, #16]
 80153be:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80153c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153c6:	6819      	ldr	r1, [r3, #0]
 80153c8:	f001 f968 	bl	801669c <uxr_buffer_cancel_data>
 80153cc:	4602      	mov	r2, r0
 80153ce:	6930      	ldr	r0, [r6, #16]
 80153d0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80153d4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80153d8:	f7f8 f89c 	bl	800d514 <run_xrce_session>
 80153dc:	69e0      	ldr	r0, [r4, #28]
 80153de:	f7ff fc15 	bl	8014c0c <destroy_topic>
 80153e2:	6a23      	ldr	r3, [r4, #32]
 80153e4:	6962      	ldr	r2, [r4, #20]
 80153e6:	6918      	ldr	r0, [r3, #16]
 80153e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80153ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153f0:	6819      	ldr	r1, [r3, #0]
 80153f2:	f7f8 ff7d 	bl	800e2f0 <uxr_buffer_delete_entity>
 80153f6:	6a23      	ldr	r3, [r4, #32]
 80153f8:	6922      	ldr	r2, [r4, #16]
 80153fa:	691b      	ldr	r3, [r3, #16]
 80153fc:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8015400:	4604      	mov	r4, r0
 8015402:	6809      	ldr	r1, [r1, #0]
 8015404:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015408:	f7f8 ff72 	bl	800e2f0 <uxr_buffer_delete_entity>
 801540c:	6937      	ldr	r7, [r6, #16]
 801540e:	4622      	mov	r2, r4
 8015410:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8015414:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8015418:	4604      	mov	r4, r0
 801541a:	4638      	mov	r0, r7
 801541c:	f7f8 f87a 	bl	800d514 <run_xrce_session>
 8015420:	6936      	ldr	r6, [r6, #16]
 8015422:	4622      	mov	r2, r4
 8015424:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8015428:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801542c:	4604      	mov	r4, r0
 801542e:	4630      	mov	r0, r6
 8015430:	f7f8 f870 	bl	800d514 <run_xrce_session>
 8015434:	b12c      	cbz	r4, 8015442 <rmw_destroy_subscription+0xba>
 8015436:	b120      	cbz	r0, 8015442 <rmw_destroy_subscription+0xba>
 8015438:	2400      	movs	r4, #0
 801543a:	4628      	mov	r0, r5
 801543c:	f7f7 ff26 	bl	800d28c <rmw_uxrce_fini_subscription_memory>
 8015440:	e7ab      	b.n	801539a <rmw_destroy_subscription+0x12>
 8015442:	2402      	movs	r4, #2
 8015444:	e7f9      	b.n	801543a <rmw_destroy_subscription+0xb2>
 8015446:	bf00      	nop

08015448 <rmw_take_with_info>:
 8015448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801544a:	4604      	mov	r4, r0
 801544c:	6800      	ldr	r0, [r0, #0]
 801544e:	b089      	sub	sp, #36	@ 0x24
 8015450:	460f      	mov	r7, r1
 8015452:	4615      	mov	r5, r2
 8015454:	b128      	cbz	r0, 8015462 <rmw_take_with_info+0x1a>
 8015456:	4b24      	ldr	r3, [pc, #144]	@ (80154e8 <rmw_take_with_info+0xa0>)
 8015458:	6819      	ldr	r1, [r3, #0]
 801545a:	f7ea fec1 	bl	80001e0 <strcmp>
 801545e:	2800      	cmp	r0, #0
 8015460:	d13e      	bne.n	80154e0 <rmw_take_with_info+0x98>
 8015462:	b305      	cbz	r5, 80154a6 <rmw_take_with_info+0x5e>
 8015464:	6864      	ldr	r4, [r4, #4]
 8015466:	2300      	movs	r3, #0
 8015468:	702b      	strb	r3, [r5, #0]
 801546a:	f7f7 ffd5 	bl	800d418 <rmw_uxrce_clean_expired_static_input_buffer>
 801546e:	4620      	mov	r0, r4
 8015470:	f7f7 ffaa 	bl	800d3c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015474:	4606      	mov	r6, r0
 8015476:	b1f0      	cbz	r0, 80154b6 <rmw_take_with_info+0x6e>
 8015478:	6881      	ldr	r1, [r0, #8]
 801547a:	4668      	mov	r0, sp
 801547c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015480:	3110      	adds	r1, #16
 8015482:	f7f6 fa55 	bl	800b930 <ucdr_init_buffer>
 8015486:	69a3      	ldr	r3, [r4, #24]
 8015488:	4639      	mov	r1, r7
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	4668      	mov	r0, sp
 801548e:	4798      	blx	r3
 8015490:	4631      	mov	r1, r6
 8015492:	4604      	mov	r4, r0
 8015494:	4815      	ldr	r0, [pc, #84]	@ (80154ec <rmw_take_with_info+0xa4>)
 8015496:	f7ff f8ab 	bl	80145f0 <put_memory>
 801549a:	702c      	strb	r4, [r5, #0]
 801549c:	f084 0001 	eor.w	r0, r4, #1
 80154a0:	b2c0      	uxtb	r0, r0
 80154a2:	b009      	add	sp, #36	@ 0x24
 80154a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154a6:	6864      	ldr	r4, [r4, #4]
 80154a8:	f7f7 ffb6 	bl	800d418 <rmw_uxrce_clean_expired_static_input_buffer>
 80154ac:	4620      	mov	r0, r4
 80154ae:	f7f7 ff8b 	bl	800d3c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80154b2:	4605      	mov	r5, r0
 80154b4:	b910      	cbnz	r0, 80154bc <rmw_take_with_info+0x74>
 80154b6:	2001      	movs	r0, #1
 80154b8:	b009      	add	sp, #36	@ 0x24
 80154ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154bc:	68a9      	ldr	r1, [r5, #8]
 80154be:	4668      	mov	r0, sp
 80154c0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80154c4:	3110      	adds	r1, #16
 80154c6:	f7f6 fa33 	bl	800b930 <ucdr_init_buffer>
 80154ca:	69a3      	ldr	r3, [r4, #24]
 80154cc:	4639      	mov	r1, r7
 80154ce:	68db      	ldr	r3, [r3, #12]
 80154d0:	4668      	mov	r0, sp
 80154d2:	4798      	blx	r3
 80154d4:	4629      	mov	r1, r5
 80154d6:	4604      	mov	r4, r0
 80154d8:	4804      	ldr	r0, [pc, #16]	@ (80154ec <rmw_take_with_info+0xa4>)
 80154da:	f7ff f889 	bl	80145f0 <put_memory>
 80154de:	e7dd      	b.n	801549c <rmw_take_with_info+0x54>
 80154e0:	200c      	movs	r0, #12
 80154e2:	b009      	add	sp, #36	@ 0x24
 80154e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154e6:	bf00      	nop
 80154e8:	0801a22c 	.word	0x0801a22c
 80154ec:	2000e04c 	.word	0x2000e04c

080154f0 <rmw_uxrce_transport_init>:
 80154f0:	b508      	push	{r3, lr}
 80154f2:	b108      	cbz	r0, 80154f8 <rmw_uxrce_transport_init+0x8>
 80154f4:	f100 0210 	add.w	r2, r0, #16
 80154f8:	b139      	cbz	r1, 801550a <rmw_uxrce_transport_init+0x1a>
 80154fa:	6949      	ldr	r1, [r1, #20]
 80154fc:	4610      	mov	r0, r2
 80154fe:	f000 fb13 	bl	8015b28 <uxr_init_custom_transport>
 8015502:	f080 0001 	eor.w	r0, r0, #1
 8015506:	b2c0      	uxtb	r0, r0
 8015508:	bd08      	pop	{r3, pc}
 801550a:	4b04      	ldr	r3, [pc, #16]	@ (801551c <rmw_uxrce_transport_init+0x2c>)
 801550c:	4610      	mov	r0, r2
 801550e:	6859      	ldr	r1, [r3, #4]
 8015510:	f000 fb0a 	bl	8015b28 <uxr_init_custom_transport>
 8015514:	f080 0001 	eor.w	r0, r0, #1
 8015518:	b2c0      	uxtb	r0, r0
 801551a:	bd08      	pop	{r3, pc}
 801551c:	20009724 	.word	0x20009724

08015520 <rmw_wait>:
 8015520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015524:	b089      	sub	sp, #36	@ 0x24
 8015526:	4605      	mov	r5, r0
 8015528:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801552a:	460e      	mov	r6, r1
 801552c:	4698      	mov	r8, r3
 801552e:	4691      	mov	r9, r2
 8015530:	2a00      	cmp	r2, #0
 8015532:	f000 810a 	beq.w	801574a <rmw_wait+0x22a>
 8015536:	b16c      	cbz	r4, 8015554 <rmw_wait+0x34>
 8015538:	4bae      	ldr	r3, [pc, #696]	@ (80157f4 <rmw_wait+0x2d4>)
 801553a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801553c:	af04      	add	r7, sp, #16
 801553e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015542:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015546:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801554a:	f7fe fe75 	bl	8014238 <rmw_time_equal>
 801554e:	2800      	cmp	r0, #0
 8015550:	f000 8127 	beq.w	80157a2 <rmw_wait+0x282>
 8015554:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015558:	f7f7 ff5e 	bl	800d418 <rmw_uxrce_clean_expired_static_input_buffer>
 801555c:	4ba6      	ldr	r3, [pc, #664]	@ (80157f8 <rmw_wait+0x2d8>)
 801555e:	681c      	ldr	r4, [r3, #0]
 8015560:	b14c      	cbz	r4, 8015576 <rmw_wait+0x56>
 8015562:	4623      	mov	r3, r4
 8015564:	2100      	movs	r1, #0
 8015566:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801556a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801556e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015572:	2b00      	cmp	r3, #0
 8015574:	d1f7      	bne.n	8015566 <rmw_wait+0x46>
 8015576:	f1b9 0f00 	cmp.w	r9, #0
 801557a:	d011      	beq.n	80155a0 <rmw_wait+0x80>
 801557c:	f8d9 1000 	ldr.w	r1, [r9]
 8015580:	b171      	cbz	r1, 80155a0 <rmw_wait+0x80>
 8015582:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015586:	2300      	movs	r3, #0
 8015588:	2001      	movs	r0, #1
 801558a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801558e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015590:	6912      	ldr	r2, [r2, #16]
 8015592:	3301      	adds	r3, #1
 8015594:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015598:	4299      	cmp	r1, r3
 801559a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801559e:	d1f4      	bne.n	801558a <rmw_wait+0x6a>
 80155a0:	f1b8 0f00 	cmp.w	r8, #0
 80155a4:	d011      	beq.n	80155ca <rmw_wait+0xaa>
 80155a6:	f8d8 1000 	ldr.w	r1, [r8]
 80155aa:	b171      	cbz	r1, 80155ca <rmw_wait+0xaa>
 80155ac:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80155b0:	2300      	movs	r3, #0
 80155b2:	2001      	movs	r0, #1
 80155b4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80155b8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80155ba:	6912      	ldr	r2, [r2, #16]
 80155bc:	3301      	adds	r3, #1
 80155be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80155c2:	4299      	cmp	r1, r3
 80155c4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80155c8:	d1f4      	bne.n	80155b4 <rmw_wait+0x94>
 80155ca:	b185      	cbz	r5, 80155ee <rmw_wait+0xce>
 80155cc:	6829      	ldr	r1, [r5, #0]
 80155ce:	b171      	cbz	r1, 80155ee <rmw_wait+0xce>
 80155d0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80155d4:	2300      	movs	r3, #0
 80155d6:	2001      	movs	r0, #1
 80155d8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80155dc:	6a12      	ldr	r2, [r2, #32]
 80155de:	6912      	ldr	r2, [r2, #16]
 80155e0:	3301      	adds	r3, #1
 80155e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80155e6:	4299      	cmp	r1, r3
 80155e8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80155ec:	d1f4      	bne.n	80155d8 <rmw_wait+0xb8>
 80155ee:	b34c      	cbz	r4, 8015644 <rmw_wait+0x124>
 80155f0:	4622      	mov	r2, r4
 80155f2:	2300      	movs	r3, #0
 80155f4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80155f8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80155fc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015600:	440b      	add	r3, r1
 8015602:	b2db      	uxtb	r3, r3
 8015604:	2a00      	cmp	r2, #0
 8015606:	d1f5      	bne.n	80155f4 <rmw_wait+0xd4>
 8015608:	2b00      	cmp	r3, #0
 801560a:	f000 8084 	beq.w	8015716 <rmw_wait+0x1f6>
 801560e:	1c7a      	adds	r2, r7, #1
 8015610:	d00d      	beq.n	801562e <rmw_wait+0x10e>
 8015612:	ee07 7a90 	vmov	s15, r7
 8015616:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801561a:	ee07 3a90 	vmov	s15, r3
 801561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015626:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801562a:	ee17 7a90 	vmov	r7, s15
 801562e:	68a0      	ldr	r0, [r4, #8]
 8015630:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015634:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015638:	2b00      	cmp	r3, #0
 801563a:	f040 8090 	bne.w	801575e <rmw_wait+0x23e>
 801563e:	6864      	ldr	r4, [r4, #4]
 8015640:	2c00      	cmp	r4, #0
 8015642:	d1f4      	bne.n	801562e <rmw_wait+0x10e>
 8015644:	f1b9 0f00 	cmp.w	r9, #0
 8015648:	f000 80bc 	beq.w	80157c4 <rmw_wait+0x2a4>
 801564c:	f8d9 7000 	ldr.w	r7, [r9]
 8015650:	2f00      	cmp	r7, #0
 8015652:	f000 808e 	beq.w	8015772 <rmw_wait+0x252>
 8015656:	2400      	movs	r4, #0
 8015658:	4627      	mov	r7, r4
 801565a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801565e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015662:	f7f7 feb1 	bl	800d3c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015666:	2800      	cmp	r0, #0
 8015668:	d05f      	beq.n	801572a <rmw_wait+0x20a>
 801566a:	f8d9 3000 	ldr.w	r3, [r9]
 801566e:	3401      	adds	r4, #1
 8015670:	42a3      	cmp	r3, r4
 8015672:	f04f 0701 	mov.w	r7, #1
 8015676:	d8f0      	bhi.n	801565a <rmw_wait+0x13a>
 8015678:	f1b8 0f00 	cmp.w	r8, #0
 801567c:	d012      	beq.n	80156a4 <rmw_wait+0x184>
 801567e:	f8d8 3000 	ldr.w	r3, [r8]
 8015682:	b17b      	cbz	r3, 80156a4 <rmw_wait+0x184>
 8015684:	2400      	movs	r4, #0
 8015686:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801568a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801568e:	f7f7 fe9b 	bl	800d3c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015692:	2800      	cmp	r0, #0
 8015694:	d051      	beq.n	801573a <rmw_wait+0x21a>
 8015696:	f8d8 3000 	ldr.w	r3, [r8]
 801569a:	3401      	adds	r4, #1
 801569c:	42a3      	cmp	r3, r4
 801569e:	f04f 0701 	mov.w	r7, #1
 80156a2:	d8f0      	bhi.n	8015686 <rmw_wait+0x166>
 80156a4:	b1dd      	cbz	r5, 80156de <rmw_wait+0x1be>
 80156a6:	682b      	ldr	r3, [r5, #0]
 80156a8:	b1cb      	cbz	r3, 80156de <rmw_wait+0x1be>
 80156aa:	2400      	movs	r4, #0
 80156ac:	686b      	ldr	r3, [r5, #4]
 80156ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80156b2:	f7f7 fe89 	bl	800d3c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80156b6:	b158      	cbz	r0, 80156d0 <rmw_wait+0x1b0>
 80156b8:	682b      	ldr	r3, [r5, #0]
 80156ba:	3401      	adds	r4, #1
 80156bc:	42a3      	cmp	r3, r4
 80156be:	d969      	bls.n	8015794 <rmw_wait+0x274>
 80156c0:	686b      	ldr	r3, [r5, #4]
 80156c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80156c6:	2701      	movs	r7, #1
 80156c8:	f7f7 fe7e 	bl	800d3c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80156cc:	2800      	cmp	r0, #0
 80156ce:	d1f3      	bne.n	80156b8 <rmw_wait+0x198>
 80156d0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80156d4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80156d8:	3401      	adds	r4, #1
 80156da:	42a3      	cmp	r3, r4
 80156dc:	d8e6      	bhi.n	80156ac <rmw_wait+0x18c>
 80156de:	b1a6      	cbz	r6, 801570a <rmw_wait+0x1ea>
 80156e0:	6834      	ldr	r4, [r6, #0]
 80156e2:	b194      	cbz	r4, 801570a <rmw_wait+0x1ea>
 80156e4:	2300      	movs	r3, #0
 80156e6:	461d      	mov	r5, r3
 80156e8:	e004      	b.n	80156f4 <rmw_wait+0x1d4>
 80156ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80156ee:	3301      	adds	r3, #1
 80156f0:	42a3      	cmp	r3, r4
 80156f2:	d00a      	beq.n	801570a <rmw_wait+0x1ea>
 80156f4:	6870      	ldr	r0, [r6, #4]
 80156f6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80156fa:	7c0a      	ldrb	r2, [r1, #16]
 80156fc:	2a00      	cmp	r2, #0
 80156fe:	d0f4      	beq.n	80156ea <rmw_wait+0x1ca>
 8015700:	3301      	adds	r3, #1
 8015702:	42a3      	cmp	r3, r4
 8015704:	740d      	strb	r5, [r1, #16]
 8015706:	4617      	mov	r7, r2
 8015708:	d1f4      	bne.n	80156f4 <rmw_wait+0x1d4>
 801570a:	2f00      	cmp	r7, #0
 801570c:	d03e      	beq.n	801578c <rmw_wait+0x26c>
 801570e:	2000      	movs	r0, #0
 8015710:	b009      	add	sp, #36	@ 0x24
 8015712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015716:	68a0      	ldr	r0, [r4, #8]
 8015718:	2100      	movs	r1, #0
 801571a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801571e:	f7f9 fcbd 	bl	800f09c <uxr_run_session_timeout>
 8015722:	6864      	ldr	r4, [r4, #4]
 8015724:	2c00      	cmp	r4, #0
 8015726:	d1f6      	bne.n	8015716 <rmw_wait+0x1f6>
 8015728:	e78c      	b.n	8015644 <rmw_wait+0x124>
 801572a:	e9d9 3200 	ldrd	r3, r2, [r9]
 801572e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015732:	3401      	adds	r4, #1
 8015734:	42a3      	cmp	r3, r4
 8015736:	d890      	bhi.n	801565a <rmw_wait+0x13a>
 8015738:	e79e      	b.n	8015678 <rmw_wait+0x158>
 801573a:	e9d8 3200 	ldrd	r3, r2, [r8]
 801573e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015742:	3401      	adds	r4, #1
 8015744:	429c      	cmp	r4, r3
 8015746:	d39e      	bcc.n	8015686 <rmw_wait+0x166>
 8015748:	e7ac      	b.n	80156a4 <rmw_wait+0x184>
 801574a:	2b00      	cmp	r3, #0
 801574c:	f47f aef3 	bne.w	8015536 <rmw_wait+0x16>
 8015750:	2800      	cmp	r0, #0
 8015752:	f47f aef0 	bne.w	8015536 <rmw_wait+0x16>
 8015756:	2900      	cmp	r1, #0
 8015758:	f47f aeed 	bne.w	8015536 <rmw_wait+0x16>
 801575c:	e7d7      	b.n	801570e <rmw_wait+0x1ee>
 801575e:	4639      	mov	r1, r7
 8015760:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015764:	f7f9 fcb4 	bl	800f0d0 <uxr_run_session_until_data>
 8015768:	6864      	ldr	r4, [r4, #4]
 801576a:	2c00      	cmp	r4, #0
 801576c:	f47f af5f 	bne.w	801562e <rmw_wait+0x10e>
 8015770:	e768      	b.n	8015644 <rmw_wait+0x124>
 8015772:	f1b8 0f00 	cmp.w	r8, #0
 8015776:	d032      	beq.n	80157de <rmw_wait+0x2be>
 8015778:	f8d8 3000 	ldr.w	r3, [r8]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d181      	bne.n	8015684 <rmw_wait+0x164>
 8015780:	461f      	mov	r7, r3
 8015782:	2d00      	cmp	r5, #0
 8015784:	d18f      	bne.n	80156a6 <rmw_wait+0x186>
 8015786:	462f      	mov	r7, r5
 8015788:	2e00      	cmp	r6, #0
 801578a:	d1a9      	bne.n	80156e0 <rmw_wait+0x1c0>
 801578c:	2002      	movs	r0, #2
 801578e:	b009      	add	sp, #36	@ 0x24
 8015790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015794:	2e00      	cmp	r6, #0
 8015796:	d0ba      	beq.n	801570e <rmw_wait+0x1ee>
 8015798:	6834      	ldr	r4, [r6, #0]
 801579a:	2701      	movs	r7, #1
 801579c:	2c00      	cmp	r4, #0
 801579e:	d1a1      	bne.n	80156e4 <rmw_wait+0x1c4>
 80157a0:	e7b5      	b.n	801570e <rmw_wait+0x1ee>
 80157a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80157a6:	f7fe fd9b 	bl	80142e0 <rmw_time_total_nsec>
 80157aa:	2300      	movs	r3, #0
 80157ac:	4a13      	ldr	r2, [pc, #76]	@ (80157fc <rmw_wait+0x2dc>)
 80157ae:	f7eb fa6d 	bl	8000c8c <__aeabi_uldivmod>
 80157b2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80157b6:	f171 0300 	sbcs.w	r3, r1, #0
 80157ba:	4607      	mov	r7, r0
 80157bc:	bfa8      	it	ge
 80157be:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80157c2:	e6c9      	b.n	8015558 <rmw_wait+0x38>
 80157c4:	f1b8 0f00 	cmp.w	r8, #0
 80157c8:	d009      	beq.n	80157de <rmw_wait+0x2be>
 80157ca:	f8d8 3000 	ldr.w	r3, [r8]
 80157ce:	464f      	mov	r7, r9
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	f47f af57 	bne.w	8015684 <rmw_wait+0x164>
 80157d6:	2d00      	cmp	r5, #0
 80157d8:	f47f af65 	bne.w	80156a6 <rmw_wait+0x186>
 80157dc:	e7d3      	b.n	8015786 <rmw_wait+0x266>
 80157de:	b17d      	cbz	r5, 8015800 <rmw_wait+0x2e0>
 80157e0:	682b      	ldr	r3, [r5, #0]
 80157e2:	4647      	mov	r7, r8
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	f47f af60 	bne.w	80156aa <rmw_wait+0x18a>
 80157ea:	2e00      	cmp	r6, #0
 80157ec:	f47f af78 	bne.w	80156e0 <rmw_wait+0x1c0>
 80157f0:	e7cc      	b.n	801578c <rmw_wait+0x26c>
 80157f2:	bf00      	nop
 80157f4:	080194e0 	.word	0x080194e0
 80157f8:	2000e03c 	.word	0x2000e03c
 80157fc:	000f4240 	.word	0x000f4240
 8015800:	2e00      	cmp	r6, #0
 8015802:	d0c3      	beq.n	801578c <rmw_wait+0x26c>
 8015804:	6834      	ldr	r4, [r6, #0]
 8015806:	462f      	mov	r7, r5
 8015808:	2c00      	cmp	r4, #0
 801580a:	f47f af6b 	bne.w	80156e4 <rmw_wait+0x1c4>
 801580e:	e7bd      	b.n	801578c <rmw_wait+0x26c>

08015810 <rmw_create_wait_set>:
 8015810:	b508      	push	{r3, lr}
 8015812:	4803      	ldr	r0, [pc, #12]	@ (8015820 <rmw_create_wait_set+0x10>)
 8015814:	f7fe fedc 	bl	80145d0 <get_memory>
 8015818:	b108      	cbz	r0, 801581e <rmw_create_wait_set+0xe>
 801581a:	6880      	ldr	r0, [r0, #8]
 801581c:	3010      	adds	r0, #16
 801581e:	bd08      	pop	{r3, pc}
 8015820:	2000e07c 	.word	0x2000e07c

08015824 <rmw_destroy_wait_set>:
 8015824:	b508      	push	{r3, lr}
 8015826:	4b08      	ldr	r3, [pc, #32]	@ (8015848 <rmw_destroy_wait_set+0x24>)
 8015828:	6819      	ldr	r1, [r3, #0]
 801582a:	b911      	cbnz	r1, 8015832 <rmw_destroy_wait_set+0xe>
 801582c:	e00a      	b.n	8015844 <rmw_destroy_wait_set+0x20>
 801582e:	6849      	ldr	r1, [r1, #4]
 8015830:	b141      	cbz	r1, 8015844 <rmw_destroy_wait_set+0x20>
 8015832:	688b      	ldr	r3, [r1, #8]
 8015834:	3310      	adds	r3, #16
 8015836:	4298      	cmp	r0, r3
 8015838:	d1f9      	bne.n	801582e <rmw_destroy_wait_set+0xa>
 801583a:	4803      	ldr	r0, [pc, #12]	@ (8015848 <rmw_destroy_wait_set+0x24>)
 801583c:	f7fe fed8 	bl	80145f0 <put_memory>
 8015840:	2000      	movs	r0, #0
 8015842:	bd08      	pop	{r3, pc}
 8015844:	2001      	movs	r0, #1
 8015846:	bd08      	pop	{r3, pc}
 8015848:	2000e07c 	.word	0x2000e07c

0801584c <rmw_uros_epoch_nanos>:
 801584c:	4b05      	ldr	r3, [pc, #20]	@ (8015864 <rmw_uros_epoch_nanos+0x18>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	b123      	cbz	r3, 801585c <rmw_uros_epoch_nanos+0x10>
 8015852:	6898      	ldr	r0, [r3, #8]
 8015854:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015858:	f7f9 b890 	b.w	800e97c <uxr_epoch_nanos>
 801585c:	2000      	movs	r0, #0
 801585e:	2100      	movs	r1, #0
 8015860:	4770      	bx	lr
 8015862:	bf00      	nop
 8015864:	2000e03c 	.word	0x2000e03c

08015868 <sensor_msgs__msg__Imu__init>:
 8015868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801586c:	4605      	mov	r5, r0
 801586e:	b3c0      	cbz	r0, 80158e2 <sensor_msgs__msg__Imu__init+0x7a>
 8015870:	f000 f864 	bl	801593c <std_msgs__msg__Header__init>
 8015874:	4604      	mov	r4, r0
 8015876:	b310      	cbz	r0, 80158be <sensor_msgs__msg__Imu__init+0x56>
 8015878:	f105 0618 	add.w	r6, r5, #24
 801587c:	4630      	mov	r0, r6
 801587e:	f000 f89b 	bl	80159b8 <geometry_msgs__msg__Quaternion__init>
 8015882:	4604      	mov	r4, r0
 8015884:	2800      	cmp	r0, #0
 8015886:	d040      	beq.n	801590a <sensor_msgs__msg__Imu__init+0xa2>
 8015888:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801588c:	4638      	mov	r0, r7
 801588e:	f7f8 fa31 	bl	800dcf4 <geometry_msgs__msg__Vector3__init>
 8015892:	4604      	mov	r4, r0
 8015894:	b348      	cbz	r0, 80158ea <sensor_msgs__msg__Imu__init+0x82>
 8015896:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801589a:	4640      	mov	r0, r8
 801589c:	f7f8 fa2a 	bl	800dcf4 <geometry_msgs__msg__Vector3__init>
 80158a0:	4604      	mov	r4, r0
 80158a2:	b9d8      	cbnz	r0, 80158dc <sensor_msgs__msg__Imu__init+0x74>
 80158a4:	4628      	mov	r0, r5
 80158a6:	f000 f86d 	bl	8015984 <std_msgs__msg__Header__fini>
 80158aa:	4630      	mov	r0, r6
 80158ac:	f000 f898 	bl	80159e0 <geometry_msgs__msg__Quaternion__fini>
 80158b0:	4638      	mov	r0, r7
 80158b2:	f7f8 fa23 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 80158b6:	4640      	mov	r0, r8
 80158b8:	f7f8 fa20 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 80158bc:	e00e      	b.n	80158dc <sensor_msgs__msg__Imu__init+0x74>
 80158be:	4628      	mov	r0, r5
 80158c0:	f000 f860 	bl	8015984 <std_msgs__msg__Header__fini>
 80158c4:	f105 0018 	add.w	r0, r5, #24
 80158c8:	f000 f88a 	bl	80159e0 <geometry_msgs__msg__Quaternion__fini>
 80158cc:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 80158d0:	f7f8 fa14 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 80158d4:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 80158d8:	f7f8 fa10 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 80158dc:	4620      	mov	r0, r4
 80158de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158e2:	4604      	mov	r4, r0
 80158e4:	4620      	mov	r0, r4
 80158e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ea:	4628      	mov	r0, r5
 80158ec:	f000 f84a 	bl	8015984 <std_msgs__msg__Header__fini>
 80158f0:	4630      	mov	r0, r6
 80158f2:	f000 f875 	bl	80159e0 <geometry_msgs__msg__Quaternion__fini>
 80158f6:	4638      	mov	r0, r7
 80158f8:	f7f8 fa00 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 80158fc:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8015900:	f7f8 f9fc 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 8015904:	4620      	mov	r0, r4
 8015906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801590a:	4628      	mov	r0, r5
 801590c:	f000 f83a 	bl	8015984 <std_msgs__msg__Header__fini>
 8015910:	4630      	mov	r0, r6
 8015912:	e7d9      	b.n	80158c8 <sensor_msgs__msg__Imu__init+0x60>

08015914 <sensor_msgs__msg__Imu__fini>:
 8015914:	b188      	cbz	r0, 801593a <sensor_msgs__msg__Imu__fini+0x26>
 8015916:	b510      	push	{r4, lr}
 8015918:	4604      	mov	r4, r0
 801591a:	f000 f833 	bl	8015984 <std_msgs__msg__Header__fini>
 801591e:	f104 0018 	add.w	r0, r4, #24
 8015922:	f000 f85d 	bl	80159e0 <geometry_msgs__msg__Quaternion__fini>
 8015926:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801592a:	f7f8 f9e7 	bl	800dcfc <geometry_msgs__msg__Vector3__fini>
 801592e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8015932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015936:	f7f8 b9e1 	b.w	800dcfc <geometry_msgs__msg__Vector3__fini>
 801593a:	4770      	bx	lr

0801593c <std_msgs__msg__Header__init>:
 801593c:	b570      	push	{r4, r5, r6, lr}
 801593e:	4605      	mov	r5, r0
 8015940:	b1a8      	cbz	r0, 801596e <std_msgs__msg__Header__init+0x32>
 8015942:	f000 f831 	bl	80159a8 <builtin_interfaces__msg__Time__init>
 8015946:	4604      	mov	r4, r0
 8015948:	b140      	cbz	r0, 801595c <std_msgs__msg__Header__init+0x20>
 801594a:	f105 0608 	add.w	r6, r5, #8
 801594e:	4630      	mov	r0, r6
 8015950:	f002 f8a0 	bl	8017a94 <rosidl_runtime_c__String__init>
 8015954:	4604      	mov	r4, r0
 8015956:	b168      	cbz	r0, 8015974 <std_msgs__msg__Header__init+0x38>
 8015958:	4620      	mov	r0, r4
 801595a:	bd70      	pop	{r4, r5, r6, pc}
 801595c:	4628      	mov	r0, r5
 801595e:	f000 f827 	bl	80159b0 <builtin_interfaces__msg__Time__fini>
 8015962:	f105 0008 	add.w	r0, r5, #8
 8015966:	f002 f8ab 	bl	8017ac0 <rosidl_runtime_c__String__fini>
 801596a:	4620      	mov	r0, r4
 801596c:	bd70      	pop	{r4, r5, r6, pc}
 801596e:	4604      	mov	r4, r0
 8015970:	4620      	mov	r0, r4
 8015972:	bd70      	pop	{r4, r5, r6, pc}
 8015974:	4628      	mov	r0, r5
 8015976:	f000 f81b 	bl	80159b0 <builtin_interfaces__msg__Time__fini>
 801597a:	4630      	mov	r0, r6
 801597c:	f002 f8a0 	bl	8017ac0 <rosidl_runtime_c__String__fini>
 8015980:	e7ea      	b.n	8015958 <std_msgs__msg__Header__init+0x1c>
 8015982:	bf00      	nop

08015984 <std_msgs__msg__Header__fini>:
 8015984:	b148      	cbz	r0, 801599a <std_msgs__msg__Header__fini+0x16>
 8015986:	b510      	push	{r4, lr}
 8015988:	4604      	mov	r4, r0
 801598a:	f000 f811 	bl	80159b0 <builtin_interfaces__msg__Time__fini>
 801598e:	f104 0008 	add.w	r0, r4, #8
 8015992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015996:	f002 b893 	b.w	8017ac0 <rosidl_runtime_c__String__fini>
 801599a:	4770      	bx	lr

0801599c <std_msgs__msg__Int16__init>:
 801599c:	3800      	subs	r0, #0
 801599e:	bf18      	it	ne
 80159a0:	2001      	movne	r0, #1
 80159a2:	4770      	bx	lr

080159a4 <std_msgs__msg__Int16__fini>:
 80159a4:	4770      	bx	lr
 80159a6:	bf00      	nop

080159a8 <builtin_interfaces__msg__Time__init>:
 80159a8:	3800      	subs	r0, #0
 80159aa:	bf18      	it	ne
 80159ac:	2001      	movne	r0, #1
 80159ae:	4770      	bx	lr

080159b0 <builtin_interfaces__msg__Time__fini>:
 80159b0:	4770      	bx	lr
 80159b2:	bf00      	nop
 80159b4:	0000      	movs	r0, r0
	...

080159b8 <geometry_msgs__msg__Quaternion__init>:
 80159b8:	b160      	cbz	r0, 80159d4 <geometry_msgs__msg__Quaternion__init+0x1c>
 80159ba:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80159d8 <geometry_msgs__msg__Quaternion__init+0x20>
 80159be:	2200      	movs	r2, #0
 80159c0:	2300      	movs	r3, #0
 80159c2:	e9c0 2300 	strd	r2, r3, [r0]
 80159c6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80159ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80159ce:	ed80 7b06 	vstr	d7, [r0, #24]
 80159d2:	2001      	movs	r0, #1
 80159d4:	4770      	bx	lr
 80159d6:	bf00      	nop
 80159d8:	00000000 	.word	0x00000000
 80159dc:	3ff00000 	.word	0x3ff00000

080159e0 <geometry_msgs__msg__Quaternion__fini>:
 80159e0:	4770      	bx	lr
 80159e2:	bf00      	nop

080159e4 <ucdr_serialize_string>:
 80159e4:	b510      	push	{r4, lr}
 80159e6:	b082      	sub	sp, #8
 80159e8:	4604      	mov	r4, r0
 80159ea:	4608      	mov	r0, r1
 80159ec:	9101      	str	r1, [sp, #4]
 80159ee:	f7ea fc01 	bl	80001f4 <strlen>
 80159f2:	9901      	ldr	r1, [sp, #4]
 80159f4:	1c42      	adds	r2, r0, #1
 80159f6:	4620      	mov	r0, r4
 80159f8:	b002      	add	sp, #8
 80159fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159fe:	f7f8 bc1f 	b.w	800e240 <ucdr_serialize_sequence_char>
 8015a02:	bf00      	nop

08015a04 <ucdr_deserialize_string>:
 8015a04:	b500      	push	{lr}
 8015a06:	b083      	sub	sp, #12
 8015a08:	ab01      	add	r3, sp, #4
 8015a0a:	f7f8 fc2b 	bl	800e264 <ucdr_deserialize_sequence_char>
 8015a0e:	b003      	add	sp, #12
 8015a10:	f85d fb04 	ldr.w	pc, [sp], #4

08015a14 <get_custom_error>:
 8015a14:	4b01      	ldr	r3, [pc, #4]	@ (8015a1c <get_custom_error+0x8>)
 8015a16:	7818      	ldrb	r0, [r3, #0]
 8015a18:	4770      	bx	lr
 8015a1a:	bf00      	nop
 8015a1c:	2000e1f8 	.word	0x2000e1f8

08015a20 <recv_custom_msg>:
 8015a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a24:	4693      	mov	fp, r2
 8015a26:	b089      	sub	sp, #36	@ 0x24
 8015a28:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8015a2c:	9305      	str	r3, [sp, #20]
 8015a2e:	468a      	mov	sl, r1
 8015a30:	2100      	movs	r1, #0
 8015a32:	4604      	mov	r4, r0
 8015a34:	f88d 101e 	strb.w	r1, [sp, #30]
 8015a38:	b322      	cbz	r2, 8015a84 <recv_custom_msg+0x64>
 8015a3a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8015a3e:	f10d 081f 	add.w	r8, sp, #31
 8015a42:	af05      	add	r7, sp, #20
 8015a44:	f10d 061e 	add.w	r6, sp, #30
 8015a48:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8015a4c:	e002      	b.n	8015a54 <recv_custom_msg+0x34>
 8015a4e:	9b05      	ldr	r3, [sp, #20]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	dd0f      	ble.n	8015a74 <recv_custom_msg+0x54>
 8015a54:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8015a58:	4623      	mov	r3, r4
 8015a5a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8015a5e:	e9cd 5600 	strd	r5, r6, [sp]
 8015a62:	4622      	mov	r2, r4
 8015a64:	4648      	mov	r0, r9
 8015a66:	f001 f92d 	bl	8016cc4 <uxr_read_framed_msg>
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	d0ef      	beq.n	8015a4e <recv_custom_msg+0x2e>
 8015a6e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015a72:	b1b3      	cbz	r3, 8015aa2 <recv_custom_msg+0x82>
 8015a74:	4b0f      	ldr	r3, [pc, #60]	@ (8015ab4 <recv_custom_msg+0x94>)
 8015a76:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8015a7a:	701a      	strb	r2, [r3, #0]
 8015a7c:	2000      	movs	r0, #0
 8015a7e:	b009      	add	sp, #36	@ 0x24
 8015a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a84:	f10d 021f 	add.w	r2, sp, #31
 8015a88:	9200      	str	r2, [sp, #0]
 8015a8a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8015a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015a92:	4601      	mov	r1, r0
 8015a94:	47a8      	blx	r5
 8015a96:	2800      	cmp	r0, #0
 8015a98:	d0ec      	beq.n	8015a74 <recv_custom_msg+0x54>
 8015a9a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d1e8      	bne.n	8015a74 <recv_custom_msg+0x54>
 8015aa2:	f8cb 0000 	str.w	r0, [fp]
 8015aa6:	2001      	movs	r0, #1
 8015aa8:	f8ca 4000 	str.w	r4, [sl]
 8015aac:	b009      	add	sp, #36	@ 0x24
 8015aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ab2:	bf00      	nop
 8015ab4:	2000e1f8 	.word	0x2000e1f8

08015ab8 <send_custom_msg>:
 8015ab8:	b530      	push	{r4, r5, lr}
 8015aba:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8015abe:	b087      	sub	sp, #28
 8015ac0:	4615      	mov	r5, r2
 8015ac2:	b974      	cbnz	r4, 8015ae2 <send_custom_msg+0x2a>
 8015ac4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8015ac8:	f10d 0317 	add.w	r3, sp, #23
 8015acc:	47a0      	blx	r4
 8015ace:	b108      	cbz	r0, 8015ad4 <send_custom_msg+0x1c>
 8015ad0:	42a8      	cmp	r0, r5
 8015ad2:	d015      	beq.n	8015b00 <send_custom_msg+0x48>
 8015ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8015b08 <send_custom_msg+0x50>)
 8015ad6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8015ada:	701a      	strb	r2, [r3, #0]
 8015adc:	2000      	movs	r0, #0
 8015ade:	b007      	add	sp, #28
 8015ae0:	bd30      	pop	{r4, r5, pc}
 8015ae2:	460b      	mov	r3, r1
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	f10d 0117 	add.w	r1, sp, #23
 8015aea:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015aee:	4602      	mov	r2, r0
 8015af0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8015af4:	9500      	str	r5, [sp, #0]
 8015af6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8015afa:	f000 feeb 	bl	80168d4 <uxr_write_framed_msg>
 8015afe:	e7e6      	b.n	8015ace <send_custom_msg+0x16>
 8015b00:	2001      	movs	r0, #1
 8015b02:	b007      	add	sp, #28
 8015b04:	bd30      	pop	{r4, r5, pc}
 8015b06:	bf00      	nop
 8015b08:	2000e1f8 	.word	0x2000e1f8

08015b0c <uxr_set_custom_transport_callbacks>:
 8015b0c:	b410      	push	{r4}
 8015b0e:	9c01      	ldr	r4, [sp, #4]
 8015b10:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8015b14:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8015b18:	9b02      	ldr	r3, [sp, #8]
 8015b1a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8015b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b22:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8015b26:	4770      	bx	lr

08015b28 <uxr_init_custom_transport>:
 8015b28:	b538      	push	{r3, r4, r5, lr}
 8015b2a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8015b2e:	b303      	cbz	r3, 8015b72 <uxr_init_custom_transport+0x4a>
 8015b30:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8015b34:	4604      	mov	r4, r0
 8015b36:	b1e2      	cbz	r2, 8015b72 <uxr_init_custom_transport+0x4a>
 8015b38:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8015b3c:	b1ca      	cbz	r2, 8015b72 <uxr_init_custom_transport+0x4a>
 8015b3e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8015b42:	b1b2      	cbz	r2, 8015b72 <uxr_init_custom_transport+0x4a>
 8015b44:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8015b48:	4798      	blx	r3
 8015b4a:	4605      	mov	r5, r0
 8015b4c:	b188      	cbz	r0, 8015b72 <uxr_init_custom_transport+0x4a>
 8015b4e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8015b52:	b98b      	cbnz	r3, 8015b78 <uxr_init_custom_transport+0x50>
 8015b54:	490b      	ldr	r1, [pc, #44]	@ (8015b84 <uxr_init_custom_transport+0x5c>)
 8015b56:	4b0c      	ldr	r3, [pc, #48]	@ (8015b88 <uxr_init_custom_transport+0x60>)
 8015b58:	4a0c      	ldr	r2, [pc, #48]	@ (8015b8c <uxr_init_custom_transport+0x64>)
 8015b5a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8015b5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b62:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8015b66:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8015b6a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8015b6e:	4628      	mov	r0, r5
 8015b70:	bd38      	pop	{r3, r4, r5, pc}
 8015b72:	2500      	movs	r5, #0
 8015b74:	4628      	mov	r0, r5
 8015b76:	bd38      	pop	{r3, r4, r5, pc}
 8015b78:	2100      	movs	r1, #0
 8015b7a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8015b7e:	f000 fea3 	bl	80168c8 <uxr_init_framing_io>
 8015b82:	e7e7      	b.n	8015b54 <uxr_init_custom_transport+0x2c>
 8015b84:	08015ab9 	.word	0x08015ab9
 8015b88:	08015a21 	.word	0x08015a21
 8015b8c:	08015a15 	.word	0x08015a15

08015b90 <uxr_close_custom_transport>:
 8015b90:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8015b94:	4718      	bx	r3
 8015b96:	bf00      	nop

08015b98 <uxr_init_input_best_effort_stream>:
 8015b98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015b9c:	8003      	strh	r3, [r0, #0]
 8015b9e:	4770      	bx	lr

08015ba0 <uxr_reset_input_best_effort_stream>:
 8015ba0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015ba4:	8003      	strh	r3, [r0, #0]
 8015ba6:	4770      	bx	lr

08015ba8 <uxr_receive_best_effort_message>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4604      	mov	r4, r0
 8015bac:	8800      	ldrh	r0, [r0, #0]
 8015bae:	460d      	mov	r5, r1
 8015bb0:	f000 fe72 	bl	8016898 <uxr_seq_num_cmp>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015bbc:	bfb8      	it	lt
 8015bbe:	8025      	strhlt	r5, [r4, #0]
 8015bc0:	bd38      	pop	{r3, r4, r5, pc}
 8015bc2:	bf00      	nop

08015bc4 <on_full_input_buffer>:
 8015bc4:	b570      	push	{r4, r5, r6, lr}
 8015bc6:	4605      	mov	r5, r0
 8015bc8:	460c      	mov	r4, r1
 8015bca:	682b      	ldr	r3, [r5, #0]
 8015bcc:	6809      	ldr	r1, [r1, #0]
 8015bce:	8920      	ldrh	r0, [r4, #8]
 8015bd0:	6862      	ldr	r2, [r4, #4]
 8015bd2:	fbb2 f2f0 	udiv	r2, r2, r0
 8015bd6:	eba3 0c01 	sub.w	ip, r3, r1
 8015bda:	fbbc fcf2 	udiv	ip, ip, r2
 8015bde:	f10c 0c01 	add.w	ip, ip, #1
 8015be2:	fa1f f38c 	uxth.w	r3, ip
 8015be6:	fbb3 f6f0 	udiv	r6, r3, r0
 8015bea:	fb00 3316 	mls	r3, r0, r6, r3
 8015bee:	b29b      	uxth	r3, r3
 8015bf0:	fb02 f303 	mul.w	r3, r2, r3
 8015bf4:	1d18      	adds	r0, r3, #4
 8015bf6:	4408      	add	r0, r1
 8015bf8:	7d26      	ldrb	r6, [r4, #20]
 8015bfa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015bfe:	b116      	cbz	r6, 8015c06 <on_full_input_buffer+0x42>
 8015c00:	2600      	movs	r6, #0
 8015c02:	f840 6c04 	str.w	r6, [r0, #-4]
 8015c06:	2a03      	cmp	r2, #3
 8015c08:	d801      	bhi.n	8015c0e <on_full_input_buffer+0x4a>
 8015c0a:	2001      	movs	r0, #1
 8015c0c:	bd70      	pop	{r4, r5, r6, pc}
 8015c0e:	3308      	adds	r3, #8
 8015c10:	4419      	add	r1, r3
 8015c12:	4628      	mov	r0, r5
 8015c14:	692b      	ldr	r3, [r5, #16]
 8015c16:	3a04      	subs	r2, #4
 8015c18:	f7f5 fe82 	bl	800b920 <ucdr_init_buffer_origin>
 8015c1c:	4628      	mov	r0, r5
 8015c1e:	4903      	ldr	r1, [pc, #12]	@ (8015c2c <on_full_input_buffer+0x68>)
 8015c20:	4622      	mov	r2, r4
 8015c22:	f7f5 fe59 	bl	800b8d8 <ucdr_set_on_full_buffer_callback>
 8015c26:	2000      	movs	r0, #0
 8015c28:	bd70      	pop	{r4, r5, r6, pc}
 8015c2a:	bf00      	nop
 8015c2c:	08015bc5 	.word	0x08015bc5

08015c30 <uxr_init_input_reliable_stream>:
 8015c30:	b500      	push	{lr}
 8015c32:	e9c0 1200 	strd	r1, r2, [r0]
 8015c36:	f04f 0e00 	mov.w	lr, #0
 8015c3a:	9a01      	ldr	r2, [sp, #4]
 8015c3c:	8103      	strh	r3, [r0, #8]
 8015c3e:	6102      	str	r2, [r0, #16]
 8015c40:	f880 e014 	strb.w	lr, [r0, #20]
 8015c44:	b1d3      	cbz	r3, 8015c7c <uxr_init_input_reliable_stream+0x4c>
 8015c46:	f8c1 e000 	str.w	lr, [r1]
 8015c4a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015c4e:	f1bc 0f01 	cmp.w	ip, #1
 8015c52:	d913      	bls.n	8015c7c <uxr_init_input_reliable_stream+0x4c>
 8015c54:	2301      	movs	r3, #1
 8015c56:	fbb3 f1fc 	udiv	r1, r3, ip
 8015c5a:	fb0c 3111 	mls	r1, ip, r1, r3
 8015c5e:	b289      	uxth	r1, r1
 8015c60:	6842      	ldr	r2, [r0, #4]
 8015c62:	fbb2 f2fc 	udiv	r2, r2, ip
 8015c66:	fb01 f202 	mul.w	r2, r1, r2
 8015c6a:	6801      	ldr	r1, [r0, #0]
 8015c6c:	f841 e002 	str.w	lr, [r1, r2]
 8015c70:	3301      	adds	r3, #1
 8015c72:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015c76:	b29b      	uxth	r3, r3
 8015c78:	459c      	cmp	ip, r3
 8015c7a:	d8ec      	bhi.n	8015c56 <uxr_init_input_reliable_stream+0x26>
 8015c7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015c80:	60c3      	str	r3, [r0, #12]
 8015c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c86:	bf00      	nop

08015c88 <uxr_reset_input_reliable_stream>:
 8015c88:	8901      	ldrh	r1, [r0, #8]
 8015c8a:	b1e9      	cbz	r1, 8015cc8 <uxr_reset_input_reliable_stream+0x40>
 8015c8c:	f04f 0c00 	mov.w	ip, #0
 8015c90:	b500      	push	{lr}
 8015c92:	4663      	mov	r3, ip
 8015c94:	46e6      	mov	lr, ip
 8015c96:	fbb3 f2f1 	udiv	r2, r3, r1
 8015c9a:	fb01 3312 	mls	r3, r1, r2, r3
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	6842      	ldr	r2, [r0, #4]
 8015ca2:	fbb2 f2f1 	udiv	r2, r2, r1
 8015ca6:	fb02 f303 	mul.w	r3, r2, r3
 8015caa:	6802      	ldr	r2, [r0, #0]
 8015cac:	f842 e003 	str.w	lr, [r2, r3]
 8015cb0:	f10c 0c01 	add.w	ip, ip, #1
 8015cb4:	8901      	ldrh	r1, [r0, #8]
 8015cb6:	fa1f f38c 	uxth.w	r3, ip
 8015cba:	4299      	cmp	r1, r3
 8015cbc:	d8eb      	bhi.n	8015c96 <uxr_reset_input_reliable_stream+0xe>
 8015cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015cc2:	60c3      	str	r3, [r0, #12]
 8015cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8015cc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015ccc:	60c3      	str	r3, [r0, #12]
 8015cce:	4770      	bx	lr

08015cd0 <uxr_receive_reliable_message>:
 8015cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cd4:	4604      	mov	r4, r0
 8015cd6:	460d      	mov	r5, r1
 8015cd8:	8901      	ldrh	r1, [r0, #8]
 8015cda:	8980      	ldrh	r0, [r0, #12]
 8015cdc:	4690      	mov	r8, r2
 8015cde:	461f      	mov	r7, r3
 8015ce0:	f000 fdd2 	bl	8016888 <uxr_seq_num_add>
 8015ce4:	4629      	mov	r1, r5
 8015ce6:	4606      	mov	r6, r0
 8015ce8:	89a0      	ldrh	r0, [r4, #12]
 8015cea:	f000 fdd5 	bl	8016898 <uxr_seq_num_cmp>
 8015cee:	2800      	cmp	r0, #0
 8015cf0:	db0a      	blt.n	8015d08 <uxr_receive_reliable_message+0x38>
 8015cf2:	2600      	movs	r6, #0
 8015cf4:	89e0      	ldrh	r0, [r4, #14]
 8015cf6:	4629      	mov	r1, r5
 8015cf8:	f000 fdce 	bl	8016898 <uxr_seq_num_cmp>
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	da00      	bge.n	8015d02 <uxr_receive_reliable_message+0x32>
 8015d00:	81e5      	strh	r5, [r4, #14]
 8015d02:	4630      	mov	r0, r6
 8015d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d08:	4630      	mov	r0, r6
 8015d0a:	4629      	mov	r1, r5
 8015d0c:	f000 fdc4 	bl	8016898 <uxr_seq_num_cmp>
 8015d10:	2800      	cmp	r0, #0
 8015d12:	dbee      	blt.n	8015cf2 <uxr_receive_reliable_message+0x22>
 8015d14:	6923      	ldr	r3, [r4, #16]
 8015d16:	4640      	mov	r0, r8
 8015d18:	4798      	blx	r3
 8015d1a:	2101      	movs	r1, #1
 8015d1c:	4681      	mov	r9, r0
 8015d1e:	89a0      	ldrh	r0, [r4, #12]
 8015d20:	f000 fdb2 	bl	8016888 <uxr_seq_num_add>
 8015d24:	f1b9 0f00 	cmp.w	r9, #0
 8015d28:	d101      	bne.n	8015d2e <uxr_receive_reliable_message+0x5e>
 8015d2a:	4285      	cmp	r5, r0
 8015d2c:	d047      	beq.n	8015dbe <uxr_receive_reliable_message+0xee>
 8015d2e:	8922      	ldrh	r2, [r4, #8]
 8015d30:	fbb5 f0f2 	udiv	r0, r5, r2
 8015d34:	fb02 5010 	mls	r0, r2, r0, r5
 8015d38:	b280      	uxth	r0, r0
 8015d3a:	6863      	ldr	r3, [r4, #4]
 8015d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d40:	fb00 f303 	mul.w	r3, r0, r3
 8015d44:	6820      	ldr	r0, [r4, #0]
 8015d46:	3304      	adds	r3, #4
 8015d48:	4418      	add	r0, r3
 8015d4a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d1cf      	bne.n	8015cf2 <uxr_receive_reliable_message+0x22>
 8015d52:	4641      	mov	r1, r8
 8015d54:	463a      	mov	r2, r7
 8015d56:	f002 fd0c 	bl	8018772 <memcpy>
 8015d5a:	8921      	ldrh	r1, [r4, #8]
 8015d5c:	fbb5 f2f1 	udiv	r2, r5, r1
 8015d60:	fb01 5212 	mls	r2, r1, r2, r5
 8015d64:	b292      	uxth	r2, r2
 8015d66:	6863      	ldr	r3, [r4, #4]
 8015d68:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d6c:	fb02 f303 	mul.w	r3, r2, r3
 8015d70:	6822      	ldr	r2, [r4, #0]
 8015d72:	50d7      	str	r7, [r2, r3]
 8015d74:	9a08      	ldr	r2, [sp, #32]
 8015d76:	2301      	movs	r3, #1
 8015d78:	7013      	strb	r3, [r2, #0]
 8015d7a:	f1b9 0f00 	cmp.w	r9, #0
 8015d7e:	d0b8      	beq.n	8015cf2 <uxr_receive_reliable_message+0x22>
 8015d80:	89a6      	ldrh	r6, [r4, #12]
 8015d82:	4630      	mov	r0, r6
 8015d84:	2101      	movs	r1, #1
 8015d86:	f000 fd7f 	bl	8016888 <uxr_seq_num_add>
 8015d8a:	8922      	ldrh	r2, [r4, #8]
 8015d8c:	6863      	ldr	r3, [r4, #4]
 8015d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d92:	4606      	mov	r6, r0
 8015d94:	fbb0 f0f2 	udiv	r0, r0, r2
 8015d98:	fb02 6010 	mls	r0, r2, r0, r6
 8015d9c:	b280      	uxth	r0, r0
 8015d9e:	fb00 f303 	mul.w	r3, r0, r3
 8015da2:	6820      	ldr	r0, [r4, #0]
 8015da4:	3304      	adds	r3, #4
 8015da6:	4418      	add	r0, r3
 8015da8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d0a0      	beq.n	8015cf2 <uxr_receive_reliable_message+0x22>
 8015db0:	6923      	ldr	r3, [r4, #16]
 8015db2:	4798      	blx	r3
 8015db4:	2802      	cmp	r0, #2
 8015db6:	d008      	beq.n	8015dca <uxr_receive_reliable_message+0xfa>
 8015db8:	2801      	cmp	r0, #1
 8015dba:	d0e2      	beq.n	8015d82 <uxr_receive_reliable_message+0xb2>
 8015dbc:	e799      	b.n	8015cf2 <uxr_receive_reliable_message+0x22>
 8015dbe:	9b08      	ldr	r3, [sp, #32]
 8015dc0:	81a5      	strh	r5, [r4, #12]
 8015dc2:	2601      	movs	r6, #1
 8015dc4:	f883 9000 	strb.w	r9, [r3]
 8015dc8:	e794      	b.n	8015cf4 <uxr_receive_reliable_message+0x24>
 8015dca:	2601      	movs	r6, #1
 8015dcc:	e792      	b.n	8015cf4 <uxr_receive_reliable_message+0x24>
 8015dce:	bf00      	nop

08015dd0 <uxr_next_input_reliable_buffer_available>:
 8015dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dd4:	4604      	mov	r4, r0
 8015dd6:	460f      	mov	r7, r1
 8015dd8:	8980      	ldrh	r0, [r0, #12]
 8015dda:	2101      	movs	r1, #1
 8015ddc:	4690      	mov	r8, r2
 8015dde:	f000 fd53 	bl	8016888 <uxr_seq_num_add>
 8015de2:	8922      	ldrh	r2, [r4, #8]
 8015de4:	fbb0 f6f2 	udiv	r6, r0, r2
 8015de8:	fb02 0616 	mls	r6, r2, r6, r0
 8015dec:	b2b6      	uxth	r6, r6
 8015dee:	6863      	ldr	r3, [r4, #4]
 8015df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8015df4:	fb06 f303 	mul.w	r3, r6, r3
 8015df8:	6826      	ldr	r6, [r4, #0]
 8015dfa:	3304      	adds	r3, #4
 8015dfc:	441e      	add	r6, r3
 8015dfe:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015e02:	f1b9 0f00 	cmp.w	r9, #0
 8015e06:	d023      	beq.n	8015e50 <uxr_next_input_reliable_buffer_available+0x80>
 8015e08:	6923      	ldr	r3, [r4, #16]
 8015e0a:	4605      	mov	r5, r0
 8015e0c:	4630      	mov	r0, r6
 8015e0e:	4798      	blx	r3
 8015e10:	4682      	mov	sl, r0
 8015e12:	b300      	cbz	r0, 8015e56 <uxr_next_input_reliable_buffer_available+0x86>
 8015e14:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015e18:	2101      	movs	r1, #1
 8015e1a:	4650      	mov	r0, sl
 8015e1c:	f000 fd34 	bl	8016888 <uxr_seq_num_add>
 8015e20:	8921      	ldrh	r1, [r4, #8]
 8015e22:	fbb0 f2f1 	udiv	r2, r0, r1
 8015e26:	4682      	mov	sl, r0
 8015e28:	fb01 0212 	mls	r2, r1, r2, r0
 8015e2c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015e30:	b292      	uxth	r2, r2
 8015e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e36:	fb02 f303 	mul.w	r3, r2, r3
 8015e3a:	3304      	adds	r3, #4
 8015e3c:	4418      	add	r0, r3
 8015e3e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015e42:	b12b      	cbz	r3, 8015e50 <uxr_next_input_reliable_buffer_available+0x80>
 8015e44:	6923      	ldr	r3, [r4, #16]
 8015e46:	4798      	blx	r3
 8015e48:	2802      	cmp	r0, #2
 8015e4a:	d01b      	beq.n	8015e84 <uxr_next_input_reliable_buffer_available+0xb4>
 8015e4c:	2801      	cmp	r0, #1
 8015e4e:	d0e3      	beq.n	8015e18 <uxr_next_input_reliable_buffer_available+0x48>
 8015e50:	2000      	movs	r0, #0
 8015e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e56:	464a      	mov	r2, r9
 8015e58:	4631      	mov	r1, r6
 8015e5a:	4638      	mov	r0, r7
 8015e5c:	f7f5 fd68 	bl	800b930 <ucdr_init_buffer>
 8015e60:	8921      	ldrh	r1, [r4, #8]
 8015e62:	fbb5 f2f1 	udiv	r2, r5, r1
 8015e66:	fb01 5212 	mls	r2, r1, r2, r5
 8015e6a:	b292      	uxth	r2, r2
 8015e6c:	6863      	ldr	r3, [r4, #4]
 8015e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e72:	fb02 f303 	mul.w	r3, r2, r3
 8015e76:	6822      	ldr	r2, [r4, #0]
 8015e78:	f842 a003 	str.w	sl, [r2, r3]
 8015e7c:	2001      	movs	r0, #1
 8015e7e:	81a5      	strh	r5, [r4, #12]
 8015e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e84:	8920      	ldrh	r0, [r4, #8]
 8015e86:	fbb5 f3f0 	udiv	r3, r5, r0
 8015e8a:	fb00 5513 	mls	r5, r0, r3, r5
 8015e8e:	b2ad      	uxth	r5, r5
 8015e90:	6863      	ldr	r3, [r4, #4]
 8015e92:	fbb3 f3f0 	udiv	r3, r3, r0
 8015e96:	fb03 f505 	mul.w	r5, r3, r5
 8015e9a:	6823      	ldr	r3, [r4, #0]
 8015e9c:	2000      	movs	r0, #0
 8015e9e:	5158      	str	r0, [r3, r5]
 8015ea0:	eb06 0108 	add.w	r1, r6, r8
 8015ea4:	eba9 0208 	sub.w	r2, r9, r8
 8015ea8:	4638      	mov	r0, r7
 8015eaa:	f7f5 fd41 	bl	800b930 <ucdr_init_buffer>
 8015eae:	4638      	mov	r0, r7
 8015eb0:	4903      	ldr	r1, [pc, #12]	@ (8015ec0 <uxr_next_input_reliable_buffer_available+0xf0>)
 8015eb2:	4622      	mov	r2, r4
 8015eb4:	f7f5 fd10 	bl	800b8d8 <ucdr_set_on_full_buffer_callback>
 8015eb8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015ebc:	2001      	movs	r0, #1
 8015ebe:	e7c8      	b.n	8015e52 <uxr_next_input_reliable_buffer_available+0x82>
 8015ec0:	08015bc5 	.word	0x08015bc5

08015ec4 <uxr_process_heartbeat>:
 8015ec4:	b538      	push	{r3, r4, r5, lr}
 8015ec6:	4611      	mov	r1, r2
 8015ec8:	4604      	mov	r4, r0
 8015eca:	89c0      	ldrh	r0, [r0, #14]
 8015ecc:	4615      	mov	r5, r2
 8015ece:	f000 fce3 	bl	8016898 <uxr_seq_num_cmp>
 8015ed2:	2800      	cmp	r0, #0
 8015ed4:	bfb8      	it	lt
 8015ed6:	81e5      	strhlt	r5, [r4, #14]
 8015ed8:	bd38      	pop	{r3, r4, r5, pc}
 8015eda:	bf00      	nop

08015edc <uxr_compute_acknack>:
 8015edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ee0:	8903      	ldrh	r3, [r0, #8]
 8015ee2:	8985      	ldrh	r5, [r0, #12]
 8015ee4:	4604      	mov	r4, r0
 8015ee6:	460e      	mov	r6, r1
 8015ee8:	b1d3      	cbz	r3, 8015f20 <uxr_compute_acknack+0x44>
 8015eea:	4628      	mov	r0, r5
 8015eec:	2701      	movs	r7, #1
 8015eee:	e003      	b.n	8015ef8 <uxr_compute_acknack+0x1c>
 8015ef0:	4567      	cmp	r7, ip
 8015ef2:	d215      	bcs.n	8015f20 <uxr_compute_acknack+0x44>
 8015ef4:	89a0      	ldrh	r0, [r4, #12]
 8015ef6:	3701      	adds	r7, #1
 8015ef8:	b2b9      	uxth	r1, r7
 8015efa:	f000 fcc5 	bl	8016888 <uxr_seq_num_add>
 8015efe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015f02:	fbb0 f3fc 	udiv	r3, r0, ip
 8015f06:	fb0c 0313 	mls	r3, ip, r3, r0
 8015f0a:	b29a      	uxth	r2, r3
 8015f0c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015f10:	fbb3 f3fc 	udiv	r3, r3, ip
 8015f14:	fb02 f303 	mul.w	r3, r2, r3
 8015f18:	58cb      	ldr	r3, [r1, r3]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d1e8      	bne.n	8015ef0 <uxr_compute_acknack+0x14>
 8015f1e:	4605      	mov	r5, r0
 8015f20:	8035      	strh	r5, [r6, #0]
 8015f22:	2101      	movs	r1, #1
 8015f24:	4628      	mov	r0, r5
 8015f26:	89e7      	ldrh	r7, [r4, #14]
 8015f28:	f000 fcb2 	bl	8016890 <uxr_seq_num_sub>
 8015f2c:	4601      	mov	r1, r0
 8015f2e:	4638      	mov	r0, r7
 8015f30:	f000 fcae 	bl	8016890 <uxr_seq_num_sub>
 8015f34:	4605      	mov	r5, r0
 8015f36:	b318      	cbz	r0, 8015f80 <uxr_compute_acknack+0xa4>
 8015f38:	f04f 0900 	mov.w	r9, #0
 8015f3c:	464f      	mov	r7, r9
 8015f3e:	f04f 0801 	mov.w	r8, #1
 8015f42:	fa1f f189 	uxth.w	r1, r9
 8015f46:	8830      	ldrh	r0, [r6, #0]
 8015f48:	f000 fc9e 	bl	8016888 <uxr_seq_num_add>
 8015f4c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015f50:	fbb0 f3fc 	udiv	r3, r0, ip
 8015f54:	e9d4 1200 	ldrd	r1, r2, [r4]
 8015f58:	fb03 001c 	mls	r0, r3, ip, r0
 8015f5c:	b283      	uxth	r3, r0
 8015f5e:	fbb2 f2fc 	udiv	r2, r2, ip
 8015f62:	fb02 f303 	mul.w	r3, r2, r3
 8015f66:	fa08 f209 	lsl.w	r2, r8, r9
 8015f6a:	58cb      	ldr	r3, [r1, r3]
 8015f6c:	f109 0901 	add.w	r9, r9, #1
 8015f70:	b90b      	cbnz	r3, 8015f76 <uxr_compute_acknack+0x9a>
 8015f72:	4317      	orrs	r7, r2
 8015f74:	b2bf      	uxth	r7, r7
 8015f76:	454d      	cmp	r5, r9
 8015f78:	d1e3      	bne.n	8015f42 <uxr_compute_acknack+0x66>
 8015f7a:	4638      	mov	r0, r7
 8015f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f80:	4607      	mov	r7, r0
 8015f82:	4638      	mov	r0, r7
 8015f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015f88 <uxr_init_output_best_effort_stream>:
 8015f88:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015f8c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015f90:	6001      	str	r1, [r0, #0]
 8015f92:	7303      	strb	r3, [r0, #12]
 8015f94:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015f98:	4770      	bx	lr
 8015f9a:	bf00      	nop

08015f9c <uxr_reset_output_best_effort_stream>:
 8015f9c:	7b02      	ldrb	r2, [r0, #12]
 8015f9e:	6042      	str	r2, [r0, #4]
 8015fa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015fa4:	81c3      	strh	r3, [r0, #14]
 8015fa6:	4770      	bx	lr

08015fa8 <uxr_prepare_best_effort_buffer_to_write>:
 8015fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015faa:	4604      	mov	r4, r0
 8015fac:	b083      	sub	sp, #12
 8015fae:	6840      	ldr	r0, [r0, #4]
 8015fb0:	460d      	mov	r5, r1
 8015fb2:	4616      	mov	r6, r2
 8015fb4:	f7f9 fdd8 	bl	800fb68 <uxr_submessage_padding>
 8015fb8:	6863      	ldr	r3, [r4, #4]
 8015fba:	4418      	add	r0, r3
 8015fbc:	68a3      	ldr	r3, [r4, #8]
 8015fbe:	1942      	adds	r2, r0, r5
 8015fc0:	4293      	cmp	r3, r2
 8015fc2:	bf2c      	ite	cs
 8015fc4:	2701      	movcs	r7, #1
 8015fc6:	2700      	movcc	r7, #0
 8015fc8:	d202      	bcs.n	8015fd0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015fca:	4638      	mov	r0, r7
 8015fcc:	b003      	add	sp, #12
 8015fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fd0:	9000      	str	r0, [sp, #0]
 8015fd2:	6821      	ldr	r1, [r4, #0]
 8015fd4:	4630      	mov	r0, r6
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	f7f5 fc98 	bl	800b90c <ucdr_init_buffer_origin_offset>
 8015fdc:	6861      	ldr	r1, [r4, #4]
 8015fde:	4638      	mov	r0, r7
 8015fe0:	4429      	add	r1, r5
 8015fe2:	6061      	str	r1, [r4, #4]
 8015fe4:	b003      	add	sp, #12
 8015fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015fe8 <uxr_prepare_best_effort_buffer_to_send>:
 8015fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fec:	4604      	mov	r4, r0
 8015fee:	461d      	mov	r5, r3
 8015ff0:	6840      	ldr	r0, [r0, #4]
 8015ff2:	7b23      	ldrb	r3, [r4, #12]
 8015ff4:	4298      	cmp	r0, r3
 8015ff6:	bf8c      	ite	hi
 8015ff8:	2601      	movhi	r6, #1
 8015ffa:	2600      	movls	r6, #0
 8015ffc:	d802      	bhi.n	8016004 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015ffe:	4630      	mov	r0, r6
 8016000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016004:	4688      	mov	r8, r1
 8016006:	89e0      	ldrh	r0, [r4, #14]
 8016008:	2101      	movs	r1, #1
 801600a:	4617      	mov	r7, r2
 801600c:	f000 fc3c 	bl	8016888 <uxr_seq_num_add>
 8016010:	6823      	ldr	r3, [r4, #0]
 8016012:	81e0      	strh	r0, [r4, #14]
 8016014:	8028      	strh	r0, [r5, #0]
 8016016:	f8c8 3000 	str.w	r3, [r8]
 801601a:	6863      	ldr	r3, [r4, #4]
 801601c:	603b      	str	r3, [r7, #0]
 801601e:	7b23      	ldrb	r3, [r4, #12]
 8016020:	6063      	str	r3, [r4, #4]
 8016022:	4630      	mov	r0, r6
 8016024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016028 <on_full_output_buffer>:
 8016028:	b538      	push	{r3, r4, r5, lr}
 801602a:	6802      	ldr	r2, [r0, #0]
 801602c:	460c      	mov	r4, r1
 801602e:	6809      	ldr	r1, [r1, #0]
 8016030:	8923      	ldrh	r3, [r4, #8]
 8016032:	eba2 0c01 	sub.w	ip, r2, r1
 8016036:	6862      	ldr	r2, [r4, #4]
 8016038:	fbb2 f2f3 	udiv	r2, r2, r3
 801603c:	fbbc fcf2 	udiv	ip, ip, r2
 8016040:	f10c 0c01 	add.w	ip, ip, #1
 8016044:	fa1f fc8c 	uxth.w	ip, ip
 8016048:	fbbc fef3 	udiv	lr, ip, r3
 801604c:	fb03 c31e 	mls	r3, r3, lr, ip
 8016050:	b29b      	uxth	r3, r3
 8016052:	fb02 f303 	mul.w	r3, r2, r3
 8016056:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801605a:	58ca      	ldr	r2, [r1, r3]
 801605c:	4463      	add	r3, ip
 801605e:	eba2 020c 	sub.w	r2, r2, ip
 8016062:	3308      	adds	r3, #8
 8016064:	4605      	mov	r5, r0
 8016066:	4419      	add	r1, r3
 8016068:	3a04      	subs	r2, #4
 801606a:	6903      	ldr	r3, [r0, #16]
 801606c:	f7f5 fc58 	bl	800b920 <ucdr_init_buffer_origin>
 8016070:	4628      	mov	r0, r5
 8016072:	4903      	ldr	r1, [pc, #12]	@ (8016080 <on_full_output_buffer+0x58>)
 8016074:	4622      	mov	r2, r4
 8016076:	f7f5 fc2f 	bl	800b8d8 <ucdr_set_on_full_buffer_callback>
 801607a:	2000      	movs	r0, #0
 801607c:	bd38      	pop	{r3, r4, r5, pc}
 801607e:	bf00      	nop
 8016080:	08016029 	.word	0x08016029

08016084 <uxr_init_output_reliable_stream>:
 8016084:	b410      	push	{r4}
 8016086:	f89d c004 	ldrb.w	ip, [sp, #4]
 801608a:	8103      	strh	r3, [r0, #8]
 801608c:	e9c0 1200 	strd	r1, r2, [r0]
 8016090:	f880 c00c 	strb.w	ip, [r0, #12]
 8016094:	b1d3      	cbz	r3, 80160cc <uxr_init_output_reliable_stream+0x48>
 8016096:	f8c1 c000 	str.w	ip, [r1]
 801609a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801609e:	f1bc 0f01 	cmp.w	ip, #1
 80160a2:	d913      	bls.n	80160cc <uxr_init_output_reliable_stream+0x48>
 80160a4:	2301      	movs	r3, #1
 80160a6:	fbb3 f1fc 	udiv	r1, r3, ip
 80160aa:	fb0c 3111 	mls	r1, ip, r1, r3
 80160ae:	b289      	uxth	r1, r1
 80160b0:	6842      	ldr	r2, [r0, #4]
 80160b2:	6804      	ldr	r4, [r0, #0]
 80160b4:	fbb2 f2fc 	udiv	r2, r2, ip
 80160b8:	fb01 f202 	mul.w	r2, r1, r2
 80160bc:	7b01      	ldrb	r1, [r0, #12]
 80160be:	50a1      	str	r1, [r4, r2]
 80160c0:	3301      	adds	r3, #1
 80160c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80160c6:	b29b      	uxth	r3, r3
 80160c8:	459c      	cmp	ip, r3
 80160ca:	d8ec      	bhi.n	80160a6 <uxr_init_output_reliable_stream+0x22>
 80160cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80160d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80160d4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80160d8:	4905      	ldr	r1, [pc, #20]	@ (80160f0 <uxr_init_output_reliable_stream+0x6c>)
 80160da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160de:	f8c0 100e 	str.w	r1, [r0, #14]
 80160e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80160e6:	2300      	movs	r3, #0
 80160e8:	8242      	strh	r2, [r0, #18]
 80160ea:	8403      	strh	r3, [r0, #32]
 80160ec:	4770      	bx	lr
 80160ee:	bf00      	nop
 80160f0:	ffff0000 	.word	0xffff0000

080160f4 <uxr_reset_output_reliable_stream>:
 80160f4:	8901      	ldrh	r1, [r0, #8]
 80160f6:	b1b1      	cbz	r1, 8016126 <uxr_reset_output_reliable_stream+0x32>
 80160f8:	f04f 0c00 	mov.w	ip, #0
 80160fc:	4663      	mov	r3, ip
 80160fe:	fbb3 f2f1 	udiv	r2, r3, r1
 8016102:	fb01 3312 	mls	r3, r1, r2, r3
 8016106:	b29b      	uxth	r3, r3
 8016108:	6842      	ldr	r2, [r0, #4]
 801610a:	fbb2 f2f1 	udiv	r2, r2, r1
 801610e:	6801      	ldr	r1, [r0, #0]
 8016110:	fb02 f303 	mul.w	r3, r2, r3
 8016114:	7b02      	ldrb	r2, [r0, #12]
 8016116:	50ca      	str	r2, [r1, r3]
 8016118:	f10c 0c01 	add.w	ip, ip, #1
 801611c:	8901      	ldrh	r1, [r0, #8]
 801611e:	fa1f f38c 	uxth.w	r3, ip
 8016122:	4299      	cmp	r1, r3
 8016124:	d8eb      	bhi.n	80160fe <uxr_reset_output_reliable_stream+0xa>
 8016126:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801612a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801612e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016132:	4904      	ldr	r1, [pc, #16]	@ (8016144 <uxr_reset_output_reliable_stream+0x50>)
 8016134:	f8c0 100e 	str.w	r1, [r0, #14]
 8016138:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801613c:	2300      	movs	r3, #0
 801613e:	8242      	strh	r2, [r0, #18]
 8016140:	8403      	strh	r3, [r0, #32]
 8016142:	4770      	bx	lr
 8016144:	ffff0000 	.word	0xffff0000

08016148 <uxr_prepare_reliable_buffer_to_write>:
 8016148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801614c:	4604      	mov	r4, r0
 801614e:	b091      	sub	sp, #68	@ 0x44
 8016150:	8900      	ldrh	r0, [r0, #8]
 8016152:	89e6      	ldrh	r6, [r4, #14]
 8016154:	6823      	ldr	r3, [r4, #0]
 8016156:	9204      	str	r2, [sp, #16]
 8016158:	fbb6 f2f0 	udiv	r2, r6, r0
 801615c:	fb00 6212 	mls	r2, r0, r2, r6
 8016160:	b292      	uxth	r2, r2
 8016162:	6865      	ldr	r5, [r4, #4]
 8016164:	fbb5 f5f0 	udiv	r5, r5, r0
 8016168:	fb05 3202 	mla	r2, r5, r2, r3
 801616c:	3204      	adds	r2, #4
 801616e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8016172:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016176:	9203      	str	r2, [sp, #12]
 8016178:	468b      	mov	fp, r1
 801617a:	1f2f      	subs	r7, r5, #4
 801617c:	2800      	cmp	r0, #0
 801617e:	f000 814c 	beq.w	801641a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8016182:	f04f 0c00 	mov.w	ip, #0
 8016186:	46e2      	mov	sl, ip
 8016188:	4661      	mov	r1, ip
 801618a:	fbb1 f2f0 	udiv	r2, r1, r0
 801618e:	fb00 1212 	mls	r2, r0, r2, r1
 8016192:	b292      	uxth	r2, r2
 8016194:	fb05 f202 	mul.w	r2, r5, r2
 8016198:	f10c 0c01 	add.w	ip, ip, #1
 801619c:	589a      	ldr	r2, [r3, r2]
 801619e:	454a      	cmp	r2, r9
 80161a0:	bf08      	it	eq
 80161a2:	f10a 0a01 	addeq.w	sl, sl, #1
 80161a6:	fa1f f18c 	uxth.w	r1, ip
 80161aa:	bf08      	it	eq
 80161ac:	fa1f fa8a 	uxtheq.w	sl, sl
 80161b0:	4281      	cmp	r1, r0
 80161b2:	d3ea      	bcc.n	801618a <uxr_prepare_reliable_buffer_to_write+0x42>
 80161b4:	4640      	mov	r0, r8
 80161b6:	2104      	movs	r1, #4
 80161b8:	f8cd a014 	str.w	sl, [sp, #20]
 80161bc:	f7f5 fbbc 	bl	800b938 <ucdr_alignment>
 80161c0:	4480      	add	r8, r0
 80161c2:	eb08 020b 	add.w	r2, r8, fp
 80161c6:	42ba      	cmp	r2, r7
 80161c8:	f240 80cd 	bls.w	8016366 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80161cc:	7b22      	ldrb	r2, [r4, #12]
 80161ce:	445a      	add	r2, fp
 80161d0:	42ba      	cmp	r2, r7
 80161d2:	f240 80b5 	bls.w	8016340 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80161d6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80161da:	33fc      	adds	r3, #252	@ 0xfc
 80161dc:	b2ba      	uxth	r2, r7
 80161de:	4413      	add	r3, r2
 80161e0:	b29b      	uxth	r3, r3
 80161e2:	fb0a f903 	mul.w	r9, sl, r3
 80161e6:	45d9      	cmp	r9, fp
 80161e8:	9305      	str	r3, [sp, #20]
 80161ea:	9306      	str	r3, [sp, #24]
 80161ec:	f0c0 80b7 	bcc.w	801635e <uxr_prepare_reliable_buffer_to_write+0x216>
 80161f0:	f108 0304 	add.w	r3, r8, #4
 80161f4:	42bb      	cmp	r3, r7
 80161f6:	f080 80db 	bcs.w	80163b0 <uxr_prepare_reliable_buffer_to_write+0x268>
 80161fa:	f1a2 0904 	sub.w	r9, r2, #4
 80161fe:	eba9 0908 	sub.w	r9, r9, r8
 8016202:	9b05      	ldr	r3, [sp, #20]
 8016204:	fa1f f989 	uxth.w	r9, r9
 8016208:	ebab 0b09 	sub.w	fp, fp, r9
 801620c:	fbbb f2f3 	udiv	r2, fp, r3
 8016210:	fb03 b312 	mls	r3, r3, r2, fp
 8016214:	2b00      	cmp	r3, #0
 8016216:	f000 80c8 	beq.w	80163aa <uxr_prepare_reliable_buffer_to_write+0x262>
 801621a:	3201      	adds	r2, #1
 801621c:	b292      	uxth	r2, r2
 801621e:	9306      	str	r3, [sp, #24]
 8016220:	4552      	cmp	r2, sl
 8016222:	f200 809c 	bhi.w	801635e <uxr_prepare_reliable_buffer_to_write+0x216>
 8016226:	f10d 0b20 	add.w	fp, sp, #32
 801622a:	2a00      	cmp	r2, #0
 801622c:	d042      	beq.n	80162b4 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801622e:	f8cd 801c 	str.w	r8, [sp, #28]
 8016232:	f04f 0a00 	mov.w	sl, #0
 8016236:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801623a:	9505      	str	r5, [sp, #20]
 801623c:	f10d 0b20 	add.w	fp, sp, #32
 8016240:	4615      	mov	r5, r2
 8016242:	e000      	b.n	8016246 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016244:	46c1      	mov	r9, r8
 8016246:	8920      	ldrh	r0, [r4, #8]
 8016248:	fbb6 f2f0 	udiv	r2, r6, r0
 801624c:	fb00 6112 	mls	r1, r0, r2, r6
 8016250:	b28a      	uxth	r2, r1
 8016252:	6863      	ldr	r3, [r4, #4]
 8016254:	fbb3 f1f0 	udiv	r1, r3, r0
 8016258:	6823      	ldr	r3, [r4, #0]
 801625a:	fb02 f101 	mul.w	r1, r2, r1
 801625e:	3104      	adds	r1, #4
 8016260:	4419      	add	r1, r3
 8016262:	4658      	mov	r0, fp
 8016264:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016268:	9200      	str	r2, [sp, #0]
 801626a:	2300      	movs	r3, #0
 801626c:	463a      	mov	r2, r7
 801626e:	f7f5 fb4d 	bl	800b90c <ucdr_init_buffer_origin_offset>
 8016272:	464a      	mov	r2, r9
 8016274:	2300      	movs	r3, #0
 8016276:	210d      	movs	r1, #13
 8016278:	4658      	mov	r0, fp
 801627a:	f7f9 fc35 	bl	800fae8 <uxr_buffer_submessage_header>
 801627e:	8921      	ldrh	r1, [r4, #8]
 8016280:	fbb6 f2f1 	udiv	r2, r6, r1
 8016284:	fb01 6212 	mls	r2, r1, r2, r6
 8016288:	b292      	uxth	r2, r2
 801628a:	6863      	ldr	r3, [r4, #4]
 801628c:	fbb3 f3f1 	udiv	r3, r3, r1
 8016290:	fb02 f303 	mul.w	r3, r2, r3
 8016294:	6822      	ldr	r2, [r4, #0]
 8016296:	4630      	mov	r0, r6
 8016298:	50d7      	str	r7, [r2, r3]
 801629a:	2101      	movs	r1, #1
 801629c:	f000 faf4 	bl	8016888 <uxr_seq_num_add>
 80162a0:	f10a 0a01 	add.w	sl, sl, #1
 80162a4:	fa1f f38a 	uxth.w	r3, sl
 80162a8:	429d      	cmp	r5, r3
 80162aa:	4606      	mov	r6, r0
 80162ac:	d8ca      	bhi.n	8016244 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80162ae:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80162b2:	9d05      	ldr	r5, [sp, #20]
 80162b4:	8920      	ldrh	r0, [r4, #8]
 80162b6:	fbb6 f3f0 	udiv	r3, r6, r0
 80162ba:	fb00 6313 	mls	r3, r0, r3, r6
 80162be:	b299      	uxth	r1, r3
 80162c0:	6863      	ldr	r3, [r4, #4]
 80162c2:	fbb3 f3f0 	udiv	r3, r3, r0
 80162c6:	fb01 f303 	mul.w	r3, r1, r3
 80162ca:	6821      	ldr	r1, [r4, #0]
 80162cc:	3304      	adds	r3, #4
 80162ce:	4419      	add	r1, r3
 80162d0:	463a      	mov	r2, r7
 80162d2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80162d6:	9000      	str	r0, [sp, #0]
 80162d8:	2300      	movs	r3, #0
 80162da:	4658      	mov	r0, fp
 80162dc:	f7f5 fb16 	bl	800b90c <ucdr_init_buffer_origin_offset>
 80162e0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80162e4:	4658      	mov	r0, fp
 80162e6:	fa1f f289 	uxth.w	r2, r9
 80162ea:	2302      	movs	r3, #2
 80162ec:	210d      	movs	r1, #13
 80162ee:	f7f9 fbfb 	bl	800fae8 <uxr_buffer_submessage_header>
 80162f2:	9b03      	ldr	r3, [sp, #12]
 80162f4:	8927      	ldrh	r7, [r4, #8]
 80162f6:	7b20      	ldrb	r0, [r4, #12]
 80162f8:	f108 0104 	add.w	r1, r8, #4
 80162fc:	440b      	add	r3, r1
 80162fe:	4619      	mov	r1, r3
 8016300:	fbb6 f3f7 	udiv	r3, r6, r7
 8016304:	fb07 6313 	mls	r3, r7, r3, r6
 8016308:	f1a5 0208 	sub.w	r2, r5, #8
 801630c:	b29d      	uxth	r5, r3
 801630e:	3004      	adds	r0, #4
 8016310:	6863      	ldr	r3, [r4, #4]
 8016312:	fbb3 f3f7 	udiv	r3, r3, r7
 8016316:	fb05 f303 	mul.w	r3, r5, r3
 801631a:	6825      	ldr	r5, [r4, #0]
 801631c:	4448      	add	r0, r9
 801631e:	50e8      	str	r0, [r5, r3]
 8016320:	9d04      	ldr	r5, [sp, #16]
 8016322:	eba2 0208 	sub.w	r2, r2, r8
 8016326:	4628      	mov	r0, r5
 8016328:	f7f5 fb02 	bl	800b930 <ucdr_init_buffer>
 801632c:	4628      	mov	r0, r5
 801632e:	493c      	ldr	r1, [pc, #240]	@ (8016420 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016330:	4622      	mov	r2, r4
 8016332:	f7f5 fad1 	bl	800b8d8 <ucdr_set_on_full_buffer_callback>
 8016336:	2001      	movs	r0, #1
 8016338:	81e6      	strh	r6, [r4, #14]
 801633a:	b011      	add	sp, #68	@ 0x44
 801633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016340:	2101      	movs	r1, #1
 8016342:	89e0      	ldrh	r0, [r4, #14]
 8016344:	f000 faa0 	bl	8016888 <uxr_seq_num_add>
 8016348:	8921      	ldrh	r1, [r4, #8]
 801634a:	4605      	mov	r5, r0
 801634c:	8a60      	ldrh	r0, [r4, #18]
 801634e:	f000 fa9b 	bl	8016888 <uxr_seq_num_add>
 8016352:	4601      	mov	r1, r0
 8016354:	4628      	mov	r0, r5
 8016356:	f000 fa9f 	bl	8016898 <uxr_seq_num_cmp>
 801635a:	2800      	cmp	r0, #0
 801635c:	dd42      	ble.n	80163e4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801635e:	2000      	movs	r0, #0
 8016360:	b011      	add	sp, #68	@ 0x44
 8016362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016366:	8921      	ldrh	r1, [r4, #8]
 8016368:	8a60      	ldrh	r0, [r4, #18]
 801636a:	9205      	str	r2, [sp, #20]
 801636c:	f000 fa8c 	bl	8016888 <uxr_seq_num_add>
 8016370:	4601      	mov	r1, r0
 8016372:	4630      	mov	r0, r6
 8016374:	f000 fa90 	bl	8016898 <uxr_seq_num_cmp>
 8016378:	2800      	cmp	r0, #0
 801637a:	9a05      	ldr	r2, [sp, #20]
 801637c:	dcef      	bgt.n	801635e <uxr_prepare_reliable_buffer_to_write+0x216>
 801637e:	8927      	ldrh	r7, [r4, #8]
 8016380:	fbb6 f3f7 	udiv	r3, r6, r7
 8016384:	fb07 6313 	mls	r3, r7, r3, r6
 8016388:	b29d      	uxth	r5, r3
 801638a:	6863      	ldr	r3, [r4, #4]
 801638c:	6824      	ldr	r4, [r4, #0]
 801638e:	fbb3 f3f7 	udiv	r3, r3, r7
 8016392:	fb05 f303 	mul.w	r3, r5, r3
 8016396:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801639a:	50e2      	str	r2, [r4, r3]
 801639c:	2300      	movs	r3, #0
 801639e:	f8cd 8000 	str.w	r8, [sp]
 80163a2:	f7f5 fab3 	bl	800b90c <ucdr_init_buffer_origin_offset>
 80163a6:	2001      	movs	r0, #1
 80163a8:	e7da      	b.n	8016360 <uxr_prepare_reliable_buffer_to_write+0x218>
 80163aa:	b293      	uxth	r3, r2
 80163ac:	461a      	mov	r2, r3
 80163ae:	e737      	b.n	8016220 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80163b0:	4630      	mov	r0, r6
 80163b2:	2101      	movs	r1, #1
 80163b4:	9207      	str	r2, [sp, #28]
 80163b6:	f000 fa67 	bl	8016888 <uxr_seq_num_add>
 80163ba:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80163be:	fbb0 f1fc 	udiv	r1, r0, ip
 80163c2:	fb0c 0111 	mls	r1, ip, r1, r0
 80163c6:	4606      	mov	r6, r0
 80163c8:	b288      	uxth	r0, r1
 80163ca:	6863      	ldr	r3, [r4, #4]
 80163cc:	fbb3 f1fc 	udiv	r1, r3, ip
 80163d0:	6823      	ldr	r3, [r4, #0]
 80163d2:	9a07      	ldr	r2, [sp, #28]
 80163d4:	fb00 f101 	mul.w	r1, r0, r1
 80163d8:	3104      	adds	r1, #4
 80163da:	440b      	add	r3, r1
 80163dc:	9303      	str	r3, [sp, #12]
 80163de:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80163e2:	e70a      	b.n	80161fa <uxr_prepare_reliable_buffer_to_write+0xb2>
 80163e4:	8921      	ldrh	r1, [r4, #8]
 80163e6:	fbb5 f3f1 	udiv	r3, r5, r1
 80163ea:	fb01 5313 	mls	r3, r1, r3, r5
 80163ee:	b29a      	uxth	r2, r3
 80163f0:	6863      	ldr	r3, [r4, #4]
 80163f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80163f6:	6821      	ldr	r1, [r4, #0]
 80163f8:	9804      	ldr	r0, [sp, #16]
 80163fa:	fb02 f303 	mul.w	r3, r2, r3
 80163fe:	3304      	adds	r3, #4
 8016400:	7b22      	ldrb	r2, [r4, #12]
 8016402:	4419      	add	r1, r3
 8016404:	445a      	add	r2, fp
 8016406:	f841 2c04 	str.w	r2, [r1, #-4]
 801640a:	7b23      	ldrb	r3, [r4, #12]
 801640c:	9300      	str	r3, [sp, #0]
 801640e:	2300      	movs	r3, #0
 8016410:	f7f5 fa7c 	bl	800b90c <ucdr_init_buffer_origin_offset>
 8016414:	81e5      	strh	r5, [r4, #14]
 8016416:	2001      	movs	r0, #1
 8016418:	e7a2      	b.n	8016360 <uxr_prepare_reliable_buffer_to_write+0x218>
 801641a:	4682      	mov	sl, r0
 801641c:	e6ca      	b.n	80161b4 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801641e:	bf00      	nop
 8016420:	08016029 	.word	0x08016029

08016424 <uxr_prepare_next_reliable_buffer_to_send>:
 8016424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016426:	4604      	mov	r4, r0
 8016428:	460f      	mov	r7, r1
 801642a:	8a00      	ldrh	r0, [r0, #16]
 801642c:	2101      	movs	r1, #1
 801642e:	4616      	mov	r6, r2
 8016430:	461d      	mov	r5, r3
 8016432:	f000 fa29 	bl	8016888 <uxr_seq_num_add>
 8016436:	8028      	strh	r0, [r5, #0]
 8016438:	8922      	ldrh	r2, [r4, #8]
 801643a:	fbb0 f3f2 	udiv	r3, r0, r2
 801643e:	fb02 0c13 	mls	ip, r2, r3, r0
 8016442:	fa1f fc8c 	uxth.w	ip, ip
 8016446:	6863      	ldr	r3, [r4, #4]
 8016448:	fbb3 f3f2 	udiv	r3, r3, r2
 801644c:	fb0c fc03 	mul.w	ip, ip, r3
 8016450:	6823      	ldr	r3, [r4, #0]
 8016452:	89e1      	ldrh	r1, [r4, #14]
 8016454:	f10c 0c04 	add.w	ip, ip, #4
 8016458:	4463      	add	r3, ip
 801645a:	603b      	str	r3, [r7, #0]
 801645c:	6823      	ldr	r3, [r4, #0]
 801645e:	449c      	add	ip, r3
 8016460:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016464:	6033      	str	r3, [r6, #0]
 8016466:	f000 fa17 	bl	8016898 <uxr_seq_num_cmp>
 801646a:	2800      	cmp	r0, #0
 801646c:	dd01      	ble.n	8016472 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801646e:	2000      	movs	r0, #0
 8016470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016472:	7b23      	ldrb	r3, [r4, #12]
 8016474:	6832      	ldr	r2, [r6, #0]
 8016476:	429a      	cmp	r2, r3
 8016478:	d9f9      	bls.n	801646e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801647a:	8a61      	ldrh	r1, [r4, #18]
 801647c:	8a20      	ldrh	r0, [r4, #16]
 801647e:	f000 fa07 	bl	8016890 <uxr_seq_num_sub>
 8016482:	8923      	ldrh	r3, [r4, #8]
 8016484:	4283      	cmp	r3, r0
 8016486:	d0f2      	beq.n	801646e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016488:	8828      	ldrh	r0, [r5, #0]
 801648a:	89e3      	ldrh	r3, [r4, #14]
 801648c:	8220      	strh	r0, [r4, #16]
 801648e:	4298      	cmp	r0, r3
 8016490:	d001      	beq.n	8016496 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016492:	2001      	movs	r0, #1
 8016494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016496:	2101      	movs	r1, #1
 8016498:	f000 f9f6 	bl	8016888 <uxr_seq_num_add>
 801649c:	81e0      	strh	r0, [r4, #14]
 801649e:	2001      	movs	r0, #1
 80164a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164a2:	bf00      	nop

080164a4 <uxr_update_output_stream_heartbeat_timestamp>:
 80164a4:	b570      	push	{r4, r5, r6, lr}
 80164a6:	8a01      	ldrh	r1, [r0, #16]
 80164a8:	4604      	mov	r4, r0
 80164aa:	8a40      	ldrh	r0, [r0, #18]
 80164ac:	4615      	mov	r5, r2
 80164ae:	461e      	mov	r6, r3
 80164b0:	f000 f9f2 	bl	8016898 <uxr_seq_num_cmp>
 80164b4:	2800      	cmp	r0, #0
 80164b6:	db07      	blt.n	80164c8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80164b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80164bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80164c0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80164c4:	2000      	movs	r0, #0
 80164c6:	bd70      	pop	{r4, r5, r6, pc}
 80164c8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80164cc:	b940      	cbnz	r0, 80164e0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80164ce:	2301      	movs	r3, #1
 80164d0:	f884 3020 	strb.w	r3, [r4, #32]
 80164d4:	3564      	adds	r5, #100	@ 0x64
 80164d6:	f146 0600 	adc.w	r6, r6, #0
 80164da:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80164de:	bd70      	pop	{r4, r5, r6, pc}
 80164e0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80164e4:	4295      	cmp	r5, r2
 80164e6:	eb76 0303 	sbcs.w	r3, r6, r3
 80164ea:	bfa5      	ittet	ge
 80164ec:	3001      	addge	r0, #1
 80164ee:	f884 0020 	strbge.w	r0, [r4, #32]
 80164f2:	2000      	movlt	r0, #0
 80164f4:	2001      	movge	r0, #1
 80164f6:	e7ed      	b.n	80164d4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080164f8 <uxr_begin_output_nack_buffer_it>:
 80164f8:	8a40      	ldrh	r0, [r0, #18]
 80164fa:	4770      	bx	lr

080164fc <uxr_next_reliable_nack_buffer_to_send>:
 80164fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016500:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016504:	b082      	sub	sp, #8
 8016506:	f1b8 0f00 	cmp.w	r8, #0
 801650a:	d011      	beq.n	8016530 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801650c:	4604      	mov	r4, r0
 801650e:	8818      	ldrh	r0, [r3, #0]
 8016510:	460e      	mov	r6, r1
 8016512:	4617      	mov	r7, r2
 8016514:	461d      	mov	r5, r3
 8016516:	2101      	movs	r1, #1
 8016518:	f000 f9b6 	bl	8016888 <uxr_seq_num_add>
 801651c:	8028      	strh	r0, [r5, #0]
 801651e:	8a21      	ldrh	r1, [r4, #16]
 8016520:	f000 f9ba 	bl	8016898 <uxr_seq_num_cmp>
 8016524:	2800      	cmp	r0, #0
 8016526:	dd07      	ble.n	8016538 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016528:	f04f 0800 	mov.w	r8, #0
 801652c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016530:	4640      	mov	r0, r8
 8016532:	b002      	add	sp, #8
 8016534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016538:	8921      	ldrh	r1, [r4, #8]
 801653a:	8828      	ldrh	r0, [r5, #0]
 801653c:	6823      	ldr	r3, [r4, #0]
 801653e:	fbb0 f2f1 	udiv	r2, r0, r1
 8016542:	fb01 0c12 	mls	ip, r1, r2, r0
 8016546:	fa1f f28c 	uxth.w	r2, ip
 801654a:	9301      	str	r3, [sp, #4]
 801654c:	6863      	ldr	r3, [r4, #4]
 801654e:	fbb3 fcf1 	udiv	ip, r3, r1
 8016552:	9b01      	ldr	r3, [sp, #4]
 8016554:	fb02 fc0c 	mul.w	ip, r2, ip
 8016558:	f10c 0c04 	add.w	ip, ip, #4
 801655c:	4463      	add	r3, ip
 801655e:	6033      	str	r3, [r6, #0]
 8016560:	6823      	ldr	r3, [r4, #0]
 8016562:	4463      	add	r3, ip
 8016564:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016568:	603b      	str	r3, [r7, #0]
 801656a:	7b22      	ldrb	r2, [r4, #12]
 801656c:	429a      	cmp	r2, r3
 801656e:	d0d2      	beq.n	8016516 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016570:	4640      	mov	r0, r8
 8016572:	b002      	add	sp, #8
 8016574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016578 <uxr_process_acknack>:
 8016578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801657a:	4604      	mov	r4, r0
 801657c:	460e      	mov	r6, r1
 801657e:	4610      	mov	r0, r2
 8016580:	2101      	movs	r1, #1
 8016582:	f000 f985 	bl	8016890 <uxr_seq_num_sub>
 8016586:	8a61      	ldrh	r1, [r4, #18]
 8016588:	f000 f982 	bl	8016890 <uxr_seq_num_sub>
 801658c:	b1c0      	cbz	r0, 80165c0 <uxr_process_acknack+0x48>
 801658e:	4605      	mov	r5, r0
 8016590:	2700      	movs	r7, #0
 8016592:	2101      	movs	r1, #1
 8016594:	8a60      	ldrh	r0, [r4, #18]
 8016596:	f000 f977 	bl	8016888 <uxr_seq_num_add>
 801659a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801659e:	fbb0 f1fc 	udiv	r1, r0, ip
 80165a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80165a6:	fb0c 0111 	mls	r1, ip, r1, r0
 80165aa:	b289      	uxth	r1, r1
 80165ac:	3701      	adds	r7, #1
 80165ae:	fbb3 f3fc 	udiv	r3, r3, ip
 80165b2:	fb01 f303 	mul.w	r3, r1, r3
 80165b6:	42bd      	cmp	r5, r7
 80165b8:	7b21      	ldrb	r1, [r4, #12]
 80165ba:	8260      	strh	r0, [r4, #18]
 80165bc:	50d1      	str	r1, [r2, r3]
 80165be:	d1e8      	bne.n	8016592 <uxr_process_acknack+0x1a>
 80165c0:	3e00      	subs	r6, #0
 80165c2:	f04f 0300 	mov.w	r3, #0
 80165c6:	bf18      	it	ne
 80165c8:	2601      	movne	r6, #1
 80165ca:	f884 3020 	strb.w	r3, [r4, #32]
 80165ce:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80165d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080165d4 <uxr_is_output_up_to_date>:
 80165d4:	8a01      	ldrh	r1, [r0, #16]
 80165d6:	8a40      	ldrh	r0, [r0, #18]
 80165d8:	b508      	push	{r3, lr}
 80165da:	f000 f95d 	bl	8016898 <uxr_seq_num_cmp>
 80165de:	fab0 f080 	clz	r0, r0
 80165e2:	0940      	lsrs	r0, r0, #5
 80165e4:	bd08      	pop	{r3, pc}
 80165e6:	bf00      	nop

080165e8 <get_available_free_slots>:
 80165e8:	8902      	ldrh	r2, [r0, #8]
 80165ea:	b1da      	cbz	r2, 8016624 <get_available_free_slots+0x3c>
 80165ec:	b530      	push	{r4, r5, lr}
 80165ee:	2100      	movs	r1, #0
 80165f0:	6843      	ldr	r3, [r0, #4]
 80165f2:	6805      	ldr	r5, [r0, #0]
 80165f4:	7b04      	ldrb	r4, [r0, #12]
 80165f6:	fbb3 fef2 	udiv	lr, r3, r2
 80165fa:	4608      	mov	r0, r1
 80165fc:	460b      	mov	r3, r1
 80165fe:	fbb3 fcf2 	udiv	ip, r3, r2
 8016602:	fb02 331c 	mls	r3, r2, ip, r3
 8016606:	b29b      	uxth	r3, r3
 8016608:	fb0e f303 	mul.w	r3, lr, r3
 801660c:	3101      	adds	r1, #1
 801660e:	f855 c003 	ldr.w	ip, [r5, r3]
 8016612:	4564      	cmp	r4, ip
 8016614:	bf08      	it	eq
 8016616:	3001      	addeq	r0, #1
 8016618:	b28b      	uxth	r3, r1
 801661a:	bf08      	it	eq
 801661c:	b280      	uxtheq	r0, r0
 801661e:	4293      	cmp	r3, r2
 8016620:	d3ed      	bcc.n	80165fe <get_available_free_slots+0x16>
 8016622:	bd30      	pop	{r4, r5, pc}
 8016624:	4610      	mov	r0, r2
 8016626:	4770      	bx	lr

08016628 <uxr_buffer_request_data>:
 8016628:	b530      	push	{r4, r5, lr}
 801662a:	b095      	sub	sp, #84	@ 0x54
 801662c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8016630:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8016632:	9303      	str	r3, [sp, #12]
 8016634:	2200      	movs	r2, #0
 8016636:	2d00      	cmp	r5, #0
 8016638:	bf14      	ite	ne
 801663a:	2101      	movne	r1, #1
 801663c:	4611      	moveq	r1, r2
 801663e:	4604      	mov	r4, r0
 8016640:	f88d 301c 	strb.w	r3, [sp, #28]
 8016644:	f88d 201d 	strb.w	r2, [sp, #29]
 8016648:	f88d 201e 	strb.w	r2, [sp, #30]
 801664c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8016650:	d021      	beq.n	8016696 <uxr_buffer_request_data+0x6e>
 8016652:	682a      	ldr	r2, [r5, #0]
 8016654:	686b      	ldr	r3, [r5, #4]
 8016656:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801665a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801665e:	2210      	movs	r2, #16
 8016660:	2308      	movs	r3, #8
 8016662:	2100      	movs	r1, #0
 8016664:	e9cd 3100 	strd	r3, r1, [sp]
 8016668:	4620      	mov	r0, r4
 801666a:	9905      	ldr	r1, [sp, #20]
 801666c:	ab0c      	add	r3, sp, #48	@ 0x30
 801666e:	f7f8 ff9d 	bl	800f5ac <uxr_prepare_stream_to_write_submessage>
 8016672:	b918      	cbnz	r0, 801667c <uxr_buffer_request_data+0x54>
 8016674:	4604      	mov	r4, r0
 8016676:	4620      	mov	r0, r4
 8016678:	b015      	add	sp, #84	@ 0x54
 801667a:	bd30      	pop	{r4, r5, pc}
 801667c:	9904      	ldr	r1, [sp, #16]
 801667e:	aa06      	add	r2, sp, #24
 8016680:	4620      	mov	r0, r4
 8016682:	f7f9 f8c9 	bl	800f818 <uxr_init_base_object_request>
 8016686:	a906      	add	r1, sp, #24
 8016688:	4604      	mov	r4, r0
 801668a:	a80c      	add	r0, sp, #48	@ 0x30
 801668c:	f7fa fbc4 	bl	8010e18 <uxr_serialize_READ_DATA_Payload>
 8016690:	4620      	mov	r0, r4
 8016692:	b015      	add	sp, #84	@ 0x54
 8016694:	bd30      	pop	{r4, r5, pc}
 8016696:	2208      	movs	r2, #8
 8016698:	e7e2      	b.n	8016660 <uxr_buffer_request_data+0x38>
 801669a:	bf00      	nop

0801669c <uxr_buffer_cancel_data>:
 801669c:	b510      	push	{r4, lr}
 801669e:	b094      	sub	sp, #80	@ 0x50
 80166a0:	2300      	movs	r3, #0
 80166a2:	9202      	str	r2, [sp, #8]
 80166a4:	9205      	str	r2, [sp, #20]
 80166a6:	9301      	str	r3, [sp, #4]
 80166a8:	2201      	movs	r2, #1
 80166aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80166ae:	f88d 301e 	strb.w	r3, [sp, #30]
 80166b2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80166b6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80166ba:	2308      	movs	r3, #8
 80166bc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80166c0:	9300      	str	r3, [sp, #0]
 80166c2:	2210      	movs	r2, #16
 80166c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80166c6:	4604      	mov	r4, r0
 80166c8:	9103      	str	r1, [sp, #12]
 80166ca:	f7f8 ff6f 	bl	800f5ac <uxr_prepare_stream_to_write_submessage>
 80166ce:	b918      	cbnz	r0, 80166d8 <uxr_buffer_cancel_data+0x3c>
 80166d0:	4604      	mov	r4, r0
 80166d2:	4620      	mov	r0, r4
 80166d4:	b014      	add	sp, #80	@ 0x50
 80166d6:	bd10      	pop	{r4, pc}
 80166d8:	9905      	ldr	r1, [sp, #20]
 80166da:	aa06      	add	r2, sp, #24
 80166dc:	4620      	mov	r0, r4
 80166de:	f7f9 f89b 	bl	800f818 <uxr_init_base_object_request>
 80166e2:	a906      	add	r1, sp, #24
 80166e4:	4604      	mov	r4, r0
 80166e6:	a80c      	add	r0, sp, #48	@ 0x30
 80166e8:	f7fa fb96 	bl	8010e18 <uxr_serialize_READ_DATA_Payload>
 80166ec:	4620      	mov	r0, r4
 80166ee:	b014      	add	sp, #80	@ 0x50
 80166f0:	bd10      	pop	{r4, pc}
 80166f2:	bf00      	nop

080166f4 <read_submessage_format>:
 80166f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166f8:	b095      	sub	sp, #84	@ 0x54
 80166fa:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80166fe:	b113      	cbz	r3, 8016706 <read_submessage_format+0x12>
 8016700:	b015      	add	sp, #84	@ 0x54
 8016702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016706:	460c      	mov	r4, r1
 8016708:	4615      	mov	r5, r2
 801670a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801670e:	4607      	mov	r7, r0
 8016710:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8016712:	9004      	str	r0, [sp, #16]
 8016714:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8016716:	9005      	str	r0, [sp, #20]
 8016718:	1a52      	subs	r2, r2, r1
 801671a:	a80c      	add	r0, sp, #48	@ 0x30
 801671c:	4699      	mov	r9, r3
 801671e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8016722:	f7f5 f905 	bl	800b930 <ucdr_init_buffer>
 8016726:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801672a:	a80c      	add	r0, sp, #48	@ 0x30
 801672c:	f7f5 f8d4 	bl	800b8d8 <ucdr_set_on_full_buffer_callback>
 8016730:	69e2      	ldr	r2, [r4, #28]
 8016732:	b19a      	cbz	r2, 801675c <read_submessage_format+0x68>
 8016734:	f1b8 0f07 	cmp.w	r8, #7
 8016738:	f882 9014 	strb.w	r9, [r2, #20]
 801673c:	d040      	beq.n	80167c0 <read_submessage_format+0xcc>
 801673e:	f1b8 0f08 	cmp.w	r8, #8
 8016742:	d02e      	beq.n	80167a2 <read_submessage_format+0xae>
 8016744:	f1b8 0f06 	cmp.w	r8, #6
 8016748:	d011      	beq.n	801676e <read_submessage_format+0x7a>
 801674a:	2301      	movs	r3, #1
 801674c:	7513      	strb	r3, [r2, #20]
 801674e:	4629      	mov	r1, r5
 8016750:	4620      	mov	r0, r4
 8016752:	f7f5 f93d 	bl	800b9d0 <ucdr_advance_buffer>
 8016756:	b015      	add	sp, #84	@ 0x54
 8016758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801675c:	f1b8 0f07 	cmp.w	r8, #7
 8016760:	d02e      	beq.n	80167c0 <read_submessage_format+0xcc>
 8016762:	f1b8 0f08 	cmp.w	r8, #8
 8016766:	d01c      	beq.n	80167a2 <read_submessage_format+0xae>
 8016768:	f1b8 0f06 	cmp.w	r8, #6
 801676c:	d1ef      	bne.n	801674e <read_submessage_format+0x5a>
 801676e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8016772:	f1b8 0f00 	cmp.w	r8, #0
 8016776:	d011      	beq.n	801679c <read_submessage_format+0xa8>
 8016778:	ab0c      	add	r3, sp, #48	@ 0x30
 801677a:	e9cd 3500 	strd	r3, r5, [sp]
 801677e:	2306      	movs	r3, #6
 8016780:	f88d 3016 	strb.w	r3, [sp, #22]
 8016784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016788:	9302      	str	r3, [sp, #8]
 801678a:	4632      	mov	r2, r6
 801678c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016790:	4638      	mov	r0, r7
 8016792:	47c0      	blx	r8
 8016794:	2301      	movs	r3, #1
 8016796:	69e2      	ldr	r2, [r4, #28]
 8016798:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801679c:	2a00      	cmp	r2, #0
 801679e:	d1d4      	bne.n	801674a <read_submessage_format+0x56>
 80167a0:	e7d5      	b.n	801674e <read_submessage_format+0x5a>
 80167a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d0f8      	beq.n	801679c <read_submessage_format+0xa8>
 80167aa:	a906      	add	r1, sp, #24
 80167ac:	a80c      	add	r0, sp, #48	@ 0x30
 80167ae:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80167b2:	f7fa fbf7 	bl	8010fa4 <uxr_deserialize_SampleIdentity>
 80167b6:	b9a0      	cbnz	r0, 80167e2 <read_submessage_format+0xee>
 80167b8:	69e2      	ldr	r2, [r4, #28]
 80167ba:	2a00      	cmp	r2, #0
 80167bc:	d1c5      	bne.n	801674a <read_submessage_format+0x56>
 80167be:	e7c6      	b.n	801674e <read_submessage_format+0x5a>
 80167c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80167c4:	b13b      	cbz	r3, 80167d6 <read_submessage_format+0xe2>
 80167c6:	a906      	add	r1, sp, #24
 80167c8:	a80c      	add	r0, sp, #48	@ 0x30
 80167ca:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80167ce:	f7fa f8bd 	bl	801094c <uxr_deserialize_BaseObjectRequest>
 80167d2:	bb60      	cbnz	r0, 801682e <read_submessage_format+0x13a>
 80167d4:	69e2      	ldr	r2, [r4, #28]
 80167d6:	68a3      	ldr	r3, [r4, #8]
 80167d8:	442b      	add	r3, r5
 80167da:	60a3      	str	r3, [r4, #8]
 80167dc:	2a00      	cmp	r2, #0
 80167de:	d1b4      	bne.n	801674a <read_submessage_format+0x56>
 80167e0:	e7b5      	b.n	801674e <read_submessage_format+0x5a>
 80167e2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80167e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80167e8:	1a52      	subs	r2, r2, r1
 80167ea:	eba8 0803 	sub.w	r8, r8, r3
 80167ee:	a80c      	add	r0, sp, #48	@ 0x30
 80167f0:	f7f5 f89e 	bl	800b930 <ucdr_init_buffer>
 80167f4:	44a8      	add	r8, r5
 80167f6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80167fa:	a80c      	add	r0, sp, #48	@ 0x30
 80167fc:	f7f5 f86c 	bl	800b8d8 <ucdr_set_on_full_buffer_callback>
 8016800:	fa1f f888 	uxth.w	r8, r8
 8016804:	ab0c      	add	r3, sp, #48	@ 0x30
 8016806:	9300      	str	r3, [sp, #0]
 8016808:	f8cd 8004 	str.w	r8, [sp, #4]
 801680c:	2108      	movs	r1, #8
 801680e:	f88d 1016 	strb.w	r1, [sp, #22]
 8016812:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8016816:	9102      	str	r1, [sp, #8]
 8016818:	ab06      	add	r3, sp, #24
 801681a:	4632      	mov	r2, r6
 801681c:	9905      	ldr	r1, [sp, #20]
 801681e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8016822:	4638      	mov	r0, r7
 8016824:	47b0      	blx	r6
 8016826:	2301      	movs	r3, #1
 8016828:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801682c:	e7c4      	b.n	80167b8 <read_submessage_format+0xc4>
 801682e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016832:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016834:	1a52      	subs	r2, r2, r1
 8016836:	a80c      	add	r0, sp, #48	@ 0x30
 8016838:	eba8 0803 	sub.w	r8, r8, r3
 801683c:	f7f5 f878 	bl	800b930 <ucdr_init_buffer>
 8016840:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016844:	a80c      	add	r0, sp, #48	@ 0x30
 8016846:	f7f5 f847 	bl	800b8d8 <ucdr_set_on_full_buffer_callback>
 801684a:	ab0c      	add	r3, sp, #48	@ 0x30
 801684c:	9300      	str	r3, [sp, #0]
 801684e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8016852:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016856:	44a8      	add	r8, r5
 8016858:	fa1f f888 	uxth.w	r8, r8
 801685c:	f8cd 8004 	str.w	r8, [sp, #4]
 8016860:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016864:	2107      	movs	r1, #7
 8016866:	f88d 1016 	strb.w	r1, [sp, #22]
 801686a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801686e:	9102      	str	r1, [sp, #8]
 8016870:	4632      	mov	r2, r6
 8016872:	b29b      	uxth	r3, r3
 8016874:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8016878:	9905      	ldr	r1, [sp, #20]
 801687a:	4638      	mov	r0, r7
 801687c:	47b0      	blx	r6
 801687e:	2301      	movs	r3, #1
 8016880:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8016884:	e7a6      	b.n	80167d4 <read_submessage_format+0xe0>
 8016886:	bf00      	nop

08016888 <uxr_seq_num_add>:
 8016888:	4408      	add	r0, r1
 801688a:	b280      	uxth	r0, r0
 801688c:	4770      	bx	lr
 801688e:	bf00      	nop

08016890 <uxr_seq_num_sub>:
 8016890:	1a40      	subs	r0, r0, r1
 8016892:	b280      	uxth	r0, r0
 8016894:	4770      	bx	lr
 8016896:	bf00      	nop

08016898 <uxr_seq_num_cmp>:
 8016898:	4288      	cmp	r0, r1
 801689a:	d011      	beq.n	80168c0 <uxr_seq_num_cmp+0x28>
 801689c:	d309      	bcc.n	80168b2 <uxr_seq_num_cmp+0x1a>
 801689e:	4288      	cmp	r0, r1
 80168a0:	d910      	bls.n	80168c4 <uxr_seq_num_cmp+0x2c>
 80168a2:	1a40      	subs	r0, r0, r1
 80168a4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80168a8:	bfd4      	ite	le
 80168aa:	2001      	movle	r0, #1
 80168ac:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80168b0:	4770      	bx	lr
 80168b2:	1a0b      	subs	r3, r1, r0
 80168b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80168b8:	daf1      	bge.n	801689e <uxr_seq_num_cmp+0x6>
 80168ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80168be:	4770      	bx	lr
 80168c0:	2000      	movs	r0, #0
 80168c2:	4770      	bx	lr
 80168c4:	2001      	movs	r0, #1
 80168c6:	4770      	bx	lr

080168c8 <uxr_init_framing_io>:
 80168c8:	2300      	movs	r3, #0
 80168ca:	7041      	strb	r1, [r0, #1]
 80168cc:	7003      	strb	r3, [r0, #0]
 80168ce:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80168d0:	4770      	bx	lr
 80168d2:	bf00      	nop

080168d4 <uxr_write_framed_msg>:
 80168d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168d8:	4617      	mov	r7, r2
 80168da:	7842      	ldrb	r2, [r0, #1]
 80168dc:	b083      	sub	sp, #12
 80168de:	460e      	mov	r6, r1
 80168e0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80168e4:	469a      	mov	sl, r3
 80168e6:	2901      	cmp	r1, #1
 80168e8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80168ec:	4604      	mov	r4, r0
 80168ee:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80168f2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80168f6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80168fa:	f240 8137 	bls.w	8016b6c <uxr_write_framed_msg+0x298>
 80168fe:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8016902:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8016906:	2901      	cmp	r1, #1
 8016908:	f04f 0202 	mov.w	r2, #2
 801690c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016910:	f240 808f 	bls.w	8016a32 <uxr_write_framed_msg+0x15e>
 8016914:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016916:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801691a:	b2dd      	uxtb	r5, r3
 801691c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8016920:	2203      	movs	r2, #3
 8016922:	2901      	cmp	r1, #1
 8016924:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016928:	f240 809a 	bls.w	8016a60 <uxr_write_framed_msg+0x18c>
 801692c:	18a1      	adds	r1, r4, r2
 801692e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016930:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8016934:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016938:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801693c:	3201      	adds	r2, #1
 801693e:	2801      	cmp	r0, #1
 8016940:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016944:	f240 80a0 	bls.w	8016a88 <uxr_write_framed_msg+0x1b4>
 8016948:	18a0      	adds	r0, r4, r2
 801694a:	3201      	adds	r2, #1
 801694c:	b2d2      	uxtb	r2, r2
 801694e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016952:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016956:	2b00      	cmp	r3, #0
 8016958:	f000 80a9 	beq.w	8016aae <uxr_write_framed_msg+0x1da>
 801695c:	f04f 0900 	mov.w	r9, #0
 8016960:	46c8      	mov	r8, r9
 8016962:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8016966:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801696a:	2901      	cmp	r1, #1
 801696c:	f240 80c3 	bls.w	8016af6 <uxr_write_framed_msg+0x222>
 8016970:	2a29      	cmp	r2, #41	@ 0x29
 8016972:	f200 809f 	bhi.w	8016ab4 <uxr_write_framed_msg+0x1e0>
 8016976:	18a1      	adds	r1, r4, r2
 8016978:	3201      	adds	r2, #1
 801697a:	b2d2      	uxtb	r2, r2
 801697c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8016980:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016984:	ea89 0303 	eor.w	r3, r9, r3
 8016988:	498c      	ldr	r1, [pc, #560]	@ (8016bbc <uxr_write_framed_msg+0x2e8>)
 801698a:	b2db      	uxtb	r3, r3
 801698c:	f108 0801 	add.w	r8, r8, #1
 8016990:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016994:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8016998:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801699a:	4543      	cmp	r3, r8
 801699c:	d8e1      	bhi.n	8016962 <uxr_write_framed_msg+0x8e>
 801699e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80169a2:	fa5f f889 	uxtb.w	r8, r9
 80169a6:	9301      	str	r3, [sp, #4]
 80169a8:	f04f 0900 	mov.w	r9, #0
 80169ac:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80169b0:	fa5f f18a 	uxtb.w	r1, sl
 80169b4:	2901      	cmp	r1, #1
 80169b6:	d921      	bls.n	80169fc <uxr_write_framed_msg+0x128>
 80169b8:	2a29      	cmp	r2, #41	@ 0x29
 80169ba:	f240 80af 	bls.w	8016b1c <uxr_write_framed_msg+0x248>
 80169be:	2500      	movs	r5, #0
 80169c0:	e000      	b.n	80169c4 <uxr_write_framed_msg+0xf0>
 80169c2:	b160      	cbz	r0, 80169de <uxr_write_framed_msg+0x10a>
 80169c4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80169c8:	1b52      	subs	r2, r2, r5
 80169ca:	465b      	mov	r3, fp
 80169cc:	4421      	add	r1, r4
 80169ce:	4638      	mov	r0, r7
 80169d0:	47b0      	blx	r6
 80169d2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80169d6:	4405      	add	r5, r0
 80169d8:	4295      	cmp	r5, r2
 80169da:	d3f2      	bcc.n	80169c2 <uxr_write_framed_msg+0xee>
 80169dc:	d003      	beq.n	80169e6 <uxr_write_framed_msg+0x112>
 80169de:	2000      	movs	r0, #0
 80169e0:	b003      	add	sp, #12
 80169e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169e6:	fa5f f18a 	uxtb.w	r1, sl
 80169ea:	f04f 0300 	mov.w	r3, #0
 80169ee:	2901      	cmp	r1, #1
 80169f0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80169f4:	f04f 0200 	mov.w	r2, #0
 80169f8:	f200 8090 	bhi.w	8016b1c <uxr_write_framed_msg+0x248>
 80169fc:	1c51      	adds	r1, r2, #1
 80169fe:	b2c9      	uxtb	r1, r1
 8016a00:	2929      	cmp	r1, #41	@ 0x29
 8016a02:	d8dc      	bhi.n	80169be <uxr_write_framed_msg+0xea>
 8016a04:	18a5      	adds	r5, r4, r2
 8016a06:	4421      	add	r1, r4
 8016a08:	3202      	adds	r2, #2
 8016a0a:	f088 0820 	eor.w	r8, r8, #32
 8016a0e:	4648      	mov	r0, r9
 8016a10:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8016a14:	b2d2      	uxtb	r2, r2
 8016a16:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8016a1a:	f04f 0901 	mov.w	r9, #1
 8016a1e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8016a22:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016a26:	2800      	cmp	r0, #0
 8016a28:	f040 8085 	bne.w	8016b36 <uxr_write_framed_msg+0x262>
 8016a2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016a30:	e7bc      	b.n	80169ac <uxr_write_framed_msg+0xd8>
 8016a32:	4611      	mov	r1, r2
 8016a34:	f04f 0c03 	mov.w	ip, #3
 8016a38:	2204      	movs	r2, #4
 8016a3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a3c:	4421      	add	r1, r4
 8016a3e:	b2dd      	uxtb	r5, r3
 8016a40:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8016a44:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8016a48:	44a4      	add	ip, r4
 8016a4a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8016a4e:	f080 0020 	eor.w	r0, r0, #32
 8016a52:	2901      	cmp	r1, #1
 8016a54:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8016a58:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016a5c:	f63f af66 	bhi.w	801692c <uxr_write_framed_msg+0x58>
 8016a60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a62:	18a0      	adds	r0, r4, r2
 8016a64:	f085 0520 	eor.w	r5, r5, #32
 8016a68:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016a6c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016a70:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8016a74:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8016a78:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8016a7c:	3202      	adds	r2, #2
 8016a7e:	2801      	cmp	r0, #1
 8016a80:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016a84:	f63f af60 	bhi.w	8016948 <uxr_write_framed_msg+0x74>
 8016a88:	1c50      	adds	r0, r2, #1
 8016a8a:	18a5      	adds	r5, r4, r2
 8016a8c:	fa54 f080 	uxtab	r0, r4, r0
 8016a90:	3202      	adds	r2, #2
 8016a92:	f081 0120 	eor.w	r1, r1, #32
 8016a96:	b2d2      	uxtb	r2, r2
 8016a98:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016a9c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8016aa0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016aa4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	f47f af57 	bne.w	801695c <uxr_write_framed_msg+0x88>
 8016aae:	9301      	str	r3, [sp, #4]
 8016ab0:	4698      	mov	r8, r3
 8016ab2:	e779      	b.n	80169a8 <uxr_write_framed_msg+0xd4>
 8016ab4:	2500      	movs	r5, #0
 8016ab6:	e001      	b.n	8016abc <uxr_write_framed_msg+0x1e8>
 8016ab8:	2800      	cmp	r0, #0
 8016aba:	d090      	beq.n	80169de <uxr_write_framed_msg+0x10a>
 8016abc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8016ac0:	1b52      	subs	r2, r2, r5
 8016ac2:	465b      	mov	r3, fp
 8016ac4:	4421      	add	r1, r4
 8016ac6:	4638      	mov	r0, r7
 8016ac8:	47b0      	blx	r6
 8016aca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016ace:	4405      	add	r5, r0
 8016ad0:	4295      	cmp	r5, r2
 8016ad2:	d3f1      	bcc.n	8016ab8 <uxr_write_framed_msg+0x1e4>
 8016ad4:	d183      	bne.n	80169de <uxr_write_framed_msg+0x10a>
 8016ad6:	f04f 0300 	mov.w	r3, #0
 8016ada:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016ade:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016ae0:	4543      	cmp	r3, r8
 8016ae2:	d964      	bls.n	8016bae <uxr_write_framed_msg+0x2da>
 8016ae4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8016ae8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8016aec:	2901      	cmp	r1, #1
 8016aee:	f04f 0200 	mov.w	r2, #0
 8016af2:	f63f af3d 	bhi.w	8016970 <uxr_write_framed_msg+0x9c>
 8016af6:	1c51      	adds	r1, r2, #1
 8016af8:	b2c9      	uxtb	r1, r1
 8016afa:	2929      	cmp	r1, #41	@ 0x29
 8016afc:	d8da      	bhi.n	8016ab4 <uxr_write_framed_msg+0x1e0>
 8016afe:	18a0      	adds	r0, r4, r2
 8016b00:	4421      	add	r1, r4
 8016b02:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8016b06:	3202      	adds	r2, #2
 8016b08:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8016b0c:	b2d2      	uxtb	r2, r2
 8016b0e:	f083 0020 	eor.w	r0, r3, #32
 8016b12:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8016b16:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016b1a:	e733      	b.n	8016984 <uxr_write_framed_msg+0xb0>
 8016b1c:	18a1      	adds	r1, r4, r2
 8016b1e:	3201      	adds	r2, #1
 8016b20:	4648      	mov	r0, r9
 8016b22:	b2d2      	uxtb	r2, r2
 8016b24:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8016b28:	f04f 0901 	mov.w	r9, #1
 8016b2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016b30:	2800      	cmp	r0, #0
 8016b32:	f43f af7b 	beq.w	8016a2c <uxr_write_framed_msg+0x158>
 8016b36:	2500      	movs	r5, #0
 8016b38:	e002      	b.n	8016b40 <uxr_write_framed_msg+0x26c>
 8016b3a:	2800      	cmp	r0, #0
 8016b3c:	f43f af4f 	beq.w	80169de <uxr_write_framed_msg+0x10a>
 8016b40:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8016b44:	1b52      	subs	r2, r2, r5
 8016b46:	465b      	mov	r3, fp
 8016b48:	4421      	add	r1, r4
 8016b4a:	4638      	mov	r0, r7
 8016b4c:	47b0      	blx	r6
 8016b4e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016b52:	4405      	add	r5, r0
 8016b54:	4295      	cmp	r5, r2
 8016b56:	d3f0      	bcc.n	8016b3a <uxr_write_framed_msg+0x266>
 8016b58:	f47f af41 	bne.w	80169de <uxr_write_framed_msg+0x10a>
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016b62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b64:	b298      	uxth	r0, r3
 8016b66:	b003      	add	sp, #12
 8016b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b6c:	217d      	movs	r1, #125	@ 0x7d
 8016b6e:	f082 0220 	eor.w	r2, r2, #32
 8016b72:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8016b76:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8016b7a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8016b7e:	2901      	cmp	r1, #1
 8016b80:	f04f 0203 	mov.w	r2, #3
 8016b84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016b88:	d804      	bhi.n	8016b94 <uxr_write_framed_msg+0x2c0>
 8016b8a:	4611      	mov	r1, r2
 8016b8c:	f04f 0c04 	mov.w	ip, #4
 8016b90:	2205      	movs	r2, #5
 8016b92:	e752      	b.n	8016a3a <uxr_write_framed_msg+0x166>
 8016b94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b96:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8016b9a:	b2dd      	uxtb	r5, r3
 8016b9c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8016ba0:	2204      	movs	r2, #4
 8016ba2:	2901      	cmp	r1, #1
 8016ba4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016ba8:	f63f aec0 	bhi.w	801692c <uxr_write_framed_msg+0x58>
 8016bac:	e758      	b.n	8016a60 <uxr_write_framed_msg+0x18c>
 8016bae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8016bb2:	fa5f f889 	uxtb.w	r8, r9
 8016bb6:	9301      	str	r3, [sp, #4]
 8016bb8:	2200      	movs	r2, #0
 8016bba:	e6f5      	b.n	80169a8 <uxr_write_framed_msg+0xd4>
 8016bbc:	0801a230 	.word	0x0801a230

08016bc0 <uxr_framing_read_transport>:
 8016bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc4:	4604      	mov	r4, r0
 8016bc6:	b083      	sub	sp, #12
 8016bc8:	461f      	mov	r7, r3
 8016bca:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8016bce:	4689      	mov	r9, r1
 8016bd0:	4692      	mov	sl, r2
 8016bd2:	f7f8 ffcf 	bl	800fb74 <uxr_millis>
 8016bd6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016bda:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8016bde:	42b3      	cmp	r3, r6
 8016be0:	4680      	mov	r8, r0
 8016be2:	d061      	beq.n	8016ca8 <uxr_framing_read_transport+0xe8>
 8016be4:	d81c      	bhi.n	8016c20 <uxr_framing_read_transport+0x60>
 8016be6:	1e75      	subs	r5, r6, #1
 8016be8:	1aed      	subs	r5, r5, r3
 8016bea:	b2ed      	uxtb	r5, r5
 8016bec:	2600      	movs	r6, #0
 8016bee:	455d      	cmp	r5, fp
 8016bf0:	d81f      	bhi.n	8016c32 <uxr_framing_read_transport+0x72>
 8016bf2:	19ab      	adds	r3, r5, r6
 8016bf4:	455b      	cmp	r3, fp
 8016bf6:	bf84      	itt	hi
 8016bf8:	ebab 0605 	subhi.w	r6, fp, r5
 8016bfc:	b2f6      	uxtbhi	r6, r6
 8016bfe:	b9ed      	cbnz	r5, 8016c3c <uxr_framing_read_transport+0x7c>
 8016c00:	f04f 0b00 	mov.w	fp, #0
 8016c04:	f7f8 ffb6 	bl	800fb74 <uxr_millis>
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	eba0 0808 	sub.w	r8, r0, r8
 8016c0e:	eba3 0308 	sub.w	r3, r3, r8
 8016c12:	4658      	mov	r0, fp
 8016c14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c18:	603b      	str	r3, [r7, #0]
 8016c1a:	b003      	add	sp, #12
 8016c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c20:	2e00      	cmp	r6, #0
 8016c22:	d049      	beq.n	8016cb8 <uxr_framing_read_transport+0xf8>
 8016c24:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8016c28:	b2ed      	uxtb	r5, r5
 8016c2a:	3e01      	subs	r6, #1
 8016c2c:	455d      	cmp	r5, fp
 8016c2e:	b2f6      	uxtb	r6, r6
 8016c30:	d9df      	bls.n	8016bf2 <uxr_framing_read_transport+0x32>
 8016c32:	fa5f f58b 	uxtb.w	r5, fp
 8016c36:	2600      	movs	r6, #0
 8016c38:	2d00      	cmp	r5, #0
 8016c3a:	d0e1      	beq.n	8016c00 <uxr_framing_read_transport+0x40>
 8016c3c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016c40:	3102      	adds	r1, #2
 8016c42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c44:	9300      	str	r3, [sp, #0]
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	4421      	add	r1, r4
 8016c4a:	462a      	mov	r2, r5
 8016c4c:	4650      	mov	r0, sl
 8016c4e:	47c8      	blx	r9
 8016c50:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016c54:	4a1a      	ldr	r2, [pc, #104]	@ (8016cc0 <uxr_framing_read_transport+0x100>)
 8016c56:	4403      	add	r3, r0
 8016c58:	0859      	lsrs	r1, r3, #1
 8016c5a:	fba2 2101 	umull	r2, r1, r2, r1
 8016c5e:	0889      	lsrs	r1, r1, #2
 8016c60:	222a      	movs	r2, #42	@ 0x2a
 8016c62:	fb02 3111 	mls	r1, r2, r1, r3
 8016c66:	4683      	mov	fp, r0
 8016c68:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d0c7      	beq.n	8016c00 <uxr_framing_read_transport+0x40>
 8016c70:	42a8      	cmp	r0, r5
 8016c72:	d1c7      	bne.n	8016c04 <uxr_framing_read_transport+0x44>
 8016c74:	2e00      	cmp	r6, #0
 8016c76:	d0c5      	beq.n	8016c04 <uxr_framing_read_transport+0x44>
 8016c78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c7a:	9300      	str	r3, [sp, #0]
 8016c7c:	3102      	adds	r1, #2
 8016c7e:	4632      	mov	r2, r6
 8016c80:	4421      	add	r1, r4
 8016c82:	2300      	movs	r3, #0
 8016c84:	4650      	mov	r0, sl
 8016c86:	47c8      	blx	r9
 8016c88:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8016cc0 <uxr_framing_read_transport+0x100>)
 8016c8e:	180b      	adds	r3, r1, r0
 8016c90:	0859      	lsrs	r1, r3, #1
 8016c92:	fba2 1201 	umull	r1, r2, r2, r1
 8016c96:	0892      	lsrs	r2, r2, #2
 8016c98:	212a      	movs	r1, #42	@ 0x2a
 8016c9a:	fb01 3312 	mls	r3, r1, r2, r3
 8016c9e:	eb00 0b05 	add.w	fp, r0, r5
 8016ca2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016ca6:	e7ad      	b.n	8016c04 <uxr_framing_read_transport+0x44>
 8016ca8:	2600      	movs	r6, #0
 8016caa:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8016cae:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8016cb0:	d9bf      	bls.n	8016c32 <uxr_framing_read_transport+0x72>
 8016cb2:	2102      	movs	r1, #2
 8016cb4:	2529      	movs	r5, #41	@ 0x29
 8016cb6:	e7c4      	b.n	8016c42 <uxr_framing_read_transport+0x82>
 8016cb8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8016cbc:	b2ed      	uxtb	r5, r5
 8016cbe:	e796      	b.n	8016bee <uxr_framing_read_transport+0x2e>
 8016cc0:	30c30c31 	.word	0x30c30c31

08016cc4 <uxr_read_framed_msg>:
 8016cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc8:	461e      	mov	r6, r3
 8016cca:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8016cce:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8016cd2:	429d      	cmp	r5, r3
 8016cd4:	b083      	sub	sp, #12
 8016cd6:	4604      	mov	r4, r0
 8016cd8:	4688      	mov	r8, r1
 8016cda:	4691      	mov	r9, r2
 8016cdc:	f000 8188 	beq.w	8016ff0 <uxr_read_framed_msg+0x32c>
 8016ce0:	7823      	ldrb	r3, [r4, #0]
 8016ce2:	4dc1      	ldr	r5, [pc, #772]	@ (8016fe8 <uxr_read_framed_msg+0x324>)
 8016ce4:	4fc1      	ldr	r7, [pc, #772]	@ (8016fec <uxr_read_framed_msg+0x328>)
 8016ce6:	2b07      	cmp	r3, #7
 8016ce8:	d8fd      	bhi.n	8016ce6 <uxr_read_framed_msg+0x22>
 8016cea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016cee:	0115      	.short	0x0115
 8016cf0:	00d600f6 	.word	0x00d600f6
 8016cf4:	009000b9 	.word	0x009000b9
 8016cf8:	0030004d 	.word	0x0030004d
 8016cfc:	0008      	.short	0x0008
 8016cfe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016d02:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016d06:	4299      	cmp	r1, r3
 8016d08:	f000 814a 	beq.w	8016fa0 <uxr_read_framed_msg+0x2dc>
 8016d0c:	18e2      	adds	r2, r4, r3
 8016d0e:	7892      	ldrb	r2, [r2, #2]
 8016d10:	2a7d      	cmp	r2, #125	@ 0x7d
 8016d12:	f000 8199 	beq.w	8017048 <uxr_read_framed_msg+0x384>
 8016d16:	3301      	adds	r3, #1
 8016d18:	0858      	lsrs	r0, r3, #1
 8016d1a:	fba5 1000 	umull	r1, r0, r5, r0
 8016d1e:	0880      	lsrs	r0, r0, #2
 8016d20:	212a      	movs	r1, #42	@ 0x2a
 8016d22:	fb01 3310 	mls	r3, r1, r0, r3
 8016d26:	2a7e      	cmp	r2, #126	@ 0x7e
 8016d28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016d2c:	f000 8252 	beq.w	80171d4 <uxr_read_framed_msg+0x510>
 8016d30:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016d32:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8016d34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016d38:	b29b      	uxth	r3, r3
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	4299      	cmp	r1, r3
 8016d3e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016d40:	7022      	strb	r2, [r4, #0]
 8016d42:	f000 8179 	beq.w	8017038 <uxr_read_framed_msg+0x374>
 8016d46:	2000      	movs	r0, #0
 8016d48:	b003      	add	sp, #12
 8016d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d4e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016d52:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016d56:	4299      	cmp	r1, r3
 8016d58:	f000 8131 	beq.w	8016fbe <uxr_read_framed_msg+0x2fa>
 8016d5c:	18e2      	adds	r2, r4, r3
 8016d5e:	7890      	ldrb	r0, [r2, #2]
 8016d60:	287d      	cmp	r0, #125	@ 0x7d
 8016d62:	f000 8190 	beq.w	8017086 <uxr_read_framed_msg+0x3c2>
 8016d66:	3301      	adds	r3, #1
 8016d68:	085a      	lsrs	r2, r3, #1
 8016d6a:	fba5 1202 	umull	r1, r2, r5, r2
 8016d6e:	0892      	lsrs	r2, r2, #2
 8016d70:	212a      	movs	r1, #42	@ 0x2a
 8016d72:	fb01 3312 	mls	r3, r1, r2, r3
 8016d76:	287e      	cmp	r0, #126	@ 0x7e
 8016d78:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016d7c:	f000 821a 	beq.w	80171b4 <uxr_read_framed_msg+0x4f0>
 8016d80:	2307      	movs	r3, #7
 8016d82:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8016d84:	7023      	strb	r3, [r4, #0]
 8016d86:	e7ae      	b.n	8016ce6 <uxr_read_framed_msg+0x22>
 8016d88:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016d8a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016d8e:	459e      	cmp	lr, r3
 8016d90:	d938      	bls.n	8016e04 <uxr_read_framed_msg+0x140>
 8016d92:	ee07 8a90 	vmov	s15, r8
 8016d96:	212a      	movs	r1, #42	@ 0x2a
 8016d98:	e020      	b.n	8016ddc <uxr_read_framed_msg+0x118>
 8016d9a:	f89b c002 	ldrb.w	ip, [fp, #2]
 8016d9e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8016da2:	f000 80d4 	beq.w	8016f4e <uxr_read_framed_msg+0x28a>
 8016da6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016daa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016dae:	f000 8219 	beq.w	80171e4 <uxr_read_framed_msg+0x520>
 8016db2:	f806 c003 	strb.w	ip, [r6, r3]
 8016db6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8016dba:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016dbc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016dc0:	ea8a 000c 	eor.w	r0, sl, ip
 8016dc4:	b2c0      	uxtb	r0, r0
 8016dc6:	3301      	adds	r3, #1
 8016dc8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8016dcc:	b29b      	uxth	r3, r3
 8016dce:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8016dd2:	4573      	cmp	r3, lr
 8016dd4:	8663      	strh	r3, [r4, #50]	@ 0x32
 8016dd6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8016dd8:	f080 8120 	bcs.w	801701c <uxr_read_framed_msg+0x358>
 8016ddc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8016de0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8016de4:	f100 0c01 	add.w	ip, r0, #1
 8016de8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016dec:	fba5 8202 	umull	r8, r2, r5, r2
 8016df0:	0892      	lsrs	r2, r2, #2
 8016df2:	4582      	cmp	sl, r0
 8016df4:	eb04 0b00 	add.w	fp, r4, r0
 8016df8:	fb01 c212 	mls	r2, r1, r2, ip
 8016dfc:	d1cd      	bne.n	8016d9a <uxr_read_framed_msg+0xd6>
 8016dfe:	ee17 8a90 	vmov	r8, s15
 8016e02:	459e      	cmp	lr, r3
 8016e04:	f040 8111 	bne.w	801702a <uxr_read_framed_msg+0x366>
 8016e08:	2306      	movs	r3, #6
 8016e0a:	7023      	strb	r3, [r4, #0]
 8016e0c:	e76b      	b.n	8016ce6 <uxr_read_framed_msg+0x22>
 8016e0e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016e12:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016e16:	4298      	cmp	r0, r3
 8016e18:	f000 80c2 	beq.w	8016fa0 <uxr_read_framed_msg+0x2dc>
 8016e1c:	18e2      	adds	r2, r4, r3
 8016e1e:	7891      	ldrb	r1, [r2, #2]
 8016e20:	297d      	cmp	r1, #125	@ 0x7d
 8016e22:	f000 814c 	beq.w	80170be <uxr_read_framed_msg+0x3fa>
 8016e26:	3301      	adds	r3, #1
 8016e28:	085a      	lsrs	r2, r3, #1
 8016e2a:	fba5 0202 	umull	r0, r2, r5, r2
 8016e2e:	0892      	lsrs	r2, r2, #2
 8016e30:	202a      	movs	r0, #42	@ 0x2a
 8016e32:	fb00 3312 	mls	r3, r0, r2, r3
 8016e36:	297e      	cmp	r1, #126	@ 0x7e
 8016e38:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016e3c:	f000 81ca 	beq.w	80171d4 <uxr_read_framed_msg+0x510>
 8016e40:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016e42:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016e46:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016e48:	b29b      	uxth	r3, r3
 8016e4a:	2000      	movs	r0, #0
 8016e4c:	428b      	cmp	r3, r1
 8016e4e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016e50:	8660      	strh	r0, [r4, #50]	@ 0x32
 8016e52:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8016e54:	f240 80df 	bls.w	8017016 <uxr_read_framed_msg+0x352>
 8016e58:	7020      	strb	r0, [r4, #0]
 8016e5a:	b003      	add	sp, #12
 8016e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e60:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016e64:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016e68:	4299      	cmp	r1, r3
 8016e6a:	f000 80a8 	beq.w	8016fbe <uxr_read_framed_msg+0x2fa>
 8016e6e:	18e2      	adds	r2, r4, r3
 8016e70:	7890      	ldrb	r0, [r2, #2]
 8016e72:	287d      	cmp	r0, #125	@ 0x7d
 8016e74:	f000 8164 	beq.w	8017140 <uxr_read_framed_msg+0x47c>
 8016e78:	3301      	adds	r3, #1
 8016e7a:	085a      	lsrs	r2, r3, #1
 8016e7c:	fba5 1202 	umull	r1, r2, r5, r2
 8016e80:	0892      	lsrs	r2, r2, #2
 8016e82:	212a      	movs	r1, #42	@ 0x2a
 8016e84:	fb01 3312 	mls	r3, r1, r2, r3
 8016e88:	287e      	cmp	r0, #126	@ 0x7e
 8016e8a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016e8e:	f000 8191 	beq.w	80171b4 <uxr_read_framed_msg+0x4f0>
 8016e92:	2304      	movs	r3, #4
 8016e94:	8620      	strh	r0, [r4, #48]	@ 0x30
 8016e96:	7023      	strb	r3, [r4, #0]
 8016e98:	e725      	b.n	8016ce6 <uxr_read_framed_msg+0x22>
 8016e9a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016e9e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016ea2:	4290      	cmp	r0, r2
 8016ea4:	f000 80b3 	beq.w	801700e <uxr_read_framed_msg+0x34a>
 8016ea8:	18a3      	adds	r3, r4, r2
 8016eaa:	7899      	ldrb	r1, [r3, #2]
 8016eac:	297d      	cmp	r1, #125	@ 0x7d
 8016eae:	f000 8164 	beq.w	801717a <uxr_read_framed_msg+0x4b6>
 8016eb2:	3201      	adds	r2, #1
 8016eb4:	0850      	lsrs	r0, r2, #1
 8016eb6:	fba5 3000 	umull	r3, r0, r5, r0
 8016eba:	0880      	lsrs	r0, r0, #2
 8016ebc:	232a      	movs	r3, #42	@ 0x2a
 8016ebe:	fb03 2210 	mls	r2, r3, r0, r2
 8016ec2:	297e      	cmp	r1, #126	@ 0x7e
 8016ec4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016ec8:	f000 8188 	beq.w	80171dc <uxr_read_framed_msg+0x518>
 8016ecc:	7863      	ldrb	r3, [r4, #1]
 8016ece:	428b      	cmp	r3, r1
 8016ed0:	bf0c      	ite	eq
 8016ed2:	2303      	moveq	r3, #3
 8016ed4:	2300      	movne	r3, #0
 8016ed6:	7023      	strb	r3, [r4, #0]
 8016ed8:	e705      	b.n	8016ce6 <uxr_read_framed_msg+0x22>
 8016eda:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016ede:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	4299      	cmp	r1, r3
 8016ee6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8016eea:	d06c      	beq.n	8016fc6 <uxr_read_framed_msg+0x302>
 8016eec:	18e2      	adds	r2, r4, r3
 8016eee:	7890      	ldrb	r0, [r2, #2]
 8016ef0:	287d      	cmp	r0, #125	@ 0x7d
 8016ef2:	f000 8101 	beq.w	80170f8 <uxr_read_framed_msg+0x434>
 8016ef6:	3301      	adds	r3, #1
 8016ef8:	085a      	lsrs	r2, r3, #1
 8016efa:	fba5 1202 	umull	r1, r2, r5, r2
 8016efe:	0892      	lsrs	r2, r2, #2
 8016f00:	212a      	movs	r1, #42	@ 0x2a
 8016f02:	fb01 3312 	mls	r3, r1, r2, r3
 8016f06:	287e      	cmp	r0, #126	@ 0x7e
 8016f08:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016f0c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016f10:	d059      	beq.n	8016fc6 <uxr_read_framed_msg+0x302>
 8016f12:	2302      	movs	r3, #2
 8016f14:	7023      	strb	r3, [r4, #0]
 8016f16:	e6e6      	b.n	8016ce6 <uxr_read_framed_msg+0x22>
 8016f18:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8016f1c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016f20:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8016f24:	1c51      	adds	r1, r2, #1
 8016f26:	084b      	lsrs	r3, r1, #1
 8016f28:	fba5 c303 	umull	ip, r3, r5, r3
 8016f2c:	089b      	lsrs	r3, r3, #2
 8016f2e:	fb0e 1313 	mls	r3, lr, r3, r1
 8016f32:	4592      	cmp	sl, r2
 8016f34:	eb04 0002 	add.w	r0, r4, r2
 8016f38:	b2da      	uxtb	r2, r3
 8016f3a:	f43f af04 	beq.w	8016d46 <uxr_read_framed_msg+0x82>
 8016f3e:	7883      	ldrb	r3, [r0, #2]
 8016f40:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016f44:	2b7e      	cmp	r3, #126	@ 0x7e
 8016f46:	d1ed      	bne.n	8016f24 <uxr_read_framed_msg+0x260>
 8016f48:	2301      	movs	r3, #1
 8016f4a:	7023      	strb	r3, [r4, #0]
 8016f4c:	e6cb      	b.n	8016ce6 <uxr_read_framed_msg+0x22>
 8016f4e:	f100 0c01 	add.w	ip, r0, #1
 8016f52:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016f56:	fba5 8202 	umull	r8, r2, r5, r2
 8016f5a:	0892      	lsrs	r2, r2, #2
 8016f5c:	fb01 c212 	mls	r2, r1, r2, ip
 8016f60:	eb04 0c02 	add.w	ip, r4, r2
 8016f64:	b2d2      	uxtb	r2, r2
 8016f66:	4592      	cmp	sl, r2
 8016f68:	f100 0002 	add.w	r0, r0, #2
 8016f6c:	f43f af47 	beq.w	8016dfe <uxr_read_framed_msg+0x13a>
 8016f70:	0842      	lsrs	r2, r0, #1
 8016f72:	f89c a002 	ldrb.w	sl, [ip, #2]
 8016f76:	fba5 8202 	umull	r8, r2, r5, r2
 8016f7a:	0892      	lsrs	r2, r2, #2
 8016f7c:	fb01 0012 	mls	r0, r1, r2, r0
 8016f80:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8016f84:	f08a 0c20 	eor.w	ip, sl, #32
 8016f88:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8016f8c:	f47f af11 	bne.w	8016db2 <uxr_read_framed_msg+0xee>
 8016f90:	459e      	cmp	lr, r3
 8016f92:	ee17 8a90 	vmov	r8, s15
 8016f96:	f43f af37 	beq.w	8016e08 <uxr_read_framed_msg+0x144>
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	7023      	strb	r3, [r4, #0]
 8016f9e:	e6a2      	b.n	8016ce6 <uxr_read_framed_msg+0x22>
 8016fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fa2:	9300      	str	r3, [sp, #0]
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	9301      	str	r3, [sp, #4]
 8016fa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016faa:	464a      	mov	r2, r9
 8016fac:	4641      	mov	r1, r8
 8016fae:	4620      	mov	r0, r4
 8016fb0:	f7ff fe06 	bl	8016bc0 <uxr_framing_read_transport>
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	f43f aec6 	beq.w	8016d46 <uxr_read_framed_msg+0x82>
 8016fba:	7823      	ldrb	r3, [r4, #0]
 8016fbc:	e693      	b.n	8016ce6 <uxr_read_framed_msg+0x22>
 8016fbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fc0:	9300      	str	r3, [sp, #0]
 8016fc2:	2302      	movs	r3, #2
 8016fc4:	e7ef      	b.n	8016fa6 <uxr_read_framed_msg+0x2e2>
 8016fc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fc8:	9300      	str	r3, [sp, #0]
 8016fca:	2304      	movs	r3, #4
 8016fcc:	9301      	str	r3, [sp, #4]
 8016fce:	464a      	mov	r2, r9
 8016fd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016fd2:	4641      	mov	r1, r8
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	f7ff fdf3 	bl	8016bc0 <uxr_framing_read_transport>
 8016fda:	2800      	cmp	r0, #0
 8016fdc:	d1ed      	bne.n	8016fba <uxr_read_framed_msg+0x2f6>
 8016fde:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016fe2:	2b7e      	cmp	r3, #126	@ 0x7e
 8016fe4:	d0e9      	beq.n	8016fba <uxr_read_framed_msg+0x2f6>
 8016fe6:	e6ae      	b.n	8016d46 <uxr_read_framed_msg+0x82>
 8016fe8:	30c30c31 	.word	0x30c30c31
 8016fec:	0801a230 	.word	0x0801a230
 8016ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016ff2:	9300      	str	r3, [sp, #0]
 8016ff4:	2305      	movs	r3, #5
 8016ff6:	9301      	str	r3, [sp, #4]
 8016ff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ffa:	f7ff fde1 	bl	8016bc0 <uxr_framing_read_transport>
 8016ffe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017002:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017006:	429a      	cmp	r2, r3
 8017008:	f43f ae9d 	beq.w	8016d46 <uxr_read_framed_msg+0x82>
 801700c:	e668      	b.n	8016ce0 <uxr_read_framed_msg+0x1c>
 801700e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017010:	9300      	str	r3, [sp, #0]
 8017012:	2303      	movs	r3, #3
 8017014:	e7c7      	b.n	8016fa6 <uxr_read_framed_msg+0x2e2>
 8017016:	2305      	movs	r3, #5
 8017018:	7023      	strb	r3, [r4, #0]
 801701a:	e664      	b.n	8016ce6 <uxr_read_framed_msg+0x22>
 801701c:	ee17 8a90 	vmov	r8, s15
 8017020:	f43f aef2 	beq.w	8016e08 <uxr_read_framed_msg+0x144>
 8017024:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017028:	d08e      	beq.n	8016f48 <uxr_read_framed_msg+0x284>
 801702a:	ebae 0303 	sub.w	r3, lr, r3
 801702e:	3302      	adds	r3, #2
 8017030:	9301      	str	r3, [sp, #4]
 8017032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017034:	9300      	str	r3, [sp, #0]
 8017036:	e7b7      	b.n	8016fa8 <uxr_read_framed_msg+0x2e4>
 8017038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801703a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801703e:	7013      	strb	r3, [r2, #0]
 8017040:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8017042:	b003      	add	sp, #12
 8017044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017048:	f103 0c01 	add.w	ip, r3, #1
 801704c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017050:	fba5 0202 	umull	r0, r2, r5, r2
 8017054:	0892      	lsrs	r2, r2, #2
 8017056:	202a      	movs	r0, #42	@ 0x2a
 8017058:	fb00 c212 	mls	r2, r0, r2, ip
 801705c:	fa5f fc82 	uxtb.w	ip, r2
 8017060:	4561      	cmp	r1, ip
 8017062:	d09d      	beq.n	8016fa0 <uxr_read_framed_msg+0x2dc>
 8017064:	3302      	adds	r3, #2
 8017066:	4422      	add	r2, r4
 8017068:	0859      	lsrs	r1, r3, #1
 801706a:	7892      	ldrb	r2, [r2, #2]
 801706c:	fba5 c101 	umull	ip, r1, r5, r1
 8017070:	0889      	lsrs	r1, r1, #2
 8017072:	fb00 3311 	mls	r3, r0, r1, r3
 8017076:	2a7e      	cmp	r2, #126	@ 0x7e
 8017078:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801707c:	f000 80aa 	beq.w	80171d4 <uxr_read_framed_msg+0x510>
 8017080:	f082 0220 	eor.w	r2, r2, #32
 8017084:	e654      	b.n	8016d30 <uxr_read_framed_msg+0x6c>
 8017086:	1c58      	adds	r0, r3, #1
 8017088:	0842      	lsrs	r2, r0, #1
 801708a:	fba5 c202 	umull	ip, r2, r5, r2
 801708e:	0892      	lsrs	r2, r2, #2
 8017090:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017094:	fb0c 0212 	mls	r2, ip, r2, r0
 8017098:	b2d0      	uxtb	r0, r2
 801709a:	4281      	cmp	r1, r0
 801709c:	d08f      	beq.n	8016fbe <uxr_read_framed_msg+0x2fa>
 801709e:	4422      	add	r2, r4
 80170a0:	3302      	adds	r3, #2
 80170a2:	7890      	ldrb	r0, [r2, #2]
 80170a4:	085a      	lsrs	r2, r3, #1
 80170a6:	fba5 1202 	umull	r1, r2, r5, r2
 80170aa:	0892      	lsrs	r2, r2, #2
 80170ac:	fb0c 3312 	mls	r3, ip, r2, r3
 80170b0:	287e      	cmp	r0, #126	@ 0x7e
 80170b2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80170b6:	d07d      	beq.n	80171b4 <uxr_read_framed_msg+0x4f0>
 80170b8:	f080 0020 	eor.w	r0, r0, #32
 80170bc:	e660      	b.n	8016d80 <uxr_read_framed_msg+0xbc>
 80170be:	1c59      	adds	r1, r3, #1
 80170c0:	084a      	lsrs	r2, r1, #1
 80170c2:	fba5 c202 	umull	ip, r2, r5, r2
 80170c6:	0892      	lsrs	r2, r2, #2
 80170c8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80170cc:	fb0c 1212 	mls	r2, ip, r2, r1
 80170d0:	b2d1      	uxtb	r1, r2
 80170d2:	4288      	cmp	r0, r1
 80170d4:	f43f af64 	beq.w	8016fa0 <uxr_read_framed_msg+0x2dc>
 80170d8:	4422      	add	r2, r4
 80170da:	3302      	adds	r3, #2
 80170dc:	7891      	ldrb	r1, [r2, #2]
 80170de:	085a      	lsrs	r2, r3, #1
 80170e0:	fba5 0202 	umull	r0, r2, r5, r2
 80170e4:	0892      	lsrs	r2, r2, #2
 80170e6:	fb0c 3312 	mls	r3, ip, r2, r3
 80170ea:	297e      	cmp	r1, #126	@ 0x7e
 80170ec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80170f0:	d070      	beq.n	80171d4 <uxr_read_framed_msg+0x510>
 80170f2:	f081 0120 	eor.w	r1, r1, #32
 80170f6:	e6a3      	b.n	8016e40 <uxr_read_framed_msg+0x17c>
 80170f8:	f103 0c01 	add.w	ip, r3, #1
 80170fc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017100:	fba5 0202 	umull	r0, r2, r5, r2
 8017104:	0892      	lsrs	r2, r2, #2
 8017106:	202a      	movs	r0, #42	@ 0x2a
 8017108:	fb00 c212 	mls	r2, r0, r2, ip
 801710c:	fa5f fc82 	uxtb.w	ip, r2
 8017110:	4561      	cmp	r1, ip
 8017112:	f43f af58 	beq.w	8016fc6 <uxr_read_framed_msg+0x302>
 8017116:	4422      	add	r2, r4
 8017118:	3302      	adds	r3, #2
 801711a:	7891      	ldrb	r1, [r2, #2]
 801711c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017120:	085a      	lsrs	r2, r3, #1
 8017122:	fba5 c202 	umull	ip, r2, r5, r2
 8017126:	0892      	lsrs	r2, r2, #2
 8017128:	fb00 3312 	mls	r3, r0, r2, r3
 801712c:	297e      	cmp	r1, #126	@ 0x7e
 801712e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017132:	f43f af48 	beq.w	8016fc6 <uxr_read_framed_msg+0x302>
 8017136:	f081 0120 	eor.w	r1, r1, #32
 801713a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801713e:	e6e8      	b.n	8016f12 <uxr_read_framed_msg+0x24e>
 8017140:	1c58      	adds	r0, r3, #1
 8017142:	0842      	lsrs	r2, r0, #1
 8017144:	fba5 c202 	umull	ip, r2, r5, r2
 8017148:	0892      	lsrs	r2, r2, #2
 801714a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801714e:	fb0c 0212 	mls	r2, ip, r2, r0
 8017152:	b2d0      	uxtb	r0, r2
 8017154:	4281      	cmp	r1, r0
 8017156:	f43f af32 	beq.w	8016fbe <uxr_read_framed_msg+0x2fa>
 801715a:	4422      	add	r2, r4
 801715c:	3302      	adds	r3, #2
 801715e:	7890      	ldrb	r0, [r2, #2]
 8017160:	085a      	lsrs	r2, r3, #1
 8017162:	fba5 1202 	umull	r1, r2, r5, r2
 8017166:	0892      	lsrs	r2, r2, #2
 8017168:	fb0c 3312 	mls	r3, ip, r2, r3
 801716c:	287e      	cmp	r0, #126	@ 0x7e
 801716e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017172:	d01f      	beq.n	80171b4 <uxr_read_framed_msg+0x4f0>
 8017174:	f080 0020 	eor.w	r0, r0, #32
 8017178:	e68b      	b.n	8016e92 <uxr_read_framed_msg+0x1ce>
 801717a:	1c51      	adds	r1, r2, #1
 801717c:	084b      	lsrs	r3, r1, #1
 801717e:	fba5 c303 	umull	ip, r3, r5, r3
 8017182:	089b      	lsrs	r3, r3, #2
 8017184:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017188:	fb0c 1313 	mls	r3, ip, r3, r1
 801718c:	b2d9      	uxtb	r1, r3
 801718e:	4288      	cmp	r0, r1
 8017190:	f43f af3d 	beq.w	801700e <uxr_read_framed_msg+0x34a>
 8017194:	3202      	adds	r2, #2
 8017196:	4423      	add	r3, r4
 8017198:	0850      	lsrs	r0, r2, #1
 801719a:	789b      	ldrb	r3, [r3, #2]
 801719c:	fba5 1000 	umull	r1, r0, r5, r0
 80171a0:	0880      	lsrs	r0, r0, #2
 80171a2:	fb0c 2210 	mls	r2, ip, r0, r2
 80171a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80171a8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80171ac:	d016      	beq.n	80171dc <uxr_read_framed_msg+0x518>
 80171ae:	f083 0120 	eor.w	r1, r3, #32
 80171b2:	e68b      	b.n	8016ecc <uxr_read_framed_msg+0x208>
 80171b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171b6:	9300      	str	r3, [sp, #0]
 80171b8:	2302      	movs	r3, #2
 80171ba:	9301      	str	r3, [sp, #4]
 80171bc:	464a      	mov	r2, r9
 80171be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80171c0:	4641      	mov	r1, r8
 80171c2:	4620      	mov	r0, r4
 80171c4:	f7ff fcfc 	bl	8016bc0 <uxr_framing_read_transport>
 80171c8:	2800      	cmp	r0, #0
 80171ca:	f47f aef6 	bne.w	8016fba <uxr_read_framed_msg+0x2f6>
 80171ce:	2301      	movs	r3, #1
 80171d0:	7023      	strb	r3, [r4, #0]
 80171d2:	e588      	b.n	8016ce6 <uxr_read_framed_msg+0x22>
 80171d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171d6:	9300      	str	r3, [sp, #0]
 80171d8:	2301      	movs	r3, #1
 80171da:	e7ee      	b.n	80171ba <uxr_read_framed_msg+0x4f6>
 80171dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171de:	9300      	str	r3, [sp, #0]
 80171e0:	2303      	movs	r3, #3
 80171e2:	e7ea      	b.n	80171ba <uxr_read_framed_msg+0x4f6>
 80171e4:	ee17 8a90 	vmov	r8, s15
 80171e8:	e6ae      	b.n	8016f48 <uxr_read_framed_msg+0x284>
 80171ea:	bf00      	nop

080171ec <rcl_get_default_domain_id>:
 80171ec:	b530      	push	{r4, r5, lr}
 80171ee:	b083      	sub	sp, #12
 80171f0:	2300      	movs	r3, #0
 80171f2:	9300      	str	r3, [sp, #0]
 80171f4:	b1d0      	cbz	r0, 801722c <rcl_get_default_domain_id+0x40>
 80171f6:	4604      	mov	r4, r0
 80171f8:	4669      	mov	r1, sp
 80171fa:	4815      	ldr	r0, [pc, #84]	@ (8017250 <rcl_get_default_domain_id+0x64>)
 80171fc:	f7fc fd2c 	bl	8013c58 <rcutils_get_env>
 8017200:	4602      	mov	r2, r0
 8017202:	b110      	cbz	r0, 801720a <rcl_get_default_domain_id+0x1e>
 8017204:	2001      	movs	r0, #1
 8017206:	b003      	add	sp, #12
 8017208:	bd30      	pop	{r4, r5, pc}
 801720a:	9b00      	ldr	r3, [sp, #0]
 801720c:	b18b      	cbz	r3, 8017232 <rcl_get_default_domain_id+0x46>
 801720e:	7818      	ldrb	r0, [r3, #0]
 8017210:	2800      	cmp	r0, #0
 8017212:	d0f8      	beq.n	8017206 <rcl_get_default_domain_id+0x1a>
 8017214:	a901      	add	r1, sp, #4
 8017216:	4618      	mov	r0, r3
 8017218:	9201      	str	r2, [sp, #4]
 801721a:	f000 fedd 	bl	8017fd8 <strtoul>
 801721e:	4605      	mov	r5, r0
 8017220:	b150      	cbz	r0, 8017238 <rcl_get_default_domain_id+0x4c>
 8017222:	1c43      	adds	r3, r0, #1
 8017224:	d00d      	beq.n	8017242 <rcl_get_default_domain_id+0x56>
 8017226:	6025      	str	r5, [r4, #0]
 8017228:	2000      	movs	r0, #0
 801722a:	e7ec      	b.n	8017206 <rcl_get_default_domain_id+0x1a>
 801722c:	200b      	movs	r0, #11
 801722e:	b003      	add	sp, #12
 8017230:	bd30      	pop	{r4, r5, pc}
 8017232:	4618      	mov	r0, r3
 8017234:	b003      	add	sp, #12
 8017236:	bd30      	pop	{r4, r5, pc}
 8017238:	9b01      	ldr	r3, [sp, #4]
 801723a:	781b      	ldrb	r3, [r3, #0]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d0f2      	beq.n	8017226 <rcl_get_default_domain_id+0x3a>
 8017240:	e7e0      	b.n	8017204 <rcl_get_default_domain_id+0x18>
 8017242:	f001 fa61 	bl	8018708 <__errno>
 8017246:	6803      	ldr	r3, [r0, #0]
 8017248:	2b22      	cmp	r3, #34	@ 0x22
 801724a:	d1ec      	bne.n	8017226 <rcl_get_default_domain_id+0x3a>
 801724c:	e7da      	b.n	8017204 <rcl_get_default_domain_id+0x18>
 801724e:	bf00      	nop
 8017250:	0801a430 	.word	0x0801a430

08017254 <rcl_expand_topic_name>:
 8017254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017258:	b08b      	sub	sp, #44	@ 0x2c
 801725a:	9306      	str	r3, [sp, #24]
 801725c:	2800      	cmp	r0, #0
 801725e:	f000 80ad 	beq.w	80173bc <rcl_expand_topic_name+0x168>
 8017262:	460e      	mov	r6, r1
 8017264:	2900      	cmp	r1, #0
 8017266:	f000 80a9 	beq.w	80173bc <rcl_expand_topic_name+0x168>
 801726a:	4617      	mov	r7, r2
 801726c:	2a00      	cmp	r2, #0
 801726e:	f000 80a5 	beq.w	80173bc <rcl_expand_topic_name+0x168>
 8017272:	2b00      	cmp	r3, #0
 8017274:	f000 80a2 	beq.w	80173bc <rcl_expand_topic_name+0x168>
 8017278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801727a:	2b00      	cmp	r3, #0
 801727c:	f000 809e 	beq.w	80173bc <rcl_expand_topic_name+0x168>
 8017280:	2200      	movs	r2, #0
 8017282:	a909      	add	r1, sp, #36	@ 0x24
 8017284:	4680      	mov	r8, r0
 8017286:	f000 f9fb 	bl	8017680 <rcl_validate_topic_name>
 801728a:	4604      	mov	r4, r0
 801728c:	2800      	cmp	r0, #0
 801728e:	f040 8096 	bne.w	80173be <rcl_expand_topic_name+0x16a>
 8017292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017294:	2b00      	cmp	r3, #0
 8017296:	f040 809a 	bne.w	80173ce <rcl_expand_topic_name+0x17a>
 801729a:	4602      	mov	r2, r0
 801729c:	a909      	add	r1, sp, #36	@ 0x24
 801729e:	4630      	mov	r0, r6
 80172a0:	f7fd f938 	bl	8014514 <rmw_validate_node_name>
 80172a4:	2800      	cmp	r0, #0
 80172a6:	f040 808e 	bne.w	80173c6 <rcl_expand_topic_name+0x172>
 80172aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80172ac:	2a00      	cmp	r2, #0
 80172ae:	f040 8093 	bne.w	80173d8 <rcl_expand_topic_name+0x184>
 80172b2:	a909      	add	r1, sp, #36	@ 0x24
 80172b4:	4638      	mov	r0, r7
 80172b6:	f7fd f90f 	bl	80144d8 <rmw_validate_namespace>
 80172ba:	2800      	cmp	r0, #0
 80172bc:	f040 8083 	bne.w	80173c6 <rcl_expand_topic_name+0x172>
 80172c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80172c2:	2c00      	cmp	r4, #0
 80172c4:	f040 80ed 	bne.w	80174a2 <rcl_expand_topic_name+0x24e>
 80172c8:	217b      	movs	r1, #123	@ 0x7b
 80172ca:	4640      	mov	r0, r8
 80172cc:	f001 f990 	bl	80185f0 <strchr>
 80172d0:	f898 3000 	ldrb.w	r3, [r8]
 80172d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80172d6:	4605      	mov	r5, r0
 80172d8:	f000 809e 	beq.w	8017418 <rcl_expand_topic_name+0x1c4>
 80172dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80172de:	f040 80a2 	bne.w	8017426 <rcl_expand_topic_name+0x1d2>
 80172e2:	4638      	mov	r0, r7
 80172e4:	f7e8 ff86 	bl	80001f4 <strlen>
 80172e8:	4a82      	ldr	r2, [pc, #520]	@ (80174f4 <rcl_expand_topic_name+0x2a0>)
 80172ea:	4b83      	ldr	r3, [pc, #524]	@ (80174f8 <rcl_expand_topic_name+0x2a4>)
 80172ec:	2801      	cmp	r0, #1
 80172ee:	bf18      	it	ne
 80172f0:	4613      	movne	r3, r2
 80172f2:	9302      	str	r3, [sp, #8]
 80172f4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80172f6:	9300      	str	r3, [sp, #0]
 80172f8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80172fc:	f108 0301 	add.w	r3, r8, #1
 8017300:	9305      	str	r3, [sp, #20]
 8017302:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017306:	9301      	str	r3, [sp, #4]
 8017308:	ab14      	add	r3, sp, #80	@ 0x50
 801730a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801730c:	f7fc fccc 	bl	8013ca8 <rcutils_format_string_limit>
 8017310:	4682      	mov	sl, r0
 8017312:	2800      	cmp	r0, #0
 8017314:	f000 80c7 	beq.w	80174a6 <rcl_expand_topic_name+0x252>
 8017318:	2d00      	cmp	r5, #0
 801731a:	f000 80a2 	beq.w	8017462 <rcl_expand_topic_name+0x20e>
 801731e:	217b      	movs	r1, #123	@ 0x7b
 8017320:	f001 f966 	bl	80185f0 <strchr>
 8017324:	46d1      	mov	r9, sl
 8017326:	4605      	mov	r5, r0
 8017328:	9407      	str	r4, [sp, #28]
 801732a:	46d3      	mov	fp, sl
 801732c:	464c      	mov	r4, r9
 801732e:	2d00      	cmp	r5, #0
 8017330:	f000 80be 	beq.w	80174b0 <rcl_expand_topic_name+0x25c>
 8017334:	217d      	movs	r1, #125	@ 0x7d
 8017336:	4620      	mov	r0, r4
 8017338:	f001 f95a 	bl	80185f0 <strchr>
 801733c:	eba0 0905 	sub.w	r9, r0, r5
 8017340:	f109 0a01 	add.w	sl, r9, #1
 8017344:	486d      	ldr	r0, [pc, #436]	@ (80174fc <rcl_expand_topic_name+0x2a8>)
 8017346:	4652      	mov	r2, sl
 8017348:	4629      	mov	r1, r5
 801734a:	f001 f95e 	bl	801860a <strncmp>
 801734e:	2800      	cmp	r0, #0
 8017350:	d067      	beq.n	8017422 <rcl_expand_topic_name+0x1ce>
 8017352:	486b      	ldr	r0, [pc, #428]	@ (8017500 <rcl_expand_topic_name+0x2ac>)
 8017354:	4652      	mov	r2, sl
 8017356:	4629      	mov	r1, r5
 8017358:	f001 f957 	bl	801860a <strncmp>
 801735c:	b130      	cbz	r0, 801736c <rcl_expand_topic_name+0x118>
 801735e:	4869      	ldr	r0, [pc, #420]	@ (8017504 <rcl_expand_topic_name+0x2b0>)
 8017360:	4652      	mov	r2, sl
 8017362:	4629      	mov	r1, r5
 8017364:	f001 f951 	bl	801860a <strncmp>
 8017368:	2800      	cmp	r0, #0
 801736a:	d137      	bne.n	80173dc <rcl_expand_topic_name+0x188>
 801736c:	46b9      	mov	r9, r7
 801736e:	ab16      	add	r3, sp, #88	@ 0x58
 8017370:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017374:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017378:	ab14      	add	r3, sp, #80	@ 0x50
 801737a:	4628      	mov	r0, r5
 801737c:	cb0c      	ldmia	r3, {r2, r3}
 801737e:	4651      	mov	r1, sl
 8017380:	f7fc fdce 	bl	8013f20 <rcutils_strndup>
 8017384:	4605      	mov	r5, r0
 8017386:	2800      	cmp	r0, #0
 8017388:	f000 809c 	beq.w	80174c4 <rcl_expand_topic_name+0x270>
 801738c:	464a      	mov	r2, r9
 801738e:	4620      	mov	r0, r4
 8017390:	ab14      	add	r3, sp, #80	@ 0x50
 8017392:	4629      	mov	r1, r5
 8017394:	f7fc fcc2 	bl	8013d1c <rcutils_repl_str>
 8017398:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801739a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801739c:	4604      	mov	r4, r0
 801739e:	4628      	mov	r0, r5
 80173a0:	4798      	blx	r3
 80173a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80173a4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80173a6:	4658      	mov	r0, fp
 80173a8:	4798      	blx	r3
 80173aa:	2c00      	cmp	r4, #0
 80173ac:	d07b      	beq.n	80174a6 <rcl_expand_topic_name+0x252>
 80173ae:	217b      	movs	r1, #123	@ 0x7b
 80173b0:	4620      	mov	r0, r4
 80173b2:	f001 f91d 	bl	80185f0 <strchr>
 80173b6:	46a3      	mov	fp, r4
 80173b8:	4605      	mov	r5, r0
 80173ba:	e7b8      	b.n	801732e <rcl_expand_topic_name+0xda>
 80173bc:	240b      	movs	r4, #11
 80173be:	4620      	mov	r0, r4
 80173c0:	b00b      	add	sp, #44	@ 0x2c
 80173c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173c6:	f7f9 fea5 	bl	8011114 <rcl_convert_rmw_ret_to_rcl_ret>
 80173ca:	4604      	mov	r4, r0
 80173cc:	e7f7      	b.n	80173be <rcl_expand_topic_name+0x16a>
 80173ce:	2467      	movs	r4, #103	@ 0x67
 80173d0:	4620      	mov	r0, r4
 80173d2:	b00b      	add	sp, #44	@ 0x2c
 80173d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173d8:	24c9      	movs	r4, #201	@ 0xc9
 80173da:	e7f0      	b.n	80173be <rcl_expand_topic_name+0x16a>
 80173dc:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80173e0:	9806      	ldr	r0, [sp, #24]
 80173e2:	1c69      	adds	r1, r5, #1
 80173e4:	f7fc feb6 	bl	8014154 <rcutils_string_map_getn>
 80173e8:	4681      	mov	r9, r0
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d1bf      	bne.n	801736e <rcl_expand_topic_name+0x11a>
 80173ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80173f0:	aa16      	add	r2, sp, #88	@ 0x58
 80173f2:	6018      	str	r0, [r3, #0]
 80173f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80173f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80173fa:	ab14      	add	r3, sp, #80	@ 0x50
 80173fc:	cb0c      	ldmia	r3, {r2, r3}
 80173fe:	4651      	mov	r1, sl
 8017400:	4628      	mov	r0, r5
 8017402:	f7fc fd8d 	bl	8013f20 <rcutils_strndup>
 8017406:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017408:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801740a:	4798      	blx	r3
 801740c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801740e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017410:	4658      	mov	r0, fp
 8017412:	2469      	movs	r4, #105	@ 0x69
 8017414:	4798      	blx	r3
 8017416:	e7d2      	b.n	80173be <rcl_expand_topic_name+0x16a>
 8017418:	2800      	cmp	r0, #0
 801741a:	d05b      	beq.n	80174d4 <rcl_expand_topic_name+0x280>
 801741c:	46c1      	mov	r9, r8
 801741e:	46a2      	mov	sl, r4
 8017420:	e782      	b.n	8017328 <rcl_expand_topic_name+0xd4>
 8017422:	46b1      	mov	r9, r6
 8017424:	e7a3      	b.n	801736e <rcl_expand_topic_name+0x11a>
 8017426:	2800      	cmp	r0, #0
 8017428:	d1f8      	bne.n	801741c <rcl_expand_topic_name+0x1c8>
 801742a:	4638      	mov	r0, r7
 801742c:	f7e8 fee2 	bl	80001f4 <strlen>
 8017430:	4a35      	ldr	r2, [pc, #212]	@ (8017508 <rcl_expand_topic_name+0x2b4>)
 8017432:	4b36      	ldr	r3, [pc, #216]	@ (801750c <rcl_expand_topic_name+0x2b8>)
 8017434:	f8cd 8010 	str.w	r8, [sp, #16]
 8017438:	2801      	cmp	r0, #1
 801743a:	bf18      	it	ne
 801743c:	4613      	movne	r3, r2
 801743e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017442:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017446:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017448:	9703      	str	r7, [sp, #12]
 801744a:	9200      	str	r2, [sp, #0]
 801744c:	ab14      	add	r3, sp, #80	@ 0x50
 801744e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017450:	f7fc fc2a 	bl	8013ca8 <rcutils_format_string_limit>
 8017454:	4682      	mov	sl, r0
 8017456:	4653      	mov	r3, sl
 8017458:	b32b      	cbz	r3, 80174a6 <rcl_expand_topic_name+0x252>
 801745a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801745c:	f8c3 a000 	str.w	sl, [r3]
 8017460:	e7ad      	b.n	80173be <rcl_expand_topic_name+0x16a>
 8017462:	f89a 3000 	ldrb.w	r3, [sl]
 8017466:	2b2f      	cmp	r3, #47	@ 0x2f
 8017468:	d0f7      	beq.n	801745a <rcl_expand_topic_name+0x206>
 801746a:	4638      	mov	r0, r7
 801746c:	f7e8 fec2 	bl	80001f4 <strlen>
 8017470:	4a25      	ldr	r2, [pc, #148]	@ (8017508 <rcl_expand_topic_name+0x2b4>)
 8017472:	4b26      	ldr	r3, [pc, #152]	@ (801750c <rcl_expand_topic_name+0x2b8>)
 8017474:	f8cd a010 	str.w	sl, [sp, #16]
 8017478:	2801      	cmp	r0, #1
 801747a:	bf18      	it	ne
 801747c:	4613      	movne	r3, r2
 801747e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017482:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017486:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017488:	9703      	str	r7, [sp, #12]
 801748a:	9200      	str	r2, [sp, #0]
 801748c:	ab14      	add	r3, sp, #80	@ 0x50
 801748e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017490:	f7fc fc0a 	bl	8013ca8 <rcutils_format_string_limit>
 8017494:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017496:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017498:	4605      	mov	r5, r0
 801749a:	4650      	mov	r0, sl
 801749c:	4798      	blx	r3
 801749e:	46aa      	mov	sl, r5
 80174a0:	e7d9      	b.n	8017456 <rcl_expand_topic_name+0x202>
 80174a2:	24ca      	movs	r4, #202	@ 0xca
 80174a4:	e78b      	b.n	80173be <rcl_expand_topic_name+0x16a>
 80174a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80174a8:	2300      	movs	r3, #0
 80174aa:	6013      	str	r3, [r2, #0]
 80174ac:	240a      	movs	r4, #10
 80174ae:	e786      	b.n	80173be <rcl_expand_topic_name+0x16a>
 80174b0:	465b      	mov	r3, fp
 80174b2:	9c07      	ldr	r4, [sp, #28]
 80174b4:	46da      	mov	sl, fp
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d1d3      	bne.n	8017462 <rcl_expand_topic_name+0x20e>
 80174ba:	f898 3000 	ldrb.w	r3, [r8]
 80174be:	2b2f      	cmp	r3, #47	@ 0x2f
 80174c0:	d0cb      	beq.n	801745a <rcl_expand_topic_name+0x206>
 80174c2:	e7b2      	b.n	801742a <rcl_expand_topic_name+0x1d6>
 80174c4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80174c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80174ca:	6015      	str	r5, [r2, #0]
 80174cc:	4658      	mov	r0, fp
 80174ce:	4798      	blx	r3
 80174d0:	240a      	movs	r4, #10
 80174d2:	e774      	b.n	80173be <rcl_expand_topic_name+0x16a>
 80174d4:	ab17      	add	r3, sp, #92	@ 0x5c
 80174d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80174da:	e88d 0003 	stmia.w	sp, {r0, r1}
 80174de:	ab14      	add	r3, sp, #80	@ 0x50
 80174e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80174e2:	4640      	mov	r0, r8
 80174e4:	f7fc fcfa 	bl	8013edc <rcutils_strdup>
 80174e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80174ea:	2800      	cmp	r0, #0
 80174ec:	6018      	str	r0, [r3, #0]
 80174ee:	bf08      	it	eq
 80174f0:	240a      	moveq	r4, #10
 80174f2:	e764      	b.n	80173be <rcl_expand_topic_name+0x16a>
 80174f4:	0801a440 	.word	0x0801a440
 80174f8:	08019894 	.word	0x08019894
 80174fc:	0801a448 	.word	0x0801a448
 8017500:	0801a450 	.word	0x0801a450
 8017504:	0801a458 	.word	0x0801a458
 8017508:	08019c9c 	.word	0x08019c9c
 801750c:	080198a4 	.word	0x080198a4

08017510 <rcl_get_default_topic_name_substitutions>:
 8017510:	2800      	cmp	r0, #0
 8017512:	bf0c      	ite	eq
 8017514:	200b      	moveq	r0, #11
 8017516:	2000      	movne	r0, #0
 8017518:	4770      	bx	lr
 801751a:	bf00      	nop

0801751c <rcl_get_zero_initialized_guard_condition>:
 801751c:	4a03      	ldr	r2, [pc, #12]	@ (801752c <rcl_get_zero_initialized_guard_condition+0x10>)
 801751e:	4603      	mov	r3, r0
 8017520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017524:	e883 0003 	stmia.w	r3, {r0, r1}
 8017528:	4618      	mov	r0, r3
 801752a:	4770      	bx	lr
 801752c:	0801a464 	.word	0x0801a464

08017530 <rcl_guard_condition_init_from_rmw>:
 8017530:	b082      	sub	sp, #8
 8017532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017536:	b086      	sub	sp, #24
 8017538:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801753c:	4604      	mov	r4, r0
 801753e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017542:	460e      	mov	r6, r1
 8017544:	4617      	mov	r7, r2
 8017546:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801754a:	f10d 0e04 	add.w	lr, sp, #4
 801754e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017552:	f8dc 3000 	ldr.w	r3, [ip]
 8017556:	f8ce 3000 	str.w	r3, [lr]
 801755a:	a801      	add	r0, sp, #4
 801755c:	f7f5 fab4 	bl	800cac8 <rcutils_allocator_is_valid>
 8017560:	b350      	cbz	r0, 80175b8 <rcl_guard_condition_init_from_rmw+0x88>
 8017562:	b34c      	cbz	r4, 80175b8 <rcl_guard_condition_init_from_rmw+0x88>
 8017564:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017568:	f1b8 0f00 	cmp.w	r8, #0
 801756c:	d11e      	bne.n	80175ac <rcl_guard_condition_init_from_rmw+0x7c>
 801756e:	b31f      	cbz	r7, 80175b8 <rcl_guard_condition_init_from_rmw+0x88>
 8017570:	4638      	mov	r0, r7
 8017572:	f7f9 fded 	bl	8011150 <rcl_context_is_valid>
 8017576:	b328      	cbz	r0, 80175c4 <rcl_guard_condition_init_from_rmw+0x94>
 8017578:	9b01      	ldr	r3, [sp, #4]
 801757a:	9905      	ldr	r1, [sp, #20]
 801757c:	201c      	movs	r0, #28
 801757e:	4798      	blx	r3
 8017580:	4605      	mov	r5, r0
 8017582:	6060      	str	r0, [r4, #4]
 8017584:	b358      	cbz	r0, 80175de <rcl_guard_condition_init_from_rmw+0xae>
 8017586:	b1fe      	cbz	r6, 80175c8 <rcl_guard_condition_init_from_rmw+0x98>
 8017588:	6006      	str	r6, [r0, #0]
 801758a:	f880 8004 	strb.w	r8, [r0, #4]
 801758e:	ac01      	add	r4, sp, #4
 8017590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017592:	f105 0c08 	add.w	ip, r5, #8
 8017596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801759a:	6823      	ldr	r3, [r4, #0]
 801759c:	f8cc 3000 	str.w	r3, [ip]
 80175a0:	2000      	movs	r0, #0
 80175a2:	b006      	add	sp, #24
 80175a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175a8:	b002      	add	sp, #8
 80175aa:	4770      	bx	lr
 80175ac:	2064      	movs	r0, #100	@ 0x64
 80175ae:	b006      	add	sp, #24
 80175b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175b4:	b002      	add	sp, #8
 80175b6:	4770      	bx	lr
 80175b8:	200b      	movs	r0, #11
 80175ba:	b006      	add	sp, #24
 80175bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175c0:	b002      	add	sp, #8
 80175c2:	4770      	bx	lr
 80175c4:	2065      	movs	r0, #101	@ 0x65
 80175c6:	e7f2      	b.n	80175ae <rcl_guard_condition_init_from_rmw+0x7e>
 80175c8:	6838      	ldr	r0, [r7, #0]
 80175ca:	3028      	adds	r0, #40	@ 0x28
 80175cc:	f000 fa3a 	bl	8017a44 <rmw_create_guard_condition>
 80175d0:	6028      	str	r0, [r5, #0]
 80175d2:	6865      	ldr	r5, [r4, #4]
 80175d4:	682e      	ldr	r6, [r5, #0]
 80175d6:	b126      	cbz	r6, 80175e2 <rcl_guard_condition_init_from_rmw+0xb2>
 80175d8:	2301      	movs	r3, #1
 80175da:	712b      	strb	r3, [r5, #4]
 80175dc:	e7d7      	b.n	801758e <rcl_guard_condition_init_from_rmw+0x5e>
 80175de:	200a      	movs	r0, #10
 80175e0:	e7e5      	b.n	80175ae <rcl_guard_condition_init_from_rmw+0x7e>
 80175e2:	4628      	mov	r0, r5
 80175e4:	9b02      	ldr	r3, [sp, #8]
 80175e6:	9905      	ldr	r1, [sp, #20]
 80175e8:	4798      	blx	r3
 80175ea:	6066      	str	r6, [r4, #4]
 80175ec:	2001      	movs	r0, #1
 80175ee:	e7de      	b.n	80175ae <rcl_guard_condition_init_from_rmw+0x7e>

080175f0 <rcl_guard_condition_fini>:
 80175f0:	b570      	push	{r4, r5, r6, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	b1f0      	cbz	r0, 8017634 <rcl_guard_condition_fini+0x44>
 80175f6:	6843      	ldr	r3, [r0, #4]
 80175f8:	4604      	mov	r4, r0
 80175fa:	b163      	cbz	r3, 8017616 <rcl_guard_condition_fini+0x26>
 80175fc:	6818      	ldr	r0, [r3, #0]
 80175fe:	68de      	ldr	r6, [r3, #12]
 8017600:	6999      	ldr	r1, [r3, #24]
 8017602:	b160      	cbz	r0, 801761e <rcl_guard_condition_fini+0x2e>
 8017604:	791d      	ldrb	r5, [r3, #4]
 8017606:	b965      	cbnz	r5, 8017622 <rcl_guard_condition_fini+0x32>
 8017608:	4618      	mov	r0, r3
 801760a:	47b0      	blx	r6
 801760c:	2300      	movs	r3, #0
 801760e:	4628      	mov	r0, r5
 8017610:	6063      	str	r3, [r4, #4]
 8017612:	b002      	add	sp, #8
 8017614:	bd70      	pop	{r4, r5, r6, pc}
 8017616:	461d      	mov	r5, r3
 8017618:	4628      	mov	r0, r5
 801761a:	b002      	add	sp, #8
 801761c:	bd70      	pop	{r4, r5, r6, pc}
 801761e:	4605      	mov	r5, r0
 8017620:	e7f2      	b.n	8017608 <rcl_guard_condition_fini+0x18>
 8017622:	9101      	str	r1, [sp, #4]
 8017624:	f000 fa22 	bl	8017a6c <rmw_destroy_guard_condition>
 8017628:	1e05      	subs	r5, r0, #0
 801762a:	6863      	ldr	r3, [r4, #4]
 801762c:	9901      	ldr	r1, [sp, #4]
 801762e:	bf18      	it	ne
 8017630:	2501      	movne	r5, #1
 8017632:	e7e9      	b.n	8017608 <rcl_guard_condition_fini+0x18>
 8017634:	250b      	movs	r5, #11
 8017636:	4628      	mov	r0, r5
 8017638:	b002      	add	sp, #8
 801763a:	bd70      	pop	{r4, r5, r6, pc}

0801763c <rcl_guard_condition_get_default_options>:
 801763c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801763e:	b087      	sub	sp, #28
 8017640:	4606      	mov	r6, r0
 8017642:	4668      	mov	r0, sp
 8017644:	f7f5 fa32 	bl	800caac <rcutils_get_default_allocator>
 8017648:	4b09      	ldr	r3, [pc, #36]	@ (8017670 <rcl_guard_condition_get_default_options+0x34>)
 801764a:	46ee      	mov	lr, sp
 801764c:	469c      	mov	ip, r3
 801764e:	461d      	mov	r5, r3
 8017650:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017654:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801765a:	4634      	mov	r4, r6
 801765c:	f8de 7000 	ldr.w	r7, [lr]
 8017660:	f8cc 7000 	str.w	r7, [ip]
 8017664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017666:	4630      	mov	r0, r6
 8017668:	6027      	str	r7, [r4, #0]
 801766a:	b007      	add	sp, #28
 801766c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801766e:	bf00      	nop
 8017670:	2000e1fc 	.word	0x2000e1fc

08017674 <rcl_guard_condition_get_rmw_handle>:
 8017674:	b110      	cbz	r0, 801767c <rcl_guard_condition_get_rmw_handle+0x8>
 8017676:	6840      	ldr	r0, [r0, #4]
 8017678:	b100      	cbz	r0, 801767c <rcl_guard_condition_get_rmw_handle+0x8>
 801767a:	6800      	ldr	r0, [r0, #0]
 801767c:	4770      	bx	lr
 801767e:	bf00      	nop

08017680 <rcl_validate_topic_name>:
 8017680:	2800      	cmp	r0, #0
 8017682:	d07a      	beq.n	801777a <rcl_validate_topic_name+0xfa>
 8017684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017688:	460e      	mov	r6, r1
 801768a:	2900      	cmp	r1, #0
 801768c:	d07c      	beq.n	8017788 <rcl_validate_topic_name+0x108>
 801768e:	4617      	mov	r7, r2
 8017690:	4605      	mov	r5, r0
 8017692:	f7e8 fdaf 	bl	80001f4 <strlen>
 8017696:	b1b0      	cbz	r0, 80176c6 <rcl_validate_topic_name+0x46>
 8017698:	f895 9000 	ldrb.w	r9, [r5]
 801769c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017820 <rcl_validate_topic_name+0x1a0>
 80176a0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80176a4:	f013 0304 	ands.w	r3, r3, #4
 80176a8:	d169      	bne.n	801777e <rcl_validate_topic_name+0xfe>
 80176aa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80176ae:	f815 2008 	ldrb.w	r2, [r5, r8]
 80176b2:	2a2f      	cmp	r2, #47	@ 0x2f
 80176b4:	d10e      	bne.n	80176d4 <rcl_validate_topic_name+0x54>
 80176b6:	2202      	movs	r2, #2
 80176b8:	6032      	str	r2, [r6, #0]
 80176ba:	b36f      	cbz	r7, 8017718 <rcl_validate_topic_name+0x98>
 80176bc:	f8c7 8000 	str.w	r8, [r7]
 80176c0:	4618      	mov	r0, r3
 80176c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176c6:	2301      	movs	r3, #1
 80176c8:	6033      	str	r3, [r6, #0]
 80176ca:	b32f      	cbz	r7, 8017718 <rcl_validate_topic_name+0x98>
 80176cc:	2000      	movs	r0, #0
 80176ce:	6038      	str	r0, [r7, #0]
 80176d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176d4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80176d8:	461c      	mov	r4, r3
 80176da:	4619      	mov	r1, r3
 80176dc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80176e0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80176e4:	f1be 0f09 	cmp.w	lr, #9
 80176e8:	d919      	bls.n	801771e <rcl_validate_topic_name+0x9e>
 80176ea:	f022 0e20 	bic.w	lr, r2, #32
 80176ee:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80176f2:	f1be 0f19 	cmp.w	lr, #25
 80176f6:	d912      	bls.n	801771e <rcl_validate_topic_name+0x9e>
 80176f8:	2a5f      	cmp	r2, #95	@ 0x5f
 80176fa:	d019      	beq.n	8017730 <rcl_validate_topic_name+0xb0>
 80176fc:	2a2f      	cmp	r2, #47	@ 0x2f
 80176fe:	d051      	beq.n	80177a4 <rcl_validate_topic_name+0x124>
 8017700:	2a7e      	cmp	r2, #126	@ 0x7e
 8017702:	d048      	beq.n	8017796 <rcl_validate_topic_name+0x116>
 8017704:	2a7b      	cmp	r2, #123	@ 0x7b
 8017706:	d054      	beq.n	80177b2 <rcl_validate_topic_name+0x132>
 8017708:	2a7d      	cmp	r2, #125	@ 0x7d
 801770a:	d161      	bne.n	80177d0 <rcl_validate_topic_name+0x150>
 801770c:	2c00      	cmp	r4, #0
 801770e:	d155      	bne.n	80177bc <rcl_validate_topic_name+0x13c>
 8017710:	2305      	movs	r3, #5
 8017712:	6033      	str	r3, [r6, #0]
 8017714:	b107      	cbz	r7, 8017718 <rcl_validate_topic_name+0x98>
 8017716:	6039      	str	r1, [r7, #0]
 8017718:	2000      	movs	r0, #0
 801771a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801771e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017722:	0752      	lsls	r2, r2, #29
 8017724:	d504      	bpl.n	8017730 <rcl_validate_topic_name+0xb0>
 8017726:	b11c      	cbz	r4, 8017730 <rcl_validate_topic_name+0xb0>
 8017728:	b111      	cbz	r1, 8017730 <rcl_validate_topic_name+0xb0>
 801772a:	1e4a      	subs	r2, r1, #1
 801772c:	429a      	cmp	r2, r3
 801772e:	d02d      	beq.n	801778c <rcl_validate_topic_name+0x10c>
 8017730:	3101      	adds	r1, #1
 8017732:	4288      	cmp	r0, r1
 8017734:	d1d2      	bne.n	80176dc <rcl_validate_topic_name+0x5c>
 8017736:	2c00      	cmp	r4, #0
 8017738:	d145      	bne.n	80177c6 <rcl_validate_topic_name+0x146>
 801773a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801773e:	d04f      	beq.n	80177e0 <rcl_validate_topic_name+0x160>
 8017740:	4620      	mov	r0, r4
 8017742:	2301      	movs	r3, #1
 8017744:	e006      	b.n	8017754 <rcl_validate_topic_name+0xd4>
 8017746:	428b      	cmp	r3, r1
 8017748:	f105 0501 	add.w	r5, r5, #1
 801774c:	f103 0201 	add.w	r2, r3, #1
 8017750:	d236      	bcs.n	80177c0 <rcl_validate_topic_name+0x140>
 8017752:	4613      	mov	r3, r2
 8017754:	4580      	cmp	r8, r0
 8017756:	f100 0001 	add.w	r0, r0, #1
 801775a:	d0f4      	beq.n	8017746 <rcl_validate_topic_name+0xc6>
 801775c:	782a      	ldrb	r2, [r5, #0]
 801775e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017760:	d1f1      	bne.n	8017746 <rcl_validate_topic_name+0xc6>
 8017762:	786a      	ldrb	r2, [r5, #1]
 8017764:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017768:	0754      	lsls	r4, r2, #29
 801776a:	d5ec      	bpl.n	8017746 <rcl_validate_topic_name+0xc6>
 801776c:	2204      	movs	r2, #4
 801776e:	6032      	str	r2, [r6, #0]
 8017770:	2f00      	cmp	r7, #0
 8017772:	d0d1      	beq.n	8017718 <rcl_validate_topic_name+0x98>
 8017774:	603b      	str	r3, [r7, #0]
 8017776:	2000      	movs	r0, #0
 8017778:	e7aa      	b.n	80176d0 <rcl_validate_topic_name+0x50>
 801777a:	200b      	movs	r0, #11
 801777c:	4770      	bx	lr
 801777e:	2304      	movs	r3, #4
 8017780:	6033      	str	r3, [r6, #0]
 8017782:	2f00      	cmp	r7, #0
 8017784:	d1a2      	bne.n	80176cc <rcl_validate_topic_name+0x4c>
 8017786:	e7c7      	b.n	8017718 <rcl_validate_topic_name+0x98>
 8017788:	200b      	movs	r0, #11
 801778a:	e7a1      	b.n	80176d0 <rcl_validate_topic_name+0x50>
 801778c:	2309      	movs	r3, #9
 801778e:	6033      	str	r3, [r6, #0]
 8017790:	2f00      	cmp	r7, #0
 8017792:	d1c0      	bne.n	8017716 <rcl_validate_topic_name+0x96>
 8017794:	e7c0      	b.n	8017718 <rcl_validate_topic_name+0x98>
 8017796:	2900      	cmp	r1, #0
 8017798:	d0ca      	beq.n	8017730 <rcl_validate_topic_name+0xb0>
 801779a:	2306      	movs	r3, #6
 801779c:	6033      	str	r3, [r6, #0]
 801779e:	2f00      	cmp	r7, #0
 80177a0:	d1b9      	bne.n	8017716 <rcl_validate_topic_name+0x96>
 80177a2:	e7b9      	b.n	8017718 <rcl_validate_topic_name+0x98>
 80177a4:	2c00      	cmp	r4, #0
 80177a6:	d0c3      	beq.n	8017730 <rcl_validate_topic_name+0xb0>
 80177a8:	2308      	movs	r3, #8
 80177aa:	6033      	str	r3, [r6, #0]
 80177ac:	2f00      	cmp	r7, #0
 80177ae:	d1b2      	bne.n	8017716 <rcl_validate_topic_name+0x96>
 80177b0:	e7b2      	b.n	8017718 <rcl_validate_topic_name+0x98>
 80177b2:	2c00      	cmp	r4, #0
 80177b4:	d1f8      	bne.n	80177a8 <rcl_validate_topic_name+0x128>
 80177b6:	460b      	mov	r3, r1
 80177b8:	2401      	movs	r4, #1
 80177ba:	e7b9      	b.n	8017730 <rcl_validate_topic_name+0xb0>
 80177bc:	2400      	movs	r4, #0
 80177be:	e7b7      	b.n	8017730 <rcl_validate_topic_name+0xb0>
 80177c0:	2000      	movs	r0, #0
 80177c2:	6030      	str	r0, [r6, #0]
 80177c4:	e784      	b.n	80176d0 <rcl_validate_topic_name+0x50>
 80177c6:	2205      	movs	r2, #5
 80177c8:	6032      	str	r2, [r6, #0]
 80177ca:	2f00      	cmp	r7, #0
 80177cc:	d1d2      	bne.n	8017774 <rcl_validate_topic_name+0xf4>
 80177ce:	e7a3      	b.n	8017718 <rcl_validate_topic_name+0x98>
 80177d0:	2c00      	cmp	r4, #0
 80177d2:	bf14      	ite	ne
 80177d4:	2308      	movne	r3, #8
 80177d6:	2303      	moveq	r3, #3
 80177d8:	6033      	str	r3, [r6, #0]
 80177da:	2f00      	cmp	r7, #0
 80177dc:	d19b      	bne.n	8017716 <rcl_validate_topic_name+0x96>
 80177de:	e79b      	b.n	8017718 <rcl_validate_topic_name+0x98>
 80177e0:	2301      	movs	r3, #1
 80177e2:	e00a      	b.n	80177fa <rcl_validate_topic_name+0x17a>
 80177e4:	2c01      	cmp	r4, #1
 80177e6:	d013      	beq.n	8017810 <rcl_validate_topic_name+0x190>
 80177e8:	4299      	cmp	r1, r3
 80177ea:	f104 0401 	add.w	r4, r4, #1
 80177ee:	f105 0501 	add.w	r5, r5, #1
 80177f2:	f103 0201 	add.w	r2, r3, #1
 80177f6:	d9e3      	bls.n	80177c0 <rcl_validate_topic_name+0x140>
 80177f8:	4613      	mov	r3, r2
 80177fa:	45a0      	cmp	r8, r4
 80177fc:	d0f4      	beq.n	80177e8 <rcl_validate_topic_name+0x168>
 80177fe:	782a      	ldrb	r2, [r5, #0]
 8017800:	2a2f      	cmp	r2, #47	@ 0x2f
 8017802:	d1ef      	bne.n	80177e4 <rcl_validate_topic_name+0x164>
 8017804:	786a      	ldrb	r2, [r5, #1]
 8017806:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801780a:	0752      	lsls	r2, r2, #29
 801780c:	d5ec      	bpl.n	80177e8 <rcl_validate_topic_name+0x168>
 801780e:	e7ad      	b.n	801776c <rcl_validate_topic_name+0xec>
 8017810:	2307      	movs	r3, #7
 8017812:	6033      	str	r3, [r6, #0]
 8017814:	2f00      	cmp	r7, #0
 8017816:	f43f af7f 	beq.w	8017718 <rcl_validate_topic_name+0x98>
 801781a:	603c      	str	r4, [r7, #0]
 801781c:	2000      	movs	r0, #0
 801781e:	e757      	b.n	80176d0 <rcl_validate_topic_name+0x50>
 8017820:	0801a5ce 	.word	0x0801a5ce

08017824 <rcutils_string_array_fini>:
 8017824:	b320      	cbz	r0, 8017870 <rcutils_string_array_fini+0x4c>
 8017826:	b570      	push	{r4, r5, r6, lr}
 8017828:	4604      	mov	r4, r0
 801782a:	6840      	ldr	r0, [r0, #4]
 801782c:	b1d8      	cbz	r0, 8017866 <rcutils_string_array_fini+0x42>
 801782e:	f104 0008 	add.w	r0, r4, #8
 8017832:	f7f5 f949 	bl	800cac8 <rcutils_allocator_is_valid>
 8017836:	b1b8      	cbz	r0, 8017868 <rcutils_string_array_fini+0x44>
 8017838:	6823      	ldr	r3, [r4, #0]
 801783a:	b1bb      	cbz	r3, 801786c <rcutils_string_array_fini+0x48>
 801783c:	2500      	movs	r5, #0
 801783e:	6860      	ldr	r0, [r4, #4]
 8017840:	462e      	mov	r6, r5
 8017842:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8017846:	68e3      	ldr	r3, [r4, #12]
 8017848:	69a1      	ldr	r1, [r4, #24]
 801784a:	4798      	blx	r3
 801784c:	e9d4 3000 	ldrd	r3, r0, [r4]
 8017850:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8017854:	3501      	adds	r5, #1
 8017856:	429d      	cmp	r5, r3
 8017858:	d3f3      	bcc.n	8017842 <rcutils_string_array_fini+0x1e>
 801785a:	68e3      	ldr	r3, [r4, #12]
 801785c:	69a1      	ldr	r1, [r4, #24]
 801785e:	4798      	blx	r3
 8017860:	2000      	movs	r0, #0
 8017862:	e9c4 0000 	strd	r0, r0, [r4]
 8017866:	bd70      	pop	{r4, r5, r6, pc}
 8017868:	200b      	movs	r0, #11
 801786a:	bd70      	pop	{r4, r5, r6, pc}
 801786c:	6860      	ldr	r0, [r4, #4]
 801786e:	e7f4      	b.n	801785a <rcutils_string_array_fini+0x36>
 8017870:	200b      	movs	r0, #11
 8017872:	4770      	bx	lr

08017874 <on_status>:
 8017874:	b082      	sub	sp, #8
 8017876:	b002      	add	sp, #8
 8017878:	4770      	bx	lr
 801787a:	bf00      	nop

0801787c <on_topic>:
 801787c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017880:	4a22      	ldr	r2, [pc, #136]	@ (801790c <on_topic+0x90>)
 8017882:	b094      	sub	sp, #80	@ 0x50
 8017884:	6812      	ldr	r2, [r2, #0]
 8017886:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017888:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801788c:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8017890:	b3c2      	cbz	r2, 8017904 <on_topic+0x88>
 8017892:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017896:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801789a:	e001      	b.n	80178a0 <on_topic+0x24>
 801789c:	6852      	ldr	r2, [r2, #4]
 801789e:	b38a      	cbz	r2, 8017904 <on_topic+0x88>
 80178a0:	6894      	ldr	r4, [r2, #8]
 80178a2:	8aa3      	ldrh	r3, [r4, #20]
 80178a4:	428b      	cmp	r3, r1
 80178a6:	d1f9      	bne.n	801789c <on_topic+0x20>
 80178a8:	7da3      	ldrb	r3, [r4, #22]
 80178aa:	4283      	cmp	r3, r0
 80178ac:	d1f6      	bne.n	801789c <on_topic+0x20>
 80178ae:	2248      	movs	r2, #72	@ 0x48
 80178b0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80178b4:	4668      	mov	r0, sp
 80178b6:	f000 ff5c 	bl	8018772 <memcpy>
 80178ba:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80178be:	cb0c      	ldmia	r3, {r2, r3}
 80178c0:	4620      	mov	r0, r4
 80178c2:	f7f5 fd31 	bl	800d328 <rmw_uxrce_get_static_input_buffer_for_entity>
 80178c6:	4607      	mov	r7, r0
 80178c8:	b1e0      	cbz	r0, 8017904 <on_topic+0x88>
 80178ca:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80178ce:	4632      	mov	r2, r6
 80178d0:	4628      	mov	r0, r5
 80178d2:	f108 0110 	add.w	r1, r8, #16
 80178d6:	f7f6 fba5 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 80178da:	b930      	cbnz	r0, 80178ea <on_topic+0x6e>
 80178dc:	480c      	ldr	r0, [pc, #48]	@ (8017910 <on_topic+0x94>)
 80178de:	4639      	mov	r1, r7
 80178e0:	b014      	add	sp, #80	@ 0x50
 80178e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178e6:	f7fc be83 	b.w	80145f0 <put_memory>
 80178ea:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80178ee:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80178f2:	f7fd ffab 	bl	801584c <rmw_uros_epoch_nanos>
 80178f6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80178fa:	2305      	movs	r3, #5
 80178fc:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017900:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017904:	b014      	add	sp, #80	@ 0x50
 8017906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801790a:	bf00      	nop
 801790c:	2000e05c 	.word	0x2000e05c
 8017910:	2000e04c 	.word	0x2000e04c

08017914 <on_request>:
 8017914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017918:	4823      	ldr	r0, [pc, #140]	@ (80179a8 <on_request+0x94>)
 801791a:	b094      	sub	sp, #80	@ 0x50
 801791c:	6800      	ldr	r0, [r0, #0]
 801791e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017920:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017924:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017926:	2800      	cmp	r0, #0
 8017928:	d03b      	beq.n	80179a2 <on_request+0x8e>
 801792a:	461d      	mov	r5, r3
 801792c:	e001      	b.n	8017932 <on_request+0x1e>
 801792e:	6840      	ldr	r0, [r0, #4]
 8017930:	b3b8      	cbz	r0, 80179a2 <on_request+0x8e>
 8017932:	6884      	ldr	r4, [r0, #8]
 8017934:	8b21      	ldrh	r1, [r4, #24]
 8017936:	4291      	cmp	r1, r2
 8017938:	d1f9      	bne.n	801792e <on_request+0x1a>
 801793a:	2248      	movs	r2, #72	@ 0x48
 801793c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017940:	4668      	mov	r0, sp
 8017942:	f000 ff16 	bl	8018772 <memcpy>
 8017946:	f104 0320 	add.w	r3, r4, #32
 801794a:	cb0c      	ldmia	r3, {r2, r3}
 801794c:	4620      	mov	r0, r4
 801794e:	f7f5 fceb 	bl	800d328 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017952:	4680      	mov	r8, r0
 8017954:	b328      	cbz	r0, 80179a2 <on_request+0x8e>
 8017956:	4638      	mov	r0, r7
 8017958:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801795c:	4632      	mov	r2, r6
 801795e:	f107 0110 	add.w	r1, r7, #16
 8017962:	f7f6 fb5f 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8017966:	b930      	cbnz	r0, 8017976 <on_request+0x62>
 8017968:	4810      	ldr	r0, [pc, #64]	@ (80179ac <on_request+0x98>)
 801796a:	4641      	mov	r1, r8
 801796c:	b014      	add	sp, #80	@ 0x50
 801796e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017972:	f7fc be3d 	b.w	80145f0 <put_memory>
 8017976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017978:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801797c:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017980:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017984:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017988:	e895 0003 	ldmia.w	r5, {r0, r1}
 801798c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017990:	f7fd ff5c 	bl	801584c <rmw_uros_epoch_nanos>
 8017994:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017998:	2303      	movs	r3, #3
 801799a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801799e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80179a2:	b014      	add	sp, #80	@ 0x50
 80179a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a8:	2000e02c 	.word	0x2000e02c
 80179ac:	2000e04c 	.word	0x2000e04c

080179b0 <on_reply>:
 80179b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b4:	4821      	ldr	r0, [pc, #132]	@ (8017a3c <on_reply+0x8c>)
 80179b6:	b094      	sub	sp, #80	@ 0x50
 80179b8:	6800      	ldr	r0, [r0, #0]
 80179ba:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80179bc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80179c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80179c2:	b3b8      	cbz	r0, 8017a34 <on_reply+0x84>
 80179c4:	461d      	mov	r5, r3
 80179c6:	e001      	b.n	80179cc <on_reply+0x1c>
 80179c8:	6840      	ldr	r0, [r0, #4]
 80179ca:	b398      	cbz	r0, 8017a34 <on_reply+0x84>
 80179cc:	6884      	ldr	r4, [r0, #8]
 80179ce:	8b21      	ldrh	r1, [r4, #24]
 80179d0:	4291      	cmp	r1, r2
 80179d2:	d1f9      	bne.n	80179c8 <on_reply+0x18>
 80179d4:	2248      	movs	r2, #72	@ 0x48
 80179d6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80179da:	4668      	mov	r0, sp
 80179dc:	f000 fec9 	bl	8018772 <memcpy>
 80179e0:	f104 0320 	add.w	r3, r4, #32
 80179e4:	cb0c      	ldmia	r3, {r2, r3}
 80179e6:	4620      	mov	r0, r4
 80179e8:	f7f5 fc9e 	bl	800d328 <rmw_uxrce_get_static_input_buffer_for_entity>
 80179ec:	4680      	mov	r8, r0
 80179ee:	b308      	cbz	r0, 8017a34 <on_reply+0x84>
 80179f0:	4638      	mov	r0, r7
 80179f2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80179f6:	4632      	mov	r2, r6
 80179f8:	f107 0110 	add.w	r1, r7, #16
 80179fc:	f7f6 fb12 	bl	800e024 <ucdr_deserialize_array_uint8_t>
 8017a00:	b930      	cbnz	r0, 8017a10 <on_reply+0x60>
 8017a02:	480f      	ldr	r0, [pc, #60]	@ (8017a40 <on_reply+0x90>)
 8017a04:	4641      	mov	r1, r8
 8017a06:	b014      	add	sp, #80	@ 0x50
 8017a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a0c:	f7fc bdf0 	b.w	80145f0 <put_memory>
 8017a10:	2200      	movs	r2, #0
 8017a12:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017a16:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017a1a:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017a1e:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017a22:	f7fd ff13 	bl	801584c <rmw_uros_epoch_nanos>
 8017a26:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017a2a:	2304      	movs	r3, #4
 8017a2c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017a30:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017a34:	b014      	add	sp, #80	@ 0x50
 8017a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a3a:	bf00      	nop
 8017a3c:	20009740 	.word	0x20009740
 8017a40:	2000e04c 	.word	0x2000e04c

08017a44 <rmw_create_guard_condition>:
 8017a44:	b538      	push	{r3, r4, r5, lr}
 8017a46:	4605      	mov	r5, r0
 8017a48:	4807      	ldr	r0, [pc, #28]	@ (8017a68 <rmw_create_guard_condition+0x24>)
 8017a4a:	f7fc fdc1 	bl	80145d0 <get_memory>
 8017a4e:	b148      	cbz	r0, 8017a64 <rmw_create_guard_condition+0x20>
 8017a50:	6884      	ldr	r4, [r0, #8]
 8017a52:	2300      	movs	r3, #0
 8017a54:	7423      	strb	r3, [r4, #16]
 8017a56:	61e5      	str	r5, [r4, #28]
 8017a58:	f7fc fe22 	bl	80146a0 <rmw_get_implementation_identifier>
 8017a5c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017a60:	f104 0014 	add.w	r0, r4, #20
 8017a64:	bd38      	pop	{r3, r4, r5, pc}
 8017a66:	bf00      	nop
 8017a68:	2000dfec 	.word	0x2000dfec

08017a6c <rmw_destroy_guard_condition>:
 8017a6c:	b508      	push	{r3, lr}
 8017a6e:	4b08      	ldr	r3, [pc, #32]	@ (8017a90 <rmw_destroy_guard_condition+0x24>)
 8017a70:	6819      	ldr	r1, [r3, #0]
 8017a72:	b911      	cbnz	r1, 8017a7a <rmw_destroy_guard_condition+0xe>
 8017a74:	e00a      	b.n	8017a8c <rmw_destroy_guard_condition+0x20>
 8017a76:	6849      	ldr	r1, [r1, #4]
 8017a78:	b141      	cbz	r1, 8017a8c <rmw_destroy_guard_condition+0x20>
 8017a7a:	688b      	ldr	r3, [r1, #8]
 8017a7c:	3314      	adds	r3, #20
 8017a7e:	4298      	cmp	r0, r3
 8017a80:	d1f9      	bne.n	8017a76 <rmw_destroy_guard_condition+0xa>
 8017a82:	4803      	ldr	r0, [pc, #12]	@ (8017a90 <rmw_destroy_guard_condition+0x24>)
 8017a84:	f7fc fdb4 	bl	80145f0 <put_memory>
 8017a88:	2000      	movs	r0, #0
 8017a8a:	bd08      	pop	{r3, pc}
 8017a8c:	2001      	movs	r0, #1
 8017a8e:	bd08      	pop	{r3, pc}
 8017a90:	2000dfec 	.word	0x2000dfec

08017a94 <rosidl_runtime_c__String__init>:
 8017a94:	b510      	push	{r4, lr}
 8017a96:	4604      	mov	r4, r0
 8017a98:	b086      	sub	sp, #24
 8017a9a:	b170      	cbz	r0, 8017aba <rosidl_runtime_c__String__init+0x26>
 8017a9c:	a801      	add	r0, sp, #4
 8017a9e:	f7f5 f805 	bl	800caac <rcutils_get_default_allocator>
 8017aa2:	9b01      	ldr	r3, [sp, #4]
 8017aa4:	9905      	ldr	r1, [sp, #20]
 8017aa6:	2001      	movs	r0, #1
 8017aa8:	4798      	blx	r3
 8017aaa:	6020      	str	r0, [r4, #0]
 8017aac:	b128      	cbz	r0, 8017aba <rosidl_runtime_c__String__init+0x26>
 8017aae:	2100      	movs	r1, #0
 8017ab0:	2201      	movs	r2, #1
 8017ab2:	7001      	strb	r1, [r0, #0]
 8017ab4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8017ab8:	4610      	mov	r0, r2
 8017aba:	b006      	add	sp, #24
 8017abc:	bd10      	pop	{r4, pc}
 8017abe:	bf00      	nop

08017ac0 <rosidl_runtime_c__String__fini>:
 8017ac0:	b320      	cbz	r0, 8017b0c <rosidl_runtime_c__String__fini+0x4c>
 8017ac2:	b510      	push	{r4, lr}
 8017ac4:	6803      	ldr	r3, [r0, #0]
 8017ac6:	b086      	sub	sp, #24
 8017ac8:	4604      	mov	r4, r0
 8017aca:	b173      	cbz	r3, 8017aea <rosidl_runtime_c__String__fini+0x2a>
 8017acc:	6883      	ldr	r3, [r0, #8]
 8017ace:	b1f3      	cbz	r3, 8017b0e <rosidl_runtime_c__String__fini+0x4e>
 8017ad0:	a801      	add	r0, sp, #4
 8017ad2:	f7f4 ffeb 	bl	800caac <rcutils_get_default_allocator>
 8017ad6:	9b02      	ldr	r3, [sp, #8]
 8017ad8:	9905      	ldr	r1, [sp, #20]
 8017ada:	6820      	ldr	r0, [r4, #0]
 8017adc:	4798      	blx	r3
 8017ade:	2300      	movs	r3, #0
 8017ae0:	e9c4 3300 	strd	r3, r3, [r4]
 8017ae4:	60a3      	str	r3, [r4, #8]
 8017ae6:	b006      	add	sp, #24
 8017ae8:	bd10      	pop	{r4, pc}
 8017aea:	6843      	ldr	r3, [r0, #4]
 8017aec:	b9db      	cbnz	r3, 8017b26 <rosidl_runtime_c__String__fini+0x66>
 8017aee:	6883      	ldr	r3, [r0, #8]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d0f8      	beq.n	8017ae6 <rosidl_runtime_c__String__fini+0x26>
 8017af4:	4b12      	ldr	r3, [pc, #72]	@ (8017b40 <rosidl_runtime_c__String__fini+0x80>)
 8017af6:	4813      	ldr	r0, [pc, #76]	@ (8017b44 <rosidl_runtime_c__String__fini+0x84>)
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	2251      	movs	r2, #81	@ 0x51
 8017afc:	68db      	ldr	r3, [r3, #12]
 8017afe:	2101      	movs	r1, #1
 8017b00:	f000 fb82 	bl	8018208 <fwrite>
 8017b04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b08:	f000 f83e 	bl	8017b88 <exit>
 8017b0c:	4770      	bx	lr
 8017b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8017b40 <rosidl_runtime_c__String__fini+0x80>)
 8017b10:	480d      	ldr	r0, [pc, #52]	@ (8017b48 <rosidl_runtime_c__String__fini+0x88>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	224c      	movs	r2, #76	@ 0x4c
 8017b16:	68db      	ldr	r3, [r3, #12]
 8017b18:	2101      	movs	r1, #1
 8017b1a:	f000 fb75 	bl	8018208 <fwrite>
 8017b1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b22:	f000 f831 	bl	8017b88 <exit>
 8017b26:	4b06      	ldr	r3, [pc, #24]	@ (8017b40 <rosidl_runtime_c__String__fini+0x80>)
 8017b28:	4808      	ldr	r0, [pc, #32]	@ (8017b4c <rosidl_runtime_c__String__fini+0x8c>)
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	224e      	movs	r2, #78	@ 0x4e
 8017b2e:	68db      	ldr	r3, [r3, #12]
 8017b30:	2101      	movs	r1, #1
 8017b32:	f000 fb69 	bl	8018208 <fwrite>
 8017b36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b3a:	f000 f825 	bl	8017b88 <exit>
 8017b3e:	bf00      	nop
 8017b40:	200006d0 	.word	0x200006d0
 8017b44:	0801a50c 	.word	0x0801a50c
 8017b48:	0801a46c 	.word	0x0801a46c
 8017b4c:	0801a4bc 	.word	0x0801a4bc

08017b50 <calloc>:
 8017b50:	4b02      	ldr	r3, [pc, #8]	@ (8017b5c <calloc+0xc>)
 8017b52:	460a      	mov	r2, r1
 8017b54:	4601      	mov	r1, r0
 8017b56:	6818      	ldr	r0, [r3, #0]
 8017b58:	f000 b802 	b.w	8017b60 <_calloc_r>
 8017b5c:	200006d0 	.word	0x200006d0

08017b60 <_calloc_r>:
 8017b60:	b570      	push	{r4, r5, r6, lr}
 8017b62:	fba1 5402 	umull	r5, r4, r1, r2
 8017b66:	b93c      	cbnz	r4, 8017b78 <_calloc_r+0x18>
 8017b68:	4629      	mov	r1, r5
 8017b6a:	f000 f899 	bl	8017ca0 <_malloc_r>
 8017b6e:	4606      	mov	r6, r0
 8017b70:	b928      	cbnz	r0, 8017b7e <_calloc_r+0x1e>
 8017b72:	2600      	movs	r6, #0
 8017b74:	4630      	mov	r0, r6
 8017b76:	bd70      	pop	{r4, r5, r6, pc}
 8017b78:	220c      	movs	r2, #12
 8017b7a:	6002      	str	r2, [r0, #0]
 8017b7c:	e7f9      	b.n	8017b72 <_calloc_r+0x12>
 8017b7e:	462a      	mov	r2, r5
 8017b80:	4621      	mov	r1, r4
 8017b82:	f000 fd2d 	bl	80185e0 <memset>
 8017b86:	e7f5      	b.n	8017b74 <_calloc_r+0x14>

08017b88 <exit>:
 8017b88:	b508      	push	{r3, lr}
 8017b8a:	4b06      	ldr	r3, [pc, #24]	@ (8017ba4 <exit+0x1c>)
 8017b8c:	4604      	mov	r4, r0
 8017b8e:	b113      	cbz	r3, 8017b96 <exit+0xe>
 8017b90:	2100      	movs	r1, #0
 8017b92:	f3af 8000 	nop.w
 8017b96:	4b04      	ldr	r3, [pc, #16]	@ (8017ba8 <exit+0x20>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	b103      	cbz	r3, 8017b9e <exit+0x16>
 8017b9c:	4798      	blx	r3
 8017b9e:	4620      	mov	r0, r4
 8017ba0:	f7ea fe86 	bl	80028b0 <_exit>
 8017ba4:	00000000 	.word	0x00000000
 8017ba8:	2000e350 	.word	0x2000e350

08017bac <getenv>:
 8017bac:	b507      	push	{r0, r1, r2, lr}
 8017bae:	4b04      	ldr	r3, [pc, #16]	@ (8017bc0 <getenv+0x14>)
 8017bb0:	4601      	mov	r1, r0
 8017bb2:	aa01      	add	r2, sp, #4
 8017bb4:	6818      	ldr	r0, [r3, #0]
 8017bb6:	f000 f805 	bl	8017bc4 <_findenv_r>
 8017bba:	b003      	add	sp, #12
 8017bbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8017bc0:	200006d0 	.word	0x200006d0

08017bc4 <_findenv_r>:
 8017bc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bc8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017c38 <_findenv_r+0x74>
 8017bcc:	4606      	mov	r6, r0
 8017bce:	4689      	mov	r9, r1
 8017bd0:	4617      	mov	r7, r2
 8017bd2:	f000 fdfb 	bl	80187cc <__env_lock>
 8017bd6:	f8da 4000 	ldr.w	r4, [sl]
 8017bda:	b134      	cbz	r4, 8017bea <_findenv_r+0x26>
 8017bdc:	464b      	mov	r3, r9
 8017bde:	4698      	mov	r8, r3
 8017be0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017be4:	b13a      	cbz	r2, 8017bf6 <_findenv_r+0x32>
 8017be6:	2a3d      	cmp	r2, #61	@ 0x3d
 8017be8:	d1f9      	bne.n	8017bde <_findenv_r+0x1a>
 8017bea:	4630      	mov	r0, r6
 8017bec:	f000 fdf4 	bl	80187d8 <__env_unlock>
 8017bf0:	2000      	movs	r0, #0
 8017bf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bf6:	eba8 0809 	sub.w	r8, r8, r9
 8017bfa:	46a3      	mov	fp, r4
 8017bfc:	f854 0b04 	ldr.w	r0, [r4], #4
 8017c00:	2800      	cmp	r0, #0
 8017c02:	d0f2      	beq.n	8017bea <_findenv_r+0x26>
 8017c04:	4642      	mov	r2, r8
 8017c06:	4649      	mov	r1, r9
 8017c08:	f000 fcff 	bl	801860a <strncmp>
 8017c0c:	2800      	cmp	r0, #0
 8017c0e:	d1f4      	bne.n	8017bfa <_findenv_r+0x36>
 8017c10:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017c14:	eb03 0508 	add.w	r5, r3, r8
 8017c18:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017c1c:	2b3d      	cmp	r3, #61	@ 0x3d
 8017c1e:	d1ec      	bne.n	8017bfa <_findenv_r+0x36>
 8017c20:	f8da 3000 	ldr.w	r3, [sl]
 8017c24:	ebab 0303 	sub.w	r3, fp, r3
 8017c28:	109b      	asrs	r3, r3, #2
 8017c2a:	4630      	mov	r0, r6
 8017c2c:	603b      	str	r3, [r7, #0]
 8017c2e:	f000 fdd3 	bl	80187d8 <__env_unlock>
 8017c32:	1c68      	adds	r0, r5, #1
 8017c34:	e7dd      	b.n	8017bf2 <_findenv_r+0x2e>
 8017c36:	bf00      	nop
 8017c38:	20000000 	.word	0x20000000

08017c3c <malloc>:
 8017c3c:	4b02      	ldr	r3, [pc, #8]	@ (8017c48 <malloc+0xc>)
 8017c3e:	4601      	mov	r1, r0
 8017c40:	6818      	ldr	r0, [r3, #0]
 8017c42:	f000 b82d 	b.w	8017ca0 <_malloc_r>
 8017c46:	bf00      	nop
 8017c48:	200006d0 	.word	0x200006d0

08017c4c <free>:
 8017c4c:	4b02      	ldr	r3, [pc, #8]	@ (8017c58 <free+0xc>)
 8017c4e:	4601      	mov	r1, r0
 8017c50:	6818      	ldr	r0, [r3, #0]
 8017c52:	f000 bdc7 	b.w	80187e4 <_free_r>
 8017c56:	bf00      	nop
 8017c58:	200006d0 	.word	0x200006d0

08017c5c <sbrk_aligned>:
 8017c5c:	b570      	push	{r4, r5, r6, lr}
 8017c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8017c9c <sbrk_aligned+0x40>)
 8017c60:	460c      	mov	r4, r1
 8017c62:	6831      	ldr	r1, [r6, #0]
 8017c64:	4605      	mov	r5, r0
 8017c66:	b911      	cbnz	r1, 8017c6e <sbrk_aligned+0x12>
 8017c68:	f000 fd2c 	bl	80186c4 <_sbrk_r>
 8017c6c:	6030      	str	r0, [r6, #0]
 8017c6e:	4621      	mov	r1, r4
 8017c70:	4628      	mov	r0, r5
 8017c72:	f000 fd27 	bl	80186c4 <_sbrk_r>
 8017c76:	1c43      	adds	r3, r0, #1
 8017c78:	d103      	bne.n	8017c82 <sbrk_aligned+0x26>
 8017c7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017c7e:	4620      	mov	r0, r4
 8017c80:	bd70      	pop	{r4, r5, r6, pc}
 8017c82:	1cc4      	adds	r4, r0, #3
 8017c84:	f024 0403 	bic.w	r4, r4, #3
 8017c88:	42a0      	cmp	r0, r4
 8017c8a:	d0f8      	beq.n	8017c7e <sbrk_aligned+0x22>
 8017c8c:	1a21      	subs	r1, r4, r0
 8017c8e:	4628      	mov	r0, r5
 8017c90:	f000 fd18 	bl	80186c4 <_sbrk_r>
 8017c94:	3001      	adds	r0, #1
 8017c96:	d1f2      	bne.n	8017c7e <sbrk_aligned+0x22>
 8017c98:	e7ef      	b.n	8017c7a <sbrk_aligned+0x1e>
 8017c9a:	bf00      	nop
 8017c9c:	2000e210 	.word	0x2000e210

08017ca0 <_malloc_r>:
 8017ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ca4:	1ccd      	adds	r5, r1, #3
 8017ca6:	f025 0503 	bic.w	r5, r5, #3
 8017caa:	3508      	adds	r5, #8
 8017cac:	2d0c      	cmp	r5, #12
 8017cae:	bf38      	it	cc
 8017cb0:	250c      	movcc	r5, #12
 8017cb2:	2d00      	cmp	r5, #0
 8017cb4:	4606      	mov	r6, r0
 8017cb6:	db01      	blt.n	8017cbc <_malloc_r+0x1c>
 8017cb8:	42a9      	cmp	r1, r5
 8017cba:	d904      	bls.n	8017cc6 <_malloc_r+0x26>
 8017cbc:	230c      	movs	r3, #12
 8017cbe:	6033      	str	r3, [r6, #0]
 8017cc0:	2000      	movs	r0, #0
 8017cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017d9c <_malloc_r+0xfc>
 8017cca:	f000 f869 	bl	8017da0 <__malloc_lock>
 8017cce:	f8d8 3000 	ldr.w	r3, [r8]
 8017cd2:	461c      	mov	r4, r3
 8017cd4:	bb44      	cbnz	r4, 8017d28 <_malloc_r+0x88>
 8017cd6:	4629      	mov	r1, r5
 8017cd8:	4630      	mov	r0, r6
 8017cda:	f7ff ffbf 	bl	8017c5c <sbrk_aligned>
 8017cde:	1c43      	adds	r3, r0, #1
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	d158      	bne.n	8017d96 <_malloc_r+0xf6>
 8017ce4:	f8d8 4000 	ldr.w	r4, [r8]
 8017ce8:	4627      	mov	r7, r4
 8017cea:	2f00      	cmp	r7, #0
 8017cec:	d143      	bne.n	8017d76 <_malloc_r+0xd6>
 8017cee:	2c00      	cmp	r4, #0
 8017cf0:	d04b      	beq.n	8017d8a <_malloc_r+0xea>
 8017cf2:	6823      	ldr	r3, [r4, #0]
 8017cf4:	4639      	mov	r1, r7
 8017cf6:	4630      	mov	r0, r6
 8017cf8:	eb04 0903 	add.w	r9, r4, r3
 8017cfc:	f000 fce2 	bl	80186c4 <_sbrk_r>
 8017d00:	4581      	cmp	r9, r0
 8017d02:	d142      	bne.n	8017d8a <_malloc_r+0xea>
 8017d04:	6821      	ldr	r1, [r4, #0]
 8017d06:	1a6d      	subs	r5, r5, r1
 8017d08:	4629      	mov	r1, r5
 8017d0a:	4630      	mov	r0, r6
 8017d0c:	f7ff ffa6 	bl	8017c5c <sbrk_aligned>
 8017d10:	3001      	adds	r0, #1
 8017d12:	d03a      	beq.n	8017d8a <_malloc_r+0xea>
 8017d14:	6823      	ldr	r3, [r4, #0]
 8017d16:	442b      	add	r3, r5
 8017d18:	6023      	str	r3, [r4, #0]
 8017d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8017d1e:	685a      	ldr	r2, [r3, #4]
 8017d20:	bb62      	cbnz	r2, 8017d7c <_malloc_r+0xdc>
 8017d22:	f8c8 7000 	str.w	r7, [r8]
 8017d26:	e00f      	b.n	8017d48 <_malloc_r+0xa8>
 8017d28:	6822      	ldr	r2, [r4, #0]
 8017d2a:	1b52      	subs	r2, r2, r5
 8017d2c:	d420      	bmi.n	8017d70 <_malloc_r+0xd0>
 8017d2e:	2a0b      	cmp	r2, #11
 8017d30:	d917      	bls.n	8017d62 <_malloc_r+0xc2>
 8017d32:	1961      	adds	r1, r4, r5
 8017d34:	42a3      	cmp	r3, r4
 8017d36:	6025      	str	r5, [r4, #0]
 8017d38:	bf18      	it	ne
 8017d3a:	6059      	strne	r1, [r3, #4]
 8017d3c:	6863      	ldr	r3, [r4, #4]
 8017d3e:	bf08      	it	eq
 8017d40:	f8c8 1000 	streq.w	r1, [r8]
 8017d44:	5162      	str	r2, [r4, r5]
 8017d46:	604b      	str	r3, [r1, #4]
 8017d48:	4630      	mov	r0, r6
 8017d4a:	f000 f82f 	bl	8017dac <__malloc_unlock>
 8017d4e:	f104 000b 	add.w	r0, r4, #11
 8017d52:	1d23      	adds	r3, r4, #4
 8017d54:	f020 0007 	bic.w	r0, r0, #7
 8017d58:	1ac2      	subs	r2, r0, r3
 8017d5a:	bf1c      	itt	ne
 8017d5c:	1a1b      	subne	r3, r3, r0
 8017d5e:	50a3      	strne	r3, [r4, r2]
 8017d60:	e7af      	b.n	8017cc2 <_malloc_r+0x22>
 8017d62:	6862      	ldr	r2, [r4, #4]
 8017d64:	42a3      	cmp	r3, r4
 8017d66:	bf0c      	ite	eq
 8017d68:	f8c8 2000 	streq.w	r2, [r8]
 8017d6c:	605a      	strne	r2, [r3, #4]
 8017d6e:	e7eb      	b.n	8017d48 <_malloc_r+0xa8>
 8017d70:	4623      	mov	r3, r4
 8017d72:	6864      	ldr	r4, [r4, #4]
 8017d74:	e7ae      	b.n	8017cd4 <_malloc_r+0x34>
 8017d76:	463c      	mov	r4, r7
 8017d78:	687f      	ldr	r7, [r7, #4]
 8017d7a:	e7b6      	b.n	8017cea <_malloc_r+0x4a>
 8017d7c:	461a      	mov	r2, r3
 8017d7e:	685b      	ldr	r3, [r3, #4]
 8017d80:	42a3      	cmp	r3, r4
 8017d82:	d1fb      	bne.n	8017d7c <_malloc_r+0xdc>
 8017d84:	2300      	movs	r3, #0
 8017d86:	6053      	str	r3, [r2, #4]
 8017d88:	e7de      	b.n	8017d48 <_malloc_r+0xa8>
 8017d8a:	230c      	movs	r3, #12
 8017d8c:	6033      	str	r3, [r6, #0]
 8017d8e:	4630      	mov	r0, r6
 8017d90:	f000 f80c 	bl	8017dac <__malloc_unlock>
 8017d94:	e794      	b.n	8017cc0 <_malloc_r+0x20>
 8017d96:	6005      	str	r5, [r0, #0]
 8017d98:	e7d6      	b.n	8017d48 <_malloc_r+0xa8>
 8017d9a:	bf00      	nop
 8017d9c:	2000e214 	.word	0x2000e214

08017da0 <__malloc_lock>:
 8017da0:	4801      	ldr	r0, [pc, #4]	@ (8017da8 <__malloc_lock+0x8>)
 8017da2:	f000 bcdc 	b.w	801875e <__retarget_lock_acquire_recursive>
 8017da6:	bf00      	nop
 8017da8:	2000e359 	.word	0x2000e359

08017dac <__malloc_unlock>:
 8017dac:	4801      	ldr	r0, [pc, #4]	@ (8017db4 <__malloc_unlock+0x8>)
 8017dae:	f000 bcd7 	b.w	8018760 <__retarget_lock_release_recursive>
 8017db2:	bf00      	nop
 8017db4:	2000e359 	.word	0x2000e359

08017db8 <srand>:
 8017db8:	b538      	push	{r3, r4, r5, lr}
 8017dba:	4b10      	ldr	r3, [pc, #64]	@ (8017dfc <srand+0x44>)
 8017dbc:	681d      	ldr	r5, [r3, #0]
 8017dbe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017dc0:	4604      	mov	r4, r0
 8017dc2:	b9b3      	cbnz	r3, 8017df2 <srand+0x3a>
 8017dc4:	2018      	movs	r0, #24
 8017dc6:	f7ff ff39 	bl	8017c3c <malloc>
 8017dca:	4602      	mov	r2, r0
 8017dcc:	6328      	str	r0, [r5, #48]	@ 0x30
 8017dce:	b920      	cbnz	r0, 8017dda <srand+0x22>
 8017dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8017e00 <srand+0x48>)
 8017dd2:	480c      	ldr	r0, [pc, #48]	@ (8017e04 <srand+0x4c>)
 8017dd4:	2146      	movs	r1, #70	@ 0x46
 8017dd6:	f000 fcdb 	bl	8018790 <__assert_func>
 8017dda:	490b      	ldr	r1, [pc, #44]	@ (8017e08 <srand+0x50>)
 8017ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8017e0c <srand+0x54>)
 8017dde:	e9c0 1300 	strd	r1, r3, [r0]
 8017de2:	4b0b      	ldr	r3, [pc, #44]	@ (8017e10 <srand+0x58>)
 8017de4:	6083      	str	r3, [r0, #8]
 8017de6:	230b      	movs	r3, #11
 8017de8:	8183      	strh	r3, [r0, #12]
 8017dea:	2100      	movs	r1, #0
 8017dec:	2001      	movs	r0, #1
 8017dee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017df2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017df4:	2200      	movs	r2, #0
 8017df6:	611c      	str	r4, [r3, #16]
 8017df8:	615a      	str	r2, [r3, #20]
 8017dfa:	bd38      	pop	{r3, r4, r5, pc}
 8017dfc:	200006d0 	.word	0x200006d0
 8017e00:	0801a55e 	.word	0x0801a55e
 8017e04:	0801a575 	.word	0x0801a575
 8017e08:	abcd330e 	.word	0xabcd330e
 8017e0c:	e66d1234 	.word	0xe66d1234
 8017e10:	0005deec 	.word	0x0005deec

08017e14 <rand>:
 8017e14:	4b16      	ldr	r3, [pc, #88]	@ (8017e70 <rand+0x5c>)
 8017e16:	b510      	push	{r4, lr}
 8017e18:	681c      	ldr	r4, [r3, #0]
 8017e1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017e1c:	b9b3      	cbnz	r3, 8017e4c <rand+0x38>
 8017e1e:	2018      	movs	r0, #24
 8017e20:	f7ff ff0c 	bl	8017c3c <malloc>
 8017e24:	4602      	mov	r2, r0
 8017e26:	6320      	str	r0, [r4, #48]	@ 0x30
 8017e28:	b920      	cbnz	r0, 8017e34 <rand+0x20>
 8017e2a:	4b12      	ldr	r3, [pc, #72]	@ (8017e74 <rand+0x60>)
 8017e2c:	4812      	ldr	r0, [pc, #72]	@ (8017e78 <rand+0x64>)
 8017e2e:	2152      	movs	r1, #82	@ 0x52
 8017e30:	f000 fcae 	bl	8018790 <__assert_func>
 8017e34:	4911      	ldr	r1, [pc, #68]	@ (8017e7c <rand+0x68>)
 8017e36:	4b12      	ldr	r3, [pc, #72]	@ (8017e80 <rand+0x6c>)
 8017e38:	e9c0 1300 	strd	r1, r3, [r0]
 8017e3c:	4b11      	ldr	r3, [pc, #68]	@ (8017e84 <rand+0x70>)
 8017e3e:	6083      	str	r3, [r0, #8]
 8017e40:	230b      	movs	r3, #11
 8017e42:	8183      	strh	r3, [r0, #12]
 8017e44:	2100      	movs	r1, #0
 8017e46:	2001      	movs	r0, #1
 8017e48:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017e4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017e4e:	480e      	ldr	r0, [pc, #56]	@ (8017e88 <rand+0x74>)
 8017e50:	690b      	ldr	r3, [r1, #16]
 8017e52:	694c      	ldr	r4, [r1, #20]
 8017e54:	4a0d      	ldr	r2, [pc, #52]	@ (8017e8c <rand+0x78>)
 8017e56:	4358      	muls	r0, r3
 8017e58:	fb02 0004 	mla	r0, r2, r4, r0
 8017e5c:	fba3 3202 	umull	r3, r2, r3, r2
 8017e60:	3301      	adds	r3, #1
 8017e62:	eb40 0002 	adc.w	r0, r0, r2
 8017e66:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017e6a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017e6e:	bd10      	pop	{r4, pc}
 8017e70:	200006d0 	.word	0x200006d0
 8017e74:	0801a55e 	.word	0x0801a55e
 8017e78:	0801a575 	.word	0x0801a575
 8017e7c:	abcd330e 	.word	0xabcd330e
 8017e80:	e66d1234 	.word	0xe66d1234
 8017e84:	0005deec 	.word	0x0005deec
 8017e88:	5851f42d 	.word	0x5851f42d
 8017e8c:	4c957f2d 	.word	0x4c957f2d

08017e90 <realloc>:
 8017e90:	4b02      	ldr	r3, [pc, #8]	@ (8017e9c <realloc+0xc>)
 8017e92:	460a      	mov	r2, r1
 8017e94:	4601      	mov	r1, r0
 8017e96:	6818      	ldr	r0, [r3, #0]
 8017e98:	f000 b802 	b.w	8017ea0 <_realloc_r>
 8017e9c:	200006d0 	.word	0x200006d0

08017ea0 <_realloc_r>:
 8017ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ea4:	4680      	mov	r8, r0
 8017ea6:	4615      	mov	r5, r2
 8017ea8:	460c      	mov	r4, r1
 8017eaa:	b921      	cbnz	r1, 8017eb6 <_realloc_r+0x16>
 8017eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017eb0:	4611      	mov	r1, r2
 8017eb2:	f7ff bef5 	b.w	8017ca0 <_malloc_r>
 8017eb6:	b92a      	cbnz	r2, 8017ec4 <_realloc_r+0x24>
 8017eb8:	f000 fc94 	bl	80187e4 <_free_r>
 8017ebc:	2400      	movs	r4, #0
 8017ebe:	4620      	mov	r0, r4
 8017ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ec4:	f000 fcd8 	bl	8018878 <_malloc_usable_size_r>
 8017ec8:	4285      	cmp	r5, r0
 8017eca:	4606      	mov	r6, r0
 8017ecc:	d802      	bhi.n	8017ed4 <_realloc_r+0x34>
 8017ece:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017ed2:	d8f4      	bhi.n	8017ebe <_realloc_r+0x1e>
 8017ed4:	4629      	mov	r1, r5
 8017ed6:	4640      	mov	r0, r8
 8017ed8:	f7ff fee2 	bl	8017ca0 <_malloc_r>
 8017edc:	4607      	mov	r7, r0
 8017ede:	2800      	cmp	r0, #0
 8017ee0:	d0ec      	beq.n	8017ebc <_realloc_r+0x1c>
 8017ee2:	42b5      	cmp	r5, r6
 8017ee4:	462a      	mov	r2, r5
 8017ee6:	4621      	mov	r1, r4
 8017ee8:	bf28      	it	cs
 8017eea:	4632      	movcs	r2, r6
 8017eec:	f000 fc41 	bl	8018772 <memcpy>
 8017ef0:	4621      	mov	r1, r4
 8017ef2:	4640      	mov	r0, r8
 8017ef4:	f000 fc76 	bl	80187e4 <_free_r>
 8017ef8:	463c      	mov	r4, r7
 8017efa:	e7e0      	b.n	8017ebe <_realloc_r+0x1e>

08017efc <_strtoul_l.constprop.0>:
 8017efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f00:	4e34      	ldr	r6, [pc, #208]	@ (8017fd4 <_strtoul_l.constprop.0+0xd8>)
 8017f02:	4686      	mov	lr, r0
 8017f04:	460d      	mov	r5, r1
 8017f06:	4628      	mov	r0, r5
 8017f08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f0c:	5d37      	ldrb	r7, [r6, r4]
 8017f0e:	f017 0708 	ands.w	r7, r7, #8
 8017f12:	d1f8      	bne.n	8017f06 <_strtoul_l.constprop.0+0xa>
 8017f14:	2c2d      	cmp	r4, #45	@ 0x2d
 8017f16:	d12f      	bne.n	8017f78 <_strtoul_l.constprop.0+0x7c>
 8017f18:	782c      	ldrb	r4, [r5, #0]
 8017f1a:	2701      	movs	r7, #1
 8017f1c:	1c85      	adds	r5, r0, #2
 8017f1e:	f033 0010 	bics.w	r0, r3, #16
 8017f22:	d109      	bne.n	8017f38 <_strtoul_l.constprop.0+0x3c>
 8017f24:	2c30      	cmp	r4, #48	@ 0x30
 8017f26:	d12c      	bne.n	8017f82 <_strtoul_l.constprop.0+0x86>
 8017f28:	7828      	ldrb	r0, [r5, #0]
 8017f2a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017f2e:	2858      	cmp	r0, #88	@ 0x58
 8017f30:	d127      	bne.n	8017f82 <_strtoul_l.constprop.0+0x86>
 8017f32:	786c      	ldrb	r4, [r5, #1]
 8017f34:	2310      	movs	r3, #16
 8017f36:	3502      	adds	r5, #2
 8017f38:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017f3c:	2600      	movs	r6, #0
 8017f3e:	fbb8 f8f3 	udiv	r8, r8, r3
 8017f42:	fb03 f908 	mul.w	r9, r3, r8
 8017f46:	ea6f 0909 	mvn.w	r9, r9
 8017f4a:	4630      	mov	r0, r6
 8017f4c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017f50:	f1bc 0f09 	cmp.w	ip, #9
 8017f54:	d81c      	bhi.n	8017f90 <_strtoul_l.constprop.0+0x94>
 8017f56:	4664      	mov	r4, ip
 8017f58:	42a3      	cmp	r3, r4
 8017f5a:	dd2a      	ble.n	8017fb2 <_strtoul_l.constprop.0+0xb6>
 8017f5c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017f60:	d007      	beq.n	8017f72 <_strtoul_l.constprop.0+0x76>
 8017f62:	4580      	cmp	r8, r0
 8017f64:	d322      	bcc.n	8017fac <_strtoul_l.constprop.0+0xb0>
 8017f66:	d101      	bne.n	8017f6c <_strtoul_l.constprop.0+0x70>
 8017f68:	45a1      	cmp	r9, r4
 8017f6a:	db1f      	blt.n	8017fac <_strtoul_l.constprop.0+0xb0>
 8017f6c:	fb00 4003 	mla	r0, r0, r3, r4
 8017f70:	2601      	movs	r6, #1
 8017f72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f76:	e7e9      	b.n	8017f4c <_strtoul_l.constprop.0+0x50>
 8017f78:	2c2b      	cmp	r4, #43	@ 0x2b
 8017f7a:	bf04      	itt	eq
 8017f7c:	782c      	ldrbeq	r4, [r5, #0]
 8017f7e:	1c85      	addeq	r5, r0, #2
 8017f80:	e7cd      	b.n	8017f1e <_strtoul_l.constprop.0+0x22>
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d1d8      	bne.n	8017f38 <_strtoul_l.constprop.0+0x3c>
 8017f86:	2c30      	cmp	r4, #48	@ 0x30
 8017f88:	bf0c      	ite	eq
 8017f8a:	2308      	moveq	r3, #8
 8017f8c:	230a      	movne	r3, #10
 8017f8e:	e7d3      	b.n	8017f38 <_strtoul_l.constprop.0+0x3c>
 8017f90:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017f94:	f1bc 0f19 	cmp.w	ip, #25
 8017f98:	d801      	bhi.n	8017f9e <_strtoul_l.constprop.0+0xa2>
 8017f9a:	3c37      	subs	r4, #55	@ 0x37
 8017f9c:	e7dc      	b.n	8017f58 <_strtoul_l.constprop.0+0x5c>
 8017f9e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017fa2:	f1bc 0f19 	cmp.w	ip, #25
 8017fa6:	d804      	bhi.n	8017fb2 <_strtoul_l.constprop.0+0xb6>
 8017fa8:	3c57      	subs	r4, #87	@ 0x57
 8017faa:	e7d5      	b.n	8017f58 <_strtoul_l.constprop.0+0x5c>
 8017fac:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017fb0:	e7df      	b.n	8017f72 <_strtoul_l.constprop.0+0x76>
 8017fb2:	1c73      	adds	r3, r6, #1
 8017fb4:	d106      	bne.n	8017fc4 <_strtoul_l.constprop.0+0xc8>
 8017fb6:	2322      	movs	r3, #34	@ 0x22
 8017fb8:	f8ce 3000 	str.w	r3, [lr]
 8017fbc:	4630      	mov	r0, r6
 8017fbe:	b932      	cbnz	r2, 8017fce <_strtoul_l.constprop.0+0xd2>
 8017fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fc4:	b107      	cbz	r7, 8017fc8 <_strtoul_l.constprop.0+0xcc>
 8017fc6:	4240      	negs	r0, r0
 8017fc8:	2a00      	cmp	r2, #0
 8017fca:	d0f9      	beq.n	8017fc0 <_strtoul_l.constprop.0+0xc4>
 8017fcc:	b106      	cbz	r6, 8017fd0 <_strtoul_l.constprop.0+0xd4>
 8017fce:	1e69      	subs	r1, r5, #1
 8017fd0:	6011      	str	r1, [r2, #0]
 8017fd2:	e7f5      	b.n	8017fc0 <_strtoul_l.constprop.0+0xc4>
 8017fd4:	0801a5ce 	.word	0x0801a5ce

08017fd8 <strtoul>:
 8017fd8:	4613      	mov	r3, r2
 8017fda:	460a      	mov	r2, r1
 8017fdc:	4601      	mov	r1, r0
 8017fde:	4802      	ldr	r0, [pc, #8]	@ (8017fe8 <strtoul+0x10>)
 8017fe0:	6800      	ldr	r0, [r0, #0]
 8017fe2:	f7ff bf8b 	b.w	8017efc <_strtoul_l.constprop.0>
 8017fe6:	bf00      	nop
 8017fe8:	200006d0 	.word	0x200006d0

08017fec <std>:
 8017fec:	2300      	movs	r3, #0
 8017fee:	b510      	push	{r4, lr}
 8017ff0:	4604      	mov	r4, r0
 8017ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8017ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017ffa:	6083      	str	r3, [r0, #8]
 8017ffc:	8181      	strh	r1, [r0, #12]
 8017ffe:	6643      	str	r3, [r0, #100]	@ 0x64
 8018000:	81c2      	strh	r2, [r0, #14]
 8018002:	6183      	str	r3, [r0, #24]
 8018004:	4619      	mov	r1, r3
 8018006:	2208      	movs	r2, #8
 8018008:	305c      	adds	r0, #92	@ 0x5c
 801800a:	f000 fae9 	bl	80185e0 <memset>
 801800e:	4b0d      	ldr	r3, [pc, #52]	@ (8018044 <std+0x58>)
 8018010:	6263      	str	r3, [r4, #36]	@ 0x24
 8018012:	4b0d      	ldr	r3, [pc, #52]	@ (8018048 <std+0x5c>)
 8018014:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018016:	4b0d      	ldr	r3, [pc, #52]	@ (801804c <std+0x60>)
 8018018:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801801a:	4b0d      	ldr	r3, [pc, #52]	@ (8018050 <std+0x64>)
 801801c:	6323      	str	r3, [r4, #48]	@ 0x30
 801801e:	4b0d      	ldr	r3, [pc, #52]	@ (8018054 <std+0x68>)
 8018020:	6224      	str	r4, [r4, #32]
 8018022:	429c      	cmp	r4, r3
 8018024:	d006      	beq.n	8018034 <std+0x48>
 8018026:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801802a:	4294      	cmp	r4, r2
 801802c:	d002      	beq.n	8018034 <std+0x48>
 801802e:	33d0      	adds	r3, #208	@ 0xd0
 8018030:	429c      	cmp	r4, r3
 8018032:	d105      	bne.n	8018040 <std+0x54>
 8018034:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801803c:	f000 bb8e 	b.w	801875c <__retarget_lock_init_recursive>
 8018040:	bd10      	pop	{r4, pc}
 8018042:	bf00      	nop
 8018044:	0801836d 	.word	0x0801836d
 8018048:	0801838f 	.word	0x0801838f
 801804c:	080183c7 	.word	0x080183c7
 8018050:	080183eb 	.word	0x080183eb
 8018054:	2000e218 	.word	0x2000e218

08018058 <stdio_exit_handler>:
 8018058:	4a02      	ldr	r2, [pc, #8]	@ (8018064 <stdio_exit_handler+0xc>)
 801805a:	4903      	ldr	r1, [pc, #12]	@ (8018068 <stdio_exit_handler+0x10>)
 801805c:	4803      	ldr	r0, [pc, #12]	@ (801806c <stdio_exit_handler+0x14>)
 801805e:	f000 b869 	b.w	8018134 <_fwalk_sglue>
 8018062:	bf00      	nop
 8018064:	200006c4 	.word	0x200006c4
 8018068:	080191e1 	.word	0x080191e1
 801806c:	200006d4 	.word	0x200006d4

08018070 <cleanup_stdio>:
 8018070:	6841      	ldr	r1, [r0, #4]
 8018072:	4b0c      	ldr	r3, [pc, #48]	@ (80180a4 <cleanup_stdio+0x34>)
 8018074:	4299      	cmp	r1, r3
 8018076:	b510      	push	{r4, lr}
 8018078:	4604      	mov	r4, r0
 801807a:	d001      	beq.n	8018080 <cleanup_stdio+0x10>
 801807c:	f001 f8b0 	bl	80191e0 <_fflush_r>
 8018080:	68a1      	ldr	r1, [r4, #8]
 8018082:	4b09      	ldr	r3, [pc, #36]	@ (80180a8 <cleanup_stdio+0x38>)
 8018084:	4299      	cmp	r1, r3
 8018086:	d002      	beq.n	801808e <cleanup_stdio+0x1e>
 8018088:	4620      	mov	r0, r4
 801808a:	f001 f8a9 	bl	80191e0 <_fflush_r>
 801808e:	68e1      	ldr	r1, [r4, #12]
 8018090:	4b06      	ldr	r3, [pc, #24]	@ (80180ac <cleanup_stdio+0x3c>)
 8018092:	4299      	cmp	r1, r3
 8018094:	d004      	beq.n	80180a0 <cleanup_stdio+0x30>
 8018096:	4620      	mov	r0, r4
 8018098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801809c:	f001 b8a0 	b.w	80191e0 <_fflush_r>
 80180a0:	bd10      	pop	{r4, pc}
 80180a2:	bf00      	nop
 80180a4:	2000e218 	.word	0x2000e218
 80180a8:	2000e280 	.word	0x2000e280
 80180ac:	2000e2e8 	.word	0x2000e2e8

080180b0 <global_stdio_init.part.0>:
 80180b0:	b510      	push	{r4, lr}
 80180b2:	4b0b      	ldr	r3, [pc, #44]	@ (80180e0 <global_stdio_init.part.0+0x30>)
 80180b4:	4c0b      	ldr	r4, [pc, #44]	@ (80180e4 <global_stdio_init.part.0+0x34>)
 80180b6:	4a0c      	ldr	r2, [pc, #48]	@ (80180e8 <global_stdio_init.part.0+0x38>)
 80180b8:	601a      	str	r2, [r3, #0]
 80180ba:	4620      	mov	r0, r4
 80180bc:	2200      	movs	r2, #0
 80180be:	2104      	movs	r1, #4
 80180c0:	f7ff ff94 	bl	8017fec <std>
 80180c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80180c8:	2201      	movs	r2, #1
 80180ca:	2109      	movs	r1, #9
 80180cc:	f7ff ff8e 	bl	8017fec <std>
 80180d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80180d4:	2202      	movs	r2, #2
 80180d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180da:	2112      	movs	r1, #18
 80180dc:	f7ff bf86 	b.w	8017fec <std>
 80180e0:	2000e350 	.word	0x2000e350
 80180e4:	2000e218 	.word	0x2000e218
 80180e8:	08018059 	.word	0x08018059

080180ec <__sfp_lock_acquire>:
 80180ec:	4801      	ldr	r0, [pc, #4]	@ (80180f4 <__sfp_lock_acquire+0x8>)
 80180ee:	f000 bb36 	b.w	801875e <__retarget_lock_acquire_recursive>
 80180f2:	bf00      	nop
 80180f4:	2000e35a 	.word	0x2000e35a

080180f8 <__sfp_lock_release>:
 80180f8:	4801      	ldr	r0, [pc, #4]	@ (8018100 <__sfp_lock_release+0x8>)
 80180fa:	f000 bb31 	b.w	8018760 <__retarget_lock_release_recursive>
 80180fe:	bf00      	nop
 8018100:	2000e35a 	.word	0x2000e35a

08018104 <__sinit>:
 8018104:	b510      	push	{r4, lr}
 8018106:	4604      	mov	r4, r0
 8018108:	f7ff fff0 	bl	80180ec <__sfp_lock_acquire>
 801810c:	6a23      	ldr	r3, [r4, #32]
 801810e:	b11b      	cbz	r3, 8018118 <__sinit+0x14>
 8018110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018114:	f7ff bff0 	b.w	80180f8 <__sfp_lock_release>
 8018118:	4b04      	ldr	r3, [pc, #16]	@ (801812c <__sinit+0x28>)
 801811a:	6223      	str	r3, [r4, #32]
 801811c:	4b04      	ldr	r3, [pc, #16]	@ (8018130 <__sinit+0x2c>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d1f5      	bne.n	8018110 <__sinit+0xc>
 8018124:	f7ff ffc4 	bl	80180b0 <global_stdio_init.part.0>
 8018128:	e7f2      	b.n	8018110 <__sinit+0xc>
 801812a:	bf00      	nop
 801812c:	08018071 	.word	0x08018071
 8018130:	2000e350 	.word	0x2000e350

08018134 <_fwalk_sglue>:
 8018134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018138:	4607      	mov	r7, r0
 801813a:	4688      	mov	r8, r1
 801813c:	4614      	mov	r4, r2
 801813e:	2600      	movs	r6, #0
 8018140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018144:	f1b9 0901 	subs.w	r9, r9, #1
 8018148:	d505      	bpl.n	8018156 <_fwalk_sglue+0x22>
 801814a:	6824      	ldr	r4, [r4, #0]
 801814c:	2c00      	cmp	r4, #0
 801814e:	d1f7      	bne.n	8018140 <_fwalk_sglue+0xc>
 8018150:	4630      	mov	r0, r6
 8018152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018156:	89ab      	ldrh	r3, [r5, #12]
 8018158:	2b01      	cmp	r3, #1
 801815a:	d907      	bls.n	801816c <_fwalk_sglue+0x38>
 801815c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018160:	3301      	adds	r3, #1
 8018162:	d003      	beq.n	801816c <_fwalk_sglue+0x38>
 8018164:	4629      	mov	r1, r5
 8018166:	4638      	mov	r0, r7
 8018168:	47c0      	blx	r8
 801816a:	4306      	orrs	r6, r0
 801816c:	3568      	adds	r5, #104	@ 0x68
 801816e:	e7e9      	b.n	8018144 <_fwalk_sglue+0x10>

08018170 <_fwrite_r>:
 8018170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018174:	9c08      	ldr	r4, [sp, #32]
 8018176:	468a      	mov	sl, r1
 8018178:	4690      	mov	r8, r2
 801817a:	fb02 f903 	mul.w	r9, r2, r3
 801817e:	4606      	mov	r6, r0
 8018180:	b118      	cbz	r0, 801818a <_fwrite_r+0x1a>
 8018182:	6a03      	ldr	r3, [r0, #32]
 8018184:	b90b      	cbnz	r3, 801818a <_fwrite_r+0x1a>
 8018186:	f7ff ffbd 	bl	8018104 <__sinit>
 801818a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801818c:	07dd      	lsls	r5, r3, #31
 801818e:	d405      	bmi.n	801819c <_fwrite_r+0x2c>
 8018190:	89a3      	ldrh	r3, [r4, #12]
 8018192:	0598      	lsls	r0, r3, #22
 8018194:	d402      	bmi.n	801819c <_fwrite_r+0x2c>
 8018196:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018198:	f000 fae1 	bl	801875e <__retarget_lock_acquire_recursive>
 801819c:	89a3      	ldrh	r3, [r4, #12]
 801819e:	0719      	lsls	r1, r3, #28
 80181a0:	d516      	bpl.n	80181d0 <_fwrite_r+0x60>
 80181a2:	6923      	ldr	r3, [r4, #16]
 80181a4:	b1a3      	cbz	r3, 80181d0 <_fwrite_r+0x60>
 80181a6:	2500      	movs	r5, #0
 80181a8:	454d      	cmp	r5, r9
 80181aa:	d01f      	beq.n	80181ec <_fwrite_r+0x7c>
 80181ac:	68a7      	ldr	r7, [r4, #8]
 80181ae:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80181b2:	3f01      	subs	r7, #1
 80181b4:	2f00      	cmp	r7, #0
 80181b6:	60a7      	str	r7, [r4, #8]
 80181b8:	da04      	bge.n	80181c4 <_fwrite_r+0x54>
 80181ba:	69a3      	ldr	r3, [r4, #24]
 80181bc:	429f      	cmp	r7, r3
 80181be:	db0f      	blt.n	80181e0 <_fwrite_r+0x70>
 80181c0:	290a      	cmp	r1, #10
 80181c2:	d00d      	beq.n	80181e0 <_fwrite_r+0x70>
 80181c4:	6823      	ldr	r3, [r4, #0]
 80181c6:	1c5a      	adds	r2, r3, #1
 80181c8:	6022      	str	r2, [r4, #0]
 80181ca:	7019      	strb	r1, [r3, #0]
 80181cc:	3501      	adds	r5, #1
 80181ce:	e7eb      	b.n	80181a8 <_fwrite_r+0x38>
 80181d0:	4621      	mov	r1, r4
 80181d2:	4630      	mov	r0, r6
 80181d4:	f000 f984 	bl	80184e0 <__swsetup_r>
 80181d8:	2800      	cmp	r0, #0
 80181da:	d0e4      	beq.n	80181a6 <_fwrite_r+0x36>
 80181dc:	2500      	movs	r5, #0
 80181de:	e005      	b.n	80181ec <_fwrite_r+0x7c>
 80181e0:	4622      	mov	r2, r4
 80181e2:	4630      	mov	r0, r6
 80181e4:	f000 f93e 	bl	8018464 <__swbuf_r>
 80181e8:	3001      	adds	r0, #1
 80181ea:	d1ef      	bne.n	80181cc <_fwrite_r+0x5c>
 80181ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80181ee:	07da      	lsls	r2, r3, #31
 80181f0:	d405      	bmi.n	80181fe <_fwrite_r+0x8e>
 80181f2:	89a3      	ldrh	r3, [r4, #12]
 80181f4:	059b      	lsls	r3, r3, #22
 80181f6:	d402      	bmi.n	80181fe <_fwrite_r+0x8e>
 80181f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80181fa:	f000 fab1 	bl	8018760 <__retarget_lock_release_recursive>
 80181fe:	fbb5 f0f8 	udiv	r0, r5, r8
 8018202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018208 <fwrite>:
 8018208:	b507      	push	{r0, r1, r2, lr}
 801820a:	9300      	str	r3, [sp, #0]
 801820c:	4613      	mov	r3, r2
 801820e:	460a      	mov	r2, r1
 8018210:	4601      	mov	r1, r0
 8018212:	4803      	ldr	r0, [pc, #12]	@ (8018220 <fwrite+0x18>)
 8018214:	6800      	ldr	r0, [r0, #0]
 8018216:	f7ff ffab 	bl	8018170 <_fwrite_r>
 801821a:	b003      	add	sp, #12
 801821c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018220:	200006d0 	.word	0x200006d0

08018224 <iprintf>:
 8018224:	b40f      	push	{r0, r1, r2, r3}
 8018226:	b507      	push	{r0, r1, r2, lr}
 8018228:	4906      	ldr	r1, [pc, #24]	@ (8018244 <iprintf+0x20>)
 801822a:	ab04      	add	r3, sp, #16
 801822c:	6808      	ldr	r0, [r1, #0]
 801822e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018232:	6881      	ldr	r1, [r0, #8]
 8018234:	9301      	str	r3, [sp, #4]
 8018236:	f000 fca9 	bl	8018b8c <_vfiprintf_r>
 801823a:	b003      	add	sp, #12
 801823c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018240:	b004      	add	sp, #16
 8018242:	4770      	bx	lr
 8018244:	200006d0 	.word	0x200006d0

08018248 <_puts_r>:
 8018248:	6a03      	ldr	r3, [r0, #32]
 801824a:	b570      	push	{r4, r5, r6, lr}
 801824c:	6884      	ldr	r4, [r0, #8]
 801824e:	4605      	mov	r5, r0
 8018250:	460e      	mov	r6, r1
 8018252:	b90b      	cbnz	r3, 8018258 <_puts_r+0x10>
 8018254:	f7ff ff56 	bl	8018104 <__sinit>
 8018258:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801825a:	07db      	lsls	r3, r3, #31
 801825c:	d405      	bmi.n	801826a <_puts_r+0x22>
 801825e:	89a3      	ldrh	r3, [r4, #12]
 8018260:	0598      	lsls	r0, r3, #22
 8018262:	d402      	bmi.n	801826a <_puts_r+0x22>
 8018264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018266:	f000 fa7a 	bl	801875e <__retarget_lock_acquire_recursive>
 801826a:	89a3      	ldrh	r3, [r4, #12]
 801826c:	0719      	lsls	r1, r3, #28
 801826e:	d502      	bpl.n	8018276 <_puts_r+0x2e>
 8018270:	6923      	ldr	r3, [r4, #16]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d135      	bne.n	80182e2 <_puts_r+0x9a>
 8018276:	4621      	mov	r1, r4
 8018278:	4628      	mov	r0, r5
 801827a:	f000 f931 	bl	80184e0 <__swsetup_r>
 801827e:	b380      	cbz	r0, 80182e2 <_puts_r+0x9a>
 8018280:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018284:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018286:	07da      	lsls	r2, r3, #31
 8018288:	d405      	bmi.n	8018296 <_puts_r+0x4e>
 801828a:	89a3      	ldrh	r3, [r4, #12]
 801828c:	059b      	lsls	r3, r3, #22
 801828e:	d402      	bmi.n	8018296 <_puts_r+0x4e>
 8018290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018292:	f000 fa65 	bl	8018760 <__retarget_lock_release_recursive>
 8018296:	4628      	mov	r0, r5
 8018298:	bd70      	pop	{r4, r5, r6, pc}
 801829a:	2b00      	cmp	r3, #0
 801829c:	da04      	bge.n	80182a8 <_puts_r+0x60>
 801829e:	69a2      	ldr	r2, [r4, #24]
 80182a0:	429a      	cmp	r2, r3
 80182a2:	dc17      	bgt.n	80182d4 <_puts_r+0x8c>
 80182a4:	290a      	cmp	r1, #10
 80182a6:	d015      	beq.n	80182d4 <_puts_r+0x8c>
 80182a8:	6823      	ldr	r3, [r4, #0]
 80182aa:	1c5a      	adds	r2, r3, #1
 80182ac:	6022      	str	r2, [r4, #0]
 80182ae:	7019      	strb	r1, [r3, #0]
 80182b0:	68a3      	ldr	r3, [r4, #8]
 80182b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80182b6:	3b01      	subs	r3, #1
 80182b8:	60a3      	str	r3, [r4, #8]
 80182ba:	2900      	cmp	r1, #0
 80182bc:	d1ed      	bne.n	801829a <_puts_r+0x52>
 80182be:	2b00      	cmp	r3, #0
 80182c0:	da11      	bge.n	80182e6 <_puts_r+0x9e>
 80182c2:	4622      	mov	r2, r4
 80182c4:	210a      	movs	r1, #10
 80182c6:	4628      	mov	r0, r5
 80182c8:	f000 f8cc 	bl	8018464 <__swbuf_r>
 80182cc:	3001      	adds	r0, #1
 80182ce:	d0d7      	beq.n	8018280 <_puts_r+0x38>
 80182d0:	250a      	movs	r5, #10
 80182d2:	e7d7      	b.n	8018284 <_puts_r+0x3c>
 80182d4:	4622      	mov	r2, r4
 80182d6:	4628      	mov	r0, r5
 80182d8:	f000 f8c4 	bl	8018464 <__swbuf_r>
 80182dc:	3001      	adds	r0, #1
 80182de:	d1e7      	bne.n	80182b0 <_puts_r+0x68>
 80182e0:	e7ce      	b.n	8018280 <_puts_r+0x38>
 80182e2:	3e01      	subs	r6, #1
 80182e4:	e7e4      	b.n	80182b0 <_puts_r+0x68>
 80182e6:	6823      	ldr	r3, [r4, #0]
 80182e8:	1c5a      	adds	r2, r3, #1
 80182ea:	6022      	str	r2, [r4, #0]
 80182ec:	220a      	movs	r2, #10
 80182ee:	701a      	strb	r2, [r3, #0]
 80182f0:	e7ee      	b.n	80182d0 <_puts_r+0x88>
	...

080182f4 <puts>:
 80182f4:	4b02      	ldr	r3, [pc, #8]	@ (8018300 <puts+0xc>)
 80182f6:	4601      	mov	r1, r0
 80182f8:	6818      	ldr	r0, [r3, #0]
 80182fa:	f7ff bfa5 	b.w	8018248 <_puts_r>
 80182fe:	bf00      	nop
 8018300:	200006d0 	.word	0x200006d0

08018304 <sniprintf>:
 8018304:	b40c      	push	{r2, r3}
 8018306:	b530      	push	{r4, r5, lr}
 8018308:	4b17      	ldr	r3, [pc, #92]	@ (8018368 <sniprintf+0x64>)
 801830a:	1e0c      	subs	r4, r1, #0
 801830c:	681d      	ldr	r5, [r3, #0]
 801830e:	b09d      	sub	sp, #116	@ 0x74
 8018310:	da08      	bge.n	8018324 <sniprintf+0x20>
 8018312:	238b      	movs	r3, #139	@ 0x8b
 8018314:	602b      	str	r3, [r5, #0]
 8018316:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801831a:	b01d      	add	sp, #116	@ 0x74
 801831c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018320:	b002      	add	sp, #8
 8018322:	4770      	bx	lr
 8018324:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018328:	f8ad 3014 	strh.w	r3, [sp, #20]
 801832c:	bf14      	ite	ne
 801832e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018332:	4623      	moveq	r3, r4
 8018334:	9304      	str	r3, [sp, #16]
 8018336:	9307      	str	r3, [sp, #28]
 8018338:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801833c:	9002      	str	r0, [sp, #8]
 801833e:	9006      	str	r0, [sp, #24]
 8018340:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018344:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018346:	ab21      	add	r3, sp, #132	@ 0x84
 8018348:	a902      	add	r1, sp, #8
 801834a:	4628      	mov	r0, r5
 801834c:	9301      	str	r3, [sp, #4]
 801834e:	f000 faf7 	bl	8018940 <_svfiprintf_r>
 8018352:	1c43      	adds	r3, r0, #1
 8018354:	bfbc      	itt	lt
 8018356:	238b      	movlt	r3, #139	@ 0x8b
 8018358:	602b      	strlt	r3, [r5, #0]
 801835a:	2c00      	cmp	r4, #0
 801835c:	d0dd      	beq.n	801831a <sniprintf+0x16>
 801835e:	9b02      	ldr	r3, [sp, #8]
 8018360:	2200      	movs	r2, #0
 8018362:	701a      	strb	r2, [r3, #0]
 8018364:	e7d9      	b.n	801831a <sniprintf+0x16>
 8018366:	bf00      	nop
 8018368:	200006d0 	.word	0x200006d0

0801836c <__sread>:
 801836c:	b510      	push	{r4, lr}
 801836e:	460c      	mov	r4, r1
 8018370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018374:	f000 f994 	bl	80186a0 <_read_r>
 8018378:	2800      	cmp	r0, #0
 801837a:	bfab      	itete	ge
 801837c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801837e:	89a3      	ldrhlt	r3, [r4, #12]
 8018380:	181b      	addge	r3, r3, r0
 8018382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018386:	bfac      	ite	ge
 8018388:	6563      	strge	r3, [r4, #84]	@ 0x54
 801838a:	81a3      	strhlt	r3, [r4, #12]
 801838c:	bd10      	pop	{r4, pc}

0801838e <__swrite>:
 801838e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018392:	461f      	mov	r7, r3
 8018394:	898b      	ldrh	r3, [r1, #12]
 8018396:	05db      	lsls	r3, r3, #23
 8018398:	4605      	mov	r5, r0
 801839a:	460c      	mov	r4, r1
 801839c:	4616      	mov	r6, r2
 801839e:	d505      	bpl.n	80183ac <__swrite+0x1e>
 80183a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183a4:	2302      	movs	r3, #2
 80183a6:	2200      	movs	r2, #0
 80183a8:	f000 f968 	bl	801867c <_lseek_r>
 80183ac:	89a3      	ldrh	r3, [r4, #12]
 80183ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80183b6:	81a3      	strh	r3, [r4, #12]
 80183b8:	4632      	mov	r2, r6
 80183ba:	463b      	mov	r3, r7
 80183bc:	4628      	mov	r0, r5
 80183be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183c2:	f000 b98f 	b.w	80186e4 <_write_r>

080183c6 <__sseek>:
 80183c6:	b510      	push	{r4, lr}
 80183c8:	460c      	mov	r4, r1
 80183ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183ce:	f000 f955 	bl	801867c <_lseek_r>
 80183d2:	1c43      	adds	r3, r0, #1
 80183d4:	89a3      	ldrh	r3, [r4, #12]
 80183d6:	bf15      	itete	ne
 80183d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80183da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80183de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80183e2:	81a3      	strheq	r3, [r4, #12]
 80183e4:	bf18      	it	ne
 80183e6:	81a3      	strhne	r3, [r4, #12]
 80183e8:	bd10      	pop	{r4, pc}

080183ea <__sclose>:
 80183ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183ee:	f000 b935 	b.w	801865c <_close_r>

080183f2 <_vsniprintf_r>:
 80183f2:	b530      	push	{r4, r5, lr}
 80183f4:	4614      	mov	r4, r2
 80183f6:	2c00      	cmp	r4, #0
 80183f8:	b09b      	sub	sp, #108	@ 0x6c
 80183fa:	4605      	mov	r5, r0
 80183fc:	461a      	mov	r2, r3
 80183fe:	da05      	bge.n	801840c <_vsniprintf_r+0x1a>
 8018400:	238b      	movs	r3, #139	@ 0x8b
 8018402:	6003      	str	r3, [r0, #0]
 8018404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018408:	b01b      	add	sp, #108	@ 0x6c
 801840a:	bd30      	pop	{r4, r5, pc}
 801840c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018410:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018414:	bf14      	ite	ne
 8018416:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801841a:	4623      	moveq	r3, r4
 801841c:	9302      	str	r3, [sp, #8]
 801841e:	9305      	str	r3, [sp, #20]
 8018420:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018424:	9100      	str	r1, [sp, #0]
 8018426:	9104      	str	r1, [sp, #16]
 8018428:	f8ad 300e 	strh.w	r3, [sp, #14]
 801842c:	4669      	mov	r1, sp
 801842e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018430:	f000 fa86 	bl	8018940 <_svfiprintf_r>
 8018434:	1c43      	adds	r3, r0, #1
 8018436:	bfbc      	itt	lt
 8018438:	238b      	movlt	r3, #139	@ 0x8b
 801843a:	602b      	strlt	r3, [r5, #0]
 801843c:	2c00      	cmp	r4, #0
 801843e:	d0e3      	beq.n	8018408 <_vsniprintf_r+0x16>
 8018440:	9b00      	ldr	r3, [sp, #0]
 8018442:	2200      	movs	r2, #0
 8018444:	701a      	strb	r2, [r3, #0]
 8018446:	e7df      	b.n	8018408 <_vsniprintf_r+0x16>

08018448 <vsniprintf>:
 8018448:	b507      	push	{r0, r1, r2, lr}
 801844a:	9300      	str	r3, [sp, #0]
 801844c:	4613      	mov	r3, r2
 801844e:	460a      	mov	r2, r1
 8018450:	4601      	mov	r1, r0
 8018452:	4803      	ldr	r0, [pc, #12]	@ (8018460 <vsniprintf+0x18>)
 8018454:	6800      	ldr	r0, [r0, #0]
 8018456:	f7ff ffcc 	bl	80183f2 <_vsniprintf_r>
 801845a:	b003      	add	sp, #12
 801845c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018460:	200006d0 	.word	0x200006d0

08018464 <__swbuf_r>:
 8018464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018466:	460e      	mov	r6, r1
 8018468:	4614      	mov	r4, r2
 801846a:	4605      	mov	r5, r0
 801846c:	b118      	cbz	r0, 8018476 <__swbuf_r+0x12>
 801846e:	6a03      	ldr	r3, [r0, #32]
 8018470:	b90b      	cbnz	r3, 8018476 <__swbuf_r+0x12>
 8018472:	f7ff fe47 	bl	8018104 <__sinit>
 8018476:	69a3      	ldr	r3, [r4, #24]
 8018478:	60a3      	str	r3, [r4, #8]
 801847a:	89a3      	ldrh	r3, [r4, #12]
 801847c:	071a      	lsls	r2, r3, #28
 801847e:	d501      	bpl.n	8018484 <__swbuf_r+0x20>
 8018480:	6923      	ldr	r3, [r4, #16]
 8018482:	b943      	cbnz	r3, 8018496 <__swbuf_r+0x32>
 8018484:	4621      	mov	r1, r4
 8018486:	4628      	mov	r0, r5
 8018488:	f000 f82a 	bl	80184e0 <__swsetup_r>
 801848c:	b118      	cbz	r0, 8018496 <__swbuf_r+0x32>
 801848e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018492:	4638      	mov	r0, r7
 8018494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018496:	6823      	ldr	r3, [r4, #0]
 8018498:	6922      	ldr	r2, [r4, #16]
 801849a:	1a98      	subs	r0, r3, r2
 801849c:	6963      	ldr	r3, [r4, #20]
 801849e:	b2f6      	uxtb	r6, r6
 80184a0:	4283      	cmp	r3, r0
 80184a2:	4637      	mov	r7, r6
 80184a4:	dc05      	bgt.n	80184b2 <__swbuf_r+0x4e>
 80184a6:	4621      	mov	r1, r4
 80184a8:	4628      	mov	r0, r5
 80184aa:	f000 fe99 	bl	80191e0 <_fflush_r>
 80184ae:	2800      	cmp	r0, #0
 80184b0:	d1ed      	bne.n	801848e <__swbuf_r+0x2a>
 80184b2:	68a3      	ldr	r3, [r4, #8]
 80184b4:	3b01      	subs	r3, #1
 80184b6:	60a3      	str	r3, [r4, #8]
 80184b8:	6823      	ldr	r3, [r4, #0]
 80184ba:	1c5a      	adds	r2, r3, #1
 80184bc:	6022      	str	r2, [r4, #0]
 80184be:	701e      	strb	r6, [r3, #0]
 80184c0:	6962      	ldr	r2, [r4, #20]
 80184c2:	1c43      	adds	r3, r0, #1
 80184c4:	429a      	cmp	r2, r3
 80184c6:	d004      	beq.n	80184d2 <__swbuf_r+0x6e>
 80184c8:	89a3      	ldrh	r3, [r4, #12]
 80184ca:	07db      	lsls	r3, r3, #31
 80184cc:	d5e1      	bpl.n	8018492 <__swbuf_r+0x2e>
 80184ce:	2e0a      	cmp	r6, #10
 80184d0:	d1df      	bne.n	8018492 <__swbuf_r+0x2e>
 80184d2:	4621      	mov	r1, r4
 80184d4:	4628      	mov	r0, r5
 80184d6:	f000 fe83 	bl	80191e0 <_fflush_r>
 80184da:	2800      	cmp	r0, #0
 80184dc:	d0d9      	beq.n	8018492 <__swbuf_r+0x2e>
 80184de:	e7d6      	b.n	801848e <__swbuf_r+0x2a>

080184e0 <__swsetup_r>:
 80184e0:	b538      	push	{r3, r4, r5, lr}
 80184e2:	4b29      	ldr	r3, [pc, #164]	@ (8018588 <__swsetup_r+0xa8>)
 80184e4:	4605      	mov	r5, r0
 80184e6:	6818      	ldr	r0, [r3, #0]
 80184e8:	460c      	mov	r4, r1
 80184ea:	b118      	cbz	r0, 80184f4 <__swsetup_r+0x14>
 80184ec:	6a03      	ldr	r3, [r0, #32]
 80184ee:	b90b      	cbnz	r3, 80184f4 <__swsetup_r+0x14>
 80184f0:	f7ff fe08 	bl	8018104 <__sinit>
 80184f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184f8:	0719      	lsls	r1, r3, #28
 80184fa:	d422      	bmi.n	8018542 <__swsetup_r+0x62>
 80184fc:	06da      	lsls	r2, r3, #27
 80184fe:	d407      	bmi.n	8018510 <__swsetup_r+0x30>
 8018500:	2209      	movs	r2, #9
 8018502:	602a      	str	r2, [r5, #0]
 8018504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018508:	81a3      	strh	r3, [r4, #12]
 801850a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801850e:	e033      	b.n	8018578 <__swsetup_r+0x98>
 8018510:	0758      	lsls	r0, r3, #29
 8018512:	d512      	bpl.n	801853a <__swsetup_r+0x5a>
 8018514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018516:	b141      	cbz	r1, 801852a <__swsetup_r+0x4a>
 8018518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801851c:	4299      	cmp	r1, r3
 801851e:	d002      	beq.n	8018526 <__swsetup_r+0x46>
 8018520:	4628      	mov	r0, r5
 8018522:	f000 f95f 	bl	80187e4 <_free_r>
 8018526:	2300      	movs	r3, #0
 8018528:	6363      	str	r3, [r4, #52]	@ 0x34
 801852a:	89a3      	ldrh	r3, [r4, #12]
 801852c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018530:	81a3      	strh	r3, [r4, #12]
 8018532:	2300      	movs	r3, #0
 8018534:	6063      	str	r3, [r4, #4]
 8018536:	6923      	ldr	r3, [r4, #16]
 8018538:	6023      	str	r3, [r4, #0]
 801853a:	89a3      	ldrh	r3, [r4, #12]
 801853c:	f043 0308 	orr.w	r3, r3, #8
 8018540:	81a3      	strh	r3, [r4, #12]
 8018542:	6923      	ldr	r3, [r4, #16]
 8018544:	b94b      	cbnz	r3, 801855a <__swsetup_r+0x7a>
 8018546:	89a3      	ldrh	r3, [r4, #12]
 8018548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801854c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018550:	d003      	beq.n	801855a <__swsetup_r+0x7a>
 8018552:	4621      	mov	r1, r4
 8018554:	4628      	mov	r0, r5
 8018556:	f000 fea3 	bl	80192a0 <__smakebuf_r>
 801855a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801855e:	f013 0201 	ands.w	r2, r3, #1
 8018562:	d00a      	beq.n	801857a <__swsetup_r+0x9a>
 8018564:	2200      	movs	r2, #0
 8018566:	60a2      	str	r2, [r4, #8]
 8018568:	6962      	ldr	r2, [r4, #20]
 801856a:	4252      	negs	r2, r2
 801856c:	61a2      	str	r2, [r4, #24]
 801856e:	6922      	ldr	r2, [r4, #16]
 8018570:	b942      	cbnz	r2, 8018584 <__swsetup_r+0xa4>
 8018572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018576:	d1c5      	bne.n	8018504 <__swsetup_r+0x24>
 8018578:	bd38      	pop	{r3, r4, r5, pc}
 801857a:	0799      	lsls	r1, r3, #30
 801857c:	bf58      	it	pl
 801857e:	6962      	ldrpl	r2, [r4, #20]
 8018580:	60a2      	str	r2, [r4, #8]
 8018582:	e7f4      	b.n	801856e <__swsetup_r+0x8e>
 8018584:	2000      	movs	r0, #0
 8018586:	e7f7      	b.n	8018578 <__swsetup_r+0x98>
 8018588:	200006d0 	.word	0x200006d0

0801858c <memcmp>:
 801858c:	b510      	push	{r4, lr}
 801858e:	3901      	subs	r1, #1
 8018590:	4402      	add	r2, r0
 8018592:	4290      	cmp	r0, r2
 8018594:	d101      	bne.n	801859a <memcmp+0xe>
 8018596:	2000      	movs	r0, #0
 8018598:	e005      	b.n	80185a6 <memcmp+0x1a>
 801859a:	7803      	ldrb	r3, [r0, #0]
 801859c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80185a0:	42a3      	cmp	r3, r4
 80185a2:	d001      	beq.n	80185a8 <memcmp+0x1c>
 80185a4:	1b18      	subs	r0, r3, r4
 80185a6:	bd10      	pop	{r4, pc}
 80185a8:	3001      	adds	r0, #1
 80185aa:	e7f2      	b.n	8018592 <memcmp+0x6>

080185ac <memmove>:
 80185ac:	4288      	cmp	r0, r1
 80185ae:	b510      	push	{r4, lr}
 80185b0:	eb01 0402 	add.w	r4, r1, r2
 80185b4:	d902      	bls.n	80185bc <memmove+0x10>
 80185b6:	4284      	cmp	r4, r0
 80185b8:	4623      	mov	r3, r4
 80185ba:	d807      	bhi.n	80185cc <memmove+0x20>
 80185bc:	1e43      	subs	r3, r0, #1
 80185be:	42a1      	cmp	r1, r4
 80185c0:	d008      	beq.n	80185d4 <memmove+0x28>
 80185c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80185ca:	e7f8      	b.n	80185be <memmove+0x12>
 80185cc:	4402      	add	r2, r0
 80185ce:	4601      	mov	r1, r0
 80185d0:	428a      	cmp	r2, r1
 80185d2:	d100      	bne.n	80185d6 <memmove+0x2a>
 80185d4:	bd10      	pop	{r4, pc}
 80185d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80185de:	e7f7      	b.n	80185d0 <memmove+0x24>

080185e0 <memset>:
 80185e0:	4402      	add	r2, r0
 80185e2:	4603      	mov	r3, r0
 80185e4:	4293      	cmp	r3, r2
 80185e6:	d100      	bne.n	80185ea <memset+0xa>
 80185e8:	4770      	bx	lr
 80185ea:	f803 1b01 	strb.w	r1, [r3], #1
 80185ee:	e7f9      	b.n	80185e4 <memset+0x4>

080185f0 <strchr>:
 80185f0:	b2c9      	uxtb	r1, r1
 80185f2:	4603      	mov	r3, r0
 80185f4:	4618      	mov	r0, r3
 80185f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185fa:	b112      	cbz	r2, 8018602 <strchr+0x12>
 80185fc:	428a      	cmp	r2, r1
 80185fe:	d1f9      	bne.n	80185f4 <strchr+0x4>
 8018600:	4770      	bx	lr
 8018602:	2900      	cmp	r1, #0
 8018604:	bf18      	it	ne
 8018606:	2000      	movne	r0, #0
 8018608:	4770      	bx	lr

0801860a <strncmp>:
 801860a:	b510      	push	{r4, lr}
 801860c:	b16a      	cbz	r2, 801862a <strncmp+0x20>
 801860e:	3901      	subs	r1, #1
 8018610:	1884      	adds	r4, r0, r2
 8018612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018616:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801861a:	429a      	cmp	r2, r3
 801861c:	d103      	bne.n	8018626 <strncmp+0x1c>
 801861e:	42a0      	cmp	r0, r4
 8018620:	d001      	beq.n	8018626 <strncmp+0x1c>
 8018622:	2a00      	cmp	r2, #0
 8018624:	d1f5      	bne.n	8018612 <strncmp+0x8>
 8018626:	1ad0      	subs	r0, r2, r3
 8018628:	bd10      	pop	{r4, pc}
 801862a:	4610      	mov	r0, r2
 801862c:	e7fc      	b.n	8018628 <strncmp+0x1e>

0801862e <strstr>:
 801862e:	780a      	ldrb	r2, [r1, #0]
 8018630:	b570      	push	{r4, r5, r6, lr}
 8018632:	b96a      	cbnz	r2, 8018650 <strstr+0x22>
 8018634:	bd70      	pop	{r4, r5, r6, pc}
 8018636:	429a      	cmp	r2, r3
 8018638:	d109      	bne.n	801864e <strstr+0x20>
 801863a:	460c      	mov	r4, r1
 801863c:	4605      	mov	r5, r0
 801863e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018642:	2b00      	cmp	r3, #0
 8018644:	d0f6      	beq.n	8018634 <strstr+0x6>
 8018646:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801864a:	429e      	cmp	r6, r3
 801864c:	d0f7      	beq.n	801863e <strstr+0x10>
 801864e:	3001      	adds	r0, #1
 8018650:	7803      	ldrb	r3, [r0, #0]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d1ef      	bne.n	8018636 <strstr+0x8>
 8018656:	4618      	mov	r0, r3
 8018658:	e7ec      	b.n	8018634 <strstr+0x6>
	...

0801865c <_close_r>:
 801865c:	b538      	push	{r3, r4, r5, lr}
 801865e:	4d06      	ldr	r5, [pc, #24]	@ (8018678 <_close_r+0x1c>)
 8018660:	2300      	movs	r3, #0
 8018662:	4604      	mov	r4, r0
 8018664:	4608      	mov	r0, r1
 8018666:	602b      	str	r3, [r5, #0]
 8018668:	f7ea f966 	bl	8002938 <_close>
 801866c:	1c43      	adds	r3, r0, #1
 801866e:	d102      	bne.n	8018676 <_close_r+0x1a>
 8018670:	682b      	ldr	r3, [r5, #0]
 8018672:	b103      	cbz	r3, 8018676 <_close_r+0x1a>
 8018674:	6023      	str	r3, [r4, #0]
 8018676:	bd38      	pop	{r3, r4, r5, pc}
 8018678:	2000e354 	.word	0x2000e354

0801867c <_lseek_r>:
 801867c:	b538      	push	{r3, r4, r5, lr}
 801867e:	4d07      	ldr	r5, [pc, #28]	@ (801869c <_lseek_r+0x20>)
 8018680:	4604      	mov	r4, r0
 8018682:	4608      	mov	r0, r1
 8018684:	4611      	mov	r1, r2
 8018686:	2200      	movs	r2, #0
 8018688:	602a      	str	r2, [r5, #0]
 801868a:	461a      	mov	r2, r3
 801868c:	f7ea f97b 	bl	8002986 <_lseek>
 8018690:	1c43      	adds	r3, r0, #1
 8018692:	d102      	bne.n	801869a <_lseek_r+0x1e>
 8018694:	682b      	ldr	r3, [r5, #0]
 8018696:	b103      	cbz	r3, 801869a <_lseek_r+0x1e>
 8018698:	6023      	str	r3, [r4, #0]
 801869a:	bd38      	pop	{r3, r4, r5, pc}
 801869c:	2000e354 	.word	0x2000e354

080186a0 <_read_r>:
 80186a0:	b538      	push	{r3, r4, r5, lr}
 80186a2:	4d07      	ldr	r5, [pc, #28]	@ (80186c0 <_read_r+0x20>)
 80186a4:	4604      	mov	r4, r0
 80186a6:	4608      	mov	r0, r1
 80186a8:	4611      	mov	r1, r2
 80186aa:	2200      	movs	r2, #0
 80186ac:	602a      	str	r2, [r5, #0]
 80186ae:	461a      	mov	r2, r3
 80186b0:	f7ea f909 	bl	80028c6 <_read>
 80186b4:	1c43      	adds	r3, r0, #1
 80186b6:	d102      	bne.n	80186be <_read_r+0x1e>
 80186b8:	682b      	ldr	r3, [r5, #0]
 80186ba:	b103      	cbz	r3, 80186be <_read_r+0x1e>
 80186bc:	6023      	str	r3, [r4, #0]
 80186be:	bd38      	pop	{r3, r4, r5, pc}
 80186c0:	2000e354 	.word	0x2000e354

080186c4 <_sbrk_r>:
 80186c4:	b538      	push	{r3, r4, r5, lr}
 80186c6:	4d06      	ldr	r5, [pc, #24]	@ (80186e0 <_sbrk_r+0x1c>)
 80186c8:	2300      	movs	r3, #0
 80186ca:	4604      	mov	r4, r0
 80186cc:	4608      	mov	r0, r1
 80186ce:	602b      	str	r3, [r5, #0]
 80186d0:	f7ea f966 	bl	80029a0 <_sbrk>
 80186d4:	1c43      	adds	r3, r0, #1
 80186d6:	d102      	bne.n	80186de <_sbrk_r+0x1a>
 80186d8:	682b      	ldr	r3, [r5, #0]
 80186da:	b103      	cbz	r3, 80186de <_sbrk_r+0x1a>
 80186dc:	6023      	str	r3, [r4, #0]
 80186de:	bd38      	pop	{r3, r4, r5, pc}
 80186e0:	2000e354 	.word	0x2000e354

080186e4 <_write_r>:
 80186e4:	b538      	push	{r3, r4, r5, lr}
 80186e6:	4d07      	ldr	r5, [pc, #28]	@ (8018704 <_write_r+0x20>)
 80186e8:	4604      	mov	r4, r0
 80186ea:	4608      	mov	r0, r1
 80186ec:	4611      	mov	r1, r2
 80186ee:	2200      	movs	r2, #0
 80186f0:	602a      	str	r2, [r5, #0]
 80186f2:	461a      	mov	r2, r3
 80186f4:	f7ea f904 	bl	8002900 <_write>
 80186f8:	1c43      	adds	r3, r0, #1
 80186fa:	d102      	bne.n	8018702 <_write_r+0x1e>
 80186fc:	682b      	ldr	r3, [r5, #0]
 80186fe:	b103      	cbz	r3, 8018702 <_write_r+0x1e>
 8018700:	6023      	str	r3, [r4, #0]
 8018702:	bd38      	pop	{r3, r4, r5, pc}
 8018704:	2000e354 	.word	0x2000e354

08018708 <__errno>:
 8018708:	4b01      	ldr	r3, [pc, #4]	@ (8018710 <__errno+0x8>)
 801870a:	6818      	ldr	r0, [r3, #0]
 801870c:	4770      	bx	lr
 801870e:	bf00      	nop
 8018710:	200006d0 	.word	0x200006d0

08018714 <__libc_init_array>:
 8018714:	b570      	push	{r4, r5, r6, lr}
 8018716:	4d0d      	ldr	r5, [pc, #52]	@ (801874c <__libc_init_array+0x38>)
 8018718:	4c0d      	ldr	r4, [pc, #52]	@ (8018750 <__libc_init_array+0x3c>)
 801871a:	1b64      	subs	r4, r4, r5
 801871c:	10a4      	asrs	r4, r4, #2
 801871e:	2600      	movs	r6, #0
 8018720:	42a6      	cmp	r6, r4
 8018722:	d109      	bne.n	8018738 <__libc_init_array+0x24>
 8018724:	4d0b      	ldr	r5, [pc, #44]	@ (8018754 <__libc_init_array+0x40>)
 8018726:	4c0c      	ldr	r4, [pc, #48]	@ (8018758 <__libc_init_array+0x44>)
 8018728:	f000 fe64 	bl	80193f4 <_init>
 801872c:	1b64      	subs	r4, r4, r5
 801872e:	10a4      	asrs	r4, r4, #2
 8018730:	2600      	movs	r6, #0
 8018732:	42a6      	cmp	r6, r4
 8018734:	d105      	bne.n	8018742 <__libc_init_array+0x2e>
 8018736:	bd70      	pop	{r4, r5, r6, pc}
 8018738:	f855 3b04 	ldr.w	r3, [r5], #4
 801873c:	4798      	blx	r3
 801873e:	3601      	adds	r6, #1
 8018740:	e7ee      	b.n	8018720 <__libc_init_array+0xc>
 8018742:	f855 3b04 	ldr.w	r3, [r5], #4
 8018746:	4798      	blx	r3
 8018748:	3601      	adds	r6, #1
 801874a:	e7f2      	b.n	8018732 <__libc_init_array+0x1e>
 801874c:	0801a748 	.word	0x0801a748
 8018750:	0801a748 	.word	0x0801a748
 8018754:	0801a748 	.word	0x0801a748
 8018758:	0801a758 	.word	0x0801a758

0801875c <__retarget_lock_init_recursive>:
 801875c:	4770      	bx	lr

0801875e <__retarget_lock_acquire_recursive>:
 801875e:	4770      	bx	lr

08018760 <__retarget_lock_release_recursive>:
 8018760:	4770      	bx	lr

08018762 <strcpy>:
 8018762:	4603      	mov	r3, r0
 8018764:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018768:	f803 2b01 	strb.w	r2, [r3], #1
 801876c:	2a00      	cmp	r2, #0
 801876e:	d1f9      	bne.n	8018764 <strcpy+0x2>
 8018770:	4770      	bx	lr

08018772 <memcpy>:
 8018772:	440a      	add	r2, r1
 8018774:	4291      	cmp	r1, r2
 8018776:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801877a:	d100      	bne.n	801877e <memcpy+0xc>
 801877c:	4770      	bx	lr
 801877e:	b510      	push	{r4, lr}
 8018780:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018784:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018788:	4291      	cmp	r1, r2
 801878a:	d1f9      	bne.n	8018780 <memcpy+0xe>
 801878c:	bd10      	pop	{r4, pc}
	...

08018790 <__assert_func>:
 8018790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018792:	4614      	mov	r4, r2
 8018794:	461a      	mov	r2, r3
 8018796:	4b09      	ldr	r3, [pc, #36]	@ (80187bc <__assert_func+0x2c>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	4605      	mov	r5, r0
 801879c:	68d8      	ldr	r0, [r3, #12]
 801879e:	b954      	cbnz	r4, 80187b6 <__assert_func+0x26>
 80187a0:	4b07      	ldr	r3, [pc, #28]	@ (80187c0 <__assert_func+0x30>)
 80187a2:	461c      	mov	r4, r3
 80187a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80187a8:	9100      	str	r1, [sp, #0]
 80187aa:	462b      	mov	r3, r5
 80187ac:	4905      	ldr	r1, [pc, #20]	@ (80187c4 <__assert_func+0x34>)
 80187ae:	f000 fd3f 	bl	8019230 <fiprintf>
 80187b2:	f000 fdd3 	bl	801935c <abort>
 80187b6:	4b04      	ldr	r3, [pc, #16]	@ (80187c8 <__assert_func+0x38>)
 80187b8:	e7f4      	b.n	80187a4 <__assert_func+0x14>
 80187ba:	bf00      	nop
 80187bc:	200006d0 	.word	0x200006d0
 80187c0:	0801a709 	.word	0x0801a709
 80187c4:	0801a6db 	.word	0x0801a6db
 80187c8:	0801a6ce 	.word	0x0801a6ce

080187cc <__env_lock>:
 80187cc:	4801      	ldr	r0, [pc, #4]	@ (80187d4 <__env_lock+0x8>)
 80187ce:	f7ff bfc6 	b.w	801875e <__retarget_lock_acquire_recursive>
 80187d2:	bf00      	nop
 80187d4:	2000e358 	.word	0x2000e358

080187d8 <__env_unlock>:
 80187d8:	4801      	ldr	r0, [pc, #4]	@ (80187e0 <__env_unlock+0x8>)
 80187da:	f7ff bfc1 	b.w	8018760 <__retarget_lock_release_recursive>
 80187de:	bf00      	nop
 80187e0:	2000e358 	.word	0x2000e358

080187e4 <_free_r>:
 80187e4:	b538      	push	{r3, r4, r5, lr}
 80187e6:	4605      	mov	r5, r0
 80187e8:	2900      	cmp	r1, #0
 80187ea:	d041      	beq.n	8018870 <_free_r+0x8c>
 80187ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187f0:	1f0c      	subs	r4, r1, #4
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	bfb8      	it	lt
 80187f6:	18e4      	addlt	r4, r4, r3
 80187f8:	f7ff fad2 	bl	8017da0 <__malloc_lock>
 80187fc:	4a1d      	ldr	r2, [pc, #116]	@ (8018874 <_free_r+0x90>)
 80187fe:	6813      	ldr	r3, [r2, #0]
 8018800:	b933      	cbnz	r3, 8018810 <_free_r+0x2c>
 8018802:	6063      	str	r3, [r4, #4]
 8018804:	6014      	str	r4, [r2, #0]
 8018806:	4628      	mov	r0, r5
 8018808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801880c:	f7ff bace 	b.w	8017dac <__malloc_unlock>
 8018810:	42a3      	cmp	r3, r4
 8018812:	d908      	bls.n	8018826 <_free_r+0x42>
 8018814:	6820      	ldr	r0, [r4, #0]
 8018816:	1821      	adds	r1, r4, r0
 8018818:	428b      	cmp	r3, r1
 801881a:	bf01      	itttt	eq
 801881c:	6819      	ldreq	r1, [r3, #0]
 801881e:	685b      	ldreq	r3, [r3, #4]
 8018820:	1809      	addeq	r1, r1, r0
 8018822:	6021      	streq	r1, [r4, #0]
 8018824:	e7ed      	b.n	8018802 <_free_r+0x1e>
 8018826:	461a      	mov	r2, r3
 8018828:	685b      	ldr	r3, [r3, #4]
 801882a:	b10b      	cbz	r3, 8018830 <_free_r+0x4c>
 801882c:	42a3      	cmp	r3, r4
 801882e:	d9fa      	bls.n	8018826 <_free_r+0x42>
 8018830:	6811      	ldr	r1, [r2, #0]
 8018832:	1850      	adds	r0, r2, r1
 8018834:	42a0      	cmp	r0, r4
 8018836:	d10b      	bne.n	8018850 <_free_r+0x6c>
 8018838:	6820      	ldr	r0, [r4, #0]
 801883a:	4401      	add	r1, r0
 801883c:	1850      	adds	r0, r2, r1
 801883e:	4283      	cmp	r3, r0
 8018840:	6011      	str	r1, [r2, #0]
 8018842:	d1e0      	bne.n	8018806 <_free_r+0x22>
 8018844:	6818      	ldr	r0, [r3, #0]
 8018846:	685b      	ldr	r3, [r3, #4]
 8018848:	6053      	str	r3, [r2, #4]
 801884a:	4408      	add	r0, r1
 801884c:	6010      	str	r0, [r2, #0]
 801884e:	e7da      	b.n	8018806 <_free_r+0x22>
 8018850:	d902      	bls.n	8018858 <_free_r+0x74>
 8018852:	230c      	movs	r3, #12
 8018854:	602b      	str	r3, [r5, #0]
 8018856:	e7d6      	b.n	8018806 <_free_r+0x22>
 8018858:	6820      	ldr	r0, [r4, #0]
 801885a:	1821      	adds	r1, r4, r0
 801885c:	428b      	cmp	r3, r1
 801885e:	bf04      	itt	eq
 8018860:	6819      	ldreq	r1, [r3, #0]
 8018862:	685b      	ldreq	r3, [r3, #4]
 8018864:	6063      	str	r3, [r4, #4]
 8018866:	bf04      	itt	eq
 8018868:	1809      	addeq	r1, r1, r0
 801886a:	6021      	streq	r1, [r4, #0]
 801886c:	6054      	str	r4, [r2, #4]
 801886e:	e7ca      	b.n	8018806 <_free_r+0x22>
 8018870:	bd38      	pop	{r3, r4, r5, pc}
 8018872:	bf00      	nop
 8018874:	2000e214 	.word	0x2000e214

08018878 <_malloc_usable_size_r>:
 8018878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801887c:	1f18      	subs	r0, r3, #4
 801887e:	2b00      	cmp	r3, #0
 8018880:	bfbc      	itt	lt
 8018882:	580b      	ldrlt	r3, [r1, r0]
 8018884:	18c0      	addlt	r0, r0, r3
 8018886:	4770      	bx	lr

08018888 <__ssputs_r>:
 8018888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801888c:	688e      	ldr	r6, [r1, #8]
 801888e:	461f      	mov	r7, r3
 8018890:	42be      	cmp	r6, r7
 8018892:	680b      	ldr	r3, [r1, #0]
 8018894:	4682      	mov	sl, r0
 8018896:	460c      	mov	r4, r1
 8018898:	4690      	mov	r8, r2
 801889a:	d82d      	bhi.n	80188f8 <__ssputs_r+0x70>
 801889c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80188a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80188a4:	d026      	beq.n	80188f4 <__ssputs_r+0x6c>
 80188a6:	6965      	ldr	r5, [r4, #20]
 80188a8:	6909      	ldr	r1, [r1, #16]
 80188aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80188ae:	eba3 0901 	sub.w	r9, r3, r1
 80188b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80188b6:	1c7b      	adds	r3, r7, #1
 80188b8:	444b      	add	r3, r9
 80188ba:	106d      	asrs	r5, r5, #1
 80188bc:	429d      	cmp	r5, r3
 80188be:	bf38      	it	cc
 80188c0:	461d      	movcc	r5, r3
 80188c2:	0553      	lsls	r3, r2, #21
 80188c4:	d527      	bpl.n	8018916 <__ssputs_r+0x8e>
 80188c6:	4629      	mov	r1, r5
 80188c8:	f7ff f9ea 	bl	8017ca0 <_malloc_r>
 80188cc:	4606      	mov	r6, r0
 80188ce:	b360      	cbz	r0, 801892a <__ssputs_r+0xa2>
 80188d0:	6921      	ldr	r1, [r4, #16]
 80188d2:	464a      	mov	r2, r9
 80188d4:	f7ff ff4d 	bl	8018772 <memcpy>
 80188d8:	89a3      	ldrh	r3, [r4, #12]
 80188da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80188de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80188e2:	81a3      	strh	r3, [r4, #12]
 80188e4:	6126      	str	r6, [r4, #16]
 80188e6:	6165      	str	r5, [r4, #20]
 80188e8:	444e      	add	r6, r9
 80188ea:	eba5 0509 	sub.w	r5, r5, r9
 80188ee:	6026      	str	r6, [r4, #0]
 80188f0:	60a5      	str	r5, [r4, #8]
 80188f2:	463e      	mov	r6, r7
 80188f4:	42be      	cmp	r6, r7
 80188f6:	d900      	bls.n	80188fa <__ssputs_r+0x72>
 80188f8:	463e      	mov	r6, r7
 80188fa:	6820      	ldr	r0, [r4, #0]
 80188fc:	4632      	mov	r2, r6
 80188fe:	4641      	mov	r1, r8
 8018900:	f7ff fe54 	bl	80185ac <memmove>
 8018904:	68a3      	ldr	r3, [r4, #8]
 8018906:	1b9b      	subs	r3, r3, r6
 8018908:	60a3      	str	r3, [r4, #8]
 801890a:	6823      	ldr	r3, [r4, #0]
 801890c:	4433      	add	r3, r6
 801890e:	6023      	str	r3, [r4, #0]
 8018910:	2000      	movs	r0, #0
 8018912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018916:	462a      	mov	r2, r5
 8018918:	f7ff fac2 	bl	8017ea0 <_realloc_r>
 801891c:	4606      	mov	r6, r0
 801891e:	2800      	cmp	r0, #0
 8018920:	d1e0      	bne.n	80188e4 <__ssputs_r+0x5c>
 8018922:	6921      	ldr	r1, [r4, #16]
 8018924:	4650      	mov	r0, sl
 8018926:	f7ff ff5d 	bl	80187e4 <_free_r>
 801892a:	230c      	movs	r3, #12
 801892c:	f8ca 3000 	str.w	r3, [sl]
 8018930:	89a3      	ldrh	r3, [r4, #12]
 8018932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018936:	81a3      	strh	r3, [r4, #12]
 8018938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801893c:	e7e9      	b.n	8018912 <__ssputs_r+0x8a>
	...

08018940 <_svfiprintf_r>:
 8018940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018944:	4698      	mov	r8, r3
 8018946:	898b      	ldrh	r3, [r1, #12]
 8018948:	061b      	lsls	r3, r3, #24
 801894a:	b09d      	sub	sp, #116	@ 0x74
 801894c:	4607      	mov	r7, r0
 801894e:	460d      	mov	r5, r1
 8018950:	4614      	mov	r4, r2
 8018952:	d510      	bpl.n	8018976 <_svfiprintf_r+0x36>
 8018954:	690b      	ldr	r3, [r1, #16]
 8018956:	b973      	cbnz	r3, 8018976 <_svfiprintf_r+0x36>
 8018958:	2140      	movs	r1, #64	@ 0x40
 801895a:	f7ff f9a1 	bl	8017ca0 <_malloc_r>
 801895e:	6028      	str	r0, [r5, #0]
 8018960:	6128      	str	r0, [r5, #16]
 8018962:	b930      	cbnz	r0, 8018972 <_svfiprintf_r+0x32>
 8018964:	230c      	movs	r3, #12
 8018966:	603b      	str	r3, [r7, #0]
 8018968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801896c:	b01d      	add	sp, #116	@ 0x74
 801896e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018972:	2340      	movs	r3, #64	@ 0x40
 8018974:	616b      	str	r3, [r5, #20]
 8018976:	2300      	movs	r3, #0
 8018978:	9309      	str	r3, [sp, #36]	@ 0x24
 801897a:	2320      	movs	r3, #32
 801897c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018980:	f8cd 800c 	str.w	r8, [sp, #12]
 8018984:	2330      	movs	r3, #48	@ 0x30
 8018986:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018b24 <_svfiprintf_r+0x1e4>
 801898a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801898e:	f04f 0901 	mov.w	r9, #1
 8018992:	4623      	mov	r3, r4
 8018994:	469a      	mov	sl, r3
 8018996:	f813 2b01 	ldrb.w	r2, [r3], #1
 801899a:	b10a      	cbz	r2, 80189a0 <_svfiprintf_r+0x60>
 801899c:	2a25      	cmp	r2, #37	@ 0x25
 801899e:	d1f9      	bne.n	8018994 <_svfiprintf_r+0x54>
 80189a0:	ebba 0b04 	subs.w	fp, sl, r4
 80189a4:	d00b      	beq.n	80189be <_svfiprintf_r+0x7e>
 80189a6:	465b      	mov	r3, fp
 80189a8:	4622      	mov	r2, r4
 80189aa:	4629      	mov	r1, r5
 80189ac:	4638      	mov	r0, r7
 80189ae:	f7ff ff6b 	bl	8018888 <__ssputs_r>
 80189b2:	3001      	adds	r0, #1
 80189b4:	f000 80a7 	beq.w	8018b06 <_svfiprintf_r+0x1c6>
 80189b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80189ba:	445a      	add	r2, fp
 80189bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80189be:	f89a 3000 	ldrb.w	r3, [sl]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	f000 809f 	beq.w	8018b06 <_svfiprintf_r+0x1c6>
 80189c8:	2300      	movs	r3, #0
 80189ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80189ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189d2:	f10a 0a01 	add.w	sl, sl, #1
 80189d6:	9304      	str	r3, [sp, #16]
 80189d8:	9307      	str	r3, [sp, #28]
 80189da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80189de:	931a      	str	r3, [sp, #104]	@ 0x68
 80189e0:	4654      	mov	r4, sl
 80189e2:	2205      	movs	r2, #5
 80189e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189e8:	484e      	ldr	r0, [pc, #312]	@ (8018b24 <_svfiprintf_r+0x1e4>)
 80189ea:	f7e7 fc11 	bl	8000210 <memchr>
 80189ee:	9a04      	ldr	r2, [sp, #16]
 80189f0:	b9d8      	cbnz	r0, 8018a2a <_svfiprintf_r+0xea>
 80189f2:	06d0      	lsls	r0, r2, #27
 80189f4:	bf44      	itt	mi
 80189f6:	2320      	movmi	r3, #32
 80189f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80189fc:	0711      	lsls	r1, r2, #28
 80189fe:	bf44      	itt	mi
 8018a00:	232b      	movmi	r3, #43	@ 0x2b
 8018a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018a06:	f89a 3000 	ldrb.w	r3, [sl]
 8018a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a0c:	d015      	beq.n	8018a3a <_svfiprintf_r+0xfa>
 8018a0e:	9a07      	ldr	r2, [sp, #28]
 8018a10:	4654      	mov	r4, sl
 8018a12:	2000      	movs	r0, #0
 8018a14:	f04f 0c0a 	mov.w	ip, #10
 8018a18:	4621      	mov	r1, r4
 8018a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a1e:	3b30      	subs	r3, #48	@ 0x30
 8018a20:	2b09      	cmp	r3, #9
 8018a22:	d94b      	bls.n	8018abc <_svfiprintf_r+0x17c>
 8018a24:	b1b0      	cbz	r0, 8018a54 <_svfiprintf_r+0x114>
 8018a26:	9207      	str	r2, [sp, #28]
 8018a28:	e014      	b.n	8018a54 <_svfiprintf_r+0x114>
 8018a2a:	eba0 0308 	sub.w	r3, r0, r8
 8018a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8018a32:	4313      	orrs	r3, r2
 8018a34:	9304      	str	r3, [sp, #16]
 8018a36:	46a2      	mov	sl, r4
 8018a38:	e7d2      	b.n	80189e0 <_svfiprintf_r+0xa0>
 8018a3a:	9b03      	ldr	r3, [sp, #12]
 8018a3c:	1d19      	adds	r1, r3, #4
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	9103      	str	r1, [sp, #12]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	bfbb      	ittet	lt
 8018a46:	425b      	neglt	r3, r3
 8018a48:	f042 0202 	orrlt.w	r2, r2, #2
 8018a4c:	9307      	strge	r3, [sp, #28]
 8018a4e:	9307      	strlt	r3, [sp, #28]
 8018a50:	bfb8      	it	lt
 8018a52:	9204      	strlt	r2, [sp, #16]
 8018a54:	7823      	ldrb	r3, [r4, #0]
 8018a56:	2b2e      	cmp	r3, #46	@ 0x2e
 8018a58:	d10a      	bne.n	8018a70 <_svfiprintf_r+0x130>
 8018a5a:	7863      	ldrb	r3, [r4, #1]
 8018a5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a5e:	d132      	bne.n	8018ac6 <_svfiprintf_r+0x186>
 8018a60:	9b03      	ldr	r3, [sp, #12]
 8018a62:	1d1a      	adds	r2, r3, #4
 8018a64:	681b      	ldr	r3, [r3, #0]
 8018a66:	9203      	str	r2, [sp, #12]
 8018a68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018a6c:	3402      	adds	r4, #2
 8018a6e:	9305      	str	r3, [sp, #20]
 8018a70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018b34 <_svfiprintf_r+0x1f4>
 8018a74:	7821      	ldrb	r1, [r4, #0]
 8018a76:	2203      	movs	r2, #3
 8018a78:	4650      	mov	r0, sl
 8018a7a:	f7e7 fbc9 	bl	8000210 <memchr>
 8018a7e:	b138      	cbz	r0, 8018a90 <_svfiprintf_r+0x150>
 8018a80:	9b04      	ldr	r3, [sp, #16]
 8018a82:	eba0 000a 	sub.w	r0, r0, sl
 8018a86:	2240      	movs	r2, #64	@ 0x40
 8018a88:	4082      	lsls	r2, r0
 8018a8a:	4313      	orrs	r3, r2
 8018a8c:	3401      	adds	r4, #1
 8018a8e:	9304      	str	r3, [sp, #16]
 8018a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a94:	4824      	ldr	r0, [pc, #144]	@ (8018b28 <_svfiprintf_r+0x1e8>)
 8018a96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018a9a:	2206      	movs	r2, #6
 8018a9c:	f7e7 fbb8 	bl	8000210 <memchr>
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	d036      	beq.n	8018b12 <_svfiprintf_r+0x1d2>
 8018aa4:	4b21      	ldr	r3, [pc, #132]	@ (8018b2c <_svfiprintf_r+0x1ec>)
 8018aa6:	bb1b      	cbnz	r3, 8018af0 <_svfiprintf_r+0x1b0>
 8018aa8:	9b03      	ldr	r3, [sp, #12]
 8018aaa:	3307      	adds	r3, #7
 8018aac:	f023 0307 	bic.w	r3, r3, #7
 8018ab0:	3308      	adds	r3, #8
 8018ab2:	9303      	str	r3, [sp, #12]
 8018ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ab6:	4433      	add	r3, r6
 8018ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8018aba:	e76a      	b.n	8018992 <_svfiprintf_r+0x52>
 8018abc:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ac0:	460c      	mov	r4, r1
 8018ac2:	2001      	movs	r0, #1
 8018ac4:	e7a8      	b.n	8018a18 <_svfiprintf_r+0xd8>
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	3401      	adds	r4, #1
 8018aca:	9305      	str	r3, [sp, #20]
 8018acc:	4619      	mov	r1, r3
 8018ace:	f04f 0c0a 	mov.w	ip, #10
 8018ad2:	4620      	mov	r0, r4
 8018ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ad8:	3a30      	subs	r2, #48	@ 0x30
 8018ada:	2a09      	cmp	r2, #9
 8018adc:	d903      	bls.n	8018ae6 <_svfiprintf_r+0x1a6>
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d0c6      	beq.n	8018a70 <_svfiprintf_r+0x130>
 8018ae2:	9105      	str	r1, [sp, #20]
 8018ae4:	e7c4      	b.n	8018a70 <_svfiprintf_r+0x130>
 8018ae6:	fb0c 2101 	mla	r1, ip, r1, r2
 8018aea:	4604      	mov	r4, r0
 8018aec:	2301      	movs	r3, #1
 8018aee:	e7f0      	b.n	8018ad2 <_svfiprintf_r+0x192>
 8018af0:	ab03      	add	r3, sp, #12
 8018af2:	9300      	str	r3, [sp, #0]
 8018af4:	462a      	mov	r2, r5
 8018af6:	4b0e      	ldr	r3, [pc, #56]	@ (8018b30 <_svfiprintf_r+0x1f0>)
 8018af8:	a904      	add	r1, sp, #16
 8018afa:	4638      	mov	r0, r7
 8018afc:	f3af 8000 	nop.w
 8018b00:	1c42      	adds	r2, r0, #1
 8018b02:	4606      	mov	r6, r0
 8018b04:	d1d6      	bne.n	8018ab4 <_svfiprintf_r+0x174>
 8018b06:	89ab      	ldrh	r3, [r5, #12]
 8018b08:	065b      	lsls	r3, r3, #25
 8018b0a:	f53f af2d 	bmi.w	8018968 <_svfiprintf_r+0x28>
 8018b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018b10:	e72c      	b.n	801896c <_svfiprintf_r+0x2c>
 8018b12:	ab03      	add	r3, sp, #12
 8018b14:	9300      	str	r3, [sp, #0]
 8018b16:	462a      	mov	r2, r5
 8018b18:	4b05      	ldr	r3, [pc, #20]	@ (8018b30 <_svfiprintf_r+0x1f0>)
 8018b1a:	a904      	add	r1, sp, #16
 8018b1c:	4638      	mov	r0, r7
 8018b1e:	f000 f9bb 	bl	8018e98 <_printf_i>
 8018b22:	e7ed      	b.n	8018b00 <_svfiprintf_r+0x1c0>
 8018b24:	0801a70a 	.word	0x0801a70a
 8018b28:	0801a714 	.word	0x0801a714
 8018b2c:	00000000 	.word	0x00000000
 8018b30:	08018889 	.word	0x08018889
 8018b34:	0801a710 	.word	0x0801a710

08018b38 <__sfputc_r>:
 8018b38:	6893      	ldr	r3, [r2, #8]
 8018b3a:	3b01      	subs	r3, #1
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	b410      	push	{r4}
 8018b40:	6093      	str	r3, [r2, #8]
 8018b42:	da08      	bge.n	8018b56 <__sfputc_r+0x1e>
 8018b44:	6994      	ldr	r4, [r2, #24]
 8018b46:	42a3      	cmp	r3, r4
 8018b48:	db01      	blt.n	8018b4e <__sfputc_r+0x16>
 8018b4a:	290a      	cmp	r1, #10
 8018b4c:	d103      	bne.n	8018b56 <__sfputc_r+0x1e>
 8018b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b52:	f7ff bc87 	b.w	8018464 <__swbuf_r>
 8018b56:	6813      	ldr	r3, [r2, #0]
 8018b58:	1c58      	adds	r0, r3, #1
 8018b5a:	6010      	str	r0, [r2, #0]
 8018b5c:	7019      	strb	r1, [r3, #0]
 8018b5e:	4608      	mov	r0, r1
 8018b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b64:	4770      	bx	lr

08018b66 <__sfputs_r>:
 8018b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b68:	4606      	mov	r6, r0
 8018b6a:	460f      	mov	r7, r1
 8018b6c:	4614      	mov	r4, r2
 8018b6e:	18d5      	adds	r5, r2, r3
 8018b70:	42ac      	cmp	r4, r5
 8018b72:	d101      	bne.n	8018b78 <__sfputs_r+0x12>
 8018b74:	2000      	movs	r0, #0
 8018b76:	e007      	b.n	8018b88 <__sfputs_r+0x22>
 8018b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b7c:	463a      	mov	r2, r7
 8018b7e:	4630      	mov	r0, r6
 8018b80:	f7ff ffda 	bl	8018b38 <__sfputc_r>
 8018b84:	1c43      	adds	r3, r0, #1
 8018b86:	d1f3      	bne.n	8018b70 <__sfputs_r+0xa>
 8018b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018b8c <_vfiprintf_r>:
 8018b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b90:	460d      	mov	r5, r1
 8018b92:	b09d      	sub	sp, #116	@ 0x74
 8018b94:	4614      	mov	r4, r2
 8018b96:	4698      	mov	r8, r3
 8018b98:	4606      	mov	r6, r0
 8018b9a:	b118      	cbz	r0, 8018ba4 <_vfiprintf_r+0x18>
 8018b9c:	6a03      	ldr	r3, [r0, #32]
 8018b9e:	b90b      	cbnz	r3, 8018ba4 <_vfiprintf_r+0x18>
 8018ba0:	f7ff fab0 	bl	8018104 <__sinit>
 8018ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018ba6:	07d9      	lsls	r1, r3, #31
 8018ba8:	d405      	bmi.n	8018bb6 <_vfiprintf_r+0x2a>
 8018baa:	89ab      	ldrh	r3, [r5, #12]
 8018bac:	059a      	lsls	r2, r3, #22
 8018bae:	d402      	bmi.n	8018bb6 <_vfiprintf_r+0x2a>
 8018bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018bb2:	f7ff fdd4 	bl	801875e <__retarget_lock_acquire_recursive>
 8018bb6:	89ab      	ldrh	r3, [r5, #12]
 8018bb8:	071b      	lsls	r3, r3, #28
 8018bba:	d501      	bpl.n	8018bc0 <_vfiprintf_r+0x34>
 8018bbc:	692b      	ldr	r3, [r5, #16]
 8018bbe:	b99b      	cbnz	r3, 8018be8 <_vfiprintf_r+0x5c>
 8018bc0:	4629      	mov	r1, r5
 8018bc2:	4630      	mov	r0, r6
 8018bc4:	f7ff fc8c 	bl	80184e0 <__swsetup_r>
 8018bc8:	b170      	cbz	r0, 8018be8 <_vfiprintf_r+0x5c>
 8018bca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018bcc:	07dc      	lsls	r4, r3, #31
 8018bce:	d504      	bpl.n	8018bda <_vfiprintf_r+0x4e>
 8018bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018bd4:	b01d      	add	sp, #116	@ 0x74
 8018bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bda:	89ab      	ldrh	r3, [r5, #12]
 8018bdc:	0598      	lsls	r0, r3, #22
 8018bde:	d4f7      	bmi.n	8018bd0 <_vfiprintf_r+0x44>
 8018be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018be2:	f7ff fdbd 	bl	8018760 <__retarget_lock_release_recursive>
 8018be6:	e7f3      	b.n	8018bd0 <_vfiprintf_r+0x44>
 8018be8:	2300      	movs	r3, #0
 8018bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8018bec:	2320      	movs	r3, #32
 8018bee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8018bf6:	2330      	movs	r3, #48	@ 0x30
 8018bf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018da8 <_vfiprintf_r+0x21c>
 8018bfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018c00:	f04f 0901 	mov.w	r9, #1
 8018c04:	4623      	mov	r3, r4
 8018c06:	469a      	mov	sl, r3
 8018c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c0c:	b10a      	cbz	r2, 8018c12 <_vfiprintf_r+0x86>
 8018c0e:	2a25      	cmp	r2, #37	@ 0x25
 8018c10:	d1f9      	bne.n	8018c06 <_vfiprintf_r+0x7a>
 8018c12:	ebba 0b04 	subs.w	fp, sl, r4
 8018c16:	d00b      	beq.n	8018c30 <_vfiprintf_r+0xa4>
 8018c18:	465b      	mov	r3, fp
 8018c1a:	4622      	mov	r2, r4
 8018c1c:	4629      	mov	r1, r5
 8018c1e:	4630      	mov	r0, r6
 8018c20:	f7ff ffa1 	bl	8018b66 <__sfputs_r>
 8018c24:	3001      	adds	r0, #1
 8018c26:	f000 80a7 	beq.w	8018d78 <_vfiprintf_r+0x1ec>
 8018c2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c2c:	445a      	add	r2, fp
 8018c2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c30:	f89a 3000 	ldrb.w	r3, [sl]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	f000 809f 	beq.w	8018d78 <_vfiprintf_r+0x1ec>
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c44:	f10a 0a01 	add.w	sl, sl, #1
 8018c48:	9304      	str	r3, [sp, #16]
 8018c4a:	9307      	str	r3, [sp, #28]
 8018c4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018c50:	931a      	str	r3, [sp, #104]	@ 0x68
 8018c52:	4654      	mov	r4, sl
 8018c54:	2205      	movs	r2, #5
 8018c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c5a:	4853      	ldr	r0, [pc, #332]	@ (8018da8 <_vfiprintf_r+0x21c>)
 8018c5c:	f7e7 fad8 	bl	8000210 <memchr>
 8018c60:	9a04      	ldr	r2, [sp, #16]
 8018c62:	b9d8      	cbnz	r0, 8018c9c <_vfiprintf_r+0x110>
 8018c64:	06d1      	lsls	r1, r2, #27
 8018c66:	bf44      	itt	mi
 8018c68:	2320      	movmi	r3, #32
 8018c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c6e:	0713      	lsls	r3, r2, #28
 8018c70:	bf44      	itt	mi
 8018c72:	232b      	movmi	r3, #43	@ 0x2b
 8018c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c78:	f89a 3000 	ldrb.w	r3, [sl]
 8018c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c7e:	d015      	beq.n	8018cac <_vfiprintf_r+0x120>
 8018c80:	9a07      	ldr	r2, [sp, #28]
 8018c82:	4654      	mov	r4, sl
 8018c84:	2000      	movs	r0, #0
 8018c86:	f04f 0c0a 	mov.w	ip, #10
 8018c8a:	4621      	mov	r1, r4
 8018c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c90:	3b30      	subs	r3, #48	@ 0x30
 8018c92:	2b09      	cmp	r3, #9
 8018c94:	d94b      	bls.n	8018d2e <_vfiprintf_r+0x1a2>
 8018c96:	b1b0      	cbz	r0, 8018cc6 <_vfiprintf_r+0x13a>
 8018c98:	9207      	str	r2, [sp, #28]
 8018c9a:	e014      	b.n	8018cc6 <_vfiprintf_r+0x13a>
 8018c9c:	eba0 0308 	sub.w	r3, r0, r8
 8018ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8018ca4:	4313      	orrs	r3, r2
 8018ca6:	9304      	str	r3, [sp, #16]
 8018ca8:	46a2      	mov	sl, r4
 8018caa:	e7d2      	b.n	8018c52 <_vfiprintf_r+0xc6>
 8018cac:	9b03      	ldr	r3, [sp, #12]
 8018cae:	1d19      	adds	r1, r3, #4
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	9103      	str	r1, [sp, #12]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	bfbb      	ittet	lt
 8018cb8:	425b      	neglt	r3, r3
 8018cba:	f042 0202 	orrlt.w	r2, r2, #2
 8018cbe:	9307      	strge	r3, [sp, #28]
 8018cc0:	9307      	strlt	r3, [sp, #28]
 8018cc2:	bfb8      	it	lt
 8018cc4:	9204      	strlt	r2, [sp, #16]
 8018cc6:	7823      	ldrb	r3, [r4, #0]
 8018cc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8018cca:	d10a      	bne.n	8018ce2 <_vfiprintf_r+0x156>
 8018ccc:	7863      	ldrb	r3, [r4, #1]
 8018cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8018cd0:	d132      	bne.n	8018d38 <_vfiprintf_r+0x1ac>
 8018cd2:	9b03      	ldr	r3, [sp, #12]
 8018cd4:	1d1a      	adds	r2, r3, #4
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	9203      	str	r2, [sp, #12]
 8018cda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018cde:	3402      	adds	r4, #2
 8018ce0:	9305      	str	r3, [sp, #20]
 8018ce2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018db8 <_vfiprintf_r+0x22c>
 8018ce6:	7821      	ldrb	r1, [r4, #0]
 8018ce8:	2203      	movs	r2, #3
 8018cea:	4650      	mov	r0, sl
 8018cec:	f7e7 fa90 	bl	8000210 <memchr>
 8018cf0:	b138      	cbz	r0, 8018d02 <_vfiprintf_r+0x176>
 8018cf2:	9b04      	ldr	r3, [sp, #16]
 8018cf4:	eba0 000a 	sub.w	r0, r0, sl
 8018cf8:	2240      	movs	r2, #64	@ 0x40
 8018cfa:	4082      	lsls	r2, r0
 8018cfc:	4313      	orrs	r3, r2
 8018cfe:	3401      	adds	r4, #1
 8018d00:	9304      	str	r3, [sp, #16]
 8018d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d06:	4829      	ldr	r0, [pc, #164]	@ (8018dac <_vfiprintf_r+0x220>)
 8018d08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018d0c:	2206      	movs	r2, #6
 8018d0e:	f7e7 fa7f 	bl	8000210 <memchr>
 8018d12:	2800      	cmp	r0, #0
 8018d14:	d03f      	beq.n	8018d96 <_vfiprintf_r+0x20a>
 8018d16:	4b26      	ldr	r3, [pc, #152]	@ (8018db0 <_vfiprintf_r+0x224>)
 8018d18:	bb1b      	cbnz	r3, 8018d62 <_vfiprintf_r+0x1d6>
 8018d1a:	9b03      	ldr	r3, [sp, #12]
 8018d1c:	3307      	adds	r3, #7
 8018d1e:	f023 0307 	bic.w	r3, r3, #7
 8018d22:	3308      	adds	r3, #8
 8018d24:	9303      	str	r3, [sp, #12]
 8018d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d28:	443b      	add	r3, r7
 8018d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d2c:	e76a      	b.n	8018c04 <_vfiprintf_r+0x78>
 8018d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d32:	460c      	mov	r4, r1
 8018d34:	2001      	movs	r0, #1
 8018d36:	e7a8      	b.n	8018c8a <_vfiprintf_r+0xfe>
 8018d38:	2300      	movs	r3, #0
 8018d3a:	3401      	adds	r4, #1
 8018d3c:	9305      	str	r3, [sp, #20]
 8018d3e:	4619      	mov	r1, r3
 8018d40:	f04f 0c0a 	mov.w	ip, #10
 8018d44:	4620      	mov	r0, r4
 8018d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d4a:	3a30      	subs	r2, #48	@ 0x30
 8018d4c:	2a09      	cmp	r2, #9
 8018d4e:	d903      	bls.n	8018d58 <_vfiprintf_r+0x1cc>
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d0c6      	beq.n	8018ce2 <_vfiprintf_r+0x156>
 8018d54:	9105      	str	r1, [sp, #20]
 8018d56:	e7c4      	b.n	8018ce2 <_vfiprintf_r+0x156>
 8018d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d5c:	4604      	mov	r4, r0
 8018d5e:	2301      	movs	r3, #1
 8018d60:	e7f0      	b.n	8018d44 <_vfiprintf_r+0x1b8>
 8018d62:	ab03      	add	r3, sp, #12
 8018d64:	9300      	str	r3, [sp, #0]
 8018d66:	462a      	mov	r2, r5
 8018d68:	4b12      	ldr	r3, [pc, #72]	@ (8018db4 <_vfiprintf_r+0x228>)
 8018d6a:	a904      	add	r1, sp, #16
 8018d6c:	4630      	mov	r0, r6
 8018d6e:	f3af 8000 	nop.w
 8018d72:	4607      	mov	r7, r0
 8018d74:	1c78      	adds	r0, r7, #1
 8018d76:	d1d6      	bne.n	8018d26 <_vfiprintf_r+0x19a>
 8018d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d7a:	07d9      	lsls	r1, r3, #31
 8018d7c:	d405      	bmi.n	8018d8a <_vfiprintf_r+0x1fe>
 8018d7e:	89ab      	ldrh	r3, [r5, #12]
 8018d80:	059a      	lsls	r2, r3, #22
 8018d82:	d402      	bmi.n	8018d8a <_vfiprintf_r+0x1fe>
 8018d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d86:	f7ff fceb 	bl	8018760 <__retarget_lock_release_recursive>
 8018d8a:	89ab      	ldrh	r3, [r5, #12]
 8018d8c:	065b      	lsls	r3, r3, #25
 8018d8e:	f53f af1f 	bmi.w	8018bd0 <_vfiprintf_r+0x44>
 8018d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018d94:	e71e      	b.n	8018bd4 <_vfiprintf_r+0x48>
 8018d96:	ab03      	add	r3, sp, #12
 8018d98:	9300      	str	r3, [sp, #0]
 8018d9a:	462a      	mov	r2, r5
 8018d9c:	4b05      	ldr	r3, [pc, #20]	@ (8018db4 <_vfiprintf_r+0x228>)
 8018d9e:	a904      	add	r1, sp, #16
 8018da0:	4630      	mov	r0, r6
 8018da2:	f000 f879 	bl	8018e98 <_printf_i>
 8018da6:	e7e4      	b.n	8018d72 <_vfiprintf_r+0x1e6>
 8018da8:	0801a70a 	.word	0x0801a70a
 8018dac:	0801a714 	.word	0x0801a714
 8018db0:	00000000 	.word	0x00000000
 8018db4:	08018b67 	.word	0x08018b67
 8018db8:	0801a710 	.word	0x0801a710

08018dbc <_printf_common>:
 8018dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018dc0:	4616      	mov	r6, r2
 8018dc2:	4698      	mov	r8, r3
 8018dc4:	688a      	ldr	r2, [r1, #8]
 8018dc6:	690b      	ldr	r3, [r1, #16]
 8018dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018dcc:	4293      	cmp	r3, r2
 8018dce:	bfb8      	it	lt
 8018dd0:	4613      	movlt	r3, r2
 8018dd2:	6033      	str	r3, [r6, #0]
 8018dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018dd8:	4607      	mov	r7, r0
 8018dda:	460c      	mov	r4, r1
 8018ddc:	b10a      	cbz	r2, 8018de2 <_printf_common+0x26>
 8018dde:	3301      	adds	r3, #1
 8018de0:	6033      	str	r3, [r6, #0]
 8018de2:	6823      	ldr	r3, [r4, #0]
 8018de4:	0699      	lsls	r1, r3, #26
 8018de6:	bf42      	ittt	mi
 8018de8:	6833      	ldrmi	r3, [r6, #0]
 8018dea:	3302      	addmi	r3, #2
 8018dec:	6033      	strmi	r3, [r6, #0]
 8018dee:	6825      	ldr	r5, [r4, #0]
 8018df0:	f015 0506 	ands.w	r5, r5, #6
 8018df4:	d106      	bne.n	8018e04 <_printf_common+0x48>
 8018df6:	f104 0a19 	add.w	sl, r4, #25
 8018dfa:	68e3      	ldr	r3, [r4, #12]
 8018dfc:	6832      	ldr	r2, [r6, #0]
 8018dfe:	1a9b      	subs	r3, r3, r2
 8018e00:	42ab      	cmp	r3, r5
 8018e02:	dc26      	bgt.n	8018e52 <_printf_common+0x96>
 8018e04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018e08:	6822      	ldr	r2, [r4, #0]
 8018e0a:	3b00      	subs	r3, #0
 8018e0c:	bf18      	it	ne
 8018e0e:	2301      	movne	r3, #1
 8018e10:	0692      	lsls	r2, r2, #26
 8018e12:	d42b      	bmi.n	8018e6c <_printf_common+0xb0>
 8018e14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018e18:	4641      	mov	r1, r8
 8018e1a:	4638      	mov	r0, r7
 8018e1c:	47c8      	blx	r9
 8018e1e:	3001      	adds	r0, #1
 8018e20:	d01e      	beq.n	8018e60 <_printf_common+0xa4>
 8018e22:	6823      	ldr	r3, [r4, #0]
 8018e24:	6922      	ldr	r2, [r4, #16]
 8018e26:	f003 0306 	and.w	r3, r3, #6
 8018e2a:	2b04      	cmp	r3, #4
 8018e2c:	bf02      	ittt	eq
 8018e2e:	68e5      	ldreq	r5, [r4, #12]
 8018e30:	6833      	ldreq	r3, [r6, #0]
 8018e32:	1aed      	subeq	r5, r5, r3
 8018e34:	68a3      	ldr	r3, [r4, #8]
 8018e36:	bf0c      	ite	eq
 8018e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018e3c:	2500      	movne	r5, #0
 8018e3e:	4293      	cmp	r3, r2
 8018e40:	bfc4      	itt	gt
 8018e42:	1a9b      	subgt	r3, r3, r2
 8018e44:	18ed      	addgt	r5, r5, r3
 8018e46:	2600      	movs	r6, #0
 8018e48:	341a      	adds	r4, #26
 8018e4a:	42b5      	cmp	r5, r6
 8018e4c:	d11a      	bne.n	8018e84 <_printf_common+0xc8>
 8018e4e:	2000      	movs	r0, #0
 8018e50:	e008      	b.n	8018e64 <_printf_common+0xa8>
 8018e52:	2301      	movs	r3, #1
 8018e54:	4652      	mov	r2, sl
 8018e56:	4641      	mov	r1, r8
 8018e58:	4638      	mov	r0, r7
 8018e5a:	47c8      	blx	r9
 8018e5c:	3001      	adds	r0, #1
 8018e5e:	d103      	bne.n	8018e68 <_printf_common+0xac>
 8018e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e68:	3501      	adds	r5, #1
 8018e6a:	e7c6      	b.n	8018dfa <_printf_common+0x3e>
 8018e6c:	18e1      	adds	r1, r4, r3
 8018e6e:	1c5a      	adds	r2, r3, #1
 8018e70:	2030      	movs	r0, #48	@ 0x30
 8018e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018e76:	4422      	add	r2, r4
 8018e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018e7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018e80:	3302      	adds	r3, #2
 8018e82:	e7c7      	b.n	8018e14 <_printf_common+0x58>
 8018e84:	2301      	movs	r3, #1
 8018e86:	4622      	mov	r2, r4
 8018e88:	4641      	mov	r1, r8
 8018e8a:	4638      	mov	r0, r7
 8018e8c:	47c8      	blx	r9
 8018e8e:	3001      	adds	r0, #1
 8018e90:	d0e6      	beq.n	8018e60 <_printf_common+0xa4>
 8018e92:	3601      	adds	r6, #1
 8018e94:	e7d9      	b.n	8018e4a <_printf_common+0x8e>
	...

08018e98 <_printf_i>:
 8018e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018e9c:	7e0f      	ldrb	r7, [r1, #24]
 8018e9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018ea0:	2f78      	cmp	r7, #120	@ 0x78
 8018ea2:	4691      	mov	r9, r2
 8018ea4:	4680      	mov	r8, r0
 8018ea6:	460c      	mov	r4, r1
 8018ea8:	469a      	mov	sl, r3
 8018eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018eae:	d807      	bhi.n	8018ec0 <_printf_i+0x28>
 8018eb0:	2f62      	cmp	r7, #98	@ 0x62
 8018eb2:	d80a      	bhi.n	8018eca <_printf_i+0x32>
 8018eb4:	2f00      	cmp	r7, #0
 8018eb6:	f000 80d2 	beq.w	801905e <_printf_i+0x1c6>
 8018eba:	2f58      	cmp	r7, #88	@ 0x58
 8018ebc:	f000 80b9 	beq.w	8019032 <_printf_i+0x19a>
 8018ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018ec8:	e03a      	b.n	8018f40 <_printf_i+0xa8>
 8018eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018ece:	2b15      	cmp	r3, #21
 8018ed0:	d8f6      	bhi.n	8018ec0 <_printf_i+0x28>
 8018ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8018ed8 <_printf_i+0x40>)
 8018ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018ed8:	08018f31 	.word	0x08018f31
 8018edc:	08018f45 	.word	0x08018f45
 8018ee0:	08018ec1 	.word	0x08018ec1
 8018ee4:	08018ec1 	.word	0x08018ec1
 8018ee8:	08018ec1 	.word	0x08018ec1
 8018eec:	08018ec1 	.word	0x08018ec1
 8018ef0:	08018f45 	.word	0x08018f45
 8018ef4:	08018ec1 	.word	0x08018ec1
 8018ef8:	08018ec1 	.word	0x08018ec1
 8018efc:	08018ec1 	.word	0x08018ec1
 8018f00:	08018ec1 	.word	0x08018ec1
 8018f04:	08019045 	.word	0x08019045
 8018f08:	08018f6f 	.word	0x08018f6f
 8018f0c:	08018fff 	.word	0x08018fff
 8018f10:	08018ec1 	.word	0x08018ec1
 8018f14:	08018ec1 	.word	0x08018ec1
 8018f18:	08019067 	.word	0x08019067
 8018f1c:	08018ec1 	.word	0x08018ec1
 8018f20:	08018f6f 	.word	0x08018f6f
 8018f24:	08018ec1 	.word	0x08018ec1
 8018f28:	08018ec1 	.word	0x08018ec1
 8018f2c:	08019007 	.word	0x08019007
 8018f30:	6833      	ldr	r3, [r6, #0]
 8018f32:	1d1a      	adds	r2, r3, #4
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	6032      	str	r2, [r6, #0]
 8018f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018f40:	2301      	movs	r3, #1
 8018f42:	e09d      	b.n	8019080 <_printf_i+0x1e8>
 8018f44:	6833      	ldr	r3, [r6, #0]
 8018f46:	6820      	ldr	r0, [r4, #0]
 8018f48:	1d19      	adds	r1, r3, #4
 8018f4a:	6031      	str	r1, [r6, #0]
 8018f4c:	0606      	lsls	r6, r0, #24
 8018f4e:	d501      	bpl.n	8018f54 <_printf_i+0xbc>
 8018f50:	681d      	ldr	r5, [r3, #0]
 8018f52:	e003      	b.n	8018f5c <_printf_i+0xc4>
 8018f54:	0645      	lsls	r5, r0, #25
 8018f56:	d5fb      	bpl.n	8018f50 <_printf_i+0xb8>
 8018f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018f5c:	2d00      	cmp	r5, #0
 8018f5e:	da03      	bge.n	8018f68 <_printf_i+0xd0>
 8018f60:	232d      	movs	r3, #45	@ 0x2d
 8018f62:	426d      	negs	r5, r5
 8018f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018f68:	4859      	ldr	r0, [pc, #356]	@ (80190d0 <_printf_i+0x238>)
 8018f6a:	230a      	movs	r3, #10
 8018f6c:	e011      	b.n	8018f92 <_printf_i+0xfa>
 8018f6e:	6821      	ldr	r1, [r4, #0]
 8018f70:	6833      	ldr	r3, [r6, #0]
 8018f72:	0608      	lsls	r0, r1, #24
 8018f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8018f78:	d402      	bmi.n	8018f80 <_printf_i+0xe8>
 8018f7a:	0649      	lsls	r1, r1, #25
 8018f7c:	bf48      	it	mi
 8018f7e:	b2ad      	uxthmi	r5, r5
 8018f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8018f82:	4853      	ldr	r0, [pc, #332]	@ (80190d0 <_printf_i+0x238>)
 8018f84:	6033      	str	r3, [r6, #0]
 8018f86:	bf14      	ite	ne
 8018f88:	230a      	movne	r3, #10
 8018f8a:	2308      	moveq	r3, #8
 8018f8c:	2100      	movs	r1, #0
 8018f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018f92:	6866      	ldr	r6, [r4, #4]
 8018f94:	60a6      	str	r6, [r4, #8]
 8018f96:	2e00      	cmp	r6, #0
 8018f98:	bfa2      	ittt	ge
 8018f9a:	6821      	ldrge	r1, [r4, #0]
 8018f9c:	f021 0104 	bicge.w	r1, r1, #4
 8018fa0:	6021      	strge	r1, [r4, #0]
 8018fa2:	b90d      	cbnz	r5, 8018fa8 <_printf_i+0x110>
 8018fa4:	2e00      	cmp	r6, #0
 8018fa6:	d04b      	beq.n	8019040 <_printf_i+0x1a8>
 8018fa8:	4616      	mov	r6, r2
 8018faa:	fbb5 f1f3 	udiv	r1, r5, r3
 8018fae:	fb03 5711 	mls	r7, r3, r1, r5
 8018fb2:	5dc7      	ldrb	r7, [r0, r7]
 8018fb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018fb8:	462f      	mov	r7, r5
 8018fba:	42bb      	cmp	r3, r7
 8018fbc:	460d      	mov	r5, r1
 8018fbe:	d9f4      	bls.n	8018faa <_printf_i+0x112>
 8018fc0:	2b08      	cmp	r3, #8
 8018fc2:	d10b      	bne.n	8018fdc <_printf_i+0x144>
 8018fc4:	6823      	ldr	r3, [r4, #0]
 8018fc6:	07df      	lsls	r7, r3, #31
 8018fc8:	d508      	bpl.n	8018fdc <_printf_i+0x144>
 8018fca:	6923      	ldr	r3, [r4, #16]
 8018fcc:	6861      	ldr	r1, [r4, #4]
 8018fce:	4299      	cmp	r1, r3
 8018fd0:	bfde      	ittt	le
 8018fd2:	2330      	movle	r3, #48	@ 0x30
 8018fd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018fd8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018fdc:	1b92      	subs	r2, r2, r6
 8018fde:	6122      	str	r2, [r4, #16]
 8018fe0:	f8cd a000 	str.w	sl, [sp]
 8018fe4:	464b      	mov	r3, r9
 8018fe6:	aa03      	add	r2, sp, #12
 8018fe8:	4621      	mov	r1, r4
 8018fea:	4640      	mov	r0, r8
 8018fec:	f7ff fee6 	bl	8018dbc <_printf_common>
 8018ff0:	3001      	adds	r0, #1
 8018ff2:	d14a      	bne.n	801908a <_printf_i+0x1f2>
 8018ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018ff8:	b004      	add	sp, #16
 8018ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ffe:	6823      	ldr	r3, [r4, #0]
 8019000:	f043 0320 	orr.w	r3, r3, #32
 8019004:	6023      	str	r3, [r4, #0]
 8019006:	4833      	ldr	r0, [pc, #204]	@ (80190d4 <_printf_i+0x23c>)
 8019008:	2778      	movs	r7, #120	@ 0x78
 801900a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801900e:	6823      	ldr	r3, [r4, #0]
 8019010:	6831      	ldr	r1, [r6, #0]
 8019012:	061f      	lsls	r7, r3, #24
 8019014:	f851 5b04 	ldr.w	r5, [r1], #4
 8019018:	d402      	bmi.n	8019020 <_printf_i+0x188>
 801901a:	065f      	lsls	r7, r3, #25
 801901c:	bf48      	it	mi
 801901e:	b2ad      	uxthmi	r5, r5
 8019020:	6031      	str	r1, [r6, #0]
 8019022:	07d9      	lsls	r1, r3, #31
 8019024:	bf44      	itt	mi
 8019026:	f043 0320 	orrmi.w	r3, r3, #32
 801902a:	6023      	strmi	r3, [r4, #0]
 801902c:	b11d      	cbz	r5, 8019036 <_printf_i+0x19e>
 801902e:	2310      	movs	r3, #16
 8019030:	e7ac      	b.n	8018f8c <_printf_i+0xf4>
 8019032:	4827      	ldr	r0, [pc, #156]	@ (80190d0 <_printf_i+0x238>)
 8019034:	e7e9      	b.n	801900a <_printf_i+0x172>
 8019036:	6823      	ldr	r3, [r4, #0]
 8019038:	f023 0320 	bic.w	r3, r3, #32
 801903c:	6023      	str	r3, [r4, #0]
 801903e:	e7f6      	b.n	801902e <_printf_i+0x196>
 8019040:	4616      	mov	r6, r2
 8019042:	e7bd      	b.n	8018fc0 <_printf_i+0x128>
 8019044:	6833      	ldr	r3, [r6, #0]
 8019046:	6825      	ldr	r5, [r4, #0]
 8019048:	6961      	ldr	r1, [r4, #20]
 801904a:	1d18      	adds	r0, r3, #4
 801904c:	6030      	str	r0, [r6, #0]
 801904e:	062e      	lsls	r6, r5, #24
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	d501      	bpl.n	8019058 <_printf_i+0x1c0>
 8019054:	6019      	str	r1, [r3, #0]
 8019056:	e002      	b.n	801905e <_printf_i+0x1c6>
 8019058:	0668      	lsls	r0, r5, #25
 801905a:	d5fb      	bpl.n	8019054 <_printf_i+0x1bc>
 801905c:	8019      	strh	r1, [r3, #0]
 801905e:	2300      	movs	r3, #0
 8019060:	6123      	str	r3, [r4, #16]
 8019062:	4616      	mov	r6, r2
 8019064:	e7bc      	b.n	8018fe0 <_printf_i+0x148>
 8019066:	6833      	ldr	r3, [r6, #0]
 8019068:	1d1a      	adds	r2, r3, #4
 801906a:	6032      	str	r2, [r6, #0]
 801906c:	681e      	ldr	r6, [r3, #0]
 801906e:	6862      	ldr	r2, [r4, #4]
 8019070:	2100      	movs	r1, #0
 8019072:	4630      	mov	r0, r6
 8019074:	f7e7 f8cc 	bl	8000210 <memchr>
 8019078:	b108      	cbz	r0, 801907e <_printf_i+0x1e6>
 801907a:	1b80      	subs	r0, r0, r6
 801907c:	6060      	str	r0, [r4, #4]
 801907e:	6863      	ldr	r3, [r4, #4]
 8019080:	6123      	str	r3, [r4, #16]
 8019082:	2300      	movs	r3, #0
 8019084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019088:	e7aa      	b.n	8018fe0 <_printf_i+0x148>
 801908a:	6923      	ldr	r3, [r4, #16]
 801908c:	4632      	mov	r2, r6
 801908e:	4649      	mov	r1, r9
 8019090:	4640      	mov	r0, r8
 8019092:	47d0      	blx	sl
 8019094:	3001      	adds	r0, #1
 8019096:	d0ad      	beq.n	8018ff4 <_printf_i+0x15c>
 8019098:	6823      	ldr	r3, [r4, #0]
 801909a:	079b      	lsls	r3, r3, #30
 801909c:	d413      	bmi.n	80190c6 <_printf_i+0x22e>
 801909e:	68e0      	ldr	r0, [r4, #12]
 80190a0:	9b03      	ldr	r3, [sp, #12]
 80190a2:	4298      	cmp	r0, r3
 80190a4:	bfb8      	it	lt
 80190a6:	4618      	movlt	r0, r3
 80190a8:	e7a6      	b.n	8018ff8 <_printf_i+0x160>
 80190aa:	2301      	movs	r3, #1
 80190ac:	4632      	mov	r2, r6
 80190ae:	4649      	mov	r1, r9
 80190b0:	4640      	mov	r0, r8
 80190b2:	47d0      	blx	sl
 80190b4:	3001      	adds	r0, #1
 80190b6:	d09d      	beq.n	8018ff4 <_printf_i+0x15c>
 80190b8:	3501      	adds	r5, #1
 80190ba:	68e3      	ldr	r3, [r4, #12]
 80190bc:	9903      	ldr	r1, [sp, #12]
 80190be:	1a5b      	subs	r3, r3, r1
 80190c0:	42ab      	cmp	r3, r5
 80190c2:	dcf2      	bgt.n	80190aa <_printf_i+0x212>
 80190c4:	e7eb      	b.n	801909e <_printf_i+0x206>
 80190c6:	2500      	movs	r5, #0
 80190c8:	f104 0619 	add.w	r6, r4, #25
 80190cc:	e7f5      	b.n	80190ba <_printf_i+0x222>
 80190ce:	bf00      	nop
 80190d0:	0801a71b 	.word	0x0801a71b
 80190d4:	0801a72c 	.word	0x0801a72c

080190d8 <__sflush_r>:
 80190d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80190dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e0:	0716      	lsls	r6, r2, #28
 80190e2:	4605      	mov	r5, r0
 80190e4:	460c      	mov	r4, r1
 80190e6:	d454      	bmi.n	8019192 <__sflush_r+0xba>
 80190e8:	684b      	ldr	r3, [r1, #4]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	dc02      	bgt.n	80190f4 <__sflush_r+0x1c>
 80190ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	dd48      	ble.n	8019186 <__sflush_r+0xae>
 80190f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80190f6:	2e00      	cmp	r6, #0
 80190f8:	d045      	beq.n	8019186 <__sflush_r+0xae>
 80190fa:	2300      	movs	r3, #0
 80190fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019100:	682f      	ldr	r7, [r5, #0]
 8019102:	6a21      	ldr	r1, [r4, #32]
 8019104:	602b      	str	r3, [r5, #0]
 8019106:	d030      	beq.n	801916a <__sflush_r+0x92>
 8019108:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801910a:	89a3      	ldrh	r3, [r4, #12]
 801910c:	0759      	lsls	r1, r3, #29
 801910e:	d505      	bpl.n	801911c <__sflush_r+0x44>
 8019110:	6863      	ldr	r3, [r4, #4]
 8019112:	1ad2      	subs	r2, r2, r3
 8019114:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019116:	b10b      	cbz	r3, 801911c <__sflush_r+0x44>
 8019118:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801911a:	1ad2      	subs	r2, r2, r3
 801911c:	2300      	movs	r3, #0
 801911e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019120:	6a21      	ldr	r1, [r4, #32]
 8019122:	4628      	mov	r0, r5
 8019124:	47b0      	blx	r6
 8019126:	1c43      	adds	r3, r0, #1
 8019128:	89a3      	ldrh	r3, [r4, #12]
 801912a:	d106      	bne.n	801913a <__sflush_r+0x62>
 801912c:	6829      	ldr	r1, [r5, #0]
 801912e:	291d      	cmp	r1, #29
 8019130:	d82b      	bhi.n	801918a <__sflush_r+0xb2>
 8019132:	4a2a      	ldr	r2, [pc, #168]	@ (80191dc <__sflush_r+0x104>)
 8019134:	410a      	asrs	r2, r1
 8019136:	07d6      	lsls	r6, r2, #31
 8019138:	d427      	bmi.n	801918a <__sflush_r+0xb2>
 801913a:	2200      	movs	r2, #0
 801913c:	6062      	str	r2, [r4, #4]
 801913e:	04d9      	lsls	r1, r3, #19
 8019140:	6922      	ldr	r2, [r4, #16]
 8019142:	6022      	str	r2, [r4, #0]
 8019144:	d504      	bpl.n	8019150 <__sflush_r+0x78>
 8019146:	1c42      	adds	r2, r0, #1
 8019148:	d101      	bne.n	801914e <__sflush_r+0x76>
 801914a:	682b      	ldr	r3, [r5, #0]
 801914c:	b903      	cbnz	r3, 8019150 <__sflush_r+0x78>
 801914e:	6560      	str	r0, [r4, #84]	@ 0x54
 8019150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019152:	602f      	str	r7, [r5, #0]
 8019154:	b1b9      	cbz	r1, 8019186 <__sflush_r+0xae>
 8019156:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801915a:	4299      	cmp	r1, r3
 801915c:	d002      	beq.n	8019164 <__sflush_r+0x8c>
 801915e:	4628      	mov	r0, r5
 8019160:	f7ff fb40 	bl	80187e4 <_free_r>
 8019164:	2300      	movs	r3, #0
 8019166:	6363      	str	r3, [r4, #52]	@ 0x34
 8019168:	e00d      	b.n	8019186 <__sflush_r+0xae>
 801916a:	2301      	movs	r3, #1
 801916c:	4628      	mov	r0, r5
 801916e:	47b0      	blx	r6
 8019170:	4602      	mov	r2, r0
 8019172:	1c50      	adds	r0, r2, #1
 8019174:	d1c9      	bne.n	801910a <__sflush_r+0x32>
 8019176:	682b      	ldr	r3, [r5, #0]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d0c6      	beq.n	801910a <__sflush_r+0x32>
 801917c:	2b1d      	cmp	r3, #29
 801917e:	d001      	beq.n	8019184 <__sflush_r+0xac>
 8019180:	2b16      	cmp	r3, #22
 8019182:	d11e      	bne.n	80191c2 <__sflush_r+0xea>
 8019184:	602f      	str	r7, [r5, #0]
 8019186:	2000      	movs	r0, #0
 8019188:	e022      	b.n	80191d0 <__sflush_r+0xf8>
 801918a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801918e:	b21b      	sxth	r3, r3
 8019190:	e01b      	b.n	80191ca <__sflush_r+0xf2>
 8019192:	690f      	ldr	r7, [r1, #16]
 8019194:	2f00      	cmp	r7, #0
 8019196:	d0f6      	beq.n	8019186 <__sflush_r+0xae>
 8019198:	0793      	lsls	r3, r2, #30
 801919a:	680e      	ldr	r6, [r1, #0]
 801919c:	bf08      	it	eq
 801919e:	694b      	ldreq	r3, [r1, #20]
 80191a0:	600f      	str	r7, [r1, #0]
 80191a2:	bf18      	it	ne
 80191a4:	2300      	movne	r3, #0
 80191a6:	eba6 0807 	sub.w	r8, r6, r7
 80191aa:	608b      	str	r3, [r1, #8]
 80191ac:	f1b8 0f00 	cmp.w	r8, #0
 80191b0:	dde9      	ble.n	8019186 <__sflush_r+0xae>
 80191b2:	6a21      	ldr	r1, [r4, #32]
 80191b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80191b6:	4643      	mov	r3, r8
 80191b8:	463a      	mov	r2, r7
 80191ba:	4628      	mov	r0, r5
 80191bc:	47b0      	blx	r6
 80191be:	2800      	cmp	r0, #0
 80191c0:	dc08      	bgt.n	80191d4 <__sflush_r+0xfc>
 80191c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80191ca:	81a3      	strh	r3, [r4, #12]
 80191cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80191d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191d4:	4407      	add	r7, r0
 80191d6:	eba8 0800 	sub.w	r8, r8, r0
 80191da:	e7e7      	b.n	80191ac <__sflush_r+0xd4>
 80191dc:	dfbffffe 	.word	0xdfbffffe

080191e0 <_fflush_r>:
 80191e0:	b538      	push	{r3, r4, r5, lr}
 80191e2:	690b      	ldr	r3, [r1, #16]
 80191e4:	4605      	mov	r5, r0
 80191e6:	460c      	mov	r4, r1
 80191e8:	b913      	cbnz	r3, 80191f0 <_fflush_r+0x10>
 80191ea:	2500      	movs	r5, #0
 80191ec:	4628      	mov	r0, r5
 80191ee:	bd38      	pop	{r3, r4, r5, pc}
 80191f0:	b118      	cbz	r0, 80191fa <_fflush_r+0x1a>
 80191f2:	6a03      	ldr	r3, [r0, #32]
 80191f4:	b90b      	cbnz	r3, 80191fa <_fflush_r+0x1a>
 80191f6:	f7fe ff85 	bl	8018104 <__sinit>
 80191fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d0f3      	beq.n	80191ea <_fflush_r+0xa>
 8019202:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019204:	07d0      	lsls	r0, r2, #31
 8019206:	d404      	bmi.n	8019212 <_fflush_r+0x32>
 8019208:	0599      	lsls	r1, r3, #22
 801920a:	d402      	bmi.n	8019212 <_fflush_r+0x32>
 801920c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801920e:	f7ff faa6 	bl	801875e <__retarget_lock_acquire_recursive>
 8019212:	4628      	mov	r0, r5
 8019214:	4621      	mov	r1, r4
 8019216:	f7ff ff5f 	bl	80190d8 <__sflush_r>
 801921a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801921c:	07da      	lsls	r2, r3, #31
 801921e:	4605      	mov	r5, r0
 8019220:	d4e4      	bmi.n	80191ec <_fflush_r+0xc>
 8019222:	89a3      	ldrh	r3, [r4, #12]
 8019224:	059b      	lsls	r3, r3, #22
 8019226:	d4e1      	bmi.n	80191ec <_fflush_r+0xc>
 8019228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801922a:	f7ff fa99 	bl	8018760 <__retarget_lock_release_recursive>
 801922e:	e7dd      	b.n	80191ec <_fflush_r+0xc>

08019230 <fiprintf>:
 8019230:	b40e      	push	{r1, r2, r3}
 8019232:	b503      	push	{r0, r1, lr}
 8019234:	4601      	mov	r1, r0
 8019236:	ab03      	add	r3, sp, #12
 8019238:	4805      	ldr	r0, [pc, #20]	@ (8019250 <fiprintf+0x20>)
 801923a:	f853 2b04 	ldr.w	r2, [r3], #4
 801923e:	6800      	ldr	r0, [r0, #0]
 8019240:	9301      	str	r3, [sp, #4]
 8019242:	f7ff fca3 	bl	8018b8c <_vfiprintf_r>
 8019246:	b002      	add	sp, #8
 8019248:	f85d eb04 	ldr.w	lr, [sp], #4
 801924c:	b003      	add	sp, #12
 801924e:	4770      	bx	lr
 8019250:	200006d0 	.word	0x200006d0

08019254 <__swhatbuf_r>:
 8019254:	b570      	push	{r4, r5, r6, lr}
 8019256:	460c      	mov	r4, r1
 8019258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801925c:	2900      	cmp	r1, #0
 801925e:	b096      	sub	sp, #88	@ 0x58
 8019260:	4615      	mov	r5, r2
 8019262:	461e      	mov	r6, r3
 8019264:	da0d      	bge.n	8019282 <__swhatbuf_r+0x2e>
 8019266:	89a3      	ldrh	r3, [r4, #12]
 8019268:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801926c:	f04f 0100 	mov.w	r1, #0
 8019270:	bf14      	ite	ne
 8019272:	2340      	movne	r3, #64	@ 0x40
 8019274:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019278:	2000      	movs	r0, #0
 801927a:	6031      	str	r1, [r6, #0]
 801927c:	602b      	str	r3, [r5, #0]
 801927e:	b016      	add	sp, #88	@ 0x58
 8019280:	bd70      	pop	{r4, r5, r6, pc}
 8019282:	466a      	mov	r2, sp
 8019284:	f000 f848 	bl	8019318 <_fstat_r>
 8019288:	2800      	cmp	r0, #0
 801928a:	dbec      	blt.n	8019266 <__swhatbuf_r+0x12>
 801928c:	9901      	ldr	r1, [sp, #4]
 801928e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019292:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019296:	4259      	negs	r1, r3
 8019298:	4159      	adcs	r1, r3
 801929a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801929e:	e7eb      	b.n	8019278 <__swhatbuf_r+0x24>

080192a0 <__smakebuf_r>:
 80192a0:	898b      	ldrh	r3, [r1, #12]
 80192a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192a4:	079d      	lsls	r5, r3, #30
 80192a6:	4606      	mov	r6, r0
 80192a8:	460c      	mov	r4, r1
 80192aa:	d507      	bpl.n	80192bc <__smakebuf_r+0x1c>
 80192ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80192b0:	6023      	str	r3, [r4, #0]
 80192b2:	6123      	str	r3, [r4, #16]
 80192b4:	2301      	movs	r3, #1
 80192b6:	6163      	str	r3, [r4, #20]
 80192b8:	b003      	add	sp, #12
 80192ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192bc:	ab01      	add	r3, sp, #4
 80192be:	466a      	mov	r2, sp
 80192c0:	f7ff ffc8 	bl	8019254 <__swhatbuf_r>
 80192c4:	9f00      	ldr	r7, [sp, #0]
 80192c6:	4605      	mov	r5, r0
 80192c8:	4639      	mov	r1, r7
 80192ca:	4630      	mov	r0, r6
 80192cc:	f7fe fce8 	bl	8017ca0 <_malloc_r>
 80192d0:	b948      	cbnz	r0, 80192e6 <__smakebuf_r+0x46>
 80192d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192d6:	059a      	lsls	r2, r3, #22
 80192d8:	d4ee      	bmi.n	80192b8 <__smakebuf_r+0x18>
 80192da:	f023 0303 	bic.w	r3, r3, #3
 80192de:	f043 0302 	orr.w	r3, r3, #2
 80192e2:	81a3      	strh	r3, [r4, #12]
 80192e4:	e7e2      	b.n	80192ac <__smakebuf_r+0xc>
 80192e6:	89a3      	ldrh	r3, [r4, #12]
 80192e8:	6020      	str	r0, [r4, #0]
 80192ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80192ee:	81a3      	strh	r3, [r4, #12]
 80192f0:	9b01      	ldr	r3, [sp, #4]
 80192f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80192f6:	b15b      	cbz	r3, 8019310 <__smakebuf_r+0x70>
 80192f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80192fc:	4630      	mov	r0, r6
 80192fe:	f000 f81d 	bl	801933c <_isatty_r>
 8019302:	b128      	cbz	r0, 8019310 <__smakebuf_r+0x70>
 8019304:	89a3      	ldrh	r3, [r4, #12]
 8019306:	f023 0303 	bic.w	r3, r3, #3
 801930a:	f043 0301 	orr.w	r3, r3, #1
 801930e:	81a3      	strh	r3, [r4, #12]
 8019310:	89a3      	ldrh	r3, [r4, #12]
 8019312:	431d      	orrs	r5, r3
 8019314:	81a5      	strh	r5, [r4, #12]
 8019316:	e7cf      	b.n	80192b8 <__smakebuf_r+0x18>

08019318 <_fstat_r>:
 8019318:	b538      	push	{r3, r4, r5, lr}
 801931a:	4d07      	ldr	r5, [pc, #28]	@ (8019338 <_fstat_r+0x20>)
 801931c:	2300      	movs	r3, #0
 801931e:	4604      	mov	r4, r0
 8019320:	4608      	mov	r0, r1
 8019322:	4611      	mov	r1, r2
 8019324:	602b      	str	r3, [r5, #0]
 8019326:	f7e9 fb13 	bl	8002950 <_fstat>
 801932a:	1c43      	adds	r3, r0, #1
 801932c:	d102      	bne.n	8019334 <_fstat_r+0x1c>
 801932e:	682b      	ldr	r3, [r5, #0]
 8019330:	b103      	cbz	r3, 8019334 <_fstat_r+0x1c>
 8019332:	6023      	str	r3, [r4, #0]
 8019334:	bd38      	pop	{r3, r4, r5, pc}
 8019336:	bf00      	nop
 8019338:	2000e354 	.word	0x2000e354

0801933c <_isatty_r>:
 801933c:	b538      	push	{r3, r4, r5, lr}
 801933e:	4d06      	ldr	r5, [pc, #24]	@ (8019358 <_isatty_r+0x1c>)
 8019340:	2300      	movs	r3, #0
 8019342:	4604      	mov	r4, r0
 8019344:	4608      	mov	r0, r1
 8019346:	602b      	str	r3, [r5, #0]
 8019348:	f7e9 fb12 	bl	8002970 <_isatty>
 801934c:	1c43      	adds	r3, r0, #1
 801934e:	d102      	bne.n	8019356 <_isatty_r+0x1a>
 8019350:	682b      	ldr	r3, [r5, #0]
 8019352:	b103      	cbz	r3, 8019356 <_isatty_r+0x1a>
 8019354:	6023      	str	r3, [r4, #0]
 8019356:	bd38      	pop	{r3, r4, r5, pc}
 8019358:	2000e354 	.word	0x2000e354

0801935c <abort>:
 801935c:	b508      	push	{r3, lr}
 801935e:	2006      	movs	r0, #6
 8019360:	f000 f82c 	bl	80193bc <raise>
 8019364:	2001      	movs	r0, #1
 8019366:	f7e9 faa3 	bl	80028b0 <_exit>

0801936a <_raise_r>:
 801936a:	291f      	cmp	r1, #31
 801936c:	b538      	push	{r3, r4, r5, lr}
 801936e:	4605      	mov	r5, r0
 8019370:	460c      	mov	r4, r1
 8019372:	d904      	bls.n	801937e <_raise_r+0x14>
 8019374:	2316      	movs	r3, #22
 8019376:	6003      	str	r3, [r0, #0]
 8019378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801937c:	bd38      	pop	{r3, r4, r5, pc}
 801937e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019380:	b112      	cbz	r2, 8019388 <_raise_r+0x1e>
 8019382:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019386:	b94b      	cbnz	r3, 801939c <_raise_r+0x32>
 8019388:	4628      	mov	r0, r5
 801938a:	f000 f831 	bl	80193f0 <_getpid_r>
 801938e:	4622      	mov	r2, r4
 8019390:	4601      	mov	r1, r0
 8019392:	4628      	mov	r0, r5
 8019394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019398:	f000 b818 	b.w	80193cc <_kill_r>
 801939c:	2b01      	cmp	r3, #1
 801939e:	d00a      	beq.n	80193b6 <_raise_r+0x4c>
 80193a0:	1c59      	adds	r1, r3, #1
 80193a2:	d103      	bne.n	80193ac <_raise_r+0x42>
 80193a4:	2316      	movs	r3, #22
 80193a6:	6003      	str	r3, [r0, #0]
 80193a8:	2001      	movs	r0, #1
 80193aa:	e7e7      	b.n	801937c <_raise_r+0x12>
 80193ac:	2100      	movs	r1, #0
 80193ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80193b2:	4620      	mov	r0, r4
 80193b4:	4798      	blx	r3
 80193b6:	2000      	movs	r0, #0
 80193b8:	e7e0      	b.n	801937c <_raise_r+0x12>
	...

080193bc <raise>:
 80193bc:	4b02      	ldr	r3, [pc, #8]	@ (80193c8 <raise+0xc>)
 80193be:	4601      	mov	r1, r0
 80193c0:	6818      	ldr	r0, [r3, #0]
 80193c2:	f7ff bfd2 	b.w	801936a <_raise_r>
 80193c6:	bf00      	nop
 80193c8:	200006d0 	.word	0x200006d0

080193cc <_kill_r>:
 80193cc:	b538      	push	{r3, r4, r5, lr}
 80193ce:	4d07      	ldr	r5, [pc, #28]	@ (80193ec <_kill_r+0x20>)
 80193d0:	2300      	movs	r3, #0
 80193d2:	4604      	mov	r4, r0
 80193d4:	4608      	mov	r0, r1
 80193d6:	4611      	mov	r1, r2
 80193d8:	602b      	str	r3, [r5, #0]
 80193da:	f7e9 fa59 	bl	8002890 <_kill>
 80193de:	1c43      	adds	r3, r0, #1
 80193e0:	d102      	bne.n	80193e8 <_kill_r+0x1c>
 80193e2:	682b      	ldr	r3, [r5, #0]
 80193e4:	b103      	cbz	r3, 80193e8 <_kill_r+0x1c>
 80193e6:	6023      	str	r3, [r4, #0]
 80193e8:	bd38      	pop	{r3, r4, r5, pc}
 80193ea:	bf00      	nop
 80193ec:	2000e354 	.word	0x2000e354

080193f0 <_getpid_r>:
 80193f0:	f7e9 ba46 	b.w	8002880 <_getpid>

080193f4 <_init>:
 80193f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193f6:	bf00      	nop
 80193f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193fa:	bc08      	pop	{r3}
 80193fc:	469e      	mov	lr, r3
 80193fe:	4770      	bx	lr

08019400 <_fini>:
 8019400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019402:	bf00      	nop
 8019404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019406:	bc08      	pop	{r3}
 8019408:	469e      	mov	lr, r3
 801940a:	4770      	bx	lr
